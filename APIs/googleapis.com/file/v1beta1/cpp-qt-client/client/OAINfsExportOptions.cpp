/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINfsExportOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINfsExportOptions::OAINfsExportOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINfsExportOptions::OAINfsExportOptions() {
    this->initializeModel();
}

OAINfsExportOptions::~OAINfsExportOptions() {}

void OAINfsExportOptions::initializeModel() {

    m_access_mode_isSet = false;
    m_access_mode_isValid = false;

    m_anon_gid_isSet = false;
    m_anon_gid_isValid = false;

    m_anon_uid_isSet = false;
    m_anon_uid_isValid = false;

    m_ip_ranges_isSet = false;
    m_ip_ranges_isValid = false;

    m_security_flavors_isSet = false;
    m_security_flavors_isValid = false;

    m_squash_mode_isSet = false;
    m_squash_mode_isValid = false;
}

void OAINfsExportOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINfsExportOptions::fromJsonObject(QJsonObject json) {

    m_access_mode_isValid = ::OpenAPI::fromJsonValue(m_access_mode, json[QString("accessMode")]);
    m_access_mode_isSet = !json[QString("accessMode")].isNull() && m_access_mode_isValid;

    m_anon_gid_isValid = ::OpenAPI::fromJsonValue(m_anon_gid, json[QString("anonGid")]);
    m_anon_gid_isSet = !json[QString("anonGid")].isNull() && m_anon_gid_isValid;

    m_anon_uid_isValid = ::OpenAPI::fromJsonValue(m_anon_uid, json[QString("anonUid")]);
    m_anon_uid_isSet = !json[QString("anonUid")].isNull() && m_anon_uid_isValid;

    m_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_ip_ranges, json[QString("ipRanges")]);
    m_ip_ranges_isSet = !json[QString("ipRanges")].isNull() && m_ip_ranges_isValid;

    m_security_flavors_isValid = ::OpenAPI::fromJsonValue(m_security_flavors, json[QString("securityFlavors")]);
    m_security_flavors_isSet = !json[QString("securityFlavors")].isNull() && m_security_flavors_isValid;

    m_squash_mode_isValid = ::OpenAPI::fromJsonValue(m_squash_mode, json[QString("squashMode")]);
    m_squash_mode_isSet = !json[QString("squashMode")].isNull() && m_squash_mode_isValid;
}

QString OAINfsExportOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINfsExportOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_access_mode_isSet) {
        obj.insert(QString("accessMode"), ::OpenAPI::toJsonValue(m_access_mode));
    }
    if (m_anon_gid_isSet) {
        obj.insert(QString("anonGid"), ::OpenAPI::toJsonValue(m_anon_gid));
    }
    if (m_anon_uid_isSet) {
        obj.insert(QString("anonUid"), ::OpenAPI::toJsonValue(m_anon_uid));
    }
    if (m_ip_ranges.size() > 0) {
        obj.insert(QString("ipRanges"), ::OpenAPI::toJsonValue(m_ip_ranges));
    }
    if (m_security_flavors.size() > 0) {
        obj.insert(QString("securityFlavors"), ::OpenAPI::toJsonValue(m_security_flavors));
    }
    if (m_squash_mode_isSet) {
        obj.insert(QString("squashMode"), ::OpenAPI::toJsonValue(m_squash_mode));
    }
    return obj;
}

QString OAINfsExportOptions::getAccessMode() const {
    return m_access_mode;
}
void OAINfsExportOptions::setAccessMode(const QString &access_mode) {
    m_access_mode = access_mode;
    m_access_mode_isSet = true;
}

bool OAINfsExportOptions::is_access_mode_Set() const{
    return m_access_mode_isSet;
}

bool OAINfsExportOptions::is_access_mode_Valid() const{
    return m_access_mode_isValid;
}

QString OAINfsExportOptions::getAnonGid() const {
    return m_anon_gid;
}
void OAINfsExportOptions::setAnonGid(const QString &anon_gid) {
    m_anon_gid = anon_gid;
    m_anon_gid_isSet = true;
}

bool OAINfsExportOptions::is_anon_gid_Set() const{
    return m_anon_gid_isSet;
}

bool OAINfsExportOptions::is_anon_gid_Valid() const{
    return m_anon_gid_isValid;
}

QString OAINfsExportOptions::getAnonUid() const {
    return m_anon_uid;
}
void OAINfsExportOptions::setAnonUid(const QString &anon_uid) {
    m_anon_uid = anon_uid;
    m_anon_uid_isSet = true;
}

bool OAINfsExportOptions::is_anon_uid_Set() const{
    return m_anon_uid_isSet;
}

bool OAINfsExportOptions::is_anon_uid_Valid() const{
    return m_anon_uid_isValid;
}

QList<QString> OAINfsExportOptions::getIpRanges() const {
    return m_ip_ranges;
}
void OAINfsExportOptions::setIpRanges(const QList<QString> &ip_ranges) {
    m_ip_ranges = ip_ranges;
    m_ip_ranges_isSet = true;
}

bool OAINfsExportOptions::is_ip_ranges_Set() const{
    return m_ip_ranges_isSet;
}

bool OAINfsExportOptions::is_ip_ranges_Valid() const{
    return m_ip_ranges_isValid;
}

QList<QString> OAINfsExportOptions::getSecurityFlavors() const {
    return m_security_flavors;
}
void OAINfsExportOptions::setSecurityFlavors(const QList<QString> &security_flavors) {
    m_security_flavors = security_flavors;
    m_security_flavors_isSet = true;
}

bool OAINfsExportOptions::is_security_flavors_Set() const{
    return m_security_flavors_isSet;
}

bool OAINfsExportOptions::is_security_flavors_Valid() const{
    return m_security_flavors_isValid;
}

QString OAINfsExportOptions::getSquashMode() const {
    return m_squash_mode;
}
void OAINfsExportOptions::setSquashMode(const QString &squash_mode) {
    m_squash_mode = squash_mode;
    m_squash_mode_isSet = true;
}

bool OAINfsExportOptions::is_squash_mode_Set() const{
    return m_squash_mode_isSet;
}

bool OAINfsExportOptions::is_squash_mode_Valid() const{
    return m_squash_mode_isValid;
}

bool OAINfsExportOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anon_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anon_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_squash_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINfsExportOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
