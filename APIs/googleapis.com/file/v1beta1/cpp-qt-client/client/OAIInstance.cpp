/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_capacity_gb_isSet = false;
    m_capacity_gb_isValid = false;

    m_capacity_step_size_gb_isSet = false;
    m_capacity_step_size_gb_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_directory_services_isSet = false;
    m_directory_services_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_file_shares_isSet = false;
    m_file_shares_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_capacity_gb_isSet = false;
    m_max_capacity_gb_isValid = false;

    m_max_share_count_isSet = false;
    m_max_share_count_isValid = false;

    m_multi_share_enabled_isSet = false;
    m_multi_share_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_satisfies_pzi_isSet = false;
    m_satisfies_pzi_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_suspension_reasons_isSet = false;
    m_suspension_reasons_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_capacity_gb, json[QString("capacityGb")]);
    m_capacity_gb_isSet = !json[QString("capacityGb")].isNull() && m_capacity_gb_isValid;

    m_capacity_step_size_gb_isValid = ::OpenAPI::fromJsonValue(m_capacity_step_size_gb, json[QString("capacityStepSizeGb")]);
    m_capacity_step_size_gb_isSet = !json[QString("capacityStepSizeGb")].isNull() && m_capacity_step_size_gb_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_directory_services_isValid = ::OpenAPI::fromJsonValue(m_directory_services, json[QString("directoryServices")]);
    m_directory_services_isSet = !json[QString("directoryServices")].isNull() && m_directory_services_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_file_shares_isValid = ::OpenAPI::fromJsonValue(m_file_shares, json[QString("fileShares")]);
    m_file_shares_isSet = !json[QString("fileShares")].isNull() && m_file_shares_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_max_capacity_gb, json[QString("maxCapacityGb")]);
    m_max_capacity_gb_isSet = !json[QString("maxCapacityGb")].isNull() && m_max_capacity_gb_isValid;

    m_max_share_count_isValid = ::OpenAPI::fromJsonValue(m_max_share_count, json[QString("maxShareCount")]);
    m_max_share_count_isSet = !json[QString("maxShareCount")].isNull() && m_max_share_count_isValid;

    m_multi_share_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_share_enabled, json[QString("multiShareEnabled")]);
    m_multi_share_enabled_isSet = !json[QString("multiShareEnabled")].isNull() && m_multi_share_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_satisfies_pzi_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzi, json[QString("satisfiesPzi")]);
    m_satisfies_pzi_isSet = !json[QString("satisfiesPzi")].isNull() && m_satisfies_pzi_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_suspension_reasons_isValid = ::OpenAPI::fromJsonValue(m_suspension_reasons, json[QString("suspensionReasons")]);
    m_suspension_reasons_isSet = !json[QString("suspensionReasons")].isNull() && m_suspension_reasons_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_gb_isSet) {
        obj.insert(QString("capacityGb"), ::OpenAPI::toJsonValue(m_capacity_gb));
    }
    if (m_capacity_step_size_gb_isSet) {
        obj.insert(QString("capacityStepSizeGb"), ::OpenAPI::toJsonValue(m_capacity_step_size_gb));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_directory_services.isSet()) {
        obj.insert(QString("directoryServices"), ::OpenAPI::toJsonValue(m_directory_services));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_file_shares.size() > 0) {
        obj.insert(QString("fileShares"), ::OpenAPI::toJsonValue(m_file_shares));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_capacity_gb_isSet) {
        obj.insert(QString("maxCapacityGb"), ::OpenAPI::toJsonValue(m_max_capacity_gb));
    }
    if (m_max_share_count_isSet) {
        obj.insert(QString("maxShareCount"), ::OpenAPI::toJsonValue(m_max_share_count));
    }
    if (m_multi_share_enabled_isSet) {
        obj.insert(QString("multiShareEnabled"), ::OpenAPI::toJsonValue(m_multi_share_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_satisfies_pzi_isSet) {
        obj.insert(QString("satisfiesPzi"), ::OpenAPI::toJsonValue(m_satisfies_pzi));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_suspension_reasons.size() > 0) {
        obj.insert(QString("suspensionReasons"), ::OpenAPI::toJsonValue(m_suspension_reasons));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAIInstance::getCapacityGb() const {
    return m_capacity_gb;
}
void OAIInstance::setCapacityGb(const QString &capacity_gb) {
    m_capacity_gb = capacity_gb;
    m_capacity_gb_isSet = true;
}

bool OAIInstance::is_capacity_gb_Set() const{
    return m_capacity_gb_isSet;
}

bool OAIInstance::is_capacity_gb_Valid() const{
    return m_capacity_gb_isValid;
}

QString OAIInstance::getCapacityStepSizeGb() const {
    return m_capacity_step_size_gb;
}
void OAIInstance::setCapacityStepSizeGb(const QString &capacity_step_size_gb) {
    m_capacity_step_size_gb = capacity_step_size_gb;
    m_capacity_step_size_gb_isSet = true;
}

bool OAIInstance::is_capacity_step_size_gb_Set() const{
    return m_capacity_step_size_gb_isSet;
}

bool OAIInstance::is_capacity_step_size_gb_Valid() const{
    return m_capacity_step_size_gb_isValid;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInstance::getDescription() const {
    return m_description;
}
void OAIInstance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInstance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInstance::is_description_Valid() const{
    return m_description_isValid;
}

OAIDirectoryServicesConfig OAIInstance::getDirectoryServices() const {
    return m_directory_services;
}
void OAIInstance::setDirectoryServices(const OAIDirectoryServicesConfig &directory_services) {
    m_directory_services = directory_services;
    m_directory_services_isSet = true;
}

bool OAIInstance::is_directory_services_Set() const{
    return m_directory_services_isSet;
}

bool OAIInstance::is_directory_services_Valid() const{
    return m_directory_services_isValid;
}

QString OAIInstance::getEtag() const {
    return m_etag;
}
void OAIInstance::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIInstance::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIInstance::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIFileShareConfig> OAIInstance::getFileShares() const {
    return m_file_shares;
}
void OAIInstance::setFileShares(const QList<OAIFileShareConfig> &file_shares) {
    m_file_shares = file_shares;
    m_file_shares_isSet = true;
}

bool OAIInstance::is_file_shares_Set() const{
    return m_file_shares_isSet;
}

bool OAIInstance::is_file_shares_Valid() const{
    return m_file_shares_isValid;
}

QString OAIInstance::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIInstance::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIInstance::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIInstance::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QString> OAIInstance::getLabels() const {
    return m_labels;
}
void OAIInstance::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIInstance::getMaxCapacityGb() const {
    return m_max_capacity_gb;
}
void OAIInstance::setMaxCapacityGb(const QString &max_capacity_gb) {
    m_max_capacity_gb = max_capacity_gb;
    m_max_capacity_gb_isSet = true;
}

bool OAIInstance::is_max_capacity_gb_Set() const{
    return m_max_capacity_gb_isSet;
}

bool OAIInstance::is_max_capacity_gb_Valid() const{
    return m_max_capacity_gb_isValid;
}

QString OAIInstance::getMaxShareCount() const {
    return m_max_share_count;
}
void OAIInstance::setMaxShareCount(const QString &max_share_count) {
    m_max_share_count = max_share_count;
    m_max_share_count_isSet = true;
}

bool OAIInstance::is_max_share_count_Set() const{
    return m_max_share_count_isSet;
}

bool OAIInstance::is_max_share_count_Valid() const{
    return m_max_share_count_isValid;
}

bool OAIInstance::isMultiShareEnabled() const {
    return m_multi_share_enabled;
}
void OAIInstance::setMultiShareEnabled(const bool &multi_share_enabled) {
    m_multi_share_enabled = multi_share_enabled;
    m_multi_share_enabled_isSet = true;
}

bool OAIInstance::is_multi_share_enabled_Set() const{
    return m_multi_share_enabled_isSet;
}

bool OAIInstance::is_multi_share_enabled_Valid() const{
    return m_multi_share_enabled_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINetworkConfig> OAIInstance::getNetworks() const {
    return m_networks;
}
void OAIInstance::setNetworks(const QList<OAINetworkConfig> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIInstance::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIInstance::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIInstance::getProtocol() const {
    return m_protocol;
}
void OAIInstance::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInstance::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInstance::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIInstance::isSatisfiesPzi() const {
    return m_satisfies_pzi;
}
void OAIInstance::setSatisfiesPzi(const bool &satisfies_pzi) {
    m_satisfies_pzi = satisfies_pzi;
    m_satisfies_pzi_isSet = true;
}

bool OAIInstance::is_satisfies_pzi_Set() const{
    return m_satisfies_pzi_isSet;
}

bool OAIInstance::is_satisfies_pzi_Valid() const{
    return m_satisfies_pzi_isValid;
}

bool OAIInstance::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIInstance::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIInstance::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIInstance::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getStatusMessage() const {
    return m_status_message;
}
void OAIInstance::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIInstance::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIInstance::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QList<QString> OAIInstance::getSuspensionReasons() const {
    return m_suspension_reasons;
}
void OAIInstance::setSuspensionReasons(const QList<QString> &suspension_reasons) {
    m_suspension_reasons = suspension_reasons;
    m_suspension_reasons_isSet = true;
}

bool OAIInstance::is_suspension_reasons_Set() const{
    return m_suspension_reasons_isSet;
}

bool OAIInstance::is_suspension_reasons_Valid() const{
    return m_suspension_reasons_isValid;
}

QString OAIInstance::getTier() const {
    return m_tier;
}
void OAIInstance::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIInstance::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIInstance::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_step_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_shares.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_share_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
