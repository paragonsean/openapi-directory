/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedActiveDirectoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedActiveDirectoryConfig::OAIManagedActiveDirectoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedActiveDirectoryConfig::OAIManagedActiveDirectoryConfig() {
    this->initializeModel();
}

OAIManagedActiveDirectoryConfig::~OAIManagedActiveDirectoryConfig() {}

void OAIManagedActiveDirectoryConfig::initializeModel() {

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;
}

void OAIManagedActiveDirectoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedActiveDirectoryConfig::fromJsonObject(QJsonObject json) {

    m_computer_isValid = ::OpenAPI::fromJsonValue(m_computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;
}

QString OAIManagedActiveDirectoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedActiveDirectoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_computer_isSet) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(m_computer));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    return obj;
}

QString OAIManagedActiveDirectoryConfig::getComputer() const {
    return m_computer;
}
void OAIManagedActiveDirectoryConfig::setComputer(const QString &computer) {
    m_computer = computer;
    m_computer_isSet = true;
}

bool OAIManagedActiveDirectoryConfig::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAIManagedActiveDirectoryConfig::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAIManagedActiveDirectoryConfig::getDomain() const {
    return m_domain;
}
void OAIManagedActiveDirectoryConfig::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIManagedActiveDirectoryConfig::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIManagedActiveDirectoryConfig::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIManagedActiveDirectoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedActiveDirectoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
