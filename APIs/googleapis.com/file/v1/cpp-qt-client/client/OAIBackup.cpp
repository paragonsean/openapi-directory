/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_capacity_gb_isSet = false;
    m_capacity_gb_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_download_bytes_isSet = false;
    m_download_bytes_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_satisfies_pzi_isSet = false;
    m_satisfies_pzi_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_source_file_share_isSet = false;
    m_source_file_share_isValid = false;

    m_source_instance_isSet = false;
    m_source_instance_isValid = false;

    m_source_instance_tier_isSet = false;
    m_source_instance_tier_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_bytes_isSet = false;
    m_storage_bytes_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_capacity_gb, json[QString("capacityGb")]);
    m_capacity_gb_isSet = !json[QString("capacityGb")].isNull() && m_capacity_gb_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_download_bytes_isValid = ::OpenAPI::fromJsonValue(m_download_bytes, json[QString("downloadBytes")]);
    m_download_bytes_isSet = !json[QString("downloadBytes")].isNull() && m_download_bytes_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_satisfies_pzi_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzi, json[QString("satisfiesPzi")]);
    m_satisfies_pzi_isSet = !json[QString("satisfiesPzi")].isNull() && m_satisfies_pzi_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_source_file_share_isValid = ::OpenAPI::fromJsonValue(m_source_file_share, json[QString("sourceFileShare")]);
    m_source_file_share_isSet = !json[QString("sourceFileShare")].isNull() && m_source_file_share_isValid;

    m_source_instance_isValid = ::OpenAPI::fromJsonValue(m_source_instance, json[QString("sourceInstance")]);
    m_source_instance_isSet = !json[QString("sourceInstance")].isNull() && m_source_instance_isValid;

    m_source_instance_tier_isValid = ::OpenAPI::fromJsonValue(m_source_instance_tier, json[QString("sourceInstanceTier")]);
    m_source_instance_tier_isSet = !json[QString("sourceInstanceTier")].isNull() && m_source_instance_tier_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_storage_bytes, json[QString("storageBytes")]);
    m_storage_bytes_isSet = !json[QString("storageBytes")].isNull() && m_storage_bytes_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_gb_isSet) {
        obj.insert(QString("capacityGb"), ::OpenAPI::toJsonValue(m_capacity_gb));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_download_bytes_isSet) {
        obj.insert(QString("downloadBytes"), ::OpenAPI::toJsonValue(m_download_bytes));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_satisfies_pzi_isSet) {
        obj.insert(QString("satisfiesPzi"), ::OpenAPI::toJsonValue(m_satisfies_pzi));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_source_file_share_isSet) {
        obj.insert(QString("sourceFileShare"), ::OpenAPI::toJsonValue(m_source_file_share));
    }
    if (m_source_instance_isSet) {
        obj.insert(QString("sourceInstance"), ::OpenAPI::toJsonValue(m_source_instance));
    }
    if (m_source_instance_tier_isSet) {
        obj.insert(QString("sourceInstanceTier"), ::OpenAPI::toJsonValue(m_source_instance_tier));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_bytes_isSet) {
        obj.insert(QString("storageBytes"), ::OpenAPI::toJsonValue(m_storage_bytes));
    }
    return obj;
}

QString OAIBackup::getCapacityGb() const {
    return m_capacity_gb;
}
void OAIBackup::setCapacityGb(const QString &capacity_gb) {
    m_capacity_gb = capacity_gb;
    m_capacity_gb_isSet = true;
}

bool OAIBackup::is_capacity_gb_Set() const{
    return m_capacity_gb_isSet;
}

bool OAIBackup::is_capacity_gb_Valid() const{
    return m_capacity_gb_isValid;
}

QString OAIBackup::getCreateTime() const {
    return m_create_time;
}
void OAIBackup::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBackup::getDescription() const {
    return m_description;
}
void OAIBackup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBackup::getDownloadBytes() const {
    return m_download_bytes;
}
void OAIBackup::setDownloadBytes(const QString &download_bytes) {
    m_download_bytes = download_bytes;
    m_download_bytes_isSet = true;
}

bool OAIBackup::is_download_bytes_Set() const{
    return m_download_bytes_isSet;
}

bool OAIBackup::is_download_bytes_Valid() const{
    return m_download_bytes_isValid;
}

QString OAIBackup::getKmsKey() const {
    return m_kms_key;
}
void OAIBackup::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIBackup::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIBackup::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QMap<QString, QString> OAIBackup::getLabels() const {
    return m_labels;
}
void OAIBackup::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBackup::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBackup::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIBackup::getName() const {
    return m_name;
}
void OAIBackup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBackup::isSatisfiesPzi() const {
    return m_satisfies_pzi;
}
void OAIBackup::setSatisfiesPzi(const bool &satisfies_pzi) {
    m_satisfies_pzi = satisfies_pzi;
    m_satisfies_pzi_isSet = true;
}

bool OAIBackup::is_satisfies_pzi_Set() const{
    return m_satisfies_pzi_isSet;
}

bool OAIBackup::is_satisfies_pzi_Valid() const{
    return m_satisfies_pzi_isValid;
}

bool OAIBackup::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIBackup::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIBackup::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIBackup::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIBackup::getSourceFileShare() const {
    return m_source_file_share;
}
void OAIBackup::setSourceFileShare(const QString &source_file_share) {
    m_source_file_share = source_file_share;
    m_source_file_share_isSet = true;
}

bool OAIBackup::is_source_file_share_Set() const{
    return m_source_file_share_isSet;
}

bool OAIBackup::is_source_file_share_Valid() const{
    return m_source_file_share_isValid;
}

QString OAIBackup::getSourceInstance() const {
    return m_source_instance;
}
void OAIBackup::setSourceInstance(const QString &source_instance) {
    m_source_instance = source_instance;
    m_source_instance_isSet = true;
}

bool OAIBackup::is_source_instance_Set() const{
    return m_source_instance_isSet;
}

bool OAIBackup::is_source_instance_Valid() const{
    return m_source_instance_isValid;
}

QString OAIBackup::getSourceInstanceTier() const {
    return m_source_instance_tier;
}
void OAIBackup::setSourceInstanceTier(const QString &source_instance_tier) {
    m_source_instance_tier = source_instance_tier;
    m_source_instance_tier_isSet = true;
}

bool OAIBackup::is_source_instance_tier_Set() const{
    return m_source_instance_tier_isSet;
}

bool OAIBackup::is_source_instance_tier_Valid() const{
    return m_source_instance_tier_isValid;
}

QString OAIBackup::getState() const {
    return m_state;
}
void OAIBackup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackup::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBackup::getStorageBytes() const {
    return m_storage_bytes;
}
void OAIBackup::setStorageBytes(const QString &storage_bytes) {
    m_storage_bytes = storage_bytes;
    m_storage_bytes_isSet = true;
}

bool OAIBackup::is_storage_bytes_Set() const{
    return m_storage_bytes_isSet;
}

bool OAIBackup::is_storage_bytes_Valid() const{
    return m_storage_bytes_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_instance_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
