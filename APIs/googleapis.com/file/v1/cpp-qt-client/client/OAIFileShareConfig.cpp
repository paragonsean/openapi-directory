/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileShareConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileShareConfig::OAIFileShareConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileShareConfig::OAIFileShareConfig() {
    this->initializeModel();
}

OAIFileShareConfig::~OAIFileShareConfig() {}

void OAIFileShareConfig::initializeModel() {

    m_capacity_gb_isSet = false;
    m_capacity_gb_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfs_export_options_isSet = false;
    m_nfs_export_options_isValid = false;

    m_source_backup_isSet = false;
    m_source_backup_isValid = false;
}

void OAIFileShareConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileShareConfig::fromJsonObject(QJsonObject json) {

    m_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_capacity_gb, json[QString("capacityGb")]);
    m_capacity_gb_isSet = !json[QString("capacityGb")].isNull() && m_capacity_gb_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfs_export_options_isValid = ::OpenAPI::fromJsonValue(m_nfs_export_options, json[QString("nfsExportOptions")]);
    m_nfs_export_options_isSet = !json[QString("nfsExportOptions")].isNull() && m_nfs_export_options_isValid;

    m_source_backup_isValid = ::OpenAPI::fromJsonValue(m_source_backup, json[QString("sourceBackup")]);
    m_source_backup_isSet = !json[QString("sourceBackup")].isNull() && m_source_backup_isValid;
}

QString OAIFileShareConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileShareConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_gb_isSet) {
        obj.insert(QString("capacityGb"), ::OpenAPI::toJsonValue(m_capacity_gb));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfs_export_options.size() > 0) {
        obj.insert(QString("nfsExportOptions"), ::OpenAPI::toJsonValue(m_nfs_export_options));
    }
    if (m_source_backup_isSet) {
        obj.insert(QString("sourceBackup"), ::OpenAPI::toJsonValue(m_source_backup));
    }
    return obj;
}

QString OAIFileShareConfig::getCapacityGb() const {
    return m_capacity_gb;
}
void OAIFileShareConfig::setCapacityGb(const QString &capacity_gb) {
    m_capacity_gb = capacity_gb;
    m_capacity_gb_isSet = true;
}

bool OAIFileShareConfig::is_capacity_gb_Set() const{
    return m_capacity_gb_isSet;
}

bool OAIFileShareConfig::is_capacity_gb_Valid() const{
    return m_capacity_gb_isValid;
}

QString OAIFileShareConfig::getName() const {
    return m_name;
}
void OAIFileShareConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFileShareConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFileShareConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINfsExportOptions> OAIFileShareConfig::getNfsExportOptions() const {
    return m_nfs_export_options;
}
void OAIFileShareConfig::setNfsExportOptions(const QList<OAINfsExportOptions> &nfs_export_options) {
    m_nfs_export_options = nfs_export_options;
    m_nfs_export_options_isSet = true;
}

bool OAIFileShareConfig::is_nfs_export_options_Set() const{
    return m_nfs_export_options_isSet;
}

bool OAIFileShareConfig::is_nfs_export_options_Valid() const{
    return m_nfs_export_options_isValid;
}

QString OAIFileShareConfig::getSourceBackup() const {
    return m_source_backup;
}
void OAIFileShareConfig::setSourceBackup(const QString &source_backup) {
    m_source_backup = source_backup;
    m_source_backup_isSet = true;
}

bool OAIFileShareConfig::is_source_backup_Set() const{
    return m_source_backup_isSet;
}

bool OAIFileShareConfig::is_source_backup_Valid() const{
    return m_source_backup_isValid;
}

bool OAIFileShareConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_export_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileShareConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
