/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filesystem_used_bytes_isSet = false;
    m_filesystem_used_bytes_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filesystem_used_bytes_isValid = ::OpenAPI::fromJsonValue(m_filesystem_used_bytes, json[QString("filesystemUsedBytes")]);
    m_filesystem_used_bytes_isSet = !json[QString("filesystemUsedBytes")].isNull() && m_filesystem_used_bytes_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filesystem_used_bytes_isSet) {
        obj.insert(QString("filesystemUsedBytes"), ::OpenAPI::toJsonValue(m_filesystem_used_bytes));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAISnapshot::getCreateTime() const {
    return m_create_time;
}
void OAISnapshot::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISnapshot::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISnapshot::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISnapshot::getDescription() const {
    return m_description;
}
void OAISnapshot::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshot::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshot::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshot::getFilesystemUsedBytes() const {
    return m_filesystem_used_bytes;
}
void OAISnapshot::setFilesystemUsedBytes(const QString &filesystem_used_bytes) {
    m_filesystem_used_bytes = filesystem_used_bytes;
    m_filesystem_used_bytes_isSet = true;
}

bool OAISnapshot::is_filesystem_used_bytes_Set() const{
    return m_filesystem_used_bytes_isSet;
}

bool OAISnapshot::is_filesystem_used_bytes_Valid() const{
    return m_filesystem_used_bytes_isValid;
}

QMap<QString, QString> OAISnapshot::getLabels() const {
    return m_labels;
}
void OAISnapshot::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISnapshot::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISnapshot::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISnapshot::getName() const {
    return m_name;
}
void OAISnapshot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISnapshot::is_name_Set() const{
    return m_name_isSet;
}

bool OAISnapshot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISnapshot::getState() const {
    return m_state;
}
void OAISnapshot::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISnapshot::is_state_Set() const{
    return m_state_isSet;
}

bool OAISnapshot::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filesystem_used_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
