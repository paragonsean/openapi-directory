/*
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FileShareConfig;
import org.openapitools.client.model.NetworkConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Filestore instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:22.341121-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FILE_SHARES = "fileShares";
  @SerializedName(SERIALIZED_NAME_FILE_SHARES)
  private List<FileShareConfig> fileShares = new ArrayList<>();

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkConfig> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SATISFIES_PZI = "satisfiesPzi";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZI)
  private Boolean satisfiesPzi;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  /**
   * Output only. The instance state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    REPAIRING("REPAIRING"),
    
    DELETING("DELETING"),
    
    ERROR("ERROR"),
    
    RESTORING("RESTORING"),
    
    SUSPENDED("SUSPENDED"),
    
    SUSPENDING("SUSPENDING"),
    
    RESUMING("RESUMING"),
    
    REVERTING("REVERTING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  /**
   * Gets or Sets suspensionReasons
   */
  @JsonAdapter(SuspensionReasonsEnum.Adapter.class)
  public enum SuspensionReasonsEnum {
    SUSPENSION_REASON_UNSPECIFIED("SUSPENSION_REASON_UNSPECIFIED"),
    
    KMS_KEY_ISSUE("KMS_KEY_ISSUE");

    private String value;

    SuspensionReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuspensionReasonsEnum fromValue(String value) {
      for (SuspensionReasonsEnum b : SuspensionReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuspensionReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuspensionReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuspensionReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuspensionReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuspensionReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUSPENSION_REASONS = "suspensionReasons";
  @SerializedName(SERIALIZED_NAME_SUSPENSION_REASONS)
  private List<SuspensionReasonsEnum> suspensionReasons = new ArrayList<>();

  /**
   * The service tier of the instance.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    PREMIUM("PREMIUM"),
    
    BASIC_HDD("BASIC_HDD"),
    
    BASIC_SSD("BASIC_SSD"),
    
    HIGH_SCALE_SSD("HIGH_SCALE_SSD"),
    
    ENTERPRISE("ENTERPRISE"),
    
    ZONAL("ZONAL"),
    
    REGIONAL("REGIONAL");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public Instance() {
  }

  public Instance(
     String createTime, 
     String name, 
     Boolean satisfiesPzi, 
     Boolean satisfiesPzs, 
     StateEnum state, 
     String statusMessage, 
     List<SuspensionReasonsEnum> suspensionReasons
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.satisfiesPzi = satisfiesPzi;
    this.satisfiesPzs = satisfiesPzs;
    this.state = state;
    this.statusMessage = statusMessage;
    this.suspensionReasons = suspensionReasons;
  }

  /**
   * Output only. The time when the instance was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Instance description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the instance (2048 characters or less).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Instance etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Instance fileShares(List<FileShareConfig> fileShares) {
    this.fileShares = fileShares;
    return this;
  }

  public Instance addFileSharesItem(FileShareConfig fileSharesItem) {
    if (this.fileShares == null) {
      this.fileShares = new ArrayList<>();
    }
    this.fileShares.add(fileSharesItem);
    return this;
  }

  /**
   * File system shares on the instance. For this version, only a single file share is supported.
   * @return fileShares
   */
  @javax.annotation.Nullable
  public List<FileShareConfig> getFileShares() {
    return fileShares;
  }

  public void setFileShares(List<FileShareConfig> fileShares) {
    this.fileShares = fileShares;
  }


  public Instance kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * KMS key name used for data encryption.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public Instance labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Instance putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The resource name of the instance, in the format &#x60;projects/{project}/locations/{location}/instances/{instance}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Instance networks(List<NetworkConfig> networks) {
    this.networks = networks;
    return this;
  }

  public Instance addNetworksItem(NetworkConfig networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * VPC networks to which the instance is connected. For this version, only a single network is supported.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<NetworkConfig> getNetworks() {
    return networks;
  }

  public void setNetworks(List<NetworkConfig> networks) {
    this.networks = networks;
  }


  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzi
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzi() {
    return satisfiesPzi;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  /**
   * Output only. The instance state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Additional information about the instance state, if available.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  /**
   * Output only. Field indicates all the reasons the instance is in \&quot;SUSPENDED\&quot; state.
   * @return suspensionReasons
   */
  @javax.annotation.Nullable
  public List<SuspensionReasonsEnum> getSuspensionReasons() {
    return suspensionReasons;
  }



  public Instance tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The service tier of the instance.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.description, instance.description) &&
        Objects.equals(this.etag, instance.etag) &&
        Objects.equals(this.fileShares, instance.fileShares) &&
        Objects.equals(this.kmsKeyName, instance.kmsKeyName) &&
        Objects.equals(this.labels, instance.labels) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.networks, instance.networks) &&
        Objects.equals(this.satisfiesPzi, instance.satisfiesPzi) &&
        Objects.equals(this.satisfiesPzs, instance.satisfiesPzs) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.statusMessage, instance.statusMessage) &&
        Objects.equals(this.suspensionReasons, instance.suspensionReasons) &&
        Objects.equals(this.tier, instance.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, etag, fileShares, kmsKeyName, labels, name, networks, satisfiesPzi, satisfiesPzs, state, statusMessage, suspensionReasons, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fileShares: ").append(toIndentedString(fileShares)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    satisfiesPzi: ").append(toIndentedString(satisfiesPzi)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    suspensionReasons: ").append(toIndentedString(suspensionReasons)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("fileShares");
    openapiFields.add("kmsKeyName");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("networks");
    openapiFields.add("satisfiesPzi");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("state");
    openapiFields.add("statusMessage");
    openapiFields.add("suspensionReasons");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("fileShares") != null && !jsonObj.get("fileShares").isJsonNull()) {
        JsonArray jsonArrayfileShares = jsonObj.getAsJsonArray("fileShares");
        if (jsonArrayfileShares != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fileShares").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fileShares` to be an array in the JSON string but got `%s`", jsonObj.get("fileShares").toString()));
          }

          // validate the optional field `fileShares` (array)
          for (int i = 0; i < jsonArrayfileShares.size(); i++) {
            FileShareConfig.validateJsonElement(jsonArrayfileShares.get(i));
          };
        }
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            NetworkConfig.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suspensionReasons") != null && !jsonObj.get("suspensionReasons").isJsonNull() && !jsonObj.get("suspensionReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspensionReasons` to be an array in the JSON string but got `%s`", jsonObj.get("suspensionReasons").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

