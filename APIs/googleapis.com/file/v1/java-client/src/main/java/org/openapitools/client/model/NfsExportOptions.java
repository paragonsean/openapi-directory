/*
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NFS export options specifications.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:22.341121-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NfsExportOptions {
  /**
   * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
   */
  @JsonAdapter(AccessModeEnum.Adapter.class)
  public enum AccessModeEnum {
    ACCESS_MODE_UNSPECIFIED("ACCESS_MODE_UNSPECIFIED"),
    
    READ_ONLY("READ_ONLY"),
    
    READ_WRITE("READ_WRITE");

    private String value;

    AccessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessModeEnum fromValue(String value) {
      for (AccessModeEnum b : AccessModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  private AccessModeEnum accessMode;

  public static final String SERIALIZED_NAME_ANON_GID = "anonGid";
  @SerializedName(SERIALIZED_NAME_ANON_GID)
  private String anonGid;

  public static final String SERIALIZED_NAME_ANON_UID = "anonUid";
  @SerializedName(SERIALIZED_NAME_ANON_UID)
  private String anonUid;

  public static final String SERIALIZED_NAME_IP_RANGES = "ipRanges";
  @SerializedName(SERIALIZED_NAME_IP_RANGES)
  private List<String> ipRanges = new ArrayList<>();

  /**
   * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
   */
  @JsonAdapter(SquashModeEnum.Adapter.class)
  public enum SquashModeEnum {
    SQUASH_MODE_UNSPECIFIED("SQUASH_MODE_UNSPECIFIED"),
    
    NO_ROOT_SQUASH("NO_ROOT_SQUASH"),
    
    ROOT_SQUASH("ROOT_SQUASH");

    private String value;

    SquashModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashModeEnum fromValue(String value) {
      for (SquashModeEnum b : SquashModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SquashModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MODE = "squashMode";
  @SerializedName(SERIALIZED_NAME_SQUASH_MODE)
  private SquashModeEnum squashMode;

  public NfsExportOptions() {
  }

  public NfsExportOptions accessMode(AccessModeEnum accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
   * @return accessMode
   */
  @javax.annotation.Nullable
  public AccessModeEnum getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessModeEnum accessMode) {
    this.accessMode = accessMode;
  }


  public NfsExportOptions anonGid(String anonGid) {
    this.anonGid = anonGid;
    return this;
  }

  /**
   * An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
   * @return anonGid
   */
  @javax.annotation.Nullable
  public String getAnonGid() {
    return anonGid;
  }

  public void setAnonGid(String anonGid) {
    this.anonGid = anonGid;
  }


  public NfsExportOptions anonUid(String anonUid) {
    this.anonUid = anonUid;
    return this;
  }

  /**
   * An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
   * @return anonUid
   */
  @javax.annotation.Nullable
  public String getAnonUid() {
    return anonUid;
  }

  public void setAnonUid(String anonUid) {
    this.anonUid = anonUid;
  }


  public NfsExportOptions ipRanges(List<String> ipRanges) {
    this.ipRanges = ipRanges;
    return this;
  }

  public NfsExportOptions addIpRangesItem(String ipRangesItem) {
    if (this.ipRanges == null) {
      this.ipRanges = new ArrayList<>();
    }
    this.ipRanges.add(ipRangesItem);
    return this;
  }

  /**
   * List of either an IPv4 addresses in the format &#x60;{octet1}.{octet2}.{octet3}.{octet4}&#x60; or CIDR ranges in the format &#x60;{octet1}.{octet2}.{octet3}.{octet4}/{mask size}&#x60; which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
   * @return ipRanges
   */
  @javax.annotation.Nullable
  public List<String> getIpRanges() {
    return ipRanges;
  }

  public void setIpRanges(List<String> ipRanges) {
    this.ipRanges = ipRanges;
  }


  public NfsExportOptions squashMode(SquashModeEnum squashMode) {
    this.squashMode = squashMode;
    return this;
  }

  /**
   * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
   * @return squashMode
   */
  @javax.annotation.Nullable
  public SquashModeEnum getSquashMode() {
    return squashMode;
  }

  public void setSquashMode(SquashModeEnum squashMode) {
    this.squashMode = squashMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfsExportOptions nfsExportOptions = (NfsExportOptions) o;
    return Objects.equals(this.accessMode, nfsExportOptions.accessMode) &&
        Objects.equals(this.anonGid, nfsExportOptions.anonGid) &&
        Objects.equals(this.anonUid, nfsExportOptions.anonUid) &&
        Objects.equals(this.ipRanges, nfsExportOptions.ipRanges) &&
        Objects.equals(this.squashMode, nfsExportOptions.squashMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMode, anonGid, anonUid, ipRanges, squashMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfsExportOptions {\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    anonGid: ").append(toIndentedString(anonGid)).append("\n");
    sb.append("    anonUid: ").append(toIndentedString(anonUid)).append("\n");
    sb.append("    ipRanges: ").append(toIndentedString(ipRanges)).append("\n");
    sb.append("    squashMode: ").append(toIndentedString(squashMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessMode");
    openapiFields.add("anonGid");
    openapiFields.add("anonUid");
    openapiFields.add("ipRanges");
    openapiFields.add("squashMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfsExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfsExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfsExportOptions is not found in the empty JSON string", NfsExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfsExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfsExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) && !jsonObj.get("accessMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessMode").toString()));
      }
      // validate the optional field `accessMode`
      if (jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) {
        AccessModeEnum.validateJsonElement(jsonObj.get("accessMode"));
      }
      if ((jsonObj.get("anonGid") != null && !jsonObj.get("anonGid").isJsonNull()) && !jsonObj.get("anonGid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonGid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anonGid").toString()));
      }
      if ((jsonObj.get("anonUid") != null && !jsonObj.get("anonUid").isJsonNull()) && !jsonObj.get("anonUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anonUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anonUid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipRanges") != null && !jsonObj.get("ipRanges").isJsonNull() && !jsonObj.get("ipRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipRanges` to be an array in the JSON string but got `%s`", jsonObj.get("ipRanges").toString()));
      }
      if ((jsonObj.get("squashMode") != null && !jsonObj.get("squashMode").isJsonNull()) && !jsonObj.get("squashMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squashMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squashMode").toString()));
      }
      // validate the optional field `squashMode`
      if (jsonObj.get("squashMode") != null && !jsonObj.get("squashMode").isJsonNull()) {
        SquashModeEnum.validateJsonElement(jsonObj.get("squashMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfsExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfsExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfsExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfsExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<NfsExportOptions>() {
           @Override
           public void write(JsonWriter out, NfsExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfsExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfsExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfsExportOptions
   * @throws IOException if the JSON string is invalid with respect to NfsExportOptions
   */
  public static NfsExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfsExportOptions.class);
  }

  /**
   * Convert an instance of NfsExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

