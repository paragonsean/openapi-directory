/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NfsExportOptions from './NfsExportOptions';

/**
 * The FileShareConfig model module.
 * @module model/FileShareConfig
 * @version v1
 */
class FileShareConfig {
    /**
     * Constructs a new <code>FileShareConfig</code>.
     * File share configuration for the instance.
     * @alias module:model/FileShareConfig
     */
    constructor() { 
        
        FileShareConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileShareConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileShareConfig} obj Optional instance to populate.
     * @return {module:model/FileShareConfig} The populated <code>FileShareConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileShareConfig();

            if (data.hasOwnProperty('capacityGb')) {
                obj['capacityGb'] = ApiClient.convertToType(data['capacityGb'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfsExportOptions')) {
                obj['nfsExportOptions'] = ApiClient.convertToType(data['nfsExportOptions'], [NfsExportOptions]);
            }
            if (data.hasOwnProperty('sourceBackup')) {
                obj['sourceBackup'] = ApiClient.convertToType(data['sourceBackup'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileShareConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileShareConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capacityGb'] && !(typeof data['capacityGb'] === 'string' || data['capacityGb'] instanceof String)) {
            throw new Error("Expected the field `capacityGb` to be a primitive type in the JSON string but got " + data['capacityGb']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['nfsExportOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nfsExportOptions'])) {
                throw new Error("Expected the field `nfsExportOptions` to be an array in the JSON data but got " + data['nfsExportOptions']);
            }
            // validate the optional field `nfsExportOptions` (array)
            for (const item of data['nfsExportOptions']) {
                NfsExportOptions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceBackup'] && !(typeof data['sourceBackup'] === 'string' || data['sourceBackup'] instanceof String)) {
            throw new Error("Expected the field `sourceBackup` to be a primitive type in the JSON string but got " + data['sourceBackup']);
        }

        return true;
    }


}



/**
 * File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.
 * @member {String} capacityGb
 */
FileShareConfig.prototype['capacityGb'] = undefined;

/**
 * Required. The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores `[a-z0-9_]`. Must start with a letter. Immutable.
 * @member {String} name
 */
FileShareConfig.prototype['name'] = undefined;

/**
 * Nfs Export Options. There is a limit of 10 export options per file share.
 * @member {Array.<module:model/NfsExportOptions>} nfsExportOptions
 */
FileShareConfig.prototype['nfsExportOptions'] = undefined;

/**
 * The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`, that this file share has been restored from.
 * @member {String} sourceBackup
 */
FileShareConfig.prototype['sourceBackup'] = undefined;






export default FileShareConfig;

