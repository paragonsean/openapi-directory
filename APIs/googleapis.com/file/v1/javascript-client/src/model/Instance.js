/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileShareConfig from './FileShareConfig';
import NetworkConfig from './NetworkConfig';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * A Filestore instance.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('fileShares')) {
                obj['fileShares'] = ApiClient.convertToType(data['fileShares'], [FileShareConfig]);
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [NetworkConfig]);
            }
            if (data.hasOwnProperty('satisfiesPzi')) {
                obj['satisfiesPzi'] = ApiClient.convertToType(data['satisfiesPzi'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('suspensionReasons')) {
                obj['suspensionReasons'] = ApiClient.convertToType(data['suspensionReasons'], ['String']);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['fileShares']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fileShares'])) {
                throw new Error("Expected the field `fileShares` to be an array in the JSON data but got " + data['fileShares']);
            }
            // validate the optional field `fileShares` (array)
            for (const item of data['fileShares']) {
                FileShareConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                NetworkConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suspensionReasons'])) {
            throw new Error("Expected the field `suspensionReasons` to be an array in the JSON data but got " + data['suspensionReasons']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * Output only. The time when the instance was created.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * The description of the instance (2048 characters or less).
 * @member {String} description
 */
Instance.prototype['description'] = undefined;

/**
 * Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
 * @member {String} etag
 */
Instance.prototype['etag'] = undefined;

/**
 * File system shares on the instance. For this version, only a single file share is supported.
 * @member {Array.<module:model/FileShareConfig>} fileShares
 */
Instance.prototype['fileShares'] = undefined;

/**
 * KMS key name used for data encryption.
 * @member {String} kmsKeyName
 */
Instance.prototype['kmsKeyName'] = undefined;

/**
 * Resource labels to represent user provided metadata.
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * Output only. The resource name of the instance, in the format `projects/{project}/locations/{location}/instances/{instance}`.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * VPC networks to which the instance is connected. For this version, only a single network is supported.
 * @member {Array.<module:model/NetworkConfig>} networks
 */
Instance.prototype['networks'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzi
 */
Instance.prototype['satisfiesPzi'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzs
 */
Instance.prototype['satisfiesPzs'] = undefined;

/**
 * Output only. The instance state.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. Additional information about the instance state, if available.
 * @member {String} statusMessage
 */
Instance.prototype['statusMessage'] = undefined;

/**
 * Output only. Field indicates all the reasons the instance is in \"SUSPENDED\" state.
 * @member {Array.<module:model/Instance.SuspensionReasonsEnum>} suspensionReasons
 */
Instance.prototype['suspensionReasons'] = undefined;

/**
 * The service tier of the instance.
 * @member {module:model/Instance.TierEnum} tier
 */
Instance.prototype['tier'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "REPAIRING"
     * @const
     */
    "REPAIRING": "REPAIRING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "RESTORING"
     * @const
     */
    "RESTORING": "RESTORING",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "SUSPENDING"
     * @const
     */
    "SUSPENDING": "SUSPENDING",

    /**
     * value: "RESUMING"
     * @const
     */
    "RESUMING": "RESUMING",

    /**
     * value: "REVERTING"
     * @const
     */
    "REVERTING": "REVERTING"
};


/**
 * Allowed values for the <code>suspensionReasons</code> property.
 * @enum {String}
 * @readonly
 */
Instance['SuspensionReasonsEnum'] = {

    /**
     * value: "SUSPENSION_REASON_UNSPECIFIED"
     * @const
     */
    "SUSPENSION_REASON_UNSPECIFIED": "SUSPENSION_REASON_UNSPECIFIED",

    /**
     * value: "KMS_KEY_ISSUE"
     * @const
     */
    "KMS_KEY_ISSUE": "KMS_KEY_ISSUE"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
Instance['TierEnum'] = {

    /**
     * value: "TIER_UNSPECIFIED"
     * @const
     */
    "TIER_UNSPECIFIED": "TIER_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "PREMIUM"
     * @const
     */
    "PREMIUM": "PREMIUM",

    /**
     * value: "BASIC_HDD"
     * @const
     */
    "BASIC_HDD": "BASIC_HDD",

    /**
     * value: "BASIC_SSD"
     * @const
     */
    "BASIC_SSD": "BASIC_SSD",

    /**
     * value: "HIGH_SCALE_SSD"
     * @const
     */
    "HIGH_SCALE_SSD": "HIGH_SCALE_SSD",

    /**
     * value: "ENTERPRISE"
     * @const
     */
    "ENTERPRISE": "ENTERPRISE",

    /**
     * value: "ZONAL"
     * @const
     */
    "ZONAL": "ZONAL",

    /**
     * value: "REGIONAL"
     * @const
     */
    "REGIONAL": "REGIONAL"
};



export default Instance;

