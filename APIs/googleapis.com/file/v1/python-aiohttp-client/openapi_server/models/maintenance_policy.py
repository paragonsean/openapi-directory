# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_policy import UpdatePolicy
from openapi_server import util


class MaintenancePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, state: str=None, update_policy: UpdatePolicy=None, update_time: str=None):
        """MaintenancePolicy - a model defined in OpenAPI

        :param create_time: The create_time of this MaintenancePolicy.
        :param description: The description of this MaintenancePolicy.
        :param labels: The labels of this MaintenancePolicy.
        :param name: The name of this MaintenancePolicy.
        :param state: The state of this MaintenancePolicy.
        :param update_policy: The update_policy of this MaintenancePolicy.
        :param update_time: The update_time of this MaintenancePolicy.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'state': str,
            'update_policy': UpdatePolicy,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'update_policy': 'updatePolicy',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._name = name
        self._state = state
        self._update_policy = update_policy
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenancePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenancePolicy of this MaintenancePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this MaintenancePolicy.

        Output only. The time when the resource was created.

        :return: The create_time of this MaintenancePolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MaintenancePolicy.

        Output only. The time when the resource was created.

        :param create_time: The create_time of this MaintenancePolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this MaintenancePolicy.

        Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.

        :return: The description of this MaintenancePolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaintenancePolicy.

        Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.

        :param description: The description of this MaintenancePolicy.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this MaintenancePolicy.

        Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.

        :return: The labels of this MaintenancePolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MaintenancePolicy.

        Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.

        :param labels: The labels of this MaintenancePolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this MaintenancePolicy.

        Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.

        :return: The name of this MaintenancePolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintenancePolicy.

        Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.

        :param name: The name of this MaintenancePolicy.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this MaintenancePolicy.

        Optional. The state of the policy.

        :return: The state of this MaintenancePolicy.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MaintenancePolicy.

        Optional. The state of the policy.

        :param state: The state of this MaintenancePolicy.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_policy(self):
        """Gets the update_policy of this MaintenancePolicy.


        :return: The update_policy of this MaintenancePolicy.
        :rtype: UpdatePolicy
        """
        return self._update_policy

    @update_policy.setter
    def update_policy(self, update_policy):
        """Sets the update_policy of this MaintenancePolicy.


        :param update_policy: The update_policy of this MaintenancePolicy.
        :type update_policy: UpdatePolicy
        """

        self._update_policy = update_policy

    @property
    def update_time(self):
        """Gets the update_time of this MaintenancePolicy.

        Output only. The time when the resource was updated.

        :return: The update_time of this MaintenancePolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MaintenancePolicy.

        Output only. The time when the resource was updated.

        :param update_time: The update_time of this MaintenancePolicy.
        :type update_time: str
        """

        self._update_time = update_time
