# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Backup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_gb: str=None, create_time: str=None, description: str=None, download_bytes: str=None, kms_key: str=None, labels: Dict[str, str]=None, name: str=None, satisfies_pzi: bool=None, satisfies_pzs: bool=None, source_file_share: str=None, source_instance: str=None, source_instance_tier: str=None, state: str=None, storage_bytes: str=None):
        """Backup - a model defined in OpenAPI

        :param capacity_gb: The capacity_gb of this Backup.
        :param create_time: The create_time of this Backup.
        :param description: The description of this Backup.
        :param download_bytes: The download_bytes of this Backup.
        :param kms_key: The kms_key of this Backup.
        :param labels: The labels of this Backup.
        :param name: The name of this Backup.
        :param satisfies_pzi: The satisfies_pzi of this Backup.
        :param satisfies_pzs: The satisfies_pzs of this Backup.
        :param source_file_share: The source_file_share of this Backup.
        :param source_instance: The source_instance of this Backup.
        :param source_instance_tier: The source_instance_tier of this Backup.
        :param state: The state of this Backup.
        :param storage_bytes: The storage_bytes of this Backup.
        """
        self.openapi_types = {
            'capacity_gb': str,
            'create_time': str,
            'description': str,
            'download_bytes': str,
            'kms_key': str,
            'labels': Dict[str, str],
            'name': str,
            'satisfies_pzi': bool,
            'satisfies_pzs': bool,
            'source_file_share': str,
            'source_instance': str,
            'source_instance_tier': str,
            'state': str,
            'storage_bytes': str
        }

        self.attribute_map = {
            'capacity_gb': 'capacityGb',
            'create_time': 'createTime',
            'description': 'description',
            'download_bytes': 'downloadBytes',
            'kms_key': 'kmsKey',
            'labels': 'labels',
            'name': 'name',
            'satisfies_pzi': 'satisfiesPzi',
            'satisfies_pzs': 'satisfiesPzs',
            'source_file_share': 'sourceFileShare',
            'source_instance': 'sourceInstance',
            'source_instance_tier': 'sourceInstanceTier',
            'state': 'state',
            'storage_bytes': 'storageBytes'
        }

        self._capacity_gb = capacity_gb
        self._create_time = create_time
        self._description = description
        self._download_bytes = download_bytes
        self._kms_key = kms_key
        self._labels = labels
        self._name = name
        self._satisfies_pzi = satisfies_pzi
        self._satisfies_pzs = satisfies_pzs
        self._source_file_share = source_file_share
        self._source_instance = source_instance
        self._source_instance_tier = source_instance_tier
        self._state = state
        self._storage_bytes = storage_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Backup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backup of this Backup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_gb(self):
        """Gets the capacity_gb of this Backup.

        Output only. Capacity of the source file share when the backup was created.

        :return: The capacity_gb of this Backup.
        :rtype: str
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb):
        """Sets the capacity_gb of this Backup.

        Output only. Capacity of the source file share when the backup was created.

        :param capacity_gb: The capacity_gb of this Backup.
        :type capacity_gb: str
        """

        self._capacity_gb = capacity_gb

    @property
    def create_time(self):
        """Gets the create_time of this Backup.

        Output only. The time when the backup was created.

        :return: The create_time of this Backup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Backup.

        Output only. The time when the backup was created.

        :param create_time: The create_time of this Backup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Backup.

        A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.

        :return: The description of this Backup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Backup.

        A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.

        :param description: The description of this Backup.
        :type description: str
        """

        self._description = description

    @property
    def download_bytes(self):
        """Gets the download_bytes of this Backup.

        Output only. Amount of bytes that will be downloaded if the backup is restored. This may be different than storage bytes, since sequential backups of the same disk will share storage.

        :return: The download_bytes of this Backup.
        :rtype: str
        """
        return self._download_bytes

    @download_bytes.setter
    def download_bytes(self, download_bytes):
        """Sets the download_bytes of this Backup.

        Output only. Amount of bytes that will be downloaded if the backup is restored. This may be different than storage bytes, since sequential backups of the same disk will share storage.

        :param download_bytes: The download_bytes of this Backup.
        :type download_bytes: str
        """

        self._download_bytes = download_bytes

    @property
    def kms_key(self):
        """Gets the kms_key of this Backup.

        Immutable. KMS key name used for data encryption.

        :return: The kms_key of this Backup.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this Backup.

        Immutable. KMS key name used for data encryption.

        :param kms_key: The kms_key of this Backup.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def labels(self):
        """Gets the labels of this Backup.

        Resource labels to represent user provided metadata.

        :return: The labels of this Backup.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Backup.

        Resource labels to represent user provided metadata.

        :param labels: The labels of this Backup.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Backup.

        Output only. The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.

        :return: The name of this Backup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Backup.

        Output only. The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.

        :param name: The name of this Backup.
        :type name: str
        """

        self._name = name

    @property
    def satisfies_pzi(self):
        """Gets the satisfies_pzi of this Backup.

        Output only. Reserved for future use.

        :return: The satisfies_pzi of this Backup.
        :rtype: bool
        """
        return self._satisfies_pzi

    @satisfies_pzi.setter
    def satisfies_pzi(self, satisfies_pzi):
        """Sets the satisfies_pzi of this Backup.

        Output only. Reserved for future use.

        :param satisfies_pzi: The satisfies_pzi of this Backup.
        :type satisfies_pzi: bool
        """

        self._satisfies_pzi = satisfies_pzi

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Backup.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Backup.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Backup.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Backup.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def source_file_share(self):
        """Gets the source_file_share of this Backup.

        Name of the file share in the source Filestore instance that the backup is created from.

        :return: The source_file_share of this Backup.
        :rtype: str
        """
        return self._source_file_share

    @source_file_share.setter
    def source_file_share(self, source_file_share):
        """Sets the source_file_share of this Backup.

        Name of the file share in the source Filestore instance that the backup is created from.

        :param source_file_share: The source_file_share of this Backup.
        :type source_file_share: str
        """

        self._source_file_share = source_file_share

    @property
    def source_instance(self):
        """Gets the source_instance of this Backup.

        The resource name of the source Filestore instance, in the format `projects/{project_number}/locations/{location_id}/instances/{instance_id}`, used to create this backup.

        :return: The source_instance of this Backup.
        :rtype: str
        """
        return self._source_instance

    @source_instance.setter
    def source_instance(self, source_instance):
        """Sets the source_instance of this Backup.

        The resource name of the source Filestore instance, in the format `projects/{project_number}/locations/{location_id}/instances/{instance_id}`, used to create this backup.

        :param source_instance: The source_instance of this Backup.
        :type source_instance: str
        """

        self._source_instance = source_instance

    @property
    def source_instance_tier(self):
        """Gets the source_instance_tier of this Backup.

        Output only. The service tier of the source Filestore instance that this backup is created from.

        :return: The source_instance_tier of this Backup.
        :rtype: str
        """
        return self._source_instance_tier

    @source_instance_tier.setter
    def source_instance_tier(self, source_instance_tier):
        """Sets the source_instance_tier of this Backup.

        Output only. The service tier of the source Filestore instance that this backup is created from.

        :param source_instance_tier: The source_instance_tier of this Backup.
        :type source_instance_tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "STANDARD", "PREMIUM", "BASIC_HDD", "BASIC_SSD", "HIGH_SCALE_SSD", "ENTERPRISE", "ZONAL", "REGIONAL"]  # noqa: E501
        if source_instance_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `source_instance_tier` ({0}), must be one of {1}"
                .format(source_instance_tier, allowed_values)
            )

        self._source_instance_tier = source_instance_tier

    @property
    def state(self):
        """Gets the state of this Backup.

        Output only. The backup state.

        :return: The state of this Backup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Backup.

        Output only. The backup state.

        :param state: The state of this Backup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "FINALIZING", "READY", "DELETING", "INVALID"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_bytes(self):
        """Gets the storage_bytes of this Backup.

        Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.

        :return: The storage_bytes of this Backup.
        :rtype: str
        """
        return self._storage_bytes

    @storage_bytes.setter
    def storage_bytes(self, storage_bytes):
        """Sets the storage_bytes of this Backup.

        Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.

        :param storage_bytes: The storage_bytes of this Backup.
        :type storage_bytes: str
        """

        self._storage_bytes = storage_bytes
