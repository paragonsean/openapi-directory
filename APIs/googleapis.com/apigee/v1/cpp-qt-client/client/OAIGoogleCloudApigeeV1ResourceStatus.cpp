/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1ResourceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1ResourceStatus::OAIGoogleCloudApigeeV1ResourceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1ResourceStatus::OAIGoogleCloudApigeeV1ResourceStatus() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1ResourceStatus::~OAIGoogleCloudApigeeV1ResourceStatus() {}

void OAIGoogleCloudApigeeV1ResourceStatus::initializeModel() {

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_revisions_isSet = false;
    m_revisions_isValid = false;

    m_total_replicas_isSet = false;
    m_total_replicas_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIGoogleCloudApigeeV1ResourceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1ResourceStatus::fromJsonObject(QJsonObject json) {

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_revisions_isValid = ::OpenAPI::fromJsonValue(m_revisions, json[QString("revisions")]);
    m_revisions_isSet = !json[QString("revisions")].isNull() && m_revisions_isValid;

    m_total_replicas_isValid = ::OpenAPI::fromJsonValue(m_total_replicas, json[QString("totalReplicas")]);
    m_total_replicas_isSet = !json[QString("totalReplicas")].isNull() && m_total_replicas_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIGoogleCloudApigeeV1ResourceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1ResourceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_revisions.size() > 0) {
        obj.insert(QString("revisions"), ::OpenAPI::toJsonValue(m_revisions));
    }
    if (m_total_replicas_isSet) {
        obj.insert(QString("totalReplicas"), ::OpenAPI::toJsonValue(m_total_replicas));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1ResourceStatus::getResource() const {
    return m_resource;
}
void OAIGoogleCloudApigeeV1ResourceStatus::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_resource_Valid() const{
    return m_resource_isValid;
}

QList<OAIGoogleCloudApigeeV1RevisionStatus> OAIGoogleCloudApigeeV1ResourceStatus::getRevisions() const {
    return m_revisions;
}
void OAIGoogleCloudApigeeV1ResourceStatus::setRevisions(const QList<OAIGoogleCloudApigeeV1RevisionStatus> &revisions) {
    m_revisions = revisions;
    m_revisions_isSet = true;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_revisions_Set() const{
    return m_revisions_isSet;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_revisions_Valid() const{
    return m_revisions_isValid;
}

qint32 OAIGoogleCloudApigeeV1ResourceStatus::getTotalReplicas() const {
    return m_total_replicas;
}
void OAIGoogleCloudApigeeV1ResourceStatus::setTotalReplicas(const qint32 &total_replicas) {
    m_total_replicas = total_replicas;
    m_total_replicas_isSet = true;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_total_replicas_Set() const{
    return m_total_replicas_isSet;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_total_replicas_Valid() const{
    return m_total_replicas_isValid;
}

QString OAIGoogleCloudApigeeV1ResourceStatus::getUid() const {
    return m_uid;
}
void OAIGoogleCloudApigeeV1ResourceStatus::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1ResourceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
