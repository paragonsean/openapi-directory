/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::~OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence() {}

void OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;
}

void OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    if(json["points"].isArray()){
        auto arr = json["points"].toArray();
        m_points_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_points_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_points_isSet = !jval.isNull() && m_points_isValid;
                m_points.push_back(item);
            }
        }
    }
}

QString OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_points.size() > 0) {
        
        obj.insert(QString("points"), toJsonValue(m_points));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::getDimensions() const {
    return m_dimensions;
}
void OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::setDimensions(const QMap<QString, QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<QList<QJsonValue>> OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::getPoints() const {
    return m_points;
}
void OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::setPoints(const QList<QList<QJsonValue>> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::is_points_Set() const{
    return m_points_isSet;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::is_points_Valid() const{
    return m_points_isValid;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
