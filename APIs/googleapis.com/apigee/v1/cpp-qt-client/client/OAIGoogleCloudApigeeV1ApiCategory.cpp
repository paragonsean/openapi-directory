/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1ApiCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1ApiCategory::OAIGoogleCloudApigeeV1ApiCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1ApiCategory::OAIGoogleCloudApigeeV1ApiCategory() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1ApiCategory::~OAIGoogleCloudApigeeV1ApiCategory() {}

void OAIGoogleCloudApigeeV1ApiCategory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudApigeeV1ApiCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1ApiCategory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudApigeeV1ApiCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1ApiCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1ApiCategory::getId() const {
    return m_id;
}
void OAIGoogleCloudApigeeV1ApiCategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleCloudApigeeV1ApiCategory::getName() const {
    return m_name;
}
void OAIGoogleCloudApigeeV1ApiCategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudApigeeV1ApiCategory::getSiteId() const {
    return m_site_id;
}
void OAIGoogleCloudApigeeV1ApiCategory::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIGoogleCloudApigeeV1ApiCategory::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudApigeeV1ApiCategory::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudApigeeV1ApiCategory::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudApigeeV1ApiCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1ApiCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
