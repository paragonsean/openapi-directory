/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1ApiProxyRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1ApiProxyRevision::OAIGoogleCloudApigeeV1ApiProxyRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1ApiProxyRevision::OAIGoogleCloudApigeeV1ApiProxyRevision() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1ApiProxyRevision::~OAIGoogleCloudApigeeV1ApiProxyRevision() {}

void OAIGoogleCloudApigeeV1ApiProxyRevision::initializeModel() {

    m_archive_isSet = false;
    m_archive_isValid = false;

    m_basepaths_isSet = false;
    m_basepaths_isValid = false;

    m_configuration_version_isSet = false;
    m_configuration_version_isValid = false;

    m_context_info_isSet = false;
    m_context_info_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_meta_data_as_properties_isSet = false;
    m_entity_meta_data_as_properties_isValid = false;

    m_has_extensible_policy_isSet = false;
    m_has_extensible_policy_isValid = false;

    m_integration_endpoints_isSet = false;
    m_integration_endpoints_isValid = false;

    m_last_modified_at_isSet = false;
    m_last_modified_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_proxies_isSet = false;
    m_proxies_isValid = false;

    m_proxy_endpoints_isSet = false;
    m_proxy_endpoints_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_shared_flows_isSet = false;
    m_shared_flows_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_target_endpoints_isSet = false;
    m_target_endpoints_isValid = false;

    m_target_servers_isSet = false;
    m_target_servers_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudApigeeV1ApiProxyRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1ApiProxyRevision::fromJsonObject(QJsonObject json) {

    m_archive_isValid = ::OpenAPI::fromJsonValue(m_archive, json[QString("archive")]);
    m_archive_isSet = !json[QString("archive")].isNull() && m_archive_isValid;

    m_basepaths_isValid = ::OpenAPI::fromJsonValue(m_basepaths, json[QString("basepaths")]);
    m_basepaths_isSet = !json[QString("basepaths")].isNull() && m_basepaths_isValid;

    m_configuration_version_isValid = ::OpenAPI::fromJsonValue(m_configuration_version, json[QString("configurationVersion")]);
    m_configuration_version_isSet = !json[QString("configurationVersion")].isNull() && m_configuration_version_isValid;

    m_context_info_isValid = ::OpenAPI::fromJsonValue(m_context_info, json[QString("contextInfo")]);
    m_context_info_isSet = !json[QString("contextInfo")].isNull() && m_context_info_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_meta_data_as_properties_isValid = ::OpenAPI::fromJsonValue(m_entity_meta_data_as_properties, json[QString("entityMetaDataAsProperties")]);
    m_entity_meta_data_as_properties_isSet = !json[QString("entityMetaDataAsProperties")].isNull() && m_entity_meta_data_as_properties_isValid;

    m_has_extensible_policy_isValid = ::OpenAPI::fromJsonValue(m_has_extensible_policy, json[QString("hasExtensiblePolicy")]);
    m_has_extensible_policy_isSet = !json[QString("hasExtensiblePolicy")].isNull() && m_has_extensible_policy_isValid;

    m_integration_endpoints_isValid = ::OpenAPI::fromJsonValue(m_integration_endpoints, json[QString("integrationEndpoints")]);
    m_integration_endpoints_isSet = !json[QString("integrationEndpoints")].isNull() && m_integration_endpoints_isValid;

    m_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_last_modified_at, json[QString("lastModifiedAt")]);
    m_last_modified_at_isSet = !json[QString("lastModifiedAt")].isNull() && m_last_modified_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_proxies_isValid = ::OpenAPI::fromJsonValue(m_proxies, json[QString("proxies")]);
    m_proxies_isSet = !json[QString("proxies")].isNull() && m_proxies_isValid;

    m_proxy_endpoints_isValid = ::OpenAPI::fromJsonValue(m_proxy_endpoints, json[QString("proxyEndpoints")]);
    m_proxy_endpoints_isSet = !json[QString("proxyEndpoints")].isNull() && m_proxy_endpoints_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_shared_flows_isValid = ::OpenAPI::fromJsonValue(m_shared_flows, json[QString("sharedFlows")]);
    m_shared_flows_isSet = !json[QString("sharedFlows")].isNull() && m_shared_flows_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_target_endpoints_isValid = ::OpenAPI::fromJsonValue(m_target_endpoints, json[QString("targetEndpoints")]);
    m_target_endpoints_isSet = !json[QString("targetEndpoints")].isNull() && m_target_endpoints_isValid;

    m_target_servers_isValid = ::OpenAPI::fromJsonValue(m_target_servers, json[QString("targetServers")]);
    m_target_servers_isSet = !json[QString("targetServers")].isNull() && m_target_servers_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1ApiProxyRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_isSet) {
        obj.insert(QString("archive"), ::OpenAPI::toJsonValue(m_archive));
    }
    if (m_basepaths.size() > 0) {
        obj.insert(QString("basepaths"), ::OpenAPI::toJsonValue(m_basepaths));
    }
    if (m_configuration_version.isSet()) {
        obj.insert(QString("configurationVersion"), ::OpenAPI::toJsonValue(m_configuration_version));
    }
    if (m_context_info_isSet) {
        obj.insert(QString("contextInfo"), ::OpenAPI::toJsonValue(m_context_info));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_meta_data_as_properties.size() > 0) {
        obj.insert(QString("entityMetaDataAsProperties"), ::OpenAPI::toJsonValue(m_entity_meta_data_as_properties));
    }
    if (m_has_extensible_policy_isSet) {
        obj.insert(QString("hasExtensiblePolicy"), ::OpenAPI::toJsonValue(m_has_extensible_policy));
    }
    if (m_integration_endpoints.size() > 0) {
        obj.insert(QString("integrationEndpoints"), ::OpenAPI::toJsonValue(m_integration_endpoints));
    }
    if (m_last_modified_at_isSet) {
        obj.insert(QString("lastModifiedAt"), ::OpenAPI::toJsonValue(m_last_modified_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_proxies.size() > 0) {
        obj.insert(QString("proxies"), ::OpenAPI::toJsonValue(m_proxies));
    }
    if (m_proxy_endpoints.size() > 0) {
        obj.insert(QString("proxyEndpoints"), ::OpenAPI::toJsonValue(m_proxy_endpoints));
    }
    if (m_resource_files.isSet()) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_shared_flows.size() > 0) {
        obj.insert(QString("sharedFlows"), ::OpenAPI::toJsonValue(m_shared_flows));
    }
    if (m_spec_isSet) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_target_endpoints.size() > 0) {
        obj.insert(QString("targetEndpoints"), ::OpenAPI::toJsonValue(m_target_endpoints));
    }
    if (m_target_servers.size() > 0) {
        obj.insert(QString("targetServers"), ::OpenAPI::toJsonValue(m_target_servers));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getArchive() const {
    return m_archive;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setArchive(const QString &archive) {
    m_archive = archive;
    m_archive_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_archive_Set() const{
    return m_archive_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_archive_Valid() const{
    return m_archive_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getBasepaths() const {
    return m_basepaths;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setBasepaths(const QList<QString> &basepaths) {
    m_basepaths = basepaths;
    m_basepaths_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_basepaths_Set() const{
    return m_basepaths_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_basepaths_Valid() const{
    return m_basepaths_isValid;
}

OAIGoogleCloudApigeeV1ConfigVersion OAIGoogleCloudApigeeV1ApiProxyRevision::getConfigurationVersion() const {
    return m_configuration_version;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setConfigurationVersion(const OAIGoogleCloudApigeeV1ConfigVersion &configuration_version) {
    m_configuration_version = configuration_version;
    m_configuration_version_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_configuration_version_Set() const{
    return m_configuration_version_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_configuration_version_Valid() const{
    return m_configuration_version_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getContextInfo() const {
    return m_context_info;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setContextInfo(const QString &context_info) {
    m_context_info = context_info;
    m_context_info_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_context_info_Set() const{
    return m_context_info_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_context_info_Valid() const{
    return m_context_info_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getCreatedAt() const {
    return m_created_at;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getDescription() const {
    return m_description;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getEntityMetaDataAsProperties() const {
    return m_entity_meta_data_as_properties;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setEntityMetaDataAsProperties(const QMap<QString, QString> &entity_meta_data_as_properties) {
    m_entity_meta_data_as_properties = entity_meta_data_as_properties;
    m_entity_meta_data_as_properties_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_entity_meta_data_as_properties_Set() const{
    return m_entity_meta_data_as_properties_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_entity_meta_data_as_properties_Valid() const{
    return m_entity_meta_data_as_properties_isValid;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::isHasExtensiblePolicy() const {
    return m_has_extensible_policy;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setHasExtensiblePolicy(const bool &has_extensible_policy) {
    m_has_extensible_policy = has_extensible_policy;
    m_has_extensible_policy_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_has_extensible_policy_Set() const{
    return m_has_extensible_policy_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_has_extensible_policy_Valid() const{
    return m_has_extensible_policy_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getIntegrationEndpoints() const {
    return m_integration_endpoints;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setIntegrationEndpoints(const QList<QString> &integration_endpoints) {
    m_integration_endpoints = integration_endpoints;
    m_integration_endpoints_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_integration_endpoints_Set() const{
    return m_integration_endpoints_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_integration_endpoints_Valid() const{
    return m_integration_endpoints_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getLastModifiedAt() const {
    return m_last_modified_at;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setLastModifiedAt(const QString &last_modified_at) {
    m_last_modified_at = last_modified_at;
    m_last_modified_at_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_last_modified_at_Set() const{
    return m_last_modified_at_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_last_modified_at_Valid() const{
    return m_last_modified_at_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getName() const {
    return m_name;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getPolicies() const {
    return m_policies;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setPolicies(const QList<QString> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_policies_Valid() const{
    return m_policies_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getProxies() const {
    return m_proxies;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setProxies(const QList<QString> &proxies) {
    m_proxies = proxies;
    m_proxies_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_proxies_Set() const{
    return m_proxies_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_proxies_Valid() const{
    return m_proxies_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getProxyEndpoints() const {
    return m_proxy_endpoints;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setProxyEndpoints(const QList<QString> &proxy_endpoints) {
    m_proxy_endpoints = proxy_endpoints;
    m_proxy_endpoints_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_proxy_endpoints_Set() const{
    return m_proxy_endpoints_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_proxy_endpoints_Valid() const{
    return m_proxy_endpoints_isValid;
}

OAIGoogleCloudApigeeV1ResourceFiles OAIGoogleCloudApigeeV1ApiProxyRevision::getResourceFiles() const {
    return m_resource_files;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setResourceFiles(const OAIGoogleCloudApigeeV1ResourceFiles &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getResources() const {
    return m_resources;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getRevision() const {
    return m_revision;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_revision_Valid() const{
    return m_revision_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getSharedFlows() const {
    return m_shared_flows;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setSharedFlows(const QList<QString> &shared_flows) {
    m_shared_flows = shared_flows;
    m_shared_flows_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_shared_flows_Set() const{
    return m_shared_flows_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_shared_flows_Valid() const{
    return m_shared_flows_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getSpec() const {
    return m_spec;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setSpec(const QString &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_spec_Valid() const{
    return m_spec_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getTargetEndpoints() const {
    return m_target_endpoints;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setTargetEndpoints(const QList<QString> &target_endpoints) {
    m_target_endpoints = target_endpoints;
    m_target_endpoints_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_target_endpoints_Set() const{
    return m_target_endpoints_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_target_endpoints_Valid() const{
    return m_target_endpoints_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getTargetServers() const {
    return m_target_servers;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setTargetServers(const QList<QString> &target_servers) {
    m_target_servers = target_servers;
    m_target_servers_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_target_servers_Set() const{
    return m_target_servers_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_target_servers_Valid() const{
    return m_target_servers_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getTargets() const {
    return m_targets;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setTargets(const QList<QString> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_targets_Valid() const{
    return m_targets_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxyRevision::getTeams() const {
    return m_teams;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setTeams(const QList<QString> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_teams_Valid() const{
    return m_teams_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxyRevision::getType() const {
    return m_type;
}
void OAIGoogleCloudApigeeV1ApiProxyRevision::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basepaths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_meta_data_as_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_extensible_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_flows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1ApiProxyRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
