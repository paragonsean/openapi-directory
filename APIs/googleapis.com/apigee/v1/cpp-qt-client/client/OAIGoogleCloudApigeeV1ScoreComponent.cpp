/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1ScoreComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1ScoreComponent::OAIGoogleCloudApigeeV1ScoreComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1ScoreComponent::OAIGoogleCloudApigeeV1ScoreComponent() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1ScoreComponent::~OAIGoogleCloudApigeeV1ScoreComponent() {}

void OAIGoogleCloudApigeeV1ScoreComponent::initializeModel() {

    m_calculate_time_isSet = false;
    m_calculate_time_isValid = false;

    m_data_capture_time_isSet = false;
    m_data_capture_time_isValid = false;

    m_drilldown_paths_isSet = false;
    m_drilldown_paths_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_score_path_isSet = false;
    m_score_path_isValid = false;
}

void OAIGoogleCloudApigeeV1ScoreComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1ScoreComponent::fromJsonObject(QJsonObject json) {

    m_calculate_time_isValid = ::OpenAPI::fromJsonValue(m_calculate_time, json[QString("calculateTime")]);
    m_calculate_time_isSet = !json[QString("calculateTime")].isNull() && m_calculate_time_isValid;

    m_data_capture_time_isValid = ::OpenAPI::fromJsonValue(m_data_capture_time, json[QString("dataCaptureTime")]);
    m_data_capture_time_isSet = !json[QString("dataCaptureTime")].isNull() && m_data_capture_time_isValid;

    m_drilldown_paths_isValid = ::OpenAPI::fromJsonValue(m_drilldown_paths, json[QString("drilldownPaths")]);
    m_drilldown_paths_isSet = !json[QString("drilldownPaths")].isNull() && m_drilldown_paths_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_score_path_isValid = ::OpenAPI::fromJsonValue(m_score_path, json[QString("scorePath")]);
    m_score_path_isSet = !json[QString("scorePath")].isNull() && m_score_path_isValid;
}

QString OAIGoogleCloudApigeeV1ScoreComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1ScoreComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_calculate_time_isSet) {
        obj.insert(QString("calculateTime"), ::OpenAPI::toJsonValue(m_calculate_time));
    }
    if (m_data_capture_time_isSet) {
        obj.insert(QString("dataCaptureTime"), ::OpenAPI::toJsonValue(m_data_capture_time));
    }
    if (m_drilldown_paths.size() > 0) {
        obj.insert(QString("drilldownPaths"), ::OpenAPI::toJsonValue(m_drilldown_paths));
    }
    if (m_recommendations.size() > 0) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_score_path_isSet) {
        obj.insert(QString("scorePath"), ::OpenAPI::toJsonValue(m_score_path));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1ScoreComponent::getCalculateTime() const {
    return m_calculate_time;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setCalculateTime(const QString &calculate_time) {
    m_calculate_time = calculate_time;
    m_calculate_time_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_calculate_time_Set() const{
    return m_calculate_time_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_calculate_time_Valid() const{
    return m_calculate_time_isValid;
}

QString OAIGoogleCloudApigeeV1ScoreComponent::getDataCaptureTime() const {
    return m_data_capture_time;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setDataCaptureTime(const QString &data_capture_time) {
    m_data_capture_time = data_capture_time;
    m_data_capture_time_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_data_capture_time_Set() const{
    return m_data_capture_time_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_data_capture_time_Valid() const{
    return m_data_capture_time_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ScoreComponent::getDrilldownPaths() const {
    return m_drilldown_paths;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setDrilldownPaths(const QList<QString> &drilldown_paths) {
    m_drilldown_paths = drilldown_paths;
    m_drilldown_paths_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_drilldown_paths_Set() const{
    return m_drilldown_paths_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_drilldown_paths_Valid() const{
    return m_drilldown_paths_isValid;
}

QList<OAIGoogleCloudApigeeV1ScoreComponentRecommendation> OAIGoogleCloudApigeeV1ScoreComponent::getRecommendations() const {
    return m_recommendations;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setRecommendations(const QList<OAIGoogleCloudApigeeV1ScoreComponentRecommendation> &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

qint32 OAIGoogleCloudApigeeV1ScoreComponent::getScore() const {
    return m_score;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIGoogleCloudApigeeV1ScoreComponent::getScorePath() const {
    return m_score_path;
}
void OAIGoogleCloudApigeeV1ScoreComponent::setScorePath(const QString &score_path) {
    m_score_path = score_path;
    m_score_path_isSet = true;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_score_path_Set() const{
    return m_score_path_isSet;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::is_score_path_Valid() const{
    return m_score_path_isValid;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculate_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_capture_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drilldown_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1ScoreComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
