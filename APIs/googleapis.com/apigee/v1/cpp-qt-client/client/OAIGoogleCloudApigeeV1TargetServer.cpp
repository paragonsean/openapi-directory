/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1TargetServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1TargetServer::OAIGoogleCloudApigeeV1TargetServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1TargetServer::OAIGoogleCloudApigeeV1TargetServer() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1TargetServer::~OAIGoogleCloudApigeeV1TargetServer() {}

void OAIGoogleCloudApigeeV1TargetServer::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_s_sl_info_isSet = false;
    m_s_sl_info_isValid = false;
}

void OAIGoogleCloudApigeeV1TargetServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1TargetServer::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_s_sl_info_isValid = ::OpenAPI::fromJsonValue(m_s_sl_info, json[QString("sSLInfo")]);
    m_s_sl_info_isSet = !json[QString("sSLInfo")].isNull() && m_s_sl_info_isValid;
}

QString OAIGoogleCloudApigeeV1TargetServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1TargetServer::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_s_sl_info.isSet()) {
        obj.insert(QString("sSLInfo"), ::OpenAPI::toJsonValue(m_s_sl_info));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1TargetServer::getDescription() const {
    return m_description;
}
void OAIGoogleCloudApigeeV1TargetServer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudApigeeV1TargetServer::getHost() const {
    return m_host;
}
void OAIGoogleCloudApigeeV1TargetServer::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_host_Valid() const{
    return m_host_isValid;
}

bool OAIGoogleCloudApigeeV1TargetServer::isIsEnabled() const {
    return m_is_enabled;
}
void OAIGoogleCloudApigeeV1TargetServer::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAIGoogleCloudApigeeV1TargetServer::getName() const {
    return m_name;
}
void OAIGoogleCloudApigeeV1TargetServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGoogleCloudApigeeV1TargetServer::getPort() const {
    return m_port;
}
void OAIGoogleCloudApigeeV1TargetServer::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGoogleCloudApigeeV1TargetServer::getProtocol() const {
    return m_protocol;
}
void OAIGoogleCloudApigeeV1TargetServer::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAIGoogleCloudApigeeV1TlsInfo OAIGoogleCloudApigeeV1TargetServer::getSSlInfo() const {
    return m_s_sl_info;
}
void OAIGoogleCloudApigeeV1TargetServer::setSSlInfo(const OAIGoogleCloudApigeeV1TlsInfo &s_sl_info) {
    m_s_sl_info = s_sl_info;
    m_s_sl_info_isSet = true;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_s_sl_info_Set() const{
    return m_s_sl_info_isSet;
}

bool OAIGoogleCloudApigeeV1TargetServer::is_s_sl_info_Valid() const{
    return m_s_sl_info_isValid;
}

bool OAIGoogleCloudApigeeV1TargetServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_sl_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1TargetServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
