/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1Credential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1Credential::OAIGoogleCloudApigeeV1Credential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1Credential::OAIGoogleCloudApigeeV1Credential() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1Credential::~OAIGoogleCloudApigeeV1Credential() {}

void OAIGoogleCloudApigeeV1Credential::initializeModel() {

    m_api_products_isSet = false;
    m_api_products_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_consumer_key_isSet = false;
    m_consumer_key_isValid = false;

    m_consumer_secret_isSet = false;
    m_consumer_secret_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleCloudApigeeV1Credential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1Credential::fromJsonObject(QJsonObject json) {

    m_api_products_isValid = ::OpenAPI::fromJsonValue(m_api_products, json[QString("apiProducts")]);
    m_api_products_isSet = !json[QString("apiProducts")].isNull() && m_api_products_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_consumer_key, json[QString("consumerKey")]);
    m_consumer_key_isSet = !json[QString("consumerKey")].isNull() && m_consumer_key_isValid;

    m_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_consumer_secret, json[QString("consumerSecret")]);
    m_consumer_secret_isSet = !json[QString("consumerSecret")].isNull() && m_consumer_secret_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("issuedAt")]);
    m_issued_at_isSet = !json[QString("issuedAt")].isNull() && m_issued_at_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1Credential::asJsonObject() const {
    QJsonObject obj;
    if (m_api_products.size() > 0) {
        obj.insert(QString("apiProducts"), ::OpenAPI::toJsonValue(m_api_products));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_consumer_key_isSet) {
        obj.insert(QString("consumerKey"), ::OpenAPI::toJsonValue(m_consumer_key));
    }
    if (m_consumer_secret_isSet) {
        obj.insert(QString("consumerSecret"), ::OpenAPI::toJsonValue(m_consumer_secret));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("issuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIGoogleCloudApigeeV1ApiProductRef> OAIGoogleCloudApigeeV1Credential::getApiProducts() const {
    return m_api_products;
}
void OAIGoogleCloudApigeeV1Credential::setApiProducts(const QList<OAIGoogleCloudApigeeV1ApiProductRef> &api_products) {
    m_api_products = api_products;
    m_api_products_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_api_products_Set() const{
    return m_api_products_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_api_products_Valid() const{
    return m_api_products_isValid;
}

QList<OAIGoogleCloudApigeeV1Attribute> OAIGoogleCloudApigeeV1Credential::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudApigeeV1Credential::setAttributes(const QList<OAIGoogleCloudApigeeV1Attribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::getConsumerKey() const {
    return m_consumer_key;
}
void OAIGoogleCloudApigeeV1Credential::setConsumerKey(const QString &consumer_key) {
    m_consumer_key = consumer_key;
    m_consumer_key_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_consumer_key_Set() const{
    return m_consumer_key_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_consumer_key_Valid() const{
    return m_consumer_key_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::getConsumerSecret() const {
    return m_consumer_secret;
}
void OAIGoogleCloudApigeeV1Credential::setConsumerSecret(const QString &consumer_secret) {
    m_consumer_secret = consumer_secret;
    m_consumer_secret_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_consumer_secret_Set() const{
    return m_consumer_secret_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_consumer_secret_Valid() const{
    return m_consumer_secret_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::getExpiresAt() const {
    return m_expires_at;
}
void OAIGoogleCloudApigeeV1Credential::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::getIssuedAt() const {
    return m_issued_at;
}
void OAIGoogleCloudApigeeV1Credential::setIssuedAt(const QString &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1Credential::getScopes() const {
    return m_scopes;
}
void OAIGoogleCloudApigeeV1Credential::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIGoogleCloudApigeeV1Credential::getStatus() const {
    return m_status;
}
void OAIGoogleCloudApigeeV1Credential::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudApigeeV1Credential::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudApigeeV1Credential::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleCloudApigeeV1Credential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1Credential::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
