/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1RevisionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1RevisionStatus::OAIGoogleCloudApigeeV1RevisionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1RevisionStatus::OAIGoogleCloudApigeeV1RevisionStatus() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1RevisionStatus::~OAIGoogleCloudApigeeV1RevisionStatus() {}

void OAIGoogleCloudApigeeV1RevisionStatus::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_json_spec_isSet = false;
    m_json_spec_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAIGoogleCloudApigeeV1RevisionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1RevisionStatus::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_json_spec_isValid = ::OpenAPI::fromJsonValue(m_json_spec, json[QString("jsonSpec")]);
    m_json_spec_isSet = !json[QString("jsonSpec")].isNull() && m_json_spec_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAIGoogleCloudApigeeV1RevisionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1RevisionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_json_spec_isSet) {
        obj.insert(QString("jsonSpec"), ::OpenAPI::toJsonValue(m_json_spec));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

QList<OAIGoogleCloudApigeeV1UpdateError> OAIGoogleCloudApigeeV1RevisionStatus::getErrors() const {
    return m_errors;
}
void OAIGoogleCloudApigeeV1RevisionStatus::setErrors(const QList<OAIGoogleCloudApigeeV1UpdateError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIGoogleCloudApigeeV1RevisionStatus::getJsonSpec() const {
    return m_json_spec;
}
void OAIGoogleCloudApigeeV1RevisionStatus::setJsonSpec(const QString &json_spec) {
    m_json_spec = json_spec;
    m_json_spec_isSet = true;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_json_spec_Set() const{
    return m_json_spec_isSet;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_json_spec_Valid() const{
    return m_json_spec_isValid;
}

qint32 OAIGoogleCloudApigeeV1RevisionStatus::getReplicas() const {
    return m_replicas;
}
void OAIGoogleCloudApigeeV1RevisionStatus::setReplicas(const qint32 &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_replicas_Valid() const{
    return m_replicas_isValid;
}

QString OAIGoogleCloudApigeeV1RevisionStatus::getRevisionId() const {
    return m_revision_id;
}
void OAIGoogleCloudApigeeV1RevisionStatus::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1RevisionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
