/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudApigeeV1SecurityActionConditionConfig.h
 *
 * The following are a list of conditions. A valid SecurityAction must contain at least one condition. Within a condition, each element is ORed. Across conditions elements are ANDed. For example if a SecurityAction has the following: ip_address_ranges: [\&quot;ip1\&quot;, \&quot;ip2\&quot;] and bot_reasons: [\&quot;Flooder\&quot;, \&quot;Robot Abuser\&quot;] then this is interpreted as: enforce the action if the incoming request has ((ip_address_ranges &#x3D; \&quot;ip1\&quot; OR ip_address_ranges &#x3D; \&quot;ip2\&quot;) AND (bot_reasons&#x3D;\&quot;Flooder\&quot; OR bot_reasons&#x3D;\&quot;Robot Abuser\&quot;)). Conditions other than ip_address_ranges and bot_reasons cannot be ANDed.
 */

#ifndef OAIGoogleCloudApigeeV1SecurityActionConditionConfig_H
#define OAIGoogleCloudApigeeV1SecurityActionConditionConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudApigeeV1SecurityActionConditionConfig : public OAIObject {
public:
    OAIGoogleCloudApigeeV1SecurityActionConditionConfig();
    OAIGoogleCloudApigeeV1SecurityActionConditionConfig(QString json);
    ~OAIGoogleCloudApigeeV1SecurityActionConditionConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAccessTokens() const;
    void setAccessTokens(const QList<QString> &access_tokens);
    bool is_access_tokens_Set() const;
    bool is_access_tokens_Valid() const;

    QList<QString> getApiKeys() const;
    void setApiKeys(const QList<QString> &api_keys);
    bool is_api_keys_Set() const;
    bool is_api_keys_Valid() const;

    QList<QString> getApiProducts() const;
    void setApiProducts(const QList<QString> &api_products);
    bool is_api_products_Set() const;
    bool is_api_products_Valid() const;

    QList<QString> getBotReasons() const;
    void setBotReasons(const QList<QString> &bot_reasons);
    bool is_bot_reasons_Set() const;
    bool is_bot_reasons_Valid() const;

    QList<QString> getDeveloperApps() const;
    void setDeveloperApps(const QList<QString> &developer_apps);
    bool is_developer_apps_Set() const;
    bool is_developer_apps_Valid() const;

    QList<QString> getDevelopers() const;
    void setDevelopers(const QList<QString> &developers);
    bool is_developers_Set() const;
    bool is_developers_Valid() const;

    QList<QString> getIpAddressRanges() const;
    void setIpAddressRanges(const QList<QString> &ip_address_ranges);
    bool is_ip_address_ranges_Set() const;
    bool is_ip_address_ranges_Valid() const;

    QList<QString> getUserAgents() const;
    void setUserAgents(const QList<QString> &user_agents);
    bool is_user_agents_Set() const;
    bool is_user_agents_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_access_tokens;
    bool m_access_tokens_isSet;
    bool m_access_tokens_isValid;

    QList<QString> m_api_keys;
    bool m_api_keys_isSet;
    bool m_api_keys_isValid;

    QList<QString> m_api_products;
    bool m_api_products_isSet;
    bool m_api_products_isValid;

    QList<QString> m_bot_reasons;
    bool m_bot_reasons_isSet;
    bool m_bot_reasons_isValid;

    QList<QString> m_developer_apps;
    bool m_developer_apps_isSet;
    bool m_developer_apps_isValid;

    QList<QString> m_developers;
    bool m_developers_isSet;
    bool m_developers_isValid;

    QList<QString> m_ip_address_ranges;
    bool m_ip_address_ranges_isSet;
    bool m_ip_address_ranges_isValid;

    QList<QString> m_user_agents;
    bool m_user_agents_isSet;
    bool m_user_agents_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudApigeeV1SecurityActionConditionConfig)

#endif // OAIGoogleCloudApigeeV1SecurityActionConditionConfig_H
