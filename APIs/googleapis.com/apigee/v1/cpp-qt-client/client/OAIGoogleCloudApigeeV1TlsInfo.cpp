/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1TlsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1TlsInfo::OAIGoogleCloudApigeeV1TlsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1TlsInfo::OAIGoogleCloudApigeeV1TlsInfo() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1TlsInfo::~OAIGoogleCloudApigeeV1TlsInfo() {}

void OAIGoogleCloudApigeeV1TlsInfo::initializeModel() {

    m_ciphers_isSet = false;
    m_ciphers_isValid = false;

    m_client_auth_enabled_isSet = false;
    m_client_auth_enabled_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_ignore_validation_errors_isSet = false;
    m_ignore_validation_errors_isValid = false;

    m_key_alias_isSet = false;
    m_key_alias_isValid = false;

    m_key_store_isSet = false;
    m_key_store_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_trust_store_isSet = false;
    m_trust_store_isValid = false;
}

void OAIGoogleCloudApigeeV1TlsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1TlsInfo::fromJsonObject(QJsonObject json) {

    m_ciphers_isValid = ::OpenAPI::fromJsonValue(m_ciphers, json[QString("ciphers")]);
    m_ciphers_isSet = !json[QString("ciphers")].isNull() && m_ciphers_isValid;

    m_client_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_client_auth_enabled, json[QString("clientAuthEnabled")]);
    m_client_auth_enabled_isSet = !json[QString("clientAuthEnabled")].isNull() && m_client_auth_enabled_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_ignore_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_ignore_validation_errors, json[QString("ignoreValidationErrors")]);
    m_ignore_validation_errors_isSet = !json[QString("ignoreValidationErrors")].isNull() && m_ignore_validation_errors_isValid;

    m_key_alias_isValid = ::OpenAPI::fromJsonValue(m_key_alias, json[QString("keyAlias")]);
    m_key_alias_isSet = !json[QString("keyAlias")].isNull() && m_key_alias_isValid;

    m_key_store_isValid = ::OpenAPI::fromJsonValue(m_key_store, json[QString("keyStore")]);
    m_key_store_isSet = !json[QString("keyStore")].isNull() && m_key_store_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_trust_store_isValid = ::OpenAPI::fromJsonValue(m_trust_store, json[QString("trustStore")]);
    m_trust_store_isSet = !json[QString("trustStore")].isNull() && m_trust_store_isValid;
}

QString OAIGoogleCloudApigeeV1TlsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1TlsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_ciphers.size() > 0) {
        obj.insert(QString("ciphers"), ::OpenAPI::toJsonValue(m_ciphers));
    }
    if (m_client_auth_enabled_isSet) {
        obj.insert(QString("clientAuthEnabled"), ::OpenAPI::toJsonValue(m_client_auth_enabled));
    }
    if (m_common_name.isSet()) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_ignore_validation_errors_isSet) {
        obj.insert(QString("ignoreValidationErrors"), ::OpenAPI::toJsonValue(m_ignore_validation_errors));
    }
    if (m_key_alias_isSet) {
        obj.insert(QString("keyAlias"), ::OpenAPI::toJsonValue(m_key_alias));
    }
    if (m_key_store_isSet) {
        obj.insert(QString("keyStore"), ::OpenAPI::toJsonValue(m_key_store));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_trust_store_isSet) {
        obj.insert(QString("trustStore"), ::OpenAPI::toJsonValue(m_trust_store));
    }
    return obj;
}

QList<QString> OAIGoogleCloudApigeeV1TlsInfo::getCiphers() const {
    return m_ciphers;
}
void OAIGoogleCloudApigeeV1TlsInfo::setCiphers(const QList<QString> &ciphers) {
    m_ciphers = ciphers;
    m_ciphers_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_ciphers_Set() const{
    return m_ciphers_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_ciphers_Valid() const{
    return m_ciphers_isValid;
}

bool OAIGoogleCloudApigeeV1TlsInfo::isClientAuthEnabled() const {
    return m_client_auth_enabled;
}
void OAIGoogleCloudApigeeV1TlsInfo::setClientAuthEnabled(const bool &client_auth_enabled) {
    m_client_auth_enabled = client_auth_enabled;
    m_client_auth_enabled_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_client_auth_enabled_Set() const{
    return m_client_auth_enabled_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_client_auth_enabled_Valid() const{
    return m_client_auth_enabled_isValid;
}

OAIGoogleCloudApigeeV1TlsInfoCommonName OAIGoogleCloudApigeeV1TlsInfo::getCommonName() const {
    return m_common_name;
}
void OAIGoogleCloudApigeeV1TlsInfo::setCommonName(const OAIGoogleCloudApigeeV1TlsInfoCommonName &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_common_name_Valid() const{
    return m_common_name_isValid;
}

bool OAIGoogleCloudApigeeV1TlsInfo::isEnabled() const {
    return m_enabled;
}
void OAIGoogleCloudApigeeV1TlsInfo::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIGoogleCloudApigeeV1TlsInfo::isIgnoreValidationErrors() const {
    return m_ignore_validation_errors;
}
void OAIGoogleCloudApigeeV1TlsInfo::setIgnoreValidationErrors(const bool &ignore_validation_errors) {
    m_ignore_validation_errors = ignore_validation_errors;
    m_ignore_validation_errors_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_ignore_validation_errors_Set() const{
    return m_ignore_validation_errors_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_ignore_validation_errors_Valid() const{
    return m_ignore_validation_errors_isValid;
}

QString OAIGoogleCloudApigeeV1TlsInfo::getKeyAlias() const {
    return m_key_alias;
}
void OAIGoogleCloudApigeeV1TlsInfo::setKeyAlias(const QString &key_alias) {
    m_key_alias = key_alias;
    m_key_alias_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_key_alias_Set() const{
    return m_key_alias_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_key_alias_Valid() const{
    return m_key_alias_isValid;
}

QString OAIGoogleCloudApigeeV1TlsInfo::getKeyStore() const {
    return m_key_store;
}
void OAIGoogleCloudApigeeV1TlsInfo::setKeyStore(const QString &key_store) {
    m_key_store = key_store;
    m_key_store_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_key_store_Set() const{
    return m_key_store_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_key_store_Valid() const{
    return m_key_store_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1TlsInfo::getProtocols() const {
    return m_protocols;
}
void OAIGoogleCloudApigeeV1TlsInfo::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QString OAIGoogleCloudApigeeV1TlsInfo::getTrustStore() const {
    return m_trust_store;
}
void OAIGoogleCloudApigeeV1TlsInfo::setTrustStore(const QString &trust_store) {
    m_trust_store = trust_store;
    m_trust_store_isSet = true;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_trust_store_Set() const{
    return m_trust_store_isSet;
}

bool OAIGoogleCloudApigeeV1TlsInfo::is_trust_store_Valid() const{
    return m_trust_store_isValid;
}

bool OAIGoogleCloudApigeeV1TlsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ciphers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_validation_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1TlsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
