/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeConfigstoreBundleBadBundleViolation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeConfigstoreBundleBadBundleViolation::OAIEdgeConfigstoreBundleBadBundleViolation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeConfigstoreBundleBadBundleViolation::OAIEdgeConfigstoreBundleBadBundleViolation() {
    this->initializeModel();
}

OAIEdgeConfigstoreBundleBadBundleViolation::~OAIEdgeConfigstoreBundleBadBundleViolation() {}

void OAIEdgeConfigstoreBundleBadBundleViolation::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;
}

void OAIEdgeConfigstoreBundleBadBundleViolation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeConfigstoreBundleBadBundleViolation::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;
}

QString OAIEdgeConfigstoreBundleBadBundleViolation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeConfigstoreBundleBadBundleViolation::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    return obj;
}

QString OAIEdgeConfigstoreBundleBadBundleViolation::getDescription() const {
    return m_description;
}
void OAIEdgeConfigstoreBundleBadBundleViolation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEdgeConfigstoreBundleBadBundleViolation::getFilename() const {
    return m_filename;
}
void OAIEdgeConfigstoreBundleBadBundleViolation::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::is_filename_Valid() const{
    return m_filename_isValid;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeConfigstoreBundleBadBundleViolation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
