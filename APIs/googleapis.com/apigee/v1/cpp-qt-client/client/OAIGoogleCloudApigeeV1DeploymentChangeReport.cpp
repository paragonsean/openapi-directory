/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1DeploymentChangeReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1DeploymentChangeReport::OAIGoogleCloudApigeeV1DeploymentChangeReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1DeploymentChangeReport::OAIGoogleCloudApigeeV1DeploymentChangeReport() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1DeploymentChangeReport::~OAIGoogleCloudApigeeV1DeploymentChangeReport() {}

void OAIGoogleCloudApigeeV1DeploymentChangeReport::initializeModel() {

    m_routing_changes_isSet = false;
    m_routing_changes_isValid = false;

    m_routing_conflicts_isSet = false;
    m_routing_conflicts_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAIGoogleCloudApigeeV1DeploymentChangeReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1DeploymentChangeReport::fromJsonObject(QJsonObject json) {

    m_routing_changes_isValid = ::OpenAPI::fromJsonValue(m_routing_changes, json[QString("routingChanges")]);
    m_routing_changes_isSet = !json[QString("routingChanges")].isNull() && m_routing_changes_isValid;

    m_routing_conflicts_isValid = ::OpenAPI::fromJsonValue(m_routing_conflicts, json[QString("routingConflicts")]);
    m_routing_conflicts_isSet = !json[QString("routingConflicts")].isNull() && m_routing_conflicts_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validationErrors")]);
    m_validation_errors_isSet = !json[QString("validationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAIGoogleCloudApigeeV1DeploymentChangeReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1DeploymentChangeReport::asJsonObject() const {
    QJsonObject obj;
    if (m_routing_changes.size() > 0) {
        obj.insert(QString("routingChanges"), ::OpenAPI::toJsonValue(m_routing_changes));
    }
    if (m_routing_conflicts.size() > 0) {
        obj.insert(QString("routingConflicts"), ::OpenAPI::toJsonValue(m_routing_conflicts));
    }
    if (m_validation_errors.isSet()) {
        obj.insert(QString("validationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QList<OAIGoogleCloudApigeeV1DeploymentChangeReportRoutingChange> OAIGoogleCloudApigeeV1DeploymentChangeReport::getRoutingChanges() const {
    return m_routing_changes;
}
void OAIGoogleCloudApigeeV1DeploymentChangeReport::setRoutingChanges(const QList<OAIGoogleCloudApigeeV1DeploymentChangeReportRoutingChange> &routing_changes) {
    m_routing_changes = routing_changes;
    m_routing_changes_isSet = true;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_routing_changes_Set() const{
    return m_routing_changes_isSet;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_routing_changes_Valid() const{
    return m_routing_changes_isValid;
}

QList<OAIGoogleCloudApigeeV1DeploymentChangeReportRoutingConflict> OAIGoogleCloudApigeeV1DeploymentChangeReport::getRoutingConflicts() const {
    return m_routing_conflicts;
}
void OAIGoogleCloudApigeeV1DeploymentChangeReport::setRoutingConflicts(const QList<OAIGoogleCloudApigeeV1DeploymentChangeReportRoutingConflict> &routing_conflicts) {
    m_routing_conflicts = routing_conflicts;
    m_routing_conflicts_isSet = true;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_routing_conflicts_Set() const{
    return m_routing_conflicts_isSet;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_routing_conflicts_Valid() const{
    return m_routing_conflicts_isValid;
}

OAIGoogleRpcPreconditionFailure OAIGoogleCloudApigeeV1DeploymentChangeReport::getValidationErrors() const {
    return m_validation_errors;
}
void OAIGoogleCloudApigeeV1DeploymentChangeReport::setValidationErrors(const OAIGoogleRpcPreconditionFailure &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_routing_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_conflicts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1DeploymentChangeReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
