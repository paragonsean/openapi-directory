/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1CertInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1CertInfo::OAIGoogleCloudApigeeV1CertInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1CertInfo::OAIGoogleCloudApigeeV1CertInfo() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1CertInfo::~OAIGoogleCloudApigeeV1CertInfo() {}

void OAIGoogleCloudApigeeV1CertInfo::initializeModel() {

    m_basic_constraints_isSet = false;
    m_basic_constraints_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_is_valid_isSet = false;
    m_is_valid_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_sig_alg_name_isSet = false;
    m_sig_alg_name_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleCloudApigeeV1CertInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1CertInfo::fromJsonObject(QJsonObject json) {

    m_basic_constraints_isValid = ::OpenAPI::fromJsonValue(m_basic_constraints, json[QString("basicConstraints")]);
    m_basic_constraints_isSet = !json[QString("basicConstraints")].isNull() && m_basic_constraints_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_is_valid_isValid = ::OpenAPI::fromJsonValue(m_is_valid, json[QString("isValid")]);
    m_is_valid_isSet = !json[QString("isValid")].isNull() && m_is_valid_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_sig_alg_name_isValid = ::OpenAPI::fromJsonValue(m_sig_alg_name, json[QString("sigAlgName")]);
    m_sig_alg_name_isSet = !json[QString("sigAlgName")].isNull() && m_sig_alg_name_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("subjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("subjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1CertInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_constraints_isSet) {
        obj.insert(QString("basicConstraints"), ::OpenAPI::toJsonValue(m_basic_constraints));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_is_valid_isSet) {
        obj.insert(QString("isValid"), ::OpenAPI::toJsonValue(m_is_valid));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_sig_alg_name_isSet) {
        obj.insert(QString("sigAlgName"), ::OpenAPI::toJsonValue(m_sig_alg_name));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subject_alternative_names.size() > 0) {
        obj.insert(QString("subjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1CertInfo::getBasicConstraints() const {
    return m_basic_constraints;
}
void OAIGoogleCloudApigeeV1CertInfo::setBasicConstraints(const QString &basic_constraints) {
    m_basic_constraints = basic_constraints;
    m_basic_constraints_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_basic_constraints_Set() const{
    return m_basic_constraints_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_basic_constraints_Valid() const{
    return m_basic_constraints_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getExpiryDate() const {
    return m_expiry_date;
}
void OAIGoogleCloudApigeeV1CertInfo::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getIsValid() const {
    return m_is_valid;
}
void OAIGoogleCloudApigeeV1CertInfo::setIsValid(const QString &is_valid) {
    m_is_valid = is_valid;
    m_is_valid_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_is_valid_Set() const{
    return m_is_valid_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_is_valid_Valid() const{
    return m_is_valid_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getIssuer() const {
    return m_issuer;
}
void OAIGoogleCloudApigeeV1CertInfo::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getPublicKey() const {
    return m_public_key;
}
void OAIGoogleCloudApigeeV1CertInfo::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getSerialNumber() const {
    return m_serial_number;
}
void OAIGoogleCloudApigeeV1CertInfo::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getSigAlgName() const {
    return m_sig_alg_name;
}
void OAIGoogleCloudApigeeV1CertInfo::setSigAlgName(const QString &sig_alg_name) {
    m_sig_alg_name = sig_alg_name;
    m_sig_alg_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_sig_alg_name_Set() const{
    return m_sig_alg_name_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_sig_alg_name_Valid() const{
    return m_sig_alg_name_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getSubject() const {
    return m_subject;
}
void OAIGoogleCloudApigeeV1CertInfo::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1CertInfo::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAIGoogleCloudApigeeV1CertInfo::setSubjectAlternativeNames(const QList<QString> &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QString OAIGoogleCloudApigeeV1CertInfo::getValidFrom() const {
    return m_valid_from;
}
void OAIGoogleCloudApigeeV1CertInfo::setValidFrom(const QString &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

qint32 OAIGoogleCloudApigeeV1CertInfo::getVersion() const {
    return m_version;
}
void OAIGoogleCloudApigeeV1CertInfo::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleCloudApigeeV1CertInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleCloudApigeeV1CertInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_alg_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1CertInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
