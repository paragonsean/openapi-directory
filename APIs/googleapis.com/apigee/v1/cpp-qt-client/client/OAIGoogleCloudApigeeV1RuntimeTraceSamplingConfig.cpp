/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::~OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig() {}

void OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::initializeModel() {

    m_sampler_isSet = false;
    m_sampler_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;
}

void OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::fromJsonObject(QJsonObject json) {

    m_sampler_isValid = ::OpenAPI::fromJsonValue(m_sampler, json[QString("sampler")]);
    m_sampler_isSet = !json[QString("sampler")].isNull() && m_sampler_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;
}

QString OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_sampler_isSet) {
        obj.insert(QString("sampler"), ::OpenAPI::toJsonValue(m_sampler));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::getSampler() const {
    return m_sampler;
}
void OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::setSampler(const QString &sampler) {
    m_sampler = sampler;
    m_sampler_isSet = true;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::is_sampler_Set() const{
    return m_sampler_isSet;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::is_sampler_Valid() const{
    return m_sampler_isValid;
}

float OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::getSamplingRate() const {
    return m_sampling_rate;
}
void OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::setSamplingRate(const float &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sampler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1RuntimeTraceSamplingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
