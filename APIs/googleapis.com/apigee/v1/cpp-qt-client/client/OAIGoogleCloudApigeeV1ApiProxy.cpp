/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1ApiProxy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1ApiProxy::OAIGoogleCloudApigeeV1ApiProxy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1ApiProxy::OAIGoogleCloudApigeeV1ApiProxy() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1ApiProxy::~OAIGoogleCloudApigeeV1ApiProxy() {}

void OAIGoogleCloudApigeeV1ApiProxy::initializeModel() {

    m_api_proxy_type_isSet = false;
    m_api_proxy_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_latest_revision_id_isSet = false;
    m_latest_revision_id_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIGoogleCloudApigeeV1ApiProxy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1ApiProxy::fromJsonObject(QJsonObject json) {

    m_api_proxy_type_isValid = ::OpenAPI::fromJsonValue(m_api_proxy_type, json[QString("apiProxyType")]);
    m_api_proxy_type_isSet = !json[QString("apiProxyType")].isNull() && m_api_proxy_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_latest_revision_id_isValid = ::OpenAPI::fromJsonValue(m_latest_revision_id, json[QString("latestRevisionId")]);
    m_latest_revision_id_isSet = !json[QString("latestRevisionId")].isNull() && m_latest_revision_id_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("metaData")]);
    m_meta_data_isSet = !json[QString("metaData")].isNull() && m_meta_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1ApiProxy::asJsonObject() const {
    QJsonObject obj;
    if (m_api_proxy_type_isSet) {
        obj.insert(QString("apiProxyType"), ::OpenAPI::toJsonValue(m_api_proxy_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_latest_revision_id_isSet) {
        obj.insert(QString("latestRevisionId"), ::OpenAPI::toJsonValue(m_latest_revision_id));
    }
    if (m_meta_data.isSet()) {
        obj.insert(QString("metaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_revision.size() > 0) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1ApiProxy::getApiProxyType() const {
    return m_api_proxy_type;
}
void OAIGoogleCloudApigeeV1ApiProxy::setApiProxyType(const QString &api_proxy_type) {
    m_api_proxy_type = api_proxy_type;
    m_api_proxy_type_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_api_proxy_type_Set() const{
    return m_api_proxy_type_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_api_proxy_type_Valid() const{
    return m_api_proxy_type_isValid;
}

QMap<QString, QString> OAIGoogleCloudApigeeV1ApiProxy::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudApigeeV1ApiProxy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxy::getLatestRevisionId() const {
    return m_latest_revision_id;
}
void OAIGoogleCloudApigeeV1ApiProxy::setLatestRevisionId(const QString &latest_revision_id) {
    m_latest_revision_id = latest_revision_id;
    m_latest_revision_id_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_latest_revision_id_Set() const{
    return m_latest_revision_id_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_latest_revision_id_Valid() const{
    return m_latest_revision_id_isValid;
}

OAIGoogleCloudApigeeV1EntityMetadata OAIGoogleCloudApigeeV1ApiProxy::getMetaData() const {
    return m_meta_data;
}
void OAIGoogleCloudApigeeV1ApiProxy::setMetaData(const OAIGoogleCloudApigeeV1EntityMetadata &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIGoogleCloudApigeeV1ApiProxy::getName() const {
    return m_name;
}
void OAIGoogleCloudApigeeV1ApiProxy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudApigeeV1ApiProxy::isReadOnly() const {
    return m_read_only;
}
void OAIGoogleCloudApigeeV1ApiProxy::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QList<QString> OAIGoogleCloudApigeeV1ApiProxy::getRevision() const {
    return m_revision;
}
void OAIGoogleCloudApigeeV1ApiProxy::setRevision(const QList<QString> &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGoogleCloudApigeeV1ApiProxy::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIGoogleCloudApigeeV1ApiProxy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_proxy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1ApiProxy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
