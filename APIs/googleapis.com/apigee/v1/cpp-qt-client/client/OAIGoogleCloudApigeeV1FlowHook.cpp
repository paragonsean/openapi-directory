/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1FlowHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1FlowHook::OAIGoogleCloudApigeeV1FlowHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1FlowHook::OAIGoogleCloudApigeeV1FlowHook() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1FlowHook::~OAIGoogleCloudApigeeV1FlowHook() {}

void OAIGoogleCloudApigeeV1FlowHook::initializeModel() {

    m_continue_on_error_isSet = false;
    m_continue_on_error_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_flow_hook_point_isSet = false;
    m_flow_hook_point_isValid = false;

    m_shared_flow_isSet = false;
    m_shared_flow_isValid = false;
}

void OAIGoogleCloudApigeeV1FlowHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1FlowHook::fromJsonObject(QJsonObject json) {

    m_continue_on_error_isValid = ::OpenAPI::fromJsonValue(m_continue_on_error, json[QString("continueOnError")]);
    m_continue_on_error_isSet = !json[QString("continueOnError")].isNull() && m_continue_on_error_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_flow_hook_point_isValid = ::OpenAPI::fromJsonValue(m_flow_hook_point, json[QString("flowHookPoint")]);
    m_flow_hook_point_isSet = !json[QString("flowHookPoint")].isNull() && m_flow_hook_point_isValid;

    m_shared_flow_isValid = ::OpenAPI::fromJsonValue(m_shared_flow, json[QString("sharedFlow")]);
    m_shared_flow_isSet = !json[QString("sharedFlow")].isNull() && m_shared_flow_isValid;
}

QString OAIGoogleCloudApigeeV1FlowHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1FlowHook::asJsonObject() const {
    QJsonObject obj;
    if (m_continue_on_error_isSet) {
        obj.insert(QString("continueOnError"), ::OpenAPI::toJsonValue(m_continue_on_error));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_flow_hook_point_isSet) {
        obj.insert(QString("flowHookPoint"), ::OpenAPI::toJsonValue(m_flow_hook_point));
    }
    if (m_shared_flow_isSet) {
        obj.insert(QString("sharedFlow"), ::OpenAPI::toJsonValue(m_shared_flow));
    }
    return obj;
}

bool OAIGoogleCloudApigeeV1FlowHook::isContinueOnError() const {
    return m_continue_on_error;
}
void OAIGoogleCloudApigeeV1FlowHook::setContinueOnError(const bool &continue_on_error) {
    m_continue_on_error = continue_on_error;
    m_continue_on_error_isSet = true;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_continue_on_error_Set() const{
    return m_continue_on_error_isSet;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_continue_on_error_Valid() const{
    return m_continue_on_error_isValid;
}

QString OAIGoogleCloudApigeeV1FlowHook::getDescription() const {
    return m_description;
}
void OAIGoogleCloudApigeeV1FlowHook::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudApigeeV1FlowHook::getFlowHookPoint() const {
    return m_flow_hook_point;
}
void OAIGoogleCloudApigeeV1FlowHook::setFlowHookPoint(const QString &flow_hook_point) {
    m_flow_hook_point = flow_hook_point;
    m_flow_hook_point_isSet = true;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_flow_hook_point_Set() const{
    return m_flow_hook_point_isSet;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_flow_hook_point_Valid() const{
    return m_flow_hook_point_isValid;
}

QString OAIGoogleCloudApigeeV1FlowHook::getSharedFlow() const {
    return m_shared_flow;
}
void OAIGoogleCloudApigeeV1FlowHook::setSharedFlow(const QString &shared_flow) {
    m_shared_flow = shared_flow;
    m_shared_flow_isSet = true;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_shared_flow_Set() const{
    return m_shared_flow_isSet;
}

bool OAIGoogleCloudApigeeV1FlowHook::is_shared_flow_Valid() const{
    return m_shared_flow_isValid;
}

bool OAIGoogleCloudApigeeV1FlowHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continue_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_hook_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_flow_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1FlowHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
