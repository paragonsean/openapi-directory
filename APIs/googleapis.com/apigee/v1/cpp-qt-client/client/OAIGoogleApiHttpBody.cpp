/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleApiHttpBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleApiHttpBody::OAIGoogleApiHttpBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleApiHttpBody::OAIGoogleApiHttpBody() {
    this->initializeModel();
}

OAIGoogleApiHttpBody::~OAIGoogleApiHttpBody() {}

void OAIGoogleApiHttpBody::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;
}

void OAIGoogleApiHttpBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleApiHttpBody::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    if(json["extensions"].isArray()){
        auto arr = json["extensions"].toArray();
        m_extensions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_extensions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_extensions_isSet = !jval.isNull() && m_extensions_isValid;
                m_extensions.push_back(item);
            }
        }
    }
}

QString OAIGoogleApiHttpBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleApiHttpBody::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_extensions.size() > 0) {
        
        obj.insert(QString("extensions"), toJsonValue(m_extensions));
    }
    return obj;
}

QString OAIGoogleApiHttpBody::getContentType() const {
    return m_content_type;
}
void OAIGoogleApiHttpBody::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIGoogleApiHttpBody::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIGoogleApiHttpBody::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QByteArray OAIGoogleApiHttpBody::getData() const {
    return m_data;
}
void OAIGoogleApiHttpBody::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGoogleApiHttpBody::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGoogleApiHttpBody::is_data_Valid() const{
    return m_data_isValid;
}

QList<QMap<QString, QJsonValue>> OAIGoogleApiHttpBody::getExtensions() const {
    return m_extensions;
}
void OAIGoogleApiHttpBody::setExtensions(const QList<QMap<QString, QJsonValue>> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIGoogleApiHttpBody::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIGoogleApiHttpBody::is_extensions_Valid() const{
    return m_extensions_isValid;
}

bool OAIGoogleApiHttpBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleApiHttpBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
