/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1NodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1NodeConfig::OAIGoogleCloudApigeeV1NodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1NodeConfig::OAIGoogleCloudApigeeV1NodeConfig() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1NodeConfig::~OAIGoogleCloudApigeeV1NodeConfig() {}

void OAIGoogleCloudApigeeV1NodeConfig::initializeModel() {

    m_current_aggregate_node_count_isSet = false;
    m_current_aggregate_node_count_isValid = false;

    m_max_node_count_isSet = false;
    m_max_node_count_isValid = false;

    m_min_node_count_isSet = false;
    m_min_node_count_isValid = false;
}

void OAIGoogleCloudApigeeV1NodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1NodeConfig::fromJsonObject(QJsonObject json) {

    m_current_aggregate_node_count_isValid = ::OpenAPI::fromJsonValue(m_current_aggregate_node_count, json[QString("currentAggregateNodeCount")]);
    m_current_aggregate_node_count_isSet = !json[QString("currentAggregateNodeCount")].isNull() && m_current_aggregate_node_count_isValid;

    m_max_node_count_isValid = ::OpenAPI::fromJsonValue(m_max_node_count, json[QString("maxNodeCount")]);
    m_max_node_count_isSet = !json[QString("maxNodeCount")].isNull() && m_max_node_count_isValid;

    m_min_node_count_isValid = ::OpenAPI::fromJsonValue(m_min_node_count, json[QString("minNodeCount")]);
    m_min_node_count_isSet = !json[QString("minNodeCount")].isNull() && m_min_node_count_isValid;
}

QString OAIGoogleCloudApigeeV1NodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1NodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_current_aggregate_node_count_isSet) {
        obj.insert(QString("currentAggregateNodeCount"), ::OpenAPI::toJsonValue(m_current_aggregate_node_count));
    }
    if (m_max_node_count_isSet) {
        obj.insert(QString("maxNodeCount"), ::OpenAPI::toJsonValue(m_max_node_count));
    }
    if (m_min_node_count_isSet) {
        obj.insert(QString("minNodeCount"), ::OpenAPI::toJsonValue(m_min_node_count));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1NodeConfig::getCurrentAggregateNodeCount() const {
    return m_current_aggregate_node_count;
}
void OAIGoogleCloudApigeeV1NodeConfig::setCurrentAggregateNodeCount(const QString &current_aggregate_node_count) {
    m_current_aggregate_node_count = current_aggregate_node_count;
    m_current_aggregate_node_count_isSet = true;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_current_aggregate_node_count_Set() const{
    return m_current_aggregate_node_count_isSet;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_current_aggregate_node_count_Valid() const{
    return m_current_aggregate_node_count_isValid;
}

QString OAIGoogleCloudApigeeV1NodeConfig::getMaxNodeCount() const {
    return m_max_node_count;
}
void OAIGoogleCloudApigeeV1NodeConfig::setMaxNodeCount(const QString &max_node_count) {
    m_max_node_count = max_node_count;
    m_max_node_count_isSet = true;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_max_node_count_Set() const{
    return m_max_node_count_isSet;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_max_node_count_Valid() const{
    return m_max_node_count_isValid;
}

QString OAIGoogleCloudApigeeV1NodeConfig::getMinNodeCount() const {
    return m_min_node_count;
}
void OAIGoogleCloudApigeeV1NodeConfig::setMinNodeCount(const QString &min_node_count) {
    m_min_node_count = min_node_count;
    m_min_node_count_isSet = true;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_min_node_count_Set() const{
    return m_min_node_count_isSet;
}

bool OAIGoogleCloudApigeeV1NodeConfig::is_min_node_count_Valid() const{
    return m_min_node_count_isValid;
}

bool OAIGoogleCloudApigeeV1NodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_aggregate_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1NodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
