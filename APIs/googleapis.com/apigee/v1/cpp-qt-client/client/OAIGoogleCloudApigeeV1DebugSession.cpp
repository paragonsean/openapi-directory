/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1DebugSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1DebugSession::OAIGoogleCloudApigeeV1DebugSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1DebugSession::OAIGoogleCloudApigeeV1DebugSession() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1DebugSession::~OAIGoogleCloudApigeeV1DebugSession() {}

void OAIGoogleCloudApigeeV1DebugSession::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_tracesize_isSet = false;
    m_tracesize_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAIGoogleCloudApigeeV1DebugSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1DebugSession::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_tracesize_isValid = ::OpenAPI::fromJsonValue(m_tracesize, json[QString("tracesize")]);
    m_tracesize_isSet = !json[QString("tracesize")].isNull() && m_tracesize_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAIGoogleCloudApigeeV1DebugSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1DebugSession::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_tracesize_isSet) {
        obj.insert(QString("tracesize"), ::OpenAPI::toJsonValue(m_tracesize));
    }
    if (m_validity_isSet) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

qint32 OAIGoogleCloudApigeeV1DebugSession::getCount() const {
    return m_count;
}
void OAIGoogleCloudApigeeV1DebugSession::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIGoogleCloudApigeeV1DebugSession::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudApigeeV1DebugSession::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudApigeeV1DebugSession::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudApigeeV1DebugSession::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIGoogleCloudApigeeV1DebugSession::getName() const {
    return m_name;
}
void OAIGoogleCloudApigeeV1DebugSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudApigeeV1DebugSession::getTimeout() const {
    return m_timeout;
}
void OAIGoogleCloudApigeeV1DebugSession::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_timeout_Valid() const{
    return m_timeout_isValid;
}

qint32 OAIGoogleCloudApigeeV1DebugSession::getTracesize() const {
    return m_tracesize;
}
void OAIGoogleCloudApigeeV1DebugSession::setTracesize(const qint32 &tracesize) {
    m_tracesize = tracesize;
    m_tracesize_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_tracesize_Set() const{
    return m_tracesize_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_tracesize_Valid() const{
    return m_tracesize_isValid;
}

qint32 OAIGoogleCloudApigeeV1DebugSession::getValidity() const {
    return m_validity;
}
void OAIGoogleCloudApigeeV1DebugSession::setValidity(const qint32 &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIGoogleCloudApigeeV1DebugSession::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAIGoogleCloudApigeeV1DebugSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1DebugSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
