/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudApigeeV1DatastoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudApigeeV1DatastoreConfig::OAIGoogleCloudApigeeV1DatastoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudApigeeV1DatastoreConfig::OAIGoogleCloudApigeeV1DatastoreConfig() {
    this->initializeModel();
}

OAIGoogleCloudApigeeV1DatastoreConfig::~OAIGoogleCloudApigeeV1DatastoreConfig() {}

void OAIGoogleCloudApigeeV1DatastoreConfig::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_table_prefix_isSet = false;
    m_table_prefix_isValid = false;
}

void OAIGoogleCloudApigeeV1DatastoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudApigeeV1DatastoreConfig::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("datasetName")]);
    m_dataset_name_isSet = !json[QString("datasetName")].isNull() && m_dataset_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_table_prefix_isValid = ::OpenAPI::fromJsonValue(m_table_prefix, json[QString("tablePrefix")]);
    m_table_prefix_isSet = !json[QString("tablePrefix")].isNull() && m_table_prefix_isValid;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudApigeeV1DatastoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("datasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_table_prefix_isSet) {
        obj.insert(QString("tablePrefix"), ::OpenAPI::toJsonValue(m_table_prefix));
    }
    return obj;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::getBucketName() const {
    return m_bucket_name;
}
void OAIGoogleCloudApigeeV1DatastoreConfig::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::getDatasetName() const {
    return m_dataset_name;
}
void OAIGoogleCloudApigeeV1DatastoreConfig::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::getPath() const {
    return m_path;
}
void OAIGoogleCloudApigeeV1DatastoreConfig::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::getProjectId() const {
    return m_project_id;
}
void OAIGoogleCloudApigeeV1DatastoreConfig::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIGoogleCloudApigeeV1DatastoreConfig::getTablePrefix() const {
    return m_table_prefix;
}
void OAIGoogleCloudApigeeV1DatastoreConfig::setTablePrefix(const QString &table_prefix) {
    m_table_prefix = table_prefix;
    m_table_prefix_isSet = true;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_table_prefix_Set() const{
    return m_table_prefix_isSet;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::is_table_prefix_Valid() const{
    return m_table_prefix_isValid;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudApigeeV1DatastoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
