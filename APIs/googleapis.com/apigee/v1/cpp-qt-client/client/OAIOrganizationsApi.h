/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleApiHttpBody.h"
#include "OAIGoogleCloudApigeeV1AdjustDeveloperBalanceRequest.h"
#include "OAIGoogleCloudApigeeV1Alias.h"
#include "OAIGoogleCloudApigeeV1ApiCategory.h"
#include "OAIGoogleCloudApigeeV1ApiCategoryResponse.h"
#include "OAIGoogleCloudApigeeV1ApiDoc.h"
#include "OAIGoogleCloudApigeeV1ApiDocDocumentation.h"
#include "OAIGoogleCloudApigeeV1ApiDocDocumentationResponse.h"
#include "OAIGoogleCloudApigeeV1ApiDocResponse.h"
#include "OAIGoogleCloudApigeeV1ApiProduct.h"
#include "OAIGoogleCloudApigeeV1ApiProxyRevision.h"
#include "OAIGoogleCloudApigeeV1AppGroup.h"
#include "OAIGoogleCloudApigeeV1ArchiveDeployment.h"
#include "OAIGoogleCloudApigeeV1AsyncQuery.h"
#include "OAIGoogleCloudApigeeV1Attributes.h"
#include "OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest.h"
#include "OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse.h"
#include "OAIGoogleCloudApigeeV1CanaryEvaluation.h"
#include "OAIGoogleCloudApigeeV1ComputeEnvironmentScoresRequest.h"
#include "OAIGoogleCloudApigeeV1ComputeEnvironmentScoresResponse.h"
#include "OAIGoogleCloudApigeeV1CreditDeveloperBalanceRequest.h"
#include "OAIGoogleCloudApigeeV1CustomReport.h"
#include "OAIGoogleCloudApigeeV1DataCollector.h"
#include "OAIGoogleCloudApigeeV1Datastore.h"
#include "OAIGoogleCloudApigeeV1DebugSession.h"
#include "OAIGoogleCloudApigeeV1DeleteResponse.h"
#include "OAIGoogleCloudApigeeV1Deployment.h"
#include "OAIGoogleCloudApigeeV1DeploymentChangeReport.h"
#include "OAIGoogleCloudApigeeV1Developer.h"
#include "OAIGoogleCloudApigeeV1DeveloperApp.h"
#include "OAIGoogleCloudApigeeV1DeveloperAppKey.h"
#include "OAIGoogleCloudApigeeV1DeveloperBalance.h"
#include "OAIGoogleCloudApigeeV1DeveloperSubscription.h"
#include "OAIGoogleCloudApigeeV1EndpointAttachment.h"
#include "OAIGoogleCloudApigeeV1EnvironmentGroup.h"
#include "OAIGoogleCloudApigeeV1Export.h"
#include "OAIGoogleCloudApigeeV1ExportRequest.h"
#include "OAIGoogleCloudApigeeV1GenerateDownloadUrlResponse.h"
#include "OAIGoogleCloudApigeeV1GenerateUploadUrlResponse.h"
#include "OAIGoogleCloudApigeeV1Instance.h"
#include "OAIGoogleCloudApigeeV1InstanceAttachment.h"
#include "OAIGoogleCloudApigeeV1KeyValueEntry.h"
#include "OAIGoogleCloudApigeeV1KeyValueMap.h"
#include "OAIGoogleCloudApigeeV1Keystore.h"
#include "OAIGoogleCloudApigeeV1ListApiCategoriesResponse.h"
#include "OAIGoogleCloudApigeeV1ListApiDocsResponse.h"
#include "OAIGoogleCloudApigeeV1ListApiProductsResponse.h"
#include "OAIGoogleCloudApigeeV1ListApiProxiesResponse.h"
#include "OAIGoogleCloudApigeeV1ListAppGroupsResponse.h"
#include "OAIGoogleCloudApigeeV1ListArchiveDeploymentsResponse.h"
#include "OAIGoogleCloudApigeeV1ListAsyncQueriesResponse.h"
#include "OAIGoogleCloudApigeeV1ListCustomReportsResponse.h"
#include "OAIGoogleCloudApigeeV1ListDataCollectorsResponse.h"
#include "OAIGoogleCloudApigeeV1ListDatastoresResponse.h"
#include "OAIGoogleCloudApigeeV1ListDebugSessionsResponse.h"
#include "OAIGoogleCloudApigeeV1ListDeploymentsResponse.h"
#include "OAIGoogleCloudApigeeV1ListDeveloperAppsResponse.h"
#include "OAIGoogleCloudApigeeV1ListDeveloperSubscriptionsResponse.h"
#include "OAIGoogleCloudApigeeV1ListEndpointAttachmentsResponse.h"
#include "OAIGoogleCloudApigeeV1ListEnvironmentGroupsResponse.h"
#include "OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse.h"
#include "OAIGoogleCloudApigeeV1ListExportsResponse.h"
#include "OAIGoogleCloudApigeeV1ListInstanceAttachmentsResponse.h"
#include "OAIGoogleCloudApigeeV1ListInstancesResponse.h"
#include "OAIGoogleCloudApigeeV1ListKeyValueEntriesResponse.h"
#include "OAIGoogleCloudApigeeV1ListNatAddressesResponse.h"
#include "OAIGoogleCloudApigeeV1ListOfDevelopersResponse.h"
#include "OAIGoogleCloudApigeeV1ListOrganizationsResponse.h"
#include "OAIGoogleCloudApigeeV1ListRatePlansResponse.h"
#include "OAIGoogleCloudApigeeV1ListSecurityActionsResponse.h"
#include "OAIGoogleCloudApigeeV1ListSecurityIncidentsResponse.h"
#include "OAIGoogleCloudApigeeV1ListSecurityProfileRevisionsResponse.h"
#include "OAIGoogleCloudApigeeV1ListSecurityProfilesResponse.h"
#include "OAIGoogleCloudApigeeV1ListSecurityReportsResponse.h"
#include "OAIGoogleCloudApigeeV1ListSharedFlowsResponse.h"
#include "OAIGoogleCloudApigeeV1ListTraceConfigOverridesResponse.h"
#include "OAIGoogleCloudApigeeV1NatAddress.h"
#include "OAIGoogleCloudApigeeV1Organization.h"
#include "OAIGoogleCloudApigeeV1OrganizationProjectMapping.h"
#include "OAIGoogleCloudApigeeV1Query.h"
#include "OAIGoogleCloudApigeeV1QueryTabularStatsRequest.h"
#include "OAIGoogleCloudApigeeV1QueryTabularStatsResponse.h"
#include "OAIGoogleCloudApigeeV1QueryTimeSeriesStatsRequest.h"
#include "OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponse.h"
#include "OAIGoogleCloudApigeeV1RatePlan.h"
#include "OAIGoogleCloudApigeeV1Reference.h"
#include "OAIGoogleCloudApigeeV1ReportInstanceStatusRequest.h"
#include "OAIGoogleCloudApigeeV1ResourceFile.h"
#include "OAIGoogleCloudApigeeV1SecurityAction.h"
#include "OAIGoogleCloudApigeeV1SecurityProfile.h"
#include "OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation.h"
#include "OAIGoogleCloudApigeeV1SecurityReport.h"
#include "OAIGoogleCloudApigeeV1SecurityReportQuery.h"
#include "OAIGoogleCloudApigeeV1SetAddonEnablementRequest.h"
#include "OAIGoogleCloudApigeeV1SetAddonsRequest.h"
#include "OAIGoogleCloudApigeeV1SharedFlowRevision.h"
#include "OAIGoogleCloudApigeeV1Subscription.h"
#include "OAIGoogleCloudApigeeV1SyncAuthorization.h"
#include "OAIGoogleCloudApigeeV1TargetServer.h"
#include "OAIGoogleCloudApigeeV1TestDatastoreResponse.h"
#include "OAIGoogleCloudApigeeV1TraceConfigOverride.h"
#include "OAIGoogleIamV1Policy.h"
#include "OAIGoogleIamV1SetIamPolicyRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsResponse.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_datastore OAIGoogleCloudApigeeV1Datastore [optional]
    */
    virtual void apigee_organizations_analytics_datastores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Datastore> &oai_google_cloud_apigee_v1_datastore = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Datastore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  target_type QString [optional]
    */
    virtual void apigee_organizations_analytics_datastores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_datastore OAIGoogleCloudApigeeV1Datastore [optional]
    */
    virtual void apigee_organizations_analytics_datastores_test(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Datastore> &oai_google_cloud_apigee_v1_datastore = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Datastore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_api_product OAIGoogleCloudApigeeV1ApiProduct [optional]
    */
    virtual void apigee_organizations_apiproducts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiProduct> &oai_google_cloud_apigee_v1_api_product = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiProduct>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  attributename QString [optional]
    * @param[in]  attributevalue QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  expand bool [optional]
    * @param[in]  start_key QString [optional]
    */
    virtual void apigee_organizations_apiproducts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributevalue = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_rate_plan OAIGoogleCloudApigeeV1RatePlan [optional]
    */
    virtual void apigee_organizations_apiproducts_rateplans_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1RatePlan> &oai_google_cloud_apigee_v1_rate_plan = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1RatePlan>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  expand bool [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  start_key QString [optional]
    * @param[in]  state QString [optional]
    */
    virtual void apigee_organizations_apiproducts_rateplans_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  action QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  validate bool [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_apis_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_meta_data bool [optional]
    * @param[in]  include_revisions bool [optional]
    */
    virtual void apigee_organizations_apis_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_meta_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_revisions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_app_group OAIGoogleCloudApigeeV1AppGroup [optional]
    */
    virtual void apigee_organizations_appgroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1AppGroup> &oai_google_cloud_apigee_v1_app_group = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1AppGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_appgroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_organization OAIGoogleCloudApigeeV1Organization [optional]
    */
    virtual void apigee_organizations_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Organization> &oai_google_cloud_apigee_v1_organization = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Organization>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  data_collector_id QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_data_collector OAIGoogleCloudApigeeV1DataCollector [optional]
    */
    virtual void apigee_organizations_datacollectors_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_collector_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DataCollector> &oai_google_cloud_apigee_v1_data_collector = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DataCollector>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_datacollectors_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_attributes OAIGoogleCloudApigeeV1Attributes [optional]
    */
    virtual void apigee_organizations_developers_apps_attributes(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Attributes> &oai_google_cloud_apigee_v1_attributes = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Attributes>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_developer_app OAIGoogleCloudApigeeV1DeveloperApp [optional]
    */
    virtual void apigee_organizations_developers_apps_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperApp> &oai_google_cloud_apigee_v1_developer_app = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperApp>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_developer_app_key OAIGoogleCloudApigeeV1DeveloperAppKey [optional]
    */
    virtual void apigee_organizations_developers_apps_keys_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperAppKey> &oai_google_cloud_apigee_v1_developer_app_key = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperAppKey>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_developer_app_key OAIGoogleCloudApigeeV1DeveloperAppKey [optional]
    */
    virtual void apigee_organizations_developers_apps_keys_create_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperAppKey> &oai_google_cloud_apigee_v1_developer_app_key = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperAppKey>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  expand bool [optional]
    * @param[in]  shallow_expand bool [optional]
    * @param[in]  start_key QString [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  include_cred bool [optional]
    * @param[in]  key_status QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  rows QString [optional]
    * @param[in]  status QString [optional]
    */
    virtual void apigee_organizations_developers_apps_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &shallow_expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_cred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &key_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rows = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_attributes OAIGoogleCloudApigeeV1Attributes [optional]
    */
    virtual void apigee_organizations_developers_attributes(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Attributes> &oai_google_cloud_apigee_v1_attributes = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Attributes>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_developers_attributes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_adjust_developer_balance_request OAIGoogleCloudApigeeV1AdjustDeveloperBalanceRequest [optional]
    */
    virtual void apigee_organizations_developers_balance_adjust(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1AdjustDeveloperBalanceRequest> &oai_google_cloud_apigee_v1_adjust_developer_balance_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1AdjustDeveloperBalanceRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_credit_developer_balance_request OAIGoogleCloudApigeeV1CreditDeveloperBalanceRequest [optional]
    */
    virtual void apigee_organizations_developers_balance_credit(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CreditDeveloperBalanceRequest> &oai_google_cloud_apigee_v1_credit_developer_balance_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CreditDeveloperBalanceRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_developer OAIGoogleCloudApigeeV1Developer [optional]
    */
    virtual void apigee_organizations_developers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Developer> &oai_google_cloud_apigee_v1_developer = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Developer>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  app QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  expand bool [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  include_company bool [optional]
    * @param[in]  start_key QString [optional]
    */
    virtual void apigee_organizations_developers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_company = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_developer_subscription OAIGoogleCloudApigeeV1DeveloperSubscription [optional]
    */
    virtual void apigee_organizations_developers_subscriptions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperSubscription> &oai_google_cloud_apigee_v1_developer_subscription = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DeveloperSubscription>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_developers_subscriptions_expire(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  start_key QString [optional]
    */
    virtual void apigee_organizations_developers_subscriptions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  endpoint_attachment_id QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_endpoint_attachment OAIGoogleCloudApigeeV1EndpointAttachment [optional]
    */
    virtual void apigee_organizations_endpointAttachments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &endpoint_attachment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1EndpointAttachment> &oai_google_cloud_apigee_v1_endpoint_attachment = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1EndpointAttachment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_endpointAttachments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_environment_group OAIGoogleCloudApigeeV1EnvironmentGroup [optional]
    */
    virtual void apigee_organizations_envgroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1EnvironmentGroup> &oai_google_cloud_apigee_v1_environment_group = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1EnvironmentGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_envgroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_set_addon_enablement_request OAIGoogleCloudApigeeV1SetAddonEnablementRequest [optional]
    */
    virtual void apigee_organizations_environments_addonsConfig_setAddonEnablement(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SetAddonEnablementRequest> &oai_google_cloud_apigee_v1_set_addon_enablement_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SetAddonEnablementRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_export_request OAIGoogleCloudApigeeV1ExportRequest [optional]
    */
    virtual void apigee_organizations_environments_analytics_exports_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ExportRequest> &oai_google_cloud_apigee_v1_export_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ExportRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_analytics_exports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  timeout QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_debug_session OAIGoogleCloudApigeeV1DebugSession [optional]
    */
    virtual void apigee_organizations_environments_apis_revisions_debugsessions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timeout = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DebugSession> &oai_google_cloud_apigee_v1_debug_session = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1DebugSession>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_apis_revisions_debugsessions_deleteData(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_environments_apis_revisions_debugsessions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  override bool [optional]
    */
    virtual void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReport(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReport(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_archive_deployment OAIGoogleCloudApigeeV1ArchiveDeployment [optional]
    */
    virtual void apigee_organizations_environments_archiveDeployments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ArchiveDeployment> &oai_google_cloud_apigee_v1_archive_deployment = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ArchiveDeployment>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_environments_archiveDeployments_generateDownloadUrl(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_environments_archiveDeployments_generateUploadUrl(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_environments_archiveDeployments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void apigee_organizations_environments_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _password QString [optional]
    * @param[in]  alias QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  ignore_expiry_validation bool [optional]
    * @param[in]  ignore_newline_validation bool [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_environments_keystores_aliases_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_expiry_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ignore_newline_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_keystores_aliases_csr(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_keystores_aliases_getCertificate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_keystore OAIGoogleCloudApigeeV1Keystore [optional]
    */
    virtual void apigee_organizations_environments_keystores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Keystore> &oai_google_cloud_apigee_v1_keystore = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Keystore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_query OAIGoogleCloudApigeeV1Query [optional]
    */
    virtual void apigee_organizations_environments_queries_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Query> &oai_google_cloud_apigee_v1_query = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Query>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  incl_queries_without_report QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  submitted_by QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void apigee_organizations_environments_queries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incl_queries_without_report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submitted_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_reference OAIGoogleCloudApigeeV1Reference [optional]
    */
    virtual void apigee_organizations_environments_references_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Reference> &oai_google_cloud_apigee_v1_reference = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Reference>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_delete(const QString &parent, const QString &type, const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_get(const QString &parent, const QString &type, const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_listEnvironmentResources(const QString &parent, const QString &type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_environments_resourcefiles_update(const QString &parent, const QString &type, const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  security_action_id QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_security_action OAIGoogleCloudApigeeV1SecurityAction [optional]
    */
    virtual void apigee_organizations_environments_securityActions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &security_action_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityAction> &oai_google_cloud_apigee_v1_security_action = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityAction>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_environments_securityActions_disable(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_environments_securityActions_enable(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_environments_securityActions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_batch_update_security_incidents_request OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest [optional]
    */
    virtual void apigee_organizations_environments_securityIncidents_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest> &oai_google_cloud_apigee_v1_batch_update_security_incidents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_environments_securityIncidents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_security_report_query OAIGoogleCloudApigeeV1SecurityReportQuery [optional]
    */
    virtual void apigee_organizations_environments_securityReports_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityReportQuery> &oai_google_cloud_apigee_v1_security_report_query = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityReportQuery>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  submitted_by QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void apigee_organizations_environments_securityReports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submitted_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  orgenv QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_query_tabular_stats_request OAIGoogleCloudApigeeV1QueryTabularStatsRequest [optional]
    */
    virtual void apigee_organizations_environments_securityStats_queryTabularStats(const QString &orgenv, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1QueryTabularStatsRequest> &oai_google_cloud_apigee_v1_query_tabular_stats_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1QueryTabularStatsRequest>());

    /**
    * @param[in]  orgenv QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_query_time_series_stats_request OAIGoogleCloudApigeeV1QueryTimeSeriesStatsRequest [optional]
    */
    virtual void apigee_organizations_environments_securityStats_queryTimeSeriesStats(const QString &orgenv, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1QueryTimeSeriesStatsRequest> &oai_google_cloud_apigee_v1_query_time_series_stats_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1QueryTimeSeriesStatsRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_set_iam_policy_request OAIGoogleIamV1SetIamPolicyRequest [optional]
    */
    virtual void apigee_organizations_environments_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest> &oai_google_iam_v1_set_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  override bool [optional]
    * @param[in]  service_account QString [optional]
    */
    virtual void apigee_organizations_environments_sharedflows_revisions_deploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &override = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &service_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_sharedflows_revisions_getDeployments(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  sequenced_rollout bool [optional]
    */
    virtual void apigee_organizations_environments_sharedflows_revisions_undeploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sequenced_rollout = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_environments_subscribe(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_target_server OAIGoogleCloudApigeeV1TargetServer [optional]
    */
    virtual void apigee_organizations_environments_targetservers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1TargetServer> &oai_google_cloud_apigee_v1_target_server = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1TargetServer>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_test_iam_permissions_request OAIGoogleIamV1TestIamPermissionsRequest [optional]
    */
    virtual void apigee_organizations_environments_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest> &oai_google_iam_v1_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_trace_config_override OAIGoogleCloudApigeeV1TraceConfigOverride [optional]
    */
    virtual void apigee_organizations_environments_traceConfig_overrides_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1TraceConfigOverride> &oai_google_cloud_apigee_v1_trace_config_override = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1TraceConfigOverride>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_environments_traceConfig_overrides_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_subscription OAIGoogleCloudApigeeV1Subscription [optional]
    */
    virtual void apigee_organizations_environments_unsubscribe(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Subscription> &oai_google_cloud_apigee_v1_subscription = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Subscription>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_getProjectMapping(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_getSyncAuthorization(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_query OAIGoogleCloudApigeeV1Query [optional]
    */
    virtual void apigee_organizations_hostQueries_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Query> &oai_google_cloud_apigee_v1_query = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Query>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  envgroup_hostname QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  incl_queries_without_report QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  submitted_by QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void apigee_organizations_hostQueries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &envgroup_hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incl_queries_without_report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submitted_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_security_report_query OAIGoogleCloudApigeeV1SecurityReportQuery [optional]
    */
    virtual void apigee_organizations_hostSecurityReports_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityReportQuery> &oai_google_cloud_apigee_v1_security_report_query = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityReportQuery>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  envgroup_hostname QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  submitted_by QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void apigee_organizations_hostSecurityReports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &envgroup_hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submitted_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_instance_attachment OAIGoogleCloudApigeeV1InstanceAttachment [optional]
    */
    virtual void apigee_organizations_instances_attachments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1InstanceAttachment> &oai_google_cloud_apigee_v1_instance_attachment = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1InstanceAttachment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_instances_attachments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_canary_evaluation OAIGoogleCloudApigeeV1CanaryEvaluation [optional]
    */
    virtual void apigee_organizations_instances_canaryevaluations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CanaryEvaluation> &oai_google_cloud_apigee_v1_canary_evaluation = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CanaryEvaluation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_instance OAIGoogleCloudApigeeV1Instance [optional]
    */
    virtual void apigee_organizations_instances_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Instance> &oai_google_cloud_apigee_v1_instance = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1Instance>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_instances_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apigee_organizations_instances_natAddresses_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_nat_address OAIGoogleCloudApigeeV1NatAddress [optional]
    */
    virtual void apigee_organizations_instances_natAddresses_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1NatAddress> &oai_google_cloud_apigee_v1_nat_address = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1NatAddress>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_instances_natAddresses_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_report_instance_status_request OAIGoogleCloudApigeeV1ReportInstanceStatusRequest [optional]
    */
    virtual void apigee_organizations_instances_reportStatus(const QString &instance, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ReportInstanceStatusRequest> &oai_google_cloud_apigee_v1_report_instance_status_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ReportInstanceStatusRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_key_value_map OAIGoogleCloudApigeeV1KeyValueMap [optional]
    */
    virtual void apigee_organizations_keyvaluemaps_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1KeyValueMap> &oai_google_cloud_apigee_v1_key_value_map = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1KeyValueMap>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_key_value_entry OAIGoogleCloudApigeeV1KeyValueEntry [optional]
    */
    virtual void apigee_organizations_keyvaluemaps_entries_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1KeyValueEntry> &oai_google_cloud_apigee_v1_key_value_entry = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1KeyValueEntry>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_keyvaluemaps_entries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_custom_report OAIGoogleCloudApigeeV1CustomReport [optional]
    */
    virtual void apigee_organizations_reports_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CustomReport> &oai_google_cloud_apigee_v1_custom_report = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1CustomReport>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  expand bool [optional]
    */
    virtual void apigee_organizations_reports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  security_profile_id QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_security_profile OAIGoogleCloudApigeeV1SecurityProfile [optional]
    */
    virtual void apigee_organizations_securityProfiles_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &security_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityProfile> &oai_google_cloud_apigee_v1_security_profile = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityProfile>());

    /**
    * @param[in]  profile_environment QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_compute_environment_scores_request OAIGoogleCloudApigeeV1ComputeEnvironmentScoresRequest [optional]
    */
    virtual void apigee_organizations_securityProfiles_environments_computeEnvironmentScores(const QString &profile_environment, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ComputeEnvironmentScoresRequest> &oai_google_cloud_apigee_v1_compute_environment_scores_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ComputeEnvironmentScoresRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_security_profile_environment_association OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation [optional]
    */
    virtual void apigee_organizations_securityProfiles_environments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation> &oai_google_cloud_apigee_v1_security_profile_environment_association = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_securityProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_securityProfiles_listRevisions(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_set_addons_request OAIGoogleCloudApigeeV1SetAddonsRequest [optional]
    */
    virtual void apigee_organizations_setAddons(const QString &org, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SetAddonsRequest> &oai_google_cloud_apigee_v1_set_addons_request = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SetAddonsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_sync_authorization OAIGoogleCloudApigeeV1SyncAuthorization [optional]
    */
    virtual void apigee_organizations_setSyncAuthorization(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SyncAuthorization> &oai_google_cloud_apigee_v1_sync_authorization = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1SyncAuthorization>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  action QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_sharedflows_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_meta_data bool [optional]
    * @param[in]  include_revisions bool [optional]
    */
    virtual void apigee_organizations_sharedflows_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_meta_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_revisions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  shared_flows bool [optional]
    */
    virtual void apigee_organizations_sharedflows_revisions_deployments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &shared_flows = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  validate bool [optional]
    * @param[in]  oai_google_api_http_body OAIGoogleApiHttpBody [optional]
    */
    virtual void apigee_organizations_sharedflows_revisions_updateSharedFlowRevision(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody> &oai_google_api_http_body = ::OpenAPI::OptionalParam<OAIGoogleApiHttpBody>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_api_category OAIGoogleCloudApigeeV1ApiCategory [optional]
    */
    virtual void apigee_organizations_sites_apicategories_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiCategory> &oai_google_cloud_apigee_v1_api_category = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiCategory>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void apigee_organizations_sites_apicategories_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_api_doc OAIGoogleCloudApigeeV1ApiDoc [optional]
    */
    virtual void apigee_organizations_sites_apidocs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDoc> &oai_google_cloud_apigee_v1_api_doc = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDoc>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  retention QString [optional]
    */
    virtual void apigee_organizations_sites_apidocs_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &retention = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  envgroup_hostname QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  realtime bool [optional]
    * @param[in]  select QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sortby QString [optional]
    * @param[in]  time_range QString [optional]
    * @param[in]  time_unit QString [optional]
    * @param[in]  topk QString [optional]
    * @param[in]  ts_ascending bool [optional]
    * @param[in]  tzo QString [optional]
    */
    virtual void apigee_organizations_sites_apidocs_getDocumentation(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &envgroup_hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &realtime = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sortby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &topk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ts_ascending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tzo = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void apigee_organizations_sites_apidocs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ignore_expiry_validation bool [optional]
    * @param[in]  ignore_newline_validation bool [optional]
    * @param[in]  oai_google_cloud_apigee_v1_api_doc OAIGoogleCloudApigeeV1ApiDoc [optional]
    */
    virtual void apigee_organizations_sites_apidocs_update(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_expiry_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ignore_newline_validation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDoc> &oai_google_cloud_apigee_v1_api_doc = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDoc>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_apigee_v1_api_doc_documentation OAIGoogleCloudApigeeV1ApiDocDocumentation [optional]
    */
    virtual void apigee_organizations_sites_apidocs_updateDocumentation(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDocDocumentation> &oai_google_cloud_apigee_v1_api_doc_documentation = ::OpenAPI::OptionalParam<OAIGoogleCloudApigeeV1ApiDocDocumentation>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apigee_organizations_analytics_datastores_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_analytics_datastores_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_analytics_datastores_testCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apiproducts_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apiproducts_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apiproducts_rateplans_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apiproducts_rateplans_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apis_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_apis_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_appgroups_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_appgroups_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_datacollectors_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_datacollectors_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_apps_attributesCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_apps_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_apps_keys_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_apps_keys_create_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_apps_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_attributesCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_attributes_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_balance_adjustCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_balance_creditCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_subscriptions_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_subscriptions_expireCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_developers_subscriptions_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_endpointAttachments_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_endpointAttachments_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_envgroups_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_envgroups_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_addonsConfig_setAddonEnablementCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_analytics_exports_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_analytics_exports_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_apis_revisions_debugsessions_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_apis_revisions_debugsessions_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_archiveDeployments_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_archiveDeployments_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_keystores_aliases_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_keystores_aliases_csrCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_keystores_aliases_getCertificateCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_keystores_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_queries_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_queries_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_references_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_deleteCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_getCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_resourcefiles_updateCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityActions_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityActions_disableCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityActions_enableCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityActions_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityIncidents_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityIncidents_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityReports_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityReports_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityStats_queryTabularStatsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_sharedflows_revisions_deployCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_sharedflows_revisions_undeployCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_subscribeCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_targetservers_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_traceConfig_overrides_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_traceConfig_overrides_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_environments_unsubscribeCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_getProjectMappingCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_getSyncAuthorizationCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_hostQueries_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_hostQueries_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_hostSecurityReports_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_hostSecurityReports_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_attachments_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_attachments_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_canaryevaluations_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_natAddresses_activateCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_natAddresses_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_natAddresses_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_instances_reportStatusCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_keyvaluemaps_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_keyvaluemaps_entries_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_keyvaluemaps_entries_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_operations_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_reports_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_reports_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_securityProfiles_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_securityProfiles_environments_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_securityProfiles_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_securityProfiles_listRevisionsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_setAddonsCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_setSyncAuthorizationCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sharedflows_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sharedflows_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sharedflows_revisions_deployments_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apicategories_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apicategories_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_createCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_deleteCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_getDocumentationCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_listCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_updateCallback(OAIHttpRequestWorker *worker);
    void apigee_organizations_sites_apidocs_updateDocumentationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apigee_organizations_analytics_datastores_createSignal(OAIGoogleCloudApigeeV1Datastore summary);
    void apigee_organizations_analytics_datastores_listSignal(OAIGoogleCloudApigeeV1ListDatastoresResponse summary);
    void apigee_organizations_analytics_datastores_testSignal(OAIGoogleCloudApigeeV1TestDatastoreResponse summary);
    void apigee_organizations_apiproducts_createSignal(OAIGoogleCloudApigeeV1ApiProduct summary);
    void apigee_organizations_apiproducts_listSignal(OAIGoogleCloudApigeeV1ListApiProductsResponse summary);
    void apigee_organizations_apiproducts_rateplans_createSignal(OAIGoogleCloudApigeeV1RatePlan summary);
    void apigee_organizations_apiproducts_rateplans_listSignal(OAIGoogleCloudApigeeV1ListRatePlansResponse summary);
    void apigee_organizations_apis_createSignal(OAIGoogleCloudApigeeV1ApiProxyRevision summary);
    void apigee_organizations_apis_listSignal(OAIGoogleCloudApigeeV1ListApiProxiesResponse summary);
    void apigee_organizations_appgroups_createSignal(OAIGoogleCloudApigeeV1AppGroup summary);
    void apigee_organizations_appgroups_listSignal(OAIGoogleCloudApigeeV1ListAppGroupsResponse summary);
    void apigee_organizations_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_datacollectors_createSignal(OAIGoogleCloudApigeeV1DataCollector summary);
    void apigee_organizations_datacollectors_listSignal(OAIGoogleCloudApigeeV1ListDataCollectorsResponse summary);
    void apigee_organizations_developers_apps_attributesSignal(OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_apps_createSignal(OAIGoogleCloudApigeeV1DeveloperApp summary);
    void apigee_organizations_developers_apps_keys_createSignal(OAIGoogleCloudApigeeV1DeveloperAppKey summary);
    void apigee_organizations_developers_apps_keys_create_createSignal(OAIGoogleCloudApigeeV1DeveloperAppKey summary);
    void apigee_organizations_developers_apps_listSignal(OAIGoogleCloudApigeeV1ListDeveloperAppsResponse summary);
    void apigee_organizations_developers_attributesSignal(OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_attributes_listSignal(OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_balance_adjustSignal(OAIGoogleCloudApigeeV1DeveloperBalance summary);
    void apigee_organizations_developers_balance_creditSignal(OAIGoogleCloudApigeeV1DeveloperBalance summary);
    void apigee_organizations_developers_createSignal(OAIGoogleCloudApigeeV1Developer summary);
    void apigee_organizations_developers_listSignal(OAIGoogleCloudApigeeV1ListOfDevelopersResponse summary);
    void apigee_organizations_developers_subscriptions_createSignal(OAIGoogleCloudApigeeV1DeveloperSubscription summary);
    void apigee_organizations_developers_subscriptions_expireSignal(OAIGoogleCloudApigeeV1DeveloperSubscription summary);
    void apigee_organizations_developers_subscriptions_listSignal(OAIGoogleCloudApigeeV1ListDeveloperSubscriptionsResponse summary);
    void apigee_organizations_endpointAttachments_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_endpointAttachments_listSignal(OAIGoogleCloudApigeeV1ListEndpointAttachmentsResponse summary);
    void apigee_organizations_envgroups_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_envgroups_listSignal(OAIGoogleCloudApigeeV1ListEnvironmentGroupsResponse summary);
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_environments_analytics_exports_createSignal(OAIGoogleCloudApigeeV1Export summary);
    void apigee_organizations_environments_analytics_exports_listSignal(OAIGoogleCloudApigeeV1ListExportsResponse summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignal(OAIGoogleCloudApigeeV1DebugSession summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignal(OAIObject summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignal(OAIGoogleCloudApigeeV1ListDebugSessionsResponse summary);
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignal(OAIGoogleCloudApigeeV1DeploymentChangeReport summary);
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignal(OAIGoogleCloudApigeeV1DeploymentChangeReport summary);
    void apigee_organizations_environments_archiveDeployments_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignal(OAIGoogleCloudApigeeV1GenerateDownloadUrlResponse summary);
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignal(OAIGoogleCloudApigeeV1GenerateUploadUrlResponse summary);
    void apigee_organizations_environments_archiveDeployments_listSignal(OAIGoogleCloudApigeeV1ListArchiveDeploymentsResponse summary);
    void apigee_organizations_environments_getIamPolicySignal(OAIGoogleIamV1Policy summary);
    void apigee_organizations_environments_keystores_aliases_createSignal(OAIGoogleCloudApigeeV1Alias summary);
    void apigee_organizations_environments_keystores_aliases_csrSignal(OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_keystores_aliases_getCertificateSignal(OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_keystores_createSignal(OAIGoogleCloudApigeeV1Keystore summary);
    void apigee_organizations_environments_queries_createSignal(OAIGoogleCloudApigeeV1AsyncQuery summary);
    void apigee_organizations_environments_queries_listSignal(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary);
    void apigee_organizations_environments_references_createSignal(OAIGoogleCloudApigeeV1Reference summary);
    void apigee_organizations_environments_resourcefiles_createSignal(OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_resourcefiles_deleteSignal(OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_resourcefiles_getSignal(OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_resourcefiles_listSignal(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary);
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignal(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary);
    void apigee_organizations_environments_resourcefiles_updateSignal(OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_securityActions_createSignal(OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_disableSignal(OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_enableSignal(OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_listSignal(OAIGoogleCloudApigeeV1ListSecurityActionsResponse summary);
    void apigee_organizations_environments_securityIncidents_batchUpdateSignal(OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse summary);
    void apigee_organizations_environments_securityIncidents_listSignal(OAIGoogleCloudApigeeV1ListSecurityIncidentsResponse summary);
    void apigee_organizations_environments_securityReports_createSignal(OAIGoogleCloudApigeeV1SecurityReport summary);
    void apigee_organizations_environments_securityReports_listSignal(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary);
    void apigee_organizations_environments_securityStats_queryTabularStatsSignal(OAIGoogleCloudApigeeV1QueryTabularStatsResponse summary);
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignal(OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponse summary);
    void apigee_organizations_environments_setIamPolicySignal(OAIGoogleIamV1Policy summary);
    void apigee_organizations_environments_sharedflows_revisions_deploySignal(OAIGoogleCloudApigeeV1Deployment summary);
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignal(OAIGoogleCloudApigeeV1Deployment summary);
    void apigee_organizations_environments_sharedflows_revisions_undeploySignal(OAIObject summary);
    void apigee_organizations_environments_subscribeSignal(OAIGoogleCloudApigeeV1Subscription summary);
    void apigee_organizations_environments_targetservers_createSignal(OAIGoogleCloudApigeeV1TargetServer summary);
    void apigee_organizations_environments_testIamPermissionsSignal(OAIGoogleIamV1TestIamPermissionsResponse summary);
    void apigee_organizations_environments_traceConfig_overrides_createSignal(OAIGoogleCloudApigeeV1TraceConfigOverride summary);
    void apigee_organizations_environments_traceConfig_overrides_listSignal(OAIGoogleCloudApigeeV1ListTraceConfigOverridesResponse summary);
    void apigee_organizations_environments_unsubscribeSignal(OAIObject summary);
    void apigee_organizations_getProjectMappingSignal(OAIGoogleCloudApigeeV1OrganizationProjectMapping summary);
    void apigee_organizations_getSyncAuthorizationSignal(OAIGoogleCloudApigeeV1SyncAuthorization summary);
    void apigee_organizations_hostQueries_createSignal(OAIGoogleCloudApigeeV1AsyncQuery summary);
    void apigee_organizations_hostQueries_listSignal(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary);
    void apigee_organizations_hostSecurityReports_createSignal(OAIGoogleCloudApigeeV1SecurityReport summary);
    void apigee_organizations_hostSecurityReports_listSignal(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary);
    void apigee_organizations_instances_attachments_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_attachments_listSignal(OAIGoogleCloudApigeeV1ListInstanceAttachmentsResponse summary);
    void apigee_organizations_instances_canaryevaluations_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_listSignal(OAIGoogleCloudApigeeV1ListInstancesResponse summary);
    void apigee_organizations_instances_natAddresses_activateSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_natAddresses_createSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_natAddresses_listSignal(OAIGoogleCloudApigeeV1ListNatAddressesResponse summary);
    void apigee_organizations_instances_reportStatusSignal(OAIObject summary);
    void apigee_organizations_keyvaluemaps_createSignal(OAIGoogleCloudApigeeV1KeyValueMap summary);
    void apigee_organizations_keyvaluemaps_entries_createSignal(OAIGoogleCloudApigeeV1KeyValueEntry summary);
    void apigee_organizations_keyvaluemaps_entries_listSignal(OAIGoogleCloudApigeeV1ListKeyValueEntriesResponse summary);
    void apigee_organizations_listSignal(OAIGoogleCloudApigeeV1ListOrganizationsResponse summary);
    void apigee_organizations_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void apigee_organizations_reports_createSignal(OAIGoogleCloudApigeeV1CustomReport summary);
    void apigee_organizations_reports_listSignal(OAIGoogleCloudApigeeV1ListCustomReportsResponse summary);
    void apigee_organizations_securityProfiles_createSignal(OAIGoogleCloudApigeeV1SecurityProfile summary);
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignal(OAIGoogleCloudApigeeV1ComputeEnvironmentScoresResponse summary);
    void apigee_organizations_securityProfiles_environments_createSignal(OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation summary);
    void apigee_organizations_securityProfiles_listSignal(OAIGoogleCloudApigeeV1ListSecurityProfilesResponse summary);
    void apigee_organizations_securityProfiles_listRevisionsSignal(OAIGoogleCloudApigeeV1ListSecurityProfileRevisionsResponse summary);
    void apigee_organizations_setAddonsSignal(OAIGoogleLongrunningOperation summary);
    void apigee_organizations_setSyncAuthorizationSignal(OAIGoogleCloudApigeeV1SyncAuthorization summary);
    void apigee_organizations_sharedflows_createSignal(OAIGoogleCloudApigeeV1SharedFlowRevision summary);
    void apigee_organizations_sharedflows_listSignal(OAIGoogleCloudApigeeV1ListSharedFlowsResponse summary);
    void apigee_organizations_sharedflows_revisions_deployments_listSignal(OAIGoogleCloudApigeeV1ListDeploymentsResponse summary);
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignal(OAIGoogleCloudApigeeV1SharedFlowRevision summary);
    void apigee_organizations_sites_apicategories_createSignal(OAIGoogleCloudApigeeV1ApiCategoryResponse summary);
    void apigee_organizations_sites_apicategories_listSignal(OAIGoogleCloudApigeeV1ListApiCategoriesResponse summary);
    void apigee_organizations_sites_apidocs_createSignal(OAIGoogleCloudApigeeV1ApiDocResponse summary);
    void apigee_organizations_sites_apidocs_deleteSignal(OAIGoogleCloudApigeeV1DeleteResponse summary);
    void apigee_organizations_sites_apidocs_getDocumentationSignal(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary);
    void apigee_organizations_sites_apidocs_listSignal(OAIGoogleCloudApigeeV1ListApiDocsResponse summary);
    void apigee_organizations_sites_apidocs_updateSignal(OAIGoogleCloudApigeeV1ApiDocResponse summary);
    void apigee_organizations_sites_apidocs_updateDocumentationSignal(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary);


    void apigee_organizations_analytics_datastores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Datastore summary);
    void apigee_organizations_analytics_datastores_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDatastoresResponse summary);
    void apigee_organizations_analytics_datastores_testSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1TestDatastoreResponse summary);
    void apigee_organizations_apiproducts_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiProduct summary);
    void apigee_organizations_apiproducts_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListApiProductsResponse summary);
    void apigee_organizations_apiproducts_rateplans_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1RatePlan summary);
    void apigee_organizations_apiproducts_rateplans_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListRatePlansResponse summary);
    void apigee_organizations_apis_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiProxyRevision summary);
    void apigee_organizations_apis_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListApiProxiesResponse summary);
    void apigee_organizations_appgroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1AppGroup summary);
    void apigee_organizations_appgroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListAppGroupsResponse summary);
    void apigee_organizations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_datacollectors_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DataCollector summary);
    void apigee_organizations_datacollectors_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDataCollectorsResponse summary);
    void apigee_organizations_developers_apps_attributesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_apps_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperApp summary);
    void apigee_organizations_developers_apps_keys_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperAppKey summary);
    void apigee_organizations_developers_apps_keys_create_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperAppKey summary);
    void apigee_organizations_developers_apps_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDeveloperAppsResponse summary);
    void apigee_organizations_developers_attributesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_attributes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Attributes summary);
    void apigee_organizations_developers_balance_adjustSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperBalance summary);
    void apigee_organizations_developers_balance_creditSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperBalance summary);
    void apigee_organizations_developers_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Developer summary);
    void apigee_organizations_developers_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListOfDevelopersResponse summary);
    void apigee_organizations_developers_subscriptions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperSubscription summary);
    void apigee_organizations_developers_subscriptions_expireSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeveloperSubscription summary);
    void apigee_organizations_developers_subscriptions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDeveloperSubscriptionsResponse summary);
    void apigee_organizations_endpointAttachments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_endpointAttachments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListEndpointAttachmentsResponse summary);
    void apigee_organizations_envgroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_envgroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListEnvironmentGroupsResponse summary);
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_environments_analytics_exports_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Export summary);
    void apigee_organizations_environments_analytics_exports_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListExportsResponse summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DebugSession summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDebugSessionsResponse summary);
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeploymentChangeReport summary);
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeploymentChangeReport summary);
    void apigee_organizations_environments_archiveDeployments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1GenerateDownloadUrlResponse summary);
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1GenerateUploadUrlResponse summary);
    void apigee_organizations_environments_archiveDeployments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListArchiveDeploymentsResponse summary);
    void apigee_organizations_environments_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void apigee_organizations_environments_keystores_aliases_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Alias summary);
    void apigee_organizations_environments_keystores_aliases_csrSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_keystores_aliases_getCertificateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_keystores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Keystore summary);
    void apigee_organizations_environments_queries_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1AsyncQuery summary);
    void apigee_organizations_environments_queries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary);
    void apigee_organizations_environments_references_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Reference summary);
    void apigee_organizations_environments_resourcefiles_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_resourcefiles_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_resourcefiles_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void apigee_organizations_environments_resourcefiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary);
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary);
    void apigee_organizations_environments_resourcefiles_updateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ResourceFile summary);
    void apigee_organizations_environments_securityActions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_disableSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_enableSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityAction summary);
    void apigee_organizations_environments_securityActions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityActionsResponse summary);
    void apigee_organizations_environments_securityIncidents_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse summary);
    void apigee_organizations_environments_securityIncidents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityIncidentsResponse summary);
    void apigee_organizations_environments_securityReports_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityReport summary);
    void apigee_organizations_environments_securityReports_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary);
    void apigee_organizations_environments_securityStats_queryTabularStatsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1QueryTabularStatsResponse summary);
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponse summary);
    void apigee_organizations_environments_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void apigee_organizations_environments_sharedflows_revisions_deploySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Deployment summary);
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Deployment summary);
    void apigee_organizations_environments_sharedflows_revisions_undeploySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apigee_organizations_environments_subscribeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1Subscription summary);
    void apigee_organizations_environments_targetservers_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1TargetServer summary);
    void apigee_organizations_environments_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1TestIamPermissionsResponse summary);
    void apigee_organizations_environments_traceConfig_overrides_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1TraceConfigOverride summary);
    void apigee_organizations_environments_traceConfig_overrides_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListTraceConfigOverridesResponse summary);
    void apigee_organizations_environments_unsubscribeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apigee_organizations_getProjectMappingSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1OrganizationProjectMapping summary);
    void apigee_organizations_getSyncAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SyncAuthorization summary);
    void apigee_organizations_hostQueries_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1AsyncQuery summary);
    void apigee_organizations_hostQueries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary);
    void apigee_organizations_hostSecurityReports_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityReport summary);
    void apigee_organizations_hostSecurityReports_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary);
    void apigee_organizations_instances_attachments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_attachments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListInstanceAttachmentsResponse summary);
    void apigee_organizations_instances_canaryevaluations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListInstancesResponse summary);
    void apigee_organizations_instances_natAddresses_activateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_natAddresses_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_instances_natAddresses_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListNatAddressesResponse summary);
    void apigee_organizations_instances_reportStatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apigee_organizations_keyvaluemaps_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1KeyValueMap summary);
    void apigee_organizations_keyvaluemaps_entries_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1KeyValueEntry summary);
    void apigee_organizations_keyvaluemaps_entries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListKeyValueEntriesResponse summary);
    void apigee_organizations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListOrganizationsResponse summary);
    void apigee_organizations_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void apigee_organizations_reports_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1CustomReport summary);
    void apigee_organizations_reports_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListCustomReportsResponse summary);
    void apigee_organizations_securityProfiles_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityProfile summary);
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ComputeEnvironmentScoresResponse summary);
    void apigee_organizations_securityProfiles_environments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation summary);
    void apigee_organizations_securityProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityProfilesResponse summary);
    void apigee_organizations_securityProfiles_listRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSecurityProfileRevisionsResponse summary);
    void apigee_organizations_setAddonsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void apigee_organizations_setSyncAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SyncAuthorization summary);
    void apigee_organizations_sharedflows_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SharedFlowRevision summary);
    void apigee_organizations_sharedflows_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListSharedFlowsResponse summary);
    void apigee_organizations_sharedflows_revisions_deployments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListDeploymentsResponse summary);
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1SharedFlowRevision summary);
    void apigee_organizations_sites_apicategories_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiCategoryResponse summary);
    void apigee_organizations_sites_apicategories_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListApiCategoriesResponse summary);
    void apigee_organizations_sites_apidocs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiDocResponse summary);
    void apigee_organizations_sites_apidocs_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1DeleteResponse summary);
    void apigee_organizations_sites_apidocs_getDocumentationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary);
    void apigee_organizations_sites_apidocs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ListApiDocsResponse summary);
    void apigee_organizations_sites_apidocs_updateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiDocResponse summary);
    void apigee_organizations_sites_apidocs_updateDocumentationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary);

    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_createSignalError() instead")
    void apigee_organizations_analytics_datastores_createSignalE(OAIGoogleCloudApigeeV1Datastore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_createSignalError(OAIGoogleCloudApigeeV1Datastore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_listSignalError() instead")
    void apigee_organizations_analytics_datastores_listSignalE(OAIGoogleCloudApigeeV1ListDatastoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_listSignalError(OAIGoogleCloudApigeeV1ListDatastoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_testSignalError() instead")
    void apigee_organizations_analytics_datastores_testSignalE(OAIGoogleCloudApigeeV1TestDatastoreResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_testSignalError(OAIGoogleCloudApigeeV1TestDatastoreResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_createSignalError() instead")
    void apigee_organizations_apiproducts_createSignalE(OAIGoogleCloudApigeeV1ApiProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_createSignalError(OAIGoogleCloudApigeeV1ApiProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_listSignalError() instead")
    void apigee_organizations_apiproducts_listSignalE(OAIGoogleCloudApigeeV1ListApiProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_listSignalError(OAIGoogleCloudApigeeV1ListApiProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_rateplans_createSignalError() instead")
    void apigee_organizations_apiproducts_rateplans_createSignalE(OAIGoogleCloudApigeeV1RatePlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_rateplans_createSignalError(OAIGoogleCloudApigeeV1RatePlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_rateplans_listSignalError() instead")
    void apigee_organizations_apiproducts_rateplans_listSignalE(OAIGoogleCloudApigeeV1ListRatePlansResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_rateplans_listSignalError(OAIGoogleCloudApigeeV1ListRatePlansResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apis_createSignalError() instead")
    void apigee_organizations_apis_createSignalE(OAIGoogleCloudApigeeV1ApiProxyRevision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apis_createSignalError(OAIGoogleCloudApigeeV1ApiProxyRevision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apis_listSignalError() instead")
    void apigee_organizations_apis_listSignalE(OAIGoogleCloudApigeeV1ListApiProxiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apis_listSignalError(OAIGoogleCloudApigeeV1ListApiProxiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_appgroups_createSignalError() instead")
    void apigee_organizations_appgroups_createSignalE(OAIGoogleCloudApigeeV1AppGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_appgroups_createSignalError(OAIGoogleCloudApigeeV1AppGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_appgroups_listSignalError() instead")
    void apigee_organizations_appgroups_listSignalE(OAIGoogleCloudApigeeV1ListAppGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_appgroups_listSignalError(OAIGoogleCloudApigeeV1ListAppGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_createSignalError() instead")
    void apigee_organizations_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_datacollectors_createSignalError() instead")
    void apigee_organizations_datacollectors_createSignalE(OAIGoogleCloudApigeeV1DataCollector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_datacollectors_createSignalError(OAIGoogleCloudApigeeV1DataCollector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_datacollectors_listSignalError() instead")
    void apigee_organizations_datacollectors_listSignalE(OAIGoogleCloudApigeeV1ListDataCollectorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_datacollectors_listSignalError(OAIGoogleCloudApigeeV1ListDataCollectorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_attributesSignalError() instead")
    void apigee_organizations_developers_apps_attributesSignalE(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_attributesSignalError(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_createSignalError() instead")
    void apigee_organizations_developers_apps_createSignalE(OAIGoogleCloudApigeeV1DeveloperApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_createSignalError(OAIGoogleCloudApigeeV1DeveloperApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_keys_createSignalError() instead")
    void apigee_organizations_developers_apps_keys_createSignalE(OAIGoogleCloudApigeeV1DeveloperAppKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_keys_createSignalError(OAIGoogleCloudApigeeV1DeveloperAppKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_keys_create_createSignalError() instead")
    void apigee_organizations_developers_apps_keys_create_createSignalE(OAIGoogleCloudApigeeV1DeveloperAppKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_keys_create_createSignalError(OAIGoogleCloudApigeeV1DeveloperAppKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_listSignalError() instead")
    void apigee_organizations_developers_apps_listSignalE(OAIGoogleCloudApigeeV1ListDeveloperAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_listSignalError(OAIGoogleCloudApigeeV1ListDeveloperAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_attributesSignalError() instead")
    void apigee_organizations_developers_attributesSignalE(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_attributesSignalError(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_attributes_listSignalError() instead")
    void apigee_organizations_developers_attributes_listSignalE(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_attributes_listSignalError(OAIGoogleCloudApigeeV1Attributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_balance_adjustSignalError() instead")
    void apigee_organizations_developers_balance_adjustSignalE(OAIGoogleCloudApigeeV1DeveloperBalance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_balance_adjustSignalError(OAIGoogleCloudApigeeV1DeveloperBalance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_balance_creditSignalError() instead")
    void apigee_organizations_developers_balance_creditSignalE(OAIGoogleCloudApigeeV1DeveloperBalance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_balance_creditSignalError(OAIGoogleCloudApigeeV1DeveloperBalance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_createSignalError() instead")
    void apigee_organizations_developers_createSignalE(OAIGoogleCloudApigeeV1Developer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_createSignalError(OAIGoogleCloudApigeeV1Developer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_listSignalError() instead")
    void apigee_organizations_developers_listSignalE(OAIGoogleCloudApigeeV1ListOfDevelopersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_listSignalError(OAIGoogleCloudApigeeV1ListOfDevelopersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_createSignalError() instead")
    void apigee_organizations_developers_subscriptions_createSignalE(OAIGoogleCloudApigeeV1DeveloperSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_createSignalError(OAIGoogleCloudApigeeV1DeveloperSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_expireSignalError() instead")
    void apigee_organizations_developers_subscriptions_expireSignalE(OAIGoogleCloudApigeeV1DeveloperSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_expireSignalError(OAIGoogleCloudApigeeV1DeveloperSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_listSignalError() instead")
    void apigee_organizations_developers_subscriptions_listSignalE(OAIGoogleCloudApigeeV1ListDeveloperSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_listSignalError(OAIGoogleCloudApigeeV1ListDeveloperSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_endpointAttachments_createSignalError() instead")
    void apigee_organizations_endpointAttachments_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_endpointAttachments_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_endpointAttachments_listSignalError() instead")
    void apigee_organizations_endpointAttachments_listSignalE(OAIGoogleCloudApigeeV1ListEndpointAttachmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_endpointAttachments_listSignalError(OAIGoogleCloudApigeeV1ListEndpointAttachmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_envgroups_createSignalError() instead")
    void apigee_organizations_envgroups_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_envgroups_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_envgroups_listSignalError() instead")
    void apigee_organizations_envgroups_listSignalE(OAIGoogleCloudApigeeV1ListEnvironmentGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_envgroups_listSignalError(OAIGoogleCloudApigeeV1ListEnvironmentGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_addonsConfig_setAddonEnablementSignalError() instead")
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_analytics_exports_createSignalError() instead")
    void apigee_organizations_environments_analytics_exports_createSignalE(OAIGoogleCloudApigeeV1Export summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_analytics_exports_createSignalError(OAIGoogleCloudApigeeV1Export summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_analytics_exports_listSignalError() instead")
    void apigee_organizations_environments_analytics_exports_listSignalE(OAIGoogleCloudApigeeV1ListExportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_analytics_exports_listSignalError(OAIGoogleCloudApigeeV1ListExportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_createSignalError() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignalE(OAIGoogleCloudApigeeV1DebugSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignalError(OAIGoogleCloudApigeeV1DebugSession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalError() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_listSignalError() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignalE(OAIGoogleCloudApigeeV1ListDebugSessionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignalError(OAIGoogleCloudApigeeV1ListDebugSessionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalError() instead")
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalE(OAIGoogleCloudApigeeV1DeploymentChangeReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalError(OAIGoogleCloudApigeeV1DeploymentChangeReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalError() instead")
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalE(OAIGoogleCloudApigeeV1DeploymentChangeReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalError(OAIGoogleCloudApigeeV1DeploymentChangeReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_createSignalError() instead")
    void apigee_organizations_environments_archiveDeployments_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalError() instead")
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalE(OAIGoogleCloudApigeeV1GenerateDownloadUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalError(OAIGoogleCloudApigeeV1GenerateDownloadUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalError() instead")
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalE(OAIGoogleCloudApigeeV1GenerateUploadUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalError(OAIGoogleCloudApigeeV1GenerateUploadUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_listSignalError() instead")
    void apigee_organizations_environments_archiveDeployments_listSignalE(OAIGoogleCloudApigeeV1ListArchiveDeploymentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_listSignalError(OAIGoogleCloudApigeeV1ListArchiveDeploymentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_getIamPolicySignalError() instead")
    void apigee_organizations_environments_getIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_getIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_createSignalError() instead")
    void apigee_organizations_environments_keystores_aliases_createSignalE(OAIGoogleCloudApigeeV1Alias summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_createSignalError(OAIGoogleCloudApigeeV1Alias summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_csrSignalError() instead")
    void apigee_organizations_environments_keystores_aliases_csrSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_csrSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_getCertificateSignalError() instead")
    void apigee_organizations_environments_keystores_aliases_getCertificateSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_getCertificateSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_createSignalError() instead")
    void apigee_organizations_environments_keystores_createSignalE(OAIGoogleCloudApigeeV1Keystore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_createSignalError(OAIGoogleCloudApigeeV1Keystore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_queries_createSignalError() instead")
    void apigee_organizations_environments_queries_createSignalE(OAIGoogleCloudApigeeV1AsyncQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_queries_createSignalError(OAIGoogleCloudApigeeV1AsyncQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_queries_listSignalError() instead")
    void apigee_organizations_environments_queries_listSignalE(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_queries_listSignalError(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_references_createSignalError() instead")
    void apigee_organizations_environments_references_createSignalE(OAIGoogleCloudApigeeV1Reference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_references_createSignalError(OAIGoogleCloudApigeeV1Reference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_createSignalError() instead")
    void apigee_organizations_environments_resourcefiles_createSignalE(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_createSignalError(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_deleteSignalError() instead")
    void apigee_organizations_environments_resourcefiles_deleteSignalE(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_deleteSignalError(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_getSignalError() instead")
    void apigee_organizations_environments_resourcefiles_getSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_getSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_listSignalError() instead")
    void apigee_organizations_environments_resourcefiles_listSignalE(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_listSignalError(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalError() instead")
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalE(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalError(OAIGoogleCloudApigeeV1ListEnvironmentResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_updateSignalError() instead")
    void apigee_organizations_environments_resourcefiles_updateSignalE(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_updateSignalError(OAIGoogleCloudApigeeV1ResourceFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_createSignalError() instead")
    void apigee_organizations_environments_securityActions_createSignalE(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_createSignalError(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_disableSignalError() instead")
    void apigee_organizations_environments_securityActions_disableSignalE(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_disableSignalError(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_enableSignalError() instead")
    void apigee_organizations_environments_securityActions_enableSignalE(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_enableSignalError(OAIGoogleCloudApigeeV1SecurityAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_listSignalError() instead")
    void apigee_organizations_environments_securityActions_listSignalE(OAIGoogleCloudApigeeV1ListSecurityActionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_listSignalError(OAIGoogleCloudApigeeV1ListSecurityActionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityIncidents_batchUpdateSignalError() instead")
    void apigee_organizations_environments_securityIncidents_batchUpdateSignalE(OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityIncidents_batchUpdateSignalError(OAIGoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityIncidents_listSignalError() instead")
    void apigee_organizations_environments_securityIncidents_listSignalE(OAIGoogleCloudApigeeV1ListSecurityIncidentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityIncidents_listSignalError(OAIGoogleCloudApigeeV1ListSecurityIncidentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityReports_createSignalError() instead")
    void apigee_organizations_environments_securityReports_createSignalE(OAIGoogleCloudApigeeV1SecurityReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityReports_createSignalError(OAIGoogleCloudApigeeV1SecurityReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityReports_listSignalError() instead")
    void apigee_organizations_environments_securityReports_listSignalE(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityReports_listSignalError(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityStats_queryTabularStatsSignalError() instead")
    void apigee_organizations_environments_securityStats_queryTabularStatsSignalE(OAIGoogleCloudApigeeV1QueryTabularStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityStats_queryTabularStatsSignalError(OAIGoogleCloudApigeeV1QueryTabularStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalError() instead")
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalE(OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalError(OAIGoogleCloudApigeeV1QueryTimeSeriesStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_setIamPolicySignalError() instead")
    void apigee_organizations_environments_setIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_setIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_deploySignalError() instead")
    void apigee_organizations_environments_sharedflows_revisions_deploySignalE(OAIGoogleCloudApigeeV1Deployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_deploySignalError(OAIGoogleCloudApigeeV1Deployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalError() instead")
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalE(OAIGoogleCloudApigeeV1Deployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalError(OAIGoogleCloudApigeeV1Deployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_undeploySignalError() instead")
    void apigee_organizations_environments_sharedflows_revisions_undeploySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_undeploySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_subscribeSignalError() instead")
    void apigee_organizations_environments_subscribeSignalE(OAIGoogleCloudApigeeV1Subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_subscribeSignalError(OAIGoogleCloudApigeeV1Subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_targetservers_createSignalError() instead")
    void apigee_organizations_environments_targetservers_createSignalE(OAIGoogleCloudApigeeV1TargetServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_targetservers_createSignalError(OAIGoogleCloudApigeeV1TargetServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_testIamPermissionsSignalError() instead")
    void apigee_organizations_environments_testIamPermissionsSignalE(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_testIamPermissionsSignalError(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_traceConfig_overrides_createSignalError() instead")
    void apigee_organizations_environments_traceConfig_overrides_createSignalE(OAIGoogleCloudApigeeV1TraceConfigOverride summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_traceConfig_overrides_createSignalError(OAIGoogleCloudApigeeV1TraceConfigOverride summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_traceConfig_overrides_listSignalError() instead")
    void apigee_organizations_environments_traceConfig_overrides_listSignalE(OAIGoogleCloudApigeeV1ListTraceConfigOverridesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_traceConfig_overrides_listSignalError(OAIGoogleCloudApigeeV1ListTraceConfigOverridesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_unsubscribeSignalError() instead")
    void apigee_organizations_environments_unsubscribeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_unsubscribeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_getProjectMappingSignalError() instead")
    void apigee_organizations_getProjectMappingSignalE(OAIGoogleCloudApigeeV1OrganizationProjectMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_getProjectMappingSignalError(OAIGoogleCloudApigeeV1OrganizationProjectMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_getSyncAuthorizationSignalError() instead")
    void apigee_organizations_getSyncAuthorizationSignalE(OAIGoogleCloudApigeeV1SyncAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_getSyncAuthorizationSignalError(OAIGoogleCloudApigeeV1SyncAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostQueries_createSignalError() instead")
    void apigee_organizations_hostQueries_createSignalE(OAIGoogleCloudApigeeV1AsyncQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostQueries_createSignalError(OAIGoogleCloudApigeeV1AsyncQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostQueries_listSignalError() instead")
    void apigee_organizations_hostQueries_listSignalE(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostQueries_listSignalError(OAIGoogleCloudApigeeV1ListAsyncQueriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostSecurityReports_createSignalError() instead")
    void apigee_organizations_hostSecurityReports_createSignalE(OAIGoogleCloudApigeeV1SecurityReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostSecurityReports_createSignalError(OAIGoogleCloudApigeeV1SecurityReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostSecurityReports_listSignalError() instead")
    void apigee_organizations_hostSecurityReports_listSignalE(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostSecurityReports_listSignalError(OAIGoogleCloudApigeeV1ListSecurityReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_attachments_createSignalError() instead")
    void apigee_organizations_instances_attachments_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_attachments_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_attachments_listSignalError() instead")
    void apigee_organizations_instances_attachments_listSignalE(OAIGoogleCloudApigeeV1ListInstanceAttachmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_attachments_listSignalError(OAIGoogleCloudApigeeV1ListInstanceAttachmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_canaryevaluations_createSignalError() instead")
    void apigee_organizations_instances_canaryevaluations_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_canaryevaluations_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_createSignalError() instead")
    void apigee_organizations_instances_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_listSignalError() instead")
    void apigee_organizations_instances_listSignalE(OAIGoogleCloudApigeeV1ListInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_listSignalError(OAIGoogleCloudApigeeV1ListInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_activateSignalError() instead")
    void apigee_organizations_instances_natAddresses_activateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_activateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_createSignalError() instead")
    void apigee_organizations_instances_natAddresses_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_listSignalError() instead")
    void apigee_organizations_instances_natAddresses_listSignalE(OAIGoogleCloudApigeeV1ListNatAddressesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_listSignalError(OAIGoogleCloudApigeeV1ListNatAddressesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_reportStatusSignalError() instead")
    void apigee_organizations_instances_reportStatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_reportStatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_createSignalError() instead")
    void apigee_organizations_keyvaluemaps_createSignalE(OAIGoogleCloudApigeeV1KeyValueMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_createSignalError(OAIGoogleCloudApigeeV1KeyValueMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_entries_createSignalError() instead")
    void apigee_organizations_keyvaluemaps_entries_createSignalE(OAIGoogleCloudApigeeV1KeyValueEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_entries_createSignalError(OAIGoogleCloudApigeeV1KeyValueEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_entries_listSignalError() instead")
    void apigee_organizations_keyvaluemaps_entries_listSignalE(OAIGoogleCloudApigeeV1ListKeyValueEntriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_entries_listSignalError(OAIGoogleCloudApigeeV1ListKeyValueEntriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_listSignalError() instead")
    void apigee_organizations_listSignalE(OAIGoogleCloudApigeeV1ListOrganizationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_listSignalError(OAIGoogleCloudApigeeV1ListOrganizationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_operations_listSignalError() instead")
    void apigee_organizations_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_reports_createSignalError() instead")
    void apigee_organizations_reports_createSignalE(OAIGoogleCloudApigeeV1CustomReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_reports_createSignalError(OAIGoogleCloudApigeeV1CustomReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_reports_listSignalError() instead")
    void apigee_organizations_reports_listSignalE(OAIGoogleCloudApigeeV1ListCustomReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_reports_listSignalError(OAIGoogleCloudApigeeV1ListCustomReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_createSignalError() instead")
    void apigee_organizations_securityProfiles_createSignalE(OAIGoogleCloudApigeeV1SecurityProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_createSignalError(OAIGoogleCloudApigeeV1SecurityProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalError() instead")
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalE(OAIGoogleCloudApigeeV1ComputeEnvironmentScoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalError(OAIGoogleCloudApigeeV1ComputeEnvironmentScoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_environments_createSignalError() instead")
    void apigee_organizations_securityProfiles_environments_createSignalE(OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_environments_createSignalError(OAIGoogleCloudApigeeV1SecurityProfileEnvironmentAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_listSignalError() instead")
    void apigee_organizations_securityProfiles_listSignalE(OAIGoogleCloudApigeeV1ListSecurityProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_listSignalError(OAIGoogleCloudApigeeV1ListSecurityProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_listRevisionsSignalError() instead")
    void apigee_organizations_securityProfiles_listRevisionsSignalE(OAIGoogleCloudApigeeV1ListSecurityProfileRevisionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_listRevisionsSignalError(OAIGoogleCloudApigeeV1ListSecurityProfileRevisionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_setAddonsSignalError() instead")
    void apigee_organizations_setAddonsSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_setAddonsSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_setSyncAuthorizationSignalError() instead")
    void apigee_organizations_setSyncAuthorizationSignalE(OAIGoogleCloudApigeeV1SyncAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_setSyncAuthorizationSignalError(OAIGoogleCloudApigeeV1SyncAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_createSignalError() instead")
    void apigee_organizations_sharedflows_createSignalE(OAIGoogleCloudApigeeV1SharedFlowRevision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_createSignalError(OAIGoogleCloudApigeeV1SharedFlowRevision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_listSignalError() instead")
    void apigee_organizations_sharedflows_listSignalE(OAIGoogleCloudApigeeV1ListSharedFlowsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_listSignalError(OAIGoogleCloudApigeeV1ListSharedFlowsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_revisions_deployments_listSignalError() instead")
    void apigee_organizations_sharedflows_revisions_deployments_listSignalE(OAIGoogleCloudApigeeV1ListDeploymentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_revisions_deployments_listSignalError(OAIGoogleCloudApigeeV1ListDeploymentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalError() instead")
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalE(OAIGoogleCloudApigeeV1SharedFlowRevision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalError(OAIGoogleCloudApigeeV1SharedFlowRevision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apicategories_createSignalError() instead")
    void apigee_organizations_sites_apicategories_createSignalE(OAIGoogleCloudApigeeV1ApiCategoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apicategories_createSignalError(OAIGoogleCloudApigeeV1ApiCategoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apicategories_listSignalError() instead")
    void apigee_organizations_sites_apicategories_listSignalE(OAIGoogleCloudApigeeV1ListApiCategoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apicategories_listSignalError(OAIGoogleCloudApigeeV1ListApiCategoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_createSignalError() instead")
    void apigee_organizations_sites_apidocs_createSignalE(OAIGoogleCloudApigeeV1ApiDocResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_createSignalError(OAIGoogleCloudApigeeV1ApiDocResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_deleteSignalError() instead")
    void apigee_organizations_sites_apidocs_deleteSignalE(OAIGoogleCloudApigeeV1DeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_deleteSignalError(OAIGoogleCloudApigeeV1DeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_getDocumentationSignalError() instead")
    void apigee_organizations_sites_apidocs_getDocumentationSignalE(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_getDocumentationSignalError(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_listSignalError() instead")
    void apigee_organizations_sites_apidocs_listSignalE(OAIGoogleCloudApigeeV1ListApiDocsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_listSignalError(OAIGoogleCloudApigeeV1ListApiDocsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_updateSignalError() instead")
    void apigee_organizations_sites_apidocs_updateSignalE(OAIGoogleCloudApigeeV1ApiDocResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_updateSignalError(OAIGoogleCloudApigeeV1ApiDocResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_updateDocumentationSignalError() instead")
    void apigee_organizations_sites_apidocs_updateDocumentationSignalE(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_updateDocumentationSignalError(OAIGoogleCloudApigeeV1ApiDocDocumentationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_createSignalErrorFull() instead")
    void apigee_organizations_analytics_datastores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_listSignalErrorFull() instead")
    void apigee_organizations_analytics_datastores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_analytics_datastores_testSignalErrorFull() instead")
    void apigee_organizations_analytics_datastores_testSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_analytics_datastores_testSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_createSignalErrorFull() instead")
    void apigee_organizations_apiproducts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_listSignalErrorFull() instead")
    void apigee_organizations_apiproducts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_rateplans_createSignalErrorFull() instead")
    void apigee_organizations_apiproducts_rateplans_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_rateplans_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apiproducts_rateplans_listSignalErrorFull() instead")
    void apigee_organizations_apiproducts_rateplans_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apiproducts_rateplans_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apis_createSignalErrorFull() instead")
    void apigee_organizations_apis_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apis_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_apis_listSignalErrorFull() instead")
    void apigee_organizations_apis_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_apis_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_appgroups_createSignalErrorFull() instead")
    void apigee_organizations_appgroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_appgroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_appgroups_listSignalErrorFull() instead")
    void apigee_organizations_appgroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_appgroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_createSignalErrorFull() instead")
    void apigee_organizations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_datacollectors_createSignalErrorFull() instead")
    void apigee_organizations_datacollectors_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_datacollectors_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_datacollectors_listSignalErrorFull() instead")
    void apigee_organizations_datacollectors_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_datacollectors_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_attributesSignalErrorFull() instead")
    void apigee_organizations_developers_apps_attributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_attributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_createSignalErrorFull() instead")
    void apigee_organizations_developers_apps_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_keys_createSignalErrorFull() instead")
    void apigee_organizations_developers_apps_keys_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_keys_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_keys_create_createSignalErrorFull() instead")
    void apigee_organizations_developers_apps_keys_create_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_keys_create_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_apps_listSignalErrorFull() instead")
    void apigee_organizations_developers_apps_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_apps_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_attributesSignalErrorFull() instead")
    void apigee_organizations_developers_attributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_attributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_attributes_listSignalErrorFull() instead")
    void apigee_organizations_developers_attributes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_attributes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_balance_adjustSignalErrorFull() instead")
    void apigee_organizations_developers_balance_adjustSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_balance_adjustSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_balance_creditSignalErrorFull() instead")
    void apigee_organizations_developers_balance_creditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_balance_creditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_createSignalErrorFull() instead")
    void apigee_organizations_developers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_listSignalErrorFull() instead")
    void apigee_organizations_developers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_createSignalErrorFull() instead")
    void apigee_organizations_developers_subscriptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_expireSignalErrorFull() instead")
    void apigee_organizations_developers_subscriptions_expireSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_expireSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_developers_subscriptions_listSignalErrorFull() instead")
    void apigee_organizations_developers_subscriptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_developers_subscriptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_endpointAttachments_createSignalErrorFull() instead")
    void apigee_organizations_endpointAttachments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_endpointAttachments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_endpointAttachments_listSignalErrorFull() instead")
    void apigee_organizations_endpointAttachments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_endpointAttachments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_envgroups_createSignalErrorFull() instead")
    void apigee_organizations_envgroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_envgroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_envgroups_listSignalErrorFull() instead")
    void apigee_organizations_envgroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_envgroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_addonsConfig_setAddonEnablementSignalErrorFull() instead")
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_addonsConfig_setAddonEnablementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_analytics_exports_createSignalErrorFull() instead")
    void apigee_organizations_environments_analytics_exports_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_analytics_exports_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_analytics_exports_listSignalErrorFull() instead")
    void apigee_organizations_environments_analytics_exports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_analytics_exports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_createSignalErrorFull() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalErrorFull() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_deleteDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_debugsessions_listSignalErrorFull() instead")
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_debugsessions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalErrorFull() instead")
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_deployments_generateDeployChangeReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalErrorFull() instead")
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_apis_revisions_deployments_generateUndeployChangeReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_createSignalErrorFull() instead")
    void apigee_organizations_environments_archiveDeployments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalErrorFull() instead")
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_generateDownloadUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalErrorFull() instead")
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_generateUploadUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_archiveDeployments_listSignalErrorFull() instead")
    void apigee_organizations_environments_archiveDeployments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_archiveDeployments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_getIamPolicySignalErrorFull() instead")
    void apigee_organizations_environments_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_createSignalErrorFull() instead")
    void apigee_organizations_environments_keystores_aliases_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_csrSignalErrorFull() instead")
    void apigee_organizations_environments_keystores_aliases_csrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_csrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_aliases_getCertificateSignalErrorFull() instead")
    void apigee_organizations_environments_keystores_aliases_getCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_aliases_getCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_keystores_createSignalErrorFull() instead")
    void apigee_organizations_environments_keystores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_keystores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_queries_createSignalErrorFull() instead")
    void apigee_organizations_environments_queries_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_queries_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_queries_listSignalErrorFull() instead")
    void apigee_organizations_environments_queries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_queries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_references_createSignalErrorFull() instead")
    void apigee_organizations_environments_references_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_references_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_createSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_deleteSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_getSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_listSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_listEnvironmentResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_resourcefiles_updateSignalErrorFull() instead")
    void apigee_organizations_environments_resourcefiles_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_resourcefiles_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_createSignalErrorFull() instead")
    void apigee_organizations_environments_securityActions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_disableSignalErrorFull() instead")
    void apigee_organizations_environments_securityActions_disableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_disableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_enableSignalErrorFull() instead")
    void apigee_organizations_environments_securityActions_enableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_enableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityActions_listSignalErrorFull() instead")
    void apigee_organizations_environments_securityActions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityActions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityIncidents_batchUpdateSignalErrorFull() instead")
    void apigee_organizations_environments_securityIncidents_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityIncidents_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityIncidents_listSignalErrorFull() instead")
    void apigee_organizations_environments_securityIncidents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityIncidents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityReports_createSignalErrorFull() instead")
    void apigee_organizations_environments_securityReports_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityReports_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityReports_listSignalErrorFull() instead")
    void apigee_organizations_environments_securityReports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityReports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityStats_queryTabularStatsSignalErrorFull() instead")
    void apigee_organizations_environments_securityStats_queryTabularStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityStats_queryTabularStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalErrorFull() instead")
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_securityStats_queryTimeSeriesStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_setIamPolicySignalErrorFull() instead")
    void apigee_organizations_environments_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_deploySignalErrorFull() instead")
    void apigee_organizations_environments_sharedflows_revisions_deploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_deploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalErrorFull() instead")
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_getDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_sharedflows_revisions_undeploySignalErrorFull() instead")
    void apigee_organizations_environments_sharedflows_revisions_undeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_sharedflows_revisions_undeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_subscribeSignalErrorFull() instead")
    void apigee_organizations_environments_subscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_subscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_targetservers_createSignalErrorFull() instead")
    void apigee_organizations_environments_targetservers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_targetservers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_testIamPermissionsSignalErrorFull() instead")
    void apigee_organizations_environments_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_traceConfig_overrides_createSignalErrorFull() instead")
    void apigee_organizations_environments_traceConfig_overrides_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_traceConfig_overrides_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_traceConfig_overrides_listSignalErrorFull() instead")
    void apigee_organizations_environments_traceConfig_overrides_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_traceConfig_overrides_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_environments_unsubscribeSignalErrorFull() instead")
    void apigee_organizations_environments_unsubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_environments_unsubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_getProjectMappingSignalErrorFull() instead")
    void apigee_organizations_getProjectMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_getProjectMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_getSyncAuthorizationSignalErrorFull() instead")
    void apigee_organizations_getSyncAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_getSyncAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostQueries_createSignalErrorFull() instead")
    void apigee_organizations_hostQueries_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostQueries_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostQueries_listSignalErrorFull() instead")
    void apigee_organizations_hostQueries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostQueries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostSecurityReports_createSignalErrorFull() instead")
    void apigee_organizations_hostSecurityReports_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostSecurityReports_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_hostSecurityReports_listSignalErrorFull() instead")
    void apigee_organizations_hostSecurityReports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_hostSecurityReports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_attachments_createSignalErrorFull() instead")
    void apigee_organizations_instances_attachments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_attachments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_attachments_listSignalErrorFull() instead")
    void apigee_organizations_instances_attachments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_attachments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_canaryevaluations_createSignalErrorFull() instead")
    void apigee_organizations_instances_canaryevaluations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_canaryevaluations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_createSignalErrorFull() instead")
    void apigee_organizations_instances_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_listSignalErrorFull() instead")
    void apigee_organizations_instances_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_activateSignalErrorFull() instead")
    void apigee_organizations_instances_natAddresses_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_createSignalErrorFull() instead")
    void apigee_organizations_instances_natAddresses_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_natAddresses_listSignalErrorFull() instead")
    void apigee_organizations_instances_natAddresses_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_natAddresses_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_instances_reportStatusSignalErrorFull() instead")
    void apigee_organizations_instances_reportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_instances_reportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_createSignalErrorFull() instead")
    void apigee_organizations_keyvaluemaps_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_entries_createSignalErrorFull() instead")
    void apigee_organizations_keyvaluemaps_entries_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_entries_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_keyvaluemaps_entries_listSignalErrorFull() instead")
    void apigee_organizations_keyvaluemaps_entries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_keyvaluemaps_entries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_listSignalErrorFull() instead")
    void apigee_organizations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_operations_listSignalErrorFull() instead")
    void apigee_organizations_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_reports_createSignalErrorFull() instead")
    void apigee_organizations_reports_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_reports_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_reports_listSignalErrorFull() instead")
    void apigee_organizations_reports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_reports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_createSignalErrorFull() instead")
    void apigee_organizations_securityProfiles_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalErrorFull() instead")
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_environments_computeEnvironmentScoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_environments_createSignalErrorFull() instead")
    void apigee_organizations_securityProfiles_environments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_environments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_listSignalErrorFull() instead")
    void apigee_organizations_securityProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_securityProfiles_listRevisionsSignalErrorFull() instead")
    void apigee_organizations_securityProfiles_listRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_securityProfiles_listRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_setAddonsSignalErrorFull() instead")
    void apigee_organizations_setAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_setAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_setSyncAuthorizationSignalErrorFull() instead")
    void apigee_organizations_setSyncAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_setSyncAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_createSignalErrorFull() instead")
    void apigee_organizations_sharedflows_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_listSignalErrorFull() instead")
    void apigee_organizations_sharedflows_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_revisions_deployments_listSignalErrorFull() instead")
    void apigee_organizations_sharedflows_revisions_deployments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_revisions_deployments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalErrorFull() instead")
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sharedflows_revisions_updateSharedFlowRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apicategories_createSignalErrorFull() instead")
    void apigee_organizations_sites_apicategories_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apicategories_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apicategories_listSignalErrorFull() instead")
    void apigee_organizations_sites_apicategories_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apicategories_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_createSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_deleteSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_getDocumentationSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_getDocumentationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_getDocumentationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_listSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_updateSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apigee_organizations_sites_apidocs_updateDocumentationSignalErrorFull() instead")
    void apigee_organizations_sites_apidocs_updateDocumentationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apigee_organizations_sites_apidocs_updateDocumentationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
