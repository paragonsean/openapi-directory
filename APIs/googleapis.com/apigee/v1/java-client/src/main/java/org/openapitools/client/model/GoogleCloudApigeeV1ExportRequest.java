/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudApigeeV1DateRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request body for [CreateExportRequest]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1ExportRequest {
  public static final String SERIALIZED_NAME_CSV_DELIMITER = "csvDelimiter";
  @SerializedName(SERIALIZED_NAME_CSV_DELIMITER)
  private String csvDelimiter;

  public static final String SERIALIZED_NAME_DATASTORE_NAME = "datastoreName";
  @SerializedName(SERIALIZED_NAME_DATASTORE_NAME)
  private String datastoreName;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private GoogleCloudApigeeV1DateRange dateRange;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "outputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private String outputFormat;

  public GoogleCloudApigeeV1ExportRequest() {
  }

  public GoogleCloudApigeeV1ExportRequest csvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
    return this;
  }

  /**
   * Optional. Delimiter used in the CSV file, if &#x60;outputFormat&#x60; is set to &#x60;csv&#x60;. Defaults to the &#x60;,&#x60; (comma) character. Supported delimiter characters include comma (&#x60;,&#x60;), pipe (&#x60;|&#x60;), and tab (&#x60;\\t&#x60;).
   * @return csvDelimiter
   */
  @javax.annotation.Nullable
  public String getCsvDelimiter() {
    return csvDelimiter;
  }

  public void setCsvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
  }


  public GoogleCloudApigeeV1ExportRequest datastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
    return this;
  }

  /**
   * Required. Name of the preconfigured datastore.
   * @return datastoreName
   */
  @javax.annotation.Nullable
  public String getDatastoreName() {
    return datastoreName;
  }

  public void setDatastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
  }


  public GoogleCloudApigeeV1ExportRequest dateRange(GoogleCloudApigeeV1DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public GoogleCloudApigeeV1DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(GoogleCloudApigeeV1DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public GoogleCloudApigeeV1ExportRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the export job.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudApigeeV1ExportRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Display name of the export job.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudApigeeV1ExportRequest outputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Optional. Output format of the export. Valid values include: &#x60;csv&#x60; or &#x60;json&#x60;. Defaults to &#x60;json&#x60;. Note: Configure the delimiter for CSV output using the &#x60;csvDelimiter&#x60; property.
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public String getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1ExportRequest googleCloudApigeeV1ExportRequest = (GoogleCloudApigeeV1ExportRequest) o;
    return Objects.equals(this.csvDelimiter, googleCloudApigeeV1ExportRequest.csvDelimiter) &&
        Objects.equals(this.datastoreName, googleCloudApigeeV1ExportRequest.datastoreName) &&
        Objects.equals(this.dateRange, googleCloudApigeeV1ExportRequest.dateRange) &&
        Objects.equals(this.description, googleCloudApigeeV1ExportRequest.description) &&
        Objects.equals(this.name, googleCloudApigeeV1ExportRequest.name) &&
        Objects.equals(this.outputFormat, googleCloudApigeeV1ExportRequest.outputFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csvDelimiter, datastoreName, dateRange, description, name, outputFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1ExportRequest {\n");
    sb.append("    csvDelimiter: ").append(toIndentedString(csvDelimiter)).append("\n");
    sb.append("    datastoreName: ").append(toIndentedString(datastoreName)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("csvDelimiter");
    openapiFields.add("datastoreName");
    openapiFields.add("dateRange");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("outputFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1ExportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1ExportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1ExportRequest is not found in the empty JSON string", GoogleCloudApigeeV1ExportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1ExportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1ExportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("csvDelimiter") != null && !jsonObj.get("csvDelimiter").isJsonNull()) && !jsonObj.get("csvDelimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csvDelimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csvDelimiter").toString()));
      }
      if ((jsonObj.get("datastoreName") != null && !jsonObj.get("datastoreName").isJsonNull()) && !jsonObj.get("datastoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastoreName").toString()));
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        GoogleCloudApigeeV1DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("outputFormat") != null && !jsonObj.get("outputFormat").isJsonNull()) && !jsonObj.get("outputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1ExportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1ExportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1ExportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1ExportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1ExportRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1ExportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1ExportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1ExportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1ExportRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1ExportRequest
   */
  public static GoogleCloudApigeeV1ExportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1ExportRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1ExportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

