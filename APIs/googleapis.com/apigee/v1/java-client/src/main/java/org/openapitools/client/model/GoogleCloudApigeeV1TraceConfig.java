/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudApigeeV1TraceSamplingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TraceConfig defines the configurations in an environment of distributed trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1TraceConfig {
  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  /**
   * Required. Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
   */
  @JsonAdapter(ExporterEnum.Adapter.class)
  public enum ExporterEnum {
    EXPORTER_UNSPECIFIED("EXPORTER_UNSPECIFIED"),
    
    JAEGER("JAEGER"),
    
    CLOUD_TRACE("CLOUD_TRACE");

    private String value;

    ExporterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExporterEnum fromValue(String value) {
      for (ExporterEnum b : ExporterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExporterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExporterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExporterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExporterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExporterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPORTER = "exporter";
  @SerializedName(SERIALIZED_NAME_EXPORTER)
  private ExporterEnum exporter;

  public static final String SERIALIZED_NAME_SAMPLING_CONFIG = "samplingConfig";
  @SerializedName(SERIALIZED_NAME_SAMPLING_CONFIG)
  private GoogleCloudApigeeV1TraceSamplingConfig samplingConfig;

  public GoogleCloudApigeeV1TraceConfig() {
  }

  public GoogleCloudApigeeV1TraceConfig endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Required. Endpoint of the exporter.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public GoogleCloudApigeeV1TraceConfig exporter(ExporterEnum exporter) {
    this.exporter = exporter;
    return this;
  }

  /**
   * Required. Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
   * @return exporter
   */
  @javax.annotation.Nullable
  public ExporterEnum getExporter() {
    return exporter;
  }

  public void setExporter(ExporterEnum exporter) {
    this.exporter = exporter;
  }


  public GoogleCloudApigeeV1TraceConfig samplingConfig(GoogleCloudApigeeV1TraceSamplingConfig samplingConfig) {
    this.samplingConfig = samplingConfig;
    return this;
  }

  /**
   * Get samplingConfig
   * @return samplingConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudApigeeV1TraceSamplingConfig getSamplingConfig() {
    return samplingConfig;
  }

  public void setSamplingConfig(GoogleCloudApigeeV1TraceSamplingConfig samplingConfig) {
    this.samplingConfig = samplingConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1TraceConfig googleCloudApigeeV1TraceConfig = (GoogleCloudApigeeV1TraceConfig) o;
    return Objects.equals(this.endpoint, googleCloudApigeeV1TraceConfig.endpoint) &&
        Objects.equals(this.exporter, googleCloudApigeeV1TraceConfig.exporter) &&
        Objects.equals(this.samplingConfig, googleCloudApigeeV1TraceConfig.samplingConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, exporter, samplingConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1TraceConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    exporter: ").append(toIndentedString(exporter)).append("\n");
    sb.append("    samplingConfig: ").append(toIndentedString(samplingConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint");
    openapiFields.add("exporter");
    openapiFields.add("samplingConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1TraceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1TraceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1TraceConfig is not found in the empty JSON string", GoogleCloudApigeeV1TraceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1TraceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1TraceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("exporter") != null && !jsonObj.get("exporter").isJsonNull()) && !jsonObj.get("exporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exporter").toString()));
      }
      // validate the optional field `exporter`
      if (jsonObj.get("exporter") != null && !jsonObj.get("exporter").isJsonNull()) {
        ExporterEnum.validateJsonElement(jsonObj.get("exporter"));
      }
      // validate the optional field `samplingConfig`
      if (jsonObj.get("samplingConfig") != null && !jsonObj.get("samplingConfig").isJsonNull()) {
        GoogleCloudApigeeV1TraceSamplingConfig.validateJsonElement(jsonObj.get("samplingConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1TraceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1TraceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1TraceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1TraceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1TraceConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1TraceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1TraceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1TraceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1TraceConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1TraceConfig
   */
  public static GoogleCloudApigeeV1TraceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1TraceConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1TraceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

