/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Runtime configuration for the organization. Response for GetRuntimeConfig.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1RuntimeConfig {
  public static final String SERIALIZED_NAME_ANALYTICS_BUCKET = "analyticsBucket";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_BUCKET)
  private String analyticsBucket;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TENANT_PROJECT_ID = "tenantProjectId";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_ID)
  private String tenantProjectId;

  public static final String SERIALIZED_NAME_TRACE_BUCKET = "traceBucket";
  @SerializedName(SERIALIZED_NAME_TRACE_BUCKET)
  private String traceBucket;

  public GoogleCloudApigeeV1RuntimeConfig() {
  }

  public GoogleCloudApigeeV1RuntimeConfig(
     String tenantProjectId
  ) {
    this();
    this.tenantProjectId = tenantProjectId;
  }

  public GoogleCloudApigeeV1RuntimeConfig analyticsBucket(String analyticsBucket) {
    this.analyticsBucket = analyticsBucket;
    return this;
  }

  /**
   * Cloud Storage bucket used for uploading Analytics records.
   * @return analyticsBucket
   */
  @javax.annotation.Nullable
  public String getAnalyticsBucket() {
    return analyticsBucket;
  }

  public void setAnalyticsBucket(String analyticsBucket) {
    this.analyticsBucket = analyticsBucket;
  }


  public GoogleCloudApigeeV1RuntimeConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the resource in the following format: &#x60;organizations/{org}/runtimeConfig&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Tenant project ID associated with the Apigee organization. The tenant project is used to host Google-managed resources that are dedicated to this Apigee organization. Clients have limited access to resources within the tenant project used to support Apigee runtime instances. Access to the tenant project is managed using SetSyncAuthorization. It can be empty if the tenant project hasn&#39;t been created yet.
   * @return tenantProjectId
   */
  @javax.annotation.Nullable
  public String getTenantProjectId() {
    return tenantProjectId;
  }



  public GoogleCloudApigeeV1RuntimeConfig traceBucket(String traceBucket) {
    this.traceBucket = traceBucket;
    return this;
  }

  /**
   * Cloud Storage bucket used for uploading Trace records.
   * @return traceBucket
   */
  @javax.annotation.Nullable
  public String getTraceBucket() {
    return traceBucket;
  }

  public void setTraceBucket(String traceBucket) {
    this.traceBucket = traceBucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1RuntimeConfig googleCloudApigeeV1RuntimeConfig = (GoogleCloudApigeeV1RuntimeConfig) o;
    return Objects.equals(this.analyticsBucket, googleCloudApigeeV1RuntimeConfig.analyticsBucket) &&
        Objects.equals(this.name, googleCloudApigeeV1RuntimeConfig.name) &&
        Objects.equals(this.tenantProjectId, googleCloudApigeeV1RuntimeConfig.tenantProjectId) &&
        Objects.equals(this.traceBucket, googleCloudApigeeV1RuntimeConfig.traceBucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsBucket, name, tenantProjectId, traceBucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1RuntimeConfig {\n");
    sb.append("    analyticsBucket: ").append(toIndentedString(analyticsBucket)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tenantProjectId: ").append(toIndentedString(tenantProjectId)).append("\n");
    sb.append("    traceBucket: ").append(toIndentedString(traceBucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyticsBucket");
    openapiFields.add("name");
    openapiFields.add("tenantProjectId");
    openapiFields.add("traceBucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1RuntimeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1RuntimeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1RuntimeConfig is not found in the empty JSON string", GoogleCloudApigeeV1RuntimeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1RuntimeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1RuntimeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analyticsBucket") != null && !jsonObj.get("analyticsBucket").isJsonNull()) && !jsonObj.get("analyticsBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyticsBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyticsBucket").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tenantProjectId") != null && !jsonObj.get("tenantProjectId").isJsonNull()) && !jsonObj.get("tenantProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantProjectId").toString()));
      }
      if ((jsonObj.get("traceBucket") != null && !jsonObj.get("traceBucket").isJsonNull()) && !jsonObj.get("traceBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceBucket").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1RuntimeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1RuntimeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1RuntimeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1RuntimeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1RuntimeConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1RuntimeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1RuntimeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1RuntimeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1RuntimeConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1RuntimeConfig
   */
  public static GoogleCloudApigeeV1RuntimeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1RuntimeConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1RuntimeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

