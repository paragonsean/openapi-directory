/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Apigee runtime instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1Instance {
  public static final String SERIALIZED_NAME_CONSUMER_ACCEPT_LIST = "consumerAcceptList";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ACCEPT_LIST)
  private List<String> consumerAcceptList = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_KEY_NAME = "diskEncryptionKeyName";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_KEY_NAME)
  private String diskEncryptionKeyName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_IP_RANGE = "ipRange";
  @SerializedName(SERIALIZED_NAME_IP_RANGE)
  private String ipRange;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "lastModifiedAt";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private String lastModifiedAt;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support &#x60;SLASH_16&#x60; to &#x60;SLASH_20&#x60; and defaults to &#x60;SLASH_16&#x60;. Evaluation organizations support only &#x60;SLASH_23&#x60;.
   */
  @JsonAdapter(PeeringCidrRangeEnum.Adapter.class)
  public enum PeeringCidrRangeEnum {
    CIDR_RANGE_UNSPECIFIED("CIDR_RANGE_UNSPECIFIED"),
    
    SLASH_16("SLASH_16"),
    
    SLASH_17("SLASH_17"),
    
    SLASH_18("SLASH_18"),
    
    SLASH_19("SLASH_19"),
    
    SLASH_20("SLASH_20"),
    
    SLASH_22("SLASH_22"),
    
    SLASH_23("SLASH_23");

    private String value;

    PeeringCidrRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeeringCidrRangeEnum fromValue(String value) {
      for (PeeringCidrRangeEnum b : PeeringCidrRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeeringCidrRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeeringCidrRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeeringCidrRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeeringCidrRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeeringCidrRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEERING_CIDR_RANGE = "peeringCidrRange";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PEERING_CIDR_RANGE)
  private PeeringCidrRangeEnum peeringCidrRange;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private String runtimeVersion;

  public static final String SERIALIZED_NAME_SERVICE_ATTACHMENT = "serviceAttachment";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTACHMENT)
  private String serviceAttachment;

  /**
   * Output only. State of the instance. Values other than &#x60;ACTIVE&#x60; means the resource is not ready to use.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleCloudApigeeV1Instance() {
  }

  public GoogleCloudApigeeV1Instance(
     String createdAt, 
     String host, 
     String lastModifiedAt, 
     String port, 
     String runtimeVersion, 
     String serviceAttachment, 
     StateEnum state
  ) {
    this();
    this.createdAt = createdAt;
    this.host = host;
    this.lastModifiedAt = lastModifiedAt;
    this.port = port;
    this.runtimeVersion = runtimeVersion;
    this.serviceAttachment = serviceAttachment;
    this.state = state;
  }

  public GoogleCloudApigeeV1Instance consumerAcceptList(List<String> consumerAcceptList) {
    this.consumerAcceptList = consumerAcceptList;
    return this;
  }

  public GoogleCloudApigeeV1Instance addConsumerAcceptListItem(String consumerAcceptListItem) {
    if (this.consumerAcceptList == null) {
      this.consumerAcceptList = new ArrayList<>();
    }
    this.consumerAcceptList.add(consumerAcceptListItem);
    return this;
  }

  /**
   * Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.
   * @return consumerAcceptList
   */
  @javax.annotation.Nullable
  public List<String> getConsumerAcceptList() {
    return consumerAcceptList;
  }

  public void setConsumerAcceptList(List<String> consumerAcceptList) {
    this.consumerAcceptList = consumerAcceptList;
  }


  /**
   * Output only. Time the instance was created in milliseconds since epoch.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }



  public GoogleCloudApigeeV1Instance description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the instance.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudApigeeV1Instance diskEncryptionKeyName(String diskEncryptionKeyName) {
    this.diskEncryptionKeyName = diskEncryptionKeyName;
    return this;
  }

  /**
   * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: &#x60;projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)&#x60;
   * @return diskEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getDiskEncryptionKeyName() {
    return diskEncryptionKeyName;
  }

  public void setDiskEncryptionKeyName(String diskEncryptionKeyName) {
    this.diskEncryptionKeyName = diskEncryptionKeyName;
  }


  public GoogleCloudApigeeV1Instance displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Display name for the instance.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }



  public GoogleCloudApigeeV1Instance ipRange(String ipRange) {
    this.ipRange = ipRange;
    return this;
  }

  /**
   * Optional. Comma-separated list of CIDR blocks of length 22 and/or 28 used to create the Apigee instance. Providing CIDR ranges is optional. You can provide just /22 or /28 or both (or neither). Ranges you provide should be freely available as part of a larger named range you have allocated to the Service Networking peering. If this parameter is not provided, Apigee automatically requests an available /22 and /28 CIDR block from Service Networking. Use the /22 CIDR block for configuring your firewall needs to allow traffic from Apigee. Input formats: &#x60;a.b.c.d/22&#x60; or &#x60;e.f.g.h/28&#x60; or &#x60;a.b.c.d/22,e.f.g.h/28&#x60;
   * @return ipRange
   */
  @javax.annotation.Nullable
  public String getIpRange() {
    return ipRange;
  }

  public void setIpRange(String ipRange) {
    this.ipRange = ipRange;
  }


  /**
   * Output only. Time the instance was last modified in milliseconds since epoch.
   * @return lastModifiedAt
   */
  @javax.annotation.Nullable
  public String getLastModifiedAt() {
    return lastModifiedAt;
  }



  public GoogleCloudApigeeV1Instance location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Required. Compute Engine location where the instance resides.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public GoogleCloudApigeeV1Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Resource ID of the instance. Values must match the regular expression &#x60;^a-z{0,30}[a-z\\d]$&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public GoogleCloudApigeeV1Instance peeringCidrRange(PeeringCidrRangeEnum peeringCidrRange) {
    this.peeringCidrRange = peeringCidrRange;
    return this;
  }

  /**
   * Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support &#x60;SLASH_16&#x60; to &#x60;SLASH_20&#x60; and defaults to &#x60;SLASH_16&#x60;. Evaluation organizations support only &#x60;SLASH_23&#x60;.
   * @return peeringCidrRange
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public PeeringCidrRangeEnum getPeeringCidrRange() {
    return peeringCidrRange;
  }

  @Deprecated
  public void setPeeringCidrRange(PeeringCidrRangeEnum peeringCidrRange) {
    this.peeringCidrRange = peeringCidrRange;
  }


  /**
   * Output only. Port number of the exposed Apigee endpoint.
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }



  /**
   * Output only. Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public String getRuntimeVersion() {
    return runtimeVersion;
  }



  /**
   * Output only. Resource name of the service attachment created for the instance in the format: &#x60;projects/_*_/regions/_*_/serviceAttachments/_*&#x60; Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.
   * @return serviceAttachment
   */
  @javax.annotation.Nullable
  public String getServiceAttachment() {
    return serviceAttachment;
  }



  /**
   * Output only. State of the instance. Values other than &#x60;ACTIVE&#x60; means the resource is not ready to use.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1Instance googleCloudApigeeV1Instance = (GoogleCloudApigeeV1Instance) o;
    return Objects.equals(this.consumerAcceptList, googleCloudApigeeV1Instance.consumerAcceptList) &&
        Objects.equals(this.createdAt, googleCloudApigeeV1Instance.createdAt) &&
        Objects.equals(this.description, googleCloudApigeeV1Instance.description) &&
        Objects.equals(this.diskEncryptionKeyName, googleCloudApigeeV1Instance.diskEncryptionKeyName) &&
        Objects.equals(this.displayName, googleCloudApigeeV1Instance.displayName) &&
        Objects.equals(this.host, googleCloudApigeeV1Instance.host) &&
        Objects.equals(this.ipRange, googleCloudApigeeV1Instance.ipRange) &&
        Objects.equals(this.lastModifiedAt, googleCloudApigeeV1Instance.lastModifiedAt) &&
        Objects.equals(this.location, googleCloudApigeeV1Instance.location) &&
        Objects.equals(this.name, googleCloudApigeeV1Instance.name) &&
        Objects.equals(this.peeringCidrRange, googleCloudApigeeV1Instance.peeringCidrRange) &&
        Objects.equals(this.port, googleCloudApigeeV1Instance.port) &&
        Objects.equals(this.runtimeVersion, googleCloudApigeeV1Instance.runtimeVersion) &&
        Objects.equals(this.serviceAttachment, googleCloudApigeeV1Instance.serviceAttachment) &&
        Objects.equals(this.state, googleCloudApigeeV1Instance.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerAcceptList, createdAt, description, diskEncryptionKeyName, displayName, host, ipRange, lastModifiedAt, location, name, peeringCidrRange, port, runtimeVersion, serviceAttachment, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1Instance {\n");
    sb.append("    consumerAcceptList: ").append(toIndentedString(consumerAcceptList)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskEncryptionKeyName: ").append(toIndentedString(diskEncryptionKeyName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    ipRange: ").append(toIndentedString(ipRange)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peeringCidrRange: ").append(toIndentedString(peeringCidrRange)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    serviceAttachment: ").append(toIndentedString(serviceAttachment)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerAcceptList");
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("diskEncryptionKeyName");
    openapiFields.add("displayName");
    openapiFields.add("host");
    openapiFields.add("ipRange");
    openapiFields.add("lastModifiedAt");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("peeringCidrRange");
    openapiFields.add("port");
    openapiFields.add("runtimeVersion");
    openapiFields.add("serviceAttachment");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1Instance is not found in the empty JSON string", GoogleCloudApigeeV1Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("consumerAcceptList") != null && !jsonObj.get("consumerAcceptList").isJsonNull() && !jsonObj.get("consumerAcceptList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerAcceptList` to be an array in the JSON string but got `%s`", jsonObj.get("consumerAcceptList").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("diskEncryptionKeyName") != null && !jsonObj.get("diskEncryptionKeyName").isJsonNull()) && !jsonObj.get("diskEncryptionKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskEncryptionKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskEncryptionKeyName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("ipRange") != null && !jsonObj.get("ipRange").isJsonNull()) && !jsonObj.get("ipRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipRange").toString()));
      }
      if ((jsonObj.get("lastModifiedAt") != null && !jsonObj.get("lastModifiedAt").isJsonNull()) && !jsonObj.get("lastModifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedAt").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("peeringCidrRange") != null && !jsonObj.get("peeringCidrRange").isJsonNull()) && !jsonObj.get("peeringCidrRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringCidrRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringCidrRange").toString()));
      }
      // validate the optional field `peeringCidrRange`
      if (jsonObj.get("peeringCidrRange") != null && !jsonObj.get("peeringCidrRange").isJsonNull()) {
        PeeringCidrRangeEnum.validateJsonElement(jsonObj.get("peeringCidrRange"));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
      if ((jsonObj.get("serviceAttachment") != null && !jsonObj.get("serviceAttachment").isJsonNull()) && !jsonObj.get("serviceAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAttachment").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1Instance>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1Instance
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1Instance
   */
  public static GoogleCloudApigeeV1Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1Instance.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

