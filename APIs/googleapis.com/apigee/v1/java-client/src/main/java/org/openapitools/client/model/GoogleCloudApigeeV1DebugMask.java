/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoogleCloudApigeeV1DebugMask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1DebugMask {
  public static final String SERIALIZED_NAME_FAULT_J_S_O_N_PATHS = "faultJSONPaths";
  @SerializedName(SERIALIZED_NAME_FAULT_J_S_O_N_PATHS)
  private List<String> faultJSONPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAULT_X_PATHS = "faultXPaths";
  @SerializedName(SERIALIZED_NAME_FAULT_X_PATHS)
  private List<String> faultXPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACES = "namespaces";
  @SerializedName(SERIALIZED_NAME_NAMESPACES)
  private Map<String, String> namespaces = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_J_S_O_N_PATHS = "requestJSONPaths";
  @SerializedName(SERIALIZED_NAME_REQUEST_J_S_O_N_PATHS)
  private List<String> requestJSONPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_X_PATHS = "requestXPaths";
  @SerializedName(SERIALIZED_NAME_REQUEST_X_PATHS)
  private List<String> requestXPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_J_S_O_N_PATHS = "responseJSONPaths";
  @SerializedName(SERIALIZED_NAME_RESPONSE_J_S_O_N_PATHS)
  private List<String> responseJSONPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_X_PATHS = "responseXPaths";
  @SerializedName(SERIALIZED_NAME_RESPONSE_X_PATHS)
  private List<String> responseXPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private List<String> variables = new ArrayList<>();

  public GoogleCloudApigeeV1DebugMask() {
  }

  public GoogleCloudApigeeV1DebugMask faultJSONPaths(List<String> faultJSONPaths) {
    this.faultJSONPaths = faultJSONPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addFaultJSONPathsItem(String faultJSONPathsItem) {
    if (this.faultJSONPaths == null) {
      this.faultJSONPaths = new ArrayList<>();
    }
    this.faultJSONPaths.add(faultJSONPathsItem);
    return this;
  }

  /**
   * List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.
   * @return faultJSONPaths
   */
  @javax.annotation.Nullable
  public List<String> getFaultJSONPaths() {
    return faultJSONPaths;
  }

  public void setFaultJSONPaths(List<String> faultJSONPaths) {
    this.faultJSONPaths = faultJSONPaths;
  }


  public GoogleCloudApigeeV1DebugMask faultXPaths(List<String> faultXPaths) {
    this.faultXPaths = faultXPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addFaultXPathsItem(String faultXPathsItem) {
    if (this.faultXPaths == null) {
      this.faultXPaths = new ArrayList<>();
    }
    this.faultXPaths.add(faultXPathsItem);
    return this;
  }

  /**
   * List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.
   * @return faultXPaths
   */
  @javax.annotation.Nullable
  public List<String> getFaultXPaths() {
    return faultXPaths;
  }

  public void setFaultXPaths(List<String> faultXPaths) {
    this.faultXPaths = faultXPaths;
  }


  public GoogleCloudApigeeV1DebugMask name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the debug mask.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudApigeeV1DebugMask namespaces(Map<String, String> namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask putNamespacesItem(String key, String namespacesItem) {
    if (this.namespaces == null) {
      this.namespaces = new HashMap<>();
    }
    this.namespaces.put(key, namespacesItem);
    return this;
  }

  /**
   * Map of namespaces to URIs.
   * @return namespaces
   */
  @javax.annotation.Nullable
  public Map<String, String> getNamespaces() {
    return namespaces;
  }

  public void setNamespaces(Map<String, String> namespaces) {
    this.namespaces = namespaces;
  }


  public GoogleCloudApigeeV1DebugMask requestJSONPaths(List<String> requestJSONPaths) {
    this.requestJSONPaths = requestJSONPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addRequestJSONPathsItem(String requestJSONPathsItem) {
    if (this.requestJSONPaths == null) {
      this.requestJSONPaths = new ArrayList<>();
    }
    this.requestJSONPaths.add(requestJSONPathsItem);
    return this;
  }

  /**
   * List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.
   * @return requestJSONPaths
   */
  @javax.annotation.Nullable
  public List<String> getRequestJSONPaths() {
    return requestJSONPaths;
  }

  public void setRequestJSONPaths(List<String> requestJSONPaths) {
    this.requestJSONPaths = requestJSONPaths;
  }


  public GoogleCloudApigeeV1DebugMask requestXPaths(List<String> requestXPaths) {
    this.requestXPaths = requestXPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addRequestXPathsItem(String requestXPathsItem) {
    if (this.requestXPaths == null) {
      this.requestXPaths = new ArrayList<>();
    }
    this.requestXPaths.add(requestXPathsItem);
    return this;
  }

  /**
   * List of XPaths that specify the XML elements to be filtered from XML request message payloads.
   * @return requestXPaths
   */
  @javax.annotation.Nullable
  public List<String> getRequestXPaths() {
    return requestXPaths;
  }

  public void setRequestXPaths(List<String> requestXPaths) {
    this.requestXPaths = requestXPaths;
  }


  public GoogleCloudApigeeV1DebugMask responseJSONPaths(List<String> responseJSONPaths) {
    this.responseJSONPaths = responseJSONPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addResponseJSONPathsItem(String responseJSONPathsItem) {
    if (this.responseJSONPaths == null) {
      this.responseJSONPaths = new ArrayList<>();
    }
    this.responseJSONPaths.add(responseJSONPathsItem);
    return this;
  }

  /**
   * List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.
   * @return responseJSONPaths
   */
  @javax.annotation.Nullable
  public List<String> getResponseJSONPaths() {
    return responseJSONPaths;
  }

  public void setResponseJSONPaths(List<String> responseJSONPaths) {
    this.responseJSONPaths = responseJSONPaths;
  }


  public GoogleCloudApigeeV1DebugMask responseXPaths(List<String> responseXPaths) {
    this.responseXPaths = responseXPaths;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addResponseXPathsItem(String responseXPathsItem) {
    if (this.responseXPaths == null) {
      this.responseXPaths = new ArrayList<>();
    }
    this.responseXPaths.add(responseXPathsItem);
    return this;
  }

  /**
   * List of XPaths that specify the XML elements to be filtered from XML response message payloads.
   * @return responseXPaths
   */
  @javax.annotation.Nullable
  public List<String> getResponseXPaths() {
    return responseXPaths;
  }

  public void setResponseXPaths(List<String> responseXPaths) {
    this.responseXPaths = responseXPaths;
  }


  public GoogleCloudApigeeV1DebugMask variables(List<String> variables) {
    this.variables = variables;
    return this;
  }

  public GoogleCloudApigeeV1DebugMask addVariablesItem(String variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

  /**
   * List of variables that should be masked from the debug output.
   * @return variables
   */
  @javax.annotation.Nullable
  public List<String> getVariables() {
    return variables;
  }

  public void setVariables(List<String> variables) {
    this.variables = variables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1DebugMask googleCloudApigeeV1DebugMask = (GoogleCloudApigeeV1DebugMask) o;
    return Objects.equals(this.faultJSONPaths, googleCloudApigeeV1DebugMask.faultJSONPaths) &&
        Objects.equals(this.faultXPaths, googleCloudApigeeV1DebugMask.faultXPaths) &&
        Objects.equals(this.name, googleCloudApigeeV1DebugMask.name) &&
        Objects.equals(this.namespaces, googleCloudApigeeV1DebugMask.namespaces) &&
        Objects.equals(this.requestJSONPaths, googleCloudApigeeV1DebugMask.requestJSONPaths) &&
        Objects.equals(this.requestXPaths, googleCloudApigeeV1DebugMask.requestXPaths) &&
        Objects.equals(this.responseJSONPaths, googleCloudApigeeV1DebugMask.responseJSONPaths) &&
        Objects.equals(this.responseXPaths, googleCloudApigeeV1DebugMask.responseXPaths) &&
        Objects.equals(this.variables, googleCloudApigeeV1DebugMask.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faultJSONPaths, faultXPaths, name, namespaces, requestJSONPaths, requestXPaths, responseJSONPaths, responseXPaths, variables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1DebugMask {\n");
    sb.append("    faultJSONPaths: ").append(toIndentedString(faultJSONPaths)).append("\n");
    sb.append("    faultXPaths: ").append(toIndentedString(faultXPaths)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("    requestJSONPaths: ").append(toIndentedString(requestJSONPaths)).append("\n");
    sb.append("    requestXPaths: ").append(toIndentedString(requestXPaths)).append("\n");
    sb.append("    responseJSONPaths: ").append(toIndentedString(responseJSONPaths)).append("\n");
    sb.append("    responseXPaths: ").append(toIndentedString(responseXPaths)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("faultJSONPaths");
    openapiFields.add("faultXPaths");
    openapiFields.add("name");
    openapiFields.add("namespaces");
    openapiFields.add("requestJSONPaths");
    openapiFields.add("requestXPaths");
    openapiFields.add("responseJSONPaths");
    openapiFields.add("responseXPaths");
    openapiFields.add("variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1DebugMask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1DebugMask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1DebugMask is not found in the empty JSON string", GoogleCloudApigeeV1DebugMask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1DebugMask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1DebugMask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("faultJSONPaths") != null && !jsonObj.get("faultJSONPaths").isJsonNull() && !jsonObj.get("faultJSONPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `faultJSONPaths` to be an array in the JSON string but got `%s`", jsonObj.get("faultJSONPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("faultXPaths") != null && !jsonObj.get("faultXPaths").isJsonNull() && !jsonObj.get("faultXPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `faultXPaths` to be an array in the JSON string but got `%s`", jsonObj.get("faultXPaths").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestJSONPaths") != null && !jsonObj.get("requestJSONPaths").isJsonNull() && !jsonObj.get("requestJSONPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestJSONPaths` to be an array in the JSON string but got `%s`", jsonObj.get("requestJSONPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestXPaths") != null && !jsonObj.get("requestXPaths").isJsonNull() && !jsonObj.get("requestXPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestXPaths` to be an array in the JSON string but got `%s`", jsonObj.get("requestXPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseJSONPaths") != null && !jsonObj.get("responseJSONPaths").isJsonNull() && !jsonObj.get("responseJSONPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseJSONPaths` to be an array in the JSON string but got `%s`", jsonObj.get("responseJSONPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseXPaths") != null && !jsonObj.get("responseXPaths").isJsonNull() && !jsonObj.get("responseXPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseXPaths` to be an array in the JSON string but got `%s`", jsonObj.get("responseXPaths").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("variables") != null && !jsonObj.get("variables").isJsonNull() && !jsonObj.get("variables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variables` to be an array in the JSON string but got `%s`", jsonObj.get("variables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1DebugMask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1DebugMask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1DebugMask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1DebugMask.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1DebugMask>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1DebugMask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1DebugMask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1DebugMask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1DebugMask
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1DebugMask
   */
  public static GoogleCloudApigeeV1DebugMask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1DebugMask.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1DebugMask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

