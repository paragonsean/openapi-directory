/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudApigeeV1RuntimeTraceConfigOverride;
import org.openapitools.client.model.GoogleCloudApigeeV1RuntimeTraceSamplingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NEXT ID: 8 RuntimeTraceConfig defines the configurations for distributed trace in an environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1RuntimeTraceConfig {
  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  /**
   * Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
   */
  @JsonAdapter(ExporterEnum.Adapter.class)
  public enum ExporterEnum {
    EXPORTER_UNSPECIFIED("EXPORTER_UNSPECIFIED"),
    
    JAEGER("JAEGER"),
    
    CLOUD_TRACE("CLOUD_TRACE");

    private String value;

    ExporterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExporterEnum fromValue(String value) {
      for (ExporterEnum b : ExporterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExporterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExporterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExporterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExporterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExporterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPORTER = "exporter";
  @SerializedName(SERIALIZED_NAME_EXPORTER)
  private ExporterEnum exporter;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private List<GoogleCloudApigeeV1RuntimeTraceConfigOverride> overrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISION_CREATE_TIME = "revisionCreateTime";
  @SerializedName(SERIALIZED_NAME_REVISION_CREATE_TIME)
  private String revisionCreateTime;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_SAMPLING_CONFIG = "samplingConfig";
  @SerializedName(SERIALIZED_NAME_SAMPLING_CONFIG)
  private GoogleCloudApigeeV1RuntimeTraceSamplingConfig samplingConfig;

  public GoogleCloudApigeeV1RuntimeTraceConfig() {
  }

  public GoogleCloudApigeeV1RuntimeTraceConfig endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Endpoint of the exporter.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig exporter(ExporterEnum exporter) {
    this.exporter = exporter;
    return this;
  }

  /**
   * Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
   * @return exporter
   */
  @javax.annotation.Nullable
  public ExporterEnum getExporter() {
    return exporter;
  }

  public void setExporter(ExporterEnum exporter) {
    this.exporter = exporter;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the trace config in the following format: &#x60;organizations/{org}/environment/{env}/traceConfig&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig overrides(List<GoogleCloudApigeeV1RuntimeTraceConfigOverride> overrides) {
    this.overrides = overrides;
    return this;
  }

  public GoogleCloudApigeeV1RuntimeTraceConfig addOverridesItem(GoogleCloudApigeeV1RuntimeTraceConfigOverride overridesItem) {
    if (this.overrides == null) {
      this.overrides = new ArrayList<>();
    }
    this.overrides.add(overridesItem);
    return this;
  }

  /**
   * List of trace configuration overrides for spicific API proxies.
   * @return overrides
   */
  @javax.annotation.Nullable
  public List<GoogleCloudApigeeV1RuntimeTraceConfigOverride> getOverrides() {
    return overrides;
  }

  public void setOverrides(List<GoogleCloudApigeeV1RuntimeTraceConfigOverride> overrides) {
    this.overrides = overrides;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig revisionCreateTime(String revisionCreateTime) {
    this.revisionCreateTime = revisionCreateTime;
    return this;
  }

  /**
   * The timestamp that the revision was created or updated.
   * @return revisionCreateTime
   */
  @javax.annotation.Nullable
  public String getRevisionCreateTime() {
    return revisionCreateTime;
  }

  public void setRevisionCreateTime(String revisionCreateTime) {
    this.revisionCreateTime = revisionCreateTime;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Revision number which can be used by the runtime to detect if the trace config has changed between two versions.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public GoogleCloudApigeeV1RuntimeTraceConfig samplingConfig(GoogleCloudApigeeV1RuntimeTraceSamplingConfig samplingConfig) {
    this.samplingConfig = samplingConfig;
    return this;
  }

  /**
   * Get samplingConfig
   * @return samplingConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudApigeeV1RuntimeTraceSamplingConfig getSamplingConfig() {
    return samplingConfig;
  }

  public void setSamplingConfig(GoogleCloudApigeeV1RuntimeTraceSamplingConfig samplingConfig) {
    this.samplingConfig = samplingConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1RuntimeTraceConfig googleCloudApigeeV1RuntimeTraceConfig = (GoogleCloudApigeeV1RuntimeTraceConfig) o;
    return Objects.equals(this.endpoint, googleCloudApigeeV1RuntimeTraceConfig.endpoint) &&
        Objects.equals(this.exporter, googleCloudApigeeV1RuntimeTraceConfig.exporter) &&
        Objects.equals(this.name, googleCloudApigeeV1RuntimeTraceConfig.name) &&
        Objects.equals(this.overrides, googleCloudApigeeV1RuntimeTraceConfig.overrides) &&
        Objects.equals(this.revisionCreateTime, googleCloudApigeeV1RuntimeTraceConfig.revisionCreateTime) &&
        Objects.equals(this.revisionId, googleCloudApigeeV1RuntimeTraceConfig.revisionId) &&
        Objects.equals(this.samplingConfig, googleCloudApigeeV1RuntimeTraceConfig.samplingConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, exporter, name, overrides, revisionCreateTime, revisionId, samplingConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1RuntimeTraceConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    exporter: ").append(toIndentedString(exporter)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    revisionCreateTime: ").append(toIndentedString(revisionCreateTime)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    samplingConfig: ").append(toIndentedString(samplingConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint");
    openapiFields.add("exporter");
    openapiFields.add("name");
    openapiFields.add("overrides");
    openapiFields.add("revisionCreateTime");
    openapiFields.add("revisionId");
    openapiFields.add("samplingConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1RuntimeTraceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1RuntimeTraceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1RuntimeTraceConfig is not found in the empty JSON string", GoogleCloudApigeeV1RuntimeTraceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1RuntimeTraceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1RuntimeTraceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("exporter") != null && !jsonObj.get("exporter").isJsonNull()) && !jsonObj.get("exporter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exporter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exporter").toString()));
      }
      // validate the optional field `exporter`
      if (jsonObj.get("exporter") != null && !jsonObj.get("exporter").isJsonNull()) {
        ExporterEnum.validateJsonElement(jsonObj.get("exporter"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("overrides") != null && !jsonObj.get("overrides").isJsonNull()) {
        JsonArray jsonArrayoverrides = jsonObj.getAsJsonArray("overrides");
        if (jsonArrayoverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overrides` to be an array in the JSON string but got `%s`", jsonObj.get("overrides").toString()));
          }

          // validate the optional field `overrides` (array)
          for (int i = 0; i < jsonArrayoverrides.size(); i++) {
            GoogleCloudApigeeV1RuntimeTraceConfigOverride.validateJsonElement(jsonArrayoverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("revisionCreateTime") != null && !jsonObj.get("revisionCreateTime").isJsonNull()) && !jsonObj.get("revisionCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionCreateTime").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      // validate the optional field `samplingConfig`
      if (jsonObj.get("samplingConfig") != null && !jsonObj.get("samplingConfig").isJsonNull()) {
        GoogleCloudApigeeV1RuntimeTraceSamplingConfig.validateJsonElement(jsonObj.get("samplingConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1RuntimeTraceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1RuntimeTraceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1RuntimeTraceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1RuntimeTraceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1RuntimeTraceConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1RuntimeTraceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1RuntimeTraceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1RuntimeTraceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1RuntimeTraceConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1RuntimeTraceConfig
   */
  public static GoogleCloudApigeeV1RuntimeTraceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1RuntimeTraceConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1RuntimeTraceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

