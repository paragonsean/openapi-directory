/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudApigeeV1TlsInfoCommonName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TLS configuration information for virtual hosts and TargetServers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1TlsInfo {
  public static final String SERIALIZED_NAME_CIPHERS = "ciphers";
  @SerializedName(SERIALIZED_NAME_CIPHERS)
  private List<String> ciphers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_AUTH_ENABLED = "clientAuthEnabled";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTH_ENABLED)
  private Boolean clientAuthEnabled;

  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private GoogleCloudApigeeV1TlsInfoCommonName commonName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IGNORE_VALIDATION_ERRORS = "ignoreValidationErrors";
  @SerializedName(SERIALIZED_NAME_IGNORE_VALIDATION_ERRORS)
  private Boolean ignoreValidationErrors;

  public static final String SERIALIZED_NAME_KEY_ALIAS = "keyAlias";
  @SerializedName(SERIALIZED_NAME_KEY_ALIAS)
  private String keyAlias;

  public static final String SERIALIZED_NAME_KEY_STORE = "keyStore";
  @SerializedName(SERIALIZED_NAME_KEY_STORE)
  private String keyStore;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<String> protocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRUST_STORE = "trustStore";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE)
  private String trustStore;

  public GoogleCloudApigeeV1TlsInfo() {
  }

  public GoogleCloudApigeeV1TlsInfo ciphers(List<String> ciphers) {
    this.ciphers = ciphers;
    return this;
  }

  public GoogleCloudApigeeV1TlsInfo addCiphersItem(String ciphersItem) {
    if (this.ciphers == null) {
      this.ciphers = new ArrayList<>();
    }
    this.ciphers.add(ciphersItem);
    return this;
  }

  /**
   * The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.
   * @return ciphers
   */
  @javax.annotation.Nullable
  public List<String> getCiphers() {
    return ciphers;
  }

  public void setCiphers(List<String> ciphers) {
    this.ciphers = ciphers;
  }


  public GoogleCloudApigeeV1TlsInfo clientAuthEnabled(Boolean clientAuthEnabled) {
    this.clientAuthEnabled = clientAuthEnabled;
    return this;
  }

  /**
   * Optional. Enables two-way TLS.
   * @return clientAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClientAuthEnabled() {
    return clientAuthEnabled;
  }

  public void setClientAuthEnabled(Boolean clientAuthEnabled) {
    this.clientAuthEnabled = clientAuthEnabled;
  }


  public GoogleCloudApigeeV1TlsInfo commonName(GoogleCloudApigeeV1TlsInfoCommonName commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public GoogleCloudApigeeV1TlsInfoCommonName getCommonName() {
    return commonName;
  }

  public void setCommonName(GoogleCloudApigeeV1TlsInfoCommonName commonName) {
    this.commonName = commonName;
  }


  public GoogleCloudApigeeV1TlsInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Required. Enables TLS. If false, neither one-way nor two-way TLS will be enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GoogleCloudApigeeV1TlsInfo ignoreValidationErrors(Boolean ignoreValidationErrors) {
    this.ignoreValidationErrors = ignoreValidationErrors;
    return this;
  }

  /**
   * If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
   * @return ignoreValidationErrors
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreValidationErrors() {
    return ignoreValidationErrors;
  }

  public void setIgnoreValidationErrors(Boolean ignoreValidationErrors) {
    this.ignoreValidationErrors = ignoreValidationErrors;
  }


  public GoogleCloudApigeeV1TlsInfo keyAlias(String keyAlias) {
    this.keyAlias = keyAlias;
    return this;
  }

  /**
   * Required if &#x60;client_auth_enabled&#x60; is true. The resource ID for the alias containing the private key and cert.
   * @return keyAlias
   */
  @javax.annotation.Nullable
  public String getKeyAlias() {
    return keyAlias;
  }

  public void setKeyAlias(String keyAlias) {
    this.keyAlias = keyAlias;
  }


  public GoogleCloudApigeeV1TlsInfo keyStore(String keyStore) {
    this.keyStore = keyStore;
    return this;
  }

  /**
   * Required if &#x60;client_auth_enabled&#x60; is true. The resource ID of the keystore.
   * @return keyStore
   */
  @javax.annotation.Nullable
  public String getKeyStore() {
    return keyStore;
  }

  public void setKeyStore(String keyStore) {
    this.keyStore = keyStore;
  }


  public GoogleCloudApigeeV1TlsInfo protocols(List<String> protocols) {
    this.protocols = protocols;
    return this;
  }

  public GoogleCloudApigeeV1TlsInfo addProtocolsItem(String protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * The TLS versioins to be used.
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<String> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<String> protocols) {
    this.protocols = protocols;
  }


  public GoogleCloudApigeeV1TlsInfo trustStore(String trustStore) {
    this.trustStore = trustStore;
    return this;
  }

  /**
   * The resource ID of the truststore.
   * @return trustStore
   */
  @javax.annotation.Nullable
  public String getTrustStore() {
    return trustStore;
  }

  public void setTrustStore(String trustStore) {
    this.trustStore = trustStore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1TlsInfo googleCloudApigeeV1TlsInfo = (GoogleCloudApigeeV1TlsInfo) o;
    return Objects.equals(this.ciphers, googleCloudApigeeV1TlsInfo.ciphers) &&
        Objects.equals(this.clientAuthEnabled, googleCloudApigeeV1TlsInfo.clientAuthEnabled) &&
        Objects.equals(this.commonName, googleCloudApigeeV1TlsInfo.commonName) &&
        Objects.equals(this.enabled, googleCloudApigeeV1TlsInfo.enabled) &&
        Objects.equals(this.ignoreValidationErrors, googleCloudApigeeV1TlsInfo.ignoreValidationErrors) &&
        Objects.equals(this.keyAlias, googleCloudApigeeV1TlsInfo.keyAlias) &&
        Objects.equals(this.keyStore, googleCloudApigeeV1TlsInfo.keyStore) &&
        Objects.equals(this.protocols, googleCloudApigeeV1TlsInfo.protocols) &&
        Objects.equals(this.trustStore, googleCloudApigeeV1TlsInfo.trustStore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciphers, clientAuthEnabled, commonName, enabled, ignoreValidationErrors, keyAlias, keyStore, protocols, trustStore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1TlsInfo {\n");
    sb.append("    ciphers: ").append(toIndentedString(ciphers)).append("\n");
    sb.append("    clientAuthEnabled: ").append(toIndentedString(clientAuthEnabled)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ignoreValidationErrors: ").append(toIndentedString(ignoreValidationErrors)).append("\n");
    sb.append("    keyAlias: ").append(toIndentedString(keyAlias)).append("\n");
    sb.append("    keyStore: ").append(toIndentedString(keyStore)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    trustStore: ").append(toIndentedString(trustStore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciphers");
    openapiFields.add("clientAuthEnabled");
    openapiFields.add("commonName");
    openapiFields.add("enabled");
    openapiFields.add("ignoreValidationErrors");
    openapiFields.add("keyAlias");
    openapiFields.add("keyStore");
    openapiFields.add("protocols");
    openapiFields.add("trustStore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1TlsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1TlsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1TlsInfo is not found in the empty JSON string", GoogleCloudApigeeV1TlsInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1TlsInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1TlsInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ciphers") != null && !jsonObj.get("ciphers").isJsonNull() && !jsonObj.get("ciphers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphers` to be an array in the JSON string but got `%s`", jsonObj.get("ciphers").toString()));
      }
      // validate the optional field `commonName`
      if (jsonObj.get("commonName") != null && !jsonObj.get("commonName").isJsonNull()) {
        GoogleCloudApigeeV1TlsInfoCommonName.validateJsonElement(jsonObj.get("commonName"));
      }
      if ((jsonObj.get("keyAlias") != null && !jsonObj.get("keyAlias").isJsonNull()) && !jsonObj.get("keyAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyAlias").toString()));
      }
      if ((jsonObj.get("keyStore") != null && !jsonObj.get("keyStore").isJsonNull()) && !jsonObj.get("keyStore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStore").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull() && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      if ((jsonObj.get("trustStore") != null && !jsonObj.get("trustStore").isJsonNull()) && !jsonObj.get("trustStore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStore").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1TlsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1TlsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1TlsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1TlsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1TlsInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1TlsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1TlsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1TlsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1TlsInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1TlsInfo
   */
  public static GoogleCloudApigeeV1TlsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1TlsInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1TlsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

