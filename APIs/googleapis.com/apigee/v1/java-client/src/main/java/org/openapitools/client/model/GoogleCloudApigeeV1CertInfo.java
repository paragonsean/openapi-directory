/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * X.509 certificate as defined in RFC 5280.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1CertInfo {
  public static final String SERIALIZED_NAME_BASIC_CONSTRAINTS = "basicConstraints";
  @SerializedName(SERIALIZED_NAME_BASIC_CONSTRAINTS)
  private String basicConstraints;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private String isValid;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIG_ALG_NAME = "sigAlgName";
  @SerializedName(SERIALIZED_NAME_SIG_ALG_NAME)
  private String sigAlgName;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "subjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private List<String> subjectAlternativeNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private String validFrom;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public GoogleCloudApigeeV1CertInfo() {
  }

  public GoogleCloudApigeeV1CertInfo basicConstraints(String basicConstraints) {
    this.basicConstraints = basicConstraints;
    return this;
  }

  /**
   * X.509 basic constraints extension.
   * @return basicConstraints
   */
  @javax.annotation.Nullable
  public String getBasicConstraints() {
    return basicConstraints;
  }

  public void setBasicConstraints(String basicConstraints) {
    this.basicConstraints = basicConstraints;
  }


  public GoogleCloudApigeeV1CertInfo expiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * X.509 &#x60;notAfter&#x60; validity period in milliseconds since epoch.
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public String getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  public GoogleCloudApigeeV1CertInfo isValid(String isValid) {
    this.isValid = isValid;
    return this;
  }

  /**
   * Flag that specifies whether the certificate is valid. Flag is set to &#x60;Yes&#x60; if the certificate is valid, &#x60;No&#x60; if expired, or &#x60;Not yet&#x60; if not yet valid.
   * @return isValid
   */
  @javax.annotation.Nullable
  public String getIsValid() {
    return isValid;
  }

  public void setIsValid(String isValid) {
    this.isValid = isValid;
  }


  public GoogleCloudApigeeV1CertInfo issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * X.509 issuer.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public GoogleCloudApigeeV1CertInfo publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Public key component of the X.509 subject public key info.
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public GoogleCloudApigeeV1CertInfo serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * X.509 serial number.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public GoogleCloudApigeeV1CertInfo sigAlgName(String sigAlgName) {
    this.sigAlgName = sigAlgName;
    return this;
  }

  /**
   * X.509 signatureAlgorithm.
   * @return sigAlgName
   */
  @javax.annotation.Nullable
  public String getSigAlgName() {
    return sigAlgName;
  }

  public void setSigAlgName(String sigAlgName) {
    this.sigAlgName = sigAlgName;
  }


  public GoogleCloudApigeeV1CertInfo subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * X.509 subject.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public GoogleCloudApigeeV1CertInfo subjectAlternativeNames(List<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public GoogleCloudApigeeV1CertInfo addSubjectAlternativeNamesItem(String subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new ArrayList<>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

  /**
   * X.509 subject alternative names (SANs) extension.
   * @return subjectAlternativeNames
   */
  @javax.annotation.Nullable
  public List<String> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(List<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }


  public GoogleCloudApigeeV1CertInfo validFrom(String validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * X.509 &#x60;notBefore&#x60; validity period in milliseconds since epoch.
   * @return validFrom
   */
  @javax.annotation.Nullable
  public String getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(String validFrom) {
    this.validFrom = validFrom;
  }


  public GoogleCloudApigeeV1CertInfo version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * X.509 version.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1CertInfo googleCloudApigeeV1CertInfo = (GoogleCloudApigeeV1CertInfo) o;
    return Objects.equals(this.basicConstraints, googleCloudApigeeV1CertInfo.basicConstraints) &&
        Objects.equals(this.expiryDate, googleCloudApigeeV1CertInfo.expiryDate) &&
        Objects.equals(this.isValid, googleCloudApigeeV1CertInfo.isValid) &&
        Objects.equals(this.issuer, googleCloudApigeeV1CertInfo.issuer) &&
        Objects.equals(this.publicKey, googleCloudApigeeV1CertInfo.publicKey) &&
        Objects.equals(this.serialNumber, googleCloudApigeeV1CertInfo.serialNumber) &&
        Objects.equals(this.sigAlgName, googleCloudApigeeV1CertInfo.sigAlgName) &&
        Objects.equals(this.subject, googleCloudApigeeV1CertInfo.subject) &&
        Objects.equals(this.subjectAlternativeNames, googleCloudApigeeV1CertInfo.subjectAlternativeNames) &&
        Objects.equals(this.validFrom, googleCloudApigeeV1CertInfo.validFrom) &&
        Objects.equals(this.version, googleCloudApigeeV1CertInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicConstraints, expiryDate, isValid, issuer, publicKey, serialNumber, sigAlgName, subject, subjectAlternativeNames, validFrom, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1CertInfo {\n");
    sb.append("    basicConstraints: ").append(toIndentedString(basicConstraints)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    sigAlgName: ").append(toIndentedString(sigAlgName)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basicConstraints");
    openapiFields.add("expiryDate");
    openapiFields.add("isValid");
    openapiFields.add("issuer");
    openapiFields.add("publicKey");
    openapiFields.add("serialNumber");
    openapiFields.add("sigAlgName");
    openapiFields.add("subject");
    openapiFields.add("subjectAlternativeNames");
    openapiFields.add("validFrom");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1CertInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1CertInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1CertInfo is not found in the empty JSON string", GoogleCloudApigeeV1CertInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1CertInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1CertInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basicConstraints") != null && !jsonObj.get("basicConstraints").isJsonNull()) && !jsonObj.get("basicConstraints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basicConstraints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basicConstraints").toString()));
      }
      if ((jsonObj.get("expiryDate") != null && !jsonObj.get("expiryDate").isJsonNull()) && !jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
      if ((jsonObj.get("isValid") != null && !jsonObj.get("isValid").isJsonNull()) && !jsonObj.get("isValid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isValid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isValid").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) && !jsonObj.get("publicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKey").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("sigAlgName") != null && !jsonObj.get("sigAlgName").isJsonNull()) && !jsonObj.get("sigAlgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sigAlgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sigAlgName").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectAlternativeNames") != null && !jsonObj.get("subjectAlternativeNames").isJsonNull() && !jsonObj.get("subjectAlternativeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectAlternativeNames` to be an array in the JSON string but got `%s`", jsonObj.get("subjectAlternativeNames").toString()));
      }
      if ((jsonObj.get("validFrom") != null && !jsonObj.get("validFrom").isJsonNull()) && !jsonObj.get("validFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validFrom").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1CertInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1CertInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1CertInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1CertInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1CertInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1CertInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1CertInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1CertInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1CertInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1CertInfo
   */
  public static GoogleCloudApigeeV1CertInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1CertInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1CertInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

