/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Apigee endpoint attachment. For more information, see [Southbound networking patterns] (https://cloud.google.com/apigee/docs/api-platform/architecture/southbound-networking-patterns-endpoints).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1EndpointAttachment {
  /**
   * Output only. State of the endpoint attachment connection to the service attachment.
   */
  @JsonAdapter(ConnectionStateEnum.Adapter.class)
  public enum ConnectionStateEnum {
    CONNECTION_STATE_UNSPECIFIED("CONNECTION_STATE_UNSPECIFIED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    PENDING("PENDING"),
    
    ACCEPTED("ACCEPTED"),
    
    REJECTED("REJECTED"),
    
    CLOSED("CLOSED"),
    
    FROZEN("FROZEN"),
    
    NEEDS_ATTENTION("NEEDS_ATTENTION");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStateEnum fromValue(String value) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "connectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private ConnectionStateEnum connectionState;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_ATTACHMENT = "serviceAttachment";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTACHMENT)
  private String serviceAttachment;

  /**
   * Output only. State of the endpoint attachment. Values other than &#x60;ACTIVE&#x60; mean the resource is not ready to use.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleCloudApigeeV1EndpointAttachment() {
  }

  public GoogleCloudApigeeV1EndpointAttachment(
     ConnectionStateEnum connectionState, 
     String host, 
     StateEnum state
  ) {
    this();
    this.connectionState = connectionState;
    this.host = host;
    this.state = state;
  }

  /**
   * Output only. State of the endpoint attachment connection to the service attachment.
   * @return connectionState
   */
  @javax.annotation.Nullable
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }



  /**
   * Output only. Host that can be used in either the HTTP target endpoint directly or as the host in target server.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }



  public GoogleCloudApigeeV1EndpointAttachment location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Required. Location of the endpoint attachment.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public GoogleCloudApigeeV1EndpointAttachment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the endpoint attachment. Use the following structure in your request: &#x60;organizations/{org}/endpointAttachments/{endpoint_attachment}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudApigeeV1EndpointAttachment serviceAttachment(String serviceAttachment) {
    this.serviceAttachment = serviceAttachment;
    return this;
  }

  /**
   * Format: projects/_*_/regions/_*_/serviceAttachments/_*
   * @return serviceAttachment
   */
  @javax.annotation.Nullable
  public String getServiceAttachment() {
    return serviceAttachment;
  }

  public void setServiceAttachment(String serviceAttachment) {
    this.serviceAttachment = serviceAttachment;
  }


  /**
   * Output only. State of the endpoint attachment. Values other than &#x60;ACTIVE&#x60; mean the resource is not ready to use.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1EndpointAttachment googleCloudApigeeV1EndpointAttachment = (GoogleCloudApigeeV1EndpointAttachment) o;
    return Objects.equals(this.connectionState, googleCloudApigeeV1EndpointAttachment.connectionState) &&
        Objects.equals(this.host, googleCloudApigeeV1EndpointAttachment.host) &&
        Objects.equals(this.location, googleCloudApigeeV1EndpointAttachment.location) &&
        Objects.equals(this.name, googleCloudApigeeV1EndpointAttachment.name) &&
        Objects.equals(this.serviceAttachment, googleCloudApigeeV1EndpointAttachment.serviceAttachment) &&
        Objects.equals(this.state, googleCloudApigeeV1EndpointAttachment.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionState, host, location, name, serviceAttachment, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1EndpointAttachment {\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceAttachment: ").append(toIndentedString(serviceAttachment)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionState");
    openapiFields.add("host");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("serviceAttachment");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1EndpointAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1EndpointAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1EndpointAttachment is not found in the empty JSON string", GoogleCloudApigeeV1EndpointAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1EndpointAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1EndpointAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) && !jsonObj.get("connectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionState").toString()));
      }
      // validate the optional field `connectionState`
      if (jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) {
        ConnectionStateEnum.validateJsonElement(jsonObj.get("connectionState"));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serviceAttachment") != null && !jsonObj.get("serviceAttachment").isJsonNull()) && !jsonObj.get("serviceAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAttachment").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1EndpointAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1EndpointAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1EndpointAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1EndpointAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1EndpointAttachment>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1EndpointAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1EndpointAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1EndpointAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1EndpointAttachment
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1EndpointAttachment
   */
  public static GoogleCloudApigeeV1EndpointAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1EndpointAttachment.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1EndpointAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

