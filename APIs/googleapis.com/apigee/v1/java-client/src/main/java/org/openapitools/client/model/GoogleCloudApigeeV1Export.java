/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an export job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:08.695175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudApigeeV1Export {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DATASTORE_NAME = "datastoreName";
  @SerializedName(SERIALIZED_NAME_DATASTORE_NAME)
  private String datastoreName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_EXECUTION_TIME = "executionTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME)
  private String executionTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public GoogleCloudApigeeV1Export() {
  }

  public GoogleCloudApigeeV1Export(
     String created, 
     String error, 
     String executionTime, 
     String self, 
     String state, 
     String updated
  ) {
    this();
    this.created = created;
    this.error = error;
    this.executionTime = executionTime;
    this.self = self;
    this.state = state;
    this.updated = updated;
  }

  /**
   * Output only. Time the export job was created.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }



  public GoogleCloudApigeeV1Export datastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
    return this;
  }

  /**
   * Name of the datastore that is the destination of the export job [datastore]
   * @return datastoreName
   */
  @javax.annotation.Nullable
  public String getDatastoreName() {
    return datastoreName;
  }

  public void setDatastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
  }


  public GoogleCloudApigeeV1Export description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the export job.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. Error is set when export fails
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }



  /**
   * Output only. Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since&#x60;created&#x60;, in seconds. Else, it will set to (&#x60;updated&#x60; - &#x60;created&#x60;), in seconds.
   * @return executionTime
   */
  @javax.annotation.Nullable
  public String getExecutionTime() {
    return executionTime;
  }



  public GoogleCloudApigeeV1Export name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of the export job.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: &#x60;/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd&#x60;
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }



  /**
   * Output only. Status of the export job. Valid values include &#x60;enqueued&#x60;, &#x60;running&#x60;, &#x60;completed&#x60;, and &#x60;failed&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  /**
   * Output only. Time the export job was last updated.
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudApigeeV1Export googleCloudApigeeV1Export = (GoogleCloudApigeeV1Export) o;
    return Objects.equals(this.created, googleCloudApigeeV1Export.created) &&
        Objects.equals(this.datastoreName, googleCloudApigeeV1Export.datastoreName) &&
        Objects.equals(this.description, googleCloudApigeeV1Export.description) &&
        Objects.equals(this.error, googleCloudApigeeV1Export.error) &&
        Objects.equals(this.executionTime, googleCloudApigeeV1Export.executionTime) &&
        Objects.equals(this.name, googleCloudApigeeV1Export.name) &&
        Objects.equals(this.self, googleCloudApigeeV1Export.self) &&
        Objects.equals(this.state, googleCloudApigeeV1Export.state) &&
        Objects.equals(this.updated, googleCloudApigeeV1Export.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, datastoreName, description, error, executionTime, name, self, state, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudApigeeV1Export {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    datastoreName: ").append(toIndentedString(datastoreName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("datastoreName");
    openapiFields.add("description");
    openapiFields.add("error");
    openapiFields.add("executionTime");
    openapiFields.add("name");
    openapiFields.add("self");
    openapiFields.add("state");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudApigeeV1Export
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudApigeeV1Export.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudApigeeV1Export is not found in the empty JSON string", GoogleCloudApigeeV1Export.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudApigeeV1Export.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudApigeeV1Export` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("datastoreName") != null && !jsonObj.get("datastoreName").isJsonNull()) && !jsonObj.get("datastoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastoreName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("executionTime") != null && !jsonObj.get("executionTime").isJsonNull()) && !jsonObj.get("executionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudApigeeV1Export.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudApigeeV1Export' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudApigeeV1Export> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudApigeeV1Export.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudApigeeV1Export>() {
           @Override
           public void write(JsonWriter out, GoogleCloudApigeeV1Export value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudApigeeV1Export read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudApigeeV1Export given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudApigeeV1Export
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudApigeeV1Export
   */
  public static GoogleCloudApigeeV1Export fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudApigeeV1Export.class);
  }

  /**
   * Convert an instance of GoogleCloudApigeeV1Export to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

