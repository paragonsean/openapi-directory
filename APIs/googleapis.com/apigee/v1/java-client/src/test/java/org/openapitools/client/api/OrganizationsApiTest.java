/*
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleApiHttpBody;
import org.openapitools.client.model.GoogleCloudApigeeV1AdjustDeveloperBalanceRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1Alias;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiCategory;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiCategoryResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiDoc;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiDocDocumentation;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiDocDocumentationResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiDocResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiProduct;
import org.openapitools.client.model.GoogleCloudApigeeV1ApiProxyRevision;
import org.openapitools.client.model.GoogleCloudApigeeV1AppGroup;
import org.openapitools.client.model.GoogleCloudApigeeV1ArchiveDeployment;
import org.openapitools.client.model.GoogleCloudApigeeV1AsyncQuery;
import org.openapitools.client.model.GoogleCloudApigeeV1Attributes;
import org.openapitools.client.model.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1CanaryEvaluation;
import org.openapitools.client.model.GoogleCloudApigeeV1ComputeEnvironmentScoresRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1ComputeEnvironmentScoresResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1CreditDeveloperBalanceRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1CustomReport;
import org.openapitools.client.model.GoogleCloudApigeeV1DataCollector;
import org.openapitools.client.model.GoogleCloudApigeeV1Datastore;
import org.openapitools.client.model.GoogleCloudApigeeV1DebugSession;
import org.openapitools.client.model.GoogleCloudApigeeV1DeleteResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1Deployment;
import org.openapitools.client.model.GoogleCloudApigeeV1DeploymentChangeReport;
import org.openapitools.client.model.GoogleCloudApigeeV1Developer;
import org.openapitools.client.model.GoogleCloudApigeeV1DeveloperApp;
import org.openapitools.client.model.GoogleCloudApigeeV1DeveloperAppKey;
import org.openapitools.client.model.GoogleCloudApigeeV1DeveloperBalance;
import org.openapitools.client.model.GoogleCloudApigeeV1DeveloperSubscription;
import org.openapitools.client.model.GoogleCloudApigeeV1EndpointAttachment;
import org.openapitools.client.model.GoogleCloudApigeeV1EnvironmentGroup;
import org.openapitools.client.model.GoogleCloudApigeeV1Export;
import org.openapitools.client.model.GoogleCloudApigeeV1ExportRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1GenerateDownloadUrlResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1GenerateUploadUrlResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1Instance;
import org.openapitools.client.model.GoogleCloudApigeeV1InstanceAttachment;
import org.openapitools.client.model.GoogleCloudApigeeV1KeyValueEntry;
import org.openapitools.client.model.GoogleCloudApigeeV1KeyValueMap;
import org.openapitools.client.model.GoogleCloudApigeeV1Keystore;
import org.openapitools.client.model.GoogleCloudApigeeV1ListApiCategoriesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListApiDocsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListApiProductsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListApiProxiesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListAppGroupsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListArchiveDeploymentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListAsyncQueriesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListCustomReportsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDataCollectorsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDatastoresResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDebugSessionsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDeploymentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDeveloperAppsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListEndpointAttachmentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListEnvironmentGroupsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListEnvironmentResourcesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListExportsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListInstanceAttachmentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListInstancesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListKeyValueEntriesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListNatAddressesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListOfDevelopersResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListOrganizationsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListRatePlansResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSecurityActionsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSecurityIncidentsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSecurityProfilesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSecurityReportsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListSharedFlowsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1ListTraceConfigOverridesResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1NatAddress;
import org.openapitools.client.model.GoogleCloudApigeeV1Organization;
import org.openapitools.client.model.GoogleCloudApigeeV1OrganizationProjectMapping;
import org.openapitools.client.model.GoogleCloudApigeeV1Query;
import org.openapitools.client.model.GoogleCloudApigeeV1QueryTabularStatsRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1QueryTabularStatsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1QueryTimeSeriesStatsRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1QueryTimeSeriesStatsResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1RatePlan;
import org.openapitools.client.model.GoogleCloudApigeeV1Reference;
import org.openapitools.client.model.GoogleCloudApigeeV1ReportInstanceStatusRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1ResourceFile;
import org.openapitools.client.model.GoogleCloudApigeeV1SecurityAction;
import org.openapitools.client.model.GoogleCloudApigeeV1SecurityProfile;
import org.openapitools.client.model.GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation;
import org.openapitools.client.model.GoogleCloudApigeeV1SecurityReport;
import org.openapitools.client.model.GoogleCloudApigeeV1SecurityReportQuery;
import org.openapitools.client.model.GoogleCloudApigeeV1SetAddonEnablementRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1SetAddonsRequest;
import org.openapitools.client.model.GoogleCloudApigeeV1SharedFlowRevision;
import org.openapitools.client.model.GoogleCloudApigeeV1Subscription;
import org.openapitools.client.model.GoogleCloudApigeeV1SyncAuthorization;
import org.openapitools.client.model.GoogleCloudApigeeV1TargetServer;
import org.openapitools.client.model.GoogleCloudApigeeV1TestDatastoreResponse;
import org.openapitools.client.model.GoogleCloudApigeeV1TraceConfigOverride;
import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Create a Datastore for an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsAnalyticsDatastoresCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Datastore googleCloudApigeeV1Datastore = null;
        GoogleCloudApigeeV1Datastore response = api.apigeeOrganizationsAnalyticsDatastoresCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Datastore);
        // TODO: test validations
    }

    /**
     * List Datastores
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsAnalyticsDatastoresListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String targetType = null;
        GoogleCloudApigeeV1ListDatastoresResponse response = api.apigeeOrganizationsAnalyticsDatastoresList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, targetType);
        // TODO: test validations
    }

    /**
     * Test if Datastore configuration is correct. This includes checking if credentials provided by customer have required permissions in target destination storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsAnalyticsDatastoresTestTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Datastore googleCloudApigeeV1Datastore = null;
        GoogleCloudApigeeV1TestDatastoreResponse response = api.apigeeOrganizationsAnalyticsDatastoresTest(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Datastore);
        // TODO: test validations
    }

    /**
     * Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include: - Scope - Environments - API proxies - Extensible profile API products enable you repackage APIs on the fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs. After you have authentication and authorization working against a simple API product, you can iterate to create finer-grained API products, defining different sets of API resources for each API product. **WARNING:** - If you don&#39;t specify an API proxy in the request body, *any* app associated with the product can make calls to *any* API in your entire organization. - If you don&#39;t specify an environment in the request body, the product allows access to all environments. For more information, see What is an API product?
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApiproductsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ApiProduct googleCloudApigeeV1ApiProduct = null;
        GoogleCloudApigeeV1ApiProduct response = api.apigeeOrganizationsApiproductsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ApiProduct);
        // TODO: test validations
    }

    /**
     * Lists all API product names for an organization. Filter the list by passing an &#x60;attributename&#x60; and &#x60;attibutevalue&#x60;. The maximum number of API products returned is 1000. You can paginate the list of API products returned using the &#x60;startKey&#x60; and &#x60;count&#x60; query parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApiproductsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String attributename = null;
        String attributevalue = null;
        String count = null;
        Boolean expand = null;
        String startKey = null;
        GoogleCloudApigeeV1ListApiProductsResponse response = api.apigeeOrganizationsApiproductsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, attributename, attributevalue, count, expand, startKey);
        // TODO: test validations
    }

    /**
     * Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer&#39;s perspective, they purchase API products not rate plans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApiproductsRateplansCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1RatePlan googleCloudApigeeV1RatePlan = null;
        GoogleCloudApigeeV1RatePlan response = api.apigeeOrganizationsApiproductsRateplansCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1RatePlan);
        // TODO: test validations
    }

    /**
     * Lists all the rate plans for an API product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApiproductsRateplansListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer count = null;
        Boolean expand = null;
        String orderBy = null;
        String startKey = null;
        String state = null;
        GoogleCloudApigeeV1ListRatePlansResponse response = api.apigeeOrganizationsApiproductsRateplansList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, count, expand, orderBy, startKey, state);
        // TODO: test validations
    }

    /**
     * Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the &#x60;name&#x60; query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the &#x60;name&#x60; query parameter to the name of the API proxy. * Set the &#x60;action&#x60; query parameter to &#x60;import&#x60;. * Set the &#x60;Content-Type&#x60; header to &#x60;multipart/form-data&#x60;. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the &#x60;file&#x60; form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the &#x60;action&#x60; query parameter to &#x60;validate&#x60;. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApisCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String action = null;
        String name = null;
        Boolean validate = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1ApiProxyRevision response = api.apigeeOrganizationsApisCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, action, name, validate, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * Lists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsApisListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeMetaData = null;
        Boolean includeRevisions = null;
        GoogleCloudApigeeV1ListApiProxiesResponse response = api.apigeeOrganizationsApisList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeMetaData, includeRevisions);
        // TODO: test validations
    }

    /**
     * Creates an AppGroup. Once created, user can register apps under the AppGroup to obtain secret key and password. At creation time, the AppGroup&#39;s state is set as &#x60;active&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsAppgroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1AppGroup googleCloudApigeeV1AppGroup = null;
        GoogleCloudApigeeV1AppGroup response = api.apigeeOrganizationsAppgroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1AppGroup);
        // TODO: test validations
    }

    /**
     * Lists all AppGroups in an organization. A maximum of 1000 AppGroups are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsAppgroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListAppGroupsResponse response = api.apigeeOrganizationsAppgroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an Apigee organization. See [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        GoogleCloudApigeeV1Organization googleCloudApigeeV1Organization = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent, googleCloudApigeeV1Organization);
        // TODO: test validations
    }

    /**
     * Creates a new data collector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDatacollectorsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataCollectorId = null;
        GoogleCloudApigeeV1DataCollector googleCloudApigeeV1DataCollector = null;
        GoogleCloudApigeeV1DataCollector response = api.apigeeOrganizationsDatacollectorsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataCollectorId, googleCloudApigeeV1DataCollector);
        // TODO: test validations
    }

    /**
     * Lists all data collectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDatacollectorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListDataCollectorsResponse response = api.apigeeOrganizationsDatacollectorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates attributes for a developer app. This API replaces the current attributes with those specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAppsAttributesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Attributes googleCloudApigeeV1Attributes = null;
        GoogleCloudApigeeV1Attributes response = api.apigeeOrganizationsDevelopersAppsAttributes(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Attributes);
        // TODO: test validations
    }

    /**
     * Creates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The &#x60;name&#x60; is the unique ID of the app that you can use in API calls. The &#x60;DisplayName&#x60; (set as an attribute) appears in the UI. If you don&#39;t set the &#x60;DisplayName&#x60; attribute, the &#x60;name&#x60; appears in the UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAppsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1DeveloperApp googleCloudApigeeV1DeveloperApp = null;
        GoogleCloudApigeeV1DeveloperApp response = api.apigeeOrganizationsDevelopersAppsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1DeveloperApp);
        // TODO: test validations
    }

    /**
     * Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status&#x3D;approved, even if status&#x3D;revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAppsKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1DeveloperAppKey googleCloudApigeeV1DeveloperAppKey = null;
        GoogleCloudApigeeV1DeveloperAppKey response = api.apigeeOrganizationsDevelopersAppsKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1DeveloperAppKey);
        // TODO: test validations
    }

    /**
     * Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status&#x3D;approved, even if status&#x3D;revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAppsKeysCreateCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1DeveloperAppKey googleCloudApigeeV1DeveloperAppKey = null;
        GoogleCloudApigeeV1DeveloperAppKey response = api.apigeeOrganizationsDevelopersAppsKeysCreateCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1DeveloperAppKey);
        // TODO: test validations
    }

    /**
     * Lists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps. A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the &#x60;startKey&#x60; and &#x60;count&#x60; query parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAppsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String count = null;
        Boolean expand = null;
        Boolean shallowExpand = null;
        String startKey = null;
        String ids = null;
        Boolean includeCred = null;
        String keyStatus = null;
        Integer pageSize = null;
        String pageToken = null;
        String rows = null;
        String status = null;
        GoogleCloudApigeeV1ListDeveloperAppsResponse response = api.apigeeOrganizationsDevelopersAppsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, count, expand, shallowExpand, startKey, ids, includeCred, keyStatus, pageSize, pageToken, rows, status);
        // TODO: test validations
    }

    /**
     * Updates developer attributes. This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an &#x60;ExpiresIn&#x60; element on the OAuthV2 policy won&#39;t be able to expire an access token in less than 180 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAttributesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Attributes googleCloudApigeeV1Attributes = null;
        GoogleCloudApigeeV1Attributes response = api.apigeeOrganizationsDevelopersAttributes(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Attributes);
        // TODO: test validations
    }

    /**
     * Returns a list of all developer attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersAttributesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Attributes response = api.apigeeOrganizationsDevelopersAttributesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Adjust the prepaid balance for the developer. This API will be used in scenarios where the developer has been under-charged or over-charged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersBalanceAdjustTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1AdjustDeveloperBalanceRequest googleCloudApigeeV1AdjustDeveloperBalanceRequest = null;
        GoogleCloudApigeeV1DeveloperBalance response = api.apigeeOrganizationsDevelopersBalanceAdjust(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1AdjustDeveloperBalanceRequest);
        // TODO: test validations
    }

    /**
     * Credits the account balance for the developer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersBalanceCreditTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1CreditDeveloperBalanceRequest googleCloudApigeeV1CreditDeveloperBalanceRequest = null;
        GoogleCloudApigeeV1DeveloperBalance response = api.apigeeOrganizationsDevelopersBalanceCredit(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1CreditDeveloperBalanceRequest);
        // TODO: test validations
    }

    /**
     * Creates a developer. Once created, the developer can register an app and obtain an API key. At creation time, a developer is set as &#x60;active&#x60;. To change the developer status, use the SetDeveloperStatus API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Developer googleCloudApigeeV1Developer = null;
        GoogleCloudApigeeV1Developer response = api.apigeeOrganizationsDevelopersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Developer);
        // TODO: test validations
    }

    /**
     * Lists all developers in an organization by email address. By default, the response does not include company developers. Set the &#x60;includeCompany&#x60; query parameter to &#x60;true&#x60; to include company developers. **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the &#x60;startKey&#x60; and &#x60;count&#x60; query parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String app = null;
        String count = null;
        Boolean expand = null;
        String ids = null;
        Boolean includeCompany = null;
        String startKey = null;
        GoogleCloudApigeeV1ListOfDevelopersResponse response = api.apigeeOrganizationsDevelopersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, app, count, expand, ids, includeCompany, startKey);
        // TODO: test validations
    }

    /**
     * Creates a subscription to an API product. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersSubscriptionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1DeveloperSubscription googleCloudApigeeV1DeveloperSubscription = null;
        GoogleCloudApigeeV1DeveloperSubscription response = api.apigeeOrganizationsDevelopersSubscriptionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1DeveloperSubscription);
        // TODO: test validations
    }

    /**
     * Expires an API product subscription immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersSubscriptionsExpireTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1DeveloperSubscription response = api.apigeeOrganizationsDevelopersSubscriptionsExpire(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists all API product subscriptions for a developer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsDevelopersSubscriptionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer count = null;
        String startKey = null;
        GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse response = api.apigeeOrganizationsDevelopersSubscriptionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, count, startKey);
        // TODO: test validations
    }

    /**
     * Creates an endpoint attachment. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEndpointAttachmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endpointAttachmentId = null;
        GoogleCloudApigeeV1EndpointAttachment googleCloudApigeeV1EndpointAttachment = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsEndpointAttachmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endpointAttachmentId, googleCloudApigeeV1EndpointAttachment);
        // TODO: test validations
    }

    /**
     * Lists the endpoint attachments in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEndpointAttachmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListEndpointAttachmentsResponse response = api.apigeeOrganizationsEndpointAttachmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new environment group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvgroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        GoogleCloudApigeeV1EnvironmentGroup googleCloudApigeeV1EnvironmentGroup = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsEnvgroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, googleCloudApigeeV1EnvironmentGroup);
        // TODO: test validations
    }

    /**
     * Lists all environment groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvgroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListEnvironmentGroupsResponse response = api.apigeeOrganizationsEnvgroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an add-on enablement status of an environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsAddonsConfigSetAddonEnablementTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1SetAddonEnablementRequest googleCloudApigeeV1SetAddonEnablementRequest = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsEnvironmentsAddonsConfigSetAddonEnablement(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1SetAddonEnablementRequest);
        // TODO: test validations
    }

    /**
     * Submit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the &#x60;state&#x60; value of \&quot;enqueued\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsAnalyticsExportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ExportRequest googleCloudApigeeV1ExportRequest = null;
        GoogleCloudApigeeV1Export response = api.apigeeOrganizationsEnvironmentsAnalyticsExportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ExportRequest);
        // TODO: test validations
    }

    /**
     * Lists the details and status of all analytics export jobs belonging to the parent organization and environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsAnalyticsExportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ListExportsResponse response = api.apigeeOrganizationsEnvironmentsAnalyticsExportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a debug session for a deployed API Proxy revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String timeout = null;
        GoogleCloudApigeeV1DebugSession googleCloudApigeeV1DebugSession = null;
        GoogleCloudApigeeV1DebugSession response = api.apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, timeout, googleCloudApigeeV1DebugSession);
        // TODO: test validations
    }

    /**
     * Deletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsDeleteDataTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsDeleteData(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists debug sessions that are currently active in the given API Proxy revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListDebugSessionsResponse response = api.apigeeOrganizationsEnvironmentsApisRevisionsDebugsessionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Generates a report for a dry run analysis of a DeployApiProxy request without committing the deployment. In addition to the standard validations performed when adding deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being created. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run DeployApiProxy request. For a request path &#x60;organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateDeployChangeReport&#x60;, two permissions are required: * &#x60;apigee.deployments.create&#x60; on the resource &#x60;organizations/{org}/environments/{env}&#x60; * &#x60;apigee.proxyrevisions.deploy&#x60; on the resource &#x60;organizations/{org}/apis/{api}/revisions/{rev}&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateDeployChangeReportTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean override = null;
        GoogleCloudApigeeV1DeploymentChangeReport response = api.apigeeOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateDeployChangeReport(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, override);
        // TODO: test validations
    }

    /**
     * Generates a report for a dry run analysis of an UndeployApiProxy request without committing the undeploy. In addition to the standard validations performed when removing deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being removed. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run UndeployApiProxy request. For a request path &#x60;organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateUndeployChangeReport&#x60;, two permissions are required: * &#x60;apigee.deployments.delete&#x60; on the resource &#x60;organizations/{org}/environments/{env}&#x60; * &#x60;apigee.proxyrevisions.undeploy&#x60; on the resource &#x60;organizations/{org}/apis/{api}/revisions/{rev}&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateUndeployChangeReportTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1DeploymentChangeReport response = api.apigeeOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateUndeployChangeReport(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new ArchiveDeployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsArchiveDeploymentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ArchiveDeployment googleCloudApigeeV1ArchiveDeployment = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsEnvironmentsArchiveDeploymentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ArchiveDeployment);
        // TODO: test validations
    }

    /**
     * Generates a signed URL for downloading the original zip file used to create an Archive Deployment. The URL is only valid for a limited period and should be used within minutes after generation. Each call returns a new upload URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsArchiveDeploymentsGenerateDownloadUrlTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1GenerateDownloadUrlResponse response = api.apigeeOrganizationsEnvironmentsArchiveDeploymentsGenerateDownloadUrl(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Generates a signed URL for uploading an Archive zip file to Google Cloud Storage. Once the upload is complete, the signed URL should be passed to CreateArchiveDeployment. When uploading to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 1GB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * &#x60;content-type: application/zip&#x60; * &#x60;x-goog-content-length-range: 0,1073741824&#x60; And this header SHOULD NOT be specified: * &#x60;Authorization: Bearer YOUR_TOKEN&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsArchiveDeploymentsGenerateUploadUrlTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1GenerateUploadUrlResponse response = api.apigeeOrganizationsEnvironmentsArchiveDeploymentsGenerateUploadUrl(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists the ArchiveDeployments in the specified Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsArchiveDeploymentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListArchiveDeploymentsResponse response = api.apigeeOrganizationsEnvironmentsArchiveDeploymentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the IAM policy on an environment. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the &#x60;apigee.environments.getIamPolicy&#x60; permission to call this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        GoogleIamV1Policy response = api.apigeeOrganizationsEnvironmentsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Creates an alias from a key/certificate pair. The structure of the request is controlled by the &#x60;format&#x60; query parameter: - &#x60;keycertfile&#x60; - Separate PEM-encoded key and certificate files are uploaded. Set &#x60;Content-Type: multipart/form-data&#x60; and include the &#x60;keyFile&#x60;, &#x60;certFile&#x60;, and &#x60;password&#x60; (if keys are encrypted) fields in the request body. If uploading to a truststore, omit &#x60;keyFile&#x60;. - &#x60;pkcs12&#x60; - A PKCS12 file is uploaded. Set &#x60;Content-Type: multipart/form-data&#x60;, provide the file in the &#x60;file&#x60; field, and include the &#x60;password&#x60; field if the file is encrypted in the request body. - &#x60;selfsignedcert&#x60; - A new private key and certificate are generated. Set &#x60;Content-Type: application/json&#x60; and include CertificateGenerationSpec in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsKeystoresAliasesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String password = null;
        String alias = null;
        String format = null;
        Boolean ignoreExpiryValidation = null;
        Boolean ignoreNewlineValidation = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1Alias response = api.apigeeOrganizationsEnvironmentsKeystoresAliasesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, password, alias, format, ignoreExpiryValidation, ignoreNewlineValidation, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * Generates a PKCS #10 Certificate Signing Request for the private key in an alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsKeystoresAliasesCsrTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleApiHttpBody response = api.apigeeOrganizationsEnvironmentsKeystoresAliasesCsr(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the certificate from an alias in PEM-encoded form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsKeystoresAliasesGetCertificateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleApiHttpBody response = api.apigeeOrganizationsEnvironmentsKeystoresAliasesGetCertificate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server&#39;s certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsKeystoresCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        GoogleCloudApigeeV1Keystore googleCloudApigeeV1Keystore = null;
        GoogleCloudApigeeV1Keystore response = api.apigeeOrganizationsEnvironmentsKeystoresCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, googleCloudApigeeV1Keystore);
        // TODO: test validations
    }

    /**
     * Submit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the &#x60;state&#x60; of \&quot;enqueued\&quot; means that the request succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsQueriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Query googleCloudApigeeV1Query = null;
        GoogleCloudApigeeV1AsyncQuery response = api.apigeeOrganizationsEnvironmentsQueriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Query);
        // TODO: test validations
    }

    /**
     * Return a list of Asynchronous Queries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsQueriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataset = null;
        String from = null;
        String inclQueriesWithoutReport = null;
        String status = null;
        String submittedBy = null;
        String to = null;
        GoogleCloudApigeeV1ListAsyncQueriesResponse response = api.apigeeOrganizationsEnvironmentsQueriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset, from, inclQueriesWithoutReport, status, submittedBy, to);
        // TODO: test validations
    }

    /**
     * Creates a Reference in the specified environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsReferencesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Reference googleCloudApigeeV1Reference = null;
        GoogleCloudApigeeV1Reference response = api.apigeeOrganizationsEnvironmentsReferencesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Reference);
        // TODO: test validations
    }

    /**
     * Creates a resource file. Specify the &#x60;Content-Type&#x60; as &#x60;application/octet-stream&#x60; or &#x60;multipart/form-data&#x60;. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        String type = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1ResourceFile response = api.apigeeOrganizationsEnvironmentsResourcefilesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, type, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * Deletes a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesDeleteTest() throws ApiException {
        String parent = null;
        String type = null;
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ResourceFile response = api.apigeeOrganizationsEnvironmentsResourcefilesDelete(parent, type, name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesGetTest() throws ApiException {
        String parent = null;
        String type = null;
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleApiHttpBody response = api.apigeeOrganizationsEnvironmentsResourcefilesGet(parent, type, name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String type = null;
        GoogleCloudApigeeV1ListEnvironmentResourcesResponse response = api.apigeeOrganizationsEnvironmentsResourcefilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, type);
        // TODO: test validations
    }

    /**
     * Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesListEnvironmentResourcesTest() throws ApiException {
        String parent = null;
        String type = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ListEnvironmentResourcesResponse response = api.apigeeOrganizationsEnvironmentsResourcefilesListEnvironmentResources(parent, type, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a resource file. Specify the &#x60;Content-Type&#x60; as &#x60;application/octet-stream&#x60; or &#x60;multipart/form-data&#x60;. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsResourcefilesUpdateTest() throws ApiException {
        String parent = null;
        String type = null;
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1ResourceFile response = api.apigeeOrganizationsEnvironmentsResourcefilesUpdate(parent, type, name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * CreateSecurityAction creates a SecurityAction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityActionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String securityActionId = null;
        GoogleCloudApigeeV1SecurityAction googleCloudApigeeV1SecurityAction = null;
        GoogleCloudApigeeV1SecurityAction response = api.apigeeOrganizationsEnvironmentsSecurityActionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, securityActionId, googleCloudApigeeV1SecurityAction);
        // TODO: test validations
    }

    /**
     * Disable a SecurityAction. The &#x60;state&#x60; of the SecurityAction after disabling is &#x60;DISABLED&#x60;. &#x60;DisableSecurityAction&#x60; can be called on SecurityActions in the state &#x60;ENABLED&#x60;; SecurityActions in a different state (including &#x60;DISABLED&#x60;) return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityActionsDisableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1SecurityAction response = api.apigeeOrganizationsEnvironmentsSecurityActionsDisable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Enable a SecurityAction. The &#x60;state&#x60; of the SecurityAction after enabling is &#x60;ENABLED&#x60;. &#x60;EnableSecurityAction&#x60; can be called on SecurityActions in the state &#x60;DISABLED&#x60;; SecurityActions in a different state (including &#x60;ENABLED) return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityActionsEnableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1SecurityAction response = api.apigeeOrganizationsEnvironmentsSecurityActionsEnable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Returns a list of SecurityActions. This returns both enabled and disabled actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityActionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListSecurityActionsResponse response = api.apigeeOrganizationsEnvironmentsSecurityActionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * BatchUpdateSecurityIncident updates multiple existing security incidents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityIncidentsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest googleCloudApigeeV1BatchUpdateSecurityIncidentsRequest = null;
        GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse response = api.apigeeOrganizationsEnvironmentsSecurityIncidentsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1BatchUpdateSecurityIncidentsRequest);
        // TODO: test validations
    }

    /**
     * ListSecurityIncidents lists all the security incident associated with the environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityIncidentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListSecurityIncidentsResponse response = api.apigeeOrganizationsEnvironmentsSecurityIncidentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Submit a report request to be processed in the background. If the submission succeeds, the API returns a 200 status and an ID that refer to the report request. In addition to the HTTP status 200, the &#x60;state&#x60; of \&quot;enqueued\&quot; means that the request succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityReportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1SecurityReportQuery googleCloudApigeeV1SecurityReportQuery = null;
        GoogleCloudApigeeV1SecurityReport response = api.apigeeOrganizationsEnvironmentsSecurityReportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1SecurityReportQuery);
        // TODO: test validations
    }

    /**
     * Return a list of Security Reports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataset = null;
        String from = null;
        Integer pageSize = null;
        String pageToken = null;
        String status = null;
        String submittedBy = null;
        String to = null;
        GoogleCloudApigeeV1ListSecurityReportsResponse response = api.apigeeOrganizationsEnvironmentsSecurityReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset, from, pageSize, pageToken, status, submittedBy, to);
        // TODO: test validations
    }

    /**
     * Retrieve security statistics as tabular rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityStatsQueryTabularStatsTest() throws ApiException {
        String orgenv = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1QueryTabularStatsRequest googleCloudApigeeV1QueryTabularStatsRequest = null;
        GoogleCloudApigeeV1QueryTabularStatsResponse response = api.apigeeOrganizationsEnvironmentsSecurityStatsQueryTabularStats(orgenv, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1QueryTabularStatsRequest);
        // TODO: test validations
    }

    /**
     * Retrieve security statistics as a collection of time series.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSecurityStatsQueryTimeSeriesStatsTest() throws ApiException {
        String orgenv = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1QueryTimeSeriesStatsRequest googleCloudApigeeV1QueryTimeSeriesStatsRequest = null;
        GoogleCloudApigeeV1QueryTimeSeriesStatsResponse response = api.apigeeOrganizationsEnvironmentsSecurityStatsQueryTimeSeriesStats(orgenv, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1QueryTimeSeriesStatsRequest);
        // TODO: test validations
    }

    /**
     * Sets the IAM policy on an environment, if the policy already exists it will be replaced. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the &#x60;apigee.environments.setIamPolicy&#x60; permission to call this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.apigeeOrganizationsEnvironmentsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Deploys a revision of a shared flow. If another revision of the same shared flow is currently deployed, set the &#x60;override&#x60; parameter to &#x60;true&#x60; to have this revision replace the currently deployed revision. You cannot use a shared flow until it has been deployed to an environment. For a request path &#x60;organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments&#x60;, two permissions are required: * &#x60;apigee.deployments.create&#x60; on the resource &#x60;organizations/{org}/environments/{env}&#x60; * &#x60;apigee.sharedflowrevisions.deploy&#x60; on the resource &#x60;organizations/{org}/sharedflows/{sf}/revisions/{rev}&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSharedflowsRevisionsDeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean override = null;
        String serviceAccount = null;
        GoogleCloudApigeeV1Deployment response = api.apigeeOrganizationsEnvironmentsSharedflowsRevisionsDeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, override, serviceAccount);
        // TODO: test validations
    }

    /**
     * Gets the deployment of a shared flow revision and actual state reported by runtime pods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSharedflowsRevisionsGetDeploymentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Deployment response = api.apigeeOrganizationsEnvironmentsSharedflowsRevisionsGetDeployments(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Undeploys a shared flow revision from an environment. For a request path &#x60;organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments&#x60;, two permissions are required: * &#x60;apigee.deployments.delete&#x60; on the resource &#x60;organizations/{org}/environments/{env}&#x60; * &#x60;apigee.sharedflowrevisions.undeploy&#x60; on the resource &#x60;organizations/{org}/sharedflows/{sf}/revisions/{rev}&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSharedflowsRevisionsUndeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean sequencedRollout = null;
        Object response = api.apigeeOrganizationsEnvironmentsSharedflowsRevisionsUndeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sequencedRollout);
        // TODO: test validations
    }

    /**
     * Creates a subscription for the environment&#39;s Pub/Sub topic. The server will assign a random name for this subscription. The \&quot;name\&quot; and \&quot;push_config\&quot; must *not* be specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsSubscribeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Subscription response = api.apigeeOrganizationsEnvironmentsSubscribe(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a TargetServer in the specified environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsTargetserversCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        GoogleCloudApigeeV1TargetServer googleCloudApigeeV1TargetServer = null;
        GoogleCloudApigeeV1TargetServer response = api.apigeeOrganizationsEnvironmentsTargetserversCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, googleCloudApigeeV1TargetServer);
        // TODO: test validations
    }

    /**
     * Tests the permissions of a user on an environment, and returns a subset of permissions that the user has on the environment. If the environment does not exist, an empty permission set is returned (a NOT_FOUND error is not returned).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest = null;
        GoogleIamV1TestIamPermissionsResponse response = api.apigeeOrganizationsEnvironmentsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1TestIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a trace configuration override. The response contains a system-generated UUID, that can be used to view, update, or delete the configuration override. Use the List API to view the existing trace configuration overrides.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsTraceConfigOverridesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1TraceConfigOverride googleCloudApigeeV1TraceConfigOverride = null;
        GoogleCloudApigeeV1TraceConfigOverride response = api.apigeeOrganizationsEnvironmentsTraceConfigOverridesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1TraceConfigOverride);
        // TODO: test validations
    }

    /**
     * Lists all of the distributed trace configuration overrides in an environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsTraceConfigOverridesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListTraceConfigOverridesResponse response = api.apigeeOrganizationsEnvironmentsTraceConfigOverridesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Deletes a subscription for the environment&#39;s Pub/Sub topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsEnvironmentsUnsubscribeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Subscription googleCloudApigeeV1Subscription = null;
        Object response = api.apigeeOrganizationsEnvironmentsUnsubscribe(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Subscription);
        // TODO: test validations
    }

    /**
     * Gets the project ID and region for an Apigee organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsGetProjectMappingTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1OrganizationProjectMapping response = api.apigeeOrganizationsGetProjectMapping(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane. An ETag is returned in the response to &#x60;getSyncAuthorization&#x60;. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don&#39;t pass the ETag in the call to &#x60;setSyncAuthorization&#x60;, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsGetSyncAuthorizationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudApigeeV1SyncAuthorization response = api.apigeeOrganizationsGetSyncAuthorization(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the &#x60;state&#x60; of \&quot;enqueued\&quot; means that the request succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsHostQueriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Query googleCloudApigeeV1Query = null;
        GoogleCloudApigeeV1AsyncQuery response = api.apigeeOrganizationsHostQueriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Query);
        // TODO: test validations
    }

    /**
     * Return a list of Asynchronous Queries at host level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsHostQueriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataset = null;
        String envgroupHostname = null;
        String from = null;
        String inclQueriesWithoutReport = null;
        String status = null;
        String submittedBy = null;
        String to = null;
        GoogleCloudApigeeV1ListAsyncQueriesResponse response = api.apigeeOrganizationsHostQueriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset, envgroupHostname, from, inclQueriesWithoutReport, status, submittedBy, to);
        // TODO: test validations
    }

    /**
     * Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the &#x60;state&#x60; of \&quot;enqueued\&quot; means that the request succeeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsHostSecurityReportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1SecurityReportQuery googleCloudApigeeV1SecurityReportQuery = null;
        GoogleCloudApigeeV1SecurityReport response = api.apigeeOrganizationsHostSecurityReportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1SecurityReportQuery);
        // TODO: test validations
    }

    /**
     * Return a list of Security Reports at host level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsHostSecurityReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataset = null;
        String envgroupHostname = null;
        String from = null;
        Integer pageSize = null;
        String pageToken = null;
        String status = null;
        String submittedBy = null;
        String to = null;
        GoogleCloudApigeeV1ListSecurityReportsResponse response = api.apigeeOrganizationsHostSecurityReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset, envgroupHostname, from, pageSize, pageToken, status, submittedBy, to);
        // TODO: test validations
    }

    /**
     * Creates a new attachment of an environment to an instance. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesAttachmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1InstanceAttachment googleCloudApigeeV1InstanceAttachment = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsInstancesAttachmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1InstanceAttachment);
        // TODO: test validations
    }

    /**
     * Lists all attachments to an instance. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesAttachmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListInstanceAttachmentsResponse response = api.apigeeOrganizationsInstancesAttachmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new canary evaluation for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesCanaryevaluationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1CanaryEvaluation googleCloudApigeeV1CanaryEvaluation = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsInstancesCanaryevaluationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1CanaryEvaluation);
        // TODO: test validations
    }

    /**
     * Creates an Apigee runtime instance. The instance is accessible from the authorized network configured on the organization. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1Instance googleCloudApigeeV1Instance = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsInstancesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1Instance);
        // TODO: test validations
    }

    /**
     * Lists all Apigee runtime instances for the organization. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListInstancesResponse response = api.apigeeOrganizationsInstancesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Activates the NAT address. The Apigee instance can now use this for Internet egress traffic. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesNatAddressesActivateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsInstancesNatAddressesActivate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesNatAddressesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1NatAddress googleCloudApigeeV1NatAddress = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsInstancesNatAddressesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1NatAddress);
        // TODO: test validations
    }

    /**
     * Lists the NAT addresses for an Apigee instance. **Note:** Not supported for Apigee hybrid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesNatAddressesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListNatAddressesResponse response = api.apigeeOrganizationsInstancesNatAddressesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Reports the latest status for a runtime instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsInstancesReportStatusTest() throws ApiException {
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ReportInstanceStatusRequest googleCloudApigeeV1ReportInstanceStatusRequest = null;
        Object response = api.apigeeOrganizationsInstancesReportStatus(instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ReportInstanceStatusRequest);
        // TODO: test validations
    }

    /**
     * Creates a key value map in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsKeyvaluemapsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1KeyValueMap googleCloudApigeeV1KeyValueMap = null;
        GoogleCloudApigeeV1KeyValueMap response = api.apigeeOrganizationsKeyvaluemapsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1KeyValueMap);
        // TODO: test validations
    }

    /**
     * Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsKeyvaluemapsEntriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1KeyValueEntry googleCloudApigeeV1KeyValueEntry = null;
        GoogleCloudApigeeV1KeyValueEntry response = api.apigeeOrganizationsKeyvaluemapsEntriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1KeyValueEntry);
        // TODO: test validations
    }

    /**
     * Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsKeyvaluemapsEntriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListKeyValueEntriesResponse response = api.apigeeOrganizationsKeyvaluemapsEntriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the Apigee organizations and associated Google Cloud projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ListOrganizationsResponse response = api.apigeeOrganizationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.apigeeOrganizationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsReportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1CustomReport googleCloudApigeeV1CustomReport = null;
        GoogleCloudApigeeV1CustomReport response = api.apigeeOrganizationsReportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1CustomReport);
        // TODO: test validations
    }

    /**
     * Return a list of Custom Reports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean expand = null;
        GoogleCloudApigeeV1ListCustomReportsResponse response = api.apigeeOrganizationsReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, expand);
        // TODO: test validations
    }

    /**
     * CreateSecurityProfile create a new custom security profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSecurityProfilesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String securityProfileId = null;
        GoogleCloudApigeeV1SecurityProfile googleCloudApigeeV1SecurityProfile = null;
        GoogleCloudApigeeV1SecurityProfile response = api.apigeeOrganizationsSecurityProfilesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, securityProfileId, googleCloudApigeeV1SecurityProfile);
        // TODO: test validations
    }

    /**
     * ComputeEnvironmentScores calculates scores for requested time range for the specified security profile and environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSecurityProfilesEnvironmentsComputeEnvironmentScoresTest() throws ApiException {
        String profileEnvironment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ComputeEnvironmentScoresRequest googleCloudApigeeV1ComputeEnvironmentScoresRequest = null;
        GoogleCloudApigeeV1ComputeEnvironmentScoresResponse response = api.apigeeOrganizationsSecurityProfilesEnvironmentsComputeEnvironmentScores(profileEnvironment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ComputeEnvironmentScoresRequest);
        // TODO: test validations
    }

    /**
     * CreateSecurityProfileEnvironmentAssociation creates profile environment association i.e. attaches environment to security profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSecurityProfilesEnvironmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation googleCloudApigeeV1SecurityProfileEnvironmentAssociation = null;
        GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation response = api.apigeeOrganizationsSecurityProfilesEnvironmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, googleCloudApigeeV1SecurityProfileEnvironmentAssociation);
        // TODO: test validations
    }

    /**
     * ListSecurityProfiles lists all the security profiles associated with the org including attached and unattached profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSecurityProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListSecurityProfilesResponse response = api.apigeeOrganizationsSecurityProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * ListSecurityProfileRevisions lists all the revisions of the security profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSecurityProfilesListRevisionsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse response = api.apigeeOrganizationsSecurityProfilesListRevisions(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSetAddonsTest() throws ApiException {
        String org = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1SetAddonsRequest googleCloudApigeeV1SetAddonsRequest = null;
        GoogleLongrunningOperation response = api.apigeeOrganizationsSetAddons(org, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1SetAddonsRequest);
        // TODO: test validations
    }

    /**
     * Sets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid. Pass the ETag when calling &#x60;setSyncAuthorization&#x60; to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don&#39;t pass the ETag in the call to &#x60;setSyncAuthorization&#x60;, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSetSyncAuthorizationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1SyncAuthorization googleCloudApigeeV1SyncAuthorization = null;
        GoogleCloudApigeeV1SyncAuthorization response = api.apigeeOrganizationsSetSyncAuthorization(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1SyncAuthorization);
        // TODO: test validations
    }

    /**
     * Uploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it. Once imported, the shared flow revision must be deployed before it can be accessed at runtime. The size limit of a shared flow bundle is 15 MB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSharedflowsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String action = null;
        String name = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1SharedFlowRevision response = api.apigeeOrganizationsSharedflowsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, action, name, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * Lists all shared flows in the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSharedflowsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeMetaData = null;
        Boolean includeRevisions = null;
        GoogleCloudApigeeV1ListSharedFlowsResponse response = api.apigeeOrganizationsSharedflowsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeMetaData, includeRevisions);
        // TODO: test validations
    }

    /**
     * Lists all deployments of a shared flow revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSharedflowsRevisionsDeploymentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean sharedFlows = null;
        GoogleCloudApigeeV1ListDeploymentsResponse response = api.apigeeOrganizationsSharedflowsRevisionsDeploymentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sharedFlows);
        // TODO: test validations
    }

    /**
     * Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSharedflowsRevisionsUpdateSharedFlowRevisionTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean validate = null;
        GoogleApiHttpBody googleApiHttpBody = null;
        GoogleCloudApigeeV1SharedFlowRevision response = api.apigeeOrganizationsSharedflowsRevisionsUpdateSharedFlowRevision(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validate, googleApiHttpBody);
        // TODO: test validations
    }

    /**
     * Creates a new API category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApicategoriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ApiCategory googleCloudApigeeV1ApiCategory = null;
        GoogleCloudApigeeV1ApiCategoryResponse response = api.apigeeOrganizationsSitesApicategoriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ApiCategory);
        // TODO: test validations
    }

    /**
     * Returns the API categories associated with a portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApicategoriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ListApiCategoriesResponse response = api.apigeeOrganizationsSitesApicategoriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new catalog item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudApigeeV1ApiDoc googleCloudApigeeV1ApiDoc = null;
        GoogleCloudApigeeV1ApiDocResponse response = api.apigeeOrganizationsSitesApidocsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudApigeeV1ApiDoc);
        // TODO: test validations
    }

    /**
     * Deletes a catalog item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String retention = null;
        GoogleCloudApigeeV1DeleteResponse response = api.apigeeOrganizationsSitesApidocsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, retention);
        // TODO: test validations
    }

    /**
     * Gets the documentation for the specified catalog item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsGetDocumentationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String format = null;
        String envgroupHostname = null;
        String filter = null;
        String limit = null;
        String offset = null;
        Boolean realtime = null;
        String select = null;
        String sort = null;
        String sortby = null;
        String timeRange = null;
        String timeUnit = null;
        String topk = null;
        Boolean tsAscending = null;
        String tzo = null;
        GoogleCloudApigeeV1ApiDocDocumentationResponse response = api.apigeeOrganizationsSitesApidocsGetDocumentation(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, format, envgroupHostname, filter, limit, offset, realtime, select, sort, sortby, timeRange, timeUnit, topk, tsAscending, tzo);
        // TODO: test validations
    }

    /**
     * Returns the catalog items associated with a portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudApigeeV1ListApiDocsResponse response = api.apigeeOrganizationsSitesApidocsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a catalog item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean ignoreExpiryValidation = null;
        Boolean ignoreNewlineValidation = null;
        GoogleCloudApigeeV1ApiDoc googleCloudApigeeV1ApiDoc = null;
        GoogleCloudApigeeV1ApiDocResponse response = api.apigeeOrganizationsSitesApidocsUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ignoreExpiryValidation, ignoreNewlineValidation, googleCloudApigeeV1ApiDoc);
        // TODO: test validations
    }

    /**
     * Updates the documentation for the specified catalog item. Note that the documentation file contents will not be populated in the return message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apigeeOrganizationsSitesApidocsUpdateDocumentationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudApigeeV1ApiDocDocumentation googleCloudApigeeV1ApiDocDocumentation = null;
        GoogleCloudApigeeV1ApiDocDocumentationResponse response = api.apigeeOrganizationsSitesApidocsUpdateDocumentation(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudApigeeV1ApiDocDocumentation);
        // TODO: test validations
    }

}
