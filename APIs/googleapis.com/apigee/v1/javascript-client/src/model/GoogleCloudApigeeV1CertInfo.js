/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudApigeeV1CertInfo model module.
 * @module model/GoogleCloudApigeeV1CertInfo
 * @version v1
 */
class GoogleCloudApigeeV1CertInfo {
    /**
     * Constructs a new <code>GoogleCloudApigeeV1CertInfo</code>.
     * X.509 certificate as defined in RFC 5280.
     * @alias module:model/GoogleCloudApigeeV1CertInfo
     */
    constructor() { 
        
        GoogleCloudApigeeV1CertInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudApigeeV1CertInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudApigeeV1CertInfo} obj Optional instance to populate.
     * @return {module:model/GoogleCloudApigeeV1CertInfo} The populated <code>GoogleCloudApigeeV1CertInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudApigeeV1CertInfo();

            if (data.hasOwnProperty('basicConstraints')) {
                obj['basicConstraints'] = ApiClient.convertToType(data['basicConstraints'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('isValid')) {
                obj['isValid'] = ApiClient.convertToType(data['isValid'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('sigAlgName')) {
                obj['sigAlgName'] = ApiClient.convertToType(data['sigAlgName'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeNames')) {
                obj['subjectAlternativeNames'] = ApiClient.convertToType(data['subjectAlternativeNames'], ['String']);
            }
            if (data.hasOwnProperty('validFrom')) {
                obj['validFrom'] = ApiClient.convertToType(data['validFrom'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudApigeeV1CertInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudApigeeV1CertInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['basicConstraints'] && !(typeof data['basicConstraints'] === 'string' || data['basicConstraints'] instanceof String)) {
            throw new Error("Expected the field `basicConstraints` to be a primitive type in the JSON string but got " + data['basicConstraints']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['isValid'] && !(typeof data['isValid'] === 'string' || data['isValid'] instanceof String)) {
            throw new Error("Expected the field `isValid` to be a primitive type in the JSON string but got " + data['isValid']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['sigAlgName'] && !(typeof data['sigAlgName'] === 'string' || data['sigAlgName'] instanceof String)) {
            throw new Error("Expected the field `sigAlgName` to be a primitive type in the JSON string but got " + data['sigAlgName']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectAlternativeNames'])) {
            throw new Error("Expected the field `subjectAlternativeNames` to be an array in the JSON data but got " + data['subjectAlternativeNames']);
        }
        // ensure the json data is a string
        if (data['validFrom'] && !(typeof data['validFrom'] === 'string' || data['validFrom'] instanceof String)) {
            throw new Error("Expected the field `validFrom` to be a primitive type in the JSON string but got " + data['validFrom']);
        }

        return true;
    }


}



/**
 * X.509 basic constraints extension.
 * @member {String} basicConstraints
 */
GoogleCloudApigeeV1CertInfo.prototype['basicConstraints'] = undefined;

/**
 * X.509 `notAfter` validity period in milliseconds since epoch.
 * @member {String} expiryDate
 */
GoogleCloudApigeeV1CertInfo.prototype['expiryDate'] = undefined;

/**
 * Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
 * @member {String} isValid
 */
GoogleCloudApigeeV1CertInfo.prototype['isValid'] = undefined;

/**
 * X.509 issuer.
 * @member {String} issuer
 */
GoogleCloudApigeeV1CertInfo.prototype['issuer'] = undefined;

/**
 * Public key component of the X.509 subject public key info.
 * @member {String} publicKey
 */
GoogleCloudApigeeV1CertInfo.prototype['publicKey'] = undefined;

/**
 * X.509 serial number.
 * @member {String} serialNumber
 */
GoogleCloudApigeeV1CertInfo.prototype['serialNumber'] = undefined;

/**
 * X.509 signatureAlgorithm.
 * @member {String} sigAlgName
 */
GoogleCloudApigeeV1CertInfo.prototype['sigAlgName'] = undefined;

/**
 * X.509 subject.
 * @member {String} subject
 */
GoogleCloudApigeeV1CertInfo.prototype['subject'] = undefined;

/**
 * X.509 subject alternative names (SANs) extension.
 * @member {Array.<String>} subjectAlternativeNames
 */
GoogleCloudApigeeV1CertInfo.prototype['subjectAlternativeNames'] = undefined;

/**
 * X.509 `notBefore` validity period in milliseconds since epoch.
 * @member {String} validFrom
 */
GoogleCloudApigeeV1CertInfo.prototype['validFrom'] = undefined;

/**
 * X.509 version.
 * @member {Number} version
 */
GoogleCloudApigeeV1CertInfo.prototype['version'] = undefined;






export default GoogleCloudApigeeV1CertInfo;

