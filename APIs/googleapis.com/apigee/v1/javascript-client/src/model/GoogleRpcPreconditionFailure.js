/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleRpcPreconditionFailureViolation from './GoogleRpcPreconditionFailureViolation';

/**
 * The GoogleRpcPreconditionFailure model module.
 * @module model/GoogleRpcPreconditionFailure
 * @version v1
 */
class GoogleRpcPreconditionFailure {
    /**
     * Constructs a new <code>GoogleRpcPreconditionFailure</code>.
     * Describes what preconditions have failed. For example, if an RPC failed because it required the Terms of Service to be acknowledged, it could list the terms of service violation in the PreconditionFailure message.
     * @alias module:model/GoogleRpcPreconditionFailure
     */
    constructor() { 
        
        GoogleRpcPreconditionFailure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleRpcPreconditionFailure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleRpcPreconditionFailure} obj Optional instance to populate.
     * @return {module:model/GoogleRpcPreconditionFailure} The populated <code>GoogleRpcPreconditionFailure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleRpcPreconditionFailure();

            if (data.hasOwnProperty('violations')) {
                obj['violations'] = ApiClient.convertToType(data['violations'], [GoogleRpcPreconditionFailureViolation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleRpcPreconditionFailure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleRpcPreconditionFailure</code>.
     */
    static validateJSON(data) {
        if (data['violations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['violations'])) {
                throw new Error("Expected the field `violations` to be an array in the JSON data but got " + data['violations']);
            }
            // validate the optional field `violations` (array)
            for (const item of data['violations']) {
                GoogleRpcPreconditionFailureViolation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Describes all precondition violations.
 * @member {Array.<module:model/GoogleRpcPreconditionFailureViolation>} violations
 */
GoogleRpcPreconditionFailure.prototype['violations'] = undefined;






export default GoogleRpcPreconditionFailure;

