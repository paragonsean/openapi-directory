/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudApigeeV1SyncAuthorization model module.
 * @module model/GoogleCloudApigeeV1SyncAuthorization
 * @version v1
 */
class GoogleCloudApigeeV1SyncAuthorization {
    /**
     * Constructs a new <code>GoogleCloudApigeeV1SyncAuthorization</code>.
     * @alias module:model/GoogleCloudApigeeV1SyncAuthorization
     */
    constructor() { 
        
        GoogleCloudApigeeV1SyncAuthorization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudApigeeV1SyncAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudApigeeV1SyncAuthorization} obj Optional instance to populate.
     * @return {module:model/GoogleCloudApigeeV1SyncAuthorization} The populated <code>GoogleCloudApigeeV1SyncAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudApigeeV1SyncAuthorization();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'Blob');
            }
            if (data.hasOwnProperty('identities')) {
                obj['identities'] = ApiClient.convertToType(data['identities'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudApigeeV1SyncAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudApigeeV1SyncAuthorization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['identities'])) {
            throw new Error("Expected the field `identities` to be an array in the JSON data but got " + data['identities']);
        }

        return true;
    }


}



/**
 * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other. For example, when you call [getSyncAuthorization](organizations/getSyncAuthorization) an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](organizations/setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. **Note**: We strongly recommend that you use the ETag in the read-modify-write cycle to avoid race conditions.
 * @member {Blob} etag
 */
GoogleCloudApigeeV1SyncAuthorization.prototype['etag'] = undefined;

/**
 * Required. Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:` service-account-name. The service-account-name is formatted like an email address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com` You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).
 * @member {Array.<String>} identities
 */
GoogleCloudApigeeV1SyncAuthorization.prototype['identities'] = undefined;






export default GoogleCloudApigeeV1SyncAuthorization;

