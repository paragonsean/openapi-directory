/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudApigeeV1DebugMask model module.
 * @module model/GoogleCloudApigeeV1DebugMask
 * @version v1
 */
class GoogleCloudApigeeV1DebugMask {
    /**
     * Constructs a new <code>GoogleCloudApigeeV1DebugMask</code>.
     * @alias module:model/GoogleCloudApigeeV1DebugMask
     */
    constructor() { 
        
        GoogleCloudApigeeV1DebugMask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudApigeeV1DebugMask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudApigeeV1DebugMask} obj Optional instance to populate.
     * @return {module:model/GoogleCloudApigeeV1DebugMask} The populated <code>GoogleCloudApigeeV1DebugMask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudApigeeV1DebugMask();

            if (data.hasOwnProperty('faultJSONPaths')) {
                obj['faultJSONPaths'] = ApiClient.convertToType(data['faultJSONPaths'], ['String']);
            }
            if (data.hasOwnProperty('faultXPaths')) {
                obj['faultXPaths'] = ApiClient.convertToType(data['faultXPaths'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespaces')) {
                obj['namespaces'] = ApiClient.convertToType(data['namespaces'], {'String': 'String'});
            }
            if (data.hasOwnProperty('requestJSONPaths')) {
                obj['requestJSONPaths'] = ApiClient.convertToType(data['requestJSONPaths'], ['String']);
            }
            if (data.hasOwnProperty('requestXPaths')) {
                obj['requestXPaths'] = ApiClient.convertToType(data['requestXPaths'], ['String']);
            }
            if (data.hasOwnProperty('responseJSONPaths')) {
                obj['responseJSONPaths'] = ApiClient.convertToType(data['responseJSONPaths'], ['String']);
            }
            if (data.hasOwnProperty('responseXPaths')) {
                obj['responseXPaths'] = ApiClient.convertToType(data['responseXPaths'], ['String']);
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudApigeeV1DebugMask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudApigeeV1DebugMask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['faultJSONPaths'])) {
            throw new Error("Expected the field `faultJSONPaths` to be an array in the JSON data but got " + data['faultJSONPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['faultXPaths'])) {
            throw new Error("Expected the field `faultXPaths` to be an array in the JSON data but got " + data['faultXPaths']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requestJSONPaths'])) {
            throw new Error("Expected the field `requestJSONPaths` to be an array in the JSON data but got " + data['requestJSONPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requestXPaths'])) {
            throw new Error("Expected the field `requestXPaths` to be an array in the JSON data but got " + data['requestXPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['responseJSONPaths'])) {
            throw new Error("Expected the field `responseJSONPaths` to be an array in the JSON data but got " + data['responseJSONPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['responseXPaths'])) {
            throw new Error("Expected the field `responseXPaths` to be an array in the JSON data but got " + data['responseXPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['variables'])) {
            throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
        }

        return true;
    }


}



/**
 * List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.
 * @member {Array.<String>} faultJSONPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['faultJSONPaths'] = undefined;

/**
 * List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.
 * @member {Array.<String>} faultXPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['faultXPaths'] = undefined;

/**
 * Name of the debug mask.
 * @member {String} name
 */
GoogleCloudApigeeV1DebugMask.prototype['name'] = undefined;

/**
 * Map of namespaces to URIs.
 * @member {Object.<String, String>} namespaces
 */
GoogleCloudApigeeV1DebugMask.prototype['namespaces'] = undefined;

/**
 * List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.
 * @member {Array.<String>} requestJSONPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['requestJSONPaths'] = undefined;

/**
 * List of XPaths that specify the XML elements to be filtered from XML request message payloads.
 * @member {Array.<String>} requestXPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['requestXPaths'] = undefined;

/**
 * List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.
 * @member {Array.<String>} responseJSONPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['responseJSONPaths'] = undefined;

/**
 * List of XPaths that specify the XML elements to be filtered from XML response message payloads.
 * @member {Array.<String>} responseXPaths
 */
GoogleCloudApigeeV1DebugMask.prototype['responseXPaths'] = undefined;

/**
 * List of variables that should be masked from the debug output.
 * @member {Array.<String>} variables
 */
GoogleCloudApigeeV1DebugMask.prototype['variables'] = undefined;






export default GoogleCloudApigeeV1DebugMask;

