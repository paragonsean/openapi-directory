/**
 * Apigee API
 * Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudApigeeV1SecurityActionConditionConfig model module.
 * @module model/GoogleCloudApigeeV1SecurityActionConditionConfig
 * @version v1
 */
class GoogleCloudApigeeV1SecurityActionConditionConfig {
    /**
     * Constructs a new <code>GoogleCloudApigeeV1SecurityActionConditionConfig</code>.
     * The following are a list of conditions. A valid SecurityAction must contain at least one condition. Within a condition, each element is ORed. Across conditions elements are ANDed. For example if a SecurityAction has the following: ip_address_ranges: [\&quot;ip1\&quot;, \&quot;ip2\&quot;] and bot_reasons: [\&quot;Flooder\&quot;, \&quot;Robot Abuser\&quot;] then this is interpreted as: enforce the action if the incoming request has ((ip_address_ranges &#x3D; \&quot;ip1\&quot; OR ip_address_ranges &#x3D; \&quot;ip2\&quot;) AND (bot_reasons&#x3D;\&quot;Flooder\&quot; OR bot_reasons&#x3D;\&quot;Robot Abuser\&quot;)). Conditions other than ip_address_ranges and bot_reasons cannot be ANDed.
     * @alias module:model/GoogleCloudApigeeV1SecurityActionConditionConfig
     */
    constructor() { 
        
        GoogleCloudApigeeV1SecurityActionConditionConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudApigeeV1SecurityActionConditionConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudApigeeV1SecurityActionConditionConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudApigeeV1SecurityActionConditionConfig} The populated <code>GoogleCloudApigeeV1SecurityActionConditionConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudApigeeV1SecurityActionConditionConfig();

            if (data.hasOwnProperty('accessTokens')) {
                obj['accessTokens'] = ApiClient.convertToType(data['accessTokens'], ['String']);
            }
            if (data.hasOwnProperty('apiKeys')) {
                obj['apiKeys'] = ApiClient.convertToType(data['apiKeys'], ['String']);
            }
            if (data.hasOwnProperty('apiProducts')) {
                obj['apiProducts'] = ApiClient.convertToType(data['apiProducts'], ['String']);
            }
            if (data.hasOwnProperty('botReasons')) {
                obj['botReasons'] = ApiClient.convertToType(data['botReasons'], ['String']);
            }
            if (data.hasOwnProperty('developerApps')) {
                obj['developerApps'] = ApiClient.convertToType(data['developerApps'], ['String']);
            }
            if (data.hasOwnProperty('developers')) {
                obj['developers'] = ApiClient.convertToType(data['developers'], ['String']);
            }
            if (data.hasOwnProperty('ipAddressRanges')) {
                obj['ipAddressRanges'] = ApiClient.convertToType(data['ipAddressRanges'], ['String']);
            }
            if (data.hasOwnProperty('userAgents')) {
                obj['userAgents'] = ApiClient.convertToType(data['userAgents'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudApigeeV1SecurityActionConditionConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudApigeeV1SecurityActionConditionConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessTokens'])) {
            throw new Error("Expected the field `accessTokens` to be an array in the JSON data but got " + data['accessTokens']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['apiKeys'])) {
            throw new Error("Expected the field `apiKeys` to be an array in the JSON data but got " + data['apiKeys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['apiProducts'])) {
            throw new Error("Expected the field `apiProducts` to be an array in the JSON data but got " + data['apiProducts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['botReasons'])) {
            throw new Error("Expected the field `botReasons` to be an array in the JSON data but got " + data['botReasons']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['developerApps'])) {
            throw new Error("Expected the field `developerApps` to be an array in the JSON data but got " + data['developerApps']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['developers'])) {
            throw new Error("Expected the field `developers` to be an array in the JSON data but got " + data['developers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipAddressRanges'])) {
            throw new Error("Expected the field `ipAddressRanges` to be an array in the JSON data but got " + data['ipAddressRanges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userAgents'])) {
            throw new Error("Expected the field `userAgents` to be an array in the JSON data but got " + data['userAgents']);
        }

        return true;
    }


}



/**
 * Optional. A list of access_tokens. Limit 1000 per action.
 * @member {Array.<String>} accessTokens
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['accessTokens'] = undefined;

/**
 * Optional. A list of API keys. Limit 1000 per action.
 * @member {Array.<String>} apiKeys
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['apiKeys'] = undefined;

/**
 * Optional. A list of API Products. Limit 1000 per action.
 * @member {Array.<String>} apiProducts
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['apiProducts'] = undefined;

/**
 * Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.
 * @member {Array.<String>} botReasons
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['botReasons'] = undefined;

/**
 * Optional. A list of developer apps. Limit 1000 per action.
 * @member {Array.<String>} developerApps
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['developerApps'] = undefined;

/**
 * Optional. A list of developers. Limit 1000 per action.
 * @member {Array.<String>} developers
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['developers'] = undefined;

/**
 * Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.
 * @member {Array.<String>} ipAddressRanges
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['ipAddressRanges'] = undefined;

/**
 * Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action.
 * @member {Array.<String>} userAgents
 */
GoogleCloudApigeeV1SecurityActionConditionConfig.prototype['userAgents'] = undefined;






export default GoogleCloudApigeeV1SecurityActionConditionConfig;

