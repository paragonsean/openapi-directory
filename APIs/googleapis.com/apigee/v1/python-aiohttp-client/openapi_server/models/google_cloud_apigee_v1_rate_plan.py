# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_rate_range import GoogleCloudApigeeV1RateRange
from openapi_server.models.google_cloud_apigee_v1_revenue_share_range import GoogleCloudApigeeV1RevenueShareRange
from openapi_server.models.google_type_money import GoogleTypeMoney
from openapi_server import util


class GoogleCloudApigeeV1RatePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apiproduct: str=None, billing_period: str=None, consumption_pricing_rates: List[GoogleCloudApigeeV1RateRange]=None, consumption_pricing_type: str=None, created_at: str=None, currency_code: str=None, description: str=None, display_name: str=None, end_time: str=None, fixed_fee_frequency: int=None, fixed_recurring_fee: GoogleTypeMoney=None, last_modified_at: str=None, name: str=None, payment_funding_model: str=None, revenue_share_rates: List[GoogleCloudApigeeV1RevenueShareRange]=None, revenue_share_type: str=None, setup_fee: GoogleTypeMoney=None, start_time: str=None, state: str=None):
        """GoogleCloudApigeeV1RatePlan - a model defined in OpenAPI

        :param apiproduct: The apiproduct of this GoogleCloudApigeeV1RatePlan.
        :param billing_period: The billing_period of this GoogleCloudApigeeV1RatePlan.
        :param consumption_pricing_rates: The consumption_pricing_rates of this GoogleCloudApigeeV1RatePlan.
        :param consumption_pricing_type: The consumption_pricing_type of this GoogleCloudApigeeV1RatePlan.
        :param created_at: The created_at of this GoogleCloudApigeeV1RatePlan.
        :param currency_code: The currency_code of this GoogleCloudApigeeV1RatePlan.
        :param description: The description of this GoogleCloudApigeeV1RatePlan.
        :param display_name: The display_name of this GoogleCloudApigeeV1RatePlan.
        :param end_time: The end_time of this GoogleCloudApigeeV1RatePlan.
        :param fixed_fee_frequency: The fixed_fee_frequency of this GoogleCloudApigeeV1RatePlan.
        :param fixed_recurring_fee: The fixed_recurring_fee of this GoogleCloudApigeeV1RatePlan.
        :param last_modified_at: The last_modified_at of this GoogleCloudApigeeV1RatePlan.
        :param name: The name of this GoogleCloudApigeeV1RatePlan.
        :param payment_funding_model: The payment_funding_model of this GoogleCloudApigeeV1RatePlan.
        :param revenue_share_rates: The revenue_share_rates of this GoogleCloudApigeeV1RatePlan.
        :param revenue_share_type: The revenue_share_type of this GoogleCloudApigeeV1RatePlan.
        :param setup_fee: The setup_fee of this GoogleCloudApigeeV1RatePlan.
        :param start_time: The start_time of this GoogleCloudApigeeV1RatePlan.
        :param state: The state of this GoogleCloudApigeeV1RatePlan.
        """
        self.openapi_types = {
            'apiproduct': str,
            'billing_period': str,
            'consumption_pricing_rates': List[GoogleCloudApigeeV1RateRange],
            'consumption_pricing_type': str,
            'created_at': str,
            'currency_code': str,
            'description': str,
            'display_name': str,
            'end_time': str,
            'fixed_fee_frequency': int,
            'fixed_recurring_fee': GoogleTypeMoney,
            'last_modified_at': str,
            'name': str,
            'payment_funding_model': str,
            'revenue_share_rates': List[GoogleCloudApigeeV1RevenueShareRange],
            'revenue_share_type': str,
            'setup_fee': GoogleTypeMoney,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'apiproduct': 'apiproduct',
            'billing_period': 'billingPeriod',
            'consumption_pricing_rates': 'consumptionPricingRates',
            'consumption_pricing_type': 'consumptionPricingType',
            'created_at': 'createdAt',
            'currency_code': 'currencyCode',
            'description': 'description',
            'display_name': 'displayName',
            'end_time': 'endTime',
            'fixed_fee_frequency': 'fixedFeeFrequency',
            'fixed_recurring_fee': 'fixedRecurringFee',
            'last_modified_at': 'lastModifiedAt',
            'name': 'name',
            'payment_funding_model': 'paymentFundingModel',
            'revenue_share_rates': 'revenueShareRates',
            'revenue_share_type': 'revenueShareType',
            'setup_fee': 'setupFee',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._apiproduct = apiproduct
        self._billing_period = billing_period
        self._consumption_pricing_rates = consumption_pricing_rates
        self._consumption_pricing_type = consumption_pricing_type
        self._created_at = created_at
        self._currency_code = currency_code
        self._description = description
        self._display_name = display_name
        self._end_time = end_time
        self._fixed_fee_frequency = fixed_fee_frequency
        self._fixed_recurring_fee = fixed_recurring_fee
        self._last_modified_at = last_modified_at
        self._name = name
        self._payment_funding_model = payment_funding_model
        self._revenue_share_rates = revenue_share_rates
        self._revenue_share_type = revenue_share_type
        self._setup_fee = setup_fee
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1RatePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1RatePlan of this GoogleCloudApigeeV1RatePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apiproduct(self):
        """Gets the apiproduct of this GoogleCloudApigeeV1RatePlan.

        Name of the API product that the rate plan is associated with.

        :return: The apiproduct of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._apiproduct

    @apiproduct.setter
    def apiproduct(self, apiproduct):
        """Sets the apiproduct of this GoogleCloudApigeeV1RatePlan.

        Name of the API product that the rate plan is associated with.

        :param apiproduct: The apiproduct of this GoogleCloudApigeeV1RatePlan.
        :type apiproduct: str
        """

        self._apiproduct = apiproduct

    @property
    def billing_period(self):
        """Gets the billing_period of this GoogleCloudApigeeV1RatePlan.

        Frequency at which the customer will be billed.

        :return: The billing_period of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this GoogleCloudApigeeV1RatePlan.

        Frequency at which the customer will be billed.

        :param billing_period: The billing_period of this GoogleCloudApigeeV1RatePlan.
        :type billing_period: str
        """
        allowed_values = ["BILLING_PERIOD_UNSPECIFIED", "WEEKLY", "MONTHLY"]  # noqa: E501
        if billing_period not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period` ({0}), must be one of {1}"
                .format(billing_period, allowed_values)
            )

        self._billing_period = billing_period

    @property
    def consumption_pricing_rates(self):
        """Gets the consumption_pricing_rates of this GoogleCloudApigeeV1RatePlan.

        API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { \"start\": 1, \"end\": 100, \"fee\": 75 }, { \"start\": 101, \"end\": 200, \"fee\": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.

        :return: The consumption_pricing_rates of this GoogleCloudApigeeV1RatePlan.
        :rtype: List[GoogleCloudApigeeV1RateRange]
        """
        return self._consumption_pricing_rates

    @consumption_pricing_rates.setter
    def consumption_pricing_rates(self, consumption_pricing_rates):
        """Sets the consumption_pricing_rates of this GoogleCloudApigeeV1RatePlan.

        API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { \"start\": 1, \"end\": 100, \"fee\": 75 }, { \"start\": 101, \"end\": 200, \"fee\": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.

        :param consumption_pricing_rates: The consumption_pricing_rates of this GoogleCloudApigeeV1RatePlan.
        :type consumption_pricing_rates: List[GoogleCloudApigeeV1RateRange]
        """

        self._consumption_pricing_rates = consumption_pricing_rates

    @property
    def consumption_pricing_type(self):
        """Gets the consumption_pricing_type of this GoogleCloudApigeeV1RatePlan.

        Pricing model used for consumption-based charges.

        :return: The consumption_pricing_type of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._consumption_pricing_type

    @consumption_pricing_type.setter
    def consumption_pricing_type(self, consumption_pricing_type):
        """Sets the consumption_pricing_type of this GoogleCloudApigeeV1RatePlan.

        Pricing model used for consumption-based charges.

        :param consumption_pricing_type: The consumption_pricing_type of this GoogleCloudApigeeV1RatePlan.
        :type consumption_pricing_type: str
        """
        allowed_values = ["CONSUMPTION_PRICING_TYPE_UNSPECIFIED", "FIXED_PER_UNIT", "BANDED", "TIERED", "STAIRSTEP"]  # noqa: E501
        if consumption_pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `consumption_pricing_type` ({0}), must be one of {1}"
                .format(consumption_pricing_type, allowed_values)
            )

        self._consumption_pricing_type = consumption_pricing_type

    @property
    def created_at(self):
        """Gets the created_at of this GoogleCloudApigeeV1RatePlan.

        Output only. Time that the rate plan was created in milliseconds since epoch.

        :return: The created_at of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GoogleCloudApigeeV1RatePlan.

        Output only. Time that the rate plan was created in milliseconds since epoch.

        :param created_at: The created_at of this GoogleCloudApigeeV1RatePlan.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudApigeeV1RatePlan.

        Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.

        :return: The currency_code of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudApigeeV1RatePlan.

        Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.

        :param currency_code: The currency_code of this GoogleCloudApigeeV1RatePlan.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this GoogleCloudApigeeV1RatePlan.

        Description of the rate plan.

        :return: The description of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudApigeeV1RatePlan.

        Description of the rate plan.

        :param description: The description of this GoogleCloudApigeeV1RatePlan.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudApigeeV1RatePlan.

        Display name of the rate plan.

        :return: The display_name of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudApigeeV1RatePlan.

        Display name of the rate plan.

        :param display_name: The display_name of this GoogleCloudApigeeV1RatePlan.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudApigeeV1RatePlan.

        Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.

        :return: The end_time of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudApigeeV1RatePlan.

        Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.

        :param end_time: The end_time of this GoogleCloudApigeeV1RatePlan.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def fixed_fee_frequency(self):
        """Gets the fixed_fee_frequency of this GoogleCloudApigeeV1RatePlan.

        Frequency at which the fixed fee is charged.

        :return: The fixed_fee_frequency of this GoogleCloudApigeeV1RatePlan.
        :rtype: int
        """
        return self._fixed_fee_frequency

    @fixed_fee_frequency.setter
    def fixed_fee_frequency(self, fixed_fee_frequency):
        """Sets the fixed_fee_frequency of this GoogleCloudApigeeV1RatePlan.

        Frequency at which the fixed fee is charged.

        :param fixed_fee_frequency: The fixed_fee_frequency of this GoogleCloudApigeeV1RatePlan.
        :type fixed_fee_frequency: int
        """

        self._fixed_fee_frequency = fixed_fee_frequency

    @property
    def fixed_recurring_fee(self):
        """Gets the fixed_recurring_fee of this GoogleCloudApigeeV1RatePlan.


        :return: The fixed_recurring_fee of this GoogleCloudApigeeV1RatePlan.
        :rtype: GoogleTypeMoney
        """
        return self._fixed_recurring_fee

    @fixed_recurring_fee.setter
    def fixed_recurring_fee(self, fixed_recurring_fee):
        """Sets the fixed_recurring_fee of this GoogleCloudApigeeV1RatePlan.


        :param fixed_recurring_fee: The fixed_recurring_fee of this GoogleCloudApigeeV1RatePlan.
        :type fixed_recurring_fee: GoogleTypeMoney
        """

        self._fixed_recurring_fee = fixed_recurring_fee

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this GoogleCloudApigeeV1RatePlan.

        Output only. Time the rate plan was last modified in milliseconds since epoch.

        :return: The last_modified_at of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this GoogleCloudApigeeV1RatePlan.

        Output only. Time the rate plan was last modified in milliseconds since epoch.

        :param last_modified_at: The last_modified_at of this GoogleCloudApigeeV1RatePlan.
        :type last_modified_at: str
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this GoogleCloudApigeeV1RatePlan.

        Output only. Name of the rate plan.

        :return: The name of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudApigeeV1RatePlan.

        Output only. Name of the rate plan.

        :param name: The name of this GoogleCloudApigeeV1RatePlan.
        :type name: str
        """

        self._name = name

    @property
    def payment_funding_model(self):
        """Gets the payment_funding_model of this GoogleCloudApigeeV1RatePlan.

        DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.

        :return: The payment_funding_model of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._payment_funding_model

    @payment_funding_model.setter
    def payment_funding_model(self, payment_funding_model):
        """Sets the payment_funding_model of this GoogleCloudApigeeV1RatePlan.

        DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.

        :param payment_funding_model: The payment_funding_model of this GoogleCloudApigeeV1RatePlan.
        :type payment_funding_model: str
        """
        allowed_values = ["PAYMENT_FUNDING_MODEL_UNSPECIFIED", "PREPAID", "POSTPAID"]  # noqa: E501
        if payment_funding_model not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_funding_model` ({0}), must be one of {1}"
                .format(payment_funding_model, allowed_values)
            )

        self._payment_funding_model = payment_funding_model

    @property
    def revenue_share_rates(self):
        """Gets the revenue_share_rates of this GoogleCloudApigeeV1RatePlan.

        Details of the revenue sharing model.

        :return: The revenue_share_rates of this GoogleCloudApigeeV1RatePlan.
        :rtype: List[GoogleCloudApigeeV1RevenueShareRange]
        """
        return self._revenue_share_rates

    @revenue_share_rates.setter
    def revenue_share_rates(self, revenue_share_rates):
        """Sets the revenue_share_rates of this GoogleCloudApigeeV1RatePlan.

        Details of the revenue sharing model.

        :param revenue_share_rates: The revenue_share_rates of this GoogleCloudApigeeV1RatePlan.
        :type revenue_share_rates: List[GoogleCloudApigeeV1RevenueShareRange]
        """

        self._revenue_share_rates = revenue_share_rates

    @property
    def revenue_share_type(self):
        """Gets the revenue_share_type of this GoogleCloudApigeeV1RatePlan.

        Method used to calculate the revenue that is shared with developers.

        :return: The revenue_share_type of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._revenue_share_type

    @revenue_share_type.setter
    def revenue_share_type(self, revenue_share_type):
        """Sets the revenue_share_type of this GoogleCloudApigeeV1RatePlan.

        Method used to calculate the revenue that is shared with developers.

        :param revenue_share_type: The revenue_share_type of this GoogleCloudApigeeV1RatePlan.
        :type revenue_share_type: str
        """
        allowed_values = ["REVENUE_SHARE_TYPE_UNSPECIFIED", "FIXED", "VOLUME_BANDED"]  # noqa: E501
        if revenue_share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `revenue_share_type` ({0}), must be one of {1}"
                .format(revenue_share_type, allowed_values)
            )

        self._revenue_share_type = revenue_share_type

    @property
    def setup_fee(self):
        """Gets the setup_fee of this GoogleCloudApigeeV1RatePlan.


        :return: The setup_fee of this GoogleCloudApigeeV1RatePlan.
        :rtype: GoogleTypeMoney
        """
        return self._setup_fee

    @setup_fee.setter
    def setup_fee(self, setup_fee):
        """Sets the setup_fee of this GoogleCloudApigeeV1RatePlan.


        :param setup_fee: The setup_fee of this GoogleCloudApigeeV1RatePlan.
        :type setup_fee: GoogleTypeMoney
        """

        self._setup_fee = setup_fee

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudApigeeV1RatePlan.

        Time when the rate plan becomes active in milliseconds since epoch.

        :return: The start_time of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudApigeeV1RatePlan.

        Time when the rate plan becomes active in milliseconds since epoch.

        :param start_time: The start_time of this GoogleCloudApigeeV1RatePlan.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudApigeeV1RatePlan.

        Current state of the rate plan (draft or published).

        :return: The state of this GoogleCloudApigeeV1RatePlan.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudApigeeV1RatePlan.

        Current state of the rate plan (draft or published).

        :param state: The state of this GoogleCloudApigeeV1RatePlan.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "PUBLISHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
