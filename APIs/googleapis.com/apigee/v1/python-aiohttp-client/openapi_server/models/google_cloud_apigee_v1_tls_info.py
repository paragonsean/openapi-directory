# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_tls_info_common_name import GoogleCloudApigeeV1TlsInfoCommonName
from openapi_server import util


class GoogleCloudApigeeV1TlsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphers: List[str]=None, client_auth_enabled: bool=None, common_name: GoogleCloudApigeeV1TlsInfoCommonName=None, enabled: bool=None, ignore_validation_errors: bool=None, key_alias: str=None, key_store: str=None, protocols: List[str]=None, trust_store: str=None):
        """GoogleCloudApigeeV1TlsInfo - a model defined in OpenAPI

        :param ciphers: The ciphers of this GoogleCloudApigeeV1TlsInfo.
        :param client_auth_enabled: The client_auth_enabled of this GoogleCloudApigeeV1TlsInfo.
        :param common_name: The common_name of this GoogleCloudApigeeV1TlsInfo.
        :param enabled: The enabled of this GoogleCloudApigeeV1TlsInfo.
        :param ignore_validation_errors: The ignore_validation_errors of this GoogleCloudApigeeV1TlsInfo.
        :param key_alias: The key_alias of this GoogleCloudApigeeV1TlsInfo.
        :param key_store: The key_store of this GoogleCloudApigeeV1TlsInfo.
        :param protocols: The protocols of this GoogleCloudApigeeV1TlsInfo.
        :param trust_store: The trust_store of this GoogleCloudApigeeV1TlsInfo.
        """
        self.openapi_types = {
            'ciphers': List[str],
            'client_auth_enabled': bool,
            'common_name': GoogleCloudApigeeV1TlsInfoCommonName,
            'enabled': bool,
            'ignore_validation_errors': bool,
            'key_alias': str,
            'key_store': str,
            'protocols': List[str],
            'trust_store': str
        }

        self.attribute_map = {
            'ciphers': 'ciphers',
            'client_auth_enabled': 'clientAuthEnabled',
            'common_name': 'commonName',
            'enabled': 'enabled',
            'ignore_validation_errors': 'ignoreValidationErrors',
            'key_alias': 'keyAlias',
            'key_store': 'keyStore',
            'protocols': 'protocols',
            'trust_store': 'trustStore'
        }

        self._ciphers = ciphers
        self._client_auth_enabled = client_auth_enabled
        self._common_name = common_name
        self._enabled = enabled
        self._ignore_validation_errors = ignore_validation_errors
        self._key_alias = key_alias
        self._key_store = key_store
        self._protocols = protocols
        self._trust_store = trust_store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1TlsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1TlsInfo of this GoogleCloudApigeeV1TlsInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphers(self):
        """Gets the ciphers of this GoogleCloudApigeeV1TlsInfo.

        The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.

        :return: The ciphers of this GoogleCloudApigeeV1TlsInfo.
        :rtype: List[str]
        """
        return self._ciphers

    @ciphers.setter
    def ciphers(self, ciphers):
        """Sets the ciphers of this GoogleCloudApigeeV1TlsInfo.

        The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.

        :param ciphers: The ciphers of this GoogleCloudApigeeV1TlsInfo.
        :type ciphers: List[str]
        """

        self._ciphers = ciphers

    @property
    def client_auth_enabled(self):
        """Gets the client_auth_enabled of this GoogleCloudApigeeV1TlsInfo.

        Optional. Enables two-way TLS.

        :return: The client_auth_enabled of this GoogleCloudApigeeV1TlsInfo.
        :rtype: bool
        """
        return self._client_auth_enabled

    @client_auth_enabled.setter
    def client_auth_enabled(self, client_auth_enabled):
        """Sets the client_auth_enabled of this GoogleCloudApigeeV1TlsInfo.

        Optional. Enables two-way TLS.

        :param client_auth_enabled: The client_auth_enabled of this GoogleCloudApigeeV1TlsInfo.
        :type client_auth_enabled: bool
        """

        self._client_auth_enabled = client_auth_enabled

    @property
    def common_name(self):
        """Gets the common_name of this GoogleCloudApigeeV1TlsInfo.


        :return: The common_name of this GoogleCloudApigeeV1TlsInfo.
        :rtype: GoogleCloudApigeeV1TlsInfoCommonName
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this GoogleCloudApigeeV1TlsInfo.


        :param common_name: The common_name of this GoogleCloudApigeeV1TlsInfo.
        :type common_name: GoogleCloudApigeeV1TlsInfoCommonName
        """

        self._common_name = common_name

    @property
    def enabled(self):
        """Gets the enabled of this GoogleCloudApigeeV1TlsInfo.

        Required. Enables TLS. If false, neither one-way nor two-way TLS will be enabled.

        :return: The enabled of this GoogleCloudApigeeV1TlsInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GoogleCloudApigeeV1TlsInfo.

        Required. Enables TLS. If false, neither one-way nor two-way TLS will be enabled.

        :param enabled: The enabled of this GoogleCloudApigeeV1TlsInfo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ignore_validation_errors(self):
        """Gets the ignore_validation_errors of this GoogleCloudApigeeV1TlsInfo.

        If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.

        :return: The ignore_validation_errors of this GoogleCloudApigeeV1TlsInfo.
        :rtype: bool
        """
        return self._ignore_validation_errors

    @ignore_validation_errors.setter
    def ignore_validation_errors(self, ignore_validation_errors):
        """Sets the ignore_validation_errors of this GoogleCloudApigeeV1TlsInfo.

        If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.

        :param ignore_validation_errors: The ignore_validation_errors of this GoogleCloudApigeeV1TlsInfo.
        :type ignore_validation_errors: bool
        """

        self._ignore_validation_errors = ignore_validation_errors

    @property
    def key_alias(self):
        """Gets the key_alias of this GoogleCloudApigeeV1TlsInfo.

        Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.

        :return: The key_alias of this GoogleCloudApigeeV1TlsInfo.
        :rtype: str
        """
        return self._key_alias

    @key_alias.setter
    def key_alias(self, key_alias):
        """Sets the key_alias of this GoogleCloudApigeeV1TlsInfo.

        Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.

        :param key_alias: The key_alias of this GoogleCloudApigeeV1TlsInfo.
        :type key_alias: str
        """

        self._key_alias = key_alias

    @property
    def key_store(self):
        """Gets the key_store of this GoogleCloudApigeeV1TlsInfo.

        Required if `client_auth_enabled` is true. The resource ID of the keystore.

        :return: The key_store of this GoogleCloudApigeeV1TlsInfo.
        :rtype: str
        """
        return self._key_store

    @key_store.setter
    def key_store(self, key_store):
        """Sets the key_store of this GoogleCloudApigeeV1TlsInfo.

        Required if `client_auth_enabled` is true. The resource ID of the keystore.

        :param key_store: The key_store of this GoogleCloudApigeeV1TlsInfo.
        :type key_store: str
        """

        self._key_store = key_store

    @property
    def protocols(self):
        """Gets the protocols of this GoogleCloudApigeeV1TlsInfo.

        The TLS versioins to be used.

        :return: The protocols of this GoogleCloudApigeeV1TlsInfo.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this GoogleCloudApigeeV1TlsInfo.

        The TLS versioins to be used.

        :param protocols: The protocols of this GoogleCloudApigeeV1TlsInfo.
        :type protocols: List[str]
        """

        self._protocols = protocols

    @property
    def trust_store(self):
        """Gets the trust_store of this GoogleCloudApigeeV1TlsInfo.

        The resource ID of the truststore.

        :return: The trust_store of this GoogleCloudApigeeV1TlsInfo.
        :rtype: str
        """
        return self._trust_store

    @trust_store.setter
    def trust_store(self, trust_store):
        """Sets the trust_store of this GoogleCloudApigeeV1TlsInfo.

        The resource ID of the truststore.

        :param trust_store: The trust_store of this GoogleCloudApigeeV1TlsInfo.
        :type trust_store: str
        """

        self._trust_store = trust_store
