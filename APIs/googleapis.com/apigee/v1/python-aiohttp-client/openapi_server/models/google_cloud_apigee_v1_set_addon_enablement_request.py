# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1SetAddonEnablementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_enabled: bool=None, api_security_enabled: bool=None):
        """GoogleCloudApigeeV1SetAddonEnablementRequest - a model defined in OpenAPI

        :param analytics_enabled: The analytics_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        :param api_security_enabled: The api_security_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        """
        self.openapi_types = {
            'analytics_enabled': bool,
            'api_security_enabled': bool
        }

        self.attribute_map = {
            'analytics_enabled': 'analyticsEnabled',
            'api_security_enabled': 'apiSecurityEnabled'
        }

        self._analytics_enabled = analytics_enabled
        self._api_security_enabled = api_security_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1SetAddonEnablementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1SetAddonEnablementRequest of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_enabled(self):
        """Gets the analytics_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.

        If the Analytics should be enabled in the environment.

        :return: The analytics_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        :rtype: bool
        """
        return self._analytics_enabled

    @analytics_enabled.setter
    def analytics_enabled(self, analytics_enabled):
        """Sets the analytics_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.

        If the Analytics should be enabled in the environment.

        :param analytics_enabled: The analytics_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        :type analytics_enabled: bool
        """

        self._analytics_enabled = analytics_enabled

    @property
    def api_security_enabled(self):
        """Gets the api_security_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.

        If the API Security should be enabled in the environment.

        :return: The api_security_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        :rtype: bool
        """
        return self._api_security_enabled

    @api_security_enabled.setter
    def api_security_enabled(self, api_security_enabled):
        """Sets the api_security_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.

        If the API Security should be enabled in the environment.

        :param api_security_enabled: The api_security_enabled of this GoogleCloudApigeeV1SetAddonEnablementRequest.
        :type api_security_enabled: bool
        """

        self._api_security_enabled = api_security_enabled
