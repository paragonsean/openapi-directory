# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1KeyValueMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted: bool=None, name: str=None):
        """GoogleCloudApigeeV1KeyValueMap - a model defined in OpenAPI

        :param encrypted: The encrypted of this GoogleCloudApigeeV1KeyValueMap.
        :param name: The name of this GoogleCloudApigeeV1KeyValueMap.
        """
        self.openapi_types = {
            'encrypted': bool,
            'name': str
        }

        self.attribute_map = {
            'encrypted': 'encrypted',
            'name': 'name'
        }

        self._encrypted = encrypted
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1KeyValueMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1KeyValueMap of this GoogleCloudApigeeV1KeyValueMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted(self):
        """Gets the encrypted of this GoogleCloudApigeeV1KeyValueMap.

        Required. Flag that specifies whether entry values will be encrypted. This field is retained for backward compatibility and the value of encrypted will always be `true`. Apigee X and hybrid do not support unencrypted key value maps.

        :return: The encrypted of this GoogleCloudApigeeV1KeyValueMap.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this GoogleCloudApigeeV1KeyValueMap.

        Required. Flag that specifies whether entry values will be encrypted. This field is retained for backward compatibility and the value of encrypted will always be `true`. Apigee X and hybrid do not support unencrypted key value maps.

        :param encrypted: The encrypted of this GoogleCloudApigeeV1KeyValueMap.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def name(self):
        """Gets the name of this GoogleCloudApigeeV1KeyValueMap.

        Required. ID of the key value map.

        :return: The name of this GoogleCloudApigeeV1KeyValueMap.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudApigeeV1KeyValueMap.

        Required. ID of the key value map.

        :param name: The name of this GoogleCloudApigeeV1KeyValueMap.
        :type name: str
        """

        self._name = name
