# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_addons_config import GoogleCloudApigeeV1AddonsConfig
from openapi_server.models.google_cloud_apigee_v1_properties import GoogleCloudApigeeV1Properties
from openapi_server import util


class GoogleCloudApigeeV1Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons_config: GoogleCloudApigeeV1AddonsConfig=None, analytics_region: str=None, api_consumer_data_encryption_key_name: str=None, api_consumer_data_location: str=None, apigee_project_id: str=None, attributes: List[str]=None, authorized_network: str=None, billing_type: str=None, ca_certificate: str=None, control_plane_encryption_key_name: str=None, created_at: str=None, customer_name: str=None, description: str=None, disable_vpc_peering: bool=None, display_name: str=None, environments: List[str]=None, expires_at: str=None, last_modified_at: str=None, name: str=None, portal_disabled: bool=None, project_id: str=None, properties: GoogleCloudApigeeV1Properties=None, runtime_database_encryption_key_name: str=None, runtime_type: str=None, state: str=None, subscription_plan: str=None, subscription_type: str=None, type: str=None):
        """GoogleCloudApigeeV1Organization - a model defined in OpenAPI

        :param addons_config: The addons_config of this GoogleCloudApigeeV1Organization.
        :param analytics_region: The analytics_region of this GoogleCloudApigeeV1Organization.
        :param api_consumer_data_encryption_key_name: The api_consumer_data_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :param api_consumer_data_location: The api_consumer_data_location of this GoogleCloudApigeeV1Organization.
        :param apigee_project_id: The apigee_project_id of this GoogleCloudApigeeV1Organization.
        :param attributes: The attributes of this GoogleCloudApigeeV1Organization.
        :param authorized_network: The authorized_network of this GoogleCloudApigeeV1Organization.
        :param billing_type: The billing_type of this GoogleCloudApigeeV1Organization.
        :param ca_certificate: The ca_certificate of this GoogleCloudApigeeV1Organization.
        :param control_plane_encryption_key_name: The control_plane_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :param created_at: The created_at of this GoogleCloudApigeeV1Organization.
        :param customer_name: The customer_name of this GoogleCloudApigeeV1Organization.
        :param description: The description of this GoogleCloudApigeeV1Organization.
        :param disable_vpc_peering: The disable_vpc_peering of this GoogleCloudApigeeV1Organization.
        :param display_name: The display_name of this GoogleCloudApigeeV1Organization.
        :param environments: The environments of this GoogleCloudApigeeV1Organization.
        :param expires_at: The expires_at of this GoogleCloudApigeeV1Organization.
        :param last_modified_at: The last_modified_at of this GoogleCloudApigeeV1Organization.
        :param name: The name of this GoogleCloudApigeeV1Organization.
        :param portal_disabled: The portal_disabled of this GoogleCloudApigeeV1Organization.
        :param project_id: The project_id of this GoogleCloudApigeeV1Organization.
        :param properties: The properties of this GoogleCloudApigeeV1Organization.
        :param runtime_database_encryption_key_name: The runtime_database_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :param runtime_type: The runtime_type of this GoogleCloudApigeeV1Organization.
        :param state: The state of this GoogleCloudApigeeV1Organization.
        :param subscription_plan: The subscription_plan of this GoogleCloudApigeeV1Organization.
        :param subscription_type: The subscription_type of this GoogleCloudApigeeV1Organization.
        :param type: The type of this GoogleCloudApigeeV1Organization.
        """
        self.openapi_types = {
            'addons_config': GoogleCloudApigeeV1AddonsConfig,
            'analytics_region': str,
            'api_consumer_data_encryption_key_name': str,
            'api_consumer_data_location': str,
            'apigee_project_id': str,
            'attributes': List[str],
            'authorized_network': str,
            'billing_type': str,
            'ca_certificate': str,
            'control_plane_encryption_key_name': str,
            'created_at': str,
            'customer_name': str,
            'description': str,
            'disable_vpc_peering': bool,
            'display_name': str,
            'environments': List[str],
            'expires_at': str,
            'last_modified_at': str,
            'name': str,
            'portal_disabled': bool,
            'project_id': str,
            'properties': GoogleCloudApigeeV1Properties,
            'runtime_database_encryption_key_name': str,
            'runtime_type': str,
            'state': str,
            'subscription_plan': str,
            'subscription_type': str,
            'type': str
        }

        self.attribute_map = {
            'addons_config': 'addonsConfig',
            'analytics_region': 'analyticsRegion',
            'api_consumer_data_encryption_key_name': 'apiConsumerDataEncryptionKeyName',
            'api_consumer_data_location': 'apiConsumerDataLocation',
            'apigee_project_id': 'apigeeProjectId',
            'attributes': 'attributes',
            'authorized_network': 'authorizedNetwork',
            'billing_type': 'billingType',
            'ca_certificate': 'caCertificate',
            'control_plane_encryption_key_name': 'controlPlaneEncryptionKeyName',
            'created_at': 'createdAt',
            'customer_name': 'customerName',
            'description': 'description',
            'disable_vpc_peering': 'disableVpcPeering',
            'display_name': 'displayName',
            'environments': 'environments',
            'expires_at': 'expiresAt',
            'last_modified_at': 'lastModifiedAt',
            'name': 'name',
            'portal_disabled': 'portalDisabled',
            'project_id': 'projectId',
            'properties': 'properties',
            'runtime_database_encryption_key_name': 'runtimeDatabaseEncryptionKeyName',
            'runtime_type': 'runtimeType',
            'state': 'state',
            'subscription_plan': 'subscriptionPlan',
            'subscription_type': 'subscriptionType',
            'type': 'type'
        }

        self._addons_config = addons_config
        self._analytics_region = analytics_region
        self._api_consumer_data_encryption_key_name = api_consumer_data_encryption_key_name
        self._api_consumer_data_location = api_consumer_data_location
        self._apigee_project_id = apigee_project_id
        self._attributes = attributes
        self._authorized_network = authorized_network
        self._billing_type = billing_type
        self._ca_certificate = ca_certificate
        self._control_plane_encryption_key_name = control_plane_encryption_key_name
        self._created_at = created_at
        self._customer_name = customer_name
        self._description = description
        self._disable_vpc_peering = disable_vpc_peering
        self._display_name = display_name
        self._environments = environments
        self._expires_at = expires_at
        self._last_modified_at = last_modified_at
        self._name = name
        self._portal_disabled = portal_disabled
        self._project_id = project_id
        self._properties = properties
        self._runtime_database_encryption_key_name = runtime_database_encryption_key_name
        self._runtime_type = runtime_type
        self._state = state
        self._subscription_plan = subscription_plan
        self._subscription_type = subscription_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1Organization of this GoogleCloudApigeeV1Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons_config(self):
        """Gets the addons_config of this GoogleCloudApigeeV1Organization.


        :return: The addons_config of this GoogleCloudApigeeV1Organization.
        :rtype: GoogleCloudApigeeV1AddonsConfig
        """
        return self._addons_config

    @addons_config.setter
    def addons_config(self, addons_config):
        """Sets the addons_config of this GoogleCloudApigeeV1Organization.


        :param addons_config: The addons_config of this GoogleCloudApigeeV1Organization.
        :type addons_config: GoogleCloudApigeeV1AddonsConfig
        """

        self._addons_config = addons_config

    @property
    def analytics_region(self):
        """Gets the analytics_region of this GoogleCloudApigeeV1Organization.

        Required. DEPRECATED: This field will eventually be deprecated and replaced with a differently-named field. Primary Google Cloud region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).

        :return: The analytics_region of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._analytics_region

    @analytics_region.setter
    def analytics_region(self, analytics_region):
        """Sets the analytics_region of this GoogleCloudApigeeV1Organization.

        Required. DEPRECATED: This field will eventually be deprecated and replaced with a differently-named field. Primary Google Cloud region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).

        :param analytics_region: The analytics_region of this GoogleCloudApigeeV1Organization.
        :type analytics_region: str
        """

        self._analytics_region = analytics_region

    @property
    def api_consumer_data_encryption_key_name(self):
        """Gets the api_consumer_data_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting API consumer data. Required for US/EU regions when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION` or the region is not US/EU, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`

        :return: The api_consumer_data_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._api_consumer_data_encryption_key_name

    @api_consumer_data_encryption_key_name.setter
    def api_consumer_data_encryption_key_name(self, api_consumer_data_encryption_key_name):
        """Sets the api_consumer_data_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting API consumer data. Required for US/EU regions when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION` or the region is not US/EU, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`

        :param api_consumer_data_encryption_key_name: The api_consumer_data_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :type api_consumer_data_encryption_key_name: str
        """

        self._api_consumer_data_encryption_key_name = api_consumer_data_encryption_key_name

    @property
    def api_consumer_data_location(self):
        """Gets the api_consumer_data_location of this GoogleCloudApigeeV1Organization.

        This field is needed only for customers with control plane in US or EU. Apigee stores some control plane data only in single region. This field determines which single region Apigee should use. For example: \"us-west1\" when control plane is in US or \"europe-west2\" when control plane is in EU.

        :return: The api_consumer_data_location of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._api_consumer_data_location

    @api_consumer_data_location.setter
    def api_consumer_data_location(self, api_consumer_data_location):
        """Sets the api_consumer_data_location of this GoogleCloudApigeeV1Organization.

        This field is needed only for customers with control plane in US or EU. Apigee stores some control plane data only in single region. This field determines which single region Apigee should use. For example: \"us-west1\" when control plane is in US or \"europe-west2\" when control plane is in EU.

        :param api_consumer_data_location: The api_consumer_data_location of this GoogleCloudApigeeV1Organization.
        :type api_consumer_data_location: str
        """

        self._api_consumer_data_location = api_consumer_data_location

    @property
    def apigee_project_id(self):
        """Gets the apigee_project_id of this GoogleCloudApigeeV1Organization.

        Output only. Apigee Project ID associated with the organization. Use this project to allowlist Apigee in the Service Attachment when using private service connect with Apigee.

        :return: The apigee_project_id of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._apigee_project_id

    @apigee_project_id.setter
    def apigee_project_id(self, apigee_project_id):
        """Sets the apigee_project_id of this GoogleCloudApigeeV1Organization.

        Output only. Apigee Project ID associated with the organization. Use this project to allowlist Apigee in the Service Attachment when using private service connect with Apigee.

        :param apigee_project_id: The apigee_project_id of this GoogleCloudApigeeV1Organization.
        :type apigee_project_id: str
        """

        self._apigee_project_id = apigee_project_id

    @property
    def attributes(self):
        """Gets the attributes of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :return: The attributes of this GoogleCloudApigeeV1Organization.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :param attributes: The attributes of this GoogleCloudApigeeV1Organization.
        :type attributes: List[str]
        """

        self._attributes = attributes

    @property
    def authorized_network(self):
        """Gets the authorized_network of this GoogleCloudApigeeV1Organization.

        Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Valid only when [RuntimeType](#RuntimeType) is set to `CLOUD`. The value must be set before the creation of a runtime instance and can be updated only when there are no runtime instances. For example: `default`. Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork` **Note:** Not supported for Apigee hybrid.

        :return: The authorized_network of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._authorized_network

    @authorized_network.setter
    def authorized_network(self, authorized_network):
        """Sets the authorized_network of this GoogleCloudApigeeV1Organization.

        Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Valid only when [RuntimeType](#RuntimeType) is set to `CLOUD`. The value must be set before the creation of a runtime instance and can be updated only when there are no runtime instances. For example: `default`. Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork` **Note:** Not supported for Apigee hybrid.

        :param authorized_network: The authorized_network of this GoogleCloudApigeeV1Organization.
        :type authorized_network: str
        """

        self._authorized_network = authorized_network

    @property
    def billing_type(self):
        """Gets the billing_type of this GoogleCloudApigeeV1Organization.

        Billing type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).

        :return: The billing_type of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._billing_type

    @billing_type.setter
    def billing_type(self, billing_type):
        """Sets the billing_type of this GoogleCloudApigeeV1Organization.

        Billing type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).

        :param billing_type: The billing_type of this GoogleCloudApigeeV1Organization.
        :type billing_type: str
        """
        allowed_values = ["BILLING_TYPE_UNSPECIFIED", "SUBSCRIPTION", "EVALUATION", "PAYG"]  # noqa: E501
        if billing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_type` ({0}), must be one of {1}"
                .format(billing_type, allowed_values)
            )

        self._billing_type = billing_type

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this GoogleCloudApigeeV1Organization.

        Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when [RuntimeType](#RuntimeType) is `CLOUD`.

        :return: The ca_certificate of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this GoogleCloudApigeeV1Organization.

        Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when [RuntimeType](#RuntimeType) is `CLOUD`.

        :param ca_certificate: The ca_certificate of this GoogleCloudApigeeV1Organization.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def control_plane_encryption_key_name(self):
        """Gets the control_plane_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting control plane data that is stored in a multi region. Required when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`

        :return: The control_plane_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._control_plane_encryption_key_name

    @control_plane_encryption_key_name.setter
    def control_plane_encryption_key_name(self, control_plane_encryption_key_name):
        """Sets the control_plane_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting control plane data that is stored in a multi region. Required when [BillingType](#BillingType) is `SUBSCRIPTION`. When [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`

        :param control_plane_encryption_key_name: The control_plane_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :type control_plane_encryption_key_name: str
        """

        self._control_plane_encryption_key_name = control_plane_encryption_key_name

    @property
    def created_at(self):
        """Gets the created_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization was created in milliseconds since epoch.

        :return: The created_at of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization was created in milliseconds since epoch.

        :param created_at: The created_at of this GoogleCloudApigeeV1Organization.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_name(self):
        """Gets the customer_name of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :return: The customer_name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :param customer_name: The customer_name of this GoogleCloudApigeeV1Organization.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def description(self):
        """Gets the description of this GoogleCloudApigeeV1Organization.

        Description of the Apigee organization.

        :return: The description of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudApigeeV1Organization.

        Description of the Apigee organization.

        :param description: The description of this GoogleCloudApigeeV1Organization.
        :type description: str
        """

        self._description = description

    @property
    def disable_vpc_peering(self):
        """Gets the disable_vpc_peering of this GoogleCloudApigeeV1Organization.

        Optional. Flag that specifies whether the VPC Peering through Private Google Access should be disabled between the consumer network and Apigee. Valid only when RuntimeType is set to CLOUD. Required if an authorizedNetwork on the consumer project is not provided, in which case the flag should be set to true. The value must be set before the creation of any Apigee runtime instance and can be updated only when there are no runtime instances. **Note:** Apigee will be deprecating the vpc peering model that requires you to provide 'authorizedNetwork', by making the non-peering model as the default way of provisioning Apigee organization in future. So, this will be a temporary flag to enable the transition. Not supported for Apigee hybrid.

        :return: The disable_vpc_peering of this GoogleCloudApigeeV1Organization.
        :rtype: bool
        """
        return self._disable_vpc_peering

    @disable_vpc_peering.setter
    def disable_vpc_peering(self, disable_vpc_peering):
        """Sets the disable_vpc_peering of this GoogleCloudApigeeV1Organization.

        Optional. Flag that specifies whether the VPC Peering through Private Google Access should be disabled between the consumer network and Apigee. Valid only when RuntimeType is set to CLOUD. Required if an authorizedNetwork on the consumer project is not provided, in which case the flag should be set to true. The value must be set before the creation of any Apigee runtime instance and can be updated only when there are no runtime instances. **Note:** Apigee will be deprecating the vpc peering model that requires you to provide 'authorizedNetwork', by making the non-peering model as the default way of provisioning Apigee organization in future. So, this will be a temporary flag to enable the transition. Not supported for Apigee hybrid.

        :param disable_vpc_peering: The disable_vpc_peering of this GoogleCloudApigeeV1Organization.
        :type disable_vpc_peering: bool
        """

        self._disable_vpc_peering = disable_vpc_peering

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudApigeeV1Organization.

        Display name for the Apigee organization. Unused, but reserved for future use.

        :return: The display_name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudApigeeV1Organization.

        Display name for the Apigee organization. Unused, but reserved for future use.

        :param display_name: The display_name of this GoogleCloudApigeeV1Organization.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environments(self):
        """Gets the environments of this GoogleCloudApigeeV1Organization.

        Output only. List of environments in the Apigee organization.

        :return: The environments of this GoogleCloudApigeeV1Organization.
        :rtype: List[str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this GoogleCloudApigeeV1Organization.

        Output only. List of environments in the Apigee organization.

        :param environments: The environments of this GoogleCloudApigeeV1Organization.
        :type environments: List[str]
        """

        self._environments = environments

    @property
    def expires_at(self):
        """Gets the expires_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization is scheduled for deletion.

        :return: The expires_at of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization is scheduled for deletion.

        :param expires_at: The expires_at of this GoogleCloudApigeeV1Organization.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization was last modified in milliseconds since epoch.

        :return: The last_modified_at of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this GoogleCloudApigeeV1Organization.

        Output only. Time that the Apigee organization was last modified in milliseconds since epoch.

        :param last_modified_at: The last_modified_at of this GoogleCloudApigeeV1Organization.
        :type last_modified_at: str
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this GoogleCloudApigeeV1Organization.

        Output only. Name of the Apigee organization.

        :return: The name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudApigeeV1Organization.

        Output only. Name of the Apigee organization.

        :param name: The name of this GoogleCloudApigeeV1Organization.
        :type name: str
        """

        self._name = name

    @property
    def portal_disabled(self):
        """Gets the portal_disabled of this GoogleCloudApigeeV1Organization.

        Configuration for the Portals settings.

        :return: The portal_disabled of this GoogleCloudApigeeV1Organization.
        :rtype: bool
        """
        return self._portal_disabled

    @portal_disabled.setter
    def portal_disabled(self, portal_disabled):
        """Sets the portal_disabled of this GoogleCloudApigeeV1Organization.

        Configuration for the Portals settings.

        :param portal_disabled: The portal_disabled of this GoogleCloudApigeeV1Organization.
        :type portal_disabled: bool
        """

        self._portal_disabled = portal_disabled

    @property
    def project_id(self):
        """Gets the project_id of this GoogleCloudApigeeV1Organization.

        Output only. Project ID associated with the Apigee organization.

        :return: The project_id of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleCloudApigeeV1Organization.

        Output only. Project ID associated with the Apigee organization.

        :param project_id: The project_id of this GoogleCloudApigeeV1Organization.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def properties(self):
        """Gets the properties of this GoogleCloudApigeeV1Organization.


        :return: The properties of this GoogleCloudApigeeV1Organization.
        :rtype: GoogleCloudApigeeV1Properties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GoogleCloudApigeeV1Organization.


        :param properties: The properties of this GoogleCloudApigeeV1Organization.
        :type properties: GoogleCloudApigeeV1Properties
        """

        self._properties = properties

    @property
    def runtime_database_encryption_key_name(self):
        """Gets the runtime_database_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances. Update is not allowed after the organization is created. Required when [RuntimeType](#RuntimeType) is `CLOUD`. If not specified when [RuntimeType](#RuntimeType) is `TRIAL`, a Google-Managed encryption key will be used. For example: \"projects/foo/locations/us/keyRings/bar/cryptoKeys/baz\". **Note:** Not supported for Apigee hybrid.

        :return: The runtime_database_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._runtime_database_encryption_key_name

    @runtime_database_encryption_key_name.setter
    def runtime_database_encryption_key_name(self, runtime_database_encryption_key_name):
        """Sets the runtime_database_encryption_key_name of this GoogleCloudApigeeV1Organization.

        Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances. Update is not allowed after the organization is created. Required when [RuntimeType](#RuntimeType) is `CLOUD`. If not specified when [RuntimeType](#RuntimeType) is `TRIAL`, a Google-Managed encryption key will be used. For example: \"projects/foo/locations/us/keyRings/bar/cryptoKeys/baz\". **Note:** Not supported for Apigee hybrid.

        :param runtime_database_encryption_key_name: The runtime_database_encryption_key_name of this GoogleCloudApigeeV1Organization.
        :type runtime_database_encryption_key_name: str
        """

        self._runtime_database_encryption_key_name = runtime_database_encryption_key_name

    @property
    def runtime_type(self):
        """Gets the runtime_type of this GoogleCloudApigeeV1Organization.

        Required. Runtime type of the Apigee organization based on the Apigee subscription purchased.

        :return: The runtime_type of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._runtime_type

    @runtime_type.setter
    def runtime_type(self, runtime_type):
        """Sets the runtime_type of this GoogleCloudApigeeV1Organization.

        Required. Runtime type of the Apigee organization based on the Apigee subscription purchased.

        :param runtime_type: The runtime_type of this GoogleCloudApigeeV1Organization.
        :type runtime_type: str
        """
        allowed_values = ["RUNTIME_TYPE_UNSPECIFIED", "CLOUD", "HYBRID"]  # noqa: E501
        if runtime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_type` ({0}), must be one of {1}"
                .format(runtime_type, allowed_values)
            )

        self._runtime_type = runtime_type

    @property
    def state(self):
        """Gets the state of this GoogleCloudApigeeV1Organization.

        Output only. State of the organization. Values other than ACTIVE means the resource is not ready to use.

        :return: The state of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudApigeeV1Organization.

        Output only. State of the organization. Values other than ACTIVE means the resource is not ready to use.

        :param state: The state of this GoogleCloudApigeeV1Organization.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscription_plan(self):
        """Gets the subscription_plan of this GoogleCloudApigeeV1Organization.

        Output only. Subscription plan that the customer has purchased. Output only.

        :return: The subscription_plan of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._subscription_plan

    @subscription_plan.setter
    def subscription_plan(self, subscription_plan):
        """Sets the subscription_plan of this GoogleCloudApigeeV1Organization.

        Output only. Subscription plan that the customer has purchased. Output only.

        :param subscription_plan: The subscription_plan of this GoogleCloudApigeeV1Organization.
        :type subscription_plan: str
        """
        allowed_values = ["SUBSCRIPTION_PLAN_UNSPECIFIED", "SUBSCRIPTION_2021", "SUBSCRIPTION_2024"]  # noqa: E501
        if subscription_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_plan` ({0}), must be one of {1}"
                .format(subscription_plan, allowed_values)
            )

        self._subscription_plan = subscription_plan

    @property
    def subscription_type(self):
        """Gets the subscription_type of this GoogleCloudApigeeV1Organization.

        Output only. DEPRECATED: This will eventually be replaced by BillingType. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).

        :return: The subscription_type of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this GoogleCloudApigeeV1Organization.

        Output only. DEPRECATED: This will eventually be replaced by BillingType. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).

        :param subscription_type: The subscription_type of this GoogleCloudApigeeV1Organization.
        :type subscription_type: str
        """
        allowed_values = ["SUBSCRIPTION_TYPE_UNSPECIFIED", "PAID", "TRIAL"]  # noqa: E501
        if subscription_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_type` ({0}), must be one of {1}"
                .format(subscription_type, allowed_values)
            )

        self._subscription_type = subscription_type

    @property
    def type(self):
        """Gets the type of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :return: The type of this GoogleCloudApigeeV1Organization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudApigeeV1Organization.

        Not used by Apigee.

        :param type: The type of this GoogleCloudApigeeV1Organization.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_TRIAL", "TYPE_PAID", "TYPE_INTERNAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
