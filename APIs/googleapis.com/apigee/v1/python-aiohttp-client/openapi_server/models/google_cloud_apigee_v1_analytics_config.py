# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1AnalyticsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, expire_time_millis: str=None, state: str=None, update_time: str=None):
        """GoogleCloudApigeeV1AnalyticsConfig - a model defined in OpenAPI

        :param enabled: The enabled of this GoogleCloudApigeeV1AnalyticsConfig.
        :param expire_time_millis: The expire_time_millis of this GoogleCloudApigeeV1AnalyticsConfig.
        :param state: The state of this GoogleCloudApigeeV1AnalyticsConfig.
        :param update_time: The update_time of this GoogleCloudApigeeV1AnalyticsConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'expire_time_millis': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'expire_time_millis': 'expireTimeMillis',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._enabled = enabled
        self._expire_time_millis = expire_time_millis
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1AnalyticsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1AnalyticsConfig of this GoogleCloudApigeeV1AnalyticsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this GoogleCloudApigeeV1AnalyticsConfig.

        Whether the Analytics add-on is enabled.

        :return: The enabled of this GoogleCloudApigeeV1AnalyticsConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GoogleCloudApigeeV1AnalyticsConfig.

        Whether the Analytics add-on is enabled.

        :param enabled: The enabled of this GoogleCloudApigeeV1AnalyticsConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def expire_time_millis(self):
        """Gets the expire_time_millis of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. Time at which the Analytics add-on expires in milliseconds since epoch. If unspecified, the add-on will never expire.

        :return: The expire_time_millis of this GoogleCloudApigeeV1AnalyticsConfig.
        :rtype: str
        """
        return self._expire_time_millis

    @expire_time_millis.setter
    def expire_time_millis(self, expire_time_millis):
        """Sets the expire_time_millis of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. Time at which the Analytics add-on expires in milliseconds since epoch. If unspecified, the add-on will never expire.

        :param expire_time_millis: The expire_time_millis of this GoogleCloudApigeeV1AnalyticsConfig.
        :type expire_time_millis: str
        """

        self._expire_time_millis = expire_time_millis

    @property
    def state(self):
        """Gets the state of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. The state of the Analytics add-on.

        :return: The state of this GoogleCloudApigeeV1AnalyticsConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. The state of the Analytics add-on.

        :param state: The state of this GoogleCloudApigeeV1AnalyticsConfig.
        :type state: str
        """
        allowed_values = ["ADDON_STATE_UNSPECIFIED", "ENABLING", "ENABLED", "DISABLING", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. The latest update time.

        :return: The update_time of this GoogleCloudApigeeV1AnalyticsConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudApigeeV1AnalyticsConfig.

        Output only. The latest update time.

        :param update_time: The update_time of this GoogleCloudApigeeV1AnalyticsConfig.
        :type update_time: str
        """

        self._update_time = update_time
