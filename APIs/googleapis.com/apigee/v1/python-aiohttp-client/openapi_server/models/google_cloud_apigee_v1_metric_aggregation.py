# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1MetricAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: str=None, name: str=None, order: str=None):
        """GoogleCloudApigeeV1MetricAggregation - a model defined in OpenAPI

        :param aggregation: The aggregation of this GoogleCloudApigeeV1MetricAggregation.
        :param name: The name of this GoogleCloudApigeeV1MetricAggregation.
        :param order: The order of this GoogleCloudApigeeV1MetricAggregation.
        """
        self.openapi_types = {
            'aggregation': str,
            'name': str,
            'order': str
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'name': 'name',
            'order': 'order'
        }

        self._aggregation = aggregation
        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1MetricAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1MetricAggregation of this GoogleCloudApigeeV1MetricAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this GoogleCloudApigeeV1MetricAggregation.

        Aggregation function associated with the metric.

        :return: The aggregation of this GoogleCloudApigeeV1MetricAggregation.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this GoogleCloudApigeeV1MetricAggregation.

        Aggregation function associated with the metric.

        :param aggregation: The aggregation of this GoogleCloudApigeeV1MetricAggregation.
        :type aggregation: str
        """
        allowed_values = ["AGGREGATION_FUNCTION_UNSPECIFIED", "AVG", "SUM", "MIN", "MAX", "COUNT_DISTINCT"]  # noqa: E501
        if aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation` ({0}), must be one of {1}"
                .format(aggregation, allowed_values)
            )

        self._aggregation = aggregation

    @property
    def name(self):
        """Gets the name of this GoogleCloudApigeeV1MetricAggregation.

        Name of the metric

        :return: The name of this GoogleCloudApigeeV1MetricAggregation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudApigeeV1MetricAggregation.

        Name of the metric

        :param name: The name of this GoogleCloudApigeeV1MetricAggregation.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this GoogleCloudApigeeV1MetricAggregation.

        Ordering for this aggregation in the result. For time series this is ignored since the ordering of points depends only on the timestamp, not the values.

        :return: The order of this GoogleCloudApigeeV1MetricAggregation.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GoogleCloudApigeeV1MetricAggregation.

        Ordering for this aggregation in the result. For time series this is ignored since the ordering of points depends only on the timestamp, not the values.

        :param order: The order of this GoogleCloudApigeeV1MetricAggregation.
        :type order: str
        """
        allowed_values = ["ORDER_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order
