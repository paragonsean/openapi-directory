# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1DeveloperMonetizationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_type: str=None):
        """GoogleCloudApigeeV1DeveloperMonetizationConfig - a model defined in OpenAPI

        :param billing_type: The billing_type of this GoogleCloudApigeeV1DeveloperMonetizationConfig.
        """
        self.openapi_types = {
            'billing_type': str
        }

        self.attribute_map = {
            'billing_type': 'billingType'
        }

        self._billing_type = billing_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1DeveloperMonetizationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1DeveloperMonetizationConfig of this GoogleCloudApigeeV1DeveloperMonetizationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_type(self):
        """Gets the billing_type of this GoogleCloudApigeeV1DeveloperMonetizationConfig.

        Billing type.

        :return: The billing_type of this GoogleCloudApigeeV1DeveloperMonetizationConfig.
        :rtype: str
        """
        return self._billing_type

    @billing_type.setter
    def billing_type(self, billing_type):
        """Sets the billing_type of this GoogleCloudApigeeV1DeveloperMonetizationConfig.

        Billing type.

        :param billing_type: The billing_type of this GoogleCloudApigeeV1DeveloperMonetizationConfig.
        :type billing_type: str
        """
        allowed_values = ["BILLING_TYPE_UNSPECIFIED", "PREPAID", "POSTPAID"]  # noqa: E501
        if billing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_type` ({0}), must be one of {1}"
                .format(billing_type, allowed_values)
            )

        self._billing_type = billing_type
