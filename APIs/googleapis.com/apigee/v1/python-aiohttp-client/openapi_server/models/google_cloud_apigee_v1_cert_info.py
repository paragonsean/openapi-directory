# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1CertInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic_constraints: str=None, expiry_date: str=None, is_valid: str=None, issuer: str=None, public_key: str=None, serial_number: str=None, sig_alg_name: str=None, subject: str=None, subject_alternative_names: List[str]=None, valid_from: str=None, version: int=None):
        """GoogleCloudApigeeV1CertInfo - a model defined in OpenAPI

        :param basic_constraints: The basic_constraints of this GoogleCloudApigeeV1CertInfo.
        :param expiry_date: The expiry_date of this GoogleCloudApigeeV1CertInfo.
        :param is_valid: The is_valid of this GoogleCloudApigeeV1CertInfo.
        :param issuer: The issuer of this GoogleCloudApigeeV1CertInfo.
        :param public_key: The public_key of this GoogleCloudApigeeV1CertInfo.
        :param serial_number: The serial_number of this GoogleCloudApigeeV1CertInfo.
        :param sig_alg_name: The sig_alg_name of this GoogleCloudApigeeV1CertInfo.
        :param subject: The subject of this GoogleCloudApigeeV1CertInfo.
        :param subject_alternative_names: The subject_alternative_names of this GoogleCloudApigeeV1CertInfo.
        :param valid_from: The valid_from of this GoogleCloudApigeeV1CertInfo.
        :param version: The version of this GoogleCloudApigeeV1CertInfo.
        """
        self.openapi_types = {
            'basic_constraints': str,
            'expiry_date': str,
            'is_valid': str,
            'issuer': str,
            'public_key': str,
            'serial_number': str,
            'sig_alg_name': str,
            'subject': str,
            'subject_alternative_names': List[str],
            'valid_from': str,
            'version': int
        }

        self.attribute_map = {
            'basic_constraints': 'basicConstraints',
            'expiry_date': 'expiryDate',
            'is_valid': 'isValid',
            'issuer': 'issuer',
            'public_key': 'publicKey',
            'serial_number': 'serialNumber',
            'sig_alg_name': 'sigAlgName',
            'subject': 'subject',
            'subject_alternative_names': 'subjectAlternativeNames',
            'valid_from': 'validFrom',
            'version': 'version'
        }

        self._basic_constraints = basic_constraints
        self._expiry_date = expiry_date
        self._is_valid = is_valid
        self._issuer = issuer
        self._public_key = public_key
        self._serial_number = serial_number
        self._sig_alg_name = sig_alg_name
        self._subject = subject
        self._subject_alternative_names = subject_alternative_names
        self._valid_from = valid_from
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1CertInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1CertInfo of this GoogleCloudApigeeV1CertInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic_constraints(self):
        """Gets the basic_constraints of this GoogleCloudApigeeV1CertInfo.

        X.509 basic constraints extension.

        :return: The basic_constraints of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._basic_constraints

    @basic_constraints.setter
    def basic_constraints(self, basic_constraints):
        """Sets the basic_constraints of this GoogleCloudApigeeV1CertInfo.

        X.509 basic constraints extension.

        :param basic_constraints: The basic_constraints of this GoogleCloudApigeeV1CertInfo.
        :type basic_constraints: str
        """

        self._basic_constraints = basic_constraints

    @property
    def expiry_date(self):
        """Gets the expiry_date of this GoogleCloudApigeeV1CertInfo.

        X.509 `notAfter` validity period in milliseconds since epoch.

        :return: The expiry_date of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this GoogleCloudApigeeV1CertInfo.

        X.509 `notAfter` validity period in milliseconds since epoch.

        :param expiry_date: The expiry_date of this GoogleCloudApigeeV1CertInfo.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def is_valid(self):
        """Gets the is_valid of this GoogleCloudApigeeV1CertInfo.

        Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.

        :return: The is_valid of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this GoogleCloudApigeeV1CertInfo.

        Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.

        :param is_valid: The is_valid of this GoogleCloudApigeeV1CertInfo.
        :type is_valid: str
        """

        self._is_valid = is_valid

    @property
    def issuer(self):
        """Gets the issuer of this GoogleCloudApigeeV1CertInfo.

        X.509 issuer.

        :return: The issuer of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this GoogleCloudApigeeV1CertInfo.

        X.509 issuer.

        :param issuer: The issuer of this GoogleCloudApigeeV1CertInfo.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def public_key(self):
        """Gets the public_key of this GoogleCloudApigeeV1CertInfo.

        Public key component of the X.509 subject public key info.

        :return: The public_key of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this GoogleCloudApigeeV1CertInfo.

        Public key component of the X.509 subject public key info.

        :param public_key: The public_key of this GoogleCloudApigeeV1CertInfo.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def serial_number(self):
        """Gets the serial_number of this GoogleCloudApigeeV1CertInfo.

        X.509 serial number.

        :return: The serial_number of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this GoogleCloudApigeeV1CertInfo.

        X.509 serial number.

        :param serial_number: The serial_number of this GoogleCloudApigeeV1CertInfo.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def sig_alg_name(self):
        """Gets the sig_alg_name of this GoogleCloudApigeeV1CertInfo.

        X.509 signatureAlgorithm.

        :return: The sig_alg_name of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._sig_alg_name

    @sig_alg_name.setter
    def sig_alg_name(self, sig_alg_name):
        """Sets the sig_alg_name of this GoogleCloudApigeeV1CertInfo.

        X.509 signatureAlgorithm.

        :param sig_alg_name: The sig_alg_name of this GoogleCloudApigeeV1CertInfo.
        :type sig_alg_name: str
        """

        self._sig_alg_name = sig_alg_name

    @property
    def subject(self):
        """Gets the subject of this GoogleCloudApigeeV1CertInfo.

        X.509 subject.

        :return: The subject of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GoogleCloudApigeeV1CertInfo.

        X.509 subject.

        :param subject: The subject of this GoogleCloudApigeeV1CertInfo.
        :type subject: str
        """

        self._subject = subject

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this GoogleCloudApigeeV1CertInfo.

        X.509 subject alternative names (SANs) extension.

        :return: The subject_alternative_names of this GoogleCloudApigeeV1CertInfo.
        :rtype: List[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this GoogleCloudApigeeV1CertInfo.

        X.509 subject alternative names (SANs) extension.

        :param subject_alternative_names: The subject_alternative_names of this GoogleCloudApigeeV1CertInfo.
        :type subject_alternative_names: List[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def valid_from(self):
        """Gets the valid_from of this GoogleCloudApigeeV1CertInfo.

        X.509 `notBefore` validity period in milliseconds since epoch.

        :return: The valid_from of this GoogleCloudApigeeV1CertInfo.
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this GoogleCloudApigeeV1CertInfo.

        X.509 `notBefore` validity period in milliseconds since epoch.

        :param valid_from: The valid_from of this GoogleCloudApigeeV1CertInfo.
        :type valid_from: str
        """

        self._valid_from = valid_from

    @property
    def version(self):
        """Gets the version of this GoogleCloudApigeeV1CertInfo.

        X.509 version.

        :return: The version of this GoogleCloudApigeeV1CertInfo.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GoogleCloudApigeeV1CertInfo.

        X.509 version.

        :param version: The version of this GoogleCloudApigeeV1CertInfo.
        :type version: int
        """

        self._version = version
