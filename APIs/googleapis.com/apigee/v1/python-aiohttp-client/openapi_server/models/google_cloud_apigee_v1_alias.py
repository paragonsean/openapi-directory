# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_certificate import GoogleCloudApigeeV1Certificate
from openapi_server import util


class GoogleCloudApigeeV1Alias(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, certs_info: GoogleCloudApigeeV1Certificate=None, type: str=None):
        """GoogleCloudApigeeV1Alias - a model defined in OpenAPI

        :param alias: The alias of this GoogleCloudApigeeV1Alias.
        :param certs_info: The certs_info of this GoogleCloudApigeeV1Alias.
        :param type: The type of this GoogleCloudApigeeV1Alias.
        """
        self.openapi_types = {
            'alias': str,
            'certs_info': GoogleCloudApigeeV1Certificate,
            'type': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'certs_info': 'certsInfo',
            'type': 'type'
        }

        self._alias = alias
        self._certs_info = certs_info
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1Alias':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1Alias of this GoogleCloudApigeeV1Alias.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this GoogleCloudApigeeV1Alias.

        Resource ID for this alias. Values must match the regular expression `[^/]{1,255}`.

        :return: The alias of this GoogleCloudApigeeV1Alias.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this GoogleCloudApigeeV1Alias.

        Resource ID for this alias. Values must match the regular expression `[^/]{1,255}`.

        :param alias: The alias of this GoogleCloudApigeeV1Alias.
        :type alias: str
        """

        self._alias = alias

    @property
    def certs_info(self):
        """Gets the certs_info of this GoogleCloudApigeeV1Alias.


        :return: The certs_info of this GoogleCloudApigeeV1Alias.
        :rtype: GoogleCloudApigeeV1Certificate
        """
        return self._certs_info

    @certs_info.setter
    def certs_info(self, certs_info):
        """Sets the certs_info of this GoogleCloudApigeeV1Alias.


        :param certs_info: The certs_info of this GoogleCloudApigeeV1Alias.
        :type certs_info: GoogleCloudApigeeV1Certificate
        """

        self._certs_info = certs_info

    @property
    def type(self):
        """Gets the type of this GoogleCloudApigeeV1Alias.

        Type of alias.

        :return: The type of this GoogleCloudApigeeV1Alias.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudApigeeV1Alias.

        Type of alias.

        :param type: The type of this GoogleCloudApigeeV1Alias.
        :type type: str
        """
        allowed_values = ["ALIAS_TYPE_UNSPECIFIED", "CERT", "KEY_CERT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
