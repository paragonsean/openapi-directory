# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_tls_info import GoogleCloudApigeeV1TlsInfo
from openapi_server import util


class GoogleCloudApigeeV1TargetServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, host: str=None, is_enabled: bool=None, name: str=None, port: int=None, protocol: str=None, s_sl_info: GoogleCloudApigeeV1TlsInfo=None):
        """GoogleCloudApigeeV1TargetServer - a model defined in OpenAPI

        :param description: The description of this GoogleCloudApigeeV1TargetServer.
        :param host: The host of this GoogleCloudApigeeV1TargetServer.
        :param is_enabled: The is_enabled of this GoogleCloudApigeeV1TargetServer.
        :param name: The name of this GoogleCloudApigeeV1TargetServer.
        :param port: The port of this GoogleCloudApigeeV1TargetServer.
        :param protocol: The protocol of this GoogleCloudApigeeV1TargetServer.
        :param s_sl_info: The s_sl_info of this GoogleCloudApigeeV1TargetServer.
        """
        self.openapi_types = {
            'description': str,
            'host': str,
            'is_enabled': bool,
            'name': str,
            'port': int,
            'protocol': str,
            's_sl_info': GoogleCloudApigeeV1TlsInfo
        }

        self.attribute_map = {
            'description': 'description',
            'host': 'host',
            'is_enabled': 'isEnabled',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol',
            's_sl_info': 'sSLInfo'
        }

        self._description = description
        self._host = host
        self._is_enabled = is_enabled
        self._name = name
        self._port = port
        self._protocol = protocol
        self._s_sl_info = s_sl_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1TargetServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1TargetServer of this GoogleCloudApigeeV1TargetServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudApigeeV1TargetServer.

        Optional. A human-readable description of this TargetServer.

        :return: The description of this GoogleCloudApigeeV1TargetServer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudApigeeV1TargetServer.

        Optional. A human-readable description of this TargetServer.

        :param description: The description of this GoogleCloudApigeeV1TargetServer.
        :type description: str
        """

        self._description = description

    @property
    def host(self):
        """Gets the host of this GoogleCloudApigeeV1TargetServer.

        Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.

        :return: The host of this GoogleCloudApigeeV1TargetServer.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this GoogleCloudApigeeV1TargetServer.

        Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.

        :param host: The host of this GoogleCloudApigeeV1TargetServer.
        :type host: str
        """

        self._host = host

    @property
    def is_enabled(self):
        """Gets the is_enabled of this GoogleCloudApigeeV1TargetServer.

        Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.

        :return: The is_enabled of this GoogleCloudApigeeV1TargetServer.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this GoogleCloudApigeeV1TargetServer.

        Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.

        :param is_enabled: The is_enabled of this GoogleCloudApigeeV1TargetServer.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this GoogleCloudApigeeV1TargetServer.

        Required. The resource id of this target server. Values must match the regular expression 

        :return: The name of this GoogleCloudApigeeV1TargetServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudApigeeV1TargetServer.

        Required. The resource id of this target server. Values must match the regular expression 

        :param name: The name of this GoogleCloudApigeeV1TargetServer.
        :type name: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this GoogleCloudApigeeV1TargetServer.

        Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.

        :return: The port of this GoogleCloudApigeeV1TargetServer.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GoogleCloudApigeeV1TargetServer.

        Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.

        :param port: The port of this GoogleCloudApigeeV1TargetServer.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this GoogleCloudApigeeV1TargetServer.

        Immutable. The protocol used by this TargetServer.

        :return: The protocol of this GoogleCloudApigeeV1TargetServer.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this GoogleCloudApigeeV1TargetServer.

        Immutable. The protocol used by this TargetServer.

        :param protocol: The protocol of this GoogleCloudApigeeV1TargetServer.
        :type protocol: str
        """
        allowed_values = ["PROTOCOL_UNSPECIFIED", "HTTP", "HTTP2", "GRPC_TARGET", "GRPC", "EXTERNAL_CALLOUT"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def s_sl_info(self):
        """Gets the s_sl_info of this GoogleCloudApigeeV1TargetServer.


        :return: The s_sl_info of this GoogleCloudApigeeV1TargetServer.
        :rtype: GoogleCloudApigeeV1TlsInfo
        """
        return self._s_sl_info

    @s_sl_info.setter
    def s_sl_info(self, s_sl_info):
        """Sets the s_sl_info of this GoogleCloudApigeeV1TargetServer.


        :param s_sl_info: The s_sl_info of this GoogleCloudApigeeV1TargetServer.
        :type s_sl_info: GoogleCloudApigeeV1TlsInfo
        """

        self._s_sl_info = s_sl_info
