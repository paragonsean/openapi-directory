# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_apigee_v1_operation_metadata_progress import GoogleCloudApigeeV1OperationMetadataProgress
from openapi_server import util


class GoogleCloudApigeeV1OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_type: str=None, progress: GoogleCloudApigeeV1OperationMetadataProgress=None, state: str=None, target_resource_name: str=None, warnings: List[str]=None):
        """GoogleCloudApigeeV1OperationMetadata - a model defined in OpenAPI

        :param operation_type: The operation_type of this GoogleCloudApigeeV1OperationMetadata.
        :param progress: The progress of this GoogleCloudApigeeV1OperationMetadata.
        :param state: The state of this GoogleCloudApigeeV1OperationMetadata.
        :param target_resource_name: The target_resource_name of this GoogleCloudApigeeV1OperationMetadata.
        :param warnings: The warnings of this GoogleCloudApigeeV1OperationMetadata.
        """
        self.openapi_types = {
            'operation_type': str,
            'progress': GoogleCloudApigeeV1OperationMetadataProgress,
            'state': str,
            'target_resource_name': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'operation_type': 'operationType',
            'progress': 'progress',
            'state': 'state',
            'target_resource_name': 'targetResourceName',
            'warnings': 'warnings'
        }

        self._operation_type = operation_type
        self._progress = progress
        self._state = state
        self._target_resource_name = target_resource_name
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1OperationMetadata of this GoogleCloudApigeeV1OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_type(self):
        """Gets the operation_type of this GoogleCloudApigeeV1OperationMetadata.


        :return: The operation_type of this GoogleCloudApigeeV1OperationMetadata.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this GoogleCloudApigeeV1OperationMetadata.


        :param operation_type: The operation_type of this GoogleCloudApigeeV1OperationMetadata.
        :type operation_type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "INSERT", "DELETE", "UPDATE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def progress(self):
        """Gets the progress of this GoogleCloudApigeeV1OperationMetadata.


        :return: The progress of this GoogleCloudApigeeV1OperationMetadata.
        :rtype: GoogleCloudApigeeV1OperationMetadataProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this GoogleCloudApigeeV1OperationMetadata.


        :param progress: The progress of this GoogleCloudApigeeV1OperationMetadata.
        :type progress: GoogleCloudApigeeV1OperationMetadataProgress
        """

        self._progress = progress

    @property
    def state(self):
        """Gets the state of this GoogleCloudApigeeV1OperationMetadata.


        :return: The state of this GoogleCloudApigeeV1OperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudApigeeV1OperationMetadata.


        :param state: The state of this GoogleCloudApigeeV1OperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NOT_STARTED", "IN_PROGRESS", "FINISHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target_resource_name(self):
        """Gets the target_resource_name of this GoogleCloudApigeeV1OperationMetadata.

        Name of the resource for which the operation is operating on.

        :return: The target_resource_name of this GoogleCloudApigeeV1OperationMetadata.
        :rtype: str
        """
        return self._target_resource_name

    @target_resource_name.setter
    def target_resource_name(self, target_resource_name):
        """Sets the target_resource_name of this GoogleCloudApigeeV1OperationMetadata.

        Name of the resource for which the operation is operating on.

        :param target_resource_name: The target_resource_name of this GoogleCloudApigeeV1OperationMetadata.
        :type target_resource_name: str
        """

        self._target_resource_name = target_resource_name

    @property
    def warnings(self):
        """Gets the warnings of this GoogleCloudApigeeV1OperationMetadata.

        Warnings encountered while executing the operation.

        :return: The warnings of this GoogleCloudApigeeV1OperationMetadata.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this GoogleCloudApigeeV1OperationMetadata.

        Warnings encountered while executing the operation.

        :param warnings: The warnings of this GoogleCloudApigeeV1OperationMetadata.
        :type warnings: List[str]
        """

        self._warnings = warnings
