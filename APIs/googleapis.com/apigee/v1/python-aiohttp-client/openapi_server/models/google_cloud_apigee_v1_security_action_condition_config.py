# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1SecurityActionConditionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_tokens: List[str]=None, api_keys: List[str]=None, api_products: List[str]=None, bot_reasons: List[str]=None, developer_apps: List[str]=None, developers: List[str]=None, ip_address_ranges: List[str]=None, user_agents: List[str]=None):
        """GoogleCloudApigeeV1SecurityActionConditionConfig - a model defined in OpenAPI

        :param access_tokens: The access_tokens of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param api_keys: The api_keys of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param api_products: The api_products of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param bot_reasons: The bot_reasons of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param developer_apps: The developer_apps of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param developers: The developers of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param ip_address_ranges: The ip_address_ranges of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :param user_agents: The user_agents of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        """
        self.openapi_types = {
            'access_tokens': List[str],
            'api_keys': List[str],
            'api_products': List[str],
            'bot_reasons': List[str],
            'developer_apps': List[str],
            'developers': List[str],
            'ip_address_ranges': List[str],
            'user_agents': List[str]
        }

        self.attribute_map = {
            'access_tokens': 'accessTokens',
            'api_keys': 'apiKeys',
            'api_products': 'apiProducts',
            'bot_reasons': 'botReasons',
            'developer_apps': 'developerApps',
            'developers': 'developers',
            'ip_address_ranges': 'ipAddressRanges',
            'user_agents': 'userAgents'
        }

        self._access_tokens = access_tokens
        self._api_keys = api_keys
        self._api_products = api_products
        self._bot_reasons = bot_reasons
        self._developer_apps = developer_apps
        self._developers = developers
        self._ip_address_ranges = ip_address_ranges
        self._user_agents = user_agents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1SecurityActionConditionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1SecurityActionConditionConfig of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_tokens(self):
        """Gets the access_tokens of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of access_tokens. Limit 1000 per action.

        :return: The access_tokens of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._access_tokens

    @access_tokens.setter
    def access_tokens(self, access_tokens):
        """Sets the access_tokens of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of access_tokens. Limit 1000 per action.

        :param access_tokens: The access_tokens of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type access_tokens: List[str]
        """

        self._access_tokens = access_tokens

    @property
    def api_keys(self):
        """Gets the api_keys of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of API keys. Limit 1000 per action.

        :return: The api_keys of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of API keys. Limit 1000 per action.

        :param api_keys: The api_keys of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type api_keys: List[str]
        """

        self._api_keys = api_keys

    @property
    def api_products(self):
        """Gets the api_products of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of API Products. Limit 1000 per action.

        :return: The api_products of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._api_products

    @api_products.setter
    def api_products(self, api_products):
        """Sets the api_products of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of API Products. Limit 1000 per action.

        :param api_products: The api_products of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type api_products: List[str]
        """

        self._api_products = api_products

    @property
    def bot_reasons(self):
        """Gets the bot_reasons of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.

        :return: The bot_reasons of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._bot_reasons

    @bot_reasons.setter
    def bot_reasons(self, bot_reasons):
        """Sets the bot_reasons of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.

        :param bot_reasons: The bot_reasons of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type bot_reasons: List[str]
        """

        self._bot_reasons = bot_reasons

    @property
    def developer_apps(self):
        """Gets the developer_apps of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of developer apps. Limit 1000 per action.

        :return: The developer_apps of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._developer_apps

    @developer_apps.setter
    def developer_apps(self, developer_apps):
        """Sets the developer_apps of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of developer apps. Limit 1000 per action.

        :param developer_apps: The developer_apps of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type developer_apps: List[str]
        """

        self._developer_apps = developer_apps

    @property
    def developers(self):
        """Gets the developers of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of developers. Limit 1000 per action.

        :return: The developers of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._developers

    @developers.setter
    def developers(self, developers):
        """Sets the developers of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of developers. Limit 1000 per action.

        :param developers: The developers of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type developers: List[str]
        """

        self._developers = developers

    @property
    def ip_address_ranges(self):
        """Gets the ip_address_ranges of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.

        :return: The ip_address_ranges of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._ip_address_ranges

    @ip_address_ranges.setter
    def ip_address_ranges(self, ip_address_ranges):
        """Sets the ip_address_ranges of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.

        :param ip_address_ranges: The ip_address_ranges of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type ip_address_ranges: List[str]
        """

        self._ip_address_ranges = ip_address_ranges

    @property
    def user_agents(self):
        """Gets the user_agents of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action.

        :return: The user_agents of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :rtype: List[str]
        """
        return self._user_agents

    @user_agents.setter
    def user_agents(self, user_agents):
        """Sets the user_agents of this GoogleCloudApigeeV1SecurityActionConditionConfig.

        Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action.

        :param user_agents: The user_agents of this GoogleCloudApigeeV1SecurityActionConditionConfig.
        :type user_agents: List[str]
        """

        self._user_agents = user_agents
