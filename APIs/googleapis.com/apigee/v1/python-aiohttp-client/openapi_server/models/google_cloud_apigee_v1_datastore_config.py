# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1DatastoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, dataset_name: str=None, path: str=None, project_id: str=None, table_prefix: str=None):
        """GoogleCloudApigeeV1DatastoreConfig - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this GoogleCloudApigeeV1DatastoreConfig.
        :param dataset_name: The dataset_name of this GoogleCloudApigeeV1DatastoreConfig.
        :param path: The path of this GoogleCloudApigeeV1DatastoreConfig.
        :param project_id: The project_id of this GoogleCloudApigeeV1DatastoreConfig.
        :param table_prefix: The table_prefix of this GoogleCloudApigeeV1DatastoreConfig.
        """
        self.openapi_types = {
            'bucket_name': str,
            'dataset_name': str,
            'path': str,
            'project_id': str,
            'table_prefix': str
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'dataset_name': 'datasetName',
            'path': 'path',
            'project_id': 'projectId',
            'table_prefix': 'tablePrefix'
        }

        self._bucket_name = bucket_name
        self._dataset_name = dataset_name
        self._path = path
        self._project_id = project_id
        self._table_prefix = table_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1DatastoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1DatastoreConfig of this GoogleCloudApigeeV1DatastoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this GoogleCloudApigeeV1DatastoreConfig.

        Name of the Cloud Storage bucket. Required for `gcs` target_type.

        :return: The bucket_name of this GoogleCloudApigeeV1DatastoreConfig.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this GoogleCloudApigeeV1DatastoreConfig.

        Name of the Cloud Storage bucket. Required for `gcs` target_type.

        :param bucket_name: The bucket_name of this GoogleCloudApigeeV1DatastoreConfig.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def dataset_name(self):
        """Gets the dataset_name of this GoogleCloudApigeeV1DatastoreConfig.

        BigQuery dataset name Required for `bigquery` target_type.

        :return: The dataset_name of this GoogleCloudApigeeV1DatastoreConfig.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this GoogleCloudApigeeV1DatastoreConfig.

        BigQuery dataset name Required for `bigquery` target_type.

        :param dataset_name: The dataset_name of this GoogleCloudApigeeV1DatastoreConfig.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def path(self):
        """Gets the path of this GoogleCloudApigeeV1DatastoreConfig.

        Path of Cloud Storage bucket Required for `gcs` target_type.

        :return: The path of this GoogleCloudApigeeV1DatastoreConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GoogleCloudApigeeV1DatastoreConfig.

        Path of Cloud Storage bucket Required for `gcs` target_type.

        :param path: The path of this GoogleCloudApigeeV1DatastoreConfig.
        :type path: str
        """

        self._path = path

    @property
    def project_id(self):
        """Gets the project_id of this GoogleCloudApigeeV1DatastoreConfig.

        Required. GCP project in which the datastore exists

        :return: The project_id of this GoogleCloudApigeeV1DatastoreConfig.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleCloudApigeeV1DatastoreConfig.

        Required. GCP project in which the datastore exists

        :param project_id: The project_id of this GoogleCloudApigeeV1DatastoreConfig.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def table_prefix(self):
        """Gets the table_prefix of this GoogleCloudApigeeV1DatastoreConfig.

        Prefix of BigQuery table Required for `bigquery` target_type.

        :return: The table_prefix of this GoogleCloudApigeeV1DatastoreConfig.
        :rtype: str
        """
        return self._table_prefix

    @table_prefix.setter
    def table_prefix(self, table_prefix):
        """Sets the table_prefix of this GoogleCloudApigeeV1DatastoreConfig.

        Prefix of BigQuery table Required for `bigquery` target_type.

        :param table_prefix: The table_prefix of this GoogleCloudApigeeV1DatastoreConfig.
        :type table_prefix: str
        """

        self._table_prefix = table_prefix
