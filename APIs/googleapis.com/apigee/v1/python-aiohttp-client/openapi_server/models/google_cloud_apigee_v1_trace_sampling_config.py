# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudApigeeV1TraceSamplingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sampler: str=None, sampling_rate: float=None):
        """GoogleCloudApigeeV1TraceSamplingConfig - a model defined in OpenAPI

        :param sampler: The sampler of this GoogleCloudApigeeV1TraceSamplingConfig.
        :param sampling_rate: The sampling_rate of this GoogleCloudApigeeV1TraceSamplingConfig.
        """
        self.openapi_types = {
            'sampler': str,
            'sampling_rate': float
        }

        self.attribute_map = {
            'sampler': 'sampler',
            'sampling_rate': 'samplingRate'
        }

        self._sampler = sampler
        self._sampling_rate = sampling_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudApigeeV1TraceSamplingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudApigeeV1TraceSamplingConfig of this GoogleCloudApigeeV1TraceSamplingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sampler(self):
        """Gets the sampler of this GoogleCloudApigeeV1TraceSamplingConfig.

        Sampler of distributed tracing. OFF is the default value.

        :return: The sampler of this GoogleCloudApigeeV1TraceSamplingConfig.
        :rtype: str
        """
        return self._sampler

    @sampler.setter
    def sampler(self, sampler):
        """Sets the sampler of this GoogleCloudApigeeV1TraceSamplingConfig.

        Sampler of distributed tracing. OFF is the default value.

        :param sampler: The sampler of this GoogleCloudApigeeV1TraceSamplingConfig.
        :type sampler: str
        """
        allowed_values = ["SAMPLER_UNSPECIFIED", "false", "PROBABILITY"]  # noqa: E501
        if sampler not in allowed_values:
            raise ValueError(
                "Invalid value for `sampler` ({0}), must be one of {1}"
                .format(sampler, allowed_values)
            )

        self._sampler = sampler

    @property
    def sampling_rate(self):
        """Gets the sampling_rate of this GoogleCloudApigeeV1TraceSamplingConfig.

        Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.

        :return: The sampling_rate of this GoogleCloudApigeeV1TraceSamplingConfig.
        :rtype: float
        """
        return self._sampling_rate

    @sampling_rate.setter
    def sampling_rate(self, sampling_rate):
        """Sets the sampling_rate of this GoogleCloudApigeeV1TraceSamplingConfig.

        Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.

        :param sampling_rate: The sampling_rate of this GoogleCloudApigeeV1TraceSamplingConfig.
        :type sampling_rate: float
        """

        self._sampling_rate = sampling_rate
