/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EffectiveTag model module.
 * @module model/EffectiveTag
 * @version v3
 */
class EffectiveTag {
    /**
     * Constructs a new <code>EffectiveTag</code>.
     * An EffectiveTag represents a tag that applies to a resource during policy evaluation. Tags can be either directly bound to a resource or inherited from its ancestor. EffectiveTag contains the name and namespaced_name of the tag value and tag key, with additional fields of &#x60;inherited&#x60; to indicate the inheritance status of the effective tag.
     * @alias module:model/EffectiveTag
     */
    constructor() { 
        
        EffectiveTag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EffectiveTag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EffectiveTag} obj Optional instance to populate.
     * @return {module:model/EffectiveTag} The populated <code>EffectiveTag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EffectiveTag();

            if (data.hasOwnProperty('inherited')) {
                obj['inherited'] = ApiClient.convertToType(data['inherited'], 'Boolean');
            }
            if (data.hasOwnProperty('namespacedTagKey')) {
                obj['namespacedTagKey'] = ApiClient.convertToType(data['namespacedTagKey'], 'String');
            }
            if (data.hasOwnProperty('namespacedTagValue')) {
                obj['namespacedTagValue'] = ApiClient.convertToType(data['namespacedTagValue'], 'String');
            }
            if (data.hasOwnProperty('tagKey')) {
                obj['tagKey'] = ApiClient.convertToType(data['tagKey'], 'String');
            }
            if (data.hasOwnProperty('tagKeyParentName')) {
                obj['tagKeyParentName'] = ApiClient.convertToType(data['tagKeyParentName'], 'String');
            }
            if (data.hasOwnProperty('tagValue')) {
                obj['tagValue'] = ApiClient.convertToType(data['tagValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EffectiveTag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EffectiveTag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namespacedTagKey'] && !(typeof data['namespacedTagKey'] === 'string' || data['namespacedTagKey'] instanceof String)) {
            throw new Error("Expected the field `namespacedTagKey` to be a primitive type in the JSON string but got " + data['namespacedTagKey']);
        }
        // ensure the json data is a string
        if (data['namespacedTagValue'] && !(typeof data['namespacedTagValue'] === 'string' || data['namespacedTagValue'] instanceof String)) {
            throw new Error("Expected the field `namespacedTagValue` to be a primitive type in the JSON string but got " + data['namespacedTagValue']);
        }
        // ensure the json data is a string
        if (data['tagKey'] && !(typeof data['tagKey'] === 'string' || data['tagKey'] instanceof String)) {
            throw new Error("Expected the field `tagKey` to be a primitive type in the JSON string but got " + data['tagKey']);
        }
        // ensure the json data is a string
        if (data['tagKeyParentName'] && !(typeof data['tagKeyParentName'] === 'string' || data['tagKeyParentName'] instanceof String)) {
            throw new Error("Expected the field `tagKeyParentName` to be a primitive type in the JSON string but got " + data['tagKeyParentName']);
        }
        // ensure the json data is a string
        if (data['tagValue'] && !(typeof data['tagValue'] === 'string' || data['tagValue'] instanceof String)) {
            throw new Error("Expected the field `tagValue` to be a primitive type in the JSON string but got " + data['tagValue']);
        }

        return true;
    }


}



/**
 * Indicates the inheritance status of a tag value attached to the given resource. If the tag value is inherited from one of the resource's ancestors, inherited will be true. If false, then the tag value is directly attached to the resource, inherited will be false.
 * @member {Boolean} inherited
 */
EffectiveTag.prototype['inherited'] = undefined;

/**
 * The namespaced name of the TagKey. Can be in the form `{organization_id}/{tag_key_short_name}` or `{project_id}/{tag_key_short_name}` or `{project_number}/{tag_key_short_name}`.
 * @member {String} namespacedTagKey
 */
EffectiveTag.prototype['namespacedTagKey'] = undefined;

/**
 * The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.
 * @member {String} namespacedTagValue
 */
EffectiveTag.prototype['namespacedTagValue'] = undefined;

/**
 * The name of the TagKey, in the format `tagKeys/{id}`, such as `tagKeys/123`.
 * @member {String} tagKey
 */
EffectiveTag.prototype['tagKey'] = undefined;

/**
 * The parent name of the tag key. Must be in the format `organizations/{organization_id}` or `projects/{project_number}`
 * @member {String} tagKeyParentName
 */
EffectiveTag.prototype['tagKeyParentName'] = undefined;

/**
 * Resource name for TagValue in the format `tagValues/456`.
 * @member {String} tagValue
 */
EffectiveTag.prototype['tagValue'] = undefined;






export default EffectiveTag;

