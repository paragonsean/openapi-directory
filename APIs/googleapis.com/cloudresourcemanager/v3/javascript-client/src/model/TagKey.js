/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagKey model module.
 * @module model/TagKey
 * @version v3
 */
class TagKey {
    /**
     * Constructs a new <code>TagKey</code>.
     * A TagKey, used to group a set of TagValues.
     * @alias module:model/TagKey
     */
    constructor() { 
        
        TagKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagKey} obj Optional instance to populate.
     * @return {module:model/TagKey} The populated <code>TagKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagKey();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespacedName')) {
                obj['namespacedName'] = ApiClient.convertToType(data['namespacedName'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('purposeData')) {
                obj['purposeData'] = ApiClient.convertToType(data['purposeData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespacedName'] && !(typeof data['namespacedName'] === 'string' || data['namespacedName'] instanceof String)) {
            throw new Error("Expected the field `namespacedName` to be a primitive type in the JSON string but got " + data['namespacedName']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Creation time.
 * @member {String} createTime
 */
TagKey.prototype['createTime'] = undefined;

/**
 * Optional. User-assigned description of the TagKey. Must not exceed 256 characters. Read-write.
 * @member {String} description
 */
TagKey.prototype['description'] = undefined;

/**
 * Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagKeyRequest for details.
 * @member {String} etag
 */
TagKey.prototype['etag'] = undefined;

/**
 * Immutable. The resource name for a TagKey. Must be in the format `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for the TagKey.
 * @member {String} name
 */
TagKey.prototype['name'] = undefined;

/**
 * Output only. Immutable. Namespaced name of the TagKey.
 * @member {String} namespacedName
 */
TagKey.prototype['namespacedName'] = undefined;

/**
 * Immutable. The resource name of the TagKey's parent. A TagKey can be parented by an Organization or a Project. For a TagKey parented by an Organization, its parent must be in the form `organizations/{org_id}`. For a TagKey parented by a Project, its parent can be in the form `projects/{project_id}` or `projects/{project_number}`.
 * @member {String} parent
 */
TagKey.prototype['parent'] = undefined;

/**
 * Optional. A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines. A purpose cannot be changed once set.
 * @member {module:model/TagKey.PurposeEnum} purpose
 */
TagKey.prototype['purpose'] = undefined;

/**
 * Optional. Purpose data corresponds to the policy system that the tag is intended for. See documentation for `Purpose` for formatting of this field. Purpose data cannot be changed once set.
 * @member {Object.<String, String>} purposeData
 */
TagKey.prototype['purposeData'] = undefined;

/**
 * Required. Immutable. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace. The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
 * @member {String} shortName
 */
TagKey.prototype['shortName'] = undefined;

/**
 * Output only. Update time.
 * @member {String} updateTime
 */
TagKey.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>purpose</code> property.
 * @enum {String}
 * @readonly
 */
TagKey['PurposeEnum'] = {

    /**
     * value: "PURPOSE_UNSPECIFIED"
     * @const
     */
    "PURPOSE_UNSPECIFIED": "PURPOSE_UNSPECIFIED",

    /**
     * value: "GCE_FIREWALL"
     * @const
     */
    "GCE_FIREWALL": "GCE_FIREWALL",

    /**
     * value: "DATA_GOVERNANCE"
     * @const
     */
    "DATA_GOVERNANCE": "DATA_GOVERNANCE"
};



export default TagKey;

