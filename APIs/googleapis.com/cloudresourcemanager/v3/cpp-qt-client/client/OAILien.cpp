/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILien.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILien::OAILien(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILien::OAILien() {
    this->initializeModel();
}

OAILien::~OAILien() {}

void OAILien::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;
}

void OAILien::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILien::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;
}

QString OAILien::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILien::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    return obj;
}

QString OAILien::getCreateTime() const {
    return m_create_time;
}
void OAILien::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILien::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILien::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILien::getName() const {
    return m_name;
}
void OAILien::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILien::is_name_Set() const{
    return m_name_isSet;
}

bool OAILien::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILien::getOrigin() const {
    return m_origin;
}
void OAILien::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAILien::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAILien::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAILien::getParent() const {
    return m_parent;
}
void OAILien::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAILien::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAILien::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAILien::getReason() const {
    return m_reason;
}
void OAILien::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILien::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILien::is_reason_Valid() const{
    return m_reason_isValid;
}

QList<QString> OAILien::getRestrictions() const {
    return m_restrictions;
}
void OAILien::setRestrictions(const QList<QString> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAILien::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAILien::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

bool OAILien::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILien::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
