# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EffectiveTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inherited: bool=None, namespaced_tag_key: str=None, namespaced_tag_value: str=None, tag_key: str=None, tag_key_parent_name: str=None, tag_value: str=None):
        """EffectiveTag - a model defined in OpenAPI

        :param inherited: The inherited of this EffectiveTag.
        :param namespaced_tag_key: The namespaced_tag_key of this EffectiveTag.
        :param namespaced_tag_value: The namespaced_tag_value of this EffectiveTag.
        :param tag_key: The tag_key of this EffectiveTag.
        :param tag_key_parent_name: The tag_key_parent_name of this EffectiveTag.
        :param tag_value: The tag_value of this EffectiveTag.
        """
        self.openapi_types = {
            'inherited': bool,
            'namespaced_tag_key': str,
            'namespaced_tag_value': str,
            'tag_key': str,
            'tag_key_parent_name': str,
            'tag_value': str
        }

        self.attribute_map = {
            'inherited': 'inherited',
            'namespaced_tag_key': 'namespacedTagKey',
            'namespaced_tag_value': 'namespacedTagValue',
            'tag_key': 'tagKey',
            'tag_key_parent_name': 'tagKeyParentName',
            'tag_value': 'tagValue'
        }

        self._inherited = inherited
        self._namespaced_tag_key = namespaced_tag_key
        self._namespaced_tag_value = namespaced_tag_value
        self._tag_key = tag_key
        self._tag_key_parent_name = tag_key_parent_name
        self._tag_value = tag_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveTag of this EffectiveTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inherited(self):
        """Gets the inherited of this EffectiveTag.

        Indicates the inheritance status of a tag value attached to the given resource. If the tag value is inherited from one of the resource's ancestors, inherited will be true. If false, then the tag value is directly attached to the resource, inherited will be false.

        :return: The inherited of this EffectiveTag.
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this EffectiveTag.

        Indicates the inheritance status of a tag value attached to the given resource. If the tag value is inherited from one of the resource's ancestors, inherited will be true. If false, then the tag value is directly attached to the resource, inherited will be false.

        :param inherited: The inherited of this EffectiveTag.
        :type inherited: bool
        """

        self._inherited = inherited

    @property
    def namespaced_tag_key(self):
        """Gets the namespaced_tag_key of this EffectiveTag.

        The namespaced name of the TagKey. Can be in the form `{organization_id}/{tag_key_short_name}` or `{project_id}/{tag_key_short_name}` or `{project_number}/{tag_key_short_name}`.

        :return: The namespaced_tag_key of this EffectiveTag.
        :rtype: str
        """
        return self._namespaced_tag_key

    @namespaced_tag_key.setter
    def namespaced_tag_key(self, namespaced_tag_key):
        """Sets the namespaced_tag_key of this EffectiveTag.

        The namespaced name of the TagKey. Can be in the form `{organization_id}/{tag_key_short_name}` or `{project_id}/{tag_key_short_name}` or `{project_number}/{tag_key_short_name}`.

        :param namespaced_tag_key: The namespaced_tag_key of this EffectiveTag.
        :type namespaced_tag_key: str
        """

        self._namespaced_tag_key = namespaced_tag_key

    @property
    def namespaced_tag_value(self):
        """Gets the namespaced_tag_value of this EffectiveTag.

        The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.

        :return: The namespaced_tag_value of this EffectiveTag.
        :rtype: str
        """
        return self._namespaced_tag_value

    @namespaced_tag_value.setter
    def namespaced_tag_value(self, namespaced_tag_value):
        """Sets the namespaced_tag_value of this EffectiveTag.

        The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.

        :param namespaced_tag_value: The namespaced_tag_value of this EffectiveTag.
        :type namespaced_tag_value: str
        """

        self._namespaced_tag_value = namespaced_tag_value

    @property
    def tag_key(self):
        """Gets the tag_key of this EffectiveTag.

        The name of the TagKey, in the format `tagKeys/{id}`, such as `tagKeys/123`.

        :return: The tag_key of this EffectiveTag.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this EffectiveTag.

        The name of the TagKey, in the format `tagKeys/{id}`, such as `tagKeys/123`.

        :param tag_key: The tag_key of this EffectiveTag.
        :type tag_key: str
        """

        self._tag_key = tag_key

    @property
    def tag_key_parent_name(self):
        """Gets the tag_key_parent_name of this EffectiveTag.

        The parent name of the tag key. Must be in the format `organizations/{organization_id}` or `projects/{project_number}`

        :return: The tag_key_parent_name of this EffectiveTag.
        :rtype: str
        """
        return self._tag_key_parent_name

    @tag_key_parent_name.setter
    def tag_key_parent_name(self, tag_key_parent_name):
        """Sets the tag_key_parent_name of this EffectiveTag.

        The parent name of the tag key. Must be in the format `organizations/{organization_id}` or `projects/{project_number}`

        :param tag_key_parent_name: The tag_key_parent_name of this EffectiveTag.
        :type tag_key_parent_name: str
        """

        self._tag_key_parent_name = tag_key_parent_name

    @property
    def tag_value(self):
        """Gets the tag_value of this EffectiveTag.

        Resource name for TagValue in the format `tagValues/456`.

        :return: The tag_value of this EffectiveTag.
        :rtype: str
        """
        return self._tag_value

    @tag_value.setter
    def tag_value(self, tag_value):
        """Sets the tag_value of this EffectiveTag.

        Resource name for TagValue in the format `tagValues/456`.

        :param tag_value: The tag_value of this EffectiveTag.
        :type tag_value: str
        """

        self._tag_value = tag_value
