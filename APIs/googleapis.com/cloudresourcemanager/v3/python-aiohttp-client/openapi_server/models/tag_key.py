# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, name: str=None, namespaced_name: str=None, parent: str=None, purpose: str=None, purpose_data: Dict[str, str]=None, short_name: str=None, update_time: str=None):
        """TagKey - a model defined in OpenAPI

        :param create_time: The create_time of this TagKey.
        :param description: The description of this TagKey.
        :param etag: The etag of this TagKey.
        :param name: The name of this TagKey.
        :param namespaced_name: The namespaced_name of this TagKey.
        :param parent: The parent of this TagKey.
        :param purpose: The purpose of this TagKey.
        :param purpose_data: The purpose_data of this TagKey.
        :param short_name: The short_name of this TagKey.
        :param update_time: The update_time of this TagKey.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'name': str,
            'namespaced_name': str,
            'parent': str,
            'purpose': str,
            'purpose_data': Dict[str, str],
            'short_name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'name': 'name',
            'namespaced_name': 'namespacedName',
            'parent': 'parent',
            'purpose': 'purpose',
            'purpose_data': 'purposeData',
            'short_name': 'shortName',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._name = name
        self._namespaced_name = namespaced_name
        self._parent = parent
        self._purpose = purpose
        self._purpose_data = purpose_data
        self._short_name = short_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagKey of this TagKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this TagKey.

        Output only. Creation time.

        :return: The create_time of this TagKey.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TagKey.

        Output only. Creation time.

        :param create_time: The create_time of this TagKey.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this TagKey.

        Optional. User-assigned description of the TagKey. Must not exceed 256 characters. Read-write.

        :return: The description of this TagKey.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TagKey.

        Optional. User-assigned description of the TagKey. Must not exceed 256 characters. Read-write.

        :param description: The description of this TagKey.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this TagKey.

        Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagKeyRequest for details.

        :return: The etag of this TagKey.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TagKey.

        Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagKeyRequest for details.

        :param etag: The etag of this TagKey.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this TagKey.

        Immutable. The resource name for a TagKey. Must be in the format `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for the TagKey.

        :return: The name of this TagKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagKey.

        Immutable. The resource name for a TagKey. Must be in the format `tagKeys/{tag_key_id}`, where `tag_key_id` is the generated numeric id for the TagKey.

        :param name: The name of this TagKey.
        :type name: str
        """

        self._name = name

    @property
    def namespaced_name(self):
        """Gets the namespaced_name of this TagKey.

        Output only. Immutable. Namespaced name of the TagKey.

        :return: The namespaced_name of this TagKey.
        :rtype: str
        """
        return self._namespaced_name

    @namespaced_name.setter
    def namespaced_name(self, namespaced_name):
        """Sets the namespaced_name of this TagKey.

        Output only. Immutable. Namespaced name of the TagKey.

        :param namespaced_name: The namespaced_name of this TagKey.
        :type namespaced_name: str
        """

        self._namespaced_name = namespaced_name

    @property
    def parent(self):
        """Gets the parent of this TagKey.

        Immutable. The resource name of the TagKey's parent. A TagKey can be parented by an Organization or a Project. For a TagKey parented by an Organization, its parent must be in the form `organizations/{org_id}`. For a TagKey parented by a Project, its parent can be in the form `projects/{project_id}` or `projects/{project_number}`.

        :return: The parent of this TagKey.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TagKey.

        Immutable. The resource name of the TagKey's parent. A TagKey can be parented by an Organization or a Project. For a TagKey parented by an Organization, its parent must be in the form `organizations/{org_id}`. For a TagKey parented by a Project, its parent can be in the form `projects/{project_id}` or `projects/{project_number}`.

        :param parent: The parent of this TagKey.
        :type parent: str
        """

        self._parent = parent

    @property
    def purpose(self):
        """Gets the purpose of this TagKey.

        Optional. A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines. A purpose cannot be changed once set.

        :return: The purpose of this TagKey.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this TagKey.

        Optional. A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines. A purpose cannot be changed once set.

        :param purpose: The purpose of this TagKey.
        :type purpose: str
        """
        allowed_values = ["PURPOSE_UNSPECIFIED", "GCE_FIREWALL", "DATA_GOVERNANCE"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def purpose_data(self):
        """Gets the purpose_data of this TagKey.

        Optional. Purpose data corresponds to the policy system that the tag is intended for. See documentation for `Purpose` for formatting of this field. Purpose data cannot be changed once set.

        :return: The purpose_data of this TagKey.
        :rtype: Dict[str, str]
        """
        return self._purpose_data

    @purpose_data.setter
    def purpose_data(self, purpose_data):
        """Sets the purpose_data of this TagKey.

        Optional. Purpose data corresponds to the policy system that the tag is intended for. See documentation for `Purpose` for formatting of this field. Purpose data cannot be changed once set.

        :param purpose_data: The purpose_data of this TagKey.
        :type purpose_data: Dict[str, str]
        """

        self._purpose_data = purpose_data

    @property
    def short_name(self):
        """Gets the short_name of this TagKey.

        Required. Immutable. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace. The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The short_name of this TagKey.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this TagKey.

        Required. Immutable. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace. The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param short_name: The short_name of this TagKey.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def update_time(self):
        """Gets the update_time of this TagKey.

        Output only. Update time.

        :return: The update_time of this TagKey.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TagKey.

        Output only. Update time.

        :param update_time: The update_time of this TagKey.
        :type update_time: str
        """

        self._update_time = update_time
