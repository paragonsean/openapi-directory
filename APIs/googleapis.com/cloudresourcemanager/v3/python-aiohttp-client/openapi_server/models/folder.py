# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, display_name: str=None, etag: str=None, name: str=None, parent: str=None, state: str=None, update_time: str=None):
        """Folder - a model defined in OpenAPI

        :param create_time: The create_time of this Folder.
        :param delete_time: The delete_time of this Folder.
        :param display_name: The display_name of this Folder.
        :param etag: The etag of this Folder.
        :param name: The name of this Folder.
        :param parent: The parent of this Folder.
        :param state: The state of this Folder.
        :param update_time: The update_time of this Folder.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'name': str,
            'parent': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'parent': 'parent',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._parent = parent
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Folder.

        Output only. Timestamp when the folder was created.

        :return: The create_time of this Folder.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Folder.

        Output only. Timestamp when the folder was created.

        :param create_time: The create_time of this Folder.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Folder.

        Output only. Timestamp when the folder was requested to be deleted.

        :return: The delete_time of this Folder.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Folder.

        Output only. Timestamp when the folder was requested to be deleted.

        :param delete_time: The delete_time of this Folder.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Folder.

        The folder's display name. A folder's display name must be unique amongst its siblings. For example, no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\\p{L}\\p{N}]([\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?`.

        :return: The display_name of this Folder.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Folder.

        The folder's display name. A folder's display name must be unique amongst its siblings. For example, no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\\p{L}\\p{N}]([\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?`.

        :param display_name: The display_name of this Folder.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Folder.

        Output only. A checksum computed by the server based on the current value of the folder resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Folder.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Folder.

        Output only. A checksum computed by the server based on the current value of the folder resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Folder.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this Folder.

        Output only. The resource name of the folder. Its format is `folders/{folder_id}`, for example: \"folders/1234\".

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        Output only. The resource name of the folder. Its format is `folders/{folder_id}`, for example: \"folders/1234\".

        :param name: The name of this Folder.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Folder.

        Required. The folder's parent's resource name. Updates to the folder's parent must be performed using MoveFolder.

        :return: The parent of this Folder.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Folder.

        Required. The folder's parent's resource name. Updates to the folder's parent must be performed using MoveFolder.

        :param parent: The parent of this Folder.
        :type parent: str
        """

        self._parent = parent

    @property
    def state(self):
        """Gets the state of this Folder.

        Output only. The lifecycle state of the folder. Updates to the state must be performed using DeleteFolder and UndeleteFolder.

        :return: The state of this Folder.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Folder.

        Output only. The lifecycle state of the folder. Updates to the state must be performed using DeleteFolder and UndeleteFolder.

        :param state: The state of this Folder.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Folder.

        Output only. Timestamp when the folder was last modified.

        :return: The update_time of this Folder.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Folder.

        Output only. Timestamp when the folder was last modified.

        :param update_time: The update_time of this Folder.
        :type update_time: str
        """

        self._update_time = update_time
