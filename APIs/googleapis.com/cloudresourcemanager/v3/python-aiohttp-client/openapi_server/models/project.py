# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, parent: str=None, project_id: str=None, state: str=None, update_time: str=None):
        """Project - a model defined in OpenAPI

        :param create_time: The create_time of this Project.
        :param delete_time: The delete_time of this Project.
        :param display_name: The display_name of this Project.
        :param etag: The etag of this Project.
        :param labels: The labels of this Project.
        :param name: The name of this Project.
        :param parent: The parent of this Project.
        :param project_id: The project_id of this Project.
        :param state: The state of this Project.
        :param update_time: The update_time of this Project.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'parent': str,
            'project_id': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'parent': 'parent',
            'project_id': 'projectId',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._name = name
        self._parent = parent
        self._project_id = project_id
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Project.

        Output only. Creation time.

        :return: The create_time of this Project.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Project.

        Output only. Creation time.

        :param create_time: The create_time of this Project.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Project.

        Output only. The time at which this resource was requested for deletion.

        :return: The delete_time of this Project.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Project.

        Output only. The time at which this resource was requested for deletion.

        :param delete_time: The delete_time of this Project.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Project.

        Optional. A user-assigned display name of the project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project`

        :return: The display_name of this Project.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Project.

        Optional. A user-assigned display name of the project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project`

        :param display_name: The display_name of this Project.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Project.

        Output only. A checksum computed by the server based on the current value of the Project resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Project.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Project.

        Output only. A checksum computed by the server based on the current value of the Project resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Project.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Project.

        Optional. The labels associated with this project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: \\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?. Label values must be between 0 and 63 characters long and must conform to the regular expression (\\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?)?. No more than 64 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: `\"myBusinessDimension\" : \"businessValue\"`

        :return: The labels of this Project.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Project.

        Optional. The labels associated with this project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: \\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?. Label values must be between 0 and 63 characters long and must conform to the regular expression (\\[a-z\\](\\[-a-z0-9\\]*\\[a-z0-9\\])?)?. No more than 64 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: `\"myBusinessDimension\" : \"businessValue\"`

        :param labels: The labels of this Project.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Project.

        Output only. The unique resource name of the project. It is an int64 generated number prefixed by \"projects/\". Example: `projects/415104041262`

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        Output only. The unique resource name of the project. It is an int64 generated number prefixed by \"projects/\". Example: `projects/415104041262`

        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Project.

        Optional. A reference to a parent Resource. eg., `organizations/123` or `folders/876`.

        :return: The parent of this Project.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Project.

        Optional. A reference to a parent Resource. eg., `organizations/123` or `folders/876`.

        :param parent: The parent of this Project.
        :type parent: str
        """

        self._parent = parent

    @property
    def project_id(self):
        """Gets the project_id of this Project.

        Immutable. The unique, user-assigned id of the project. It must be 6 to 30 lowercase ASCII letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123`

        :return: The project_id of this Project.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Project.

        Immutable. The unique, user-assigned id of the project. It must be 6 to 30 lowercase ASCII letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123`

        :param project_id: The project_id of this Project.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this Project.

        Output only. The project lifecycle state.

        :return: The state of this Project.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Project.

        Output only. The project lifecycle state.

        :param state: The state of this Project.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Project.

        Output only. The most recent time this resource was modified.

        :return: The update_time of this Project.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Project.

        Output only. The most recent time this resource was modified.

        :param update_time: The update_time of this Project.
        :type update_time: str
        """

        self._update_time = update_time
