# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, directory_customer_id: str=None, display_name: str=None, etag: str=None, name: str=None, state: str=None, update_time: str=None):
        """Organization - a model defined in OpenAPI

        :param create_time: The create_time of this Organization.
        :param delete_time: The delete_time of this Organization.
        :param directory_customer_id: The directory_customer_id of this Organization.
        :param display_name: The display_name of this Organization.
        :param etag: The etag of this Organization.
        :param name: The name of this Organization.
        :param state: The state of this Organization.
        :param update_time: The update_time of this Organization.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'directory_customer_id': str,
            'display_name': str,
            'etag': str,
            'name': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'directory_customer_id': 'directoryCustomerId',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._directory_customer_id = directory_customer_id
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Organization.

        Output only. Timestamp when the Organization was created.

        :return: The create_time of this Organization.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Organization.

        Output only. Timestamp when the Organization was created.

        :param create_time: The create_time of this Organization.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Organization.

        Output only. Timestamp when the Organization was requested for deletion.

        :return: The delete_time of this Organization.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Organization.

        Output only. Timestamp when the Organization was requested for deletion.

        :param delete_time: The delete_time of this Organization.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def directory_customer_id(self):
        """Gets the directory_customer_id of this Organization.

        Immutable. The G Suite / Workspace customer id used in the Directory API.

        :return: The directory_customer_id of this Organization.
        :rtype: str
        """
        return self._directory_customer_id

    @directory_customer_id.setter
    def directory_customer_id(self, directory_customer_id):
        """Sets the directory_customer_id of this Organization.

        Immutable. The G Suite / Workspace customer id used in the Directory API.

        :param directory_customer_id: The directory_customer_id of this Organization.
        :type directory_customer_id: str
        """

        self._directory_customer_id = directory_customer_id

    @property
    def display_name(self):
        """Gets the display_name of this Organization.

        Output only. A human-readable string that refers to the organization in the Google Cloud Console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, \"google.com\") of the Google Workspace customer that owns the organization.

        :return: The display_name of this Organization.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organization.

        Output only. A human-readable string that refers to the organization in the Google Cloud Console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, \"google.com\") of the Google Workspace customer that owns the organization.

        :param display_name: The display_name of this Organization.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Organization.

        Output only. A checksum computed by the server based on the current value of the Organization resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Organization.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Organization.

        Output only. A checksum computed by the server based on the current value of the Organization resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Organization.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this Organization.

        Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is \"organizations/[organization_id]\". For example, \"organizations/1234\".

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is \"organizations/[organization_id]\". For example, \"organizations/1234\".

        :param name: The name of this Organization.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Organization.

        Output only. The organization's current lifecycle state.

        :return: The state of this Organization.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Organization.

        Output only. The organization's current lifecycle state.

        :param state: The state of this Organization.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Organization.

        Output only. Timestamp when the Organization was last modified.

        :return: The update_time of this Organization.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Organization.

        Output only. Timestamp when the Organization was last modified.

        :param update_time: The update_time of this Organization.
        :type update_time: str
        """

        self._update_time = update_time
