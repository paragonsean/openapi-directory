# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, name: str=None, namespaced_name: str=None, parent: str=None, short_name: str=None, update_time: str=None):
        """TagValue - a model defined in OpenAPI

        :param create_time: The create_time of this TagValue.
        :param description: The description of this TagValue.
        :param etag: The etag of this TagValue.
        :param name: The name of this TagValue.
        :param namespaced_name: The namespaced_name of this TagValue.
        :param parent: The parent of this TagValue.
        :param short_name: The short_name of this TagValue.
        :param update_time: The update_time of this TagValue.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'name': str,
            'namespaced_name': str,
            'parent': str,
            'short_name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'name': 'name',
            'namespaced_name': 'namespacedName',
            'parent': 'parent',
            'short_name': 'shortName',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._name = name
        self._namespaced_name = namespaced_name
        self._parent = parent
        self._short_name = short_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagValue of this TagValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this TagValue.

        Output only. Creation time.

        :return: The create_time of this TagValue.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TagValue.

        Output only. Creation time.

        :param create_time: The create_time of this TagValue.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this TagValue.

        Optional. User-assigned description of the TagValue. Must not exceed 256 characters. Read-write.

        :return: The description of this TagValue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TagValue.

        Optional. User-assigned description of the TagValue. Must not exceed 256 characters. Read-write.

        :param description: The description of this TagValue.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this TagValue.

        Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagValueRequest for details.

        :return: The etag of this TagValue.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TagValue.

        Optional. Entity tag which users can pass to prevent race conditions. This field is always set in server responses. See UpdateTagValueRequest for details.

        :param etag: The etag of this TagValue.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this TagValue.

        Immutable. Resource name for TagValue in the format `tagValues/456`.

        :return: The name of this TagValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagValue.

        Immutable. Resource name for TagValue in the format `tagValues/456`.

        :param name: The name of this TagValue.
        :type name: str
        """

        self._name = name

    @property
    def namespaced_name(self):
        """Gets the namespaced_name of this TagValue.

        Output only. The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.

        :return: The namespaced_name of this TagValue.
        :rtype: str
        """
        return self._namespaced_name

    @namespaced_name.setter
    def namespaced_name(self, namespaced_name):
        """Sets the namespaced_name of this TagValue.

        Output only. The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.

        :param namespaced_name: The namespaced_name of this TagValue.
        :type namespaced_name: str
        """

        self._namespaced_name = namespaced_name

    @property
    def parent(self):
        """Gets the parent of this TagValue.

        Immutable. The resource name of the new TagValue's parent TagKey. Must be of the form `tagKeys/{tag_key_id}`.

        :return: The parent of this TagValue.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TagValue.

        Immutable. The resource name of the new TagValue's parent TagKey. Must be of the form `tagKeys/{tag_key_id}`.

        :param parent: The parent of this TagValue.
        :type parent: str
        """

        self._parent = parent

    @property
    def short_name(self):
        """Gets the short_name of this TagValue.

        Required. Immutable. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey. The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :return: The short_name of this TagValue.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this TagValue.

        Required. Immutable. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey. The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.

        :param short_name: The short_name of this TagValue.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def update_time(self):
        """Gets the update_time of this TagValue.

        Output only. Update time.

        :return: The update_time of this TagValue.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TagValue.

        Output only. Update time.

        :param update_time: The update_time of this TagValue.
        :type update_time: str
        """

        self._update_time = update_time
