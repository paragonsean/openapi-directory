/*
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TagHold represents the use of a TagValue that is not captured by TagBindings. If a TagValue has any TagHolds, deletion will be blocked. This resource is intended to be created in the same cloud location as the &#x60;holder&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:39.977186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagHold {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_HELP_LINK = "helpLink";
  @SerializedName(SERIALIZED_NAME_HELP_LINK)
  private String helpLink;

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private String holder;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public TagHold() {
  }

  public TagHold(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. The time this TagHold was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public TagHold helpLink(String helpLink) {
    this.helpLink = helpLink;
    return this;
  }

  /**
   * Optional. A URL where an end user can learn more about removing this hold. E.g. &#x60;https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing&#x60;
   * @return helpLink
   */
  @javax.annotation.Nullable
  public String getHelpLink() {
    return helpLink;
  }

  public void setHelpLink(String helpLink) {
    this.helpLink = helpLink;
  }


  public TagHold holder(String holder) {
    this.holder = holder;
    return this;
  }

  /**
   * Required. The name of the resource where the TagValue is being used. Must be less than 200 characters. E.g. &#x60;//compute.googleapis.com/compute/projects/myproject/regions/us-east-1/instanceGroupManagers/instance-group&#x60;
   * @return holder
   */
  @javax.annotation.Nullable
  public String getHolder() {
    return holder;
  }

  public void setHolder(String holder) {
    this.holder = holder;
  }


  /**
   * Output only. The resource name of a TagHold. This is a String of the form: &#x60;tagValues/{tag-value-id}/tagHolds/{tag-hold-id}&#x60; (e.g. &#x60;tagValues/123/tagHolds/456&#x60;). This resource name is generated by the server.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public TagHold origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Optional. An optional string representing the origin of this request. This field should include human-understandable information to distinguish origins from each other. Must be less than 200 characters. E.g. &#x60;migs-35678234&#x60;
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagHold tagHold = (TagHold) o;
    return Objects.equals(this.createTime, tagHold.createTime) &&
        Objects.equals(this.helpLink, tagHold.helpLink) &&
        Objects.equals(this.holder, tagHold.holder) &&
        Objects.equals(this.name, tagHold.name) &&
        Objects.equals(this.origin, tagHold.origin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, helpLink, holder, name, origin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagHold {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    helpLink: ").append(toIndentedString(helpLink)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("helpLink");
    openapiFields.add("holder");
    openapiFields.add("name");
    openapiFields.add("origin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagHold
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagHold.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagHold is not found in the empty JSON string", TagHold.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagHold.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagHold` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("helpLink") != null && !jsonObj.get("helpLink").isJsonNull()) && !jsonObj.get("helpLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpLink").toString()));
      }
      if ((jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) && !jsonObj.get("holder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holder").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagHold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagHold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagHold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagHold.class));

       return (TypeAdapter<T>) new TypeAdapter<TagHold>() {
           @Override
           public void write(JsonWriter out, TagHold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagHold read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagHold given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagHold
   * @throws IOException if the JSON string is invalid with respect to TagHold
   */
  public static TagHold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagHold.class);
  }

  /**
   * Convert an instance of TagHold to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

