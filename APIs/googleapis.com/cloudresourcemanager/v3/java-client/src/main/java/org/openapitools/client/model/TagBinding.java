/*
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TagBinding represents a connection between a TagValue and a cloud resource Once a TagBinding is created, the TagValue is applied to all the descendants of the Google Cloud resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:39.977186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagBinding {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_TAG_VALUE = "tagValue";
  @SerializedName(SERIALIZED_NAME_TAG_VALUE)
  private String tagValue;

  public static final String SERIALIZED_NAME_TAG_VALUE_NAMESPACED_NAME = "tagValueNamespacedName";
  @SerializedName(SERIALIZED_NAME_TAG_VALUE_NAMESPACED_NAME)
  private String tagValueNamespacedName;

  public TagBinding() {
  }

  public TagBinding(
     String name
  ) {
    this();
    this.name = name;
  }

  /**
   * Output only. The name of the TagBinding. This is a String of the form: &#x60;tagBindings/{full-resource-name}/{tag-value-name}&#x60; (e.g. &#x60;tagBindings/%2F%2Fcloudresourcemanager.googleapis.com%2Fprojects%2F123/tagValues/456&#x60;).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public TagBinding parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The full resource name of the resource the TagValue is bound to. E.g. &#x60;//cloudresourcemanager.googleapis.com/projects/123&#x60;
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public TagBinding tagValue(String tagValue) {
    this.tagValue = tagValue;
    return this;
  }

  /**
   * The TagValue of the TagBinding. Must be of the form &#x60;tagValues/456&#x60;.
   * @return tagValue
   */
  @javax.annotation.Nullable
  public String getTagValue() {
    return tagValue;
  }

  public void setTagValue(String tagValue) {
    this.tagValue = tagValue;
  }


  public TagBinding tagValueNamespacedName(String tagValueNamespacedName) {
    this.tagValueNamespacedName = tagValueNamespacedName;
    return this;
  }

  /**
   * The namespaced name for the TagValue of the TagBinding. Must be in the format &#x60;{parent_id}/{tag_key_short_name}/{short_name}&#x60;. For methods that support TagValue namespaced name, only one of tag_value_namespaced_name or tag_value may be filled. Requests with both fields will be rejected.
   * @return tagValueNamespacedName
   */
  @javax.annotation.Nullable
  public String getTagValueNamespacedName() {
    return tagValueNamespacedName;
  }

  public void setTagValueNamespacedName(String tagValueNamespacedName) {
    this.tagValueNamespacedName = tagValueNamespacedName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagBinding tagBinding = (TagBinding) o;
    return Objects.equals(this.name, tagBinding.name) &&
        Objects.equals(this.parent, tagBinding.parent) &&
        Objects.equals(this.tagValue, tagBinding.tagValue) &&
        Objects.equals(this.tagValueNamespacedName, tagBinding.tagValueNamespacedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, parent, tagValue, tagValueNamespacedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagBinding {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    tagValue: ").append(toIndentedString(tagValue)).append("\n");
    sb.append("    tagValueNamespacedName: ").append(toIndentedString(tagValueNamespacedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("tagValue");
    openapiFields.add("tagValueNamespacedName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagBinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagBinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagBinding is not found in the empty JSON string", TagBinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagBinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagBinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("tagValue") != null && !jsonObj.get("tagValue").isJsonNull()) && !jsonObj.get("tagValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagValue").toString()));
      }
      if ((jsonObj.get("tagValueNamespacedName") != null && !jsonObj.get("tagValueNamespacedName").isJsonNull()) && !jsonObj.get("tagValueNamespacedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagValueNamespacedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagValueNamespacedName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagBinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagBinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagBinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagBinding.class));

       return (TypeAdapter<T>) new TypeAdapter<TagBinding>() {
           @Override
           public void write(JsonWriter out, TagBinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagBinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagBinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagBinding
   * @throws IOException if the JSON string is invalid with respect to TagBinding
   */
  public static TagBinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagBinding.class);
  }

  /**
   * Convert an instance of TagBinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

