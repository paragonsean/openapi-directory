# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditLogConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exempted_members: List[str]=None, log_type: str=None):
        """AuditLogConfig - a model defined in OpenAPI

        :param exempted_members: The exempted_members of this AuditLogConfig.
        :param log_type: The log_type of this AuditLogConfig.
        """
        self.openapi_types = {
            'exempted_members': List[str],
            'log_type': str
        }

        self.attribute_map = {
            'exempted_members': 'exemptedMembers',
            'log_type': 'logType'
        }

        self._exempted_members = exempted_members
        self._log_type = log_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditLogConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditLogConfig of this AuditLogConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exempted_members(self):
        """Gets the exempted_members of this AuditLogConfig.

        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.

        :return: The exempted_members of this AuditLogConfig.
        :rtype: List[str]
        """
        return self._exempted_members

    @exempted_members.setter
    def exempted_members(self, exempted_members):
        """Sets the exempted_members of this AuditLogConfig.

        Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.

        :param exempted_members: The exempted_members of this AuditLogConfig.
        :type exempted_members: List[str]
        """

        self._exempted_members = exempted_members

    @property
    def log_type(self):
        """Gets the log_type of this AuditLogConfig.

        The log type that this config enables.

        :return: The log_type of this AuditLogConfig.
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this AuditLogConfig.

        The log type that this config enables.

        :param log_type: The log_type of this AuditLogConfig.
        :type log_type: str
        """
        allowed_values = ["LOG_TYPE_UNSPECIFIED", "ADMIN_READ", "DATA_WRITE", "DATA_READ"]  # noqa: E501
        if log_type not in allowed_values:
            raise ValueError(
                "Invalid value for `log_type` ({0}), must be one of {1}"
                .format(log_type, allowed_values)
            )

        self._log_type = log_type
