/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAncestryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAncestryResponse::OAIGetAncestryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAncestryResponse::OAIGetAncestryResponse() {
    this->initializeModel();
}

OAIGetAncestryResponse::~OAIGetAncestryResponse() {}

void OAIGetAncestryResponse::initializeModel() {

    m_ancestor_isSet = false;
    m_ancestor_isValid = false;
}

void OAIGetAncestryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAncestryResponse::fromJsonObject(QJsonObject json) {

    m_ancestor_isValid = ::OpenAPI::fromJsonValue(m_ancestor, json[QString("ancestor")]);
    m_ancestor_isSet = !json[QString("ancestor")].isNull() && m_ancestor_isValid;
}

QString OAIGetAncestryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAncestryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestor.size() > 0) {
        obj.insert(QString("ancestor"), ::OpenAPI::toJsonValue(m_ancestor));
    }
    return obj;
}

QList<OAIAncestor> OAIGetAncestryResponse::getAncestor() const {
    return m_ancestor;
}
void OAIGetAncestryResponse::setAncestor(const QList<OAIAncestor> &ancestor) {
    m_ancestor = ancestor;
    m_ancestor_isSet = true;
}

bool OAIGetAncestryResponse::is_ancestor_Set() const{
    return m_ancestor_isSet;
}

bool OAIGetAncestryResponse::is_ancestor_Valid() const{
    return m_ancestor_isValid;
}

bool OAIGetAncestryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestor.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAncestryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
