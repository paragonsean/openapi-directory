/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_lifecycle_state_isSet = false;
    m_lifecycle_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state, json[QString("lifecycleState")]);
    m_lifecycle_state_isSet = !json[QString("lifecycleState")].isNull() && m_lifecycle_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_lifecycle_state_isSet) {
        obj.insert(QString("lifecycleState"), ::OpenAPI::toJsonValue(m_lifecycle_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    return obj;
}

QString OAIOrganization::getCreationTime() const {
    return m_creation_time;
}
void OAIOrganization::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIOrganization::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIOrganization::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIOrganization::getDisplayName() const {
    return m_display_name;
}
void OAIOrganization::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOrganization::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOrganization::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOrganization::getLifecycleState() const {
    return m_lifecycle_state;
}
void OAIOrganization::setLifecycleState(const QString &lifecycle_state) {
    m_lifecycle_state = lifecycle_state;
    m_lifecycle_state_isSet = true;
}

bool OAIOrganization::is_lifecycle_state_Set() const{
    return m_lifecycle_state_isSet;
}

bool OAIOrganization::is_lifecycle_state_Valid() const{
    return m_lifecycle_state_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganization::getOrganizationId() const {
    return m_organization_id;
}
void OAIOrganization::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIOrganization::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIOrganization::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

OAIOrganizationOwner OAIOrganization::getOwner() const {
    return m_owner;
}
void OAIOrganization::setOwner(const OAIOrganizationOwner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIOrganization::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIOrganization::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
