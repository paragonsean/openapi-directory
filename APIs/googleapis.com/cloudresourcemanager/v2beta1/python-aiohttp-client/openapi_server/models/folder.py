# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, lifecycle_state: str=None, name: str=None, parent: str=None):
        """Folder - a model defined in OpenAPI

        :param create_time: The create_time of this Folder.
        :param display_name: The display_name of this Folder.
        :param lifecycle_state: The lifecycle_state of this Folder.
        :param name: The name of this Folder.
        :param parent: The parent of this Folder.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'lifecycle_state': str,
            'name': str,
            'parent': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'lifecycle_state': 'lifecycleState',
            'name': 'name',
            'parent': 'parent'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._lifecycle_state = lifecycle_state
        self._name = name
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Folder.

        Output only. Timestamp when the Folder was created. Assigned by the server.

        :return: The create_time of this Folder.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Folder.

        Output only. Timestamp when the Folder was created. Assigned by the server.

        :param create_time: The create_time of this Folder.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this Folder.

        The folder's display name. A folder's display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\\p{L}\\p{N}]([\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?`.

        :return: The display_name of this Folder.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Folder.

        The folder's display name. A folder's display name must be unique amongst its siblings, e.g. no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\\p{L}\\p{N}]([\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?`.

        :param display_name: The display_name of this Folder.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def lifecycle_state(self):
        """Gets the lifecycle_state of this Folder.

        Output only. The lifecycle state of the folder. Updates to the lifecycle_state must be performed via DeleteFolder and UndeleteFolder.

        :return: The lifecycle_state of this Folder.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state):
        """Sets the lifecycle_state of this Folder.

        Output only. The lifecycle state of the folder. Updates to the lifecycle_state must be performed via DeleteFolder and UndeleteFolder.

        :param lifecycle_state: The lifecycle_state of this Folder.
        :type lifecycle_state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def name(self):
        """Gets the name of this Folder.

        Output only. The resource name of the Folder. Its format is `folders/{folder_id}`, for example: \"folders/1234\".

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        Output only. The resource name of the Folder. Its format is `folders/{folder_id}`, for example: \"folders/1234\".

        :param name: The name of this Folder.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Folder.

        Required. The Folder's parent's resource name. Updates to the folder's parent must be performed via MoveFolder.

        :return: The parent of this Folder.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Folder.

        Required. The Folder's parent's resource name. Updates to the folder's parent must be performed via MoveFolder.

        :param parent: The parent of this Folder.
        :type parent: str
        """

        self._parent = parent
