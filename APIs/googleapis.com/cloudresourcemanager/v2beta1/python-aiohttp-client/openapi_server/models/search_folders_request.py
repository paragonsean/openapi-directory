# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchFoldersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_size: int=None, page_token: str=None, query: str=None):
        """SearchFoldersRequest - a model defined in OpenAPI

        :param page_size: The page_size of this SearchFoldersRequest.
        :param page_token: The page_token of this SearchFoldersRequest.
        :param query: The query of this SearchFoldersRequest.
        """
        self.openapi_types = {
            'page_size': int,
            'page_token': str,
            'query': str
        }

        self.attribute_map = {
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'query': 'query'
        }

        self._page_size = page_size
        self._page_token = page_token
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFoldersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchFoldersRequest of this SearchFoldersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_size(self):
        """Gets the page_size of this SearchFoldersRequest.

        Optional. The maximum number of folders to return in the response. The server can return fewer folders than requested. If unspecified, server picks an appropriate default.

        :return: The page_size of this SearchFoldersRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchFoldersRequest.

        Optional. The maximum number of folders to return in the response. The server can return fewer folders than requested. If unspecified, server picks an appropriate default.

        :param page_size: The page_size of this SearchFoldersRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this SearchFoldersRequest.

        Optional. A pagination token returned from a previous call to `SearchFolders` that indicates from where search should continue.

        :return: The page_token of this SearchFoldersRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchFoldersRequest.

        Optional. A pagination token returned from a previous call to `SearchFolders` that indicates from where search should continue.

        :param page_token: The page_token of this SearchFoldersRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def query(self):
        """Gets the query of this SearchFoldersRequest.

        Search criteria used to select the Folders to return. If no search criteria is specified then all accessible folders will be returned. Query expressions can be used to restrict results based upon displayName, lifecycleState and parent, where the operators `=`, `NOT`, `AND` and `OR` can be used along with the suffix wildcard symbol `*`. The displayName field in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior. Some example queries are: * Query `displayName=Test*` returns Folder resources whose display name starts with \"Test\". * Query `lifecycleState=ACTIVE` returns Folder resources with `lifecycleState` set to `ACTIVE`. * Query `parent=folders/123` returns Folder resources that have `folders/123` as a parent resource. * Query `parent=folders/123 AND lifecycleState=ACTIVE` returns active Folder resources that have `folders/123` as a parent resource. * Query `displayName=\\\\\"Test String\\\\\"` returns Folder resources with display names that include both \"Test\" and \"String\".

        :return: The query of this SearchFoldersRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchFoldersRequest.

        Search criteria used to select the Folders to return. If no search criteria is specified then all accessible folders will be returned. Query expressions can be used to restrict results based upon displayName, lifecycleState and parent, where the operators `=`, `NOT`, `AND` and `OR` can be used along with the suffix wildcard symbol `*`. The displayName field in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior. Some example queries are: * Query `displayName=Test*` returns Folder resources whose display name starts with \"Test\". * Query `lifecycleState=ACTIVE` returns Folder resources with `lifecycleState` set to `ACTIVE`. * Query `parent=folders/123` returns Folder resources that have `folders/123` as a parent resource. * Query `parent=folders/123 AND lifecycleState=ACTIVE` returns active Folder resources that have `folders/123` as a parent resource. * Query `displayName=\\\\\"Test String\\\\\"` returns Folder resources with display names that include both \"Test\" and \"String\".

        :param query: The query of this SearchFoldersRequest.
        :type query: str
        """

        self._query = query
