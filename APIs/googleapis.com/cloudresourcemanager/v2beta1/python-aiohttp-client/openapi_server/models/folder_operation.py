# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_parent: str=None, display_name: str=None, operation_type: str=None, source_parent: str=None):
        """FolderOperation - a model defined in OpenAPI

        :param destination_parent: The destination_parent of this FolderOperation.
        :param display_name: The display_name of this FolderOperation.
        :param operation_type: The operation_type of this FolderOperation.
        :param source_parent: The source_parent of this FolderOperation.
        """
        self.openapi_types = {
            'destination_parent': str,
            'display_name': str,
            'operation_type': str,
            'source_parent': str
        }

        self.attribute_map = {
            'destination_parent': 'destinationParent',
            'display_name': 'displayName',
            'operation_type': 'operationType',
            'source_parent': 'sourceParent'
        }

        self._destination_parent = destination_parent
        self._display_name = display_name
        self._operation_type = operation_type
        self._source_parent = source_parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderOperation of this FolderOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_parent(self):
        """Gets the destination_parent of this FolderOperation.

        The resource name of the folder or organization we are either creating the folder under or moving the folder to.

        :return: The destination_parent of this FolderOperation.
        :rtype: str
        """
        return self._destination_parent

    @destination_parent.setter
    def destination_parent(self, destination_parent):
        """Sets the destination_parent of this FolderOperation.

        The resource name of the folder or organization we are either creating the folder under or moving the folder to.

        :param destination_parent: The destination_parent of this FolderOperation.
        :type destination_parent: str
        """

        self._destination_parent = destination_parent

    @property
    def display_name(self):
        """Gets the display_name of this FolderOperation.

        The display name of the folder.

        :return: The display_name of this FolderOperation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FolderOperation.

        The display name of the folder.

        :param display_name: The display_name of this FolderOperation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def operation_type(self):
        """Gets the operation_type of this FolderOperation.

        The type of this operation.

        :return: The operation_type of this FolderOperation.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this FolderOperation.

        The type of this operation.

        :param operation_type: The operation_type of this FolderOperation.
        :type operation_type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "CREATE", "MOVE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def source_parent(self):
        """Gets the source_parent of this FolderOperation.

        The resource name of the folder's parent. Only applicable when the operation_type is MOVE.

        :return: The source_parent of this FolderOperation.
        :rtype: str
        """
        return self._source_parent

    @source_parent.setter
    def source_parent(self, source_parent):
        """Sets the source_parent of this FolderOperation.

        The resource name of the folder's parent. Only applicable when the operation_type is MOVE.

        :param source_parent: The source_parent of this FolderOperation.
        :type source_parent: str
        """

        self._source_parent = source_parent
