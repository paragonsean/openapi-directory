/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgPolicy::OAIOrgPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgPolicy::OAIOrgPolicy() {
    this->initializeModel();
}

OAIOrgPolicy::~OAIOrgPolicy() {}

void OAIOrgPolicy::initializeModel() {

    m_boolean_policy_isSet = false;
    m_boolean_policy_isValid = false;

    m_constraint_isSet = false;
    m_constraint_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_list_policy_isSet = false;
    m_list_policy_isValid = false;

    m_restore_default_isSet = false;
    m_restore_default_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOrgPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgPolicy::fromJsonObject(QJsonObject json) {

    m_boolean_policy_isValid = ::OpenAPI::fromJsonValue(m_boolean_policy, json[QString("booleanPolicy")]);
    m_boolean_policy_isSet = !json[QString("booleanPolicy")].isNull() && m_boolean_policy_isValid;

    m_constraint_isValid = ::OpenAPI::fromJsonValue(m_constraint, json[QString("constraint")]);
    m_constraint_isSet = !json[QString("constraint")].isNull() && m_constraint_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_list_policy_isValid = ::OpenAPI::fromJsonValue(m_list_policy, json[QString("listPolicy")]);
    m_list_policy_isSet = !json[QString("listPolicy")].isNull() && m_list_policy_isValid;

    m_restore_default_isValid = ::OpenAPI::fromJsonValue(m_restore_default, json[QString("restoreDefault")]);
    m_restore_default_isSet = !json[QString("restoreDefault")].isNull() && m_restore_default_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOrgPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_policy.isSet()) {
        obj.insert(QString("booleanPolicy"), ::OpenAPI::toJsonValue(m_boolean_policy));
    }
    if (m_constraint_isSet) {
        obj.insert(QString("constraint"), ::OpenAPI::toJsonValue(m_constraint));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_list_policy.isSet()) {
        obj.insert(QString("listPolicy"), ::OpenAPI::toJsonValue(m_list_policy));
    }
    if (m_restore_default_isSet) {
        obj.insert(QString("restoreDefault"), ::OpenAPI::toJsonValue(m_restore_default));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIBooleanPolicy OAIOrgPolicy::getBooleanPolicy() const {
    return m_boolean_policy;
}
void OAIOrgPolicy::setBooleanPolicy(const OAIBooleanPolicy &boolean_policy) {
    m_boolean_policy = boolean_policy;
    m_boolean_policy_isSet = true;
}

bool OAIOrgPolicy::is_boolean_policy_Set() const{
    return m_boolean_policy_isSet;
}

bool OAIOrgPolicy::is_boolean_policy_Valid() const{
    return m_boolean_policy_isValid;
}

QString OAIOrgPolicy::getConstraint() const {
    return m_constraint;
}
void OAIOrgPolicy::setConstraint(const QString &constraint) {
    m_constraint = constraint;
    m_constraint_isSet = true;
}

bool OAIOrgPolicy::is_constraint_Set() const{
    return m_constraint_isSet;
}

bool OAIOrgPolicy::is_constraint_Valid() const{
    return m_constraint_isValid;
}

QByteArray OAIOrgPolicy::getEtag() const {
    return m_etag;
}
void OAIOrgPolicy::setEtag(const QByteArray &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIOrgPolicy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIOrgPolicy::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIListPolicy OAIOrgPolicy::getListPolicy() const {
    return m_list_policy;
}
void OAIOrgPolicy::setListPolicy(const OAIListPolicy &list_policy) {
    m_list_policy = list_policy;
    m_list_policy_isSet = true;
}

bool OAIOrgPolicy::is_list_policy_Set() const{
    return m_list_policy_isSet;
}

bool OAIOrgPolicy::is_list_policy_Valid() const{
    return m_list_policy_isValid;
}

OAIObject OAIOrgPolicy::getRestoreDefault() const {
    return m_restore_default;
}
void OAIOrgPolicy::setRestoreDefault(const OAIObject &restore_default) {
    m_restore_default = restore_default;
    m_restore_default_isSet = true;
}

bool OAIOrgPolicy::is_restore_default_Set() const{
    return m_restore_default_isSet;
}

bool OAIOrgPolicy::is_restore_default_Valid() const{
    return m_restore_default_isValid;
}

QString OAIOrgPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIOrgPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOrgPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOrgPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIOrgPolicy::getVersion() const {
    return m_version;
}
void OAIOrgPolicy::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOrgPolicy::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOrgPolicy::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOrgPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
