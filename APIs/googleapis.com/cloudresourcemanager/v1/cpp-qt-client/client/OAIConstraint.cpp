/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConstraint::OAIConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConstraint::OAIConstraint() {
    this->initializeModel();
}

OAIConstraint::~OAIConstraint() {}

void OAIConstraint::initializeModel() {

    m_boolean_constraint_isSet = false;
    m_boolean_constraint_isValid = false;

    m_constraint_default_isSet = false;
    m_constraint_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_list_constraint_isSet = false;
    m_list_constraint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConstraint::fromJsonObject(QJsonObject json) {

    m_boolean_constraint_isValid = ::OpenAPI::fromJsonValue(m_boolean_constraint, json[QString("booleanConstraint")]);
    m_boolean_constraint_isSet = !json[QString("booleanConstraint")].isNull() && m_boolean_constraint_isValid;

    m_constraint_default_isValid = ::OpenAPI::fromJsonValue(m_constraint_default, json[QString("constraintDefault")]);
    m_constraint_default_isSet = !json[QString("constraintDefault")].isNull() && m_constraint_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_list_constraint_isValid = ::OpenAPI::fromJsonValue(m_list_constraint, json[QString("listConstraint")]);
    m_list_constraint_isSet = !json[QString("listConstraint")].isNull() && m_list_constraint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_constraint_isSet) {
        obj.insert(QString("booleanConstraint"), ::OpenAPI::toJsonValue(m_boolean_constraint));
    }
    if (m_constraint_default_isSet) {
        obj.insert(QString("constraintDefault"), ::OpenAPI::toJsonValue(m_constraint_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_list_constraint.isSet()) {
        obj.insert(QString("listConstraint"), ::OpenAPI::toJsonValue(m_list_constraint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIConstraint::getBooleanConstraint() const {
    return m_boolean_constraint;
}
void OAIConstraint::setBooleanConstraint(const OAIObject &boolean_constraint) {
    m_boolean_constraint = boolean_constraint;
    m_boolean_constraint_isSet = true;
}

bool OAIConstraint::is_boolean_constraint_Set() const{
    return m_boolean_constraint_isSet;
}

bool OAIConstraint::is_boolean_constraint_Valid() const{
    return m_boolean_constraint_isValid;
}

QString OAIConstraint::getConstraintDefault() const {
    return m_constraint_default;
}
void OAIConstraint::setConstraintDefault(const QString &constraint_default) {
    m_constraint_default = constraint_default;
    m_constraint_default_isSet = true;
}

bool OAIConstraint::is_constraint_default_Set() const{
    return m_constraint_default_isSet;
}

bool OAIConstraint::is_constraint_default_Valid() const{
    return m_constraint_default_isValid;
}

QString OAIConstraint::getDescription() const {
    return m_description;
}
void OAIConstraint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConstraint::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConstraint::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConstraint::getDisplayName() const {
    return m_display_name;
}
void OAIConstraint::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConstraint::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConstraint::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIListConstraint OAIConstraint::getListConstraint() const {
    return m_list_constraint;
}
void OAIConstraint::setListConstraint(const OAIListConstraint &list_constraint) {
    m_list_constraint = list_constraint;
    m_list_constraint_isSet = true;
}

bool OAIConstraint::is_list_constraint_Set() const{
    return m_list_constraint_isSet;
}

bool OAIConstraint::is_list_constraint_Valid() const{
    return m_list_constraint_isValid;
}

QString OAIConstraint::getName() const {
    return m_name;
}
void OAIConstraint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConstraint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConstraint::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIConstraint::getVersion() const {
    return m_version;
}
void OAIConstraint::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConstraint::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConstraint::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
