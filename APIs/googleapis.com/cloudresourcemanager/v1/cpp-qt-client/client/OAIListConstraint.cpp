/**
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListConstraint::OAIListConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListConstraint::OAIListConstraint() {
    this->initializeModel();
}

OAIListConstraint::~OAIListConstraint() {}

void OAIListConstraint::initializeModel() {

    m_suggested_value_isSet = false;
    m_suggested_value_isValid = false;

    m_supports_under_isSet = false;
    m_supports_under_isValid = false;
}

void OAIListConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListConstraint::fromJsonObject(QJsonObject json) {

    m_suggested_value_isValid = ::OpenAPI::fromJsonValue(m_suggested_value, json[QString("suggestedValue")]);
    m_suggested_value_isSet = !json[QString("suggestedValue")].isNull() && m_suggested_value_isValid;

    m_supports_under_isValid = ::OpenAPI::fromJsonValue(m_supports_under, json[QString("supportsUnder")]);
    m_supports_under_isSet = !json[QString("supportsUnder")].isNull() && m_supports_under_isValid;
}

QString OAIListConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_suggested_value_isSet) {
        obj.insert(QString("suggestedValue"), ::OpenAPI::toJsonValue(m_suggested_value));
    }
    if (m_supports_under_isSet) {
        obj.insert(QString("supportsUnder"), ::OpenAPI::toJsonValue(m_supports_under));
    }
    return obj;
}

QString OAIListConstraint::getSuggestedValue() const {
    return m_suggested_value;
}
void OAIListConstraint::setSuggestedValue(const QString &suggested_value) {
    m_suggested_value = suggested_value;
    m_suggested_value_isSet = true;
}

bool OAIListConstraint::is_suggested_value_Set() const{
    return m_suggested_value_isSet;
}

bool OAIListConstraint::is_suggested_value_Valid() const{
    return m_suggested_value_isValid;
}

bool OAIListConstraint::isSupportsUnder() const {
    return m_supports_under;
}
void OAIListConstraint::setSupportsUnder(const bool &supports_under) {
    m_supports_under = supports_under;
    m_supports_under_isSet = true;
}

bool OAIListConstraint::is_supports_under_Set() const{
    return m_supports_under_isSet;
}

bool OAIListConstraint::is_supports_under_Valid() const{
    return m_supports_under_isValid;
}

bool OAIListConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggested_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_under_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
