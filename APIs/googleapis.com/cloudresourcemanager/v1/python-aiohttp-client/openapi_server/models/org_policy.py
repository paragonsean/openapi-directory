# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_policy import BooleanPolicy
from openapi_server.models.list_policy import ListPolicy
from openapi_server import util


class OrgPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean_policy: BooleanPolicy=None, constraint: str=None, etag: str=None, list_policy: ListPolicy=None, restore_default: object=None, update_time: str=None, version: int=None):
        """OrgPolicy - a model defined in OpenAPI

        :param boolean_policy: The boolean_policy of this OrgPolicy.
        :param constraint: The constraint of this OrgPolicy.
        :param etag: The etag of this OrgPolicy.
        :param list_policy: The list_policy of this OrgPolicy.
        :param restore_default: The restore_default of this OrgPolicy.
        :param update_time: The update_time of this OrgPolicy.
        :param version: The version of this OrgPolicy.
        """
        self.openapi_types = {
            'boolean_policy': BooleanPolicy,
            'constraint': str,
            'etag': str,
            'list_policy': ListPolicy,
            'restore_default': object,
            'update_time': str,
            'version': int
        }

        self.attribute_map = {
            'boolean_policy': 'booleanPolicy',
            'constraint': 'constraint',
            'etag': 'etag',
            'list_policy': 'listPolicy',
            'restore_default': 'restoreDefault',
            'update_time': 'updateTime',
            'version': 'version'
        }

        self._boolean_policy = boolean_policy
        self._constraint = constraint
        self._etag = etag
        self._list_policy = list_policy
        self._restore_default = restore_default
        self._update_time = update_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgPolicy of this OrgPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean_policy(self):
        """Gets the boolean_policy of this OrgPolicy.


        :return: The boolean_policy of this OrgPolicy.
        :rtype: BooleanPolicy
        """
        return self._boolean_policy

    @boolean_policy.setter
    def boolean_policy(self, boolean_policy):
        """Sets the boolean_policy of this OrgPolicy.


        :param boolean_policy: The boolean_policy of this OrgPolicy.
        :type boolean_policy: BooleanPolicy
        """

        self._boolean_policy = boolean_policy

    @property
    def constraint(self):
        """Gets the constraint of this OrgPolicy.

        The name of the `Constraint` the `Policy` is configuring, for example, `constraints/serviceuser.services`. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.

        :return: The constraint of this OrgPolicy.
        :rtype: str
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this OrgPolicy.

        The name of the `Constraint` the `Policy` is configuring, for example, `constraints/serviceuser.services`. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.

        :param constraint: The constraint of this OrgPolicy.
        :type constraint: str
        """

        self._constraint = constraint

    @property
    def etag(self):
        """Gets the etag of this OrgPolicy.

        An opaque tag indicating the current version of the `Policy`, used for concurrency control. When the `Policy` is returned from either a `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset. When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value that was returned from a `GetOrgPolicy` request as part of a read-modify-write loop for concurrency control. Not setting the `etag`in a `SetOrgPolicy` request will result in an unconditional write of the `Policy`.

        :return: The etag of this OrgPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this OrgPolicy.

        An opaque tag indicating the current version of the `Policy`, used for concurrency control. When the `Policy` is returned from either a `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset. When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value that was returned from a `GetOrgPolicy` request as part of a read-modify-write loop for concurrency control. Not setting the `etag`in a `SetOrgPolicy` request will result in an unconditional write of the `Policy`.

        :param etag: The etag of this OrgPolicy.
        :type etag: str
        """

        self._etag = etag

    @property
    def list_policy(self):
        """Gets the list_policy of this OrgPolicy.


        :return: The list_policy of this OrgPolicy.
        :rtype: ListPolicy
        """
        return self._list_policy

    @list_policy.setter
    def list_policy(self, list_policy):
        """Sets the list_policy of this OrgPolicy.


        :param list_policy: The list_policy of this OrgPolicy.
        :type list_policy: ListPolicy
        """

        self._list_policy = list_policy

    @property
    def restore_default(self):
        """Gets the restore_default of this OrgPolicy.

        Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. Suppose that `constraint_default` is set to `ALLOW` for the `Constraint` `constraints/serviceuser.services`. Suppose that organization foo.com sets a `Policy` at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a `Policy` with the `policy_type` `restore_default` on several experimental projects, restoring the `constraint_default` enforcement of the `Constraint` for only those projects, allowing those projects to have all services activated.

        :return: The restore_default of this OrgPolicy.
        :rtype: object
        """
        return self._restore_default

    @restore_default.setter
    def restore_default(self, restore_default):
        """Sets the restore_default of this OrgPolicy.

        Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. Suppose that `constraint_default` is set to `ALLOW` for the `Constraint` `constraints/serviceuser.services`. Suppose that organization foo.com sets a `Policy` at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a `Policy` with the `policy_type` `restore_default` on several experimental projects, restoring the `constraint_default` enforcement of the `Constraint` for only those projects, allowing those projects to have all services activated.

        :param restore_default: The restore_default of this OrgPolicy.
        :type restore_default: object
        """

        self._restore_default = restore_default

    @property
    def update_time(self):
        """Gets the update_time of this OrgPolicy.

        The time stamp the `Policy` was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to `SetOrgPolicy` was made for that `Policy`. Any value set by the client will be ignored.

        :return: The update_time of this OrgPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OrgPolicy.

        The time stamp the `Policy` was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to `SetOrgPolicy` was made for that `Policy`. Any value set by the client will be ignored.

        :param update_time: The update_time of this OrgPolicy.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this OrgPolicy.

        Version of the `Policy`. Default version is 0;

        :return: The version of this OrgPolicy.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OrgPolicy.

        Version of the `Policy`. Default version is 0;

        :param version: The version of this OrgPolicy.
        :type version: int
        """

        self._version = version
