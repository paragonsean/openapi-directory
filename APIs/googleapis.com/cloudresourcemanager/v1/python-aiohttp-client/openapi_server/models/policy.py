# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_config import AuditConfig
from openapi_server.models.binding import Binding
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_configs: List[AuditConfig]=None, bindings: List[Binding]=None, etag: str=None, version: int=None):
        """Policy - a model defined in OpenAPI

        :param audit_configs: The audit_configs of this Policy.
        :param bindings: The bindings of this Policy.
        :param etag: The etag of this Policy.
        :param version: The version of this Policy.
        """
        self.openapi_types = {
            'audit_configs': List[AuditConfig],
            'bindings': List[Binding],
            'etag': str,
            'version': int
        }

        self.attribute_map = {
            'audit_configs': 'auditConfigs',
            'bindings': 'bindings',
            'etag': 'etag',
            'version': 'version'
        }

        self._audit_configs = audit_configs
        self._bindings = bindings
        self._etag = etag
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy of this Policy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_configs(self):
        """Gets the audit_configs of this Policy.

        Specifies cloud audit logging configuration for this policy.

        :return: The audit_configs of this Policy.
        :rtype: List[AuditConfig]
        """
        return self._audit_configs

    @audit_configs.setter
    def audit_configs(self, audit_configs):
        """Sets the audit_configs of this Policy.

        Specifies cloud audit logging configuration for this policy.

        :param audit_configs: The audit_configs of this Policy.
        :type audit_configs: List[AuditConfig]
        """

        self._audit_configs = audit_configs

    @property
    def bindings(self):
        """Gets the bindings of this Policy.

        Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.

        :return: The bindings of this Policy.
        :rtype: List[Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Policy.

        Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.

        :param bindings: The bindings of this Policy.
        :type bindings: List[Binding]
        """

        self._bindings = bindings

    @property
    def etag(self):
        """Gets the etag of this Policy.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.

        :return: The etag of this Policy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Policy.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.

        :param etag: The etag of this Policy.
        :type etag: str
        """

        self._etag = etag

    @property
    def version(self):
        """Gets the version of this Policy.

        Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).

        :return: The version of this Policy.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Policy.

        Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).

        :param version: The version of this Policy.
        :type version: int
        """

        self._version = version
