# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_id import ResourceId
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, labels: Dict[str, str]=None, lifecycle_state: str=None, name: str=None, parent: ResourceId=None, project_id: str=None, project_number: str=None):
        """Project - a model defined in OpenAPI

        :param create_time: The create_time of this Project.
        :param labels: The labels of this Project.
        :param lifecycle_state: The lifecycle_state of this Project.
        :param name: The name of this Project.
        :param parent: The parent of this Project.
        :param project_id: The project_id of this Project.
        :param project_number: The project_number of this Project.
        """
        self.openapi_types = {
            'create_time': str,
            'labels': Dict[str, str],
            'lifecycle_state': str,
            'name': str,
            'parent': ResourceId,
            'project_id': str,
            'project_number': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'labels': 'labels',
            'lifecycle_state': 'lifecycleState',
            'name': 'name',
            'parent': 'parent',
            'project_id': 'projectId',
            'project_number': 'projectNumber'
        }

        self._create_time = create_time
        self._labels = labels
        self._lifecycle_state = lifecycle_state
        self._name = name
        self._parent = parent
        self._project_id = project_id
        self._project_number = project_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Project.

        Creation time. Read-only.

        :return: The create_time of this Project.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Project.

        Creation time. Read-only.

        :param create_time: The create_time of this Project.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def labels(self):
        """Gets the labels of this Project.

        The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: \"environment\" : \"dev\" Read-write.

        :return: The labels of this Project.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Project.

        The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: \"environment\" : \"dev\" Read-write.

        :param labels: The labels of this Project.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lifecycle_state(self):
        """Gets the lifecycle_state of this Project.

        The Project lifecycle state. Read-only.

        :return: The lifecycle_state of this Project.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state):
        """Sets the lifecycle_state of this Project.

        The Project lifecycle state. Read-only.

        :param lifecycle_state: The lifecycle_state of this Project.
        :type lifecycle_state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED", "DELETE_IN_PROGRESS"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def name(self):
        """Gets the name of this Project.

        The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.

        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Project.


        :return: The parent of this Project.
        :rtype: ResourceId
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Project.


        :param parent: The parent of this Project.
        :type parent: ResourceId
        """

        self._parent = parent

    @property
    def project_id(self):
        """Gets the project_id of this Project.

        The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.

        :return: The project_id of this Project.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Project.

        The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.

        :param project_id: The project_id of this Project.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_number(self):
        """Gets the project_number of this Project.

        The number uniquely identifying the project. Example: `415104041262` Read-only.

        :return: The project_number of this Project.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this Project.

        The number uniquely identifying the project. Example: `415104041262` Read-only.

        :param project_number: The project_number of this Project.
        :type project_number: str
        """

        self._project_number = project_number
