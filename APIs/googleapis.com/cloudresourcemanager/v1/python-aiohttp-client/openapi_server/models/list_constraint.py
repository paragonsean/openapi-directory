# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggested_value: str=None, supports_under: bool=None):
        """ListConstraint - a model defined in OpenAPI

        :param suggested_value: The suggested_value of this ListConstraint.
        :param supports_under: The supports_under of this ListConstraint.
        """
        self.openapi_types = {
            'suggested_value': str,
            'supports_under': bool
        }

        self.attribute_map = {
            'suggested_value': 'suggestedValue',
            'supports_under': 'supportsUnder'
        }

        self._suggested_value = suggested_value
        self._supports_under = supports_under

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListConstraint of this ListConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggested_value(self):
        """Gets the suggested_value of this ListConstraint.

        Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Constraint`.

        :return: The suggested_value of this ListConstraint.
        :rtype: str
        """
        return self._suggested_value

    @suggested_value.setter
    def suggested_value(self, suggested_value):
        """Sets the suggested_value of this ListConstraint.

        Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Constraint`.

        :param suggested_value: The suggested_value of this ListConstraint.
        :type suggested_value: str
        """

        self._suggested_value = suggested_value

    @property
    def supports_under(self):
        """Gets the supports_under of this ListConstraint.

        Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"under:folders/123\"` would match any resource under the 'folders/123' folder.

        :return: The supports_under of this ListConstraint.
        :rtype: bool
        """
        return self._supports_under

    @supports_under.setter
    def supports_under(self, supports_under):
        """Sets the supports_under of this ListConstraint.

        Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"under:folders/123\"` would match any resource under the 'folders/123' folder.

        :param supports_under: The supports_under of this ListConstraint.
        :type supports_under: bool
        """

        self._supports_under = supports_under
