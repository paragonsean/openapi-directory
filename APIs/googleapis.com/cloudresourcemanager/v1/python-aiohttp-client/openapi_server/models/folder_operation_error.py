# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderOperationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message_id: str=None):
        """FolderOperationError - a model defined in OpenAPI

        :param error_message_id: The error_message_id of this FolderOperationError.
        """
        self.openapi_types = {
            'error_message_id': str
        }

        self.attribute_map = {
            'error_message_id': 'errorMessageId'
        }

        self._error_message_id = error_message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderOperationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderOperationError of this FolderOperationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message_id(self):
        """Gets the error_message_id of this FolderOperationError.

        The type of operation error experienced.

        :return: The error_message_id of this FolderOperationError.
        :rtype: str
        """
        return self._error_message_id

    @error_message_id.setter
    def error_message_id(self, error_message_id):
        """Sets the error_message_id of this FolderOperationError.

        The type of operation error experienced.

        :param error_message_id: The error_message_id of this FolderOperationError.
        :type error_message_id: str
        """
        allowed_values = ["ERROR_TYPE_UNSPECIFIED", "ACTIVE_FOLDER_HEIGHT_VIOLATION", "MAX_CHILD_FOLDERS_VIOLATION", "FOLDER_NAME_UNIQUENESS_VIOLATION", "RESOURCE_DELETED_VIOLATION", "PARENT_DELETED_VIOLATION", "CYCLE_INTRODUCED_VIOLATION", "FOLDER_BEING_MOVED_VIOLATION", "FOLDER_TO_DELETE_NON_EMPTY_VIOLATION", "DELETED_FOLDER_HEIGHT_VIOLATION"]  # noqa: E501
        if error_message_id not in allowed_values:
            raise ValueError(
                "Invalid value for `error_message_id` ({0}), must be one of {1}"
                .format(error_message_id, allowed_values)
            )

        self._error_message_id = error_message_id
