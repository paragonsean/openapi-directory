# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_constraint import ListConstraint
from openapi_server import util


class Constraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean_constraint: object=None, constraint_default: str=None, description: str=None, display_name: str=None, list_constraint: ListConstraint=None, name: str=None, version: int=None):
        """Constraint - a model defined in OpenAPI

        :param boolean_constraint: The boolean_constraint of this Constraint.
        :param constraint_default: The constraint_default of this Constraint.
        :param description: The description of this Constraint.
        :param display_name: The display_name of this Constraint.
        :param list_constraint: The list_constraint of this Constraint.
        :param name: The name of this Constraint.
        :param version: The version of this Constraint.
        """
        self.openapi_types = {
            'boolean_constraint': object,
            'constraint_default': str,
            'description': str,
            'display_name': str,
            'list_constraint': ListConstraint,
            'name': str,
            'version': int
        }

        self.attribute_map = {
            'boolean_constraint': 'booleanConstraint',
            'constraint_default': 'constraintDefault',
            'description': 'description',
            'display_name': 'displayName',
            'list_constraint': 'listConstraint',
            'name': 'name',
            'version': 'version'
        }

        self._boolean_constraint = boolean_constraint
        self._constraint_default = constraint_default
        self._description = description
        self._display_name = display_name
        self._list_constraint = list_constraint
        self._name = name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Constraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Constraint of this Constraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean_constraint(self):
        """Gets the boolean_constraint of this Constraint.

        A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.

        :return: The boolean_constraint of this Constraint.
        :rtype: object
        """
        return self._boolean_constraint

    @boolean_constraint.setter
    def boolean_constraint(self, boolean_constraint):
        """Sets the boolean_constraint of this Constraint.

        A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.

        :param boolean_constraint: The boolean_constraint of this Constraint.
        :type boolean_constraint: object
        """

        self._boolean_constraint = boolean_constraint

    @property
    def constraint_default(self):
        """Gets the constraint_default of this Constraint.

        The evaluation behavior of this constraint in the absence of 'Policy'.

        :return: The constraint_default of this Constraint.
        :rtype: str
        """
        return self._constraint_default

    @constraint_default.setter
    def constraint_default(self, constraint_default):
        """Sets the constraint_default of this Constraint.

        The evaluation behavior of this constraint in the absence of 'Policy'.

        :param constraint_default: The constraint_default of this Constraint.
        :type constraint_default: str
        """
        allowed_values = ["CONSTRAINT_DEFAULT_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if constraint_default not in allowed_values:
            raise ValueError(
                "Invalid value for `constraint_default` ({0}), must be one of {1}"
                .format(constraint_default, allowed_values)
            )

        self._constraint_default = constraint_default

    @property
    def description(self):
        """Gets the description of this Constraint.

        Detailed description of what this `Constraint` controls as well as how and where it is enforced. Mutable.

        :return: The description of this Constraint.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Constraint.

        Detailed description of what this `Constraint` controls as well as how and where it is enforced. Mutable.

        :param description: The description of this Constraint.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Constraint.

        The human readable name. Mutable.

        :return: The display_name of this Constraint.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Constraint.

        The human readable name. Mutable.

        :param display_name: The display_name of this Constraint.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def list_constraint(self):
        """Gets the list_constraint of this Constraint.


        :return: The list_constraint of this Constraint.
        :rtype: ListConstraint
        """
        return self._list_constraint

    @list_constraint.setter
    def list_constraint(self, list_constraint):
        """Sets the list_constraint of this Constraint.


        :param list_constraint: The list_constraint of this Constraint.
        :type list_constraint: ListConstraint
        """

        self._list_constraint = list_constraint

    @property
    def name(self):
        """Gets the name of this Constraint.

        Immutable value, required to globally be unique. For example, `constraints/serviceuser.services`

        :return: The name of this Constraint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Constraint.

        Immutable value, required to globally be unique. For example, `constraints/serviceuser.services`

        :param name: The name of this Constraint.
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Constraint.

        Version of the `Constraint`. Default version is 0;

        :return: The version of this Constraint.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Constraint.

        Version of the `Constraint`. Default version is 0;

        :param version: The version of this Constraint.
        :type version: int
        """

        self._version = version
