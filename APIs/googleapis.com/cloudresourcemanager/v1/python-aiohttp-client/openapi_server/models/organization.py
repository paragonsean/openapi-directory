# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_owner import OrganizationOwner
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, display_name: str=None, lifecycle_state: str=None, name: str=None, owner: OrganizationOwner=None):
        """Organization - a model defined in OpenAPI

        :param creation_time: The creation_time of this Organization.
        :param display_name: The display_name of this Organization.
        :param lifecycle_state: The lifecycle_state of this Organization.
        :param name: The name of this Organization.
        :param owner: The owner of this Organization.
        """
        self.openapi_types = {
            'creation_time': str,
            'display_name': str,
            'lifecycle_state': str,
            'name': str,
            'owner': OrganizationOwner
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'display_name': 'displayName',
            'lifecycle_state': 'lifecycleState',
            'name': 'name',
            'owner': 'owner'
        }

        self._creation_time = creation_time
        self._display_name = display_name
        self._lifecycle_state = lifecycle_state
        self._name = name
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this Organization.

        Timestamp when the Organization was created. Assigned by the server.

        :return: The creation_time of this Organization.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Organization.

        Timestamp when the Organization was created. Assigned by the server.

        :param creation_time: The creation_time of this Organization.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def display_name(self):
        """Gets the display_name of this Organization.

        A human-readable string that refers to the Organization in the Google Cloud console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, \"google.com\") of the G Suite customer that owns the organization.

        :return: The display_name of this Organization.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organization.

        A human-readable string that refers to the Organization in the Google Cloud console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, \"google.com\") of the G Suite customer that owns the organization.

        :param display_name: The display_name of this Organization.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def lifecycle_state(self):
        """Gets the lifecycle_state of this Organization.

        The organization's current lifecycle state. Assigned by the server.

        :return: The lifecycle_state of this Organization.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state):
        """Sets the lifecycle_state of this Organization.

        The organization's current lifecycle state. Assigned by the server.

        :param lifecycle_state: The lifecycle_state of this Organization.
        :type lifecycle_state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def name(self):
        """Gets the name of this Organization.

        Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is \"organizations/[organization_id]\". For example, \"organizations/1234\".

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is \"organizations/[organization_id]\". For example, \"organizations/1234\".

        :param name: The name of this Organization.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Organization.


        :return: The owner of this Organization.
        :rtype: OrganizationOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Organization.


        :param owner: The owner of this Organization.
        :type owner: OrganizationOwner
        """

        self._owner = owner
