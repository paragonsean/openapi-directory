# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor import Ancestor
from openapi_server import util


class GetAncestryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestor: List[Ancestor]=None):
        """GetAncestryResponse - a model defined in OpenAPI

        :param ancestor: The ancestor of this GetAncestryResponse.
        """
        self.openapi_types = {
            'ancestor': List[Ancestor]
        }

        self.attribute_map = {
            'ancestor': 'ancestor'
        }

        self._ancestor = ancestor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAncestryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAncestryResponse of this GetAncestryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestor(self):
        """Gets the ancestor of this GetAncestryResponse.

        Ancestors are ordered from bottom to top of the resource hierarchy. The first ancestor is the project itself, followed by the project's parent, etc..

        :return: The ancestor of this GetAncestryResponse.
        :rtype: List[Ancestor]
        """
        return self._ancestor

    @ancestor.setter
    def ancestor(self, ancestor):
        """Sets the ancestor of this GetAncestryResponse.

        Ancestors are ordered from bottom to top of the resource hierarchy. The first ancestor is the project itself, followed by the project's parent, etc..

        :param ancestor: The ancestor of this GetAncestryResponse.
        :type ancestor: List[Ancestor]
        """

        self._ancestor = ancestor
