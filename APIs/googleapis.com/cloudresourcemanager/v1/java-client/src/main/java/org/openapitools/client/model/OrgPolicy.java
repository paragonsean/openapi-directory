/*
 * Cloud Resource Manager API
 * Creates, reads, and updates metadata for Google Cloud Platform resource containers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BooleanPolicy;
import org.openapitools.client.model.ListPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a Cloud Organization &#x60;Policy&#x60; which is used to specify &#x60;Constraints&#x60; for configurations of Cloud Platform resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:31.565499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrgPolicy {
  public static final String SERIALIZED_NAME_BOOLEAN_POLICY = "booleanPolicy";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_POLICY)
  private BooleanPolicy booleanPolicy;

  public static final String SERIALIZED_NAME_CONSTRAINT = "constraint";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT)
  private String constraint;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private byte[] etag;

  public static final String SERIALIZED_NAME_LIST_POLICY = "listPolicy";
  @SerializedName(SERIALIZED_NAME_LIST_POLICY)
  private ListPolicy listPolicy;

  public static final String SERIALIZED_NAME_RESTORE_DEFAULT = "restoreDefault";
  @SerializedName(SERIALIZED_NAME_RESTORE_DEFAULT)
  private Object restoreDefault;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public OrgPolicy() {
  }

  public OrgPolicy booleanPolicy(BooleanPolicy booleanPolicy) {
    this.booleanPolicy = booleanPolicy;
    return this;
  }

  /**
   * Get booleanPolicy
   * @return booleanPolicy
   */
  @javax.annotation.Nullable
  public BooleanPolicy getBooleanPolicy() {
    return booleanPolicy;
  }

  public void setBooleanPolicy(BooleanPolicy booleanPolicy) {
    this.booleanPolicy = booleanPolicy;
  }


  public OrgPolicy constraint(String constraint) {
    this.constraint = constraint;
    return this;
  }

  /**
   * The name of the &#x60;Constraint&#x60; the &#x60;Policy&#x60; is configuring, for example, &#x60;constraints/serviceuser.services&#x60;. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.
   * @return constraint
   */
  @javax.annotation.Nullable
  public String getConstraint() {
    return constraint;
  }

  public void setConstraint(String constraint) {
    this.constraint = constraint;
  }


  public OrgPolicy etag(byte[] etag) {
    this.etag = etag;
    return this;
  }

  /**
   * An opaque tag indicating the current version of the &#x60;Policy&#x60;, used for concurrency control. When the &#x60;Policy&#x60; is returned from either a &#x60;GetPolicy&#x60; or a &#x60;ListOrgPolicy&#x60; request, this &#x60;etag&#x60; indicates the version of the current &#x60;Policy&#x60; to use when executing a read-modify-write loop. When the &#x60;Policy&#x60; is returned from a &#x60;GetEffectivePolicy&#x60; request, the &#x60;etag&#x60; will be unset. When the &#x60;Policy&#x60; is used in a &#x60;SetOrgPolicy&#x60; method, use the &#x60;etag&#x60; value that was returned from a &#x60;GetOrgPolicy&#x60; request as part of a read-modify-write loop for concurrency control. Not setting the &#x60;etag&#x60;in a &#x60;SetOrgPolicy&#x60; request will result in an unconditional write of the &#x60;Policy&#x60;.
   * @return etag
   */
  @javax.annotation.Nullable
  public byte[] getEtag() {
    return etag;
  }

  public void setEtag(byte[] etag) {
    this.etag = etag;
  }


  public OrgPolicy listPolicy(ListPolicy listPolicy) {
    this.listPolicy = listPolicy;
    return this;
  }

  /**
   * Get listPolicy
   * @return listPolicy
   */
  @javax.annotation.Nullable
  public ListPolicy getListPolicy() {
    return listPolicy;
  }

  public void setListPolicy(ListPolicy listPolicy) {
    this.listPolicy = listPolicy;
  }


  public OrgPolicy restoreDefault(Object restoreDefault) {
    this.restoreDefault = restoreDefault;
    return this;
  }

  /**
   * Ignores policies set above this resource and restores the &#x60;constraint_default&#x60; enforcement behavior of the specific &#x60;Constraint&#x60; at this resource. Suppose that &#x60;constraint_default&#x60; is set to &#x60;ALLOW&#x60; for the &#x60;Constraint&#x60; &#x60;constraints/serviceuser.services&#x60;. Suppose that organization foo.com sets a &#x60;Policy&#x60; at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a &#x60;Policy&#x60; with the &#x60;policy_type&#x60; &#x60;restore_default&#x60; on several experimental projects, restoring the &#x60;constraint_default&#x60; enforcement of the &#x60;Constraint&#x60; for only those projects, allowing those projects to have all services activated.
   * @return restoreDefault
   */
  @javax.annotation.Nullable
  public Object getRestoreDefault() {
    return restoreDefault;
  }

  public void setRestoreDefault(Object restoreDefault) {
    this.restoreDefault = restoreDefault;
  }


  public OrgPolicy updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The time stamp the &#x60;Policy&#x60; was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to &#x60;SetOrgPolicy&#x60; was made for that &#x60;Policy&#x60;. Any value set by the client will be ignored.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public OrgPolicy version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the &#x60;Policy&#x60;. Default version is 0;
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgPolicy orgPolicy = (OrgPolicy) o;
    return Objects.equals(this.booleanPolicy, orgPolicy.booleanPolicy) &&
        Objects.equals(this.constraint, orgPolicy.constraint) &&
        Arrays.equals(this.etag, orgPolicy.etag) &&
        Objects.equals(this.listPolicy, orgPolicy.listPolicy) &&
        Objects.equals(this.restoreDefault, orgPolicy.restoreDefault) &&
        Objects.equals(this.updateTime, orgPolicy.updateTime) &&
        Objects.equals(this.version, orgPolicy.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(booleanPolicy, constraint, Arrays.hashCode(etag), listPolicy, restoreDefault, updateTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgPolicy {\n");
    sb.append("    booleanPolicy: ").append(toIndentedString(booleanPolicy)).append("\n");
    sb.append("    constraint: ").append(toIndentedString(constraint)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    listPolicy: ").append(toIndentedString(listPolicy)).append("\n");
    sb.append("    restoreDefault: ").append(toIndentedString(restoreDefault)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("booleanPolicy");
    openapiFields.add("constraint");
    openapiFields.add("etag");
    openapiFields.add("listPolicy");
    openapiFields.add("restoreDefault");
    openapiFields.add("updateTime");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrgPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrgPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgPolicy is not found in the empty JSON string", OrgPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrgPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrgPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `booleanPolicy`
      if (jsonObj.get("booleanPolicy") != null && !jsonObj.get("booleanPolicy").isJsonNull()) {
        BooleanPolicy.validateJsonElement(jsonObj.get("booleanPolicy"));
      }
      if ((jsonObj.get("constraint") != null && !jsonObj.get("constraint").isJsonNull()) && !jsonObj.get("constraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraint").toString()));
      }
      // validate the optional field `listPolicy`
      if (jsonObj.get("listPolicy") != null && !jsonObj.get("listPolicy").isJsonNull()) {
        ListPolicy.validateJsonElement(jsonObj.get("listPolicy"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgPolicy>() {
           @Override
           public void write(JsonWriter out, OrgPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrgPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrgPolicy
   * @throws IOException if the JSON string is invalid with respect to OrgPolicy
   */
  public static OrgPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgPolicy.class);
  }

  /**
   * Convert an instance of OrgPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

