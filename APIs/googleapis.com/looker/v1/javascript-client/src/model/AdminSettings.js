/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdminSettings model module.
 * @module model/AdminSettings
 * @version v1
 */
class AdminSettings {
    /**
     * Constructs a new <code>AdminSettings</code>.
     * Looker instance Admin settings fields.
     * @alias module:model/AdminSettings
     */
    constructor() { 
        
        AdminSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminSettings} obj Optional instance to populate.
     * @return {module:model/AdminSettings} The populated <code>AdminSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminSettings();

            if (data.hasOwnProperty('allowedEmailDomains')) {
                obj['allowedEmailDomains'] = ApiClient.convertToType(data['allowedEmailDomains'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedEmailDomains'])) {
            throw new Error("Expected the field `allowedEmailDomains` to be an array in the JSON data but got " + data['allowedEmailDomains']);
        }

        return true;
    }


}



/**
 * Email domain allowlist for the instance.
 * @member {Array.<String>} allowedEmailDomains
 */
AdminSettings.prototype['allowedEmailDomains'] = undefined;






export default AdminSettings;

