/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdminSettings from './AdminSettings';
import CustomDomain from './CustomDomain';
import DenyMaintenancePeriod from './DenyMaintenancePeriod';
import EncryptionConfig from './EncryptionConfig';
import MaintenanceSchedule from './MaintenanceSchedule';
import MaintenanceWindow from './MaintenanceWindow';
import OAuthConfig from './OAuthConfig';
import PscConfig from './PscConfig';
import UserMetadata from './UserMetadata';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * A Looker instance.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('adminSettings')) {
                obj['adminSettings'] = AdminSettings.constructFromObject(data['adminSettings']);
            }
            if (data.hasOwnProperty('consumerNetwork')) {
                obj['consumerNetwork'] = ApiClient.convertToType(data['consumerNetwork'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customDomain')) {
                obj['customDomain'] = CustomDomain.constructFromObject(data['customDomain']);
            }
            if (data.hasOwnProperty('denyMaintenancePeriod')) {
                obj['denyMaintenancePeriod'] = DenyMaintenancePeriod.constructFromObject(data['denyMaintenancePeriod']);
            }
            if (data.hasOwnProperty('egressPublicIp')) {
                obj['egressPublicIp'] = ApiClient.convertToType(data['egressPublicIp'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('ingressPrivateIp')) {
                obj['ingressPrivateIp'] = ApiClient.convertToType(data['ingressPrivateIp'], 'String');
            }
            if (data.hasOwnProperty('ingressPublicIp')) {
                obj['ingressPublicIp'] = ApiClient.convertToType(data['ingressPublicIp'], 'String');
            }
            if (data.hasOwnProperty('lastDenyMaintenancePeriod')) {
                obj['lastDenyMaintenancePeriod'] = DenyMaintenancePeriod.constructFromObject(data['lastDenyMaintenancePeriod']);
            }
            if (data.hasOwnProperty('lookerUri')) {
                obj['lookerUri'] = ApiClient.convertToType(data['lookerUri'], 'String');
            }
            if (data.hasOwnProperty('lookerVersion')) {
                obj['lookerVersion'] = ApiClient.convertToType(data['lookerVersion'], 'String');
            }
            if (data.hasOwnProperty('maintenanceSchedule')) {
                obj['maintenanceSchedule'] = MaintenanceSchedule.constructFromObject(data['maintenanceSchedule']);
            }
            if (data.hasOwnProperty('maintenanceWindow')) {
                obj['maintenanceWindow'] = MaintenanceWindow.constructFromObject(data['maintenanceWindow']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oauthConfig')) {
                obj['oauthConfig'] = OAuthConfig.constructFromObject(data['oauthConfig']);
            }
            if (data.hasOwnProperty('platformEdition')) {
                obj['platformEdition'] = ApiClient.convertToType(data['platformEdition'], 'String');
            }
            if (data.hasOwnProperty('privateIpEnabled')) {
                obj['privateIpEnabled'] = ApiClient.convertToType(data['privateIpEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('pscConfig')) {
                obj['pscConfig'] = PscConfig.constructFromObject(data['pscConfig']);
            }
            if (data.hasOwnProperty('pscEnabled')) {
                obj['pscEnabled'] = ApiClient.convertToType(data['pscEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('publicIpEnabled')) {
                obj['publicIpEnabled'] = ApiClient.convertToType(data['publicIpEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('reservedRange')) {
                obj['reservedRange'] = ApiClient.convertToType(data['reservedRange'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userMetadata')) {
                obj['userMetadata'] = UserMetadata.constructFromObject(data['userMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adminSettings`
        if (data['adminSettings']) { // data not null
          AdminSettings.validateJSON(data['adminSettings']);
        }
        // ensure the json data is a string
        if (data['consumerNetwork'] && !(typeof data['consumerNetwork'] === 'string' || data['consumerNetwork'] instanceof String)) {
            throw new Error("Expected the field `consumerNetwork` to be a primitive type in the JSON string but got " + data['consumerNetwork']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `customDomain`
        if (data['customDomain']) { // data not null
          CustomDomain.validateJSON(data['customDomain']);
        }
        // validate the optional field `denyMaintenancePeriod`
        if (data['denyMaintenancePeriod']) { // data not null
          DenyMaintenancePeriod.validateJSON(data['denyMaintenancePeriod']);
        }
        // ensure the json data is a string
        if (data['egressPublicIp'] && !(typeof data['egressPublicIp'] === 'string' || data['egressPublicIp'] instanceof String)) {
            throw new Error("Expected the field `egressPublicIp` to be a primitive type in the JSON string but got " + data['egressPublicIp']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // ensure the json data is a string
        if (data['ingressPrivateIp'] && !(typeof data['ingressPrivateIp'] === 'string' || data['ingressPrivateIp'] instanceof String)) {
            throw new Error("Expected the field `ingressPrivateIp` to be a primitive type in the JSON string but got " + data['ingressPrivateIp']);
        }
        // ensure the json data is a string
        if (data['ingressPublicIp'] && !(typeof data['ingressPublicIp'] === 'string' || data['ingressPublicIp'] instanceof String)) {
            throw new Error("Expected the field `ingressPublicIp` to be a primitive type in the JSON string but got " + data['ingressPublicIp']);
        }
        // validate the optional field `lastDenyMaintenancePeriod`
        if (data['lastDenyMaintenancePeriod']) { // data not null
          DenyMaintenancePeriod.validateJSON(data['lastDenyMaintenancePeriod']);
        }
        // ensure the json data is a string
        if (data['lookerUri'] && !(typeof data['lookerUri'] === 'string' || data['lookerUri'] instanceof String)) {
            throw new Error("Expected the field `lookerUri` to be a primitive type in the JSON string but got " + data['lookerUri']);
        }
        // ensure the json data is a string
        if (data['lookerVersion'] && !(typeof data['lookerVersion'] === 'string' || data['lookerVersion'] instanceof String)) {
            throw new Error("Expected the field `lookerVersion` to be a primitive type in the JSON string but got " + data['lookerVersion']);
        }
        // validate the optional field `maintenanceSchedule`
        if (data['maintenanceSchedule']) { // data not null
          MaintenanceSchedule.validateJSON(data['maintenanceSchedule']);
        }
        // validate the optional field `maintenanceWindow`
        if (data['maintenanceWindow']) { // data not null
          MaintenanceWindow.validateJSON(data['maintenanceWindow']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `oauthConfig`
        if (data['oauthConfig']) { // data not null
          OAuthConfig.validateJSON(data['oauthConfig']);
        }
        // ensure the json data is a string
        if (data['platformEdition'] && !(typeof data['platformEdition'] === 'string' || data['platformEdition'] instanceof String)) {
            throw new Error("Expected the field `platformEdition` to be a primitive type in the JSON string but got " + data['platformEdition']);
        }
        // validate the optional field `pscConfig`
        if (data['pscConfig']) { // data not null
          PscConfig.validateJSON(data['pscConfig']);
        }
        // ensure the json data is a string
        if (data['reservedRange'] && !(typeof data['reservedRange'] === 'string' || data['reservedRange'] instanceof String)) {
            throw new Error("Expected the field `reservedRange` to be a primitive type in the JSON string but got " + data['reservedRange']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `userMetadata`
        if (data['userMetadata']) { // data not null
          UserMetadata.validateJSON(data['userMetadata']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdminSettings} adminSettings
 */
Instance.prototype['adminSettings'] = undefined;

/**
 * Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
 * @member {String} consumerNetwork
 */
Instance.prototype['consumerNetwork'] = undefined;

/**
 * Output only. The time when the Looker instance provisioning was first requested.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * @member {module:model/CustomDomain} customDomain
 */
Instance.prototype['customDomain'] = undefined;

/**
 * @member {module:model/DenyMaintenancePeriod} denyMaintenancePeriod
 */
Instance.prototype['denyMaintenancePeriod'] = undefined;

/**
 * Output only. Public Egress IP (IPv4).
 * @member {String} egressPublicIp
 */
Instance.prototype['egressPublicIp'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
Instance.prototype['encryptionConfig'] = undefined;

/**
 * Output only. Private Ingress IP (IPv4).
 * @member {String} ingressPrivateIp
 */
Instance.prototype['ingressPrivateIp'] = undefined;

/**
 * Output only. Public Ingress IP (IPv4).
 * @member {String} ingressPublicIp
 */
Instance.prototype['ingressPublicIp'] = undefined;

/**
 * @member {module:model/DenyMaintenancePeriod} lastDenyMaintenancePeriod
 */
Instance.prototype['lastDenyMaintenancePeriod'] = undefined;

/**
 * Output only. Looker instance URI which can be used to access the Looker Instance UI.
 * @member {String} lookerUri
 */
Instance.prototype['lookerUri'] = undefined;

/**
 * Output only. The Looker version that the instance is using.
 * @member {String} lookerVersion
 */
Instance.prototype['lookerVersion'] = undefined;

/**
 * @member {module:model/MaintenanceSchedule} maintenanceSchedule
 */
Instance.prototype['maintenanceSchedule'] = undefined;

/**
 * @member {module:model/MaintenanceWindow} maintenanceWindow
 */
Instance.prototype['maintenanceWindow'] = undefined;

/**
 * Output only. Format: `projects/{project}/locations/{location}/instances/{instance}`.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {module:model/OAuthConfig} oauthConfig
 */
Instance.prototype['oauthConfig'] = undefined;

/**
 * Platform edition.
 * @member {module:model/Instance.PlatformEditionEnum} platformEdition
 */
Instance.prototype['platformEdition'] = undefined;

/**
 * Whether private IP is enabled on the Looker instance.
 * @member {Boolean} privateIpEnabled
 */
Instance.prototype['privateIpEnabled'] = undefined;

/**
 * @member {module:model/PscConfig} pscConfig
 */
Instance.prototype['pscConfig'] = undefined;

/**
 * Optional. Whether to use Private Service Connect (PSC) for private IP connectivity. If true, VPC peering (PSA) will not be used.
 * @member {Boolean} pscEnabled
 */
Instance.prototype['pscEnabled'] = undefined;

/**
 * Whether public IP is enabled on the Looker instance.
 * @member {Boolean} publicIpEnabled
 */
Instance.prototype['publicIpEnabled'] = undefined;

/**
 * Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
 * @member {String} reservedRange
 */
Instance.prototype['reservedRange'] = undefined;

/**
 * Output only. The state of the instance.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. The time when the Looker instance was last updated.
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UserMetadata} userMetadata
 */
Instance.prototype['userMetadata'] = undefined;





/**
 * Allowed values for the <code>platformEdition</code> property.
 * @enum {String}
 * @readonly
 */
Instance['PlatformEditionEnum'] = {

    /**
     * value: "PLATFORM_EDITION_UNSPECIFIED"
     * @const
     */
    "PLATFORM_EDITION_UNSPECIFIED": "PLATFORM_EDITION_UNSPECIFIED",

    /**
     * value: "LOOKER_CORE_TRIAL"
     * @const
     */
    "LOOKER_CORE_TRIAL": "LOOKER_CORE_TRIAL",

    /**
     * value: "LOOKER_CORE_STANDARD"
     * @const
     */
    "LOOKER_CORE_STANDARD": "LOOKER_CORE_STANDARD",

    /**
     * value: "LOOKER_CORE_STANDARD_ANNUAL"
     * @const
     */
    "LOOKER_CORE_STANDARD_ANNUAL": "LOOKER_CORE_STANDARD_ANNUAL",

    /**
     * value: "LOOKER_CORE_ENTERPRISE_ANNUAL"
     * @const
     */
    "LOOKER_CORE_ENTERPRISE_ANNUAL": "LOOKER_CORE_ENTERPRISE_ANNUAL",

    /**
     * value: "LOOKER_CORE_EMBED_ANNUAL"
     * @const
     */
    "LOOKER_CORE_EMBED_ANNUAL": "LOOKER_CORE_EMBED_ANNUAL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "EXPORTING"
     * @const
     */
    "EXPORTING": "EXPORTING",

    /**
     * value: "IMPORTING"
     * @const
     */
    "IMPORTING": "IMPORTING"
};



export default Instance;

