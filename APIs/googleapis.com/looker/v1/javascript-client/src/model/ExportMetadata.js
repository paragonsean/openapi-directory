/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportMetadataEncryptionKey from './ExportMetadataEncryptionKey';

/**
 * The ExportMetadata model module.
 * @module model/ExportMetadata
 * @version v1
 */
class ExportMetadata {
    /**
     * Constructs a new <code>ExportMetadata</code>.
     * ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in export artifact can be parsed as this message
     * @alias module:model/ExportMetadata
     */
    constructor() { 
        
        ExportMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportMetadata} obj Optional instance to populate.
     * @return {module:model/ExportMetadata} The populated <code>ExportMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportMetadata();

            if (data.hasOwnProperty('exportEncryptionKey')) {
                obj['exportEncryptionKey'] = ExportMetadataEncryptionKey.constructFromObject(data['exportEncryptionKey']);
            }
            if (data.hasOwnProperty('filePaths')) {
                obj['filePaths'] = ApiClient.convertToType(data['filePaths'], ['String']);
            }
            if (data.hasOwnProperty('lookerEncryptionKey')) {
                obj['lookerEncryptionKey'] = ApiClient.convertToType(data['lookerEncryptionKey'], 'String');
            }
            if (data.hasOwnProperty('lookerInstance')) {
                obj['lookerInstance'] = ApiClient.convertToType(data['lookerInstance'], 'String');
            }
            if (data.hasOwnProperty('lookerPlatformEdition')) {
                obj['lookerPlatformEdition'] = ApiClient.convertToType(data['lookerPlatformEdition'], 'String');
            }
            if (data.hasOwnProperty('lookerVersion')) {
                obj['lookerVersion'] = ApiClient.convertToType(data['lookerVersion'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exportEncryptionKey`
        if (data['exportEncryptionKey']) { // data not null
          ExportMetadataEncryptionKey.validateJSON(data['exportEncryptionKey']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filePaths'])) {
            throw new Error("Expected the field `filePaths` to be an array in the JSON data but got " + data['filePaths']);
        }
        // ensure the json data is a string
        if (data['lookerEncryptionKey'] && !(typeof data['lookerEncryptionKey'] === 'string' || data['lookerEncryptionKey'] instanceof String)) {
            throw new Error("Expected the field `lookerEncryptionKey` to be a primitive type in the JSON string but got " + data['lookerEncryptionKey']);
        }
        // ensure the json data is a string
        if (data['lookerInstance'] && !(typeof data['lookerInstance'] === 'string' || data['lookerInstance'] instanceof String)) {
            throw new Error("Expected the field `lookerInstance` to be a primitive type in the JSON string but got " + data['lookerInstance']);
        }
        // ensure the json data is a string
        if (data['lookerPlatformEdition'] && !(typeof data['lookerPlatformEdition'] === 'string' || data['lookerPlatformEdition'] instanceof String)) {
            throw new Error("Expected the field `lookerPlatformEdition` to be a primitive type in the JSON string but got " + data['lookerPlatformEdition']);
        }
        // ensure the json data is a string
        if (data['lookerVersion'] && !(typeof data['lookerVersion'] === 'string' || data['lookerVersion'] instanceof String)) {
            throw new Error("Expected the field `lookerVersion` to be a primitive type in the JSON string but got " + data['lookerVersion']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExportMetadataEncryptionKey} exportEncryptionKey
 */
ExportMetadata.prototype['exportEncryptionKey'] = undefined;

/**
 * List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.
 * @member {Array.<String>} filePaths
 */
ExportMetadata.prototype['filePaths'] = undefined;

/**
 * Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.
 * @member {String} lookerEncryptionKey
 */
ExportMetadata.prototype['lookerEncryptionKey'] = undefined;

/**
 * Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}
 * @member {String} lookerInstance
 */
ExportMetadata.prototype['lookerInstance'] = undefined;

/**
 * Platform edition of the exported instance.
 * @member {String} lookerPlatformEdition
 */
ExportMetadata.prototype['lookerPlatformEdition'] = undefined;

/**
 * Version of instance when the export was created.
 * @member {String} lookerVersion
 */
ExportMetadata.prototype['lookerVersion'] = undefined;

/**
 * The source type of the migration.
 * @member {module:model/ExportMetadata.SourceEnum} source
 */
ExportMetadata.prototype['source'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
ExportMetadata['SourceEnum'] = {

    /**
     * value: "SOURCE_UNSPECIFIED"
     * @const
     */
    "SOURCE_UNSPECIFIED": "SOURCE_UNSPECIFIED",

    /**
     * value: "LOOKER_CORE"
     * @const
     */
    "LOOKER_CORE": "LOOKER_CORE",

    /**
     * value: "LOOKER_ORIGINAL"
     * @const
     */
    "LOOKER_ORIGINAL": "LOOKER_ORIGINAL"
};



export default ExportMetadata;

