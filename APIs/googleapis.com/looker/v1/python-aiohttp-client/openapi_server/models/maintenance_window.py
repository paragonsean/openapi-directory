# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server import util


class MaintenanceWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: str=None, start_time: TimeOfDay=None):
        """MaintenanceWindow - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this MaintenanceWindow.
        :param start_time: The start_time of this MaintenanceWindow.
        """
        self.openapi_types = {
            'day_of_week': str,
            'start_time': TimeOfDay
        }

        self.attribute_map = {
            'day_of_week': 'dayOfWeek',
            'start_time': 'startTime'
        }

        self._day_of_week = day_of_week
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceWindow of this MaintenanceWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this MaintenanceWindow.

        Required. Day of the week for this MaintenanceWindow (in UTC).

        :return: The day_of_week of this MaintenanceWindow.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this MaintenanceWindow.

        Required. Day of the week for this MaintenanceWindow (in UTC).

        :param day_of_week: The day_of_week of this MaintenanceWindow.
        :type day_of_week: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def start_time(self):
        """Gets the start_time of this MaintenanceWindow.


        :return: The start_time of this MaintenanceWindow.
        :rtype: TimeOfDay
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MaintenanceWindow.


        :param start_time: The start_time of this MaintenanceWindow.
        :type start_time: TimeOfDay
        """

        self._start_time = start_time
