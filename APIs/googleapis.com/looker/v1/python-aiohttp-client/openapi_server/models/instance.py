# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_settings import AdminSettings
from openapi_server.models.custom_domain import CustomDomain
from openapi_server.models.deny_maintenance_period import DenyMaintenancePeriod
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.maintenance_schedule import MaintenanceSchedule
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server.models.o_auth_config import OAuthConfig
from openapi_server.models.psc_config import PscConfig
from openapi_server.models.user_metadata import UserMetadata
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_settings: AdminSettings=None, consumer_network: str=None, create_time: str=None, custom_domain: CustomDomain=None, deny_maintenance_period: DenyMaintenancePeriod=None, egress_public_ip: str=None, encryption_config: EncryptionConfig=None, ingress_private_ip: str=None, ingress_public_ip: str=None, last_deny_maintenance_period: DenyMaintenancePeriod=None, looker_uri: str=None, looker_version: str=None, maintenance_schedule: MaintenanceSchedule=None, maintenance_window: MaintenanceWindow=None, name: str=None, oauth_config: OAuthConfig=None, platform_edition: str=None, private_ip_enabled: bool=None, psc_config: PscConfig=None, psc_enabled: bool=None, public_ip_enabled: bool=None, reserved_range: str=None, state: str=None, update_time: str=None, user_metadata: UserMetadata=None):
        """Instance - a model defined in OpenAPI

        :param admin_settings: The admin_settings of this Instance.
        :param consumer_network: The consumer_network of this Instance.
        :param create_time: The create_time of this Instance.
        :param custom_domain: The custom_domain of this Instance.
        :param deny_maintenance_period: The deny_maintenance_period of this Instance.
        :param egress_public_ip: The egress_public_ip of this Instance.
        :param encryption_config: The encryption_config of this Instance.
        :param ingress_private_ip: The ingress_private_ip of this Instance.
        :param ingress_public_ip: The ingress_public_ip of this Instance.
        :param last_deny_maintenance_period: The last_deny_maintenance_period of this Instance.
        :param looker_uri: The looker_uri of this Instance.
        :param looker_version: The looker_version of this Instance.
        :param maintenance_schedule: The maintenance_schedule of this Instance.
        :param maintenance_window: The maintenance_window of this Instance.
        :param name: The name of this Instance.
        :param oauth_config: The oauth_config of this Instance.
        :param platform_edition: The platform_edition of this Instance.
        :param private_ip_enabled: The private_ip_enabled of this Instance.
        :param psc_config: The psc_config of this Instance.
        :param psc_enabled: The psc_enabled of this Instance.
        :param public_ip_enabled: The public_ip_enabled of this Instance.
        :param reserved_range: The reserved_range of this Instance.
        :param state: The state of this Instance.
        :param update_time: The update_time of this Instance.
        :param user_metadata: The user_metadata of this Instance.
        """
        self.openapi_types = {
            'admin_settings': AdminSettings,
            'consumer_network': str,
            'create_time': str,
            'custom_domain': CustomDomain,
            'deny_maintenance_period': DenyMaintenancePeriod,
            'egress_public_ip': str,
            'encryption_config': EncryptionConfig,
            'ingress_private_ip': str,
            'ingress_public_ip': str,
            'last_deny_maintenance_period': DenyMaintenancePeriod,
            'looker_uri': str,
            'looker_version': str,
            'maintenance_schedule': MaintenanceSchedule,
            'maintenance_window': MaintenanceWindow,
            'name': str,
            'oauth_config': OAuthConfig,
            'platform_edition': str,
            'private_ip_enabled': bool,
            'psc_config': PscConfig,
            'psc_enabled': bool,
            'public_ip_enabled': bool,
            'reserved_range': str,
            'state': str,
            'update_time': str,
            'user_metadata': UserMetadata
        }

        self.attribute_map = {
            'admin_settings': 'adminSettings',
            'consumer_network': 'consumerNetwork',
            'create_time': 'createTime',
            'custom_domain': 'customDomain',
            'deny_maintenance_period': 'denyMaintenancePeriod',
            'egress_public_ip': 'egressPublicIp',
            'encryption_config': 'encryptionConfig',
            'ingress_private_ip': 'ingressPrivateIp',
            'ingress_public_ip': 'ingressPublicIp',
            'last_deny_maintenance_period': 'lastDenyMaintenancePeriod',
            'looker_uri': 'lookerUri',
            'looker_version': 'lookerVersion',
            'maintenance_schedule': 'maintenanceSchedule',
            'maintenance_window': 'maintenanceWindow',
            'name': 'name',
            'oauth_config': 'oauthConfig',
            'platform_edition': 'platformEdition',
            'private_ip_enabled': 'privateIpEnabled',
            'psc_config': 'pscConfig',
            'psc_enabled': 'pscEnabled',
            'public_ip_enabled': 'publicIpEnabled',
            'reserved_range': 'reservedRange',
            'state': 'state',
            'update_time': 'updateTime',
            'user_metadata': 'userMetadata'
        }

        self._admin_settings = admin_settings
        self._consumer_network = consumer_network
        self._create_time = create_time
        self._custom_domain = custom_domain
        self._deny_maintenance_period = deny_maintenance_period
        self._egress_public_ip = egress_public_ip
        self._encryption_config = encryption_config
        self._ingress_private_ip = ingress_private_ip
        self._ingress_public_ip = ingress_public_ip
        self._last_deny_maintenance_period = last_deny_maintenance_period
        self._looker_uri = looker_uri
        self._looker_version = looker_version
        self._maintenance_schedule = maintenance_schedule
        self._maintenance_window = maintenance_window
        self._name = name
        self._oauth_config = oauth_config
        self._platform_edition = platform_edition
        self._private_ip_enabled = private_ip_enabled
        self._psc_config = psc_config
        self._psc_enabled = psc_enabled
        self._public_ip_enabled = public_ip_enabled
        self._reserved_range = reserved_range
        self._state = state
        self._update_time = update_time
        self._user_metadata = user_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_settings(self):
        """Gets the admin_settings of this Instance.


        :return: The admin_settings of this Instance.
        :rtype: AdminSettings
        """
        return self._admin_settings

    @admin_settings.setter
    def admin_settings(self, admin_settings):
        """Sets the admin_settings of this Instance.


        :param admin_settings: The admin_settings of this Instance.
        :type admin_settings: AdminSettings
        """

        self._admin_settings = admin_settings

    @property
    def consumer_network(self):
        """Gets the consumer_network of this Instance.

        Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.

        :return: The consumer_network of this Instance.
        :rtype: str
        """
        return self._consumer_network

    @consumer_network.setter
    def consumer_network(self, consumer_network):
        """Sets the consumer_network of this Instance.

        Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.

        :param consumer_network: The consumer_network of this Instance.
        :type consumer_network: str
        """

        self._consumer_network = consumer_network

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. The time when the Looker instance provisioning was first requested.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. The time when the Looker instance provisioning was first requested.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_domain(self):
        """Gets the custom_domain of this Instance.


        :return: The custom_domain of this Instance.
        :rtype: CustomDomain
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this Instance.


        :param custom_domain: The custom_domain of this Instance.
        :type custom_domain: CustomDomain
        """

        self._custom_domain = custom_domain

    @property
    def deny_maintenance_period(self):
        """Gets the deny_maintenance_period of this Instance.


        :return: The deny_maintenance_period of this Instance.
        :rtype: DenyMaintenancePeriod
        """
        return self._deny_maintenance_period

    @deny_maintenance_period.setter
    def deny_maintenance_period(self, deny_maintenance_period):
        """Sets the deny_maintenance_period of this Instance.


        :param deny_maintenance_period: The deny_maintenance_period of this Instance.
        :type deny_maintenance_period: DenyMaintenancePeriod
        """

        self._deny_maintenance_period = deny_maintenance_period

    @property
    def egress_public_ip(self):
        """Gets the egress_public_ip of this Instance.

        Output only. Public Egress IP (IPv4).

        :return: The egress_public_ip of this Instance.
        :rtype: str
        """
        return self._egress_public_ip

    @egress_public_ip.setter
    def egress_public_ip(self, egress_public_ip):
        """Sets the egress_public_ip of this Instance.

        Output only. Public Egress IP (IPv4).

        :param egress_public_ip: The egress_public_ip of this Instance.
        :type egress_public_ip: str
        """

        self._egress_public_ip = egress_public_ip

    @property
    def encryption_config(self):
        """Gets the encryption_config of this Instance.


        :return: The encryption_config of this Instance.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this Instance.


        :param encryption_config: The encryption_config of this Instance.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def ingress_private_ip(self):
        """Gets the ingress_private_ip of this Instance.

        Output only. Private Ingress IP (IPv4).

        :return: The ingress_private_ip of this Instance.
        :rtype: str
        """
        return self._ingress_private_ip

    @ingress_private_ip.setter
    def ingress_private_ip(self, ingress_private_ip):
        """Sets the ingress_private_ip of this Instance.

        Output only. Private Ingress IP (IPv4).

        :param ingress_private_ip: The ingress_private_ip of this Instance.
        :type ingress_private_ip: str
        """

        self._ingress_private_ip = ingress_private_ip

    @property
    def ingress_public_ip(self):
        """Gets the ingress_public_ip of this Instance.

        Output only. Public Ingress IP (IPv4).

        :return: The ingress_public_ip of this Instance.
        :rtype: str
        """
        return self._ingress_public_ip

    @ingress_public_ip.setter
    def ingress_public_ip(self, ingress_public_ip):
        """Sets the ingress_public_ip of this Instance.

        Output only. Public Ingress IP (IPv4).

        :param ingress_public_ip: The ingress_public_ip of this Instance.
        :type ingress_public_ip: str
        """

        self._ingress_public_ip = ingress_public_ip

    @property
    def last_deny_maintenance_period(self):
        """Gets the last_deny_maintenance_period of this Instance.


        :return: The last_deny_maintenance_period of this Instance.
        :rtype: DenyMaintenancePeriod
        """
        return self._last_deny_maintenance_period

    @last_deny_maintenance_period.setter
    def last_deny_maintenance_period(self, last_deny_maintenance_period):
        """Sets the last_deny_maintenance_period of this Instance.


        :param last_deny_maintenance_period: The last_deny_maintenance_period of this Instance.
        :type last_deny_maintenance_period: DenyMaintenancePeriod
        """

        self._last_deny_maintenance_period = last_deny_maintenance_period

    @property
    def looker_uri(self):
        """Gets the looker_uri of this Instance.

        Output only. Looker instance URI which can be used to access the Looker Instance UI.

        :return: The looker_uri of this Instance.
        :rtype: str
        """
        return self._looker_uri

    @looker_uri.setter
    def looker_uri(self, looker_uri):
        """Sets the looker_uri of this Instance.

        Output only. Looker instance URI which can be used to access the Looker Instance UI.

        :param looker_uri: The looker_uri of this Instance.
        :type looker_uri: str
        """

        self._looker_uri = looker_uri

    @property
    def looker_version(self):
        """Gets the looker_version of this Instance.

        Output only. The Looker version that the instance is using.

        :return: The looker_version of this Instance.
        :rtype: str
        """
        return self._looker_version

    @looker_version.setter
    def looker_version(self, looker_version):
        """Sets the looker_version of this Instance.

        Output only. The Looker version that the instance is using.

        :param looker_version: The looker_version of this Instance.
        :type looker_version: str
        """

        self._looker_version = looker_version

    @property
    def maintenance_schedule(self):
        """Gets the maintenance_schedule of this Instance.


        :return: The maintenance_schedule of this Instance.
        :rtype: MaintenanceSchedule
        """
        return self._maintenance_schedule

    @maintenance_schedule.setter
    def maintenance_schedule(self, maintenance_schedule):
        """Sets the maintenance_schedule of this Instance.


        :param maintenance_schedule: The maintenance_schedule of this Instance.
        :type maintenance_schedule: MaintenanceSchedule
        """

        self._maintenance_schedule = maintenance_schedule

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this Instance.


        :return: The maintenance_window of this Instance.
        :rtype: MaintenanceWindow
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this Instance.


        :param maintenance_window: The maintenance_window of this Instance.
        :type maintenance_window: MaintenanceWindow
        """

        self._maintenance_window = maintenance_window

    @property
    def name(self):
        """Gets the name of this Instance.

        Output only. Format: `projects/{project}/locations/{location}/instances/{instance}`.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Output only. Format: `projects/{project}/locations/{location}/instances/{instance}`.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def oauth_config(self):
        """Gets the oauth_config of this Instance.


        :return: The oauth_config of this Instance.
        :rtype: OAuthConfig
        """
        return self._oauth_config

    @oauth_config.setter
    def oauth_config(self, oauth_config):
        """Sets the oauth_config of this Instance.


        :param oauth_config: The oauth_config of this Instance.
        :type oauth_config: OAuthConfig
        """

        self._oauth_config = oauth_config

    @property
    def platform_edition(self):
        """Gets the platform_edition of this Instance.

        Platform edition.

        :return: The platform_edition of this Instance.
        :rtype: str
        """
        return self._platform_edition

    @platform_edition.setter
    def platform_edition(self, platform_edition):
        """Sets the platform_edition of this Instance.

        Platform edition.

        :param platform_edition: The platform_edition of this Instance.
        :type platform_edition: str
        """
        allowed_values = ["PLATFORM_EDITION_UNSPECIFIED", "LOOKER_CORE_TRIAL", "LOOKER_CORE_STANDARD", "LOOKER_CORE_STANDARD_ANNUAL", "LOOKER_CORE_ENTERPRISE_ANNUAL", "LOOKER_CORE_EMBED_ANNUAL"]  # noqa: E501
        if platform_edition not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_edition` ({0}), must be one of {1}"
                .format(platform_edition, allowed_values)
            )

        self._platform_edition = platform_edition

    @property
    def private_ip_enabled(self):
        """Gets the private_ip_enabled of this Instance.

        Whether private IP is enabled on the Looker instance.

        :return: The private_ip_enabled of this Instance.
        :rtype: bool
        """
        return self._private_ip_enabled

    @private_ip_enabled.setter
    def private_ip_enabled(self, private_ip_enabled):
        """Sets the private_ip_enabled of this Instance.

        Whether private IP is enabled on the Looker instance.

        :param private_ip_enabled: The private_ip_enabled of this Instance.
        :type private_ip_enabled: bool
        """

        self._private_ip_enabled = private_ip_enabled

    @property
    def psc_config(self):
        """Gets the psc_config of this Instance.


        :return: The psc_config of this Instance.
        :rtype: PscConfig
        """
        return self._psc_config

    @psc_config.setter
    def psc_config(self, psc_config):
        """Sets the psc_config of this Instance.


        :param psc_config: The psc_config of this Instance.
        :type psc_config: PscConfig
        """

        self._psc_config = psc_config

    @property
    def psc_enabled(self):
        """Gets the psc_enabled of this Instance.

        Optional. Whether to use Private Service Connect (PSC) for private IP connectivity. If true, VPC peering (PSA) will not be used.

        :return: The psc_enabled of this Instance.
        :rtype: bool
        """
        return self._psc_enabled

    @psc_enabled.setter
    def psc_enabled(self, psc_enabled):
        """Sets the psc_enabled of this Instance.

        Optional. Whether to use Private Service Connect (PSC) for private IP connectivity. If true, VPC peering (PSA) will not be used.

        :param psc_enabled: The psc_enabled of this Instance.
        :type psc_enabled: bool
        """

        self._psc_enabled = psc_enabled

    @property
    def public_ip_enabled(self):
        """Gets the public_ip_enabled of this Instance.

        Whether public IP is enabled on the Looker instance.

        :return: The public_ip_enabled of this Instance.
        :rtype: bool
        """
        return self._public_ip_enabled

    @public_ip_enabled.setter
    def public_ip_enabled(self, public_ip_enabled):
        """Sets the public_ip_enabled of this Instance.

        Whether public IP is enabled on the Looker instance.

        :param public_ip_enabled: The public_ip_enabled of this Instance.
        :type public_ip_enabled: bool
        """

        self._public_ip_enabled = public_ip_enabled

    @property
    def reserved_range(self):
        """Gets the reserved_range of this Instance.

        Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.

        :return: The reserved_range of this Instance.
        :rtype: str
        """
        return self._reserved_range

    @reserved_range.setter
    def reserved_range(self, reserved_range):
        """Sets the reserved_range of this Instance.

        Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.

        :param reserved_range: The reserved_range of this Instance.
        :type reserved_range: str
        """

        self._reserved_range = reserved_range

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The state of the instance.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The state of the instance.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "FAILED", "SUSPENDED", "UPDATING", "DELETING", "EXPORTING", "IMPORTING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. The time when the Looker instance was last updated.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. The time when the Looker instance was last updated.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_metadata(self):
        """Gets the user_metadata of this Instance.


        :return: The user_metadata of this Instance.
        :rtype: UserMetadata
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this Instance.


        :param user_metadata: The user_metadata of this Instance.
        :type user_metadata: UserMetadata
        """

        self._user_metadata = user_metadata
