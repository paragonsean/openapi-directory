# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_attachment import ServiceAttachment
from openapi_server import util


class PscConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_vpcs: List[str]=None, looker_service_attachment_uri: str=None, service_attachments: List[ServiceAttachment]=None):
        """PscConfig - a model defined in OpenAPI

        :param allowed_vpcs: The allowed_vpcs of this PscConfig.
        :param looker_service_attachment_uri: The looker_service_attachment_uri of this PscConfig.
        :param service_attachments: The service_attachments of this PscConfig.
        """
        self.openapi_types = {
            'allowed_vpcs': List[str],
            'looker_service_attachment_uri': str,
            'service_attachments': List[ServiceAttachment]
        }

        self.attribute_map = {
            'allowed_vpcs': 'allowedVpcs',
            'looker_service_attachment_uri': 'lookerServiceAttachmentUri',
            'service_attachments': 'serviceAttachments'
        }

        self._allowed_vpcs = allowed_vpcs
        self._looker_service_attachment_uri = looker_service_attachment_uri
        self._service_attachments = service_attachments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PscConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PscConfig of this PscConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_vpcs(self):
        """Gets the allowed_vpcs of this PscConfig.

        Optional. List of VPCs that are allowed ingress into looker. Format: projects/{project}/global/networks/{network}

        :return: The allowed_vpcs of this PscConfig.
        :rtype: List[str]
        """
        return self._allowed_vpcs

    @allowed_vpcs.setter
    def allowed_vpcs(self, allowed_vpcs):
        """Sets the allowed_vpcs of this PscConfig.

        Optional. List of VPCs that are allowed ingress into looker. Format: projects/{project}/global/networks/{network}

        :param allowed_vpcs: The allowed_vpcs of this PscConfig.
        :type allowed_vpcs: List[str]
        """

        self._allowed_vpcs = allowed_vpcs

    @property
    def looker_service_attachment_uri(self):
        """Gets the looker_service_attachment_uri of this PscConfig.

        Output only. URI of the Looker service attachment.

        :return: The looker_service_attachment_uri of this PscConfig.
        :rtype: str
        """
        return self._looker_service_attachment_uri

    @looker_service_attachment_uri.setter
    def looker_service_attachment_uri(self, looker_service_attachment_uri):
        """Sets the looker_service_attachment_uri of this PscConfig.

        Output only. URI of the Looker service attachment.

        :param looker_service_attachment_uri: The looker_service_attachment_uri of this PscConfig.
        :type looker_service_attachment_uri: str
        """

        self._looker_service_attachment_uri = looker_service_attachment_uri

    @property
    def service_attachments(self):
        """Gets the service_attachments of this PscConfig.

        Optional. List of egress service attachment configurations.

        :return: The service_attachments of this PscConfig.
        :rtype: List[ServiceAttachment]
        """
        return self._service_attachments

    @service_attachments.setter
    def service_attachments(self, service_attachments):
        """Sets the service_attachments of this PscConfig.

        Optional. List of egress service attachment configurations.

        :param service_attachments: The service_attachments of this PscConfig.
        :type service_attachments: List[ServiceAttachment]
        """

        self._service_attachments = service_attachments
