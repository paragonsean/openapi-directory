# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_metadata_encryption_key import ExportMetadataEncryptionKey
from openapi_server import util


class ExportMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_encryption_key: ExportMetadataEncryptionKey=None, file_paths: List[str]=None, looker_encryption_key: str=None, looker_instance: str=None, looker_platform_edition: str=None, looker_version: str=None, source: str=None):
        """ExportMetadata - a model defined in OpenAPI

        :param export_encryption_key: The export_encryption_key of this ExportMetadata.
        :param file_paths: The file_paths of this ExportMetadata.
        :param looker_encryption_key: The looker_encryption_key of this ExportMetadata.
        :param looker_instance: The looker_instance of this ExportMetadata.
        :param looker_platform_edition: The looker_platform_edition of this ExportMetadata.
        :param looker_version: The looker_version of this ExportMetadata.
        :param source: The source of this ExportMetadata.
        """
        self.openapi_types = {
            'export_encryption_key': ExportMetadataEncryptionKey,
            'file_paths': List[str],
            'looker_encryption_key': str,
            'looker_instance': str,
            'looker_platform_edition': str,
            'looker_version': str,
            'source': str
        }

        self.attribute_map = {
            'export_encryption_key': 'exportEncryptionKey',
            'file_paths': 'filePaths',
            'looker_encryption_key': 'lookerEncryptionKey',
            'looker_instance': 'lookerInstance',
            'looker_platform_edition': 'lookerPlatformEdition',
            'looker_version': 'lookerVersion',
            'source': 'source'
        }

        self._export_encryption_key = export_encryption_key
        self._file_paths = file_paths
        self._looker_encryption_key = looker_encryption_key
        self._looker_instance = looker_instance
        self._looker_platform_edition = looker_platform_edition
        self._looker_version = looker_version
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportMetadata of this ExportMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_encryption_key(self):
        """Gets the export_encryption_key of this ExportMetadata.


        :return: The export_encryption_key of this ExportMetadata.
        :rtype: ExportMetadataEncryptionKey
        """
        return self._export_encryption_key

    @export_encryption_key.setter
    def export_encryption_key(self, export_encryption_key):
        """Sets the export_encryption_key of this ExportMetadata.


        :param export_encryption_key: The export_encryption_key of this ExportMetadata.
        :type export_encryption_key: ExportMetadataEncryptionKey
        """

        self._export_encryption_key = export_encryption_key

    @property
    def file_paths(self):
        """Gets the file_paths of this ExportMetadata.

        List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.

        :return: The file_paths of this ExportMetadata.
        :rtype: List[str]
        """
        return self._file_paths

    @file_paths.setter
    def file_paths(self, file_paths):
        """Sets the file_paths of this ExportMetadata.

        List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.

        :param file_paths: The file_paths of this ExportMetadata.
        :type file_paths: List[str]
        """

        self._file_paths = file_paths

    @property
    def looker_encryption_key(self):
        """Gets the looker_encryption_key of this ExportMetadata.

        Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.

        :return: The looker_encryption_key of this ExportMetadata.
        :rtype: str
        """
        return self._looker_encryption_key

    @looker_encryption_key.setter
    def looker_encryption_key(self, looker_encryption_key):
        """Sets the looker_encryption_key of this ExportMetadata.

        Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.

        :param looker_encryption_key: The looker_encryption_key of this ExportMetadata.
        :type looker_encryption_key: str
        """

        self._looker_encryption_key = looker_encryption_key

    @property
    def looker_instance(self):
        """Gets the looker_instance of this ExportMetadata.

        Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}

        :return: The looker_instance of this ExportMetadata.
        :rtype: str
        """
        return self._looker_instance

    @looker_instance.setter
    def looker_instance(self, looker_instance):
        """Sets the looker_instance of this ExportMetadata.

        Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}

        :param looker_instance: The looker_instance of this ExportMetadata.
        :type looker_instance: str
        """

        self._looker_instance = looker_instance

    @property
    def looker_platform_edition(self):
        """Gets the looker_platform_edition of this ExportMetadata.

        Platform edition of the exported instance.

        :return: The looker_platform_edition of this ExportMetadata.
        :rtype: str
        """
        return self._looker_platform_edition

    @looker_platform_edition.setter
    def looker_platform_edition(self, looker_platform_edition):
        """Sets the looker_platform_edition of this ExportMetadata.

        Platform edition of the exported instance.

        :param looker_platform_edition: The looker_platform_edition of this ExportMetadata.
        :type looker_platform_edition: str
        """

        self._looker_platform_edition = looker_platform_edition

    @property
    def looker_version(self):
        """Gets the looker_version of this ExportMetadata.

        Version of instance when the export was created.

        :return: The looker_version of this ExportMetadata.
        :rtype: str
        """
        return self._looker_version

    @looker_version.setter
    def looker_version(self, looker_version):
        """Sets the looker_version of this ExportMetadata.

        Version of instance when the export was created.

        :param looker_version: The looker_version of this ExportMetadata.
        :type looker_version: str
        """

        self._looker_version = looker_version

    @property
    def source(self):
        """Gets the source of this ExportMetadata.

        The source type of the migration.

        :return: The source of this ExportMetadata.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExportMetadata.

        The source type of the migration.

        :param source: The source of this ExportMetadata.
        :type source: str
        """
        allowed_values = ["SOURCE_UNSPECIFIED", "LOOKER_CORE", "LOOKER_ORIGINAL"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
