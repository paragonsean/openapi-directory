# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_name: str=None, kms_key_name_version: str=None, kms_key_state: str=None):
        """EncryptionConfig - a model defined in OpenAPI

        :param kms_key_name: The kms_key_name of this EncryptionConfig.
        :param kms_key_name_version: The kms_key_name_version of this EncryptionConfig.
        :param kms_key_state: The kms_key_state of this EncryptionConfig.
        """
        self.openapi_types = {
            'kms_key_name': str,
            'kms_key_name_version': str,
            'kms_key_state': str
        }

        self.attribute_map = {
            'kms_key_name': 'kmsKeyName',
            'kms_key_name_version': 'kmsKeyNameVersion',
            'kms_key_state': 'kmsKeyState'
        }

        self._kms_key_name = kms_key_name
        self._kms_key_name_version = kms_key_name_version
        self._kms_key_state = kms_key_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionConfig of this EncryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this EncryptionConfig.

        Name of the CMEK key in KMS (input parameter).

        :return: The kms_key_name of this EncryptionConfig.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this EncryptionConfig.

        Name of the CMEK key in KMS (input parameter).

        :param kms_key_name: The kms_key_name of this EncryptionConfig.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def kms_key_name_version(self):
        """Gets the kms_key_name_version of this EncryptionConfig.

        Output only. Full name and version of the CMEK key currently in use to encrypt Looker data. Format: `projects/{project}/locations/{location}/keyRings/{ring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. Empty if CMEK is not configured in this instance.

        :return: The kms_key_name_version of this EncryptionConfig.
        :rtype: str
        """
        return self._kms_key_name_version

    @kms_key_name_version.setter
    def kms_key_name_version(self, kms_key_name_version):
        """Sets the kms_key_name_version of this EncryptionConfig.

        Output only. Full name and version of the CMEK key currently in use to encrypt Looker data. Format: `projects/{project}/locations/{location}/keyRings/{ring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. Empty if CMEK is not configured in this instance.

        :param kms_key_name_version: The kms_key_name_version of this EncryptionConfig.
        :type kms_key_name_version: str
        """

        self._kms_key_name_version = kms_key_name_version

    @property
    def kms_key_state(self):
        """Gets the kms_key_state of this EncryptionConfig.

        Output only. Status of the CMEK key.

        :return: The kms_key_state of this EncryptionConfig.
        :rtype: str
        """
        return self._kms_key_state

    @kms_key_state.setter
    def kms_key_state(self, kms_key_state):
        """Sets the kms_key_state of this EncryptionConfig.

        Output only. Status of the CMEK key.

        :param kms_key_state: The kms_key_state of this EncryptionConfig.
        :type kms_key_state: str
        """
        allowed_values = ["KMS_KEY_STATE_UNSPECIFIED", "VALID", "REVOKED"]  # noqa: E501
        if kms_key_state not in allowed_values:
            raise ValueError(
                "Invalid value for `kms_key_state` ({0}), must be one of {1}"
                .format(kms_key_state, allowed_values)
            )

        self._kms_key_state = kms_key_state
