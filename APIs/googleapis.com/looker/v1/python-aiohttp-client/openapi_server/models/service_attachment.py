# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: str=None, local_fqdn: str=None, target_service_attachment_uri: str=None):
        """ServiceAttachment - a model defined in OpenAPI

        :param connection_status: The connection_status of this ServiceAttachment.
        :param local_fqdn: The local_fqdn of this ServiceAttachment.
        :param target_service_attachment_uri: The target_service_attachment_uri of this ServiceAttachment.
        """
        self.openapi_types = {
            'connection_status': str,
            'local_fqdn': str,
            'target_service_attachment_uri': str
        }

        self.attribute_map = {
            'connection_status': 'connectionStatus',
            'local_fqdn': 'localFqdn',
            'target_service_attachment_uri': 'targetServiceAttachmentUri'
        }

        self._connection_status = connection_status
        self._local_fqdn = local_fqdn
        self._target_service_attachment_uri = target_service_attachment_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAttachment of this ServiceAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this ServiceAttachment.

        Output only. Connection status.

        :return: The connection_status of this ServiceAttachment.
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this ServiceAttachment.

        Output only. Connection status.

        :param connection_status: The connection_status of this ServiceAttachment.
        :type connection_status: str
        """
        allowed_values = ["UNKNOWN", "ACCEPTED", "PENDING", "REJECTED", "NEEDS_ATTENTION", "CLOSED"]  # noqa: E501
        if connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def local_fqdn(self):
        """Gets the local_fqdn of this ServiceAttachment.

        Required. Fully qualified domain name that will be used in the private DNS record created for the service attachment.

        :return: The local_fqdn of this ServiceAttachment.
        :rtype: str
        """
        return self._local_fqdn

    @local_fqdn.setter
    def local_fqdn(self, local_fqdn):
        """Sets the local_fqdn of this ServiceAttachment.

        Required. Fully qualified domain name that will be used in the private DNS record created for the service attachment.

        :param local_fqdn: The local_fqdn of this ServiceAttachment.
        :type local_fqdn: str
        """

        self._local_fqdn = local_fqdn

    @property
    def target_service_attachment_uri(self):
        """Gets the target_service_attachment_uri of this ServiceAttachment.

        Required. URI of the service attachment to connect to. Format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment}

        :return: The target_service_attachment_uri of this ServiceAttachment.
        :rtype: str
        """
        return self._target_service_attachment_uri

    @target_service_attachment_uri.setter
    def target_service_attachment_uri(self, target_service_attachment_uri):
        """Sets the target_service_attachment_uri of this ServiceAttachment.

        Required. URI of the service attachment to connect to. Format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment}

        :param target_service_attachment_uri: The target_service_attachment_uri of this ServiceAttachment.
        :type target_service_attachment_uri: str
        """

        self._target_service_attachment_uri = target_service_attachment_uri
