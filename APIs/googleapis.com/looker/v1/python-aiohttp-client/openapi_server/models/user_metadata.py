# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_developer_user_count: int=None, additional_standard_user_count: int=None, additional_viewer_user_count: int=None):
        """UserMetadata - a model defined in OpenAPI

        :param additional_developer_user_count: The additional_developer_user_count of this UserMetadata.
        :param additional_standard_user_count: The additional_standard_user_count of this UserMetadata.
        :param additional_viewer_user_count: The additional_viewer_user_count of this UserMetadata.
        """
        self.openapi_types = {
            'additional_developer_user_count': int,
            'additional_standard_user_count': int,
            'additional_viewer_user_count': int
        }

        self.attribute_map = {
            'additional_developer_user_count': 'additionalDeveloperUserCount',
            'additional_standard_user_count': 'additionalStandardUserCount',
            'additional_viewer_user_count': 'additionalViewerUserCount'
        }

        self._additional_developer_user_count = additional_developer_user_count
        self._additional_standard_user_count = additional_standard_user_count
        self._additional_viewer_user_count = additional_viewer_user_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMetadata of this UserMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_developer_user_count(self):
        """Gets the additional_developer_user_count of this UserMetadata.

        Optional. The number of additional developer users the instance owner has purchased.

        :return: The additional_developer_user_count of this UserMetadata.
        :rtype: int
        """
        return self._additional_developer_user_count

    @additional_developer_user_count.setter
    def additional_developer_user_count(self, additional_developer_user_count):
        """Sets the additional_developer_user_count of this UserMetadata.

        Optional. The number of additional developer users the instance owner has purchased.

        :param additional_developer_user_count: The additional_developer_user_count of this UserMetadata.
        :type additional_developer_user_count: int
        """

        self._additional_developer_user_count = additional_developer_user_count

    @property
    def additional_standard_user_count(self):
        """Gets the additional_standard_user_count of this UserMetadata.

        Optional. The number of additional standard users the instance owner has purchased.

        :return: The additional_standard_user_count of this UserMetadata.
        :rtype: int
        """
        return self._additional_standard_user_count

    @additional_standard_user_count.setter
    def additional_standard_user_count(self, additional_standard_user_count):
        """Sets the additional_standard_user_count of this UserMetadata.

        Optional. The number of additional standard users the instance owner has purchased.

        :param additional_standard_user_count: The additional_standard_user_count of this UserMetadata.
        :type additional_standard_user_count: int
        """

        self._additional_standard_user_count = additional_standard_user_count

    @property
    def additional_viewer_user_count(self):
        """Gets the additional_viewer_user_count of this UserMetadata.

        Optional. The number of additional viewer users the instance owner has purchased.

        :return: The additional_viewer_user_count of this UserMetadata.
        :rtype: int
        """
        return self._additional_viewer_user_count

    @additional_viewer_user_count.setter
    def additional_viewer_user_count(self, additional_viewer_user_count):
        """Sets the additional_viewer_user_count of this UserMetadata.

        Optional. The number of additional viewer users the instance owner has purchased.

        :param additional_viewer_user_count: The additional_viewer_user_count of this UserMetadata.
        :type additional_viewer_user_count: int
        """

        self._additional_viewer_user_count = additional_viewer_user_count
