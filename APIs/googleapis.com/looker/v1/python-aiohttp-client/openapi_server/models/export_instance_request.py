# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_encryption_config import ExportEncryptionConfig
from openapi_server import util


class ExportInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_config: ExportEncryptionConfig=None, gcs_uri: str=None):
        """ExportInstanceRequest - a model defined in OpenAPI

        :param encryption_config: The encryption_config of this ExportInstanceRequest.
        :param gcs_uri: The gcs_uri of this ExportInstanceRequest.
        """
        self.openapi_types = {
            'encryption_config': ExportEncryptionConfig,
            'gcs_uri': str
        }

        self.attribute_map = {
            'encryption_config': 'encryptionConfig',
            'gcs_uri': 'gcsUri'
        }

        self._encryption_config = encryption_config
        self._gcs_uri = gcs_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportInstanceRequest of this ExportInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_config(self):
        """Gets the encryption_config of this ExportInstanceRequest.


        :return: The encryption_config of this ExportInstanceRequest.
        :rtype: ExportEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this ExportInstanceRequest.


        :param encryption_config: The encryption_config of this ExportInstanceRequest.
        :type encryption_config: ExportEncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def gcs_uri(self):
        """Gets the gcs_uri of this ExportInstanceRequest.

        The path to the folder in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/folderName`.

        :return: The gcs_uri of this ExportInstanceRequest.
        :rtype: str
        """
        return self._gcs_uri

    @gcs_uri.setter
    def gcs_uri(self, gcs_uri):
        """Sets the gcs_uri of this ExportInstanceRequest.

        The path to the folder in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/folderName`.

        :param gcs_uri: The gcs_uri of this ExportInstanceRequest.
        :type gcs_uri: str
        """

        self._gcs_uri = gcs_uri
