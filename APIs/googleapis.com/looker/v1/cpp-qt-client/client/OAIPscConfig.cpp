/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPscConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPscConfig::OAIPscConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPscConfig::OAIPscConfig() {
    this->initializeModel();
}

OAIPscConfig::~OAIPscConfig() {}

void OAIPscConfig::initializeModel() {

    m_allowed_vpcs_isSet = false;
    m_allowed_vpcs_isValid = false;

    m_looker_service_attachment_uri_isSet = false;
    m_looker_service_attachment_uri_isValid = false;

    m_service_attachments_isSet = false;
    m_service_attachments_isValid = false;
}

void OAIPscConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPscConfig::fromJsonObject(QJsonObject json) {

    m_allowed_vpcs_isValid = ::OpenAPI::fromJsonValue(m_allowed_vpcs, json[QString("allowedVpcs")]);
    m_allowed_vpcs_isSet = !json[QString("allowedVpcs")].isNull() && m_allowed_vpcs_isValid;

    m_looker_service_attachment_uri_isValid = ::OpenAPI::fromJsonValue(m_looker_service_attachment_uri, json[QString("lookerServiceAttachmentUri")]);
    m_looker_service_attachment_uri_isSet = !json[QString("lookerServiceAttachmentUri")].isNull() && m_looker_service_attachment_uri_isValid;

    m_service_attachments_isValid = ::OpenAPI::fromJsonValue(m_service_attachments, json[QString("serviceAttachments")]);
    m_service_attachments_isSet = !json[QString("serviceAttachments")].isNull() && m_service_attachments_isValid;
}

QString OAIPscConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPscConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_vpcs.size() > 0) {
        obj.insert(QString("allowedVpcs"), ::OpenAPI::toJsonValue(m_allowed_vpcs));
    }
    if (m_looker_service_attachment_uri_isSet) {
        obj.insert(QString("lookerServiceAttachmentUri"), ::OpenAPI::toJsonValue(m_looker_service_attachment_uri));
    }
    if (m_service_attachments.size() > 0) {
        obj.insert(QString("serviceAttachments"), ::OpenAPI::toJsonValue(m_service_attachments));
    }
    return obj;
}

QList<QString> OAIPscConfig::getAllowedVpcs() const {
    return m_allowed_vpcs;
}
void OAIPscConfig::setAllowedVpcs(const QList<QString> &allowed_vpcs) {
    m_allowed_vpcs = allowed_vpcs;
    m_allowed_vpcs_isSet = true;
}

bool OAIPscConfig::is_allowed_vpcs_Set() const{
    return m_allowed_vpcs_isSet;
}

bool OAIPscConfig::is_allowed_vpcs_Valid() const{
    return m_allowed_vpcs_isValid;
}

QString OAIPscConfig::getLookerServiceAttachmentUri() const {
    return m_looker_service_attachment_uri;
}
void OAIPscConfig::setLookerServiceAttachmentUri(const QString &looker_service_attachment_uri) {
    m_looker_service_attachment_uri = looker_service_attachment_uri;
    m_looker_service_attachment_uri_isSet = true;
}

bool OAIPscConfig::is_looker_service_attachment_uri_Set() const{
    return m_looker_service_attachment_uri_isSet;
}

bool OAIPscConfig::is_looker_service_attachment_uri_Valid() const{
    return m_looker_service_attachment_uri_isValid;
}

QList<OAIServiceAttachment> OAIPscConfig::getServiceAttachments() const {
    return m_service_attachments;
}
void OAIPscConfig::setServiceAttachments(const QList<OAIServiceAttachment> &service_attachments) {
    m_service_attachments = service_attachments;
    m_service_attachments_isSet = true;
}

bool OAIPscConfig::is_service_attachments_Set() const{
    return m_service_attachments_isSet;
}

bool OAIPscConfig::is_service_attachments_Valid() const{
    return m_service_attachments_isValid;
}

bool OAIPscConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_vpcs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_service_attachment_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPscConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
