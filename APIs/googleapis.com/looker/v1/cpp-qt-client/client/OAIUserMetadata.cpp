/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserMetadata::OAIUserMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserMetadata::OAIUserMetadata() {
    this->initializeModel();
}

OAIUserMetadata::~OAIUserMetadata() {}

void OAIUserMetadata::initializeModel() {

    m_additional_developer_user_count_isSet = false;
    m_additional_developer_user_count_isValid = false;

    m_additional_standard_user_count_isSet = false;
    m_additional_standard_user_count_isValid = false;

    m_additional_viewer_user_count_isSet = false;
    m_additional_viewer_user_count_isValid = false;
}

void OAIUserMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserMetadata::fromJsonObject(QJsonObject json) {

    m_additional_developer_user_count_isValid = ::OpenAPI::fromJsonValue(m_additional_developer_user_count, json[QString("additionalDeveloperUserCount")]);
    m_additional_developer_user_count_isSet = !json[QString("additionalDeveloperUserCount")].isNull() && m_additional_developer_user_count_isValid;

    m_additional_standard_user_count_isValid = ::OpenAPI::fromJsonValue(m_additional_standard_user_count, json[QString("additionalStandardUserCount")]);
    m_additional_standard_user_count_isSet = !json[QString("additionalStandardUserCount")].isNull() && m_additional_standard_user_count_isValid;

    m_additional_viewer_user_count_isValid = ::OpenAPI::fromJsonValue(m_additional_viewer_user_count, json[QString("additionalViewerUserCount")]);
    m_additional_viewer_user_count_isSet = !json[QString("additionalViewerUserCount")].isNull() && m_additional_viewer_user_count_isValid;
}

QString OAIUserMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_developer_user_count_isSet) {
        obj.insert(QString("additionalDeveloperUserCount"), ::OpenAPI::toJsonValue(m_additional_developer_user_count));
    }
    if (m_additional_standard_user_count_isSet) {
        obj.insert(QString("additionalStandardUserCount"), ::OpenAPI::toJsonValue(m_additional_standard_user_count));
    }
    if (m_additional_viewer_user_count_isSet) {
        obj.insert(QString("additionalViewerUserCount"), ::OpenAPI::toJsonValue(m_additional_viewer_user_count));
    }
    return obj;
}

qint32 OAIUserMetadata::getAdditionalDeveloperUserCount() const {
    return m_additional_developer_user_count;
}
void OAIUserMetadata::setAdditionalDeveloperUserCount(const qint32 &additional_developer_user_count) {
    m_additional_developer_user_count = additional_developer_user_count;
    m_additional_developer_user_count_isSet = true;
}

bool OAIUserMetadata::is_additional_developer_user_count_Set() const{
    return m_additional_developer_user_count_isSet;
}

bool OAIUserMetadata::is_additional_developer_user_count_Valid() const{
    return m_additional_developer_user_count_isValid;
}

qint32 OAIUserMetadata::getAdditionalStandardUserCount() const {
    return m_additional_standard_user_count;
}
void OAIUserMetadata::setAdditionalStandardUserCount(const qint32 &additional_standard_user_count) {
    m_additional_standard_user_count = additional_standard_user_count;
    m_additional_standard_user_count_isSet = true;
}

bool OAIUserMetadata::is_additional_standard_user_count_Set() const{
    return m_additional_standard_user_count_isSet;
}

bool OAIUserMetadata::is_additional_standard_user_count_Valid() const{
    return m_additional_standard_user_count_isValid;
}

qint32 OAIUserMetadata::getAdditionalViewerUserCount() const {
    return m_additional_viewer_user_count;
}
void OAIUserMetadata::setAdditionalViewerUserCount(const qint32 &additional_viewer_user_count) {
    m_additional_viewer_user_count = additional_viewer_user_count;
    m_additional_viewer_user_count_isSet = true;
}

bool OAIUserMetadata::is_additional_viewer_user_count_Set() const{
    return m_additional_viewer_user_count_isSet;
}

bool OAIUserMetadata::is_additional_viewer_user_count_Valid() const{
    return m_additional_viewer_user_count_isValid;
}

bool OAIUserMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_developer_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_standard_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_viewer_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
