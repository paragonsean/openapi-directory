/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAttachment::OAIServiceAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAttachment::OAIServiceAttachment() {
    this->initializeModel();
}

OAIServiceAttachment::~OAIServiceAttachment() {}

void OAIServiceAttachment::initializeModel() {

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_local_fqdn_isSet = false;
    m_local_fqdn_isValid = false;

    m_target_service_attachment_uri_isSet = false;
    m_target_service_attachment_uri_isValid = false;
}

void OAIServiceAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAttachment::fromJsonObject(QJsonObject json) {

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connectionStatus")]);
    m_connection_status_isSet = !json[QString("connectionStatus")].isNull() && m_connection_status_isValid;

    m_local_fqdn_isValid = ::OpenAPI::fromJsonValue(m_local_fqdn, json[QString("localFqdn")]);
    m_local_fqdn_isSet = !json[QString("localFqdn")].isNull() && m_local_fqdn_isValid;

    m_target_service_attachment_uri_isValid = ::OpenAPI::fromJsonValue(m_target_service_attachment_uri, json[QString("targetServiceAttachmentUri")]);
    m_target_service_attachment_uri_isSet = !json[QString("targetServiceAttachmentUri")].isNull() && m_target_service_attachment_uri_isValid;
}

QString OAIServiceAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_status_isSet) {
        obj.insert(QString("connectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_local_fqdn_isSet) {
        obj.insert(QString("localFqdn"), ::OpenAPI::toJsonValue(m_local_fqdn));
    }
    if (m_target_service_attachment_uri_isSet) {
        obj.insert(QString("targetServiceAttachmentUri"), ::OpenAPI::toJsonValue(m_target_service_attachment_uri));
    }
    return obj;
}

QString OAIServiceAttachment::getConnectionStatus() const {
    return m_connection_status;
}
void OAIServiceAttachment::setConnectionStatus(const QString &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIServiceAttachment::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIServiceAttachment::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAIServiceAttachment::getLocalFqdn() const {
    return m_local_fqdn;
}
void OAIServiceAttachment::setLocalFqdn(const QString &local_fqdn) {
    m_local_fqdn = local_fqdn;
    m_local_fqdn_isSet = true;
}

bool OAIServiceAttachment::is_local_fqdn_Set() const{
    return m_local_fqdn_isSet;
}

bool OAIServiceAttachment::is_local_fqdn_Valid() const{
    return m_local_fqdn_isValid;
}

QString OAIServiceAttachment::getTargetServiceAttachmentUri() const {
    return m_target_service_attachment_uri;
}
void OAIServiceAttachment::setTargetServiceAttachmentUri(const QString &target_service_attachment_uri) {
    m_target_service_attachment_uri = target_service_attachment_uri;
    m_target_service_attachment_uri_isSet = true;
}

bool OAIServiceAttachment::is_target_service_attachment_uri_Set() const{
    return m_target_service_attachment_uri_isSet;
}

bool OAIServiceAttachment::is_target_service_attachment_uri_Valid() const{
    return m_target_service_attachment_uri_isValid;
}

bool OAIServiceAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_service_attachment_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
