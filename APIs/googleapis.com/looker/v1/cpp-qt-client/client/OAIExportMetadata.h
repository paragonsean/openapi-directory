/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExportMetadata.h
 *
 * ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in export artifact can be parsed as this message
 */

#ifndef OAIExportMetadata_H
#define OAIExportMetadata_H

#include <QJsonObject>

#include "OAIExportMetadataEncryptionKey.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExportMetadataEncryptionKey;

class OAIExportMetadata : public OAIObject {
public:
    OAIExportMetadata();
    OAIExportMetadata(QString json);
    ~OAIExportMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIExportMetadataEncryptionKey getExportEncryptionKey() const;
    void setExportEncryptionKey(const OAIExportMetadataEncryptionKey &export_encryption_key);
    bool is_export_encryption_key_Set() const;
    bool is_export_encryption_key_Valid() const;

    QList<QString> getFilePaths() const;
    void setFilePaths(const QList<QString> &file_paths);
    bool is_file_paths_Set() const;
    bool is_file_paths_Valid() const;

    QString getLookerEncryptionKey() const;
    void setLookerEncryptionKey(const QString &looker_encryption_key);
    bool is_looker_encryption_key_Set() const;
    bool is_looker_encryption_key_Valid() const;

    QString getLookerInstance() const;
    void setLookerInstance(const QString &looker_instance);
    bool is_looker_instance_Set() const;
    bool is_looker_instance_Valid() const;

    QString getLookerPlatformEdition() const;
    void setLookerPlatformEdition(const QString &looker_platform_edition);
    bool is_looker_platform_edition_Set() const;
    bool is_looker_platform_edition_Valid() const;

    QString getLookerVersion() const;
    void setLookerVersion(const QString &looker_version);
    bool is_looker_version_Set() const;
    bool is_looker_version_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIExportMetadataEncryptionKey m_export_encryption_key;
    bool m_export_encryption_key_isSet;
    bool m_export_encryption_key_isValid;

    QList<QString> m_file_paths;
    bool m_file_paths_isSet;
    bool m_file_paths_isValid;

    QString m_looker_encryption_key;
    bool m_looker_encryption_key_isSet;
    bool m_looker_encryption_key_isValid;

    QString m_looker_instance;
    bool m_looker_instance_isSet;
    bool m_looker_instance_isValid;

    QString m_looker_platform_edition;
    bool m_looker_platform_edition_isSet;
    bool m_looker_platform_edition_isValid;

    QString m_looker_version;
    bool m_looker_version_isSet;
    bool m_looker_version_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExportMetadata)

#endif // OAIExportMetadata_H
