/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_admin_settings_isSet = false;
    m_admin_settings_isValid = false;

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_deny_maintenance_period_isSet = false;
    m_deny_maintenance_period_isValid = false;

    m_egress_public_ip_isSet = false;
    m_egress_public_ip_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_ingress_private_ip_isSet = false;
    m_ingress_private_ip_isValid = false;

    m_ingress_public_ip_isSet = false;
    m_ingress_public_ip_isValid = false;

    m_last_deny_maintenance_period_isSet = false;
    m_last_deny_maintenance_period_isValid = false;

    m_looker_uri_isSet = false;
    m_looker_uri_isValid = false;

    m_looker_version_isSet = false;
    m_looker_version_isValid = false;

    m_maintenance_schedule_isSet = false;
    m_maintenance_schedule_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth_config_isSet = false;
    m_oauth_config_isValid = false;

    m_platform_edition_isSet = false;
    m_platform_edition_isValid = false;

    m_private_ip_enabled_isSet = false;
    m_private_ip_enabled_isValid = false;

    m_psc_config_isSet = false;
    m_psc_config_isValid = false;

    m_psc_enabled_isSet = false;
    m_psc_enabled_isValid = false;

    m_public_ip_enabled_isSet = false;
    m_public_ip_enabled_isValid = false;

    m_reserved_range_isSet = false;
    m_reserved_range_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_metadata_isSet = false;
    m_user_metadata_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_admin_settings_isValid = ::OpenAPI::fromJsonValue(m_admin_settings, json[QString("adminSettings")]);
    m_admin_settings_isSet = !json[QString("adminSettings")].isNull() && m_admin_settings_isValid;

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("customDomain")]);
    m_custom_domain_isSet = !json[QString("customDomain")].isNull() && m_custom_domain_isValid;

    m_deny_maintenance_period_isValid = ::OpenAPI::fromJsonValue(m_deny_maintenance_period, json[QString("denyMaintenancePeriod")]);
    m_deny_maintenance_period_isSet = !json[QString("denyMaintenancePeriod")].isNull() && m_deny_maintenance_period_isValid;

    m_egress_public_ip_isValid = ::OpenAPI::fromJsonValue(m_egress_public_ip, json[QString("egressPublicIp")]);
    m_egress_public_ip_isSet = !json[QString("egressPublicIp")].isNull() && m_egress_public_ip_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_ingress_private_ip_isValid = ::OpenAPI::fromJsonValue(m_ingress_private_ip, json[QString("ingressPrivateIp")]);
    m_ingress_private_ip_isSet = !json[QString("ingressPrivateIp")].isNull() && m_ingress_private_ip_isValid;

    m_ingress_public_ip_isValid = ::OpenAPI::fromJsonValue(m_ingress_public_ip, json[QString("ingressPublicIp")]);
    m_ingress_public_ip_isSet = !json[QString("ingressPublicIp")].isNull() && m_ingress_public_ip_isValid;

    m_last_deny_maintenance_period_isValid = ::OpenAPI::fromJsonValue(m_last_deny_maintenance_period, json[QString("lastDenyMaintenancePeriod")]);
    m_last_deny_maintenance_period_isSet = !json[QString("lastDenyMaintenancePeriod")].isNull() && m_last_deny_maintenance_period_isValid;

    m_looker_uri_isValid = ::OpenAPI::fromJsonValue(m_looker_uri, json[QString("lookerUri")]);
    m_looker_uri_isSet = !json[QString("lookerUri")].isNull() && m_looker_uri_isValid;

    m_looker_version_isValid = ::OpenAPI::fromJsonValue(m_looker_version, json[QString("lookerVersion")]);
    m_looker_version_isSet = !json[QString("lookerVersion")].isNull() && m_looker_version_isValid;

    m_maintenance_schedule_isValid = ::OpenAPI::fromJsonValue(m_maintenance_schedule, json[QString("maintenanceSchedule")]);
    m_maintenance_schedule_isSet = !json[QString("maintenanceSchedule")].isNull() && m_maintenance_schedule_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth_config_isValid = ::OpenAPI::fromJsonValue(m_oauth_config, json[QString("oauthConfig")]);
    m_oauth_config_isSet = !json[QString("oauthConfig")].isNull() && m_oauth_config_isValid;

    m_platform_edition_isValid = ::OpenAPI::fromJsonValue(m_platform_edition, json[QString("platformEdition")]);
    m_platform_edition_isSet = !json[QString("platformEdition")].isNull() && m_platform_edition_isValid;

    m_private_ip_enabled_isValid = ::OpenAPI::fromJsonValue(m_private_ip_enabled, json[QString("privateIpEnabled")]);
    m_private_ip_enabled_isSet = !json[QString("privateIpEnabled")].isNull() && m_private_ip_enabled_isValid;

    m_psc_config_isValid = ::OpenAPI::fromJsonValue(m_psc_config, json[QString("pscConfig")]);
    m_psc_config_isSet = !json[QString("pscConfig")].isNull() && m_psc_config_isValid;

    m_psc_enabled_isValid = ::OpenAPI::fromJsonValue(m_psc_enabled, json[QString("pscEnabled")]);
    m_psc_enabled_isSet = !json[QString("pscEnabled")].isNull() && m_psc_enabled_isValid;

    m_public_ip_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_ip_enabled, json[QString("publicIpEnabled")]);
    m_public_ip_enabled_isSet = !json[QString("publicIpEnabled")].isNull() && m_public_ip_enabled_isValid;

    m_reserved_range_isValid = ::OpenAPI::fromJsonValue(m_reserved_range, json[QString("reservedRange")]);
    m_reserved_range_isSet = !json[QString("reservedRange")].isNull() && m_reserved_range_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_user_metadata, json[QString("userMetadata")]);
    m_user_metadata_isSet = !json[QString("userMetadata")].isNull() && m_user_metadata_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_settings.isSet()) {
        obj.insert(QString("adminSettings"), ::OpenAPI::toJsonValue(m_admin_settings));
    }
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_domain.isSet()) {
        obj.insert(QString("customDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_deny_maintenance_period.isSet()) {
        obj.insert(QString("denyMaintenancePeriod"), ::OpenAPI::toJsonValue(m_deny_maintenance_period));
    }
    if (m_egress_public_ip_isSet) {
        obj.insert(QString("egressPublicIp"), ::OpenAPI::toJsonValue(m_egress_public_ip));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_ingress_private_ip_isSet) {
        obj.insert(QString("ingressPrivateIp"), ::OpenAPI::toJsonValue(m_ingress_private_ip));
    }
    if (m_ingress_public_ip_isSet) {
        obj.insert(QString("ingressPublicIp"), ::OpenAPI::toJsonValue(m_ingress_public_ip));
    }
    if (m_last_deny_maintenance_period.isSet()) {
        obj.insert(QString("lastDenyMaintenancePeriod"), ::OpenAPI::toJsonValue(m_last_deny_maintenance_period));
    }
    if (m_looker_uri_isSet) {
        obj.insert(QString("lookerUri"), ::OpenAPI::toJsonValue(m_looker_uri));
    }
    if (m_looker_version_isSet) {
        obj.insert(QString("lookerVersion"), ::OpenAPI::toJsonValue(m_looker_version));
    }
    if (m_maintenance_schedule.isSet()) {
        obj.insert(QString("maintenanceSchedule"), ::OpenAPI::toJsonValue(m_maintenance_schedule));
    }
    if (m_maintenance_window.isSet()) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oauth_config.isSet()) {
        obj.insert(QString("oauthConfig"), ::OpenAPI::toJsonValue(m_oauth_config));
    }
    if (m_platform_edition_isSet) {
        obj.insert(QString("platformEdition"), ::OpenAPI::toJsonValue(m_platform_edition));
    }
    if (m_private_ip_enabled_isSet) {
        obj.insert(QString("privateIpEnabled"), ::OpenAPI::toJsonValue(m_private_ip_enabled));
    }
    if (m_psc_config.isSet()) {
        obj.insert(QString("pscConfig"), ::OpenAPI::toJsonValue(m_psc_config));
    }
    if (m_psc_enabled_isSet) {
        obj.insert(QString("pscEnabled"), ::OpenAPI::toJsonValue(m_psc_enabled));
    }
    if (m_public_ip_enabled_isSet) {
        obj.insert(QString("publicIpEnabled"), ::OpenAPI::toJsonValue(m_public_ip_enabled));
    }
    if (m_reserved_range_isSet) {
        obj.insert(QString("reservedRange"), ::OpenAPI::toJsonValue(m_reserved_range));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_metadata.isSet()) {
        obj.insert(QString("userMetadata"), ::OpenAPI::toJsonValue(m_user_metadata));
    }
    return obj;
}

OAIAdminSettings OAIInstance::getAdminSettings() const {
    return m_admin_settings;
}
void OAIInstance::setAdminSettings(const OAIAdminSettings &admin_settings) {
    m_admin_settings = admin_settings;
    m_admin_settings_isSet = true;
}

bool OAIInstance::is_admin_settings_Set() const{
    return m_admin_settings_isSet;
}

bool OAIInstance::is_admin_settings_Valid() const{
    return m_admin_settings_isValid;
}

QString OAIInstance::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIInstance::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIInstance::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIInstance::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAICustomDomain OAIInstance::getCustomDomain() const {
    return m_custom_domain;
}
void OAIInstance::setCustomDomain(const OAICustomDomain &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIInstance::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIInstance::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAIDenyMaintenancePeriod OAIInstance::getDenyMaintenancePeriod() const {
    return m_deny_maintenance_period;
}
void OAIInstance::setDenyMaintenancePeriod(const OAIDenyMaintenancePeriod &deny_maintenance_period) {
    m_deny_maintenance_period = deny_maintenance_period;
    m_deny_maintenance_period_isSet = true;
}

bool OAIInstance::is_deny_maintenance_period_Set() const{
    return m_deny_maintenance_period_isSet;
}

bool OAIInstance::is_deny_maintenance_period_Valid() const{
    return m_deny_maintenance_period_isValid;
}

QString OAIInstance::getEgressPublicIp() const {
    return m_egress_public_ip;
}
void OAIInstance::setEgressPublicIp(const QString &egress_public_ip) {
    m_egress_public_ip = egress_public_ip;
    m_egress_public_ip_isSet = true;
}

bool OAIInstance::is_egress_public_ip_Set() const{
    return m_egress_public_ip_isSet;
}

bool OAIInstance::is_egress_public_ip_Valid() const{
    return m_egress_public_ip_isValid;
}

OAIEncryptionConfig OAIInstance::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIInstance::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIInstance::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIInstance::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIInstance::getIngressPrivateIp() const {
    return m_ingress_private_ip;
}
void OAIInstance::setIngressPrivateIp(const QString &ingress_private_ip) {
    m_ingress_private_ip = ingress_private_ip;
    m_ingress_private_ip_isSet = true;
}

bool OAIInstance::is_ingress_private_ip_Set() const{
    return m_ingress_private_ip_isSet;
}

bool OAIInstance::is_ingress_private_ip_Valid() const{
    return m_ingress_private_ip_isValid;
}

QString OAIInstance::getIngressPublicIp() const {
    return m_ingress_public_ip;
}
void OAIInstance::setIngressPublicIp(const QString &ingress_public_ip) {
    m_ingress_public_ip = ingress_public_ip;
    m_ingress_public_ip_isSet = true;
}

bool OAIInstance::is_ingress_public_ip_Set() const{
    return m_ingress_public_ip_isSet;
}

bool OAIInstance::is_ingress_public_ip_Valid() const{
    return m_ingress_public_ip_isValid;
}

OAIDenyMaintenancePeriod OAIInstance::getLastDenyMaintenancePeriod() const {
    return m_last_deny_maintenance_period;
}
void OAIInstance::setLastDenyMaintenancePeriod(const OAIDenyMaintenancePeriod &last_deny_maintenance_period) {
    m_last_deny_maintenance_period = last_deny_maintenance_period;
    m_last_deny_maintenance_period_isSet = true;
}

bool OAIInstance::is_last_deny_maintenance_period_Set() const{
    return m_last_deny_maintenance_period_isSet;
}

bool OAIInstance::is_last_deny_maintenance_period_Valid() const{
    return m_last_deny_maintenance_period_isValid;
}

QString OAIInstance::getLookerUri() const {
    return m_looker_uri;
}
void OAIInstance::setLookerUri(const QString &looker_uri) {
    m_looker_uri = looker_uri;
    m_looker_uri_isSet = true;
}

bool OAIInstance::is_looker_uri_Set() const{
    return m_looker_uri_isSet;
}

bool OAIInstance::is_looker_uri_Valid() const{
    return m_looker_uri_isValid;
}

QString OAIInstance::getLookerVersion() const {
    return m_looker_version;
}
void OAIInstance::setLookerVersion(const QString &looker_version) {
    m_looker_version = looker_version;
    m_looker_version_isSet = true;
}

bool OAIInstance::is_looker_version_Set() const{
    return m_looker_version_isSet;
}

bool OAIInstance::is_looker_version_Valid() const{
    return m_looker_version_isValid;
}

OAIMaintenanceSchedule OAIInstance::getMaintenanceSchedule() const {
    return m_maintenance_schedule;
}
void OAIInstance::setMaintenanceSchedule(const OAIMaintenanceSchedule &maintenance_schedule) {
    m_maintenance_schedule = maintenance_schedule;
    m_maintenance_schedule_isSet = true;
}

bool OAIInstance::is_maintenance_schedule_Set() const{
    return m_maintenance_schedule_isSet;
}

bool OAIInstance::is_maintenance_schedule_Valid() const{
    return m_maintenance_schedule_isValid;
}

OAIMaintenanceWindow OAIInstance::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIInstance::setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIInstance::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIInstance::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

OAIOAuthConfig OAIInstance::getOauthConfig() const {
    return m_oauth_config;
}
void OAIInstance::setOauthConfig(const OAIOAuthConfig &oauth_config) {
    m_oauth_config = oauth_config;
    m_oauth_config_isSet = true;
}

bool OAIInstance::is_oauth_config_Set() const{
    return m_oauth_config_isSet;
}

bool OAIInstance::is_oauth_config_Valid() const{
    return m_oauth_config_isValid;
}

QString OAIInstance::getPlatformEdition() const {
    return m_platform_edition;
}
void OAIInstance::setPlatformEdition(const QString &platform_edition) {
    m_platform_edition = platform_edition;
    m_platform_edition_isSet = true;
}

bool OAIInstance::is_platform_edition_Set() const{
    return m_platform_edition_isSet;
}

bool OAIInstance::is_platform_edition_Valid() const{
    return m_platform_edition_isValid;
}

bool OAIInstance::isPrivateIpEnabled() const {
    return m_private_ip_enabled;
}
void OAIInstance::setPrivateIpEnabled(const bool &private_ip_enabled) {
    m_private_ip_enabled = private_ip_enabled;
    m_private_ip_enabled_isSet = true;
}

bool OAIInstance::is_private_ip_enabled_Set() const{
    return m_private_ip_enabled_isSet;
}

bool OAIInstance::is_private_ip_enabled_Valid() const{
    return m_private_ip_enabled_isValid;
}

OAIPscConfig OAIInstance::getPscConfig() const {
    return m_psc_config;
}
void OAIInstance::setPscConfig(const OAIPscConfig &psc_config) {
    m_psc_config = psc_config;
    m_psc_config_isSet = true;
}

bool OAIInstance::is_psc_config_Set() const{
    return m_psc_config_isSet;
}

bool OAIInstance::is_psc_config_Valid() const{
    return m_psc_config_isValid;
}

bool OAIInstance::isPscEnabled() const {
    return m_psc_enabled;
}
void OAIInstance::setPscEnabled(const bool &psc_enabled) {
    m_psc_enabled = psc_enabled;
    m_psc_enabled_isSet = true;
}

bool OAIInstance::is_psc_enabled_Set() const{
    return m_psc_enabled_isSet;
}

bool OAIInstance::is_psc_enabled_Valid() const{
    return m_psc_enabled_isValid;
}

bool OAIInstance::isPublicIpEnabled() const {
    return m_public_ip_enabled;
}
void OAIInstance::setPublicIpEnabled(const bool &public_ip_enabled) {
    m_public_ip_enabled = public_ip_enabled;
    m_public_ip_enabled_isSet = true;
}

bool OAIInstance::is_public_ip_enabled_Set() const{
    return m_public_ip_enabled_isSet;
}

bool OAIInstance::is_public_ip_enabled_Valid() const{
    return m_public_ip_enabled_isValid;
}

QString OAIInstance::getReservedRange() const {
    return m_reserved_range;
}
void OAIInstance::setReservedRange(const QString &reserved_range) {
    m_reserved_range = reserved_range;
    m_reserved_range_isSet = true;
}

bool OAIInstance::is_reserved_range_Set() const{
    return m_reserved_range_isSet;
}

bool OAIInstance::is_reserved_range_Valid() const{
    return m_reserved_range_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getUpdateTime() const {
    return m_update_time;
}
void OAIInstance::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInstance::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInstance::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUserMetadata OAIInstance::getUserMetadata() const {
    return m_user_metadata;
}
void OAIInstance::setUserMetadata(const OAIUserMetadata &user_metadata) {
    m_user_metadata = user_metadata;
    m_user_metadata_isSet = true;
}

bool OAIInstance::is_user_metadata_Set() const{
    return m_user_metadata_isSet;
}

bool OAIInstance::is_user_metadata_Valid() const{
    return m_user_metadata_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_maintenance_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_private_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_deny_maintenance_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
