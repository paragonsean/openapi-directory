/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportMetadata::OAIExportMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportMetadata::OAIExportMetadata() {
    this->initializeModel();
}

OAIExportMetadata::~OAIExportMetadata() {}

void OAIExportMetadata::initializeModel() {

    m_export_encryption_key_isSet = false;
    m_export_encryption_key_isValid = false;

    m_file_paths_isSet = false;
    m_file_paths_isValid = false;

    m_looker_encryption_key_isSet = false;
    m_looker_encryption_key_isValid = false;

    m_looker_instance_isSet = false;
    m_looker_instance_isValid = false;

    m_looker_platform_edition_isSet = false;
    m_looker_platform_edition_isValid = false;

    m_looker_version_isSet = false;
    m_looker_version_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIExportMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportMetadata::fromJsonObject(QJsonObject json) {

    m_export_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_export_encryption_key, json[QString("exportEncryptionKey")]);
    m_export_encryption_key_isSet = !json[QString("exportEncryptionKey")].isNull() && m_export_encryption_key_isValid;

    m_file_paths_isValid = ::OpenAPI::fromJsonValue(m_file_paths, json[QString("filePaths")]);
    m_file_paths_isSet = !json[QString("filePaths")].isNull() && m_file_paths_isValid;

    m_looker_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_looker_encryption_key, json[QString("lookerEncryptionKey")]);
    m_looker_encryption_key_isSet = !json[QString("lookerEncryptionKey")].isNull() && m_looker_encryption_key_isValid;

    m_looker_instance_isValid = ::OpenAPI::fromJsonValue(m_looker_instance, json[QString("lookerInstance")]);
    m_looker_instance_isSet = !json[QString("lookerInstance")].isNull() && m_looker_instance_isValid;

    m_looker_platform_edition_isValid = ::OpenAPI::fromJsonValue(m_looker_platform_edition, json[QString("lookerPlatformEdition")]);
    m_looker_platform_edition_isSet = !json[QString("lookerPlatformEdition")].isNull() && m_looker_platform_edition_isValid;

    m_looker_version_isValid = ::OpenAPI::fromJsonValue(m_looker_version, json[QString("lookerVersion")]);
    m_looker_version_isSet = !json[QString("lookerVersion")].isNull() && m_looker_version_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIExportMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_export_encryption_key.isSet()) {
        obj.insert(QString("exportEncryptionKey"), ::OpenAPI::toJsonValue(m_export_encryption_key));
    }
    if (m_file_paths.size() > 0) {
        obj.insert(QString("filePaths"), ::OpenAPI::toJsonValue(m_file_paths));
    }
    if (m_looker_encryption_key_isSet) {
        obj.insert(QString("lookerEncryptionKey"), ::OpenAPI::toJsonValue(m_looker_encryption_key));
    }
    if (m_looker_instance_isSet) {
        obj.insert(QString("lookerInstance"), ::OpenAPI::toJsonValue(m_looker_instance));
    }
    if (m_looker_platform_edition_isSet) {
        obj.insert(QString("lookerPlatformEdition"), ::OpenAPI::toJsonValue(m_looker_platform_edition));
    }
    if (m_looker_version_isSet) {
        obj.insert(QString("lookerVersion"), ::OpenAPI::toJsonValue(m_looker_version));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIExportMetadataEncryptionKey OAIExportMetadata::getExportEncryptionKey() const {
    return m_export_encryption_key;
}
void OAIExportMetadata::setExportEncryptionKey(const OAIExportMetadataEncryptionKey &export_encryption_key) {
    m_export_encryption_key = export_encryption_key;
    m_export_encryption_key_isSet = true;
}

bool OAIExportMetadata::is_export_encryption_key_Set() const{
    return m_export_encryption_key_isSet;
}

bool OAIExportMetadata::is_export_encryption_key_Valid() const{
    return m_export_encryption_key_isValid;
}

QList<QString> OAIExportMetadata::getFilePaths() const {
    return m_file_paths;
}
void OAIExportMetadata::setFilePaths(const QList<QString> &file_paths) {
    m_file_paths = file_paths;
    m_file_paths_isSet = true;
}

bool OAIExportMetadata::is_file_paths_Set() const{
    return m_file_paths_isSet;
}

bool OAIExportMetadata::is_file_paths_Valid() const{
    return m_file_paths_isValid;
}

QString OAIExportMetadata::getLookerEncryptionKey() const {
    return m_looker_encryption_key;
}
void OAIExportMetadata::setLookerEncryptionKey(const QString &looker_encryption_key) {
    m_looker_encryption_key = looker_encryption_key;
    m_looker_encryption_key_isSet = true;
}

bool OAIExportMetadata::is_looker_encryption_key_Set() const{
    return m_looker_encryption_key_isSet;
}

bool OAIExportMetadata::is_looker_encryption_key_Valid() const{
    return m_looker_encryption_key_isValid;
}

QString OAIExportMetadata::getLookerInstance() const {
    return m_looker_instance;
}
void OAIExportMetadata::setLookerInstance(const QString &looker_instance) {
    m_looker_instance = looker_instance;
    m_looker_instance_isSet = true;
}

bool OAIExportMetadata::is_looker_instance_Set() const{
    return m_looker_instance_isSet;
}

bool OAIExportMetadata::is_looker_instance_Valid() const{
    return m_looker_instance_isValid;
}

QString OAIExportMetadata::getLookerPlatformEdition() const {
    return m_looker_platform_edition;
}
void OAIExportMetadata::setLookerPlatformEdition(const QString &looker_platform_edition) {
    m_looker_platform_edition = looker_platform_edition;
    m_looker_platform_edition_isSet = true;
}

bool OAIExportMetadata::is_looker_platform_edition_Set() const{
    return m_looker_platform_edition_isSet;
}

bool OAIExportMetadata::is_looker_platform_edition_Valid() const{
    return m_looker_platform_edition_isValid;
}

QString OAIExportMetadata::getLookerVersion() const {
    return m_looker_version;
}
void OAIExportMetadata::setLookerVersion(const QString &looker_version) {
    m_looker_version = looker_version;
    m_looker_version_isSet = true;
}

bool OAIExportMetadata::is_looker_version_Set() const{
    return m_looker_version_isSet;
}

bool OAIExportMetadata::is_looker_version_Valid() const{
    return m_looker_version_isValid;
}

QString OAIExportMetadata::getSource() const {
    return m_source;
}
void OAIExportMetadata::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIExportMetadata::is_source_Set() const{
    return m_source_isSet;
}

bool OAIExportMetadata::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIExportMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_platform_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looker_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
