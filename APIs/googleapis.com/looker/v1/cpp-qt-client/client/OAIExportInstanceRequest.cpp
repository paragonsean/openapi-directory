/**
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportInstanceRequest::OAIExportInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportInstanceRequest::OAIExportInstanceRequest() {
    this->initializeModel();
}

OAIExportInstanceRequest::~OAIExportInstanceRequest() {}

void OAIExportInstanceRequest::initializeModel() {

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_gcs_uri_isSet = false;
    m_gcs_uri_isValid = false;
}

void OAIExportInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportInstanceRequest::fromJsonObject(QJsonObject json) {

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_uri, json[QString("gcsUri")]);
    m_gcs_uri_isSet = !json[QString("gcsUri")].isNull() && m_gcs_uri_isValid;
}

QString OAIExportInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_gcs_uri_isSet) {
        obj.insert(QString("gcsUri"), ::OpenAPI::toJsonValue(m_gcs_uri));
    }
    return obj;
}

OAIExportEncryptionConfig OAIExportInstanceRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIExportInstanceRequest::setEncryptionConfig(const OAIExportEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIExportInstanceRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIExportInstanceRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIExportInstanceRequest::getGcsUri() const {
    return m_gcs_uri;
}
void OAIExportInstanceRequest::setGcsUri(const QString &gcs_uri) {
    m_gcs_uri = gcs_uri;
    m_gcs_uri_isSet = true;
}

bool OAIExportInstanceRequest::is_gcs_uri_Set() const{
    return m_gcs_uri_isSet;
}

bool OAIExportInstanceRequest::is_gcs_uri_Valid() const{
    return m_gcs_uri_isValid;
}

bool OAIExportInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
