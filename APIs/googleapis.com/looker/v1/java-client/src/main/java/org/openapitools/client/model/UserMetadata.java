/*
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about users for a Looker instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:26.818435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserMetadata {
  public static final String SERIALIZED_NAME_ADDITIONAL_DEVELOPER_USER_COUNT = "additionalDeveloperUserCount";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DEVELOPER_USER_COUNT)
  private Integer additionalDeveloperUserCount;

  public static final String SERIALIZED_NAME_ADDITIONAL_STANDARD_USER_COUNT = "additionalStandardUserCount";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_STANDARD_USER_COUNT)
  private Integer additionalStandardUserCount;

  public static final String SERIALIZED_NAME_ADDITIONAL_VIEWER_USER_COUNT = "additionalViewerUserCount";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_VIEWER_USER_COUNT)
  private Integer additionalViewerUserCount;

  public UserMetadata() {
  }

  public UserMetadata additionalDeveloperUserCount(Integer additionalDeveloperUserCount) {
    this.additionalDeveloperUserCount = additionalDeveloperUserCount;
    return this;
  }

  /**
   * Optional. The number of additional developer users the instance owner has purchased.
   * @return additionalDeveloperUserCount
   */
  @javax.annotation.Nullable
  public Integer getAdditionalDeveloperUserCount() {
    return additionalDeveloperUserCount;
  }

  public void setAdditionalDeveloperUserCount(Integer additionalDeveloperUserCount) {
    this.additionalDeveloperUserCount = additionalDeveloperUserCount;
  }


  public UserMetadata additionalStandardUserCount(Integer additionalStandardUserCount) {
    this.additionalStandardUserCount = additionalStandardUserCount;
    return this;
  }

  /**
   * Optional. The number of additional standard users the instance owner has purchased.
   * @return additionalStandardUserCount
   */
  @javax.annotation.Nullable
  public Integer getAdditionalStandardUserCount() {
    return additionalStandardUserCount;
  }

  public void setAdditionalStandardUserCount(Integer additionalStandardUserCount) {
    this.additionalStandardUserCount = additionalStandardUserCount;
  }


  public UserMetadata additionalViewerUserCount(Integer additionalViewerUserCount) {
    this.additionalViewerUserCount = additionalViewerUserCount;
    return this;
  }

  /**
   * Optional. The number of additional viewer users the instance owner has purchased.
   * @return additionalViewerUserCount
   */
  @javax.annotation.Nullable
  public Integer getAdditionalViewerUserCount() {
    return additionalViewerUserCount;
  }

  public void setAdditionalViewerUserCount(Integer additionalViewerUserCount) {
    this.additionalViewerUserCount = additionalViewerUserCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserMetadata userMetadata = (UserMetadata) o;
    return Objects.equals(this.additionalDeveloperUserCount, userMetadata.additionalDeveloperUserCount) &&
        Objects.equals(this.additionalStandardUserCount, userMetadata.additionalStandardUserCount) &&
        Objects.equals(this.additionalViewerUserCount, userMetadata.additionalViewerUserCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalDeveloperUserCount, additionalStandardUserCount, additionalViewerUserCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserMetadata {\n");
    sb.append("    additionalDeveloperUserCount: ").append(toIndentedString(additionalDeveloperUserCount)).append("\n");
    sb.append("    additionalStandardUserCount: ").append(toIndentedString(additionalStandardUserCount)).append("\n");
    sb.append("    additionalViewerUserCount: ").append(toIndentedString(additionalViewerUserCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalDeveloperUserCount");
    openapiFields.add("additionalStandardUserCount");
    openapiFields.add("additionalViewerUserCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserMetadata is not found in the empty JSON string", UserMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<UserMetadata>() {
           @Override
           public void write(JsonWriter out, UserMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserMetadata
   * @throws IOException if the JSON string is invalid with respect to UserMetadata
   */
  public static UserMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserMetadata.class);
  }

  /**
   * Convert an instance of UserMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

