/*
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceAttachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information for Private Service Connect (PSC) setup for a Looker instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:26.818435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscConfig {
  public static final String SERIALIZED_NAME_ALLOWED_VPCS = "allowedVpcs";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VPCS)
  private List<String> allowedVpcs = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKER_SERVICE_ATTACHMENT_URI = "lookerServiceAttachmentUri";
  @SerializedName(SERIALIZED_NAME_LOOKER_SERVICE_ATTACHMENT_URI)
  private String lookerServiceAttachmentUri;

  public static final String SERIALIZED_NAME_SERVICE_ATTACHMENTS = "serviceAttachments";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTACHMENTS)
  private List<ServiceAttachment> serviceAttachments = new ArrayList<>();

  public PscConfig() {
  }

  public PscConfig(
     String lookerServiceAttachmentUri
  ) {
    this();
    this.lookerServiceAttachmentUri = lookerServiceAttachmentUri;
  }

  public PscConfig allowedVpcs(List<String> allowedVpcs) {
    this.allowedVpcs = allowedVpcs;
    return this;
  }

  public PscConfig addAllowedVpcsItem(String allowedVpcsItem) {
    if (this.allowedVpcs == null) {
      this.allowedVpcs = new ArrayList<>();
    }
    this.allowedVpcs.add(allowedVpcsItem);
    return this;
  }

  /**
   * Optional. List of VPCs that are allowed ingress into looker. Format: projects/{project}/global/networks/{network}
   * @return allowedVpcs
   */
  @javax.annotation.Nullable
  public List<String> getAllowedVpcs() {
    return allowedVpcs;
  }

  public void setAllowedVpcs(List<String> allowedVpcs) {
    this.allowedVpcs = allowedVpcs;
  }


  /**
   * Output only. URI of the Looker service attachment.
   * @return lookerServiceAttachmentUri
   */
  @javax.annotation.Nullable
  public String getLookerServiceAttachmentUri() {
    return lookerServiceAttachmentUri;
  }



  public PscConfig serviceAttachments(List<ServiceAttachment> serviceAttachments) {
    this.serviceAttachments = serviceAttachments;
    return this;
  }

  public PscConfig addServiceAttachmentsItem(ServiceAttachment serviceAttachmentsItem) {
    if (this.serviceAttachments == null) {
      this.serviceAttachments = new ArrayList<>();
    }
    this.serviceAttachments.add(serviceAttachmentsItem);
    return this;
  }

  /**
   * Optional. List of egress service attachment configurations.
   * @return serviceAttachments
   */
  @javax.annotation.Nullable
  public List<ServiceAttachment> getServiceAttachments() {
    return serviceAttachments;
  }

  public void setServiceAttachments(List<ServiceAttachment> serviceAttachments) {
    this.serviceAttachments = serviceAttachments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscConfig pscConfig = (PscConfig) o;
    return Objects.equals(this.allowedVpcs, pscConfig.allowedVpcs) &&
        Objects.equals(this.lookerServiceAttachmentUri, pscConfig.lookerServiceAttachmentUri) &&
        Objects.equals(this.serviceAttachments, pscConfig.serviceAttachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedVpcs, lookerServiceAttachmentUri, serviceAttachments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscConfig {\n");
    sb.append("    allowedVpcs: ").append(toIndentedString(allowedVpcs)).append("\n");
    sb.append("    lookerServiceAttachmentUri: ").append(toIndentedString(lookerServiceAttachmentUri)).append("\n");
    sb.append("    serviceAttachments: ").append(toIndentedString(serviceAttachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedVpcs");
    openapiFields.add("lookerServiceAttachmentUri");
    openapiFields.add("serviceAttachments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscConfig is not found in the empty JSON string", PscConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedVpcs") != null && !jsonObj.get("allowedVpcs").isJsonNull() && !jsonObj.get("allowedVpcs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedVpcs` to be an array in the JSON string but got `%s`", jsonObj.get("allowedVpcs").toString()));
      }
      if ((jsonObj.get("lookerServiceAttachmentUri") != null && !jsonObj.get("lookerServiceAttachmentUri").isJsonNull()) && !jsonObj.get("lookerServiceAttachmentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerServiceAttachmentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerServiceAttachmentUri").toString()));
      }
      if (jsonObj.get("serviceAttachments") != null && !jsonObj.get("serviceAttachments").isJsonNull()) {
        JsonArray jsonArrayserviceAttachments = jsonObj.getAsJsonArray("serviceAttachments");
        if (jsonArrayserviceAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("serviceAttachments").toString()));
          }

          // validate the optional field `serviceAttachments` (array)
          for (int i = 0; i < jsonArrayserviceAttachments.size(); i++) {
            ServiceAttachment.validateJsonElement(jsonArrayserviceAttachments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PscConfig>() {
           @Override
           public void write(JsonWriter out, PscConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscConfig
   * @throws IOException if the JSON string is invalid with respect to PscConfig
   */
  public static PscConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscConfig.class);
  }

  /**
   * Convert an instance of PscConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

