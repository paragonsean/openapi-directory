/*
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminSettings;
import org.openapitools.client.model.CustomDomain;
import org.openapitools.client.model.DenyMaintenancePeriod;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.MaintenanceSchedule;
import org.openapitools.client.model.MaintenanceWindow;
import org.openapitools.client.model.OAuthConfig;
import org.openapitools.client.model.PscConfig;
import org.openapitools.client.model.UserMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Looker instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:26.818435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_ADMIN_SETTINGS = "adminSettings";
  @SerializedName(SERIALIZED_NAME_ADMIN_SETTINGS)
  private AdminSettings adminSettings;

  public static final String SERIALIZED_NAME_CONSUMER_NETWORK = "consumerNetwork";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NETWORK)
  private String consumerNetwork;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private CustomDomain customDomain;

  public static final String SERIALIZED_NAME_DENY_MAINTENANCE_PERIOD = "denyMaintenancePeriod";
  @SerializedName(SERIALIZED_NAME_DENY_MAINTENANCE_PERIOD)
  private DenyMaintenancePeriod denyMaintenancePeriod;

  public static final String SERIALIZED_NAME_EGRESS_PUBLIC_IP = "egressPublicIp";
  @SerializedName(SERIALIZED_NAME_EGRESS_PUBLIC_IP)
  private String egressPublicIp;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_INGRESS_PRIVATE_IP = "ingressPrivateIp";
  @SerializedName(SERIALIZED_NAME_INGRESS_PRIVATE_IP)
  private String ingressPrivateIp;

  public static final String SERIALIZED_NAME_INGRESS_PUBLIC_IP = "ingressPublicIp";
  @SerializedName(SERIALIZED_NAME_INGRESS_PUBLIC_IP)
  private String ingressPublicIp;

  public static final String SERIALIZED_NAME_LAST_DENY_MAINTENANCE_PERIOD = "lastDenyMaintenancePeriod";
  @SerializedName(SERIALIZED_NAME_LAST_DENY_MAINTENANCE_PERIOD)
  private DenyMaintenancePeriod lastDenyMaintenancePeriod;

  public static final String SERIALIZED_NAME_LOOKER_URI = "lookerUri";
  @SerializedName(SERIALIZED_NAME_LOOKER_URI)
  private String lookerUri;

  public static final String SERIALIZED_NAME_LOOKER_VERSION = "lookerVersion";
  @SerializedName(SERIALIZED_NAME_LOOKER_VERSION)
  private String lookerVersion;

  public static final String SERIALIZED_NAME_MAINTENANCE_SCHEDULE = "maintenanceSchedule";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_SCHEDULE)
  private MaintenanceSchedule maintenanceSchedule;

  public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW = "maintenanceWindow";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW)
  private MaintenanceWindow maintenanceWindow;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH_CONFIG = "oauthConfig";
  @SerializedName(SERIALIZED_NAME_OAUTH_CONFIG)
  private OAuthConfig oauthConfig;

  /**
   * Platform edition.
   */
  @JsonAdapter(PlatformEditionEnum.Adapter.class)
  public enum PlatformEditionEnum {
    PLATFORM_EDITION_UNSPECIFIED("PLATFORM_EDITION_UNSPECIFIED"),
    
    LOOKER_CORE_TRIAL("LOOKER_CORE_TRIAL"),
    
    LOOKER_CORE_STANDARD("LOOKER_CORE_STANDARD"),
    
    LOOKER_CORE_STANDARD_ANNUAL("LOOKER_CORE_STANDARD_ANNUAL"),
    
    LOOKER_CORE_ENTERPRISE_ANNUAL("LOOKER_CORE_ENTERPRISE_ANNUAL"),
    
    LOOKER_CORE_EMBED_ANNUAL("LOOKER_CORE_EMBED_ANNUAL");

    private String value;

    PlatformEditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEditionEnum fromValue(String value) {
      for (PlatformEditionEnum b : PlatformEditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_EDITION = "platformEdition";
  @SerializedName(SERIALIZED_NAME_PLATFORM_EDITION)
  private PlatformEditionEnum platformEdition;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ENABLED = "privateIpEnabled";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ENABLED)
  private Boolean privateIpEnabled;

  public static final String SERIALIZED_NAME_PSC_CONFIG = "pscConfig";
  @SerializedName(SERIALIZED_NAME_PSC_CONFIG)
  private PscConfig pscConfig;

  public static final String SERIALIZED_NAME_PSC_ENABLED = "pscEnabled";
  @SerializedName(SERIALIZED_NAME_PSC_ENABLED)
  private Boolean pscEnabled;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ENABLED = "publicIpEnabled";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ENABLED)
  private Boolean publicIpEnabled;

  public static final String SERIALIZED_NAME_RESERVED_RANGE = "reservedRange";
  @SerializedName(SERIALIZED_NAME_RESERVED_RANGE)
  private String reservedRange;

  /**
   * Output only. The state of the instance.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    FAILED("FAILED"),
    
    SUSPENDED("SUSPENDED"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    EXPORTING("EXPORTING"),
    
    IMPORTING("IMPORTING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_USER_METADATA = "userMetadata";
  @SerializedName(SERIALIZED_NAME_USER_METADATA)
  private UserMetadata userMetadata;

  public Instance() {
  }

  public Instance(
     String createTime, 
     String egressPublicIp, 
     String ingressPrivateIp, 
     String ingressPublicIp, 
     String lookerUri, 
     String lookerVersion, 
     String name, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.egressPublicIp = egressPublicIp;
    this.ingressPrivateIp = ingressPrivateIp;
    this.ingressPublicIp = ingressPublicIp;
    this.lookerUri = lookerUri;
    this.lookerVersion = lookerVersion;
    this.name = name;
    this.state = state;
    this.updateTime = updateTime;
  }

  public Instance adminSettings(AdminSettings adminSettings) {
    this.adminSettings = adminSettings;
    return this;
  }

  /**
   * Get adminSettings
   * @return adminSettings
   */
  @javax.annotation.Nullable
  public AdminSettings getAdminSettings() {
    return adminSettings;
  }

  public void setAdminSettings(AdminSettings adminSettings) {
    this.adminSettings = adminSettings;
  }


  public Instance consumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
    return this;
  }

  /**
   * Network name in the consumer project. Format: &#x60;projects/{project}/global/networks/{network}&#x60;. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
   * @return consumerNetwork
   */
  @javax.annotation.Nullable
  public String getConsumerNetwork() {
    return consumerNetwork;
  }

  public void setConsumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
  }


  /**
   * Output only. The time when the Looker instance provisioning was first requested.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Instance customDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Get customDomain
   * @return customDomain
   */
  @javax.annotation.Nullable
  public CustomDomain getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
  }


  public Instance denyMaintenancePeriod(DenyMaintenancePeriod denyMaintenancePeriod) {
    this.denyMaintenancePeriod = denyMaintenancePeriod;
    return this;
  }

  /**
   * Get denyMaintenancePeriod
   * @return denyMaintenancePeriod
   */
  @javax.annotation.Nullable
  public DenyMaintenancePeriod getDenyMaintenancePeriod() {
    return denyMaintenancePeriod;
  }

  public void setDenyMaintenancePeriod(DenyMaintenancePeriod denyMaintenancePeriod) {
    this.denyMaintenancePeriod = denyMaintenancePeriod;
  }


  /**
   * Output only. Public Egress IP (IPv4).
   * @return egressPublicIp
   */
  @javax.annotation.Nullable
  public String getEgressPublicIp() {
    return egressPublicIp;
  }



  public Instance encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  /**
   * Output only. Private Ingress IP (IPv4).
   * @return ingressPrivateIp
   */
  @javax.annotation.Nullable
  public String getIngressPrivateIp() {
    return ingressPrivateIp;
  }



  /**
   * Output only. Public Ingress IP (IPv4).
   * @return ingressPublicIp
   */
  @javax.annotation.Nullable
  public String getIngressPublicIp() {
    return ingressPublicIp;
  }



  public Instance lastDenyMaintenancePeriod(DenyMaintenancePeriod lastDenyMaintenancePeriod) {
    this.lastDenyMaintenancePeriod = lastDenyMaintenancePeriod;
    return this;
  }

  /**
   * Get lastDenyMaintenancePeriod
   * @return lastDenyMaintenancePeriod
   */
  @javax.annotation.Nullable
  public DenyMaintenancePeriod getLastDenyMaintenancePeriod() {
    return lastDenyMaintenancePeriod;
  }

  public void setLastDenyMaintenancePeriod(DenyMaintenancePeriod lastDenyMaintenancePeriod) {
    this.lastDenyMaintenancePeriod = lastDenyMaintenancePeriod;
  }


  /**
   * Output only. Looker instance URI which can be used to access the Looker Instance UI.
   * @return lookerUri
   */
  @javax.annotation.Nullable
  public String getLookerUri() {
    return lookerUri;
  }



  /**
   * Output only. The Looker version that the instance is using.
   * @return lookerVersion
   */
  @javax.annotation.Nullable
  public String getLookerVersion() {
    return lookerVersion;
  }



  public Instance maintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
    this.maintenanceSchedule = maintenanceSchedule;
    return this;
  }

  /**
   * Get maintenanceSchedule
   * @return maintenanceSchedule
   */
  @javax.annotation.Nullable
  public MaintenanceSchedule getMaintenanceSchedule() {
    return maintenanceSchedule;
  }

  public void setMaintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
    this.maintenanceSchedule = maintenanceSchedule;
  }


  public Instance maintenanceWindow(MaintenanceWindow maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
    return this;
  }

  /**
   * Get maintenanceWindow
   * @return maintenanceWindow
   */
  @javax.annotation.Nullable
  public MaintenanceWindow getMaintenanceWindow() {
    return maintenanceWindow;
  }

  public void setMaintenanceWindow(MaintenanceWindow maintenanceWindow) {
    this.maintenanceWindow = maintenanceWindow;
  }


  /**
   * Output only. Format: &#x60;projects/{project}/locations/{location}/instances/{instance}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Instance oauthConfig(OAuthConfig oauthConfig) {
    this.oauthConfig = oauthConfig;
    return this;
  }

  /**
   * Get oauthConfig
   * @return oauthConfig
   */
  @javax.annotation.Nullable
  public OAuthConfig getOauthConfig() {
    return oauthConfig;
  }

  public void setOauthConfig(OAuthConfig oauthConfig) {
    this.oauthConfig = oauthConfig;
  }


  public Instance platformEdition(PlatformEditionEnum platformEdition) {
    this.platformEdition = platformEdition;
    return this;
  }

  /**
   * Platform edition.
   * @return platformEdition
   */
  @javax.annotation.Nullable
  public PlatformEditionEnum getPlatformEdition() {
    return platformEdition;
  }

  public void setPlatformEdition(PlatformEditionEnum platformEdition) {
    this.platformEdition = platformEdition;
  }


  public Instance privateIpEnabled(Boolean privateIpEnabled) {
    this.privateIpEnabled = privateIpEnabled;
    return this;
  }

  /**
   * Whether private IP is enabled on the Looker instance.
   * @return privateIpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPrivateIpEnabled() {
    return privateIpEnabled;
  }

  public void setPrivateIpEnabled(Boolean privateIpEnabled) {
    this.privateIpEnabled = privateIpEnabled;
  }


  public Instance pscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
    return this;
  }

  /**
   * Get pscConfig
   * @return pscConfig
   */
  @javax.annotation.Nullable
  public PscConfig getPscConfig() {
    return pscConfig;
  }

  public void setPscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
  }


  public Instance pscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
    return this;
  }

  /**
   * Optional. Whether to use Private Service Connect (PSC) for private IP connectivity. If true, VPC peering (PSA) will not be used.
   * @return pscEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPscEnabled() {
    return pscEnabled;
  }

  public void setPscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
  }


  public Instance publicIpEnabled(Boolean publicIpEnabled) {
    this.publicIpEnabled = publicIpEnabled;
    return this;
  }

  /**
   * Whether public IP is enabled on the Looker instance.
   * @return publicIpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPublicIpEnabled() {
    return publicIpEnabled;
  }

  public void setPublicIpEnabled(Boolean publicIpEnabled) {
    this.publicIpEnabled = publicIpEnabled;
  }


  public Instance reservedRange(String reservedRange) {
    this.reservedRange = reservedRange;
    return this;
  }

  /**
   * Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
   * @return reservedRange
   */
  @javax.annotation.Nullable
  public String getReservedRange() {
    return reservedRange;
  }

  public void setReservedRange(String reservedRange) {
    this.reservedRange = reservedRange;
  }


  /**
   * Output only. The state of the instance.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The time when the Looker instance was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Instance userMetadata(UserMetadata userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

  /**
   * Get userMetadata
   * @return userMetadata
   */
  @javax.annotation.Nullable
  public UserMetadata getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(UserMetadata userMetadata) {
    this.userMetadata = userMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.adminSettings, instance.adminSettings) &&
        Objects.equals(this.consumerNetwork, instance.consumerNetwork) &&
        Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.customDomain, instance.customDomain) &&
        Objects.equals(this.denyMaintenancePeriod, instance.denyMaintenancePeriod) &&
        Objects.equals(this.egressPublicIp, instance.egressPublicIp) &&
        Objects.equals(this.encryptionConfig, instance.encryptionConfig) &&
        Objects.equals(this.ingressPrivateIp, instance.ingressPrivateIp) &&
        Objects.equals(this.ingressPublicIp, instance.ingressPublicIp) &&
        Objects.equals(this.lastDenyMaintenancePeriod, instance.lastDenyMaintenancePeriod) &&
        Objects.equals(this.lookerUri, instance.lookerUri) &&
        Objects.equals(this.lookerVersion, instance.lookerVersion) &&
        Objects.equals(this.maintenanceSchedule, instance.maintenanceSchedule) &&
        Objects.equals(this.maintenanceWindow, instance.maintenanceWindow) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.oauthConfig, instance.oauthConfig) &&
        Objects.equals(this.platformEdition, instance.platformEdition) &&
        Objects.equals(this.privateIpEnabled, instance.privateIpEnabled) &&
        Objects.equals(this.pscConfig, instance.pscConfig) &&
        Objects.equals(this.pscEnabled, instance.pscEnabled) &&
        Objects.equals(this.publicIpEnabled, instance.publicIpEnabled) &&
        Objects.equals(this.reservedRange, instance.reservedRange) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.updateTime, instance.updateTime) &&
        Objects.equals(this.userMetadata, instance.userMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminSettings, consumerNetwork, createTime, customDomain, denyMaintenancePeriod, egressPublicIp, encryptionConfig, ingressPrivateIp, ingressPublicIp, lastDenyMaintenancePeriod, lookerUri, lookerVersion, maintenanceSchedule, maintenanceWindow, name, oauthConfig, platformEdition, privateIpEnabled, pscConfig, pscEnabled, publicIpEnabled, reservedRange, state, updateTime, userMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    adminSettings: ").append(toIndentedString(adminSettings)).append("\n");
    sb.append("    consumerNetwork: ").append(toIndentedString(consumerNetwork)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    denyMaintenancePeriod: ").append(toIndentedString(denyMaintenancePeriod)).append("\n");
    sb.append("    egressPublicIp: ").append(toIndentedString(egressPublicIp)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    ingressPrivateIp: ").append(toIndentedString(ingressPrivateIp)).append("\n");
    sb.append("    ingressPublicIp: ").append(toIndentedString(ingressPublicIp)).append("\n");
    sb.append("    lastDenyMaintenancePeriod: ").append(toIndentedString(lastDenyMaintenancePeriod)).append("\n");
    sb.append("    lookerUri: ").append(toIndentedString(lookerUri)).append("\n");
    sb.append("    lookerVersion: ").append(toIndentedString(lookerVersion)).append("\n");
    sb.append("    maintenanceSchedule: ").append(toIndentedString(maintenanceSchedule)).append("\n");
    sb.append("    maintenanceWindow: ").append(toIndentedString(maintenanceWindow)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauthConfig: ").append(toIndentedString(oauthConfig)).append("\n");
    sb.append("    platformEdition: ").append(toIndentedString(platformEdition)).append("\n");
    sb.append("    privateIpEnabled: ").append(toIndentedString(privateIpEnabled)).append("\n");
    sb.append("    pscConfig: ").append(toIndentedString(pscConfig)).append("\n");
    sb.append("    pscEnabled: ").append(toIndentedString(pscEnabled)).append("\n");
    sb.append("    publicIpEnabled: ").append(toIndentedString(publicIpEnabled)).append("\n");
    sb.append("    reservedRange: ").append(toIndentedString(reservedRange)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminSettings");
    openapiFields.add("consumerNetwork");
    openapiFields.add("createTime");
    openapiFields.add("customDomain");
    openapiFields.add("denyMaintenancePeriod");
    openapiFields.add("egressPublicIp");
    openapiFields.add("encryptionConfig");
    openapiFields.add("ingressPrivateIp");
    openapiFields.add("ingressPublicIp");
    openapiFields.add("lastDenyMaintenancePeriod");
    openapiFields.add("lookerUri");
    openapiFields.add("lookerVersion");
    openapiFields.add("maintenanceSchedule");
    openapiFields.add("maintenanceWindow");
    openapiFields.add("name");
    openapiFields.add("oauthConfig");
    openapiFields.add("platformEdition");
    openapiFields.add("privateIpEnabled");
    openapiFields.add("pscConfig");
    openapiFields.add("pscEnabled");
    openapiFields.add("publicIpEnabled");
    openapiFields.add("reservedRange");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("userMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adminSettings`
      if (jsonObj.get("adminSettings") != null && !jsonObj.get("adminSettings").isJsonNull()) {
        AdminSettings.validateJsonElement(jsonObj.get("adminSettings"));
      }
      if ((jsonObj.get("consumerNetwork") != null && !jsonObj.get("consumerNetwork").isJsonNull()) && !jsonObj.get("consumerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerNetwork").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `customDomain`
      if (jsonObj.get("customDomain") != null && !jsonObj.get("customDomain").isJsonNull()) {
        CustomDomain.validateJsonElement(jsonObj.get("customDomain"));
      }
      // validate the optional field `denyMaintenancePeriod`
      if (jsonObj.get("denyMaintenancePeriod") != null && !jsonObj.get("denyMaintenancePeriod").isJsonNull()) {
        DenyMaintenancePeriod.validateJsonElement(jsonObj.get("denyMaintenancePeriod"));
      }
      if ((jsonObj.get("egressPublicIp") != null && !jsonObj.get("egressPublicIp").isJsonNull()) && !jsonObj.get("egressPublicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `egressPublicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("egressPublicIp").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("ingressPrivateIp") != null && !jsonObj.get("ingressPrivateIp").isJsonNull()) && !jsonObj.get("ingressPrivateIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingressPrivateIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingressPrivateIp").toString()));
      }
      if ((jsonObj.get("ingressPublicIp") != null && !jsonObj.get("ingressPublicIp").isJsonNull()) && !jsonObj.get("ingressPublicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingressPublicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingressPublicIp").toString()));
      }
      // validate the optional field `lastDenyMaintenancePeriod`
      if (jsonObj.get("lastDenyMaintenancePeriod") != null && !jsonObj.get("lastDenyMaintenancePeriod").isJsonNull()) {
        DenyMaintenancePeriod.validateJsonElement(jsonObj.get("lastDenyMaintenancePeriod"));
      }
      if ((jsonObj.get("lookerUri") != null && !jsonObj.get("lookerUri").isJsonNull()) && !jsonObj.get("lookerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerUri").toString()));
      }
      if ((jsonObj.get("lookerVersion") != null && !jsonObj.get("lookerVersion").isJsonNull()) && !jsonObj.get("lookerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerVersion").toString()));
      }
      // validate the optional field `maintenanceSchedule`
      if (jsonObj.get("maintenanceSchedule") != null && !jsonObj.get("maintenanceSchedule").isJsonNull()) {
        MaintenanceSchedule.validateJsonElement(jsonObj.get("maintenanceSchedule"));
      }
      // validate the optional field `maintenanceWindow`
      if (jsonObj.get("maintenanceWindow") != null && !jsonObj.get("maintenanceWindow").isJsonNull()) {
        MaintenanceWindow.validateJsonElement(jsonObj.get("maintenanceWindow"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oauthConfig`
      if (jsonObj.get("oauthConfig") != null && !jsonObj.get("oauthConfig").isJsonNull()) {
        OAuthConfig.validateJsonElement(jsonObj.get("oauthConfig"));
      }
      if ((jsonObj.get("platformEdition") != null && !jsonObj.get("platformEdition").isJsonNull()) && !jsonObj.get("platformEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformEdition").toString()));
      }
      // validate the optional field `platformEdition`
      if (jsonObj.get("platformEdition") != null && !jsonObj.get("platformEdition").isJsonNull()) {
        PlatformEditionEnum.validateJsonElement(jsonObj.get("platformEdition"));
      }
      // validate the optional field `pscConfig`
      if (jsonObj.get("pscConfig") != null && !jsonObj.get("pscConfig").isJsonNull()) {
        PscConfig.validateJsonElement(jsonObj.get("pscConfig"));
      }
      if ((jsonObj.get("reservedRange") != null && !jsonObj.get("reservedRange").isJsonNull()) && !jsonObj.get("reservedRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedRange").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `userMetadata`
      if (jsonObj.get("userMetadata") != null && !jsonObj.get("userMetadata").isJsonNull()) {
        UserMetadata.validateJsonElement(jsonObj.get("userMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

