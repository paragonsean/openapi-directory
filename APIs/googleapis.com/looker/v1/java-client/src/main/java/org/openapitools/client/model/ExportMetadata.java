/*
 * Looker (Google Cloud core) API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportMetadataEncryptionKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in export artifact can be parsed as this message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:26.818435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportMetadata {
  public static final String SERIALIZED_NAME_EXPORT_ENCRYPTION_KEY = "exportEncryptionKey";
  @SerializedName(SERIALIZED_NAME_EXPORT_ENCRYPTION_KEY)
  private ExportMetadataEncryptionKey exportEncryptionKey;

  public static final String SERIALIZED_NAME_FILE_PATHS = "filePaths";
  @SerializedName(SERIALIZED_NAME_FILE_PATHS)
  private List<String> filePaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKER_ENCRYPTION_KEY = "lookerEncryptionKey";
  @SerializedName(SERIALIZED_NAME_LOOKER_ENCRYPTION_KEY)
  private String lookerEncryptionKey;

  public static final String SERIALIZED_NAME_LOOKER_INSTANCE = "lookerInstance";
  @SerializedName(SERIALIZED_NAME_LOOKER_INSTANCE)
  private String lookerInstance;

  public static final String SERIALIZED_NAME_LOOKER_PLATFORM_EDITION = "lookerPlatformEdition";
  @SerializedName(SERIALIZED_NAME_LOOKER_PLATFORM_EDITION)
  private String lookerPlatformEdition;

  public static final String SERIALIZED_NAME_LOOKER_VERSION = "lookerVersion";
  @SerializedName(SERIALIZED_NAME_LOOKER_VERSION)
  private String lookerVersion;

  /**
   * The source type of the migration.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    SOURCE_UNSPECIFIED("SOURCE_UNSPECIFIED"),
    
    LOOKER_CORE("LOOKER_CORE"),
    
    LOOKER_ORIGINAL("LOOKER_ORIGINAL");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public ExportMetadata() {
  }

  public ExportMetadata exportEncryptionKey(ExportMetadataEncryptionKey exportEncryptionKey) {
    this.exportEncryptionKey = exportEncryptionKey;
    return this;
  }

  /**
   * Get exportEncryptionKey
   * @return exportEncryptionKey
   */
  @javax.annotation.Nullable
  public ExportMetadataEncryptionKey getExportEncryptionKey() {
    return exportEncryptionKey;
  }

  public void setExportEncryptionKey(ExportMetadataEncryptionKey exportEncryptionKey) {
    this.exportEncryptionKey = exportEncryptionKey;
  }


  public ExportMetadata filePaths(List<String> filePaths) {
    this.filePaths = filePaths;
    return this;
  }

  public ExportMetadata addFilePathsItem(String filePathsItem) {
    if (this.filePaths == null) {
      this.filePaths = new ArrayList<>();
    }
    this.filePaths.add(filePathsItem);
    return this;
  }

  /**
   * List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.
   * @return filePaths
   */
  @javax.annotation.Nullable
  public List<String> getFilePaths() {
    return filePaths;
  }

  public void setFilePaths(List<String> filePaths) {
    this.filePaths = filePaths;
  }


  public ExportMetadata lookerEncryptionKey(String lookerEncryptionKey) {
    this.lookerEncryptionKey = lookerEncryptionKey;
    return this;
  }

  /**
   * Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.
   * @return lookerEncryptionKey
   */
  @javax.annotation.Nullable
  public String getLookerEncryptionKey() {
    return lookerEncryptionKey;
  }

  public void setLookerEncryptionKey(String lookerEncryptionKey) {
    this.lookerEncryptionKey = lookerEncryptionKey;
  }


  public ExportMetadata lookerInstance(String lookerInstance) {
    this.lookerInstance = lookerInstance;
    return this;
  }

  /**
   * Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}
   * @return lookerInstance
   */
  @javax.annotation.Nullable
  public String getLookerInstance() {
    return lookerInstance;
  }

  public void setLookerInstance(String lookerInstance) {
    this.lookerInstance = lookerInstance;
  }


  public ExportMetadata lookerPlatformEdition(String lookerPlatformEdition) {
    this.lookerPlatformEdition = lookerPlatformEdition;
    return this;
  }

  /**
   * Platform edition of the exported instance.
   * @return lookerPlatformEdition
   */
  @javax.annotation.Nullable
  public String getLookerPlatformEdition() {
    return lookerPlatformEdition;
  }

  public void setLookerPlatformEdition(String lookerPlatformEdition) {
    this.lookerPlatformEdition = lookerPlatformEdition;
  }


  public ExportMetadata lookerVersion(String lookerVersion) {
    this.lookerVersion = lookerVersion;
    return this;
  }

  /**
   * Version of instance when the export was created.
   * @return lookerVersion
   */
  @javax.annotation.Nullable
  public String getLookerVersion() {
    return lookerVersion;
  }

  public void setLookerVersion(String lookerVersion) {
    this.lookerVersion = lookerVersion;
  }


  public ExportMetadata source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * The source type of the migration.
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportMetadata exportMetadata = (ExportMetadata) o;
    return Objects.equals(this.exportEncryptionKey, exportMetadata.exportEncryptionKey) &&
        Objects.equals(this.filePaths, exportMetadata.filePaths) &&
        Objects.equals(this.lookerEncryptionKey, exportMetadata.lookerEncryptionKey) &&
        Objects.equals(this.lookerInstance, exportMetadata.lookerInstance) &&
        Objects.equals(this.lookerPlatformEdition, exportMetadata.lookerPlatformEdition) &&
        Objects.equals(this.lookerVersion, exportMetadata.lookerVersion) &&
        Objects.equals(this.source, exportMetadata.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportEncryptionKey, filePaths, lookerEncryptionKey, lookerInstance, lookerPlatformEdition, lookerVersion, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportMetadata {\n");
    sb.append("    exportEncryptionKey: ").append(toIndentedString(exportEncryptionKey)).append("\n");
    sb.append("    filePaths: ").append(toIndentedString(filePaths)).append("\n");
    sb.append("    lookerEncryptionKey: ").append(toIndentedString(lookerEncryptionKey)).append("\n");
    sb.append("    lookerInstance: ").append(toIndentedString(lookerInstance)).append("\n");
    sb.append("    lookerPlatformEdition: ").append(toIndentedString(lookerPlatformEdition)).append("\n");
    sb.append("    lookerVersion: ").append(toIndentedString(lookerVersion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exportEncryptionKey");
    openapiFields.add("filePaths");
    openapiFields.add("lookerEncryptionKey");
    openapiFields.add("lookerInstance");
    openapiFields.add("lookerPlatformEdition");
    openapiFields.add("lookerVersion");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportMetadata is not found in the empty JSON string", ExportMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exportEncryptionKey`
      if (jsonObj.get("exportEncryptionKey") != null && !jsonObj.get("exportEncryptionKey").isJsonNull()) {
        ExportMetadataEncryptionKey.validateJsonElement(jsonObj.get("exportEncryptionKey"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filePaths") != null && !jsonObj.get("filePaths").isJsonNull() && !jsonObj.get("filePaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePaths` to be an array in the JSON string but got `%s`", jsonObj.get("filePaths").toString()));
      }
      if ((jsonObj.get("lookerEncryptionKey") != null && !jsonObj.get("lookerEncryptionKey").isJsonNull()) && !jsonObj.get("lookerEncryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerEncryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerEncryptionKey").toString()));
      }
      if ((jsonObj.get("lookerInstance") != null && !jsonObj.get("lookerInstance").isJsonNull()) && !jsonObj.get("lookerInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerInstance").toString()));
      }
      if ((jsonObj.get("lookerPlatformEdition") != null && !jsonObj.get("lookerPlatformEdition").isJsonNull()) && !jsonObj.get("lookerPlatformEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerPlatformEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerPlatformEdition").toString()));
      }
      if ((jsonObj.get("lookerVersion") != null && !jsonObj.get("lookerVersion").isJsonNull()) && !jsonObj.get("lookerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookerVersion").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportMetadata>() {
           @Override
           public void write(JsonWriter out, ExportMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportMetadata
   * @throws IOException if the JSON string is invalid with respect to ExportMetadata
   */
  public static ExportMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportMetadata.class);
  }

  /**
   * Convert an instance of ExportMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

