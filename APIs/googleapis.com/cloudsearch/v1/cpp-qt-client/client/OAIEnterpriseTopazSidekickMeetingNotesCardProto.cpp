/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickMeetingNotesCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickMeetingNotesCardProto::OAIEnterpriseTopazSidekickMeetingNotesCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickMeetingNotesCardProto::OAIEnterpriseTopazSidekickMeetingNotesCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickMeetingNotesCardProto::~OAIEnterpriseTopazSidekickMeetingNotesCardProto() {}

void OAIEnterpriseTopazSidekickMeetingNotesCardProto::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEnterpriseTopazSidekickMeetingNotesCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickMeetingNotesCardProto::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEnterpriseTopazSidekickMeetingNotesCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickMeetingNotesCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIEnterpriseTopazSidekickAgendaEntry OAIEnterpriseTopazSidekickMeetingNotesCardProto::getEvent() const {
    return m_event;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardProto::setEvent(const OAIEnterpriseTopazSidekickAgendaEntry &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_event_Set() const{
    return m_event_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIEnterpriseTopazSidekickMeetingNotesCardProto::getFileId() const {
    return m_file_id;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardProto::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIEnterpriseTopazSidekickMeetingNotesCardProto::getTitle() const {
    return m_title;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardProto::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEnterpriseTopazSidekickMeetingNotesCardProto::getUrl() const {
    return m_url;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardProto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
