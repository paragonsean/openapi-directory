/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCustomerIndexStatsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCustomerIndexStatsResponse::OAIGetCustomerIndexStatsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCustomerIndexStatsResponse::OAIGetCustomerIndexStatsResponse() {
    this->initializeModel();
}

OAIGetCustomerIndexStatsResponse::~OAIGetCustomerIndexStatsResponse() {}

void OAIGetCustomerIndexStatsResponse::initializeModel() {

    m_average_indexed_item_count_isSet = false;
    m_average_indexed_item_count_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIGetCustomerIndexStatsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCustomerIndexStatsResponse::fromJsonObject(QJsonObject json) {

    m_average_indexed_item_count_isValid = ::OpenAPI::fromJsonValue(m_average_indexed_item_count, json[QString("averageIndexedItemCount")]);
    m_average_indexed_item_count_isSet = !json[QString("averageIndexedItemCount")].isNull() && m_average_indexed_item_count_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIGetCustomerIndexStatsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCustomerIndexStatsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_average_indexed_item_count_isSet) {
        obj.insert(QString("averageIndexedItemCount"), ::OpenAPI::toJsonValue(m_average_indexed_item_count));
    }
    if (m_stats.size() > 0) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

QString OAIGetCustomerIndexStatsResponse::getAverageIndexedItemCount() const {
    return m_average_indexed_item_count;
}
void OAIGetCustomerIndexStatsResponse::setAverageIndexedItemCount(const QString &average_indexed_item_count) {
    m_average_indexed_item_count = average_indexed_item_count;
    m_average_indexed_item_count_isSet = true;
}

bool OAIGetCustomerIndexStatsResponse::is_average_indexed_item_count_Set() const{
    return m_average_indexed_item_count_isSet;
}

bool OAIGetCustomerIndexStatsResponse::is_average_indexed_item_count_Valid() const{
    return m_average_indexed_item_count_isValid;
}

QList<OAICustomerIndexStats> OAIGetCustomerIndexStatsResponse::getStats() const {
    return m_stats;
}
void OAIGetCustomerIndexStatsResponse::setStats(const QList<OAICustomerIndexStats> &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIGetCustomerIndexStatsResponse::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIGetCustomerIndexStatsResponse::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIGetCustomerIndexStatsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_indexed_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCustomerIndexStatsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
