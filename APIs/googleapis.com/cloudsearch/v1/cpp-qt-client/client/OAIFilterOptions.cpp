/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterOptions::OAIFilterOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterOptions::OAIFilterOptions() {
    this->initializeModel();
}

OAIFilterOptions::~OAIFilterOptions() {}

void OAIFilterOptions::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIFilterOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterOptions::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIFilterOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

OAIFilter OAIFilterOptions::getFilter() const {
    return m_filter;
}
void OAIFilterOptions::setFilter(const OAIFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIFilterOptions::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIFilterOptions::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIFilterOptions::getObjectType() const {
    return m_object_type;
}
void OAIFilterOptions::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIFilterOptions::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIFilterOptions::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIFilterOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
