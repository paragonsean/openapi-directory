/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedProperty::OAINamedProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedProperty::OAINamedProperty() {
    this->initializeModel();
}

OAINamedProperty::~OAINamedProperty() {}

void OAINamedProperty::initializeModel() {

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_date_values_isSet = false;
    m_date_values_isValid = false;

    m_double_values_isSet = false;
    m_double_values_isValid = false;

    m_enum_values_isSet = false;
    m_enum_values_isValid = false;

    m_html_values_isSet = false;
    m_html_values_isValid = false;

    m_integer_values_isSet = false;
    m_integer_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_values_isSet = false;
    m_object_values_isValid = false;

    m_text_values_isSet = false;
    m_text_values_isValid = false;

    m_timestamp_values_isSet = false;
    m_timestamp_values_isValid = false;
}

void OAINamedProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedProperty::fromJsonObject(QJsonObject json) {

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;

    m_date_values_isValid = ::OpenAPI::fromJsonValue(m_date_values, json[QString("dateValues")]);
    m_date_values_isSet = !json[QString("dateValues")].isNull() && m_date_values_isValid;

    m_double_values_isValid = ::OpenAPI::fromJsonValue(m_double_values, json[QString("doubleValues")]);
    m_double_values_isSet = !json[QString("doubleValues")].isNull() && m_double_values_isValid;

    m_enum_values_isValid = ::OpenAPI::fromJsonValue(m_enum_values, json[QString("enumValues")]);
    m_enum_values_isSet = !json[QString("enumValues")].isNull() && m_enum_values_isValid;

    m_html_values_isValid = ::OpenAPI::fromJsonValue(m_html_values, json[QString("htmlValues")]);
    m_html_values_isSet = !json[QString("htmlValues")].isNull() && m_html_values_isValid;

    m_integer_values_isValid = ::OpenAPI::fromJsonValue(m_integer_values, json[QString("integerValues")]);
    m_integer_values_isSet = !json[QString("integerValues")].isNull() && m_integer_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_values_isValid = ::OpenAPI::fromJsonValue(m_object_values, json[QString("objectValues")]);
    m_object_values_isSet = !json[QString("objectValues")].isNull() && m_object_values_isValid;

    m_text_values_isValid = ::OpenAPI::fromJsonValue(m_text_values, json[QString("textValues")]);
    m_text_values_isSet = !json[QString("textValues")].isNull() && m_text_values_isValid;

    m_timestamp_values_isValid = ::OpenAPI::fromJsonValue(m_timestamp_values, json[QString("timestampValues")]);
    m_timestamp_values_isSet = !json[QString("timestampValues")].isNull() && m_timestamp_values_isValid;
}

QString OAINamedProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_date_values.isSet()) {
        obj.insert(QString("dateValues"), ::OpenAPI::toJsonValue(m_date_values));
    }
    if (m_double_values.isSet()) {
        obj.insert(QString("doubleValues"), ::OpenAPI::toJsonValue(m_double_values));
    }
    if (m_enum_values.isSet()) {
        obj.insert(QString("enumValues"), ::OpenAPI::toJsonValue(m_enum_values));
    }
    if (m_html_values.isSet()) {
        obj.insert(QString("htmlValues"), ::OpenAPI::toJsonValue(m_html_values));
    }
    if (m_integer_values.isSet()) {
        obj.insert(QString("integerValues"), ::OpenAPI::toJsonValue(m_integer_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_values.isSet()) {
        obj.insert(QString("objectValues"), ::OpenAPI::toJsonValue(m_object_values));
    }
    if (m_text_values.isSet()) {
        obj.insert(QString("textValues"), ::OpenAPI::toJsonValue(m_text_values));
    }
    if (m_timestamp_values.isSet()) {
        obj.insert(QString("timestampValues"), ::OpenAPI::toJsonValue(m_timestamp_values));
    }
    return obj;
}

bool OAINamedProperty::isBooleanValue() const {
    return m_boolean_value;
}
void OAINamedProperty::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAINamedProperty::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAINamedProperty::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

OAIDateValues OAINamedProperty::getDateValues() const {
    return m_date_values;
}
void OAINamedProperty::setDateValues(const OAIDateValues &date_values) {
    m_date_values = date_values;
    m_date_values_isSet = true;
}

bool OAINamedProperty::is_date_values_Set() const{
    return m_date_values_isSet;
}

bool OAINamedProperty::is_date_values_Valid() const{
    return m_date_values_isValid;
}

OAIDoubleValues OAINamedProperty::getDoubleValues() const {
    return m_double_values;
}
void OAINamedProperty::setDoubleValues(const OAIDoubleValues &double_values) {
    m_double_values = double_values;
    m_double_values_isSet = true;
}

bool OAINamedProperty::is_double_values_Set() const{
    return m_double_values_isSet;
}

bool OAINamedProperty::is_double_values_Valid() const{
    return m_double_values_isValid;
}

OAIEnumValues OAINamedProperty::getEnumValues() const {
    return m_enum_values;
}
void OAINamedProperty::setEnumValues(const OAIEnumValues &enum_values) {
    m_enum_values = enum_values;
    m_enum_values_isSet = true;
}

bool OAINamedProperty::is_enum_values_Set() const{
    return m_enum_values_isSet;
}

bool OAINamedProperty::is_enum_values_Valid() const{
    return m_enum_values_isValid;
}

OAIHtmlValues OAINamedProperty::getHtmlValues() const {
    return m_html_values;
}
void OAINamedProperty::setHtmlValues(const OAIHtmlValues &html_values) {
    m_html_values = html_values;
    m_html_values_isSet = true;
}

bool OAINamedProperty::is_html_values_Set() const{
    return m_html_values_isSet;
}

bool OAINamedProperty::is_html_values_Valid() const{
    return m_html_values_isValid;
}

OAIIntegerValues OAINamedProperty::getIntegerValues() const {
    return m_integer_values;
}
void OAINamedProperty::setIntegerValues(const OAIIntegerValues &integer_values) {
    m_integer_values = integer_values;
    m_integer_values_isSet = true;
}

bool OAINamedProperty::is_integer_values_Set() const{
    return m_integer_values_isSet;
}

bool OAINamedProperty::is_integer_values_Valid() const{
    return m_integer_values_isValid;
}

QString OAINamedProperty::getName() const {
    return m_name;
}
void OAINamedProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamedProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamedProperty::is_name_Valid() const{
    return m_name_isValid;
}

OAIObjectValues OAINamedProperty::getObjectValues() const {
    return m_object_values;
}
void OAINamedProperty::setObjectValues(const OAIObjectValues &object_values) {
    m_object_values = object_values;
    m_object_values_isSet = true;
}

bool OAINamedProperty::is_object_values_Set() const{
    return m_object_values_isSet;
}

bool OAINamedProperty::is_object_values_Valid() const{
    return m_object_values_isValid;
}

OAITextValues OAINamedProperty::getTextValues() const {
    return m_text_values;
}
void OAINamedProperty::setTextValues(const OAITextValues &text_values) {
    m_text_values = text_values;
    m_text_values_isSet = true;
}

bool OAINamedProperty::is_text_values_Set() const{
    return m_text_values_isSet;
}

bool OAINamedProperty::is_text_values_Valid() const{
    return m_text_values_isValid;
}

OAITimestampValues OAINamedProperty::getTimestampValues() const {
    return m_timestamp_values;
}
void OAINamedProperty::setTimestampValues(const OAITimestampValues &timestamp_values) {
    m_timestamp_values = timestamp_values;
    m_timestamp_values_isSet = true;
}

bool OAINamedProperty::is_timestamp_values_Set() const{
    return m_timestamp_values_isSet;
}

bool OAINamedProperty::is_timestamp_values_Valid() const{
    return m_timestamp_values_isValid;
}

bool OAINamedProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
