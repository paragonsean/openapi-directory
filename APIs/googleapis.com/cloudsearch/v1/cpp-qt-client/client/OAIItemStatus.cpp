/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemStatus::OAIItemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemStatus::OAIItemStatus() {
    this->initializeModel();
}

OAIItemStatus::~OAIItemStatus() {}

void OAIItemStatus::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_processing_errors_isSet = false;
    m_processing_errors_isValid = false;

    m_repository_errors_isSet = false;
    m_repository_errors_isValid = false;
}

void OAIItemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemStatus::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_processing_errors_isValid = ::OpenAPI::fromJsonValue(m_processing_errors, json[QString("processingErrors")]);
    m_processing_errors_isSet = !json[QString("processingErrors")].isNull() && m_processing_errors_isValid;

    m_repository_errors_isValid = ::OpenAPI::fromJsonValue(m_repository_errors, json[QString("repositoryErrors")]);
    m_repository_errors_isSet = !json[QString("repositoryErrors")].isNull() && m_repository_errors_isValid;
}

QString OAIItemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_processing_errors.size() > 0) {
        obj.insert(QString("processingErrors"), ::OpenAPI::toJsonValue(m_processing_errors));
    }
    if (m_repository_errors.size() > 0) {
        obj.insert(QString("repositoryErrors"), ::OpenAPI::toJsonValue(m_repository_errors));
    }
    return obj;
}

QString OAIItemStatus::getCode() const {
    return m_code;
}
void OAIItemStatus::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIItemStatus::is_code_Set() const{
    return m_code_isSet;
}

bool OAIItemStatus::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIProcessingError> OAIItemStatus::getProcessingErrors() const {
    return m_processing_errors;
}
void OAIItemStatus::setProcessingErrors(const QList<OAIProcessingError> &processing_errors) {
    m_processing_errors = processing_errors;
    m_processing_errors_isSet = true;
}

bool OAIItemStatus::is_processing_errors_Set() const{
    return m_processing_errors_isSet;
}

bool OAIItemStatus::is_processing_errors_Valid() const{
    return m_processing_errors_isValid;
}

QList<OAIRepositoryError> OAIItemStatus::getRepositoryErrors() const {
    return m_repository_errors;
}
void OAIItemStatus::setRepositoryErrors(const QList<OAIRepositoryError> &repository_errors) {
    m_repository_errors = repository_errors;
    m_repository_errors_isSet = true;
}

bool OAIItemStatus::is_repository_errors_Set() const{
    return m_repository_errors_isSet;
}

bool OAIItemStatus::is_repository_errors_Valid() const{
    return m_repository_errors_isValid;
}

bool OAIItemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
