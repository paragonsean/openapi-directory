/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEnumPropertyOptions.h
 *
 * The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.
 */

#ifndef OAIEnumPropertyOptions_H
#define OAIEnumPropertyOptions_H

#include <QJsonObject>

#include "OAIEnumOperatorOptions.h"
#include "OAIEnumValuePair.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEnumOperatorOptions;
class OAIEnumValuePair;

class OAIEnumPropertyOptions : public OAIObject {
public:
    OAIEnumPropertyOptions();
    OAIEnumPropertyOptions(QString json);
    ~OAIEnumPropertyOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEnumOperatorOptions getOperatorOptions() const;
    void setOperatorOptions(const OAIEnumOperatorOptions &operator_options);
    bool is_operator_options_Set() const;
    bool is_operator_options_Valid() const;

    QString getOrderedRanking() const;
    void setOrderedRanking(const QString &ordered_ranking);
    bool is_ordered_ranking_Set() const;
    bool is_ordered_ranking_Valid() const;

    QList<OAIEnumValuePair> getPossibleValues() const;
    void setPossibleValues(const QList<OAIEnumValuePair> &possible_values);
    bool is_possible_values_Set() const;
    bool is_possible_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEnumOperatorOptions m_operator_options;
    bool m_operator_options_isSet;
    bool m_operator_options_isValid;

    QString m_ordered_ranking;
    bool m_ordered_ranking_isSet;
    bool m_ordered_ranking_isValid;

    QList<OAIEnumValuePair> m_possible_values;
    bool m_possible_values_isSet;
    bool m_possible_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEnumPropertyOptions)

#endif // OAIEnumPropertyOptions_H
