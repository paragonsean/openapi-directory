/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInterpretation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInterpretation::OAIQueryInterpretation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInterpretation::OAIQueryInterpretation() {
    this->initializeModel();
}

OAIQueryInterpretation::~OAIQueryInterpretation() {}

void OAIQueryInterpretation::initializeModel() {

    m_interpretation_type_isSet = false;
    m_interpretation_type_isValid = false;

    m_interpreted_query_isSet = false;
    m_interpreted_query_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIQueryInterpretation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInterpretation::fromJsonObject(QJsonObject json) {

    m_interpretation_type_isValid = ::OpenAPI::fromJsonValue(m_interpretation_type, json[QString("interpretationType")]);
    m_interpretation_type_isSet = !json[QString("interpretationType")].isNull() && m_interpretation_type_isValid;

    m_interpreted_query_isValid = ::OpenAPI::fromJsonValue(m_interpreted_query, json[QString("interpretedQuery")]);
    m_interpreted_query_isSet = !json[QString("interpretedQuery")].isNull() && m_interpreted_query_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIQueryInterpretation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInterpretation::asJsonObject() const {
    QJsonObject obj;
    if (m_interpretation_type_isSet) {
        obj.insert(QString("interpretationType"), ::OpenAPI::toJsonValue(m_interpretation_type));
    }
    if (m_interpreted_query_isSet) {
        obj.insert(QString("interpretedQuery"), ::OpenAPI::toJsonValue(m_interpreted_query));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIQueryInterpretation::getInterpretationType() const {
    return m_interpretation_type;
}
void OAIQueryInterpretation::setInterpretationType(const QString &interpretation_type) {
    m_interpretation_type = interpretation_type;
    m_interpretation_type_isSet = true;
}

bool OAIQueryInterpretation::is_interpretation_type_Set() const{
    return m_interpretation_type_isSet;
}

bool OAIQueryInterpretation::is_interpretation_type_Valid() const{
    return m_interpretation_type_isValid;
}

QString OAIQueryInterpretation::getInterpretedQuery() const {
    return m_interpreted_query;
}
void OAIQueryInterpretation::setInterpretedQuery(const QString &interpreted_query) {
    m_interpreted_query = interpreted_query;
    m_interpreted_query_isSet = true;
}

bool OAIQueryInterpretation::is_interpreted_query_Set() const{
    return m_interpreted_query_isSet;
}

bool OAIQueryInterpretation::is_interpreted_query_Valid() const{
    return m_interpreted_query_isValid;
}

QString OAIQueryInterpretation::getReason() const {
    return m_reason;
}
void OAIQueryInterpretation::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIQueryInterpretation::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIQueryInterpretation::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIQueryInterpretation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interpretation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpreted_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInterpretation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
