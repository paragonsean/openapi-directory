/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::~OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard() {}

void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_answer_text_isSet = false;
    m_answer_text_isValid = false;

    m_disambiguation_info_isSet = false;
    m_disambiguation_info_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_answer_text_isValid = ::OpenAPI::fromJsonValue(m_answer_text, json[QString("answerText")]);
    m_answer_text_isSet = !json[QString("answerText")].isNull() && m_answer_text_isValid;

    m_disambiguation_info_isValid = ::OpenAPI::fromJsonValue(m_disambiguation_info, json[QString("disambiguationInfo")]);
    m_disambiguation_info_isSet = !json[QString("disambiguationInfo")].isNull() && m_disambiguation_info_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::asJsonObject() const {
    QJsonObject obj;
    if (m_answer.size() > 0) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_answer_text.isSet()) {
        obj.insert(QString("answerText"), ::OpenAPI::toJsonValue(m_answer_text));
    }
    if (m_disambiguation_info.isSet()) {
        obj.insert(QString("disambiguationInfo"), ::OpenAPI::toJsonValue(m_disambiguation_info));
    }
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QList<OAISafeHtmlProto> OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getAnswer() const {
    return m_answer;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setAnswer(const QList<OAISafeHtmlProto> &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_answer_Valid() const{
    return m_answer_isValid;
}

OAIEnterpriseTopazSidekickAnswerAnswerList OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getAnswerText() const {
    return m_answer_text;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setAnswerText(const OAIEnterpriseTopazSidekickAnswerAnswerList &answer_text) {
    m_answer_text = answer_text;
    m_answer_text_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_answer_text_Set() const{
    return m_answer_text_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_answer_text_Valid() const{
    return m_answer_text_isValid;
}

OAIEnterpriseTopazSidekickPeopleAnswerDisambiguationInfo OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getDisambiguationInfo() const {
    return m_disambiguation_info;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setDisambiguationInfo(const OAIEnterpriseTopazSidekickPeopleAnswerDisambiguationInfo &disambiguation_info) {
    m_disambiguation_info = disambiguation_info;
    m_disambiguation_info_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_disambiguation_info_Set() const{
    return m_disambiguation_info_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_disambiguation_info_Valid() const{
    return m_disambiguation_info_isValid;
}

OAIEnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getHeader() const {
    return m_header;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setHeader(const OAIEnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_header_Set() const{
    return m_header_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getResponseStatus() const {
    return m_response_status;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setResponseStatus(const QString &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_response_status_Valid() const{
    return m_response_status_isValid;
}

QString OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getStatusMessage() const {
    return m_status_message;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIEnterpriseTopazSidekickCommonPerson OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::getSubject() const {
    return m_subject;
}
void OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::setSubject(const OAIEnterpriseTopazSidekickCommonPerson &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disambiguation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
