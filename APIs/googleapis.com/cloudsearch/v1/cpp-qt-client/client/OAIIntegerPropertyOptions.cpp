/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegerPropertyOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegerPropertyOptions::OAIIntegerPropertyOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegerPropertyOptions::OAIIntegerPropertyOptions() {
    this->initializeModel();
}

OAIIntegerPropertyOptions::~OAIIntegerPropertyOptions() {}

void OAIIntegerPropertyOptions::initializeModel() {

    m_integer_faceting_options_isSet = false;
    m_integer_faceting_options_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_operator_options_isSet = false;
    m_operator_options_isValid = false;

    m_ordered_ranking_isSet = false;
    m_ordered_ranking_isValid = false;
}

void OAIIntegerPropertyOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegerPropertyOptions::fromJsonObject(QJsonObject json) {

    m_integer_faceting_options_isValid = ::OpenAPI::fromJsonValue(m_integer_faceting_options, json[QString("integerFacetingOptions")]);
    m_integer_faceting_options_isSet = !json[QString("integerFacetingOptions")].isNull() && m_integer_faceting_options_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("maximumValue")]);
    m_maximum_value_isSet = !json[QString("maximumValue")].isNull() && m_maximum_value_isValid;

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("minimumValue")]);
    m_minimum_value_isSet = !json[QString("minimumValue")].isNull() && m_minimum_value_isValid;

    m_operator_options_isValid = ::OpenAPI::fromJsonValue(m_operator_options, json[QString("operatorOptions")]);
    m_operator_options_isSet = !json[QString("operatorOptions")].isNull() && m_operator_options_isValid;

    m_ordered_ranking_isValid = ::OpenAPI::fromJsonValue(m_ordered_ranking, json[QString("orderedRanking")]);
    m_ordered_ranking_isSet = !json[QString("orderedRanking")].isNull() && m_ordered_ranking_isValid;
}

QString OAIIntegerPropertyOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegerPropertyOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_integer_faceting_options.isSet()) {
        obj.insert(QString("integerFacetingOptions"), ::OpenAPI::toJsonValue(m_integer_faceting_options));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("maximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_minimum_value_isSet) {
        obj.insert(QString("minimumValue"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_operator_options.isSet()) {
        obj.insert(QString("operatorOptions"), ::OpenAPI::toJsonValue(m_operator_options));
    }
    if (m_ordered_ranking_isSet) {
        obj.insert(QString("orderedRanking"), ::OpenAPI::toJsonValue(m_ordered_ranking));
    }
    return obj;
}

OAIIntegerFacetingOptions OAIIntegerPropertyOptions::getIntegerFacetingOptions() const {
    return m_integer_faceting_options;
}
void OAIIntegerPropertyOptions::setIntegerFacetingOptions(const OAIIntegerFacetingOptions &integer_faceting_options) {
    m_integer_faceting_options = integer_faceting_options;
    m_integer_faceting_options_isSet = true;
}

bool OAIIntegerPropertyOptions::is_integer_faceting_options_Set() const{
    return m_integer_faceting_options_isSet;
}

bool OAIIntegerPropertyOptions::is_integer_faceting_options_Valid() const{
    return m_integer_faceting_options_isValid;
}

QString OAIIntegerPropertyOptions::getMaximumValue() const {
    return m_maximum_value;
}
void OAIIntegerPropertyOptions::setMaximumValue(const QString &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIIntegerPropertyOptions::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIIntegerPropertyOptions::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

QString OAIIntegerPropertyOptions::getMinimumValue() const {
    return m_minimum_value;
}
void OAIIntegerPropertyOptions::setMinimumValue(const QString &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAIIntegerPropertyOptions::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAIIntegerPropertyOptions::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

OAIIntegerOperatorOptions OAIIntegerPropertyOptions::getOperatorOptions() const {
    return m_operator_options;
}
void OAIIntegerPropertyOptions::setOperatorOptions(const OAIIntegerOperatorOptions &operator_options) {
    m_operator_options = operator_options;
    m_operator_options_isSet = true;
}

bool OAIIntegerPropertyOptions::is_operator_options_Set() const{
    return m_operator_options_isSet;
}

bool OAIIntegerPropertyOptions::is_operator_options_Valid() const{
    return m_operator_options_isValid;
}

QString OAIIntegerPropertyOptions::getOrderedRanking() const {
    return m_ordered_ranking;
}
void OAIIntegerPropertyOptions::setOrderedRanking(const QString &ordered_ranking) {
    m_ordered_ranking = ordered_ranking;
    m_ordered_ranking_isSet = true;
}

bool OAIIntegerPropertyOptions::is_ordered_ranking_Set() const{
    return m_ordered_ranking_isSet;
}

bool OAIIntegerPropertyOptions::is_ordered_ranking_Valid() const{
    return m_ordered_ranking_isValid;
}

bool OAIIntegerPropertyOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integer_faceting_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegerPropertyOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
