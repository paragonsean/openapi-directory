/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchApplication::OAISearchApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchApplication::OAISearchApplication() {
    this->initializeModel();
}

OAISearchApplication::~OAISearchApplication() {}

void OAISearchApplication::initializeModel() {

    m_data_source_restrictions_isSet = false;
    m_data_source_restrictions_isValid = false;

    m_default_facet_options_isSet = false;
    m_default_facet_options_isValid = false;

    m_default_sort_options_isSet = false;
    m_default_sort_options_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_audit_log_isSet = false;
    m_enable_audit_log_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_ids_isSet = false;
    m_operation_ids_isValid = false;

    m_query_interpretation_config_isSet = false;
    m_query_interpretation_config_isValid = false;

    m_return_result_thumbnail_urls_isSet = false;
    m_return_result_thumbnail_urls_isValid = false;

    m_scoring_config_isSet = false;
    m_scoring_config_isValid = false;

    m_source_config_isSet = false;
    m_source_config_isValid = false;
}

void OAISearchApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchApplication::fromJsonObject(QJsonObject json) {

    m_data_source_restrictions_isValid = ::OpenAPI::fromJsonValue(m_data_source_restrictions, json[QString("dataSourceRestrictions")]);
    m_data_source_restrictions_isSet = !json[QString("dataSourceRestrictions")].isNull() && m_data_source_restrictions_isValid;

    m_default_facet_options_isValid = ::OpenAPI::fromJsonValue(m_default_facet_options, json[QString("defaultFacetOptions")]);
    m_default_facet_options_isSet = !json[QString("defaultFacetOptions")].isNull() && m_default_facet_options_isValid;

    m_default_sort_options_isValid = ::OpenAPI::fromJsonValue(m_default_sort_options, json[QString("defaultSortOptions")]);
    m_default_sort_options_isSet = !json[QString("defaultSortOptions")].isNull() && m_default_sort_options_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_audit_log_isValid = ::OpenAPI::fromJsonValue(m_enable_audit_log, json[QString("enableAuditLog")]);
    m_enable_audit_log_isSet = !json[QString("enableAuditLog")].isNull() && m_enable_audit_log_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_ids_isValid = ::OpenAPI::fromJsonValue(m_operation_ids, json[QString("operationIds")]);
    m_operation_ids_isSet = !json[QString("operationIds")].isNull() && m_operation_ids_isValid;

    m_query_interpretation_config_isValid = ::OpenAPI::fromJsonValue(m_query_interpretation_config, json[QString("queryInterpretationConfig")]);
    m_query_interpretation_config_isSet = !json[QString("queryInterpretationConfig")].isNull() && m_query_interpretation_config_isValid;

    m_return_result_thumbnail_urls_isValid = ::OpenAPI::fromJsonValue(m_return_result_thumbnail_urls, json[QString("returnResultThumbnailUrls")]);
    m_return_result_thumbnail_urls_isSet = !json[QString("returnResultThumbnailUrls")].isNull() && m_return_result_thumbnail_urls_isValid;

    m_scoring_config_isValid = ::OpenAPI::fromJsonValue(m_scoring_config, json[QString("scoringConfig")]);
    m_scoring_config_isSet = !json[QString("scoringConfig")].isNull() && m_scoring_config_isValid;

    m_source_config_isValid = ::OpenAPI::fromJsonValue(m_source_config, json[QString("sourceConfig")]);
    m_source_config_isSet = !json[QString("sourceConfig")].isNull() && m_source_config_isValid;
}

QString OAISearchApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_restrictions.size() > 0) {
        obj.insert(QString("dataSourceRestrictions"), ::OpenAPI::toJsonValue(m_data_source_restrictions));
    }
    if (m_default_facet_options.size() > 0) {
        obj.insert(QString("defaultFacetOptions"), ::OpenAPI::toJsonValue(m_default_facet_options));
    }
    if (m_default_sort_options.isSet()) {
        obj.insert(QString("defaultSortOptions"), ::OpenAPI::toJsonValue(m_default_sort_options));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_audit_log_isSet) {
        obj.insert(QString("enableAuditLog"), ::OpenAPI::toJsonValue(m_enable_audit_log));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_ids.size() > 0) {
        obj.insert(QString("operationIds"), ::OpenAPI::toJsonValue(m_operation_ids));
    }
    if (m_query_interpretation_config.isSet()) {
        obj.insert(QString("queryInterpretationConfig"), ::OpenAPI::toJsonValue(m_query_interpretation_config));
    }
    if (m_return_result_thumbnail_urls_isSet) {
        obj.insert(QString("returnResultThumbnailUrls"), ::OpenAPI::toJsonValue(m_return_result_thumbnail_urls));
    }
    if (m_scoring_config.isSet()) {
        obj.insert(QString("scoringConfig"), ::OpenAPI::toJsonValue(m_scoring_config));
    }
    if (m_source_config.size() > 0) {
        obj.insert(QString("sourceConfig"), ::OpenAPI::toJsonValue(m_source_config));
    }
    return obj;
}

QList<OAIDataSourceRestriction> OAISearchApplication::getDataSourceRestrictions() const {
    return m_data_source_restrictions;
}
void OAISearchApplication::setDataSourceRestrictions(const QList<OAIDataSourceRestriction> &data_source_restrictions) {
    m_data_source_restrictions = data_source_restrictions;
    m_data_source_restrictions_isSet = true;
}

bool OAISearchApplication::is_data_source_restrictions_Set() const{
    return m_data_source_restrictions_isSet;
}

bool OAISearchApplication::is_data_source_restrictions_Valid() const{
    return m_data_source_restrictions_isValid;
}

QList<OAIFacetOptions> OAISearchApplication::getDefaultFacetOptions() const {
    return m_default_facet_options;
}
void OAISearchApplication::setDefaultFacetOptions(const QList<OAIFacetOptions> &default_facet_options) {
    m_default_facet_options = default_facet_options;
    m_default_facet_options_isSet = true;
}

bool OAISearchApplication::is_default_facet_options_Set() const{
    return m_default_facet_options_isSet;
}

bool OAISearchApplication::is_default_facet_options_Valid() const{
    return m_default_facet_options_isValid;
}

OAISortOptions OAISearchApplication::getDefaultSortOptions() const {
    return m_default_sort_options;
}
void OAISearchApplication::setDefaultSortOptions(const OAISortOptions &default_sort_options) {
    m_default_sort_options = default_sort_options;
    m_default_sort_options_isSet = true;
}

bool OAISearchApplication::is_default_sort_options_Set() const{
    return m_default_sort_options_isSet;
}

bool OAISearchApplication::is_default_sort_options_Valid() const{
    return m_default_sort_options_isValid;
}

QString OAISearchApplication::getDisplayName() const {
    return m_display_name;
}
void OAISearchApplication::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISearchApplication::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISearchApplication::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAISearchApplication::isEnableAuditLog() const {
    return m_enable_audit_log;
}
void OAISearchApplication::setEnableAuditLog(const bool &enable_audit_log) {
    m_enable_audit_log = enable_audit_log;
    m_enable_audit_log_isSet = true;
}

bool OAISearchApplication::is_enable_audit_log_Set() const{
    return m_enable_audit_log_isSet;
}

bool OAISearchApplication::is_enable_audit_log_Valid() const{
    return m_enable_audit_log_isValid;
}

QString OAISearchApplication::getName() const {
    return m_name;
}
void OAISearchApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchApplication::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAISearchApplication::getOperationIds() const {
    return m_operation_ids;
}
void OAISearchApplication::setOperationIds(const QList<QString> &operation_ids) {
    m_operation_ids = operation_ids;
    m_operation_ids_isSet = true;
}

bool OAISearchApplication::is_operation_ids_Set() const{
    return m_operation_ids_isSet;
}

bool OAISearchApplication::is_operation_ids_Valid() const{
    return m_operation_ids_isValid;
}

OAIQueryInterpretationConfig OAISearchApplication::getQueryInterpretationConfig() const {
    return m_query_interpretation_config;
}
void OAISearchApplication::setQueryInterpretationConfig(const OAIQueryInterpretationConfig &query_interpretation_config) {
    m_query_interpretation_config = query_interpretation_config;
    m_query_interpretation_config_isSet = true;
}

bool OAISearchApplication::is_query_interpretation_config_Set() const{
    return m_query_interpretation_config_isSet;
}

bool OAISearchApplication::is_query_interpretation_config_Valid() const{
    return m_query_interpretation_config_isValid;
}

bool OAISearchApplication::isReturnResultThumbnailUrls() const {
    return m_return_result_thumbnail_urls;
}
void OAISearchApplication::setReturnResultThumbnailUrls(const bool &return_result_thumbnail_urls) {
    m_return_result_thumbnail_urls = return_result_thumbnail_urls;
    m_return_result_thumbnail_urls_isSet = true;
}

bool OAISearchApplication::is_return_result_thumbnail_urls_Set() const{
    return m_return_result_thumbnail_urls_isSet;
}

bool OAISearchApplication::is_return_result_thumbnail_urls_Valid() const{
    return m_return_result_thumbnail_urls_isValid;
}

OAIScoringConfig OAISearchApplication::getScoringConfig() const {
    return m_scoring_config;
}
void OAISearchApplication::setScoringConfig(const OAIScoringConfig &scoring_config) {
    m_scoring_config = scoring_config;
    m_scoring_config_isSet = true;
}

bool OAISearchApplication::is_scoring_config_Set() const{
    return m_scoring_config_isSet;
}

bool OAISearchApplication::is_scoring_config_Valid() const{
    return m_scoring_config_isValid;
}

QList<OAISourceConfig> OAISearchApplication::getSourceConfig() const {
    return m_source_config;
}
void OAISearchApplication::setSourceConfig(const QList<OAISourceConfig> &source_config) {
    m_source_config = source_config;
    m_source_config_isSet = true;
}

bool OAISearchApplication::is_source_config_Set() const{
    return m_source_config_isSet;
}

bool OAISearchApplication::is_source_config_Valid() const{
    return m_source_config_isValid;
}

bool OAISearchApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_facet_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sort_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_audit_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_interpretation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_result_thumbnail_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
