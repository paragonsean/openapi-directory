/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_email_addresses_isSet = false;
    m_email_addresses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_obfuscated_id_isSet = false;
    m_obfuscated_id_isValid = false;

    m_person_names_isSet = false;
    m_person_names_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_photos_isSet = false;
    m_photos_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_email_addresses, json[QString("emailAddresses")]);
    m_email_addresses_isSet = !json[QString("emailAddresses")].isNull() && m_email_addresses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_obfuscated_id_isValid = ::OpenAPI::fromJsonValue(m_obfuscated_id, json[QString("obfuscatedId")]);
    m_obfuscated_id_isSet = !json[QString("obfuscatedId")].isNull() && m_obfuscated_id_isValid;

    m_person_names_isValid = ::OpenAPI::fromJsonValue(m_person_names, json[QString("personNames")]);
    m_person_names_isSet = !json[QString("personNames")].isNull() && m_person_names_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_photos_isValid = ::OpenAPI::fromJsonValue(m_photos, json[QString("photos")]);
    m_photos_isSet = !json[QString("photos")].isNull() && m_photos_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_email_addresses.size() > 0) {
        obj.insert(QString("emailAddresses"), ::OpenAPI::toJsonValue(m_email_addresses));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_obfuscated_id_isSet) {
        obj.insert(QString("obfuscatedId"), ::OpenAPI::toJsonValue(m_obfuscated_id));
    }
    if (m_person_names.size() > 0) {
        obj.insert(QString("personNames"), ::OpenAPI::toJsonValue(m_person_names));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_photos.size() > 0) {
        obj.insert(QString("photos"), ::OpenAPI::toJsonValue(m_photos));
    }
    return obj;
}

QList<OAIEmailAddress> OAIPerson::getEmailAddresses() const {
    return m_email_addresses;
}
void OAIPerson::setEmailAddresses(const QList<OAIEmailAddress> &email_addresses) {
    m_email_addresses = email_addresses;
    m_email_addresses_isSet = true;
}

bool OAIPerson::is_email_addresses_Set() const{
    return m_email_addresses_isSet;
}

bool OAIPerson::is_email_addresses_Valid() const{
    return m_email_addresses_isValid;
}

QString OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPerson::getObfuscatedId() const {
    return m_obfuscated_id;
}
void OAIPerson::setObfuscatedId(const QString &obfuscated_id) {
    m_obfuscated_id = obfuscated_id;
    m_obfuscated_id_isSet = true;
}

bool OAIPerson::is_obfuscated_id_Set() const{
    return m_obfuscated_id_isSet;
}

bool OAIPerson::is_obfuscated_id_Valid() const{
    return m_obfuscated_id_isValid;
}

QList<OAIName> OAIPerson::getPersonNames() const {
    return m_person_names;
}
void OAIPerson::setPersonNames(const QList<OAIName> &person_names) {
    m_person_names = person_names;
    m_person_names_isSet = true;
}

bool OAIPerson::is_person_names_Set() const{
    return m_person_names_isSet;
}

bool OAIPerson::is_person_names_Valid() const{
    return m_person_names_isValid;
}

QList<OAIPhoneNumber> OAIPerson::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIPerson::setPhoneNumbers(const QList<OAIPhoneNumber> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIPerson::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIPerson::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QList<OAIPhoto> OAIPerson::getPhotos() const {
    return m_photos;
}
void OAIPerson::setPhotos(const QList<OAIPhoto> &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAIPerson::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAIPerson::is_photos_Valid() const{
    return m_photos_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscated_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
