/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchItemsByViewUrlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchItemsByViewUrlRequest::OAISearchItemsByViewUrlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchItemsByViewUrlRequest::OAISearchItemsByViewUrlRequest() {
    this->initializeModel();
}

OAISearchItemsByViewUrlRequest::~OAISearchItemsByViewUrlRequest() {}

void OAISearchItemsByViewUrlRequest::initializeModel() {

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_view_url_isSet = false;
    m_view_url_isValid = false;
}

void OAISearchItemsByViewUrlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchItemsByViewUrlRequest::fromJsonObject(QJsonObject json) {

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_view_url_isValid = ::OpenAPI::fromJsonValue(m_view_url, json[QString("viewUrl")]);
    m_view_url_isSet = !json[QString("viewUrl")].isNull() && m_view_url_isValid;
}

QString OAISearchItemsByViewUrlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchItemsByViewUrlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_view_url_isSet) {
        obj.insert(QString("viewUrl"), ::OpenAPI::toJsonValue(m_view_url));
    }
    return obj;
}

OAIDebugOptions OAISearchItemsByViewUrlRequest::getDebugOptions() const {
    return m_debug_options;
}
void OAISearchItemsByViewUrlRequest::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAISearchItemsByViewUrlRequest::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAISearchItemsByViewUrlRequest::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

QString OAISearchItemsByViewUrlRequest::getPageToken() const {
    return m_page_token;
}
void OAISearchItemsByViewUrlRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchItemsByViewUrlRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchItemsByViewUrlRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAISearchItemsByViewUrlRequest::getViewUrl() const {
    return m_view_url;
}
void OAISearchItemsByViewUrlRequest::setViewUrl(const QString &view_url) {
    m_view_url = view_url;
    m_view_url_isSet = true;
}

bool OAISearchItemsByViewUrlRequest::is_view_url_Set() const{
    return m_view_url_isSet;
}

bool OAISearchItemsByViewUrlRequest::is_view_url_Valid() const{
    return m_view_url_isValid;
}

bool OAISearchItemsByViewUrlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchItemsByViewUrlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
