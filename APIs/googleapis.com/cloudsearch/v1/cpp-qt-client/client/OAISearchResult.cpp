/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResult::OAISearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResult::OAISearchResult() {
    this->initializeModel();
}

OAISearchResult::~OAISearchResult() {}

void OAISearchResult::initializeModel() {

    m_clustered_results_isSet = false;
    m_clustered_results_isValid = false;

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResult::fromJsonObject(QJsonObject json) {

    m_clustered_results_isValid = ::OpenAPI::fromJsonValue(m_clustered_results, json[QString("clusteredResults")]);
    m_clustered_results_isSet = !json[QString("clusteredResults")].isNull() && m_clustered_results_isValid;

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_clustered_results.size() > 0) {
        obj.insert(QString("clusteredResults"), ::OpenAPI::toJsonValue(m_clustered_results));
    }
    if (m_debug_info.isSet()) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAISearchResult> OAISearchResult::getClusteredResults() const {
    return m_clustered_results;
}
void OAISearchResult::setClusteredResults(const QList<OAISearchResult> &clustered_results) {
    m_clustered_results = clustered_results;
    m_clustered_results_isSet = true;
}

bool OAISearchResult::is_clustered_results_Set() const{
    return m_clustered_results_isSet;
}

bool OAISearchResult::is_clustered_results_Valid() const{
    return m_clustered_results_isValid;
}

OAIResultDebugInfo OAISearchResult::getDebugInfo() const {
    return m_debug_info;
}
void OAISearchResult::setDebugInfo(const OAIResultDebugInfo &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAISearchResult::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAISearchResult::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

OAIMetadata OAISearchResult::getMetadata() const {
    return m_metadata;
}
void OAISearchResult::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISearchResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISearchResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAISnippet OAISearchResult::getSnippet() const {
    return m_snippet;
}
void OAISearchResult::setSnippet(const OAISnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAISearchResult::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAISearchResult::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAISearchResult::getTitle() const {
    return m_title;
}
void OAISearchResult::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearchResult::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchResult::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISearchResult::getUrl() const {
    return m_url;
}
void OAISearchResult::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISearchResult::is_url_Set() const{
    return m_url_isSet;
}

bool OAISearchResult::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clustered_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
