/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickTimeSlot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickTimeSlot::OAIEnterpriseTopazSidekickTimeSlot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickTimeSlot::OAIEnterpriseTopazSidekickTimeSlot() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickTimeSlot::~OAIEnterpriseTopazSidekickTimeSlot() {}

void OAIEnterpriseTopazSidekickTimeSlot::initializeModel() {

    m_end_time_day_isSet = false;
    m_end_time_day_isValid = false;

    m_end_time_hour_and_minute_isSet = false;
    m_end_time_hour_and_minute_isValid = false;

    m_end_time_in_millis_isSet = false;
    m_end_time_in_millis_isValid = false;

    m_start_time_day_isSet = false;
    m_start_time_day_isValid = false;

    m_start_time_hour_and_minute_isSet = false;
    m_start_time_hour_and_minute_isValid = false;

    m_start_time_in_millis_isSet = false;
    m_start_time_in_millis_isValid = false;
}

void OAIEnterpriseTopazSidekickTimeSlot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickTimeSlot::fromJsonObject(QJsonObject json) {

    m_end_time_day_isValid = ::OpenAPI::fromJsonValue(m_end_time_day, json[QString("endTimeDay")]);
    m_end_time_day_isSet = !json[QString("endTimeDay")].isNull() && m_end_time_day_isValid;

    m_end_time_hour_and_minute_isValid = ::OpenAPI::fromJsonValue(m_end_time_hour_and_minute, json[QString("endTimeHourAndMinute")]);
    m_end_time_hour_and_minute_isSet = !json[QString("endTimeHourAndMinute")].isNull() && m_end_time_hour_and_minute_isValid;

    m_end_time_in_millis_isValid = ::OpenAPI::fromJsonValue(m_end_time_in_millis, json[QString("endTimeInMillis")]);
    m_end_time_in_millis_isSet = !json[QString("endTimeInMillis")].isNull() && m_end_time_in_millis_isValid;

    m_start_time_day_isValid = ::OpenAPI::fromJsonValue(m_start_time_day, json[QString("startTimeDay")]);
    m_start_time_day_isSet = !json[QString("startTimeDay")].isNull() && m_start_time_day_isValid;

    m_start_time_hour_and_minute_isValid = ::OpenAPI::fromJsonValue(m_start_time_hour_and_minute, json[QString("startTimeHourAndMinute")]);
    m_start_time_hour_and_minute_isSet = !json[QString("startTimeHourAndMinute")].isNull() && m_start_time_hour_and_minute_isValid;

    m_start_time_in_millis_isValid = ::OpenAPI::fromJsonValue(m_start_time_in_millis, json[QString("startTimeInMillis")]);
    m_start_time_in_millis_isSet = !json[QString("startTimeInMillis")].isNull() && m_start_time_in_millis_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickTimeSlot::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_day_isSet) {
        obj.insert(QString("endTimeDay"), ::OpenAPI::toJsonValue(m_end_time_day));
    }
    if (m_end_time_hour_and_minute_isSet) {
        obj.insert(QString("endTimeHourAndMinute"), ::OpenAPI::toJsonValue(m_end_time_hour_and_minute));
    }
    if (m_end_time_in_millis_isSet) {
        obj.insert(QString("endTimeInMillis"), ::OpenAPI::toJsonValue(m_end_time_in_millis));
    }
    if (m_start_time_day_isSet) {
        obj.insert(QString("startTimeDay"), ::OpenAPI::toJsonValue(m_start_time_day));
    }
    if (m_start_time_hour_and_minute_isSet) {
        obj.insert(QString("startTimeHourAndMinute"), ::OpenAPI::toJsonValue(m_start_time_hour_and_minute));
    }
    if (m_start_time_in_millis_isSet) {
        obj.insert(QString("startTimeInMillis"), ::OpenAPI::toJsonValue(m_start_time_in_millis));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getEndTimeDay() const {
    return m_end_time_day;
}
void OAIEnterpriseTopazSidekickTimeSlot::setEndTimeDay(const QString &end_time_day) {
    m_end_time_day = end_time_day;
    m_end_time_day_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_day_Set() const{
    return m_end_time_day_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_day_Valid() const{
    return m_end_time_day_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getEndTimeHourAndMinute() const {
    return m_end_time_hour_and_minute;
}
void OAIEnterpriseTopazSidekickTimeSlot::setEndTimeHourAndMinute(const QString &end_time_hour_and_minute) {
    m_end_time_hour_and_minute = end_time_hour_and_minute;
    m_end_time_hour_and_minute_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_hour_and_minute_Set() const{
    return m_end_time_hour_and_minute_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_hour_and_minute_Valid() const{
    return m_end_time_hour_and_minute_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getEndTimeInMillis() const {
    return m_end_time_in_millis;
}
void OAIEnterpriseTopazSidekickTimeSlot::setEndTimeInMillis(const QString &end_time_in_millis) {
    m_end_time_in_millis = end_time_in_millis;
    m_end_time_in_millis_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_in_millis_Set() const{
    return m_end_time_in_millis_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_end_time_in_millis_Valid() const{
    return m_end_time_in_millis_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getStartTimeDay() const {
    return m_start_time_day;
}
void OAIEnterpriseTopazSidekickTimeSlot::setStartTimeDay(const QString &start_time_day) {
    m_start_time_day = start_time_day;
    m_start_time_day_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_day_Set() const{
    return m_start_time_day_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_day_Valid() const{
    return m_start_time_day_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getStartTimeHourAndMinute() const {
    return m_start_time_hour_and_minute;
}
void OAIEnterpriseTopazSidekickTimeSlot::setStartTimeHourAndMinute(const QString &start_time_hour_and_minute) {
    m_start_time_hour_and_minute = start_time_hour_and_minute;
    m_start_time_hour_and_minute_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_hour_and_minute_Set() const{
    return m_start_time_hour_and_minute_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_hour_and_minute_Valid() const{
    return m_start_time_hour_and_minute_isValid;
}

QString OAIEnterpriseTopazSidekickTimeSlot::getStartTimeInMillis() const {
    return m_start_time_in_millis;
}
void OAIEnterpriseTopazSidekickTimeSlot::setStartTimeInMillis(const QString &start_time_in_millis) {
    m_start_time_in_millis = start_time_in_millis;
    m_start_time_in_millis_isSet = true;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_in_millis_Set() const{
    return m_start_time_in_millis_isSet;
}

bool OAIEnterpriseTopazSidekickTimeSlot::is_start_time_in_millis_Valid() const{
    return m_start_time_in_millis_isValid;
}

bool OAIEnterpriseTopazSidekickTimeSlot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_hour_and_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_hour_and_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickTimeSlot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
