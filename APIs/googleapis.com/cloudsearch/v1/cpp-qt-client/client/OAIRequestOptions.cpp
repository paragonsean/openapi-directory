/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestOptions::OAIRequestOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestOptions::OAIRequestOptions() {
    this->initializeModel();
}

OAIRequestOptions::~OAIRequestOptions() {}

void OAIRequestOptions::initializeModel() {

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_search_application_id_isSet = false;
    m_search_application_id_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIRequestOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestOptions::fromJsonObject(QJsonObject json) {

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_search_application_id_isValid = ::OpenAPI::fromJsonValue(m_search_application_id, json[QString("searchApplicationId")]);
    m_search_application_id_isSet = !json[QString("searchApplicationId")].isNull() && m_search_application_id_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIRequestOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_search_application_id_isSet) {
        obj.insert(QString("searchApplicationId"), ::OpenAPI::toJsonValue(m_search_application_id));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIDebugOptions OAIRequestOptions::getDebugOptions() const {
    return m_debug_options;
}
void OAIRequestOptions::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAIRequestOptions::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAIRequestOptions::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

QString OAIRequestOptions::getLanguageCode() const {
    return m_language_code;
}
void OAIRequestOptions::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIRequestOptions::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIRequestOptions::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIRequestOptions::getSearchApplicationId() const {
    return m_search_application_id;
}
void OAIRequestOptions::setSearchApplicationId(const QString &search_application_id) {
    m_search_application_id = search_application_id;
    m_search_application_id_isSet = true;
}

bool OAIRequestOptions::is_search_application_id_Set() const{
    return m_search_application_id_isSet;
}

bool OAIRequestOptions::is_search_application_id_Valid() const{
    return m_search_application_id_isValid;
}

QString OAIRequestOptions::getTimeZone() const {
    return m_time_zone;
}
void OAIRequestOptions::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIRequestOptions::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIRequestOptions::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIRequestOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
