/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellResult::OAISpellResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellResult::OAISpellResult() {
    this->initializeModel();
}

OAISpellResult::~OAISpellResult() {}

void OAISpellResult::initializeModel() {

    m_suggested_query_isSet = false;
    m_suggested_query_isValid = false;

    m_suggested_query_html_isSet = false;
    m_suggested_query_html_isValid = false;

    m_suggestion_type_isSet = false;
    m_suggestion_type_isValid = false;
}

void OAISpellResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellResult::fromJsonObject(QJsonObject json) {

    m_suggested_query_isValid = ::OpenAPI::fromJsonValue(m_suggested_query, json[QString("suggestedQuery")]);
    m_suggested_query_isSet = !json[QString("suggestedQuery")].isNull() && m_suggested_query_isValid;

    m_suggested_query_html_isValid = ::OpenAPI::fromJsonValue(m_suggested_query_html, json[QString("suggestedQueryHtml")]);
    m_suggested_query_html_isSet = !json[QString("suggestedQueryHtml")].isNull() && m_suggested_query_html_isValid;

    m_suggestion_type_isValid = ::OpenAPI::fromJsonValue(m_suggestion_type, json[QString("suggestionType")]);
    m_suggestion_type_isSet = !json[QString("suggestionType")].isNull() && m_suggestion_type_isValid;
}

QString OAISpellResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellResult::asJsonObject() const {
    QJsonObject obj;
    if (m_suggested_query_isSet) {
        obj.insert(QString("suggestedQuery"), ::OpenAPI::toJsonValue(m_suggested_query));
    }
    if (m_suggested_query_html.isSet()) {
        obj.insert(QString("suggestedQueryHtml"), ::OpenAPI::toJsonValue(m_suggested_query_html));
    }
    if (m_suggestion_type_isSet) {
        obj.insert(QString("suggestionType"), ::OpenAPI::toJsonValue(m_suggestion_type));
    }
    return obj;
}

QString OAISpellResult::getSuggestedQuery() const {
    return m_suggested_query;
}
void OAISpellResult::setSuggestedQuery(const QString &suggested_query) {
    m_suggested_query = suggested_query;
    m_suggested_query_isSet = true;
}

bool OAISpellResult::is_suggested_query_Set() const{
    return m_suggested_query_isSet;
}

bool OAISpellResult::is_suggested_query_Valid() const{
    return m_suggested_query_isValid;
}

OAISafeHtmlProto OAISpellResult::getSuggestedQueryHtml() const {
    return m_suggested_query_html;
}
void OAISpellResult::setSuggestedQueryHtml(const OAISafeHtmlProto &suggested_query_html) {
    m_suggested_query_html = suggested_query_html;
    m_suggested_query_html_isSet = true;
}

bool OAISpellResult::is_suggested_query_html_Set() const{
    return m_suggested_query_html_isSet;
}

bool OAISpellResult::is_suggested_query_html_Valid() const{
    return m_suggested_query_html_isValid;
}

QString OAISpellResult::getSuggestionType() const {
    return m_suggestion_type;
}
void OAISpellResult::setSuggestionType(const QString &suggestion_type) {
    m_suggestion_type = suggestion_type;
    m_suggestion_type_isSet = true;
}

bool OAISpellResult::is_suggestion_type_Set() const{
    return m_suggestion_type_isSet;
}

bool OAISpellResult::is_suggestion_type_Valid() const{
    return m_suggestion_type_isValid;
}

bool OAISpellResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_suggested_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_query_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
