/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapInfo::OAIMapInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapInfo::OAIMapInfo() {
    this->initializeModel();
}

OAIMapInfo::~OAIMapInfo() {}

void OAIMapInfo::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_location_url_isSet = false;
    m_location_url_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_map_tile_isSet = false;
    m_map_tile_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIMapInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapInfo::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_location_url_isValid = ::OpenAPI::fromJsonValue(m_location_url, json[QString("locationUrl")]);
    m_location_url_isSet = !json[QString("locationUrl")].isNull() && m_location_url_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_map_tile_isValid = ::OpenAPI::fromJsonValue(m_map_tile, json[QString("mapTile")]);
    m_map_tile_isSet = !json[QString("mapTile")].isNull() && m_map_tile_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIMapInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_location_url.isSet()) {
        obj.insert(QString("locationUrl"), ::OpenAPI::toJsonValue(m_location_url));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_map_tile.size() > 0) {
        obj.insert(QString("mapTile"), ::OpenAPI::toJsonValue(m_map_tile));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

double OAIMapInfo::getLat() const {
    return m_lat;
}
void OAIMapInfo::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIMapInfo::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIMapInfo::is_lat_Valid() const{
    return m_lat_isValid;
}

OAISafeUrlProto OAIMapInfo::getLocationUrl() const {
    return m_location_url;
}
void OAIMapInfo::setLocationUrl(const OAISafeUrlProto &location_url) {
    m_location_url = location_url;
    m_location_url_isSet = true;
}

bool OAIMapInfo::is_location_url_Set() const{
    return m_location_url_isSet;
}

bool OAIMapInfo::is_location_url_Valid() const{
    return m_location_url_isValid;
}

double OAIMapInfo::getRLong() const {
    return m_r_long;
}
void OAIMapInfo::setRLong(const double &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIMapInfo::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIMapInfo::is_r_long_Valid() const{
    return m_r_long_isValid;
}

QList<OAIMapTile> OAIMapInfo::getMapTile() const {
    return m_map_tile;
}
void OAIMapInfo::setMapTile(const QList<OAIMapTile> &map_tile) {
    m_map_tile = map_tile;
    m_map_tile_isSet = true;
}

bool OAIMapInfo::is_map_tile_Set() const{
    return m_map_tile_isSet;
}

bool OAIMapInfo::is_map_tile_Valid() const{
    return m_map_tile_isValid;
}

qint32 OAIMapInfo::getZoom() const {
    return m_zoom;
}
void OAIMapInfo::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIMapInfo::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIMapInfo::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIMapInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_tile.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
