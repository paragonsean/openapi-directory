/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickCardMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickCardMetadata::OAIEnterpriseTopazSidekickCardMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickCardMetadata::OAIEnterpriseTopazSidekickCardMetadata() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickCardMetadata::~OAIEnterpriseTopazSidekickCardMetadata() {}

void OAIEnterpriseTopazSidekickCardMetadata::initializeModel() {

    m_card_category_isSet = false;
    m_card_category_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_chronology_isSet = false;
    m_chronology_isValid = false;

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_nlp_metadata_isSet = false;
    m_nlp_metadata_isValid = false;

    m_ranking_params_isSet = false;
    m_ranking_params_isValid = false;

    m_render_mode_isSet = false;
    m_render_mode_isValid = false;
}

void OAIEnterpriseTopazSidekickCardMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickCardMetadata::fromJsonObject(QJsonObject json) {

    m_card_category_isValid = ::OpenAPI::fromJsonValue(m_card_category, json[QString("cardCategory")]);
    m_card_category_isSet = !json[QString("cardCategory")].isNull() && m_card_category_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("cardId")]);
    m_card_id_isSet = !json[QString("cardId")].isNull() && m_card_id_isValid;

    m_chronology_isValid = ::OpenAPI::fromJsonValue(m_chronology, json[QString("chronology")]);
    m_chronology_isSet = !json[QString("chronology")].isNull() && m_chronology_isValid;

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_nlp_metadata_isValid = ::OpenAPI::fromJsonValue(m_nlp_metadata, json[QString("nlpMetadata")]);
    m_nlp_metadata_isSet = !json[QString("nlpMetadata")].isNull() && m_nlp_metadata_isValid;

    m_ranking_params_isValid = ::OpenAPI::fromJsonValue(m_ranking_params, json[QString("rankingParams")]);
    m_ranking_params_isSet = !json[QString("rankingParams")].isNull() && m_ranking_params_isValid;

    m_render_mode_isValid = ::OpenAPI::fromJsonValue(m_render_mode, json[QString("renderMode")]);
    m_render_mode_isSet = !json[QString("renderMode")].isNull() && m_render_mode_isValid;
}

QString OAIEnterpriseTopazSidekickCardMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickCardMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_card_category_isSet) {
        obj.insert(QString("cardCategory"), ::OpenAPI::toJsonValue(m_card_category));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("cardId"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_chronology_isSet) {
        obj.insert(QString("chronology"), ::OpenAPI::toJsonValue(m_chronology));
    }
    if (m_debug_info_isSet) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_nlp_metadata.isSet()) {
        obj.insert(QString("nlpMetadata"), ::OpenAPI::toJsonValue(m_nlp_metadata));
    }
    if (m_ranking_params.isSet()) {
        obj.insert(QString("rankingParams"), ::OpenAPI::toJsonValue(m_ranking_params));
    }
    if (m_render_mode_isSet) {
        obj.insert(QString("renderMode"), ::OpenAPI::toJsonValue(m_render_mode));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickCardMetadata::getCardCategory() const {
    return m_card_category;
}
void OAIEnterpriseTopazSidekickCardMetadata::setCardCategory(const QString &card_category) {
    m_card_category = card_category;
    m_card_category_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_card_category_Set() const{
    return m_card_category_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_card_category_Valid() const{
    return m_card_category_isValid;
}

QString OAIEnterpriseTopazSidekickCardMetadata::getCardId() const {
    return m_card_id;
}
void OAIEnterpriseTopazSidekickCardMetadata::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIEnterpriseTopazSidekickCardMetadata::getChronology() const {
    return m_chronology;
}
void OAIEnterpriseTopazSidekickCardMetadata::setChronology(const QString &chronology) {
    m_chronology = chronology;
    m_chronology_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_chronology_Set() const{
    return m_chronology_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_chronology_Valid() const{
    return m_chronology_isValid;
}

QString OAIEnterpriseTopazSidekickCardMetadata::getDebugInfo() const {
    return m_debug_info;
}
void OAIEnterpriseTopazSidekickCardMetadata::setDebugInfo(const QString &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

OAIEnterpriseTopazSidekickNlpMetadata OAIEnterpriseTopazSidekickCardMetadata::getNlpMetadata() const {
    return m_nlp_metadata;
}
void OAIEnterpriseTopazSidekickCardMetadata::setNlpMetadata(const OAIEnterpriseTopazSidekickNlpMetadata &nlp_metadata) {
    m_nlp_metadata = nlp_metadata;
    m_nlp_metadata_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_nlp_metadata_Set() const{
    return m_nlp_metadata_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_nlp_metadata_Valid() const{
    return m_nlp_metadata_isValid;
}

OAIEnterpriseTopazSidekickRankingParams OAIEnterpriseTopazSidekickCardMetadata::getRankingParams() const {
    return m_ranking_params;
}
void OAIEnterpriseTopazSidekickCardMetadata::setRankingParams(const OAIEnterpriseTopazSidekickRankingParams &ranking_params) {
    m_ranking_params = ranking_params;
    m_ranking_params_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_ranking_params_Set() const{
    return m_ranking_params_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_ranking_params_Valid() const{
    return m_ranking_params_isValid;
}

QString OAIEnterpriseTopazSidekickCardMetadata::getRenderMode() const {
    return m_render_mode;
}
void OAIEnterpriseTopazSidekickCardMetadata::setRenderMode(const QString &render_mode) {
    m_render_mode = render_mode;
    m_render_mode_isSet = true;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_render_mode_Set() const{
    return m_render_mode_isSet;
}

bool OAIEnterpriseTopazSidekickCardMetadata::is_render_mode_Valid() const{
    return m_render_mode_isValid;
}

bool OAIEnterpriseTopazSidekickCardMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chronology_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlp_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickCardMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
