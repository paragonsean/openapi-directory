/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreshnessOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreshnessOptions::OAIFreshnessOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreshnessOptions::OAIFreshnessOptions() {
    this->initializeModel();
}

OAIFreshnessOptions::~OAIFreshnessOptions() {}

void OAIFreshnessOptions::initializeModel() {

    m_freshness_duration_isSet = false;
    m_freshness_duration_isValid = false;

    m_freshness_property_isSet = false;
    m_freshness_property_isValid = false;
}

void OAIFreshnessOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreshnessOptions::fromJsonObject(QJsonObject json) {

    m_freshness_duration_isValid = ::OpenAPI::fromJsonValue(m_freshness_duration, json[QString("freshnessDuration")]);
    m_freshness_duration_isSet = !json[QString("freshnessDuration")].isNull() && m_freshness_duration_isValid;

    m_freshness_property_isValid = ::OpenAPI::fromJsonValue(m_freshness_property, json[QString("freshnessProperty")]);
    m_freshness_property_isSet = !json[QString("freshnessProperty")].isNull() && m_freshness_property_isValid;
}

QString OAIFreshnessOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreshnessOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_freshness_duration_isSet) {
        obj.insert(QString("freshnessDuration"), ::OpenAPI::toJsonValue(m_freshness_duration));
    }
    if (m_freshness_property_isSet) {
        obj.insert(QString("freshnessProperty"), ::OpenAPI::toJsonValue(m_freshness_property));
    }
    return obj;
}

QString OAIFreshnessOptions::getFreshnessDuration() const {
    return m_freshness_duration;
}
void OAIFreshnessOptions::setFreshnessDuration(const QString &freshness_duration) {
    m_freshness_duration = freshness_duration;
    m_freshness_duration_isSet = true;
}

bool OAIFreshnessOptions::is_freshness_duration_Set() const{
    return m_freshness_duration_isSet;
}

bool OAIFreshnessOptions::is_freshness_duration_Valid() const{
    return m_freshness_duration_isValid;
}

QString OAIFreshnessOptions::getFreshnessProperty() const {
    return m_freshness_property;
}
void OAIFreshnessOptions::setFreshnessProperty(const QString &freshness_property) {
    m_freshness_property = freshness_property;
    m_freshness_property_isSet = true;
}

bool OAIFreshnessOptions::is_freshness_property_Set() const{
    return m_freshness_property_isSet;
}

bool OAIFreshnessOptions::is_freshness_property_Valid() const{
    return m_freshness_property_isValid;
}

bool OAIFreshnessOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_freshness_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freshness_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreshnessOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
