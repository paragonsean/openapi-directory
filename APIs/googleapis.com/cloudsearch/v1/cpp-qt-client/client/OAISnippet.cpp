/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnippet::OAISnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnippet::OAISnippet() {
    this->initializeModel();
}

OAISnippet::~OAISnippet() {}

void OAISnippet::initializeModel() {

    m_match_ranges_isSet = false;
    m_match_ranges_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;
}

void OAISnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnippet::fromJsonObject(QJsonObject json) {

    m_match_ranges_isValid = ::OpenAPI::fromJsonValue(m_match_ranges, json[QString("matchRanges")]);
    m_match_ranges_isSet = !json[QString("matchRanges")].isNull() && m_match_ranges_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;
}

QString OAISnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_match_ranges.size() > 0) {
        obj.insert(QString("matchRanges"), ::OpenAPI::toJsonValue(m_match_ranges));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    return obj;
}

QList<OAIMatchRange> OAISnippet::getMatchRanges() const {
    return m_match_ranges;
}
void OAISnippet::setMatchRanges(const QList<OAIMatchRange> &match_ranges) {
    m_match_ranges = match_ranges;
    m_match_ranges_isSet = true;
}

bool OAISnippet::is_match_ranges_Set() const{
    return m_match_ranges_isSet;
}

bool OAISnippet::is_match_ranges_Valid() const{
    return m_match_ranges_isValid;
}

QString OAISnippet::getSnippet() const {
    return m_snippet;
}
void OAISnippet::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAISnippet::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAISnippet::is_snippet_Valid() const{
    return m_snippet_isValid;
}

bool OAISnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
