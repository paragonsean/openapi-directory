/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceCrowdingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceCrowdingConfig::OAISourceCrowdingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceCrowdingConfig::OAISourceCrowdingConfig() {
    this->initializeModel();
}

OAISourceCrowdingConfig::~OAISourceCrowdingConfig() {}

void OAISourceCrowdingConfig::initializeModel() {

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_num_suggestions_isSet = false;
    m_num_suggestions_isValid = false;
}

void OAISourceCrowdingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceCrowdingConfig::fromJsonObject(QJsonObject json) {

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("numResults")]);
    m_num_results_isSet = !json[QString("numResults")].isNull() && m_num_results_isValid;

    m_num_suggestions_isValid = ::OpenAPI::fromJsonValue(m_num_suggestions, json[QString("numSuggestions")]);
    m_num_suggestions_isSet = !json[QString("numSuggestions")].isNull() && m_num_suggestions_isValid;
}

QString OAISourceCrowdingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceCrowdingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_num_results_isSet) {
        obj.insert(QString("numResults"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_num_suggestions_isSet) {
        obj.insert(QString("numSuggestions"), ::OpenAPI::toJsonValue(m_num_suggestions));
    }
    return obj;
}

qint32 OAISourceCrowdingConfig::getNumResults() const {
    return m_num_results;
}
void OAISourceCrowdingConfig::setNumResults(const qint32 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAISourceCrowdingConfig::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAISourceCrowdingConfig::is_num_results_Valid() const{
    return m_num_results_isValid;
}

qint32 OAISourceCrowdingConfig::getNumSuggestions() const {
    return m_num_suggestions;
}
void OAISourceCrowdingConfig::setNumSuggestions(const qint32 &num_suggestions) {
    m_num_suggestions = num_suggestions;
    m_num_suggestions_isSet = true;
}

bool OAISourceCrowdingConfig::is_num_suggestions_Set() const{
    return m_num_suggestions_isSet;
}

bool OAISourceCrowdingConfig::is_num_suggestions_Valid() const{
    return m_num_suggestions_isValid;
}

bool OAISourceCrowdingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_suggestions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceCrowdingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
