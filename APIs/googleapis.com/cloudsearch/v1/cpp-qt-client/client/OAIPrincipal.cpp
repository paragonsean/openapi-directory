/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipal::OAIPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipal::OAIPrincipal() {
    this->initializeModel();
}

OAIPrincipal::~OAIPrincipal() {}

void OAIPrincipal::initializeModel() {

    m_group_resource_name_isSet = false;
    m_group_resource_name_isValid = false;

    m_gsuite_principal_isSet = false;
    m_gsuite_principal_isValid = false;

    m_user_resource_name_isSet = false;
    m_user_resource_name_isValid = false;
}

void OAIPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipal::fromJsonObject(QJsonObject json) {

    m_group_resource_name_isValid = ::OpenAPI::fromJsonValue(m_group_resource_name, json[QString("groupResourceName")]);
    m_group_resource_name_isSet = !json[QString("groupResourceName")].isNull() && m_group_resource_name_isValid;

    m_gsuite_principal_isValid = ::OpenAPI::fromJsonValue(m_gsuite_principal, json[QString("gsuitePrincipal")]);
    m_gsuite_principal_isSet = !json[QString("gsuitePrincipal")].isNull() && m_gsuite_principal_isValid;

    m_user_resource_name_isValid = ::OpenAPI::fromJsonValue(m_user_resource_name, json[QString("userResourceName")]);
    m_user_resource_name_isSet = !json[QString("userResourceName")].isNull() && m_user_resource_name_isValid;
}

QString OAIPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_group_resource_name_isSet) {
        obj.insert(QString("groupResourceName"), ::OpenAPI::toJsonValue(m_group_resource_name));
    }
    if (m_gsuite_principal.isSet()) {
        obj.insert(QString("gsuitePrincipal"), ::OpenAPI::toJsonValue(m_gsuite_principal));
    }
    if (m_user_resource_name_isSet) {
        obj.insert(QString("userResourceName"), ::OpenAPI::toJsonValue(m_user_resource_name));
    }
    return obj;
}

QString OAIPrincipal::getGroupResourceName() const {
    return m_group_resource_name;
}
void OAIPrincipal::setGroupResourceName(const QString &group_resource_name) {
    m_group_resource_name = group_resource_name;
    m_group_resource_name_isSet = true;
}

bool OAIPrincipal::is_group_resource_name_Set() const{
    return m_group_resource_name_isSet;
}

bool OAIPrincipal::is_group_resource_name_Valid() const{
    return m_group_resource_name_isValid;
}

OAIGSuitePrincipal OAIPrincipal::getGsuitePrincipal() const {
    return m_gsuite_principal;
}
void OAIPrincipal::setGsuitePrincipal(const OAIGSuitePrincipal &gsuite_principal) {
    m_gsuite_principal = gsuite_principal;
    m_gsuite_principal_isSet = true;
}

bool OAIPrincipal::is_gsuite_principal_Set() const{
    return m_gsuite_principal_isSet;
}

bool OAIPrincipal::is_gsuite_principal_Valid() const{
    return m_gsuite_principal_isValid;
}

QString OAIPrincipal::getUserResourceName() const {
    return m_user_resource_name;
}
void OAIPrincipal::setUserResourceName(const QString &user_resource_name) {
    m_user_resource_name = user_resource_name;
    m_user_resource_name_isSet = true;
}

bool OAIPrincipal::is_user_resource_name_Set() const{
    return m_user_resource_name_isSet;
}

bool OAIPrincipal::is_user_resource_name_Valid() const{
    return m_user_resource_name_isValid;
}

bool OAIPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsuite_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
