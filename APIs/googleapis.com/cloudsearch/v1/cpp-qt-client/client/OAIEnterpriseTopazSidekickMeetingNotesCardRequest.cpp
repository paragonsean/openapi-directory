/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickMeetingNotesCardRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickMeetingNotesCardRequest::OAIEnterpriseTopazSidekickMeetingNotesCardRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickMeetingNotesCardRequest::OAIEnterpriseTopazSidekickMeetingNotesCardRequest() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickMeetingNotesCardRequest::~OAIEnterpriseTopazSidekickMeetingNotesCardRequest() {}

void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::initializeModel() {

    m_can_create_for_isSet = false;
    m_can_create_for_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;
}

void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::fromJsonObject(QJsonObject json) {

    m_can_create_for_isValid = ::OpenAPI::fromJsonValue(m_can_create_for, json[QString("canCreateFor")]);
    m_can_create_for_isSet = !json[QString("canCreateFor")].isNull() && m_can_create_for_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;
}

QString OAIEnterpriseTopazSidekickMeetingNotesCardRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickMeetingNotesCardRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_can_create_for.size() > 0) {
        obj.insert(QString("canCreateFor"), ::OpenAPI::toJsonValue(m_can_create_for));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    return obj;
}

QList<QString> OAIEnterpriseTopazSidekickMeetingNotesCardRequest::getCanCreateFor() const {
    return m_can_create_for;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::setCanCreateFor(const QList<QString> &can_create_for) {
    m_can_create_for = can_create_for;
    m_can_create_for_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_can_create_for_Set() const{
    return m_can_create_for_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_can_create_for_Valid() const{
    return m_can_create_for_isValid;
}

OAIEnterpriseTopazSidekickMeetingNotesCardError OAIEnterpriseTopazSidekickMeetingNotesCardRequest::getError() const {
    return m_error;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::setError(const OAIEnterpriseTopazSidekickMeetingNotesCardError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_error_Set() const{
    return m_error_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_error_Valid() const{
    return m_error_isValid;
}

OAIEnterpriseTopazSidekickAgendaEntry OAIEnterpriseTopazSidekickMeetingNotesCardRequest::getEvent() const {
    return m_event;
}
void OAIEnterpriseTopazSidekickMeetingNotesCardRequest::setEvent(const OAIEnterpriseTopazSidekickAgendaEntry &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_event_Set() const{
    return m_event_isSet;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::is_event_Valid() const{
    return m_event_isValid;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_create_for.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickMeetingNotesCardRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
