/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingError::OAIProcessingError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingError::OAIProcessingError() {
    this->initializeModel();
}

OAIProcessingError::~OAIProcessingError() {}

void OAIProcessingError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_field_violations_isSet = false;
    m_field_violations_isValid = false;
}

void OAIProcessingError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_field_violations_isValid = ::OpenAPI::fromJsonValue(m_field_violations, json[QString("fieldViolations")]);
    m_field_violations_isSet = !json[QString("fieldViolations")].isNull() && m_field_violations_isValid;
}

QString OAIProcessingError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_field_violations.size() > 0) {
        obj.insert(QString("fieldViolations"), ::OpenAPI::toJsonValue(m_field_violations));
    }
    return obj;
}

QString OAIProcessingError::getCode() const {
    return m_code;
}
void OAIProcessingError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProcessingError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProcessingError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIProcessingError::getErrorMessage() const {
    return m_error_message;
}
void OAIProcessingError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIProcessingError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIProcessingError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<OAIFieldViolation> OAIProcessingError::getFieldViolations() const {
    return m_field_violations;
}
void OAIProcessingError::setFieldViolations(const QList<OAIFieldViolation> &field_violations) {
    m_field_violations = field_violations;
    m_field_violations_isSet = true;
}

bool OAIProcessingError::is_field_violations_Set() const{
    return m_field_violations_isSet;
}

bool OAIProcessingError::is_field_violations_Valid() const{
    return m_field_violations_isValid;
}

bool OAIProcessingError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
