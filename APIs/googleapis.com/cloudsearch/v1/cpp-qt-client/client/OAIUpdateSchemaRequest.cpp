/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchemaRequest::OAIUpdateSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchemaRequest::OAIUpdateSchemaRequest() {
    this->initializeModel();
}

OAIUpdateSchemaRequest::~OAIUpdateSchemaRequest() {}

void OAIUpdateSchemaRequest::initializeModel() {

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIUpdateSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchemaRequest::fromJsonObject(QJsonObject json) {

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIUpdateSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIDebugOptions OAIUpdateSchemaRequest::getDebugOptions() const {
    return m_debug_options;
}
void OAIUpdateSchemaRequest::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAIUpdateSchemaRequest::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAIUpdateSchemaRequest::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

OAISchema OAIUpdateSchemaRequest::getSchema() const {
    return m_schema;
}
void OAIUpdateSchemaRequest::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIUpdateSchemaRequest::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIUpdateSchemaRequest::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIUpdateSchemaRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIUpdateSchemaRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIUpdateSchemaRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIUpdateSchemaRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIUpdateSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
