/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInterpretationOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInterpretationOptions::OAIQueryInterpretationOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInterpretationOptions::OAIQueryInterpretationOptions() {
    this->initializeModel();
}

OAIQueryInterpretationOptions::~OAIQueryInterpretationOptions() {}

void OAIQueryInterpretationOptions::initializeModel() {

    m_disable_nl_interpretation_isSet = false;
    m_disable_nl_interpretation_isValid = false;

    m_disable_supplemental_results_isSet = false;
    m_disable_supplemental_results_isValid = false;

    m_enable_verbatim_mode_isSet = false;
    m_enable_verbatim_mode_isValid = false;
}

void OAIQueryInterpretationOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInterpretationOptions::fromJsonObject(QJsonObject json) {

    m_disable_nl_interpretation_isValid = ::OpenAPI::fromJsonValue(m_disable_nl_interpretation, json[QString("disableNlInterpretation")]);
    m_disable_nl_interpretation_isSet = !json[QString("disableNlInterpretation")].isNull() && m_disable_nl_interpretation_isValid;

    m_disable_supplemental_results_isValid = ::OpenAPI::fromJsonValue(m_disable_supplemental_results, json[QString("disableSupplementalResults")]);
    m_disable_supplemental_results_isSet = !json[QString("disableSupplementalResults")].isNull() && m_disable_supplemental_results_isValid;

    m_enable_verbatim_mode_isValid = ::OpenAPI::fromJsonValue(m_enable_verbatim_mode, json[QString("enableVerbatimMode")]);
    m_enable_verbatim_mode_isSet = !json[QString("enableVerbatimMode")].isNull() && m_enable_verbatim_mode_isValid;
}

QString OAIQueryInterpretationOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInterpretationOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_nl_interpretation_isSet) {
        obj.insert(QString("disableNlInterpretation"), ::OpenAPI::toJsonValue(m_disable_nl_interpretation));
    }
    if (m_disable_supplemental_results_isSet) {
        obj.insert(QString("disableSupplementalResults"), ::OpenAPI::toJsonValue(m_disable_supplemental_results));
    }
    if (m_enable_verbatim_mode_isSet) {
        obj.insert(QString("enableVerbatimMode"), ::OpenAPI::toJsonValue(m_enable_verbatim_mode));
    }
    return obj;
}

bool OAIQueryInterpretationOptions::isDisableNlInterpretation() const {
    return m_disable_nl_interpretation;
}
void OAIQueryInterpretationOptions::setDisableNlInterpretation(const bool &disable_nl_interpretation) {
    m_disable_nl_interpretation = disable_nl_interpretation;
    m_disable_nl_interpretation_isSet = true;
}

bool OAIQueryInterpretationOptions::is_disable_nl_interpretation_Set() const{
    return m_disable_nl_interpretation_isSet;
}

bool OAIQueryInterpretationOptions::is_disable_nl_interpretation_Valid() const{
    return m_disable_nl_interpretation_isValid;
}

bool OAIQueryInterpretationOptions::isDisableSupplementalResults() const {
    return m_disable_supplemental_results;
}
void OAIQueryInterpretationOptions::setDisableSupplementalResults(const bool &disable_supplemental_results) {
    m_disable_supplemental_results = disable_supplemental_results;
    m_disable_supplemental_results_isSet = true;
}

bool OAIQueryInterpretationOptions::is_disable_supplemental_results_Set() const{
    return m_disable_supplemental_results_isSet;
}

bool OAIQueryInterpretationOptions::is_disable_supplemental_results_Valid() const{
    return m_disable_supplemental_results_isValid;
}

bool OAIQueryInterpretationOptions::isEnableVerbatimMode() const {
    return m_enable_verbatim_mode;
}
void OAIQueryInterpretationOptions::setEnableVerbatimMode(const bool &enable_verbatim_mode) {
    m_enable_verbatim_mode = enable_verbatim_mode;
    m_enable_verbatim_mode_isSet = true;
}

bool OAIQueryInterpretationOptions::is_enable_verbatim_mode_Set() const{
    return m_enable_verbatim_mode_isSet;
}

bool OAIQueryInterpretationOptions::is_enable_verbatim_mode_Valid() const{
    return m_enable_verbatim_mode_isValid;
}

bool OAIQueryInterpretationOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_nl_interpretation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_supplemental_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_verbatim_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInterpretationOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
