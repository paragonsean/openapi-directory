/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnmappedIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnmappedIdentity::OAIUnmappedIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnmappedIdentity::OAIUnmappedIdentity() {
    this->initializeModel();
}

OAIUnmappedIdentity::~OAIUnmappedIdentity() {}

void OAIUnmappedIdentity::initializeModel() {

    m_external_identity_isSet = false;
    m_external_identity_isValid = false;

    m_resolution_status_code_isSet = false;
    m_resolution_status_code_isValid = false;
}

void OAIUnmappedIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnmappedIdentity::fromJsonObject(QJsonObject json) {

    m_external_identity_isValid = ::OpenAPI::fromJsonValue(m_external_identity, json[QString("externalIdentity")]);
    m_external_identity_isSet = !json[QString("externalIdentity")].isNull() && m_external_identity_isValid;

    m_resolution_status_code_isValid = ::OpenAPI::fromJsonValue(m_resolution_status_code, json[QString("resolutionStatusCode")]);
    m_resolution_status_code_isSet = !json[QString("resolutionStatusCode")].isNull() && m_resolution_status_code_isValid;
}

QString OAIUnmappedIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnmappedIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_external_identity.isSet()) {
        obj.insert(QString("externalIdentity"), ::OpenAPI::toJsonValue(m_external_identity));
    }
    if (m_resolution_status_code_isSet) {
        obj.insert(QString("resolutionStatusCode"), ::OpenAPI::toJsonValue(m_resolution_status_code));
    }
    return obj;
}

OAIPrincipal OAIUnmappedIdentity::getExternalIdentity() const {
    return m_external_identity;
}
void OAIUnmappedIdentity::setExternalIdentity(const OAIPrincipal &external_identity) {
    m_external_identity = external_identity;
    m_external_identity_isSet = true;
}

bool OAIUnmappedIdentity::is_external_identity_Set() const{
    return m_external_identity_isSet;
}

bool OAIUnmappedIdentity::is_external_identity_Valid() const{
    return m_external_identity_isValid;
}

QString OAIUnmappedIdentity::getResolutionStatusCode() const {
    return m_resolution_status_code;
}
void OAIUnmappedIdentity::setResolutionStatusCode(const QString &resolution_status_code) {
    m_resolution_status_code = resolution_status_code;
    m_resolution_status_code_isSet = true;
}

bool OAIUnmappedIdentity::is_resolution_status_code_Set() const{
    return m_resolution_status_code_isSet;
}

bool OAIUnmappedIdentity::is_resolution_status_code_Valid() const{
    return m_resolution_status_code_isValid;
}

bool OAIUnmappedIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnmappedIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
