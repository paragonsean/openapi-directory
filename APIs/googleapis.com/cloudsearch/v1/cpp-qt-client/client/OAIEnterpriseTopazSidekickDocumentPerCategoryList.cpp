/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickDocumentPerCategoryList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickDocumentPerCategoryList::OAIEnterpriseTopazSidekickDocumentPerCategoryList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList::OAIEnterpriseTopazSidekickDocumentPerCategoryList() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList::~OAIEnterpriseTopazSidekickDocumentPerCategoryList() {}

void OAIEnterpriseTopazSidekickDocumentPerCategoryList::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_help_message_isSet = false;
    m_help_message_isValid = false;

    m_list_type_isSet = false;
    m_list_type_isValid = false;

    m_list_type_description_isSet = false;
    m_list_type_description_isValid = false;

    m_response_message_isSet = false;
    m_response_message_isValid = false;
}

void OAIEnterpriseTopazSidekickDocumentPerCategoryList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickDocumentPerCategoryList::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_help_message_isValid = ::OpenAPI::fromJsonValue(m_help_message, json[QString("helpMessage")]);
    m_help_message_isSet = !json[QString("helpMessage")].isNull() && m_help_message_isValid;

    m_list_type_isValid = ::OpenAPI::fromJsonValue(m_list_type, json[QString("listType")]);
    m_list_type_isSet = !json[QString("listType")].isNull() && m_list_type_isValid;

    m_list_type_description_isValid = ::OpenAPI::fromJsonValue(m_list_type_description, json[QString("listTypeDescription")]);
    m_list_type_description_isSet = !json[QString("listTypeDescription")].isNull() && m_list_type_description_isValid;

    m_response_message_isValid = ::OpenAPI::fromJsonValue(m_response_message, json[QString("responseMessage")]);
    m_response_message_isSet = !json[QString("responseMessage")].isNull() && m_response_message_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickDocumentPerCategoryList::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_help_message_isSet) {
        obj.insert(QString("helpMessage"), ::OpenAPI::toJsonValue(m_help_message));
    }
    if (m_list_type_isSet) {
        obj.insert(QString("listType"), ::OpenAPI::toJsonValue(m_list_type));
    }
    if (m_list_type_description_isSet) {
        obj.insert(QString("listTypeDescription"), ::OpenAPI::toJsonValue(m_list_type_description));
    }
    if (m_response_message_isSet) {
        obj.insert(QString("responseMessage"), ::OpenAPI::toJsonValue(m_response_message));
    }
    return obj;
}

QList<OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> OAIEnterpriseTopazSidekickDocumentPerCategoryList::getDocuments() const {
    return m_documents;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryList::setDocuments(const QList<OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryList::getHelpMessage() const {
    return m_help_message;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryList::setHelpMessage(const QString &help_message) {
    m_help_message = help_message;
    m_help_message_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_help_message_Set() const{
    return m_help_message_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_help_message_Valid() const{
    return m_help_message_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryList::getListType() const {
    return m_list_type;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryList::setListType(const QString &list_type) {
    m_list_type = list_type;
    m_list_type_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_list_type_Set() const{
    return m_list_type_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_list_type_Valid() const{
    return m_list_type_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryList::getListTypeDescription() const {
    return m_list_type_description;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryList::setListTypeDescription(const QString &list_type_description) {
    m_list_type_description = list_type_description;
    m_list_type_description_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_list_type_description_Set() const{
    return m_list_type_description_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_list_type_description_Valid() const{
    return m_list_type_description_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryList::getResponseMessage() const {
    return m_response_message;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryList::setResponseMessage(const QString &response_message) {
    m_response_message = response_message;
    m_response_message_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_response_message_Set() const{
    return m_response_message_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::is_response_message_Valid() const{
    return m_response_message_isValid;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
