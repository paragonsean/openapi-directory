/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickFindMeetingTimeCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::OAIEnterpriseTopazSidekickFindMeetingTimeCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::OAIEnterpriseTopazSidekickFindMeetingTimeCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::~OAIEnterpriseTopazSidekickFindMeetingTimeCardProto() {}

void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::initializeModel() {

    m_common_available_time_slots_isSet = false;
    m_common_available_time_slots_isValid = false;

    m_invitees_isSet = false;
    m_invitees_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;

    m_scheduled_meeting_isSet = false;
    m_scheduled_meeting_isValid = false;

    m_skipped_invitees_isSet = false;
    m_skipped_invitees_isValid = false;

    m_time_boundaries_isSet = false;
    m_time_boundaries_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;
}

void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::fromJsonObject(QJsonObject json) {

    m_common_available_time_slots_isValid = ::OpenAPI::fromJsonValue(m_common_available_time_slots, json[QString("commonAvailableTimeSlots")]);
    m_common_available_time_slots_isSet = !json[QString("commonAvailableTimeSlots")].isNull() && m_common_available_time_slots_isValid;

    m_invitees_isValid = ::OpenAPI::fromJsonValue(m_invitees, json[QString("invitees")]);
    m_invitees_isSet = !json[QString("invitees")].isNull() && m_invitees_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("requester")]);
    m_requester_isSet = !json[QString("requester")].isNull() && m_requester_isValid;

    m_scheduled_meeting_isValid = ::OpenAPI::fromJsonValue(m_scheduled_meeting, json[QString("scheduledMeeting")]);
    m_scheduled_meeting_isSet = !json[QString("scheduledMeeting")].isNull() && m_scheduled_meeting_isValid;

    m_skipped_invitees_isValid = ::OpenAPI::fromJsonValue(m_skipped_invitees, json[QString("skippedInvitees")]);
    m_skipped_invitees_isSet = !json[QString("skippedInvitees")].isNull() && m_skipped_invitees_isValid;

    m_time_boundaries_isValid = ::OpenAPI::fromJsonValue(m_time_boundaries, json[QString("timeBoundaries")]);
    m_time_boundaries_isSet = !json[QString("timeBoundaries")].isNull() && m_time_boundaries_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;
}

QString OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_common_available_time_slots.size() > 0) {
        obj.insert(QString("commonAvailableTimeSlots"), ::OpenAPI::toJsonValue(m_common_available_time_slots));
    }
    if (m_invitees.size() > 0) {
        obj.insert(QString("invitees"), ::OpenAPI::toJsonValue(m_invitees));
    }
    if (m_requester.isSet()) {
        obj.insert(QString("requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    if (m_scheduled_meeting.isSet()) {
        obj.insert(QString("scheduledMeeting"), ::OpenAPI::toJsonValue(m_scheduled_meeting));
    }
    if (m_skipped_invitees.size() > 0) {
        obj.insert(QString("skippedInvitees"), ::OpenAPI::toJsonValue(m_skipped_invitees));
    }
    if (m_time_boundaries.isSet()) {
        obj.insert(QString("timeBoundaries"), ::OpenAPI::toJsonValue(m_time_boundaries));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    return obj;
}

QList<OAIEnterpriseTopazSidekickTimeSlot> OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getCommonAvailableTimeSlots() const {
    return m_common_available_time_slots;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setCommonAvailableTimeSlots(const QList<OAIEnterpriseTopazSidekickTimeSlot> &common_available_time_slots) {
    m_common_available_time_slots = common_available_time_slots;
    m_common_available_time_slots_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_common_available_time_slots_Set() const{
    return m_common_available_time_slots_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_common_available_time_slots_Valid() const{
    return m_common_available_time_slots_isValid;
}

QList<OAIEnterpriseTopazSidekickPerson> OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getInvitees() const {
    return m_invitees;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setInvitees(const QList<OAIEnterpriseTopazSidekickPerson> &invitees) {
    m_invitees = invitees;
    m_invitees_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_invitees_Set() const{
    return m_invitees_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_invitees_Valid() const{
    return m_invitees_isValid;
}

OAIEnterpriseTopazSidekickPerson OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getRequester() const {
    return m_requester;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setRequester(const OAIEnterpriseTopazSidekickPerson &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_requester_Valid() const{
    return m_requester_isValid;
}

OAIEnterpriseTopazSidekickScheduledMeeting OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getScheduledMeeting() const {
    return m_scheduled_meeting;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setScheduledMeeting(const OAIEnterpriseTopazSidekickScheduledMeeting &scheduled_meeting) {
    m_scheduled_meeting = scheduled_meeting;
    m_scheduled_meeting_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_scheduled_meeting_Set() const{
    return m_scheduled_meeting_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_scheduled_meeting_Valid() const{
    return m_scheduled_meeting_isValid;
}

QList<OAIEnterpriseTopazSidekickPerson> OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getSkippedInvitees() const {
    return m_skipped_invitees;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setSkippedInvitees(const QList<OAIEnterpriseTopazSidekickPerson> &skipped_invitees) {
    m_skipped_invitees = skipped_invitees;
    m_skipped_invitees_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_skipped_invitees_Set() const{
    return m_skipped_invitees_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_skipped_invitees_Valid() const{
    return m_skipped_invitees_isValid;
}

OAIEnterpriseTopazSidekickTimeSlot OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getTimeBoundaries() const {
    return m_time_boundaries;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setTimeBoundaries(const OAIEnterpriseTopazSidekickTimeSlot &time_boundaries) {
    m_time_boundaries = time_boundaries;
    m_time_boundaries_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_time_boundaries_Set() const{
    return m_time_boundaries_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_time_boundaries_Valid() const{
    return m_time_boundaries_isValid;
}

QString OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::getTimezoneId() const {
    return m_timezone_id;
}
void OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_available_time_slots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_meeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_invitees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_boundaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickFindMeetingTimeCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
