/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickConflictingEventsCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickConflictingEventsCardProto::OAIEnterpriseTopazSidekickConflictingEventsCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickConflictingEventsCardProto::OAIEnterpriseTopazSidekickConflictingEventsCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickConflictingEventsCardProto::~OAIEnterpriseTopazSidekickConflictingEventsCardProto() {}

void OAIEnterpriseTopazSidekickConflictingEventsCardProto::initializeModel() {

    m_conflicting_event_isSet = false;
    m_conflicting_event_isValid = false;

    m_main_event_isSet = false;
    m_main_event_isValid = false;
}

void OAIEnterpriseTopazSidekickConflictingEventsCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickConflictingEventsCardProto::fromJsonObject(QJsonObject json) {

    m_conflicting_event_isValid = ::OpenAPI::fromJsonValue(m_conflicting_event, json[QString("conflictingEvent")]);
    m_conflicting_event_isSet = !json[QString("conflictingEvent")].isNull() && m_conflicting_event_isValid;

    m_main_event_isValid = ::OpenAPI::fromJsonValue(m_main_event, json[QString("mainEvent")]);
    m_main_event_isSet = !json[QString("mainEvent")].isNull() && m_main_event_isValid;
}

QString OAIEnterpriseTopazSidekickConflictingEventsCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickConflictingEventsCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_conflicting_event.size() > 0) {
        obj.insert(QString("conflictingEvent"), ::OpenAPI::toJsonValue(m_conflicting_event));
    }
    if (m_main_event.isSet()) {
        obj.insert(QString("mainEvent"), ::OpenAPI::toJsonValue(m_main_event));
    }
    return obj;
}

QList<OAIEnterpriseTopazSidekickAgendaEntry> OAIEnterpriseTopazSidekickConflictingEventsCardProto::getConflictingEvent() const {
    return m_conflicting_event;
}
void OAIEnterpriseTopazSidekickConflictingEventsCardProto::setConflictingEvent(const QList<OAIEnterpriseTopazSidekickAgendaEntry> &conflicting_event) {
    m_conflicting_event = conflicting_event;
    m_conflicting_event_isSet = true;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::is_conflicting_event_Set() const{
    return m_conflicting_event_isSet;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::is_conflicting_event_Valid() const{
    return m_conflicting_event_isValid;
}

OAIEnterpriseTopazSidekickAgendaEntry OAIEnterpriseTopazSidekickConflictingEventsCardProto::getMainEvent() const {
    return m_main_event;
}
void OAIEnterpriseTopazSidekickConflictingEventsCardProto::setMainEvent(const OAIEnterpriseTopazSidekickAgendaEntry &main_event) {
    m_main_event = main_event;
    m_main_event_isSet = true;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::is_main_event_Set() const{
    return m_main_event_isSet;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::is_main_event_Valid() const{
    return m_main_event_isValid;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflicting_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_event.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickConflictingEventsCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
