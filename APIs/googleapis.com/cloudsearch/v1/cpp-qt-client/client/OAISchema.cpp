/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema::OAISchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema::OAISchema() {
    this->initializeModel();
}

OAISchema::~OAISchema() {}

void OAISchema::initializeModel() {

    m_object_definitions_isSet = false;
    m_object_definitions_isValid = false;

    m_operation_ids_isSet = false;
    m_operation_ids_isValid = false;
}

void OAISchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema::fromJsonObject(QJsonObject json) {

    m_object_definitions_isValid = ::OpenAPI::fromJsonValue(m_object_definitions, json[QString("objectDefinitions")]);
    m_object_definitions_isSet = !json[QString("objectDefinitions")].isNull() && m_object_definitions_isValid;

    m_operation_ids_isValid = ::OpenAPI::fromJsonValue(m_operation_ids, json[QString("operationIds")]);
    m_operation_ids_isSet = !json[QString("operationIds")].isNull() && m_operation_ids_isValid;
}

QString OAISchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema::asJsonObject() const {
    QJsonObject obj;
    if (m_object_definitions.size() > 0) {
        obj.insert(QString("objectDefinitions"), ::OpenAPI::toJsonValue(m_object_definitions));
    }
    if (m_operation_ids.size() > 0) {
        obj.insert(QString("operationIds"), ::OpenAPI::toJsonValue(m_operation_ids));
    }
    return obj;
}

QList<OAIObjectDefinition> OAISchema::getObjectDefinitions() const {
    return m_object_definitions;
}
void OAISchema::setObjectDefinitions(const QList<OAIObjectDefinition> &object_definitions) {
    m_object_definitions = object_definitions;
    m_object_definitions_isSet = true;
}

bool OAISchema::is_object_definitions_Set() const{
    return m_object_definitions_isSet;
}

bool OAISchema::is_object_definitions_Valid() const{
    return m_object_definitions_isValid;
}

QList<QString> OAISchema::getOperationIds() const {
    return m_operation_ids;
}
void OAISchema::setOperationIds(const QList<QString> &operation_ids) {
    m_operation_ids = operation_ids;
    m_operation_ids_isSet = true;
}

bool OAISchema::is_operation_ids_Set() const{
    return m_operation_ids_isSet;
}

bool OAISchema::is_operation_ids_Valid() const{
    return m_operation_ids_isValid;
}

bool OAISchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
