/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickAgendaGroupCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickAgendaGroupCardProto::OAIEnterpriseTopazSidekickAgendaGroupCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickAgendaGroupCardProto::OAIEnterpriseTopazSidekickAgendaGroupCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickAgendaGroupCardProto::~OAIEnterpriseTopazSidekickAgendaGroupCardProto() {}

void OAIEnterpriseTopazSidekickAgendaGroupCardProto::initializeModel() {

    m_agenda_item_isSet = false;
    m_agenda_item_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_current_agenda_item_isSet = false;
    m_current_agenda_item_isValid = false;
}

void OAIEnterpriseTopazSidekickAgendaGroupCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickAgendaGroupCardProto::fromJsonObject(QJsonObject json) {

    m_agenda_item_isValid = ::OpenAPI::fromJsonValue(m_agenda_item, json[QString("agendaItem")]);
    m_agenda_item_isSet = !json[QString("agendaItem")].isNull() && m_agenda_item_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_current_agenda_item_isValid = ::OpenAPI::fromJsonValue(m_current_agenda_item, json[QString("currentAgendaItem")]);
    m_current_agenda_item_isSet = !json[QString("currentAgendaItem")].isNull() && m_current_agenda_item_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaGroupCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickAgendaGroupCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_agenda_item.size() > 0) {
        obj.insert(QString("agendaItem"), ::OpenAPI::toJsonValue(m_agenda_item));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_current_agenda_item.isSet()) {
        obj.insert(QString("currentAgendaItem"), ::OpenAPI::toJsonValue(m_current_agenda_item));
    }
    return obj;
}

QList<OAIEnterpriseTopazSidekickAgendaItem> OAIEnterpriseTopazSidekickAgendaGroupCardProto::getAgendaItem() const {
    return m_agenda_item;
}
void OAIEnterpriseTopazSidekickAgendaGroupCardProto::setAgendaItem(const QList<OAIEnterpriseTopazSidekickAgendaItem> &agenda_item) {
    m_agenda_item = agenda_item;
    m_agenda_item_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_agenda_item_Set() const{
    return m_agenda_item_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_agenda_item_Valid() const{
    return m_agenda_item_isValid;
}

OAIEnterpriseTopazSidekickAgendaGroupCardProtoContext OAIEnterpriseTopazSidekickAgendaGroupCardProto::getContext() const {
    return m_context;
}
void OAIEnterpriseTopazSidekickAgendaGroupCardProto::setContext(const OAIEnterpriseTopazSidekickAgendaGroupCardProtoContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_context_Set() const{
    return m_context_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_context_Valid() const{
    return m_context_isValid;
}

OAIEnterpriseTopazSidekickAgendaItem OAIEnterpriseTopazSidekickAgendaGroupCardProto::getCurrentAgendaItem() const {
    return m_current_agenda_item;
}
void OAIEnterpriseTopazSidekickAgendaGroupCardProto::setCurrentAgendaItem(const OAIEnterpriseTopazSidekickAgendaItem &current_agenda_item) {
    m_current_agenda_item = current_agenda_item;
    m_current_agenda_item_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_current_agenda_item_Set() const{
    return m_current_agenda_item_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::is_current_agenda_item_Valid() const{
    return m_current_agenda_item_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agenda_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_agenda_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickAgendaGroupCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
