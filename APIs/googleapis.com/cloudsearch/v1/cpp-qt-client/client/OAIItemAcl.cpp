/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemAcl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemAcl::OAIItemAcl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemAcl::OAIItemAcl() {
    this->initializeModel();
}

OAIItemAcl::~OAIItemAcl() {}

void OAIItemAcl::initializeModel() {

    m_acl_inheritance_type_isSet = false;
    m_acl_inheritance_type_isValid = false;

    m_denied_readers_isSet = false;
    m_denied_readers_isValid = false;

    m_inherit_acl_from_isSet = false;
    m_inherit_acl_from_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_readers_isSet = false;
    m_readers_isValid = false;
}

void OAIItemAcl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemAcl::fromJsonObject(QJsonObject json) {

    m_acl_inheritance_type_isValid = ::OpenAPI::fromJsonValue(m_acl_inheritance_type, json[QString("aclInheritanceType")]);
    m_acl_inheritance_type_isSet = !json[QString("aclInheritanceType")].isNull() && m_acl_inheritance_type_isValid;

    m_denied_readers_isValid = ::OpenAPI::fromJsonValue(m_denied_readers, json[QString("deniedReaders")]);
    m_denied_readers_isSet = !json[QString("deniedReaders")].isNull() && m_denied_readers_isValid;

    m_inherit_acl_from_isValid = ::OpenAPI::fromJsonValue(m_inherit_acl_from, json[QString("inheritAclFrom")]);
    m_inherit_acl_from_isSet = !json[QString("inheritAclFrom")].isNull() && m_inherit_acl_from_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_readers_isValid = ::OpenAPI::fromJsonValue(m_readers, json[QString("readers")]);
    m_readers_isSet = !json[QString("readers")].isNull() && m_readers_isValid;
}

QString OAIItemAcl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemAcl::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_inheritance_type_isSet) {
        obj.insert(QString("aclInheritanceType"), ::OpenAPI::toJsonValue(m_acl_inheritance_type));
    }
    if (m_denied_readers.size() > 0) {
        obj.insert(QString("deniedReaders"), ::OpenAPI::toJsonValue(m_denied_readers));
    }
    if (m_inherit_acl_from_isSet) {
        obj.insert(QString("inheritAclFrom"), ::OpenAPI::toJsonValue(m_inherit_acl_from));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_readers.size() > 0) {
        obj.insert(QString("readers"), ::OpenAPI::toJsonValue(m_readers));
    }
    return obj;
}

QString OAIItemAcl::getAclInheritanceType() const {
    return m_acl_inheritance_type;
}
void OAIItemAcl::setAclInheritanceType(const QString &acl_inheritance_type) {
    m_acl_inheritance_type = acl_inheritance_type;
    m_acl_inheritance_type_isSet = true;
}

bool OAIItemAcl::is_acl_inheritance_type_Set() const{
    return m_acl_inheritance_type_isSet;
}

bool OAIItemAcl::is_acl_inheritance_type_Valid() const{
    return m_acl_inheritance_type_isValid;
}

QList<OAIPrincipal> OAIItemAcl::getDeniedReaders() const {
    return m_denied_readers;
}
void OAIItemAcl::setDeniedReaders(const QList<OAIPrincipal> &denied_readers) {
    m_denied_readers = denied_readers;
    m_denied_readers_isSet = true;
}

bool OAIItemAcl::is_denied_readers_Set() const{
    return m_denied_readers_isSet;
}

bool OAIItemAcl::is_denied_readers_Valid() const{
    return m_denied_readers_isValid;
}

QString OAIItemAcl::getInheritAclFrom() const {
    return m_inherit_acl_from;
}
void OAIItemAcl::setInheritAclFrom(const QString &inherit_acl_from) {
    m_inherit_acl_from = inherit_acl_from;
    m_inherit_acl_from_isSet = true;
}

bool OAIItemAcl::is_inherit_acl_from_Set() const{
    return m_inherit_acl_from_isSet;
}

bool OAIItemAcl::is_inherit_acl_from_Valid() const{
    return m_inherit_acl_from_isValid;
}

QList<OAIPrincipal> OAIItemAcl::getOwners() const {
    return m_owners;
}
void OAIItemAcl::setOwners(const QList<OAIPrincipal> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIItemAcl::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIItemAcl::is_owners_Valid() const{
    return m_owners_isValid;
}

QList<OAIPrincipal> OAIItemAcl::getReaders() const {
    return m_readers;
}
void OAIItemAcl::setReaders(const QList<OAIPrincipal> &readers) {
    m_readers = readers;
    m_readers_isSet = true;
}

bool OAIItemAcl::is_readers_Set() const{
    return m_readers_isSet;
}

bool OAIItemAcl::is_readers_Valid() const{
    return m_readers_isValid;
}

bool OAIItemAcl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_inheritance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denied_readers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_acl_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_readers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemAcl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
