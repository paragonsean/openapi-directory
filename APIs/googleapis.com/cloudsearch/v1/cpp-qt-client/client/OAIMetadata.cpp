/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("displayOptions")]);
    m_display_options_isSet = !json[QString("displayOptions")].isNull() && m_display_options_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("displayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIResultDisplayMetadata OAIMetadata::getDisplayOptions() const {
    return m_display_options;
}
void OAIMetadata::setDisplayOptions(const OAIResultDisplayMetadata &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIMetadata::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIMetadata::is_display_options_Valid() const{
    return m_display_options_isValid;
}

QList<OAINamedProperty> OAIMetadata::getFields() const {
    return m_fields;
}
void OAIMetadata::setFields(const QList<OAINamedProperty> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIMetadata::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIMetadata::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIMetadata::getMimeType() const {
    return m_mime_type;
}
void OAIMetadata::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMetadata::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMetadata::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIMetadata::getObjectType() const {
    return m_object_type;
}
void OAIMetadata::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIMetadata::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIMetadata::is_object_type_Valid() const{
    return m_object_type_isValid;
}

OAIPerson OAIMetadata::getOwner() const {
    return m_owner;
}
void OAIMetadata::setOwner(const OAIPerson &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIMetadata::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIMetadata::is_owner_Valid() const{
    return m_owner_isValid;
}

OAISource OAIMetadata::getSource() const {
    return m_source;
}
void OAIMetadata::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMetadata::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMetadata::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIMetadata::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIMetadata::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIMetadata::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIMetadata::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
