/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushItemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushItemRequest::OAIPushItemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushItemRequest::OAIPushItemRequest() {
    this->initializeModel();
}

OAIPushItemRequest::~OAIPushItemRequest() {}

void OAIPushItemRequest::initializeModel() {

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;
}

void OAIPushItemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushItemRequest::fromJsonObject(QJsonObject json) {

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;
}

QString OAIPushItemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushItemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    return obj;
}

QString OAIPushItemRequest::getConnectorName() const {
    return m_connector_name;
}
void OAIPushItemRequest::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIPushItemRequest::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIPushItemRequest::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

OAIDebugOptions OAIPushItemRequest::getDebugOptions() const {
    return m_debug_options;
}
void OAIPushItemRequest::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAIPushItemRequest::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAIPushItemRequest::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

OAIPushItem OAIPushItemRequest::getItem() const {
    return m_item;
}
void OAIPushItemRequest::setItem(const OAIPushItem &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPushItemRequest::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPushItemRequest::is_item_Valid() const{
    return m_item_isValid;
}

bool OAIPushItemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushItemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
