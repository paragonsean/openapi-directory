/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemMetadata::OAIItemMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemMetadata::OAIItemMetadata() {
    this->initializeModel();
}

OAIItemMetadata::~OAIItemMetadata() {}

void OAIItemMetadata::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_content_language_isSet = false;
    m_content_language_isValid = false;

    m_context_attributes_isSet = false;
    m_context_attributes_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_search_quality_metadata_isSet = false;
    m_search_quality_metadata_isValid = false;

    m_source_repository_url_isSet = false;
    m_source_repository_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIItemMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemMetadata::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_content_language_isValid = ::OpenAPI::fromJsonValue(m_content_language, json[QString("contentLanguage")]);
    m_content_language_isSet = !json[QString("contentLanguage")].isNull() && m_content_language_isValid;

    m_context_attributes_isValid = ::OpenAPI::fromJsonValue(m_context_attributes, json[QString("contextAttributes")]);
    m_context_attributes_isSet = !json[QString("contextAttributes")].isNull() && m_context_attributes_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_search_quality_metadata_isValid = ::OpenAPI::fromJsonValue(m_search_quality_metadata, json[QString("searchQualityMetadata")]);
    m_search_quality_metadata_isSet = !json[QString("searchQualityMetadata")].isNull() && m_search_quality_metadata_isValid;

    m_source_repository_url_isValid = ::OpenAPI::fromJsonValue(m_source_repository_url, json[QString("sourceRepositoryUrl")]);
    m_source_repository_url_isSet = !json[QString("sourceRepositoryUrl")].isNull() && m_source_repository_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIItemMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_content_language_isSet) {
        obj.insert(QString("contentLanguage"), ::OpenAPI::toJsonValue(m_content_language));
    }
    if (m_context_attributes.size() > 0) {
        obj.insert(QString("contextAttributes"), ::OpenAPI::toJsonValue(m_context_attributes));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_interactions.size() > 0) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_search_quality_metadata.isSet()) {
        obj.insert(QString("searchQualityMetadata"), ::OpenAPI::toJsonValue(m_search_quality_metadata));
    }
    if (m_source_repository_url_isSet) {
        obj.insert(QString("sourceRepositoryUrl"), ::OpenAPI::toJsonValue(m_source_repository_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIItemMetadata::getContainerName() const {
    return m_container_name;
}
void OAIItemMetadata::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIItemMetadata::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIItemMetadata::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIItemMetadata::getContentLanguage() const {
    return m_content_language;
}
void OAIItemMetadata::setContentLanguage(const QString &content_language) {
    m_content_language = content_language;
    m_content_language_isSet = true;
}

bool OAIItemMetadata::is_content_language_Set() const{
    return m_content_language_isSet;
}

bool OAIItemMetadata::is_content_language_Valid() const{
    return m_content_language_isValid;
}

QList<OAIContextAttribute> OAIItemMetadata::getContextAttributes() const {
    return m_context_attributes;
}
void OAIItemMetadata::setContextAttributes(const QList<OAIContextAttribute> &context_attributes) {
    m_context_attributes = context_attributes;
    m_context_attributes_isSet = true;
}

bool OAIItemMetadata::is_context_attributes_Set() const{
    return m_context_attributes_isSet;
}

bool OAIItemMetadata::is_context_attributes_Valid() const{
    return m_context_attributes_isValid;
}

QString OAIItemMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIItemMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIItemMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIItemMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIItemMetadata::getHash() const {
    return m_hash;
}
void OAIItemMetadata::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIItemMetadata::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIItemMetadata::is_hash_Valid() const{
    return m_hash_isValid;
}

QList<OAIInteraction> OAIItemMetadata::getInteractions() const {
    return m_interactions;
}
void OAIItemMetadata::setInteractions(const QList<OAIInteraction> &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIItemMetadata::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIItemMetadata::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QList<QString> OAIItemMetadata::getKeywords() const {
    return m_keywords;
}
void OAIItemMetadata::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIItemMetadata::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIItemMetadata::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIItemMetadata::getMimeType() const {
    return m_mime_type;
}
void OAIItemMetadata::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIItemMetadata::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIItemMetadata::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIItemMetadata::getObjectType() const {
    return m_object_type;
}
void OAIItemMetadata::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIItemMetadata::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIItemMetadata::is_object_type_Valid() const{
    return m_object_type_isValid;
}

OAISearchQualityMetadata OAIItemMetadata::getSearchQualityMetadata() const {
    return m_search_quality_metadata;
}
void OAIItemMetadata::setSearchQualityMetadata(const OAISearchQualityMetadata &search_quality_metadata) {
    m_search_quality_metadata = search_quality_metadata;
    m_search_quality_metadata_isSet = true;
}

bool OAIItemMetadata::is_search_quality_metadata_Set() const{
    return m_search_quality_metadata_isSet;
}

bool OAIItemMetadata::is_search_quality_metadata_Valid() const{
    return m_search_quality_metadata_isValid;
}

QString OAIItemMetadata::getSourceRepositoryUrl() const {
    return m_source_repository_url;
}
void OAIItemMetadata::setSourceRepositoryUrl(const QString &source_repository_url) {
    m_source_repository_url = source_repository_url;
    m_source_repository_url_isSet = true;
}

bool OAIItemMetadata::is_source_repository_url_Set() const{
    return m_source_repository_url_isSet;
}

bool OAIItemMetadata::is_source_repository_url_Valid() const{
    return m_source_repository_url_isValid;
}

QString OAIItemMetadata::getTitle() const {
    return m_title;
}
void OAIItemMetadata::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemMetadata::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemMetadata::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIItemMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIItemMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIItemMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIItemMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIItemMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_quality_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
