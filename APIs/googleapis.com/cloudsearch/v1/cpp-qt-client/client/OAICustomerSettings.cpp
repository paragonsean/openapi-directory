/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerSettings::OAICustomerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerSettings::OAICustomerSettings() {
    this->initializeModel();
}

OAICustomerSettings::~OAICustomerSettings() {}

void OAICustomerSettings::initializeModel() {

    m_audit_logging_settings_isSet = false;
    m_audit_logging_settings_isValid = false;

    m_vpc_settings_isSet = false;
    m_vpc_settings_isValid = false;
}

void OAICustomerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerSettings::fromJsonObject(QJsonObject json) {

    m_audit_logging_settings_isValid = ::OpenAPI::fromJsonValue(m_audit_logging_settings, json[QString("auditLoggingSettings")]);
    m_audit_logging_settings_isSet = !json[QString("auditLoggingSettings")].isNull() && m_audit_logging_settings_isValid;

    m_vpc_settings_isValid = ::OpenAPI::fromJsonValue(m_vpc_settings, json[QString("vpcSettings")]);
    m_vpc_settings_isSet = !json[QString("vpcSettings")].isNull() && m_vpc_settings_isValid;
}

QString OAICustomerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_logging_settings.isSet()) {
        obj.insert(QString("auditLoggingSettings"), ::OpenAPI::toJsonValue(m_audit_logging_settings));
    }
    if (m_vpc_settings.isSet()) {
        obj.insert(QString("vpcSettings"), ::OpenAPI::toJsonValue(m_vpc_settings));
    }
    return obj;
}

OAIAuditLoggingSettings OAICustomerSettings::getAuditLoggingSettings() const {
    return m_audit_logging_settings;
}
void OAICustomerSettings::setAuditLoggingSettings(const OAIAuditLoggingSettings &audit_logging_settings) {
    m_audit_logging_settings = audit_logging_settings;
    m_audit_logging_settings_isSet = true;
}

bool OAICustomerSettings::is_audit_logging_settings_Set() const{
    return m_audit_logging_settings_isSet;
}

bool OAICustomerSettings::is_audit_logging_settings_Valid() const{
    return m_audit_logging_settings_isValid;
}

OAIVPCSettings OAICustomerSettings::getVpcSettings() const {
    return m_vpc_settings;
}
void OAICustomerSettings::setVpcSettings(const OAIVPCSettings &vpc_settings) {
    m_vpc_settings = vpc_settings;
    m_vpc_settings_isSet = true;
}

bool OAICustomerSettings::is_vpc_settings_Set() const{
    return m_vpc_settings_isSet;
}

bool OAICustomerSettings::is_vpc_settings_Valid() const{
    return m_vpc_settings_isValid;
}

bool OAICustomerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_logging_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
