/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoringConfig::OAIScoringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoringConfig::OAIScoringConfig() {
    this->initializeModel();
}

OAIScoringConfig::~OAIScoringConfig() {}

void OAIScoringConfig::initializeModel() {

    m_disable_freshness_isSet = false;
    m_disable_freshness_isValid = false;

    m_disable_personalization_isSet = false;
    m_disable_personalization_isValid = false;
}

void OAIScoringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoringConfig::fromJsonObject(QJsonObject json) {

    m_disable_freshness_isValid = ::OpenAPI::fromJsonValue(m_disable_freshness, json[QString("disableFreshness")]);
    m_disable_freshness_isSet = !json[QString("disableFreshness")].isNull() && m_disable_freshness_isValid;

    m_disable_personalization_isValid = ::OpenAPI::fromJsonValue(m_disable_personalization, json[QString("disablePersonalization")]);
    m_disable_personalization_isSet = !json[QString("disablePersonalization")].isNull() && m_disable_personalization_isValid;
}

QString OAIScoringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_freshness_isSet) {
        obj.insert(QString("disableFreshness"), ::OpenAPI::toJsonValue(m_disable_freshness));
    }
    if (m_disable_personalization_isSet) {
        obj.insert(QString("disablePersonalization"), ::OpenAPI::toJsonValue(m_disable_personalization));
    }
    return obj;
}

bool OAIScoringConfig::isDisableFreshness() const {
    return m_disable_freshness;
}
void OAIScoringConfig::setDisableFreshness(const bool &disable_freshness) {
    m_disable_freshness = disable_freshness;
    m_disable_freshness_isSet = true;
}

bool OAIScoringConfig::is_disable_freshness_Set() const{
    return m_disable_freshness_isSet;
}

bool OAIScoringConfig::is_disable_freshness_Valid() const{
    return m_disable_freshness_isValid;
}

bool OAIScoringConfig::isDisablePersonalization() const {
    return m_disable_personalization;
}
void OAIScoringConfig::setDisablePersonalization(const bool &disable_personalization) {
    m_disable_personalization = disable_personalization;
    m_disable_personalization_isSet = true;
}

bool OAIScoringConfig::is_disable_personalization_Set() const{
    return m_disable_personalization_isSet;
}

bool OAIScoringConfig::is_disable_personalization_Valid() const{
    return m_disable_personalization_isValid;
}

bool OAIScoringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_freshness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_personalization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
