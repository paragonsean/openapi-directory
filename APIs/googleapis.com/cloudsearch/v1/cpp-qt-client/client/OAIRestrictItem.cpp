/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestrictItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestrictItem::OAIRestrictItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestrictItem::OAIRestrictItem() {
    this->initializeModel();
}

OAIRestrictItem::~OAIRestrictItem() {}

void OAIRestrictItem::initializeModel() {

    m_drive_follow_up_restrict_isSet = false;
    m_drive_follow_up_restrict_isValid = false;

    m_drive_location_restrict_isSet = false;
    m_drive_location_restrict_isValid = false;

    m_drive_mime_type_restrict_isSet = false;
    m_drive_mime_type_restrict_isValid = false;

    m_drive_time_span_restrict_isSet = false;
    m_drive_time_span_restrict_isValid = false;

    m_search_operator_isSet = false;
    m_search_operator_isValid = false;
}

void OAIRestrictItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestrictItem::fromJsonObject(QJsonObject json) {

    m_drive_follow_up_restrict_isValid = ::OpenAPI::fromJsonValue(m_drive_follow_up_restrict, json[QString("driveFollowUpRestrict")]);
    m_drive_follow_up_restrict_isSet = !json[QString("driveFollowUpRestrict")].isNull() && m_drive_follow_up_restrict_isValid;

    m_drive_location_restrict_isValid = ::OpenAPI::fromJsonValue(m_drive_location_restrict, json[QString("driveLocationRestrict")]);
    m_drive_location_restrict_isSet = !json[QString("driveLocationRestrict")].isNull() && m_drive_location_restrict_isValid;

    m_drive_mime_type_restrict_isValid = ::OpenAPI::fromJsonValue(m_drive_mime_type_restrict, json[QString("driveMimeTypeRestrict")]);
    m_drive_mime_type_restrict_isSet = !json[QString("driveMimeTypeRestrict")].isNull() && m_drive_mime_type_restrict_isValid;

    m_drive_time_span_restrict_isValid = ::OpenAPI::fromJsonValue(m_drive_time_span_restrict, json[QString("driveTimeSpanRestrict")]);
    m_drive_time_span_restrict_isSet = !json[QString("driveTimeSpanRestrict")].isNull() && m_drive_time_span_restrict_isValid;

    m_search_operator_isValid = ::OpenAPI::fromJsonValue(m_search_operator, json[QString("searchOperator")]);
    m_search_operator_isSet = !json[QString("searchOperator")].isNull() && m_search_operator_isValid;
}

QString OAIRestrictItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestrictItem::asJsonObject() const {
    QJsonObject obj;
    if (m_drive_follow_up_restrict.isSet()) {
        obj.insert(QString("driveFollowUpRestrict"), ::OpenAPI::toJsonValue(m_drive_follow_up_restrict));
    }
    if (m_drive_location_restrict.isSet()) {
        obj.insert(QString("driveLocationRestrict"), ::OpenAPI::toJsonValue(m_drive_location_restrict));
    }
    if (m_drive_mime_type_restrict.isSet()) {
        obj.insert(QString("driveMimeTypeRestrict"), ::OpenAPI::toJsonValue(m_drive_mime_type_restrict));
    }
    if (m_drive_time_span_restrict.isSet()) {
        obj.insert(QString("driveTimeSpanRestrict"), ::OpenAPI::toJsonValue(m_drive_time_span_restrict));
    }
    if (m_search_operator_isSet) {
        obj.insert(QString("searchOperator"), ::OpenAPI::toJsonValue(m_search_operator));
    }
    return obj;
}

OAIDriveFollowUpRestrict OAIRestrictItem::getDriveFollowUpRestrict() const {
    return m_drive_follow_up_restrict;
}
void OAIRestrictItem::setDriveFollowUpRestrict(const OAIDriveFollowUpRestrict &drive_follow_up_restrict) {
    m_drive_follow_up_restrict = drive_follow_up_restrict;
    m_drive_follow_up_restrict_isSet = true;
}

bool OAIRestrictItem::is_drive_follow_up_restrict_Set() const{
    return m_drive_follow_up_restrict_isSet;
}

bool OAIRestrictItem::is_drive_follow_up_restrict_Valid() const{
    return m_drive_follow_up_restrict_isValid;
}

OAIDriveLocationRestrict OAIRestrictItem::getDriveLocationRestrict() const {
    return m_drive_location_restrict;
}
void OAIRestrictItem::setDriveLocationRestrict(const OAIDriveLocationRestrict &drive_location_restrict) {
    m_drive_location_restrict = drive_location_restrict;
    m_drive_location_restrict_isSet = true;
}

bool OAIRestrictItem::is_drive_location_restrict_Set() const{
    return m_drive_location_restrict_isSet;
}

bool OAIRestrictItem::is_drive_location_restrict_Valid() const{
    return m_drive_location_restrict_isValid;
}

OAIDriveMimeTypeRestrict OAIRestrictItem::getDriveMimeTypeRestrict() const {
    return m_drive_mime_type_restrict;
}
void OAIRestrictItem::setDriveMimeTypeRestrict(const OAIDriveMimeTypeRestrict &drive_mime_type_restrict) {
    m_drive_mime_type_restrict = drive_mime_type_restrict;
    m_drive_mime_type_restrict_isSet = true;
}

bool OAIRestrictItem::is_drive_mime_type_restrict_Set() const{
    return m_drive_mime_type_restrict_isSet;
}

bool OAIRestrictItem::is_drive_mime_type_restrict_Valid() const{
    return m_drive_mime_type_restrict_isValid;
}

OAIDriveTimeSpanRestrict OAIRestrictItem::getDriveTimeSpanRestrict() const {
    return m_drive_time_span_restrict;
}
void OAIRestrictItem::setDriveTimeSpanRestrict(const OAIDriveTimeSpanRestrict &drive_time_span_restrict) {
    m_drive_time_span_restrict = drive_time_span_restrict;
    m_drive_time_span_restrict_isSet = true;
}

bool OAIRestrictItem::is_drive_time_span_restrict_Set() const{
    return m_drive_time_span_restrict_isSet;
}

bool OAIRestrictItem::is_drive_time_span_restrict_Valid() const{
    return m_drive_time_span_restrict_isValid;
}

QString OAIRestrictItem::getSearchOperator() const {
    return m_search_operator;
}
void OAIRestrictItem::setSearchOperator(const QString &search_operator) {
    m_search_operator = search_operator;
    m_search_operator_isSet = true;
}

bool OAIRestrictItem::is_search_operator_Set() const{
    return m_search_operator_isSet;
}

bool OAIRestrictItem::is_search_operator_Valid() const{
    return m_search_operator_isValid;
}

bool OAIRestrictItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive_follow_up_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_location_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_mime_type_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_time_span_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestrictItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
