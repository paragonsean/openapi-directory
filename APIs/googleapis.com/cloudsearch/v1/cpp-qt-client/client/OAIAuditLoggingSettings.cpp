/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLoggingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLoggingSettings::OAIAuditLoggingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLoggingSettings::OAIAuditLoggingSettings() {
    this->initializeModel();
}

OAIAuditLoggingSettings::~OAIAuditLoggingSettings() {}

void OAIAuditLoggingSettings::initializeModel() {

    m_log_admin_read_actions_isSet = false;
    m_log_admin_read_actions_isValid = false;

    m_log_data_read_actions_isSet = false;
    m_log_data_read_actions_isValid = false;

    m_log_data_write_actions_isSet = false;
    m_log_data_write_actions_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIAuditLoggingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLoggingSettings::fromJsonObject(QJsonObject json) {

    m_log_admin_read_actions_isValid = ::OpenAPI::fromJsonValue(m_log_admin_read_actions, json[QString("logAdminReadActions")]);
    m_log_admin_read_actions_isSet = !json[QString("logAdminReadActions")].isNull() && m_log_admin_read_actions_isValid;

    m_log_data_read_actions_isValid = ::OpenAPI::fromJsonValue(m_log_data_read_actions, json[QString("logDataReadActions")]);
    m_log_data_read_actions_isSet = !json[QString("logDataReadActions")].isNull() && m_log_data_read_actions_isValid;

    m_log_data_write_actions_isValid = ::OpenAPI::fromJsonValue(m_log_data_write_actions, json[QString("logDataWriteActions")]);
    m_log_data_write_actions_isSet = !json[QString("logDataWriteActions")].isNull() && m_log_data_write_actions_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIAuditLoggingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLoggingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_log_admin_read_actions_isSet) {
        obj.insert(QString("logAdminReadActions"), ::OpenAPI::toJsonValue(m_log_admin_read_actions));
    }
    if (m_log_data_read_actions_isSet) {
        obj.insert(QString("logDataReadActions"), ::OpenAPI::toJsonValue(m_log_data_read_actions));
    }
    if (m_log_data_write_actions_isSet) {
        obj.insert(QString("logDataWriteActions"), ::OpenAPI::toJsonValue(m_log_data_write_actions));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

bool OAIAuditLoggingSettings::isLogAdminReadActions() const {
    return m_log_admin_read_actions;
}
void OAIAuditLoggingSettings::setLogAdminReadActions(const bool &log_admin_read_actions) {
    m_log_admin_read_actions = log_admin_read_actions;
    m_log_admin_read_actions_isSet = true;
}

bool OAIAuditLoggingSettings::is_log_admin_read_actions_Set() const{
    return m_log_admin_read_actions_isSet;
}

bool OAIAuditLoggingSettings::is_log_admin_read_actions_Valid() const{
    return m_log_admin_read_actions_isValid;
}

bool OAIAuditLoggingSettings::isLogDataReadActions() const {
    return m_log_data_read_actions;
}
void OAIAuditLoggingSettings::setLogDataReadActions(const bool &log_data_read_actions) {
    m_log_data_read_actions = log_data_read_actions;
    m_log_data_read_actions_isSet = true;
}

bool OAIAuditLoggingSettings::is_log_data_read_actions_Set() const{
    return m_log_data_read_actions_isSet;
}

bool OAIAuditLoggingSettings::is_log_data_read_actions_Valid() const{
    return m_log_data_read_actions_isValid;
}

bool OAIAuditLoggingSettings::isLogDataWriteActions() const {
    return m_log_data_write_actions;
}
void OAIAuditLoggingSettings::setLogDataWriteActions(const bool &log_data_write_actions) {
    m_log_data_write_actions = log_data_write_actions;
    m_log_data_write_actions_isSet = true;
}

bool OAIAuditLoggingSettings::is_log_data_write_actions_Set() const{
    return m_log_data_write_actions_isSet;
}

bool OAIAuditLoggingSettings::is_log_data_write_actions_Valid() const{
    return m_log_data_write_actions_isValid;
}

QString OAIAuditLoggingSettings::getProject() const {
    return m_project;
}
void OAIAuditLoggingSettings::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIAuditLoggingSettings::is_project_Set() const{
    return m_project_isSet;
}

bool OAIAuditLoggingSettings::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIAuditLoggingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_admin_read_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_data_read_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_data_write_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLoggingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
