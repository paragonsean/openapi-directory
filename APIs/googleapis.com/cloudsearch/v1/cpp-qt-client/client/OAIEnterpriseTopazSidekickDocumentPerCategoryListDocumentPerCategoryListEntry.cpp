/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::~OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry() {}

void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_rationale_isSet = false;
    m_rationale_isValid = false;
}

void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_rationale_isValid = ::OpenAPI::fromJsonValue(m_rationale, json[QString("rationale")]);
    m_rationale_isSet = !json[QString("rationale")].isNull() && m_rationale_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_rationale_isSet) {
        obj.insert(QString("rationale"), ::OpenAPI::toJsonValue(m_rationale));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::getCategory() const {
    return m_category;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_category_Valid() const{
    return m_category_isValid;
}

OAIEnterpriseTopazSidekickCommonDocument OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::getDocument() const {
    return m_document;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::setDocument(const OAIEnterpriseTopazSidekickCommonDocument &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_document_Set() const{
    return m_document_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::getRationale() const {
    return m_rationale;
}
void OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::setRationale(const QString &rationale) {
    m_rationale = rationale;
    m_rationale_isSet = true;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_rationale_Set() const{
    return m_rationale_isSet;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::is_rationale_Valid() const{
    return m_rationale_isValid;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rationale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
