/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_facet_results_isSet = false;
    m_facet_results_isValid = false;

    m_has_more_results_isSet = false;
    m_has_more_results_isValid = false;

    m_query_interpretation_isSet = false;
    m_query_interpretation_isValid = false;

    m_result_count_estimate_isSet = false;
    m_result_count_estimate_isValid = false;

    m_result_count_exact_isSet = false;
    m_result_count_exact_isValid = false;

    m_result_counts_isSet = false;
    m_result_counts_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_spell_results_isSet = false;
    m_spell_results_isValid = false;

    m_structured_results_isSet = false;
    m_structured_results_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_facet_results_isValid = ::OpenAPI::fromJsonValue(m_facet_results, json[QString("facetResults")]);
    m_facet_results_isSet = !json[QString("facetResults")].isNull() && m_facet_results_isValid;

    m_has_more_results_isValid = ::OpenAPI::fromJsonValue(m_has_more_results, json[QString("hasMoreResults")]);
    m_has_more_results_isSet = !json[QString("hasMoreResults")].isNull() && m_has_more_results_isValid;

    m_query_interpretation_isValid = ::OpenAPI::fromJsonValue(m_query_interpretation, json[QString("queryInterpretation")]);
    m_query_interpretation_isSet = !json[QString("queryInterpretation")].isNull() && m_query_interpretation_isValid;

    m_result_count_estimate_isValid = ::OpenAPI::fromJsonValue(m_result_count_estimate, json[QString("resultCountEstimate")]);
    m_result_count_estimate_isSet = !json[QString("resultCountEstimate")].isNull() && m_result_count_estimate_isValid;

    m_result_count_exact_isValid = ::OpenAPI::fromJsonValue(m_result_count_exact, json[QString("resultCountExact")]);
    m_result_count_exact_isSet = !json[QString("resultCountExact")].isNull() && m_result_count_exact_isValid;

    m_result_counts_isValid = ::OpenAPI::fromJsonValue(m_result_counts, json[QString("resultCounts")]);
    m_result_counts_isSet = !json[QString("resultCounts")].isNull() && m_result_counts_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_spell_results_isValid = ::OpenAPI::fromJsonValue(m_spell_results, json[QString("spellResults")]);
    m_spell_results_isSet = !json[QString("spellResults")].isNull() && m_spell_results_isValid;

    m_structured_results_isValid = ::OpenAPI::fromJsonValue(m_structured_results, json[QString("structuredResults")]);
    m_structured_results_isSet = !json[QString("structuredResults")].isNull() && m_structured_results_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_info.isSet()) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_facet_results.size() > 0) {
        obj.insert(QString("facetResults"), ::OpenAPI::toJsonValue(m_facet_results));
    }
    if (m_has_more_results_isSet) {
        obj.insert(QString("hasMoreResults"), ::OpenAPI::toJsonValue(m_has_more_results));
    }
    if (m_query_interpretation.isSet()) {
        obj.insert(QString("queryInterpretation"), ::OpenAPI::toJsonValue(m_query_interpretation));
    }
    if (m_result_count_estimate_isSet) {
        obj.insert(QString("resultCountEstimate"), ::OpenAPI::toJsonValue(m_result_count_estimate));
    }
    if (m_result_count_exact_isSet) {
        obj.insert(QString("resultCountExact"), ::OpenAPI::toJsonValue(m_result_count_exact));
    }
    if (m_result_counts.isSet()) {
        obj.insert(QString("resultCounts"), ::OpenAPI::toJsonValue(m_result_counts));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_spell_results.size() > 0) {
        obj.insert(QString("spellResults"), ::OpenAPI::toJsonValue(m_spell_results));
    }
    if (m_structured_results.size() > 0) {
        obj.insert(QString("structuredResults"), ::OpenAPI::toJsonValue(m_structured_results));
    }
    return obj;
}

OAIResponseDebugInfo OAISearchResponse::getDebugInfo() const {
    return m_debug_info;
}
void OAISearchResponse::setDebugInfo(const OAIResponseDebugInfo &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAISearchResponse::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAISearchResponse::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

OAIErrorInfo OAISearchResponse::getErrorInfo() const {
    return m_error_info;
}
void OAISearchResponse::setErrorInfo(const OAIErrorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISearchResponse::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISearchResponse::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QList<OAIFacetResult> OAISearchResponse::getFacetResults() const {
    return m_facet_results;
}
void OAISearchResponse::setFacetResults(const QList<OAIFacetResult> &facet_results) {
    m_facet_results = facet_results;
    m_facet_results_isSet = true;
}

bool OAISearchResponse::is_facet_results_Set() const{
    return m_facet_results_isSet;
}

bool OAISearchResponse::is_facet_results_Valid() const{
    return m_facet_results_isValid;
}

bool OAISearchResponse::isHasMoreResults() const {
    return m_has_more_results;
}
void OAISearchResponse::setHasMoreResults(const bool &has_more_results) {
    m_has_more_results = has_more_results;
    m_has_more_results_isSet = true;
}

bool OAISearchResponse::is_has_more_results_Set() const{
    return m_has_more_results_isSet;
}

bool OAISearchResponse::is_has_more_results_Valid() const{
    return m_has_more_results_isValid;
}

OAIQueryInterpretation OAISearchResponse::getQueryInterpretation() const {
    return m_query_interpretation;
}
void OAISearchResponse::setQueryInterpretation(const OAIQueryInterpretation &query_interpretation) {
    m_query_interpretation = query_interpretation;
    m_query_interpretation_isSet = true;
}

bool OAISearchResponse::is_query_interpretation_Set() const{
    return m_query_interpretation_isSet;
}

bool OAISearchResponse::is_query_interpretation_Valid() const{
    return m_query_interpretation_isValid;
}

QString OAISearchResponse::getResultCountEstimate() const {
    return m_result_count_estimate;
}
void OAISearchResponse::setResultCountEstimate(const QString &result_count_estimate) {
    m_result_count_estimate = result_count_estimate;
    m_result_count_estimate_isSet = true;
}

bool OAISearchResponse::is_result_count_estimate_Set() const{
    return m_result_count_estimate_isSet;
}

bool OAISearchResponse::is_result_count_estimate_Valid() const{
    return m_result_count_estimate_isValid;
}

QString OAISearchResponse::getResultCountExact() const {
    return m_result_count_exact;
}
void OAISearchResponse::setResultCountExact(const QString &result_count_exact) {
    m_result_count_exact = result_count_exact;
    m_result_count_exact_isSet = true;
}

bool OAISearchResponse::is_result_count_exact_Set() const{
    return m_result_count_exact_isSet;
}

bool OAISearchResponse::is_result_count_exact_Valid() const{
    return m_result_count_exact_isValid;
}

OAIResultCounts OAISearchResponse::getResultCounts() const {
    return m_result_counts;
}
void OAISearchResponse::setResultCounts(const OAIResultCounts &result_counts) {
    m_result_counts = result_counts;
    m_result_counts_isSet = true;
}

bool OAISearchResponse::is_result_counts_Set() const{
    return m_result_counts_isSet;
}

bool OAISearchResponse::is_result_counts_Valid() const{
    return m_result_counts_isValid;
}

QList<OAISearchResult> OAISearchResponse::getResults() const {
    return m_results;
}
void OAISearchResponse::setResults(const QList<OAISearchResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

QList<OAISpellResult> OAISearchResponse::getSpellResults() const {
    return m_spell_results;
}
void OAISearchResponse::setSpellResults(const QList<OAISpellResult> &spell_results) {
    m_spell_results = spell_results;
    m_spell_results_isSet = true;
}

bool OAISearchResponse::is_spell_results_Set() const{
    return m_spell_results_isSet;
}

bool OAISearchResponse::is_spell_results_Valid() const{
    return m_spell_results_isValid;
}

QList<OAIStructuredResult> OAISearchResponse::getStructuredResults() const {
    return m_structured_results;
}
void OAISearchResponse::setStructuredResults(const QList<OAIStructuredResult> &structured_results) {
    m_structured_results = structured_results;
    m_structured_results_isSet = true;
}

bool OAISearchResponse::is_structured_results_Set() const{
    return m_structured_results_isSet;
}

bool OAISearchResponse::is_structured_results_Valid() const{
    return m_structured_results_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_interpretation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_count_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
