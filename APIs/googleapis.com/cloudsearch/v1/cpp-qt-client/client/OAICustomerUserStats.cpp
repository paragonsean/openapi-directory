/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerUserStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerUserStats::OAICustomerUserStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerUserStats::OAICustomerUserStats() {
    this->initializeModel();
}

OAICustomerUserStats::~OAICustomerUserStats() {}

void OAICustomerUserStats::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_one_day_active_users_count_isSet = false;
    m_one_day_active_users_count_isValid = false;

    m_seven_days_active_users_count_isSet = false;
    m_seven_days_active_users_count_isValid = false;

    m_thirty_days_active_users_count_isSet = false;
    m_thirty_days_active_users_count_isValid = false;
}

void OAICustomerUserStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerUserStats::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_one_day_active_users_count_isValid = ::OpenAPI::fromJsonValue(m_one_day_active_users_count, json[QString("oneDayActiveUsersCount")]);
    m_one_day_active_users_count_isSet = !json[QString("oneDayActiveUsersCount")].isNull() && m_one_day_active_users_count_isValid;

    m_seven_days_active_users_count_isValid = ::OpenAPI::fromJsonValue(m_seven_days_active_users_count, json[QString("sevenDaysActiveUsersCount")]);
    m_seven_days_active_users_count_isSet = !json[QString("sevenDaysActiveUsersCount")].isNull() && m_seven_days_active_users_count_isValid;

    m_thirty_days_active_users_count_isValid = ::OpenAPI::fromJsonValue(m_thirty_days_active_users_count, json[QString("thirtyDaysActiveUsersCount")]);
    m_thirty_days_active_users_count_isSet = !json[QString("thirtyDaysActiveUsersCount")].isNull() && m_thirty_days_active_users_count_isValid;
}

QString OAICustomerUserStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerUserStats::asJsonObject() const {
    QJsonObject obj;
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_one_day_active_users_count_isSet) {
        obj.insert(QString("oneDayActiveUsersCount"), ::OpenAPI::toJsonValue(m_one_day_active_users_count));
    }
    if (m_seven_days_active_users_count_isSet) {
        obj.insert(QString("sevenDaysActiveUsersCount"), ::OpenAPI::toJsonValue(m_seven_days_active_users_count));
    }
    if (m_thirty_days_active_users_count_isSet) {
        obj.insert(QString("thirtyDaysActiveUsersCount"), ::OpenAPI::toJsonValue(m_thirty_days_active_users_count));
    }
    return obj;
}

OAIDate OAICustomerUserStats::getDate() const {
    return m_date;
}
void OAICustomerUserStats::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICustomerUserStats::is_date_Set() const{
    return m_date_isSet;
}

bool OAICustomerUserStats::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICustomerUserStats::getOneDayActiveUsersCount() const {
    return m_one_day_active_users_count;
}
void OAICustomerUserStats::setOneDayActiveUsersCount(const QString &one_day_active_users_count) {
    m_one_day_active_users_count = one_day_active_users_count;
    m_one_day_active_users_count_isSet = true;
}

bool OAICustomerUserStats::is_one_day_active_users_count_Set() const{
    return m_one_day_active_users_count_isSet;
}

bool OAICustomerUserStats::is_one_day_active_users_count_Valid() const{
    return m_one_day_active_users_count_isValid;
}

QString OAICustomerUserStats::getSevenDaysActiveUsersCount() const {
    return m_seven_days_active_users_count;
}
void OAICustomerUserStats::setSevenDaysActiveUsersCount(const QString &seven_days_active_users_count) {
    m_seven_days_active_users_count = seven_days_active_users_count;
    m_seven_days_active_users_count_isSet = true;
}

bool OAICustomerUserStats::is_seven_days_active_users_count_Set() const{
    return m_seven_days_active_users_count_isSet;
}

bool OAICustomerUserStats::is_seven_days_active_users_count_Valid() const{
    return m_seven_days_active_users_count_isValid;
}

QString OAICustomerUserStats::getThirtyDaysActiveUsersCount() const {
    return m_thirty_days_active_users_count;
}
void OAICustomerUserStats::setThirtyDaysActiveUsersCount(const QString &thirty_days_active_users_count) {
    m_thirty_days_active_users_count = thirty_days_active_users_count;
    m_thirty_days_active_users_count_isSet = true;
}

bool OAICustomerUserStats::is_thirty_days_active_users_count_Set() const{
    return m_thirty_days_active_users_count_isSet;
}

bool OAICustomerUserStats::is_thirty_days_active_users_count_Valid() const{
    return m_thirty_days_active_users_count_isValid;
}

bool OAICustomerUserStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_day_active_users_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seven_days_active_users_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thirty_days_active_users_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerUserStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
