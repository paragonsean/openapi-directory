/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickPerson::OAIEnterpriseTopazSidekickPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickPerson::OAIEnterpriseTopazSidekickPerson() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickPerson::~OAIEnterpriseTopazSidekickPerson() {}

void OAIEnterpriseTopazSidekickPerson::initializeModel() {

    m_affinity_level_isSet = false;
    m_affinity_level_isValid = false;

    m_attending_status_isSet = false;
    m_attending_status_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_gaia_id_isSet = false;
    m_gaia_id_isValid = false;

    m_is_group_isSet = false;
    m_is_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_obfuscated_gaia_id_isSet = false;
    m_obfuscated_gaia_id_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;
}

void OAIEnterpriseTopazSidekickPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickPerson::fromJsonObject(QJsonObject json) {

    m_affinity_level_isValid = ::OpenAPI::fromJsonValue(m_affinity_level, json[QString("affinityLevel")]);
    m_affinity_level_isSet = !json[QString("affinityLevel")].isNull() && m_affinity_level_isValid;

    m_attending_status_isValid = ::OpenAPI::fromJsonValue(m_attending_status, json[QString("attendingStatus")]);
    m_attending_status_isSet = !json[QString("attendingStatus")].isNull() && m_attending_status_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_gaia_id_isValid = ::OpenAPI::fromJsonValue(m_gaia_id, json[QString("gaiaId")]);
    m_gaia_id_isSet = !json[QString("gaiaId")].isNull() && m_gaia_id_isValid;

    m_is_group_isValid = ::OpenAPI::fromJsonValue(m_is_group, json[QString("isGroup")]);
    m_is_group_isSet = !json[QString("isGroup")].isNull() && m_is_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_obfuscated_gaia_id_isValid = ::OpenAPI::fromJsonValue(m_obfuscated_gaia_id, json[QString("obfuscatedGaiaId")]);
    m_obfuscated_gaia_id_isSet = !json[QString("obfuscatedGaiaId")].isNull() && m_obfuscated_gaia_id_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_level_isSet) {
        obj.insert(QString("affinityLevel"), ::OpenAPI::toJsonValue(m_affinity_level));
    }
    if (m_attending_status_isSet) {
        obj.insert(QString("attendingStatus"), ::OpenAPI::toJsonValue(m_attending_status));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_gaia_id_isSet) {
        obj.insert(QString("gaiaId"), ::OpenAPI::toJsonValue(m_gaia_id));
    }
    if (m_is_group_isSet) {
        obj.insert(QString("isGroup"), ::OpenAPI::toJsonValue(m_is_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_obfuscated_gaia_id_isSet) {
        obj.insert(QString("obfuscatedGaiaId"), ::OpenAPI::toJsonValue(m_obfuscated_gaia_id));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickPerson::getAffinityLevel() const {
    return m_affinity_level;
}
void OAIEnterpriseTopazSidekickPerson::setAffinityLevel(const QString &affinity_level) {
    m_affinity_level = affinity_level;
    m_affinity_level_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_affinity_level_Set() const{
    return m_affinity_level_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_affinity_level_Valid() const{
    return m_affinity_level_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getAttendingStatus() const {
    return m_attending_status;
}
void OAIEnterpriseTopazSidekickPerson::setAttendingStatus(const QString &attending_status) {
    m_attending_status = attending_status;
    m_attending_status_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_attending_status_Set() const{
    return m_attending_status_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_attending_status_Valid() const{
    return m_attending_status_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getEmail() const {
    return m_email;
}
void OAIEnterpriseTopazSidekickPerson::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getGaiaId() const {
    return m_gaia_id;
}
void OAIEnterpriseTopazSidekickPerson::setGaiaId(const QString &gaia_id) {
    m_gaia_id = gaia_id;
    m_gaia_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_gaia_id_Set() const{
    return m_gaia_id_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_gaia_id_Valid() const{
    return m_gaia_id_isValid;
}

bool OAIEnterpriseTopazSidekickPerson::isIsGroup() const {
    return m_is_group;
}
void OAIEnterpriseTopazSidekickPerson::setIsGroup(const bool &is_group) {
    m_is_group = is_group;
    m_is_group_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_is_group_Set() const{
    return m_is_group_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_is_group_Valid() const{
    return m_is_group_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getName() const {
    return m_name;
}
void OAIEnterpriseTopazSidekickPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getObfuscatedGaiaId() const {
    return m_obfuscated_gaia_id;
}
void OAIEnterpriseTopazSidekickPerson::setObfuscatedGaiaId(const QString &obfuscated_gaia_id) {
    m_obfuscated_gaia_id = obfuscated_gaia_id;
    m_obfuscated_gaia_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_obfuscated_gaia_id_Set() const{
    return m_obfuscated_gaia_id_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_obfuscated_gaia_id_Valid() const{
    return m_obfuscated_gaia_id_isValid;
}

QString OAIEnterpriseTopazSidekickPerson::getPhotoUrl() const {
    return m_photo_url;
}
void OAIEnterpriseTopazSidekickPerson::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickPerson::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIEnterpriseTopazSidekickPerson::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

bool OAIEnterpriseTopazSidekickPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attending_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gaia_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscated_gaia_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
