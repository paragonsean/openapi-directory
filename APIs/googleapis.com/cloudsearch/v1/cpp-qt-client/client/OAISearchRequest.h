/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchRequest.h
 *
 * The search API request.
 */

#ifndef OAISearchRequest_H
#define OAISearchRequest_H

#include <QJsonObject>

#include "OAIContextAttribute.h"
#include "OAIDataSourceRestriction.h"
#include "OAIFacetOptions.h"
#include "OAIQueryInterpretationOptions.h"
#include "OAIRequestOptions.h"
#include "OAISortOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContextAttribute;
class OAIDataSourceRestriction;
class OAIFacetOptions;
class OAIQueryInterpretationOptions;
class OAIRequestOptions;
class OAISortOptions;

class OAISearchRequest : public OAIObject {
public:
    OAISearchRequest();
    OAISearchRequest(QString json);
    ~OAISearchRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContextAttribute> getContextAttributes() const;
    void setContextAttributes(const QList<OAIContextAttribute> &context_attributes);
    bool is_context_attributes_Set() const;
    bool is_context_attributes_Valid() const;

    QList<OAIDataSourceRestriction> getDataSourceRestrictions() const;
    void setDataSourceRestrictions(const QList<OAIDataSourceRestriction> &data_source_restrictions);
    bool is_data_source_restrictions_Set() const;
    bool is_data_source_restrictions_Valid() const;

    QList<OAIFacetOptions> getFacetOptions() const;
    void setFacetOptions(const QList<OAIFacetOptions> &facet_options);
    bool is_facet_options_Set() const;
    bool is_facet_options_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    OAIQueryInterpretationOptions getQueryInterpretationOptions() const;
    void setQueryInterpretationOptions(const OAIQueryInterpretationOptions &query_interpretation_options);
    bool is_query_interpretation_options_Set() const;
    bool is_query_interpretation_options_Valid() const;

    OAIRequestOptions getRequestOptions() const;
    void setRequestOptions(const OAIRequestOptions &request_options);
    bool is_request_options_Set() const;
    bool is_request_options_Valid() const;

    OAISortOptions getSortOptions() const;
    void setSortOptions(const OAISortOptions &sort_options);
    bool is_sort_options_Set() const;
    bool is_sort_options_Valid() const;

    qint32 getStart() const;
    void setStart(const qint32 &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContextAttribute> m_context_attributes;
    bool m_context_attributes_isSet;
    bool m_context_attributes_isValid;

    QList<OAIDataSourceRestriction> m_data_source_restrictions;
    bool m_data_source_restrictions_isSet;
    bool m_data_source_restrictions_isValid;

    QList<OAIFacetOptions> m_facet_options;
    bool m_facet_options_isSet;
    bool m_facet_options_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    OAIQueryInterpretationOptions m_query_interpretation_options;
    bool m_query_interpretation_options_isSet;
    bool m_query_interpretation_options_isValid;

    OAIRequestOptions m_request_options;
    bool m_request_options_isSet;
    bool m_request_options_isValid;

    OAISortOptions m_sort_options;
    bool m_sort_options_isSet;
    bool m_sort_options_isValid;

    qint32 m_start;
    bool m_start_isSet;
    bool m_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchRequest)

#endif // OAISearchRequest_H
