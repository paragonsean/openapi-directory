/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestResult::OAISuggestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestResult::OAISuggestResult() {
    this->initializeModel();
}

OAISuggestResult::~OAISuggestResult() {}

void OAISuggestResult::initializeModel() {

    m_people_suggestion_isSet = false;
    m_people_suggestion_isValid = false;

    m_query_suggestion_isSet = false;
    m_query_suggestion_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_suggested_query_isSet = false;
    m_suggested_query_isValid = false;
}

void OAISuggestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestResult::fromJsonObject(QJsonObject json) {

    m_people_suggestion_isValid = ::OpenAPI::fromJsonValue(m_people_suggestion, json[QString("peopleSuggestion")]);
    m_people_suggestion_isSet = !json[QString("peopleSuggestion")].isNull() && m_people_suggestion_isValid;

    m_query_suggestion_isValid = ::OpenAPI::fromJsonValue(m_query_suggestion, json[QString("querySuggestion")]);
    m_query_suggestion_isSet = !json[QString("querySuggestion")].isNull() && m_query_suggestion_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_suggested_query_isValid = ::OpenAPI::fromJsonValue(m_suggested_query, json[QString("suggestedQuery")]);
    m_suggested_query_isSet = !json[QString("suggestedQuery")].isNull() && m_suggested_query_isValid;
}

QString OAISuggestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_people_suggestion.isSet()) {
        obj.insert(QString("peopleSuggestion"), ::OpenAPI::toJsonValue(m_people_suggestion));
    }
    if (m_query_suggestion_isSet) {
        obj.insert(QString("querySuggestion"), ::OpenAPI::toJsonValue(m_query_suggestion));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_suggested_query_isSet) {
        obj.insert(QString("suggestedQuery"), ::OpenAPI::toJsonValue(m_suggested_query));
    }
    return obj;
}

OAIPeopleSuggestion OAISuggestResult::getPeopleSuggestion() const {
    return m_people_suggestion;
}
void OAISuggestResult::setPeopleSuggestion(const OAIPeopleSuggestion &people_suggestion) {
    m_people_suggestion = people_suggestion;
    m_people_suggestion_isSet = true;
}

bool OAISuggestResult::is_people_suggestion_Set() const{
    return m_people_suggestion_isSet;
}

bool OAISuggestResult::is_people_suggestion_Valid() const{
    return m_people_suggestion_isValid;
}

OAIObject OAISuggestResult::getQuerySuggestion() const {
    return m_query_suggestion;
}
void OAISuggestResult::setQuerySuggestion(const OAIObject &query_suggestion) {
    m_query_suggestion = query_suggestion;
    m_query_suggestion_isSet = true;
}

bool OAISuggestResult::is_query_suggestion_Set() const{
    return m_query_suggestion_isSet;
}

bool OAISuggestResult::is_query_suggestion_Valid() const{
    return m_query_suggestion_isValid;
}

OAISource OAISuggestResult::getSource() const {
    return m_source;
}
void OAISuggestResult::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISuggestResult::is_source_Set() const{
    return m_source_isSet;
}

bool OAISuggestResult::is_source_Valid() const{
    return m_source_isValid;
}

QString OAISuggestResult::getSuggestedQuery() const {
    return m_suggested_query;
}
void OAISuggestResult::setSuggestedQuery(const QString &suggested_query) {
    m_suggested_query = suggested_query;
    m_suggested_query_isSet = true;
}

bool OAISuggestResult::is_suggested_query_Set() const{
    return m_suggested_query_isSet;
}

bool OAISuggestResult::is_suggested_query_Valid() const{
    return m_suggested_query_isValid;
}

bool OAISuggestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_people_suggestion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_suggestion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
