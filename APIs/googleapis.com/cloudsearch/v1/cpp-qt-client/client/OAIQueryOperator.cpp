/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryOperator::OAIQueryOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryOperator::OAIQueryOperator() {
    this->initializeModel();
}

OAIQueryOperator::~OAIQueryOperator() {}

void OAIQueryOperator::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enum_values_isSet = false;
    m_enum_values_isValid = false;

    m_greater_than_operator_name_isSet = false;
    m_greater_than_operator_name_isValid = false;

    m_is_facetable_isSet = false;
    m_is_facetable_isValid = false;

    m_is_repeatable_isSet = false;
    m_is_repeatable_isValid = false;

    m_is_returnable_isSet = false;
    m_is_returnable_isValid = false;

    m_is_sortable_isSet = false;
    m_is_sortable_isValid = false;

    m_is_suggestable_isSet = false;
    m_is_suggestable_isValid = false;

    m_less_than_operator_name_isSet = false;
    m_less_than_operator_name_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIQueryOperator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryOperator::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enum_values_isValid = ::OpenAPI::fromJsonValue(m_enum_values, json[QString("enumValues")]);
    m_enum_values_isSet = !json[QString("enumValues")].isNull() && m_enum_values_isValid;

    m_greater_than_operator_name_isValid = ::OpenAPI::fromJsonValue(m_greater_than_operator_name, json[QString("greaterThanOperatorName")]);
    m_greater_than_operator_name_isSet = !json[QString("greaterThanOperatorName")].isNull() && m_greater_than_operator_name_isValid;

    m_is_facetable_isValid = ::OpenAPI::fromJsonValue(m_is_facetable, json[QString("isFacetable")]);
    m_is_facetable_isSet = !json[QString("isFacetable")].isNull() && m_is_facetable_isValid;

    m_is_repeatable_isValid = ::OpenAPI::fromJsonValue(m_is_repeatable, json[QString("isRepeatable")]);
    m_is_repeatable_isSet = !json[QString("isRepeatable")].isNull() && m_is_repeatable_isValid;

    m_is_returnable_isValid = ::OpenAPI::fromJsonValue(m_is_returnable, json[QString("isReturnable")]);
    m_is_returnable_isSet = !json[QString("isReturnable")].isNull() && m_is_returnable_isValid;

    m_is_sortable_isValid = ::OpenAPI::fromJsonValue(m_is_sortable, json[QString("isSortable")]);
    m_is_sortable_isSet = !json[QString("isSortable")].isNull() && m_is_sortable_isValid;

    m_is_suggestable_isValid = ::OpenAPI::fromJsonValue(m_is_suggestable, json[QString("isSuggestable")]);
    m_is_suggestable_isSet = !json[QString("isSuggestable")].isNull() && m_is_suggestable_isValid;

    m_less_than_operator_name_isValid = ::OpenAPI::fromJsonValue(m_less_than_operator_name, json[QString("lessThanOperatorName")]);
    m_less_than_operator_name_isSet = !json[QString("lessThanOperatorName")].isNull() && m_less_than_operator_name_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("operatorName")]);
    m_operator_name_isSet = !json[QString("operatorName")].isNull() && m_operator_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIQueryOperator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryOperator::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enum_values.size() > 0) {
        obj.insert(QString("enumValues"), ::OpenAPI::toJsonValue(m_enum_values));
    }
    if (m_greater_than_operator_name_isSet) {
        obj.insert(QString("greaterThanOperatorName"), ::OpenAPI::toJsonValue(m_greater_than_operator_name));
    }
    if (m_is_facetable_isSet) {
        obj.insert(QString("isFacetable"), ::OpenAPI::toJsonValue(m_is_facetable));
    }
    if (m_is_repeatable_isSet) {
        obj.insert(QString("isRepeatable"), ::OpenAPI::toJsonValue(m_is_repeatable));
    }
    if (m_is_returnable_isSet) {
        obj.insert(QString("isReturnable"), ::OpenAPI::toJsonValue(m_is_returnable));
    }
    if (m_is_sortable_isSet) {
        obj.insert(QString("isSortable"), ::OpenAPI::toJsonValue(m_is_sortable));
    }
    if (m_is_suggestable_isSet) {
        obj.insert(QString("isSuggestable"), ::OpenAPI::toJsonValue(m_is_suggestable));
    }
    if (m_less_than_operator_name_isSet) {
        obj.insert(QString("lessThanOperatorName"), ::OpenAPI::toJsonValue(m_less_than_operator_name));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("operatorName"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIQueryOperator::getDisplayName() const {
    return m_display_name;
}
void OAIQueryOperator::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIQueryOperator::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIQueryOperator::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIQueryOperator::getEnumValues() const {
    return m_enum_values;
}
void OAIQueryOperator::setEnumValues(const QList<QString> &enum_values) {
    m_enum_values = enum_values;
    m_enum_values_isSet = true;
}

bool OAIQueryOperator::is_enum_values_Set() const{
    return m_enum_values_isSet;
}

bool OAIQueryOperator::is_enum_values_Valid() const{
    return m_enum_values_isValid;
}

QString OAIQueryOperator::getGreaterThanOperatorName() const {
    return m_greater_than_operator_name;
}
void OAIQueryOperator::setGreaterThanOperatorName(const QString &greater_than_operator_name) {
    m_greater_than_operator_name = greater_than_operator_name;
    m_greater_than_operator_name_isSet = true;
}

bool OAIQueryOperator::is_greater_than_operator_name_Set() const{
    return m_greater_than_operator_name_isSet;
}

bool OAIQueryOperator::is_greater_than_operator_name_Valid() const{
    return m_greater_than_operator_name_isValid;
}

bool OAIQueryOperator::isIsFacetable() const {
    return m_is_facetable;
}
void OAIQueryOperator::setIsFacetable(const bool &is_facetable) {
    m_is_facetable = is_facetable;
    m_is_facetable_isSet = true;
}

bool OAIQueryOperator::is_is_facetable_Set() const{
    return m_is_facetable_isSet;
}

bool OAIQueryOperator::is_is_facetable_Valid() const{
    return m_is_facetable_isValid;
}

bool OAIQueryOperator::isIsRepeatable() const {
    return m_is_repeatable;
}
void OAIQueryOperator::setIsRepeatable(const bool &is_repeatable) {
    m_is_repeatable = is_repeatable;
    m_is_repeatable_isSet = true;
}

bool OAIQueryOperator::is_is_repeatable_Set() const{
    return m_is_repeatable_isSet;
}

bool OAIQueryOperator::is_is_repeatable_Valid() const{
    return m_is_repeatable_isValid;
}

bool OAIQueryOperator::isIsReturnable() const {
    return m_is_returnable;
}
void OAIQueryOperator::setIsReturnable(const bool &is_returnable) {
    m_is_returnable = is_returnable;
    m_is_returnable_isSet = true;
}

bool OAIQueryOperator::is_is_returnable_Set() const{
    return m_is_returnable_isSet;
}

bool OAIQueryOperator::is_is_returnable_Valid() const{
    return m_is_returnable_isValid;
}

bool OAIQueryOperator::isIsSortable() const {
    return m_is_sortable;
}
void OAIQueryOperator::setIsSortable(const bool &is_sortable) {
    m_is_sortable = is_sortable;
    m_is_sortable_isSet = true;
}

bool OAIQueryOperator::is_is_sortable_Set() const{
    return m_is_sortable_isSet;
}

bool OAIQueryOperator::is_is_sortable_Valid() const{
    return m_is_sortable_isValid;
}

bool OAIQueryOperator::isIsSuggestable() const {
    return m_is_suggestable;
}
void OAIQueryOperator::setIsSuggestable(const bool &is_suggestable) {
    m_is_suggestable = is_suggestable;
    m_is_suggestable_isSet = true;
}

bool OAIQueryOperator::is_is_suggestable_Set() const{
    return m_is_suggestable_isSet;
}

bool OAIQueryOperator::is_is_suggestable_Valid() const{
    return m_is_suggestable_isValid;
}

QString OAIQueryOperator::getLessThanOperatorName() const {
    return m_less_than_operator_name;
}
void OAIQueryOperator::setLessThanOperatorName(const QString &less_than_operator_name) {
    m_less_than_operator_name = less_than_operator_name;
    m_less_than_operator_name_isSet = true;
}

bool OAIQueryOperator::is_less_than_operator_name_Set() const{
    return m_less_than_operator_name_isSet;
}

bool OAIQueryOperator::is_less_than_operator_name_Valid() const{
    return m_less_than_operator_name_isValid;
}

QString OAIQueryOperator::getObjectType() const {
    return m_object_type;
}
void OAIQueryOperator::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIQueryOperator::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIQueryOperator::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIQueryOperator::getOperatorName() const {
    return m_operator_name;
}
void OAIQueryOperator::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAIQueryOperator::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAIQueryOperator::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

QString OAIQueryOperator::getType() const {
    return m_type;
}
void OAIQueryOperator::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQueryOperator::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQueryOperator::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIQueryOperator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_facetable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_repeatable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_returnable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sortable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_suggestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_less_than_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
