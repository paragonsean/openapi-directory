/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickAssistCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickAssistCardProto::OAIEnterpriseTopazSidekickAssistCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickAssistCardProto::OAIEnterpriseTopazSidekickAssistCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickAssistCardProto::~OAIEnterpriseTopazSidekickAssistCardProto() {}

void OAIEnterpriseTopazSidekickAssistCardProto::initializeModel() {

    m_agenda_group_card_proto_isSet = false;
    m_agenda_group_card_proto_isValid = false;

    m_card_metadata_isSet = false;
    m_card_metadata_isValid = false;

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_conflicting_meetings_card_isSet = false;
    m_conflicting_meetings_card_isValid = false;

    m_document_list_card_isSet = false;
    m_document_list_card_isValid = false;

    m_documents_with_mentions_isSet = false;
    m_documents_with_mentions_isValid = false;

    m_find_meeting_time_card_isSet = false;
    m_find_meeting_time_card_isValid = false;

    m_generic_answer_card_isSet = false;
    m_generic_answer_card_isValid = false;

    m_get_and_keep_ahead_card_isSet = false;
    m_get_and_keep_ahead_card_isValid = false;

    m_meeting_isSet = false;
    m_meeting_isValid = false;

    m_meeting_notes_card_isSet = false;
    m_meeting_notes_card_isValid = false;

    m_meeting_notes_card_request_isSet = false;
    m_meeting_notes_card_request_isValid = false;

    m_people_disambiguation_card_isSet = false;
    m_people_disambiguation_card_isValid = false;

    m_people_promotion_card_isSet = false;
    m_people_promotion_card_isValid = false;

    m_person_answer_card_isSet = false;
    m_person_answer_card_isValid = false;

    m_person_profile_card_isSet = false;
    m_person_profile_card_isValid = false;

    m_personalized_docs_card_isSet = false;
    m_personalized_docs_card_isValid = false;

    m_related_people_answer_card_isSet = false;
    m_related_people_answer_card_isValid = false;

    m_share_meeting_docs_card_isSet = false;
    m_share_meeting_docs_card_isValid = false;

    m_shared_documents_isSet = false;
    m_shared_documents_isValid = false;

    m_suggested_query_answer_card_isSet = false;
    m_suggested_query_answer_card_isValid = false;

    m_third_party_answer_card_isSet = false;
    m_third_party_answer_card_isValid = false;

    m_work_in_progress_card_proto_isSet = false;
    m_work_in_progress_card_proto_isValid = false;
}

void OAIEnterpriseTopazSidekickAssistCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickAssistCardProto::fromJsonObject(QJsonObject json) {

    m_agenda_group_card_proto_isValid = ::OpenAPI::fromJsonValue(m_agenda_group_card_proto, json[QString("agendaGroupCardProto")]);
    m_agenda_group_card_proto_isSet = !json[QString("agendaGroupCardProto")].isNull() && m_agenda_group_card_proto_isValid;

    m_card_metadata_isValid = ::OpenAPI::fromJsonValue(m_card_metadata, json[QString("cardMetadata")]);
    m_card_metadata_isSet = !json[QString("cardMetadata")].isNull() && m_card_metadata_isValid;

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("cardType")]);
    m_card_type_isSet = !json[QString("cardType")].isNull() && m_card_type_isValid;

    m_conflicting_meetings_card_isValid = ::OpenAPI::fromJsonValue(m_conflicting_meetings_card, json[QString("conflictingMeetingsCard")]);
    m_conflicting_meetings_card_isSet = !json[QString("conflictingMeetingsCard")].isNull() && m_conflicting_meetings_card_isValid;

    m_document_list_card_isValid = ::OpenAPI::fromJsonValue(m_document_list_card, json[QString("documentListCard")]);
    m_document_list_card_isSet = !json[QString("documentListCard")].isNull() && m_document_list_card_isValid;

    m_documents_with_mentions_isValid = ::OpenAPI::fromJsonValue(m_documents_with_mentions, json[QString("documentsWithMentions")]);
    m_documents_with_mentions_isSet = !json[QString("documentsWithMentions")].isNull() && m_documents_with_mentions_isValid;

    m_find_meeting_time_card_isValid = ::OpenAPI::fromJsonValue(m_find_meeting_time_card, json[QString("findMeetingTimeCard")]);
    m_find_meeting_time_card_isSet = !json[QString("findMeetingTimeCard")].isNull() && m_find_meeting_time_card_isValid;

    m_generic_answer_card_isValid = ::OpenAPI::fromJsonValue(m_generic_answer_card, json[QString("genericAnswerCard")]);
    m_generic_answer_card_isSet = !json[QString("genericAnswerCard")].isNull() && m_generic_answer_card_isValid;

    m_get_and_keep_ahead_card_isValid = ::OpenAPI::fromJsonValue(m_get_and_keep_ahead_card, json[QString("getAndKeepAheadCard")]);
    m_get_and_keep_ahead_card_isSet = !json[QString("getAndKeepAheadCard")].isNull() && m_get_and_keep_ahead_card_isValid;

    m_meeting_isValid = ::OpenAPI::fromJsonValue(m_meeting, json[QString("meeting")]);
    m_meeting_isSet = !json[QString("meeting")].isNull() && m_meeting_isValid;

    m_meeting_notes_card_isValid = ::OpenAPI::fromJsonValue(m_meeting_notes_card, json[QString("meetingNotesCard")]);
    m_meeting_notes_card_isSet = !json[QString("meetingNotesCard")].isNull() && m_meeting_notes_card_isValid;

    m_meeting_notes_card_request_isValid = ::OpenAPI::fromJsonValue(m_meeting_notes_card_request, json[QString("meetingNotesCardRequest")]);
    m_meeting_notes_card_request_isSet = !json[QString("meetingNotesCardRequest")].isNull() && m_meeting_notes_card_request_isValid;

    m_people_disambiguation_card_isValid = ::OpenAPI::fromJsonValue(m_people_disambiguation_card, json[QString("peopleDisambiguationCard")]);
    m_people_disambiguation_card_isSet = !json[QString("peopleDisambiguationCard")].isNull() && m_people_disambiguation_card_isValid;

    m_people_promotion_card_isValid = ::OpenAPI::fromJsonValue(m_people_promotion_card, json[QString("peoplePromotionCard")]);
    m_people_promotion_card_isSet = !json[QString("peoplePromotionCard")].isNull() && m_people_promotion_card_isValid;

    m_person_answer_card_isValid = ::OpenAPI::fromJsonValue(m_person_answer_card, json[QString("personAnswerCard")]);
    m_person_answer_card_isSet = !json[QString("personAnswerCard")].isNull() && m_person_answer_card_isValid;

    m_person_profile_card_isValid = ::OpenAPI::fromJsonValue(m_person_profile_card, json[QString("personProfileCard")]);
    m_person_profile_card_isSet = !json[QString("personProfileCard")].isNull() && m_person_profile_card_isValid;

    m_personalized_docs_card_isValid = ::OpenAPI::fromJsonValue(m_personalized_docs_card, json[QString("personalizedDocsCard")]);
    m_personalized_docs_card_isSet = !json[QString("personalizedDocsCard")].isNull() && m_personalized_docs_card_isValid;

    m_related_people_answer_card_isValid = ::OpenAPI::fromJsonValue(m_related_people_answer_card, json[QString("relatedPeopleAnswerCard")]);
    m_related_people_answer_card_isSet = !json[QString("relatedPeopleAnswerCard")].isNull() && m_related_people_answer_card_isValid;

    m_share_meeting_docs_card_isValid = ::OpenAPI::fromJsonValue(m_share_meeting_docs_card, json[QString("shareMeetingDocsCard")]);
    m_share_meeting_docs_card_isSet = !json[QString("shareMeetingDocsCard")].isNull() && m_share_meeting_docs_card_isValid;

    m_shared_documents_isValid = ::OpenAPI::fromJsonValue(m_shared_documents, json[QString("sharedDocuments")]);
    m_shared_documents_isSet = !json[QString("sharedDocuments")].isNull() && m_shared_documents_isValid;

    m_suggested_query_answer_card_isValid = ::OpenAPI::fromJsonValue(m_suggested_query_answer_card, json[QString("suggestedQueryAnswerCard")]);
    m_suggested_query_answer_card_isSet = !json[QString("suggestedQueryAnswerCard")].isNull() && m_suggested_query_answer_card_isValid;

    m_third_party_answer_card_isValid = ::OpenAPI::fromJsonValue(m_third_party_answer_card, json[QString("thirdPartyAnswerCard")]);
    m_third_party_answer_card_isSet = !json[QString("thirdPartyAnswerCard")].isNull() && m_third_party_answer_card_isValid;

    m_work_in_progress_card_proto_isValid = ::OpenAPI::fromJsonValue(m_work_in_progress_card_proto, json[QString("workInProgressCardProto")]);
    m_work_in_progress_card_proto_isSet = !json[QString("workInProgressCardProto")].isNull() && m_work_in_progress_card_proto_isValid;
}

QString OAIEnterpriseTopazSidekickAssistCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickAssistCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_agenda_group_card_proto.isSet()) {
        obj.insert(QString("agendaGroupCardProto"), ::OpenAPI::toJsonValue(m_agenda_group_card_proto));
    }
    if (m_card_metadata.isSet()) {
        obj.insert(QString("cardMetadata"), ::OpenAPI::toJsonValue(m_card_metadata));
    }
    if (m_card_type_isSet) {
        obj.insert(QString("cardType"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_conflicting_meetings_card.isSet()) {
        obj.insert(QString("conflictingMeetingsCard"), ::OpenAPI::toJsonValue(m_conflicting_meetings_card));
    }
    if (m_document_list_card.isSet()) {
        obj.insert(QString("documentListCard"), ::OpenAPI::toJsonValue(m_document_list_card));
    }
    if (m_documents_with_mentions.isSet()) {
        obj.insert(QString("documentsWithMentions"), ::OpenAPI::toJsonValue(m_documents_with_mentions));
    }
    if (m_find_meeting_time_card.isSet()) {
        obj.insert(QString("findMeetingTimeCard"), ::OpenAPI::toJsonValue(m_find_meeting_time_card));
    }
    if (m_generic_answer_card.isSet()) {
        obj.insert(QString("genericAnswerCard"), ::OpenAPI::toJsonValue(m_generic_answer_card));
    }
    if (m_get_and_keep_ahead_card.isSet()) {
        obj.insert(QString("getAndKeepAheadCard"), ::OpenAPI::toJsonValue(m_get_and_keep_ahead_card));
    }
    if (m_meeting.isSet()) {
        obj.insert(QString("meeting"), ::OpenAPI::toJsonValue(m_meeting));
    }
    if (m_meeting_notes_card.isSet()) {
        obj.insert(QString("meetingNotesCard"), ::OpenAPI::toJsonValue(m_meeting_notes_card));
    }
    if (m_meeting_notes_card_request.isSet()) {
        obj.insert(QString("meetingNotesCardRequest"), ::OpenAPI::toJsonValue(m_meeting_notes_card_request));
    }
    if (m_people_disambiguation_card.isSet()) {
        obj.insert(QString("peopleDisambiguationCard"), ::OpenAPI::toJsonValue(m_people_disambiguation_card));
    }
    if (m_people_promotion_card.isSet()) {
        obj.insert(QString("peoplePromotionCard"), ::OpenAPI::toJsonValue(m_people_promotion_card));
    }
    if (m_person_answer_card.isSet()) {
        obj.insert(QString("personAnswerCard"), ::OpenAPI::toJsonValue(m_person_answer_card));
    }
    if (m_person_profile_card.isSet()) {
        obj.insert(QString("personProfileCard"), ::OpenAPI::toJsonValue(m_person_profile_card));
    }
    if (m_personalized_docs_card.isSet()) {
        obj.insert(QString("personalizedDocsCard"), ::OpenAPI::toJsonValue(m_personalized_docs_card));
    }
    if (m_related_people_answer_card.isSet()) {
        obj.insert(QString("relatedPeopleAnswerCard"), ::OpenAPI::toJsonValue(m_related_people_answer_card));
    }
    if (m_share_meeting_docs_card.isSet()) {
        obj.insert(QString("shareMeetingDocsCard"), ::OpenAPI::toJsonValue(m_share_meeting_docs_card));
    }
    if (m_shared_documents.isSet()) {
        obj.insert(QString("sharedDocuments"), ::OpenAPI::toJsonValue(m_shared_documents));
    }
    if (m_suggested_query_answer_card.isSet()) {
        obj.insert(QString("suggestedQueryAnswerCard"), ::OpenAPI::toJsonValue(m_suggested_query_answer_card));
    }
    if (m_third_party_answer_card.isSet()) {
        obj.insert(QString("thirdPartyAnswerCard"), ::OpenAPI::toJsonValue(m_third_party_answer_card));
    }
    if (m_work_in_progress_card_proto.isSet()) {
        obj.insert(QString("workInProgressCardProto"), ::OpenAPI::toJsonValue(m_work_in_progress_card_proto));
    }
    return obj;
}

OAIEnterpriseTopazSidekickAgendaGroupCardProto OAIEnterpriseTopazSidekickAssistCardProto::getAgendaGroupCardProto() const {
    return m_agenda_group_card_proto;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setAgendaGroupCardProto(const OAIEnterpriseTopazSidekickAgendaGroupCardProto &agenda_group_card_proto) {
    m_agenda_group_card_proto = agenda_group_card_proto;
    m_agenda_group_card_proto_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_agenda_group_card_proto_Set() const{
    return m_agenda_group_card_proto_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_agenda_group_card_proto_Valid() const{
    return m_agenda_group_card_proto_isValid;
}

OAIEnterpriseTopazSidekickCardMetadata OAIEnterpriseTopazSidekickAssistCardProto::getCardMetadata() const {
    return m_card_metadata;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setCardMetadata(const OAIEnterpriseTopazSidekickCardMetadata &card_metadata) {
    m_card_metadata = card_metadata;
    m_card_metadata_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_card_metadata_Set() const{
    return m_card_metadata_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_card_metadata_Valid() const{
    return m_card_metadata_isValid;
}

QString OAIEnterpriseTopazSidekickAssistCardProto::getCardType() const {
    return m_card_type;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setCardType(const QString &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_card_type_Valid() const{
    return m_card_type_isValid;
}

OAIEnterpriseTopazSidekickConflictingEventsCardProto OAIEnterpriseTopazSidekickAssistCardProto::getConflictingMeetingsCard() const {
    return m_conflicting_meetings_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setConflictingMeetingsCard(const OAIEnterpriseTopazSidekickConflictingEventsCardProto &conflicting_meetings_card) {
    m_conflicting_meetings_card = conflicting_meetings_card;
    m_conflicting_meetings_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_conflicting_meetings_card_Set() const{
    return m_conflicting_meetings_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_conflicting_meetings_card_Valid() const{
    return m_conflicting_meetings_card_isValid;
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList OAIEnterpriseTopazSidekickAssistCardProto::getDocumentListCard() const {
    return m_document_list_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setDocumentListCard(const OAIEnterpriseTopazSidekickDocumentPerCategoryList &document_list_card) {
    m_document_list_card = document_list_card;
    m_document_list_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_document_list_card_Set() const{
    return m_document_list_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_document_list_card_Valid() const{
    return m_document_list_card_isValid;
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList OAIEnterpriseTopazSidekickAssistCardProto::getDocumentsWithMentions() const {
    return m_documents_with_mentions;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setDocumentsWithMentions(const OAIEnterpriseTopazSidekickDocumentPerCategoryList &documents_with_mentions) {
    m_documents_with_mentions = documents_with_mentions;
    m_documents_with_mentions_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_documents_with_mentions_Set() const{
    return m_documents_with_mentions_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_documents_with_mentions_Valid() const{
    return m_documents_with_mentions_isValid;
}

OAIEnterpriseTopazSidekickFindMeetingTimeCardProto OAIEnterpriseTopazSidekickAssistCardProto::getFindMeetingTimeCard() const {
    return m_find_meeting_time_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setFindMeetingTimeCard(const OAIEnterpriseTopazSidekickFindMeetingTimeCardProto &find_meeting_time_card) {
    m_find_meeting_time_card = find_meeting_time_card;
    m_find_meeting_time_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_find_meeting_time_card_Set() const{
    return m_find_meeting_time_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_find_meeting_time_card_Valid() const{
    return m_find_meeting_time_card_isValid;
}

OAIEnterpriseTopazSidekickGenericAnswerCard OAIEnterpriseTopazSidekickAssistCardProto::getGenericAnswerCard() const {
    return m_generic_answer_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setGenericAnswerCard(const OAIEnterpriseTopazSidekickGenericAnswerCard &generic_answer_card) {
    m_generic_answer_card = generic_answer_card;
    m_generic_answer_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_generic_answer_card_Set() const{
    return m_generic_answer_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_generic_answer_card_Valid() const{
    return m_generic_answer_card_isValid;
}

OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto OAIEnterpriseTopazSidekickAssistCardProto::getGetAndKeepAheadCard() const {
    return m_get_and_keep_ahead_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setGetAndKeepAheadCard(const OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto &get_and_keep_ahead_card) {
    m_get_and_keep_ahead_card = get_and_keep_ahead_card;
    m_get_and_keep_ahead_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_get_and_keep_ahead_card_Set() const{
    return m_get_and_keep_ahead_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_get_and_keep_ahead_card_Valid() const{
    return m_get_and_keep_ahead_card_isValid;
}

OAIEnterpriseTopazSidekickAgendaEntry OAIEnterpriseTopazSidekickAssistCardProto::getMeeting() const {
    return m_meeting;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setMeeting(const OAIEnterpriseTopazSidekickAgendaEntry &meeting) {
    m_meeting = meeting;
    m_meeting_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_Set() const{
    return m_meeting_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_Valid() const{
    return m_meeting_isValid;
}

OAIEnterpriseTopazSidekickMeetingNotesCardProto OAIEnterpriseTopazSidekickAssistCardProto::getMeetingNotesCard() const {
    return m_meeting_notes_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setMeetingNotesCard(const OAIEnterpriseTopazSidekickMeetingNotesCardProto &meeting_notes_card) {
    m_meeting_notes_card = meeting_notes_card;
    m_meeting_notes_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_notes_card_Set() const{
    return m_meeting_notes_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_notes_card_Valid() const{
    return m_meeting_notes_card_isValid;
}

OAIEnterpriseTopazSidekickMeetingNotesCardRequest OAIEnterpriseTopazSidekickAssistCardProto::getMeetingNotesCardRequest() const {
    return m_meeting_notes_card_request;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setMeetingNotesCardRequest(const OAIEnterpriseTopazSidekickMeetingNotesCardRequest &meeting_notes_card_request) {
    m_meeting_notes_card_request = meeting_notes_card_request;
    m_meeting_notes_card_request_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_notes_card_request_Set() const{
    return m_meeting_notes_card_request_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_meeting_notes_card_request_Valid() const{
    return m_meeting_notes_card_request_isValid;
}

OAIEnterpriseTopazSidekickPeopleDisambiguationCard OAIEnterpriseTopazSidekickAssistCardProto::getPeopleDisambiguationCard() const {
    return m_people_disambiguation_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setPeopleDisambiguationCard(const OAIEnterpriseTopazSidekickPeopleDisambiguationCard &people_disambiguation_card) {
    m_people_disambiguation_card = people_disambiguation_card;
    m_people_disambiguation_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_people_disambiguation_card_Set() const{
    return m_people_disambiguation_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_people_disambiguation_card_Valid() const{
    return m_people_disambiguation_card_isValid;
}

OAIPeoplePromotionCard OAIEnterpriseTopazSidekickAssistCardProto::getPeoplePromotionCard() const {
    return m_people_promotion_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setPeoplePromotionCard(const OAIPeoplePromotionCard &people_promotion_card) {
    m_people_promotion_card = people_promotion_card;
    m_people_promotion_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_people_promotion_card_Set() const{
    return m_people_promotion_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_people_promotion_card_Valid() const{
    return m_people_promotion_card_isValid;
}

OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard OAIEnterpriseTopazSidekickAssistCardProto::getPersonAnswerCard() const {
    return m_person_answer_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setPersonAnswerCard(const OAIEnterpriseTopazSidekickPeopleAnswerPersonAnswerCard &person_answer_card) {
    m_person_answer_card = person_answer_card;
    m_person_answer_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_person_answer_card_Set() const{
    return m_person_answer_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_person_answer_card_Valid() const{
    return m_person_answer_card_isValid;
}

OAIEnterpriseTopazSidekickPersonProfileCard OAIEnterpriseTopazSidekickAssistCardProto::getPersonProfileCard() const {
    return m_person_profile_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setPersonProfileCard(const OAIEnterpriseTopazSidekickPersonProfileCard &person_profile_card) {
    m_person_profile_card = person_profile_card;
    m_person_profile_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_person_profile_card_Set() const{
    return m_person_profile_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_person_profile_card_Valid() const{
    return m_person_profile_card_isValid;
}

OAIEnterpriseTopazSidekickPersonalizedDocsCardProto OAIEnterpriseTopazSidekickAssistCardProto::getPersonalizedDocsCard() const {
    return m_personalized_docs_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setPersonalizedDocsCard(const OAIEnterpriseTopazSidekickPersonalizedDocsCardProto &personalized_docs_card) {
    m_personalized_docs_card = personalized_docs_card;
    m_personalized_docs_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_personalized_docs_card_Set() const{
    return m_personalized_docs_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_personalized_docs_card_Valid() const{
    return m_personalized_docs_card_isValid;
}

OAIEnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard OAIEnterpriseTopazSidekickAssistCardProto::getRelatedPeopleAnswerCard() const {
    return m_related_people_answer_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setRelatedPeopleAnswerCard(const OAIEnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard &related_people_answer_card) {
    m_related_people_answer_card = related_people_answer_card;
    m_related_people_answer_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_related_people_answer_card_Set() const{
    return m_related_people_answer_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_related_people_answer_card_Valid() const{
    return m_related_people_answer_card_isValid;
}

OAIEnterpriseTopazSidekickShareMeetingDocsCardProto OAIEnterpriseTopazSidekickAssistCardProto::getShareMeetingDocsCard() const {
    return m_share_meeting_docs_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setShareMeetingDocsCard(const OAIEnterpriseTopazSidekickShareMeetingDocsCardProto &share_meeting_docs_card) {
    m_share_meeting_docs_card = share_meeting_docs_card;
    m_share_meeting_docs_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_share_meeting_docs_card_Set() const{
    return m_share_meeting_docs_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_share_meeting_docs_card_Valid() const{
    return m_share_meeting_docs_card_isValid;
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList OAIEnterpriseTopazSidekickAssistCardProto::getSharedDocuments() const {
    return m_shared_documents;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setSharedDocuments(const OAIEnterpriseTopazSidekickDocumentPerCategoryList &shared_documents) {
    m_shared_documents = shared_documents;
    m_shared_documents_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_shared_documents_Set() const{
    return m_shared_documents_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_shared_documents_Valid() const{
    return m_shared_documents_isValid;
}

OAIEnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard OAIEnterpriseTopazSidekickAssistCardProto::getSuggestedQueryAnswerCard() const {
    return m_suggested_query_answer_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setSuggestedQueryAnswerCard(const OAIEnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard &suggested_query_answer_card) {
    m_suggested_query_answer_card = suggested_query_answer_card;
    m_suggested_query_answer_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_suggested_query_answer_card_Set() const{
    return m_suggested_query_answer_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_suggested_query_answer_card_Valid() const{
    return m_suggested_query_answer_card_isValid;
}

OAIThirdPartyGenericCard OAIEnterpriseTopazSidekickAssistCardProto::getThirdPartyAnswerCard() const {
    return m_third_party_answer_card;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setThirdPartyAnswerCard(const OAIThirdPartyGenericCard &third_party_answer_card) {
    m_third_party_answer_card = third_party_answer_card;
    m_third_party_answer_card_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_third_party_answer_card_Set() const{
    return m_third_party_answer_card_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_third_party_answer_card_Valid() const{
    return m_third_party_answer_card_isValid;
}

OAIEnterpriseTopazSidekickRecentDocumentsCardProto OAIEnterpriseTopazSidekickAssistCardProto::getWorkInProgressCardProto() const {
    return m_work_in_progress_card_proto;
}
void OAIEnterpriseTopazSidekickAssistCardProto::setWorkInProgressCardProto(const OAIEnterpriseTopazSidekickRecentDocumentsCardProto &work_in_progress_card_proto) {
    m_work_in_progress_card_proto = work_in_progress_card_proto;
    m_work_in_progress_card_proto_isSet = true;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_work_in_progress_card_proto_Set() const{
    return m_work_in_progress_card_proto_isSet;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::is_work_in_progress_card_proto_Valid() const{
    return m_work_in_progress_card_proto_isValid;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agenda_group_card_proto.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflicting_meetings_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_list_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents_with_mentions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_find_meeting_time_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_answer_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_and_keep_ahead_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_notes_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_notes_card_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_disambiguation_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_promotion_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_answer_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_profile_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personalized_docs_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_people_answer_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_meeting_docs_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_query_answer_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_answer_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_in_progress_card_proto.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickAssistCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
