/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextOperatorOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextOperatorOptions::OAITextOperatorOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextOperatorOptions::OAITextOperatorOptions() {
    this->initializeModel();
}

OAITextOperatorOptions::~OAITextOperatorOptions() {}

void OAITextOperatorOptions::initializeModel() {

    m_exact_match_with_operator_isSet = false;
    m_exact_match_with_operator_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;
}

void OAITextOperatorOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextOperatorOptions::fromJsonObject(QJsonObject json) {

    m_exact_match_with_operator_isValid = ::OpenAPI::fromJsonValue(m_exact_match_with_operator, json[QString("exactMatchWithOperator")]);
    m_exact_match_with_operator_isSet = !json[QString("exactMatchWithOperator")].isNull() && m_exact_match_with_operator_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("operatorName")]);
    m_operator_name_isSet = !json[QString("operatorName")].isNull() && m_operator_name_isValid;
}

QString OAITextOperatorOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextOperatorOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_match_with_operator_isSet) {
        obj.insert(QString("exactMatchWithOperator"), ::OpenAPI::toJsonValue(m_exact_match_with_operator));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("operatorName"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    return obj;
}

bool OAITextOperatorOptions::isExactMatchWithOperator() const {
    return m_exact_match_with_operator;
}
void OAITextOperatorOptions::setExactMatchWithOperator(const bool &exact_match_with_operator) {
    m_exact_match_with_operator = exact_match_with_operator;
    m_exact_match_with_operator_isSet = true;
}

bool OAITextOperatorOptions::is_exact_match_with_operator_Set() const{
    return m_exact_match_with_operator_isSet;
}

bool OAITextOperatorOptions::is_exact_match_with_operator_Valid() const{
    return m_exact_match_with_operator_isValid;
}

QString OAITextOperatorOptions::getOperatorName() const {
    return m_operator_name;
}
void OAITextOperatorOptions::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAITextOperatorOptions::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAITextOperatorOptions::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

bool OAITextOperatorOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_match_with_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextOperatorOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
