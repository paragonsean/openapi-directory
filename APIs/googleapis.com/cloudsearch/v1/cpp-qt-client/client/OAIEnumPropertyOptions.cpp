/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumPropertyOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumPropertyOptions::OAIEnumPropertyOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumPropertyOptions::OAIEnumPropertyOptions() {
    this->initializeModel();
}

OAIEnumPropertyOptions::~OAIEnumPropertyOptions() {}

void OAIEnumPropertyOptions::initializeModel() {

    m_operator_options_isSet = false;
    m_operator_options_isValid = false;

    m_ordered_ranking_isSet = false;
    m_ordered_ranking_isValid = false;

    m_possible_values_isSet = false;
    m_possible_values_isValid = false;
}

void OAIEnumPropertyOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnumPropertyOptions::fromJsonObject(QJsonObject json) {

    m_operator_options_isValid = ::OpenAPI::fromJsonValue(m_operator_options, json[QString("operatorOptions")]);
    m_operator_options_isSet = !json[QString("operatorOptions")].isNull() && m_operator_options_isValid;

    m_ordered_ranking_isValid = ::OpenAPI::fromJsonValue(m_ordered_ranking, json[QString("orderedRanking")]);
    m_ordered_ranking_isSet = !json[QString("orderedRanking")].isNull() && m_ordered_ranking_isValid;

    m_possible_values_isValid = ::OpenAPI::fromJsonValue(m_possible_values, json[QString("possibleValues")]);
    m_possible_values_isSet = !json[QString("possibleValues")].isNull() && m_possible_values_isValid;
}

QString OAIEnumPropertyOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnumPropertyOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_operator_options.isSet()) {
        obj.insert(QString("operatorOptions"), ::OpenAPI::toJsonValue(m_operator_options));
    }
    if (m_ordered_ranking_isSet) {
        obj.insert(QString("orderedRanking"), ::OpenAPI::toJsonValue(m_ordered_ranking));
    }
    if (m_possible_values.size() > 0) {
        obj.insert(QString("possibleValues"), ::OpenAPI::toJsonValue(m_possible_values));
    }
    return obj;
}

OAIEnumOperatorOptions OAIEnumPropertyOptions::getOperatorOptions() const {
    return m_operator_options;
}
void OAIEnumPropertyOptions::setOperatorOptions(const OAIEnumOperatorOptions &operator_options) {
    m_operator_options = operator_options;
    m_operator_options_isSet = true;
}

bool OAIEnumPropertyOptions::is_operator_options_Set() const{
    return m_operator_options_isSet;
}

bool OAIEnumPropertyOptions::is_operator_options_Valid() const{
    return m_operator_options_isValid;
}

QString OAIEnumPropertyOptions::getOrderedRanking() const {
    return m_ordered_ranking;
}
void OAIEnumPropertyOptions::setOrderedRanking(const QString &ordered_ranking) {
    m_ordered_ranking = ordered_ranking;
    m_ordered_ranking_isSet = true;
}

bool OAIEnumPropertyOptions::is_ordered_ranking_Set() const{
    return m_ordered_ranking_isSet;
}

bool OAIEnumPropertyOptions::is_ordered_ranking_Valid() const{
    return m_ordered_ranking_isValid;
}

QList<OAIEnumValuePair> OAIEnumPropertyOptions::getPossibleValues() const {
    return m_possible_values;
}
void OAIEnumPropertyOptions::setPossibleValues(const QList<OAIEnumValuePair> &possible_values) {
    m_possible_values = possible_values;
    m_possible_values_isSet = true;
}

bool OAIEnumPropertyOptions::is_possible_values_Set() const{
    return m_possible_values_isSet;
}

bool OAIEnumPropertyOptions::is_possible_values_Valid() const{
    return m_possible_values_isValid;
}

bool OAIEnumPropertyOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operator_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnumPropertyOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
