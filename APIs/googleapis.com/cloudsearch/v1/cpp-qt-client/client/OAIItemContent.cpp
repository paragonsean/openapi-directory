/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemContent::OAIItemContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemContent::OAIItemContent() {
    this->initializeModel();
}

OAIItemContent::~OAIItemContent() {}

void OAIItemContent::initializeModel() {

    m_content_data_ref_isSet = false;
    m_content_data_ref_isValid = false;

    m_content_format_isSet = false;
    m_content_format_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_inline_content_isSet = false;
    m_inline_content_isValid = false;
}

void OAIItemContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemContent::fromJsonObject(QJsonObject json) {

    m_content_data_ref_isValid = ::OpenAPI::fromJsonValue(m_content_data_ref, json[QString("contentDataRef")]);
    m_content_data_ref_isSet = !json[QString("contentDataRef")].isNull() && m_content_data_ref_isValid;

    m_content_format_isValid = ::OpenAPI::fromJsonValue(m_content_format, json[QString("contentFormat")]);
    m_content_format_isSet = !json[QString("contentFormat")].isNull() && m_content_format_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_inline_content_isValid = ::OpenAPI::fromJsonValue(m_inline_content, json[QString("inlineContent")]);
    m_inline_content_isSet = !json[QString("inlineContent")].isNull() && m_inline_content_isValid;
}

QString OAIItemContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemContent::asJsonObject() const {
    QJsonObject obj;
    if (m_content_data_ref.isSet()) {
        obj.insert(QString("contentDataRef"), ::OpenAPI::toJsonValue(m_content_data_ref));
    }
    if (m_content_format_isSet) {
        obj.insert(QString("contentFormat"), ::OpenAPI::toJsonValue(m_content_format));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_inline_content_isSet) {
        obj.insert(QString("inlineContent"), ::OpenAPI::toJsonValue(m_inline_content));
    }
    return obj;
}

OAIUploadItemRef OAIItemContent::getContentDataRef() const {
    return m_content_data_ref;
}
void OAIItemContent::setContentDataRef(const OAIUploadItemRef &content_data_ref) {
    m_content_data_ref = content_data_ref;
    m_content_data_ref_isSet = true;
}

bool OAIItemContent::is_content_data_ref_Set() const{
    return m_content_data_ref_isSet;
}

bool OAIItemContent::is_content_data_ref_Valid() const{
    return m_content_data_ref_isValid;
}

QString OAIItemContent::getContentFormat() const {
    return m_content_format;
}
void OAIItemContent::setContentFormat(const QString &content_format) {
    m_content_format = content_format;
    m_content_format_isSet = true;
}

bool OAIItemContent::is_content_format_Set() const{
    return m_content_format_isSet;
}

bool OAIItemContent::is_content_format_Valid() const{
    return m_content_format_isValid;
}

QString OAIItemContent::getHash() const {
    return m_hash;
}
void OAIItemContent::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIItemContent::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIItemContent::is_hash_Valid() const{
    return m_hash_isValid;
}

QByteArray OAIItemContent::getInlineContent() const {
    return m_inline_content;
}
void OAIItemContent::setInlineContent(const QByteArray &inline_content) {
    m_inline_content = inline_content;
    m_inline_content_isSet = true;
}

bool OAIItemContent::is_inline_content_Set() const{
    return m_inline_content_isSet;
}

bool OAIItemContent::is_inline_content_Valid() const{
    return m_inline_content_isValid;
}

bool OAIItemContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_data_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
