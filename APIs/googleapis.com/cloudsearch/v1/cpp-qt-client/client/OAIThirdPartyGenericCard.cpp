/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyGenericCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyGenericCard::OAIThirdPartyGenericCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyGenericCard::OAIThirdPartyGenericCard() {
    this->initializeModel();
}

OAIThirdPartyGenericCard::~OAIThirdPartyGenericCard() {}

void OAIThirdPartyGenericCard::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_is_dismissible_isSet = false;
    m_is_dismissible_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIThirdPartyGenericCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyGenericCard::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("cardId")]);
    m_card_id_isSet = !json[QString("cardId")].isNull() && m_card_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_is_dismissible_isValid = ::OpenAPI::fromJsonValue(m_is_dismissible, json[QString("isDismissible")]);
    m_is_dismissible_isSet = !json[QString("isDismissible")].isNull() && m_is_dismissible_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIThirdPartyGenericCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyGenericCard::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("cardId"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_is_dismissible_isSet) {
        obj.insert(QString("isDismissible"), ::OpenAPI::toJsonValue(m_is_dismissible));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

QString OAIThirdPartyGenericCard::getCardId() const {
    return m_card_id;
}
void OAIThirdPartyGenericCard::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIThirdPartyGenericCard::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIThirdPartyGenericCard::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIThirdPartyGenericCard::getCategory() const {
    return m_category;
}
void OAIThirdPartyGenericCard::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIThirdPartyGenericCard::is_category_Set() const{
    return m_category_isSet;
}

bool OAIThirdPartyGenericCard::is_category_Valid() const{
    return m_category_isValid;
}

OAIContent OAIThirdPartyGenericCard::getContent() const {
    return m_content;
}
void OAIThirdPartyGenericCard::setContent(const OAIContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIThirdPartyGenericCard::is_content_Set() const{
    return m_content_isSet;
}

bool OAIThirdPartyGenericCard::is_content_Valid() const{
    return m_content_isValid;
}

OAIContext OAIThirdPartyGenericCard::getContext() const {
    return m_context;
}
void OAIThirdPartyGenericCard::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIThirdPartyGenericCard::is_context_Set() const{
    return m_context_isSet;
}

bool OAIThirdPartyGenericCard::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIThirdPartyGenericCard::isIsDismissible() const {
    return m_is_dismissible;
}
void OAIThirdPartyGenericCard::setIsDismissible(const bool &is_dismissible) {
    m_is_dismissible = is_dismissible;
    m_is_dismissible_isSet = true;
}

bool OAIThirdPartyGenericCard::is_is_dismissible_Set() const{
    return m_is_dismissible_isSet;
}

bool OAIThirdPartyGenericCard::is_is_dismissible_Valid() const{
    return m_is_dismissible_isValid;
}

qint32 OAIThirdPartyGenericCard::getPriority() const {
    return m_priority;
}
void OAIThirdPartyGenericCard::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIThirdPartyGenericCard::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIThirdPartyGenericCard::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIThirdPartyGenericCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dismissible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyGenericCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
