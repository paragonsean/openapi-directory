/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickCommonDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickCommonDocument::OAIEnterpriseTopazSidekickCommonDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickCommonDocument::OAIEnterpriseTopazSidekickCommonDocument() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickCommonDocument::~OAIEnterpriseTopazSidekickCommonDocument() {}

void OAIEnterpriseTopazSidekickCommonDocument::initializeModel() {

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_drive_document_metadata_isSet = false;
    m_drive_document_metadata_isValid = false;

    m_generic_url_isSet = false;
    m_generic_url_isValid = false;

    m_justification_isSet = false;
    m_justification_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEnterpriseTopazSidekickCommonDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickCommonDocument::fromJsonObject(QJsonObject json) {

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("accessType")]);
    m_access_type_isSet = !json[QString("accessType")].isNull() && m_access_type_isValid;

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_drive_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_drive_document_metadata, json[QString("driveDocumentMetadata")]);
    m_drive_document_metadata_isSet = !json[QString("driveDocumentMetadata")].isNull() && m_drive_document_metadata_isValid;

    m_generic_url_isValid = ::OpenAPI::fromJsonValue(m_generic_url, json[QString("genericUrl")]);
    m_generic_url_isSet = !json[QString("genericUrl")].isNull() && m_generic_url_isValid;

    m_justification_isValid = ::OpenAPI::fromJsonValue(m_justification, json[QString("justification")]);
    m_justification_isSet = !json[QString("justification")].isNull() && m_justification_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickCommonDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_access_type_isSet) {
        obj.insert(QString("accessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_debug_info.isSet()) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_drive_document_metadata.isSet()) {
        obj.insert(QString("driveDocumentMetadata"), ::OpenAPI::toJsonValue(m_drive_document_metadata));
    }
    if (m_generic_url_isSet) {
        obj.insert(QString("genericUrl"), ::OpenAPI::toJsonValue(m_generic_url));
    }
    if (m_justification.isSet()) {
        obj.insert(QString("justification"), ::OpenAPI::toJsonValue(m_justification));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_provenance_isSet) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getAccessType() const {
    return m_access_type;
}
void OAIEnterpriseTopazSidekickCommonDocument::setAccessType(const QString &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_access_type_Valid() const{
    return m_access_type_isValid;
}

OAIEnterpriseTopazSidekickCommonDebugInfo OAIEnterpriseTopazSidekickCommonDocument::getDebugInfo() const {
    return m_debug_info;
}
void OAIEnterpriseTopazSidekickCommonDocument::setDebugInfo(const OAIEnterpriseTopazSidekickCommonDebugInfo &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getDocumentId() const {
    return m_document_id;
}
void OAIEnterpriseTopazSidekickCommonDocument::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAIEnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata OAIEnterpriseTopazSidekickCommonDocument::getDriveDocumentMetadata() const {
    return m_drive_document_metadata;
}
void OAIEnterpriseTopazSidekickCommonDocument::setDriveDocumentMetadata(const OAIEnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata &drive_document_metadata) {
    m_drive_document_metadata = drive_document_metadata;
    m_drive_document_metadata_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_drive_document_metadata_Set() const{
    return m_drive_document_metadata_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_drive_document_metadata_Valid() const{
    return m_drive_document_metadata_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getGenericUrl() const {
    return m_generic_url;
}
void OAIEnterpriseTopazSidekickCommonDocument::setGenericUrl(const QString &generic_url) {
    m_generic_url = generic_url;
    m_generic_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_generic_url_Set() const{
    return m_generic_url_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_generic_url_Valid() const{
    return m_generic_url_isValid;
}

OAIEnterpriseTopazSidekickCommonDocumentJustification OAIEnterpriseTopazSidekickCommonDocument::getJustification() const {
    return m_justification;
}
void OAIEnterpriseTopazSidekickCommonDocument::setJustification(const OAIEnterpriseTopazSidekickCommonDocumentJustification &justification) {
    m_justification = justification;
    m_justification_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_justification_Set() const{
    return m_justification_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_justification_Valid() const{
    return m_justification_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getMimeType() const {
    return m_mime_type;
}
void OAIEnterpriseTopazSidekickCommonDocument::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getProvenance() const {
    return m_provenance;
}
void OAIEnterpriseTopazSidekickCommonDocument::setProvenance(const QString &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_provenance_Valid() const{
    return m_provenance_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getReason() const {
    return m_reason;
}
void OAIEnterpriseTopazSidekickCommonDocument::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getSnippet() const {
    return m_snippet;
}
void OAIEnterpriseTopazSidekickCommonDocument::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIEnterpriseTopazSidekickCommonDocument::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getTitle() const {
    return m_title;
}
void OAIEnterpriseTopazSidekickCommonDocument::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getType() const {
    return m_type;
}
void OAIEnterpriseTopazSidekickCommonDocument::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEnterpriseTopazSidekickCommonDocument::getUrl() const {
    return m_url;
}
void OAIEnterpriseTopazSidekickCommonDocument::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEnterpriseTopazSidekickCommonDocument::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEnterpriseTopazSidekickCommonDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_justification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickCommonDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
