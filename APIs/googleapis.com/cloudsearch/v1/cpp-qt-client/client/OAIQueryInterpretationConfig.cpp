/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInterpretationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInterpretationConfig::OAIQueryInterpretationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInterpretationConfig::OAIQueryInterpretationConfig() {
    this->initializeModel();
}

OAIQueryInterpretationConfig::~OAIQueryInterpretationConfig() {}

void OAIQueryInterpretationConfig::initializeModel() {

    m_force_disable_supplemental_results_isSet = false;
    m_force_disable_supplemental_results_isValid = false;

    m_force_verbatim_mode_isSet = false;
    m_force_verbatim_mode_isValid = false;
}

void OAIQueryInterpretationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInterpretationConfig::fromJsonObject(QJsonObject json) {

    m_force_disable_supplemental_results_isValid = ::OpenAPI::fromJsonValue(m_force_disable_supplemental_results, json[QString("forceDisableSupplementalResults")]);
    m_force_disable_supplemental_results_isSet = !json[QString("forceDisableSupplementalResults")].isNull() && m_force_disable_supplemental_results_isValid;

    m_force_verbatim_mode_isValid = ::OpenAPI::fromJsonValue(m_force_verbatim_mode, json[QString("forceVerbatimMode")]);
    m_force_verbatim_mode_isSet = !json[QString("forceVerbatimMode")].isNull() && m_force_verbatim_mode_isValid;
}

QString OAIQueryInterpretationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInterpretationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_force_disable_supplemental_results_isSet) {
        obj.insert(QString("forceDisableSupplementalResults"), ::OpenAPI::toJsonValue(m_force_disable_supplemental_results));
    }
    if (m_force_verbatim_mode_isSet) {
        obj.insert(QString("forceVerbatimMode"), ::OpenAPI::toJsonValue(m_force_verbatim_mode));
    }
    return obj;
}

bool OAIQueryInterpretationConfig::isForceDisableSupplementalResults() const {
    return m_force_disable_supplemental_results;
}
void OAIQueryInterpretationConfig::setForceDisableSupplementalResults(const bool &force_disable_supplemental_results) {
    m_force_disable_supplemental_results = force_disable_supplemental_results;
    m_force_disable_supplemental_results_isSet = true;
}

bool OAIQueryInterpretationConfig::is_force_disable_supplemental_results_Set() const{
    return m_force_disable_supplemental_results_isSet;
}

bool OAIQueryInterpretationConfig::is_force_disable_supplemental_results_Valid() const{
    return m_force_disable_supplemental_results_isValid;
}

bool OAIQueryInterpretationConfig::isForceVerbatimMode() const {
    return m_force_verbatim_mode;
}
void OAIQueryInterpretationConfig::setForceVerbatimMode(const bool &force_verbatim_mode) {
    m_force_verbatim_mode = force_verbatim_mode;
    m_force_verbatim_mode_isSet = true;
}

bool OAIQueryInterpretationConfig::is_force_verbatim_mode_Set() const{
    return m_force_verbatim_mode_isSet;
}

bool OAIQueryInterpretationConfig::is_force_verbatim_mode_Valid() const{
    return m_force_verbatim_mode_isValid;
}

bool OAIQueryInterpretationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_disable_supplemental_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_verbatim_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInterpretationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
