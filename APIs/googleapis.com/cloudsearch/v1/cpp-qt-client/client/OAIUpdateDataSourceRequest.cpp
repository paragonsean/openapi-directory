/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSourceRequest::OAIUpdateDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSourceRequest::OAIUpdateDataSourceRequest() {
    this->initializeModel();
}

OAIUpdateDataSourceRequest::~OAIUpdateDataSourceRequest() {}

void OAIUpdateDataSourceRequest::initializeModel() {

    m_debug_options_isSet = false;
    m_debug_options_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIUpdateDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_debug_options_isValid = ::OpenAPI::fromJsonValue(m_debug_options, json[QString("debugOptions")]);
    m_debug_options_isSet = !json[QString("debugOptions")].isNull() && m_debug_options_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIUpdateDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_options.isSet()) {
        obj.insert(QString("debugOptions"), ::OpenAPI::toJsonValue(m_debug_options));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIDebugOptions OAIUpdateDataSourceRequest::getDebugOptions() const {
    return m_debug_options;
}
void OAIUpdateDataSourceRequest::setDebugOptions(const OAIDebugOptions &debug_options) {
    m_debug_options = debug_options;
    m_debug_options_isSet = true;
}

bool OAIUpdateDataSourceRequest::is_debug_options_Set() const{
    return m_debug_options_isSet;
}

bool OAIUpdateDataSourceRequest::is_debug_options_Valid() const{
    return m_debug_options_isValid;
}

OAIDataSource OAIUpdateDataSourceRequest::getSource() const {
    return m_source;
}
void OAIUpdateDataSourceRequest::setSource(const OAIDataSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUpdateDataSourceRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUpdateDataSourceRequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIUpdateDataSourceRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIUpdateDataSourceRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIUpdateDataSourceRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIUpdateDataSourceRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIUpdateDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
