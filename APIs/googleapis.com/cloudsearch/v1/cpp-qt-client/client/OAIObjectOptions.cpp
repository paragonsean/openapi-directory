/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectOptions::OAIObjectOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectOptions::OAIObjectOptions() {
    this->initializeModel();
}

OAIObjectOptions::~OAIObjectOptions() {}

void OAIObjectOptions::initializeModel() {

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_freshness_options_isSet = false;
    m_freshness_options_isValid = false;

    m_suggestion_filtering_operators_isSet = false;
    m_suggestion_filtering_operators_isValid = false;
}

void OAIObjectOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectOptions::fromJsonObject(QJsonObject json) {

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("displayOptions")]);
    m_display_options_isSet = !json[QString("displayOptions")].isNull() && m_display_options_isValid;

    m_freshness_options_isValid = ::OpenAPI::fromJsonValue(m_freshness_options, json[QString("freshnessOptions")]);
    m_freshness_options_isSet = !json[QString("freshnessOptions")].isNull() && m_freshness_options_isValid;

    m_suggestion_filtering_operators_isValid = ::OpenAPI::fromJsonValue(m_suggestion_filtering_operators, json[QString("suggestionFilteringOperators")]);
    m_suggestion_filtering_operators_isSet = !json[QString("suggestionFilteringOperators")].isNull() && m_suggestion_filtering_operators_isValid;
}

QString OAIObjectOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_display_options.isSet()) {
        obj.insert(QString("displayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_freshness_options.isSet()) {
        obj.insert(QString("freshnessOptions"), ::OpenAPI::toJsonValue(m_freshness_options));
    }
    if (m_suggestion_filtering_operators.size() > 0) {
        obj.insert(QString("suggestionFilteringOperators"), ::OpenAPI::toJsonValue(m_suggestion_filtering_operators));
    }
    return obj;
}

OAIObjectDisplayOptions OAIObjectOptions::getDisplayOptions() const {
    return m_display_options;
}
void OAIObjectOptions::setDisplayOptions(const OAIObjectDisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIObjectOptions::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIObjectOptions::is_display_options_Valid() const{
    return m_display_options_isValid;
}

OAIFreshnessOptions OAIObjectOptions::getFreshnessOptions() const {
    return m_freshness_options;
}
void OAIObjectOptions::setFreshnessOptions(const OAIFreshnessOptions &freshness_options) {
    m_freshness_options = freshness_options;
    m_freshness_options_isSet = true;
}

bool OAIObjectOptions::is_freshness_options_Set() const{
    return m_freshness_options_isSet;
}

bool OAIObjectOptions::is_freshness_options_Valid() const{
    return m_freshness_options_isValid;
}

QList<QString> OAIObjectOptions::getSuggestionFilteringOperators() const {
    return m_suggestion_filtering_operators;
}
void OAIObjectOptions::setSuggestionFilteringOperators(const QList<QString> &suggestion_filtering_operators) {
    m_suggestion_filtering_operators = suggestion_filtering_operators;
    m_suggestion_filtering_operators_isSet = true;
}

bool OAIObjectOptions::is_suggestion_filtering_operators_Set() const{
    return m_suggestion_filtering_operators_isSet;
}

bool OAIObjectOptions::is_suggestion_filtering_operators_Valid() const{
    return m_suggestion_filtering_operators_isValid;
}

bool OAIObjectOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freshness_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_filtering_operators.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
