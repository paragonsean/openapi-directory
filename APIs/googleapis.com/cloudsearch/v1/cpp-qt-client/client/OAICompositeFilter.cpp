/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompositeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompositeFilter::OAICompositeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompositeFilter::OAICompositeFilter() {
    this->initializeModel();
}

OAICompositeFilter::~OAICompositeFilter() {}

void OAICompositeFilter::initializeModel() {

    m_logic_operator_isSet = false;
    m_logic_operator_isValid = false;

    m_sub_filters_isSet = false;
    m_sub_filters_isValid = false;
}

void OAICompositeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompositeFilter::fromJsonObject(QJsonObject json) {

    m_logic_operator_isValid = ::OpenAPI::fromJsonValue(m_logic_operator, json[QString("logicOperator")]);
    m_logic_operator_isSet = !json[QString("logicOperator")].isNull() && m_logic_operator_isValid;

    m_sub_filters_isValid = ::OpenAPI::fromJsonValue(m_sub_filters, json[QString("subFilters")]);
    m_sub_filters_isSet = !json[QString("subFilters")].isNull() && m_sub_filters_isValid;
}

QString OAICompositeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompositeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_logic_operator_isSet) {
        obj.insert(QString("logicOperator"), ::OpenAPI::toJsonValue(m_logic_operator));
    }
    if (m_sub_filters.size() > 0) {
        obj.insert(QString("subFilters"), ::OpenAPI::toJsonValue(m_sub_filters));
    }
    return obj;
}

QString OAICompositeFilter::getLogicOperator() const {
    return m_logic_operator;
}
void OAICompositeFilter::setLogicOperator(const QString &logic_operator) {
    m_logic_operator = logic_operator;
    m_logic_operator_isSet = true;
}

bool OAICompositeFilter::is_logic_operator_Set() const{
    return m_logic_operator_isSet;
}

bool OAICompositeFilter::is_logic_operator_Valid() const{
    return m_logic_operator_isValid;
}

QList<OAIFilter> OAICompositeFilter::getSubFilters() const {
    return m_sub_filters;
}
void OAICompositeFilter::setSubFilters(const QList<OAIFilter> &sub_filters) {
    m_sub_filters = sub_filters;
    m_sub_filters_isSet = true;
}

bool OAICompositeFilter::is_sub_filters_Set() const{
    return m_sub_filters_isSet;
}

bool OAICompositeFilter::is_sub_filters_Valid() const{
    return m_sub_filters_isValid;
}

bool OAICompositeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logic_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompositeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
