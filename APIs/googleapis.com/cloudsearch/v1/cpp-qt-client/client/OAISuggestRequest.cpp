/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestRequest::OAISuggestRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestRequest::OAISuggestRequest() {
    this->initializeModel();
}

OAISuggestRequest::~OAISuggestRequest() {}

void OAISuggestRequest::initializeModel() {

    m_data_source_restrictions_isSet = false;
    m_data_source_restrictions_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_request_options_isSet = false;
    m_request_options_isValid = false;
}

void OAISuggestRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestRequest::fromJsonObject(QJsonObject json) {

    m_data_source_restrictions_isValid = ::OpenAPI::fromJsonValue(m_data_source_restrictions, json[QString("dataSourceRestrictions")]);
    m_data_source_restrictions_isSet = !json[QString("dataSourceRestrictions")].isNull() && m_data_source_restrictions_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;
}

QString OAISuggestRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_restrictions.size() > 0) {
        obj.insert(QString("dataSourceRestrictions"), ::OpenAPI::toJsonValue(m_data_source_restrictions));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    return obj;
}

QList<OAIDataSourceRestriction> OAISuggestRequest::getDataSourceRestrictions() const {
    return m_data_source_restrictions;
}
void OAISuggestRequest::setDataSourceRestrictions(const QList<OAIDataSourceRestriction> &data_source_restrictions) {
    m_data_source_restrictions = data_source_restrictions;
    m_data_source_restrictions_isSet = true;
}

bool OAISuggestRequest::is_data_source_restrictions_Set() const{
    return m_data_source_restrictions_isSet;
}

bool OAISuggestRequest::is_data_source_restrictions_Valid() const{
    return m_data_source_restrictions_isValid;
}

QString OAISuggestRequest::getQuery() const {
    return m_query;
}
void OAISuggestRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISuggestRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISuggestRequest::is_query_Valid() const{
    return m_query_isValid;
}

OAIRequestOptions OAISuggestRequest::getRequestOptions() const {
    return m_request_options;
}
void OAISuggestRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAISuggestRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAISuggestRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

bool OAISuggestRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
