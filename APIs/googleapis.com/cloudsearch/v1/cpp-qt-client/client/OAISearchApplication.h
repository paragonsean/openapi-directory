/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchApplication.h
 *
 * SearchApplication
 */

#ifndef OAISearchApplication_H
#define OAISearchApplication_H

#include <QJsonObject>

#include "OAIDataSourceRestriction.h"
#include "OAIFacetOptions.h"
#include "OAIQueryInterpretationConfig.h"
#include "OAIScoringConfig.h"
#include "OAISortOptions.h"
#include "OAISourceConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSourceRestriction;
class OAIFacetOptions;
class OAISortOptions;
class OAIQueryInterpretationConfig;
class OAIScoringConfig;
class OAISourceConfig;

class OAISearchApplication : public OAIObject {
public:
    OAISearchApplication();
    OAISearchApplication(QString json);
    ~OAISearchApplication() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDataSourceRestriction> getDataSourceRestrictions() const;
    void setDataSourceRestrictions(const QList<OAIDataSourceRestriction> &data_source_restrictions);
    bool is_data_source_restrictions_Set() const;
    bool is_data_source_restrictions_Valid() const;

    QList<OAIFacetOptions> getDefaultFacetOptions() const;
    void setDefaultFacetOptions(const QList<OAIFacetOptions> &default_facet_options);
    bool is_default_facet_options_Set() const;
    bool is_default_facet_options_Valid() const;

    OAISortOptions getDefaultSortOptions() const;
    void setDefaultSortOptions(const OAISortOptions &default_sort_options);
    bool is_default_sort_options_Set() const;
    bool is_default_sort_options_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEnableAuditLog() const;
    void setEnableAuditLog(const bool &enable_audit_log);
    bool is_enable_audit_log_Set() const;
    bool is_enable_audit_log_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getOperationIds() const;
    void setOperationIds(const QList<QString> &operation_ids);
    bool is_operation_ids_Set() const;
    bool is_operation_ids_Valid() const;

    OAIQueryInterpretationConfig getQueryInterpretationConfig() const;
    void setQueryInterpretationConfig(const OAIQueryInterpretationConfig &query_interpretation_config);
    bool is_query_interpretation_config_Set() const;
    bool is_query_interpretation_config_Valid() const;

    bool isReturnResultThumbnailUrls() const;
    void setReturnResultThumbnailUrls(const bool &return_result_thumbnail_urls);
    bool is_return_result_thumbnail_urls_Set() const;
    bool is_return_result_thumbnail_urls_Valid() const;

    OAIScoringConfig getScoringConfig() const;
    void setScoringConfig(const OAIScoringConfig &scoring_config);
    bool is_scoring_config_Set() const;
    bool is_scoring_config_Valid() const;

    QList<OAISourceConfig> getSourceConfig() const;
    void setSourceConfig(const QList<OAISourceConfig> &source_config);
    bool is_source_config_Set() const;
    bool is_source_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDataSourceRestriction> m_data_source_restrictions;
    bool m_data_source_restrictions_isSet;
    bool m_data_source_restrictions_isValid;

    QList<OAIFacetOptions> m_default_facet_options;
    bool m_default_facet_options_isSet;
    bool m_default_facet_options_isValid;

    OAISortOptions m_default_sort_options;
    bool m_default_sort_options_isSet;
    bool m_default_sort_options_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_enable_audit_log;
    bool m_enable_audit_log_isSet;
    bool m_enable_audit_log_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_operation_ids;
    bool m_operation_ids_isSet;
    bool m_operation_ids_isValid;

    OAIQueryInterpretationConfig m_query_interpretation_config;
    bool m_query_interpretation_config_isSet;
    bool m_query_interpretation_config_isValid;

    bool m_return_result_thumbnail_urls;
    bool m_return_result_thumbnail_urls_isSet;
    bool m_return_result_thumbnail_urls_isValid;

    OAIScoringConfig m_scoring_config;
    bool m_scoring_config_isSet;
    bool m_scoring_config_isValid;

    QList<OAISourceConfig> m_source_config;
    bool m_source_config_isSet;
    bool m_source_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchApplication)

#endif // OAISearchApplication_H
