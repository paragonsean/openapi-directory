/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapTile::OAIMapTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapTile::OAIMapTile() {
    this->initializeModel();
}

OAIMapTile::~OAIMapTile() {}

void OAIMapTile::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_tile_x_isSet = false;
    m_tile_x_isValid = false;

    m_tile_y_isSet = false;
    m_tile_y_isValid = false;
}

void OAIMapTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapTile::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_tile_x_isValid = ::OpenAPI::fromJsonValue(m_tile_x, json[QString("tileX")]);
    m_tile_x_isSet = !json[QString("tileX")].isNull() && m_tile_x_isValid;

    m_tile_y_isValid = ::OpenAPI::fromJsonValue(m_tile_y, json[QString("tileY")]);
    m_tile_y_isSet = !json[QString("tileY")].isNull() && m_tile_y_isValid;
}

QString OAIMapTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapTile::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url.isSet()) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_tile_x_isSet) {
        obj.insert(QString("tileX"), ::OpenAPI::toJsonValue(m_tile_x));
    }
    if (m_tile_y_isSet) {
        obj.insert(QString("tileY"), ::OpenAPI::toJsonValue(m_tile_y));
    }
    return obj;
}

OAISafeUrlProto OAIMapTile::getImageUrl() const {
    return m_image_url;
}
void OAIMapTile::setImageUrl(const OAISafeUrlProto &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIMapTile::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIMapTile::is_image_url_Valid() const{
    return m_image_url_isValid;
}

double OAIMapTile::getTileX() const {
    return m_tile_x;
}
void OAIMapTile::setTileX(const double &tile_x) {
    m_tile_x = tile_x;
    m_tile_x_isSet = true;
}

bool OAIMapTile::is_tile_x_Set() const{
    return m_tile_x_isSet;
}

bool OAIMapTile::is_tile_x_Valid() const{
    return m_tile_x_isValid;
}

double OAIMapTile::getTileY() const {
    return m_tile_y;
}
void OAIMapTile::setTileY(const double &tile_y) {
    m_tile_y = tile_y;
    m_tile_y_isSet = true;
}

bool OAIMapTile::is_tile_y_Set() const{
    return m_tile_y_isSet;
}

bool OAIMapTile::is_tile_y_Valid() const{
    return m_tile_y_isValid;
}

bool OAIMapTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
