/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::~OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory() {}

void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_query.size() > 0) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::getCategory() const {
    return m_category;
}
void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::isIsEnabled() const {
    return m_is_enabled;
}
void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<QString> OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::getQuery() const {
    return m_query;
}
void OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::setQuery(const QList<QString> &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_query_Set() const{
    return m_query_isSet;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickAnswerSuggestedQueryCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
