/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceConfig::OAISourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceConfig::OAISourceConfig() {
    this->initializeModel();
}

OAISourceConfig::~OAISourceConfig() {}

void OAISourceConfig::initializeModel() {

    m_crowding_config_isSet = false;
    m_crowding_config_isValid = false;

    m_scoring_config_isSet = false;
    m_scoring_config_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAISourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceConfig::fromJsonObject(QJsonObject json) {

    m_crowding_config_isValid = ::OpenAPI::fromJsonValue(m_crowding_config, json[QString("crowdingConfig")]);
    m_crowding_config_isSet = !json[QString("crowdingConfig")].isNull() && m_crowding_config_isValid;

    m_scoring_config_isValid = ::OpenAPI::fromJsonValue(m_scoring_config, json[QString("scoringConfig")]);
    m_scoring_config_isSet = !json[QString("scoringConfig")].isNull() && m_scoring_config_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAISourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_crowding_config.isSet()) {
        obj.insert(QString("crowdingConfig"), ::OpenAPI::toJsonValue(m_crowding_config));
    }
    if (m_scoring_config.isSet()) {
        obj.insert(QString("scoringConfig"), ::OpenAPI::toJsonValue(m_scoring_config));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAISourceCrowdingConfig OAISourceConfig::getCrowdingConfig() const {
    return m_crowding_config;
}
void OAISourceConfig::setCrowdingConfig(const OAISourceCrowdingConfig &crowding_config) {
    m_crowding_config = crowding_config;
    m_crowding_config_isSet = true;
}

bool OAISourceConfig::is_crowding_config_Set() const{
    return m_crowding_config_isSet;
}

bool OAISourceConfig::is_crowding_config_Valid() const{
    return m_crowding_config_isValid;
}

OAISourceScoringConfig OAISourceConfig::getScoringConfig() const {
    return m_scoring_config;
}
void OAISourceConfig::setScoringConfig(const OAISourceScoringConfig &scoring_config) {
    m_scoring_config = scoring_config;
    m_scoring_config_isSet = true;
}

bool OAISourceConfig::is_scoring_config_Set() const{
    return m_scoring_config_isSet;
}

bool OAISourceConfig::is_scoring_config_Valid() const{
    return m_scoring_config_isValid;
}

OAISource OAISourceConfig::getSource() const {
    return m_source;
}
void OAISourceConfig::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISourceConfig::is_source_Set() const{
    return m_source_isSet;
}

bool OAISourceConfig::is_source_Valid() const{
    return m_source_isValid;
}

bool OAISourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crowding_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
