/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushItem::OAIPushItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushItem::OAIPushItem() {
    this->initializeModel();
}

OAIPushItem::~OAIPushItem() {}

void OAIPushItem::initializeModel() {

    m_content_hash_isSet = false;
    m_content_hash_isValid = false;

    m_metadata_hash_isSet = false;
    m_metadata_hash_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_repository_error_isSet = false;
    m_repository_error_isValid = false;

    m_structured_data_hash_isSet = false;
    m_structured_data_hash_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPushItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushItem::fromJsonObject(QJsonObject json) {

    m_content_hash_isValid = ::OpenAPI::fromJsonValue(m_content_hash, json[QString("contentHash")]);
    m_content_hash_isSet = !json[QString("contentHash")].isNull() && m_content_hash_isValid;

    m_metadata_hash_isValid = ::OpenAPI::fromJsonValue(m_metadata_hash, json[QString("metadataHash")]);
    m_metadata_hash_isSet = !json[QString("metadataHash")].isNull() && m_metadata_hash_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_repository_error_isValid = ::OpenAPI::fromJsonValue(m_repository_error, json[QString("repositoryError")]);
    m_repository_error_isSet = !json[QString("repositoryError")].isNull() && m_repository_error_isValid;

    m_structured_data_hash_isValid = ::OpenAPI::fromJsonValue(m_structured_data_hash, json[QString("structuredDataHash")]);
    m_structured_data_hash_isSet = !json[QString("structuredDataHash")].isNull() && m_structured_data_hash_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPushItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushItem::asJsonObject() const {
    QJsonObject obj;
    if (m_content_hash_isSet) {
        obj.insert(QString("contentHash"), ::OpenAPI::toJsonValue(m_content_hash));
    }
    if (m_metadata_hash_isSet) {
        obj.insert(QString("metadataHash"), ::OpenAPI::toJsonValue(m_metadata_hash));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_queue_isSet) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_repository_error.isSet()) {
        obj.insert(QString("repositoryError"), ::OpenAPI::toJsonValue(m_repository_error));
    }
    if (m_structured_data_hash_isSet) {
        obj.insert(QString("structuredDataHash"), ::OpenAPI::toJsonValue(m_structured_data_hash));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPushItem::getContentHash() const {
    return m_content_hash;
}
void OAIPushItem::setContentHash(const QString &content_hash) {
    m_content_hash = content_hash;
    m_content_hash_isSet = true;
}

bool OAIPushItem::is_content_hash_Set() const{
    return m_content_hash_isSet;
}

bool OAIPushItem::is_content_hash_Valid() const{
    return m_content_hash_isValid;
}

QString OAIPushItem::getMetadataHash() const {
    return m_metadata_hash;
}
void OAIPushItem::setMetadataHash(const QString &metadata_hash) {
    m_metadata_hash = metadata_hash;
    m_metadata_hash_isSet = true;
}

bool OAIPushItem::is_metadata_hash_Set() const{
    return m_metadata_hash_isSet;
}

bool OAIPushItem::is_metadata_hash_Valid() const{
    return m_metadata_hash_isValid;
}

QByteArray OAIPushItem::getPayload() const {
    return m_payload;
}
void OAIPushItem::setPayload(const QByteArray &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIPushItem::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIPushItem::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIPushItem::getQueue() const {
    return m_queue;
}
void OAIPushItem::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIPushItem::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIPushItem::is_queue_Valid() const{
    return m_queue_isValid;
}

OAIRepositoryError OAIPushItem::getRepositoryError() const {
    return m_repository_error;
}
void OAIPushItem::setRepositoryError(const OAIRepositoryError &repository_error) {
    m_repository_error = repository_error;
    m_repository_error_isSet = true;
}

bool OAIPushItem::is_repository_error_Set() const{
    return m_repository_error_isSet;
}

bool OAIPushItem::is_repository_error_Valid() const{
    return m_repository_error_isValid;
}

QString OAIPushItem::getStructuredDataHash() const {
    return m_structured_data_hash;
}
void OAIPushItem::setStructuredDataHash(const QString &structured_data_hash) {
    m_structured_data_hash = structured_data_hash;
    m_structured_data_hash_isSet = true;
}

bool OAIPushItem::is_structured_data_hash_Set() const{
    return m_structured_data_hash_isSet;
}

bool OAIPushItem::is_structured_data_hash_Valid() const{
    return m_structured_data_hash_isValid;
}

QString OAIPushItem::getType() const {
    return m_type;
}
void OAIPushItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPushItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPushItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPushItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_data_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
