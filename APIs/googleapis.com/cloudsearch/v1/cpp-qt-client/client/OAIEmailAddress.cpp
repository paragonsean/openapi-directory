/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailAddress::OAIEmailAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailAddress::OAIEmailAddress() {
    this->initializeModel();
}

OAIEmailAddress::~OAIEmailAddress() {}

void OAIEmailAddress::initializeModel() {

    m_custom_type_isSet = false;
    m_custom_type_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_email_url_isSet = false;
    m_email_url_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEmailAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailAddress::fromJsonObject(QJsonObject json) {

    m_custom_type_isValid = ::OpenAPI::fromJsonValue(m_custom_type, json[QString("customType")]);
    m_custom_type_isSet = !json[QString("customType")].isNull() && m_custom_type_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_email_url_isValid = ::OpenAPI::fromJsonValue(m_email_url, json[QString("emailUrl")]);
    m_email_url_isSet = !json[QString("emailUrl")].isNull() && m_email_url_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEmailAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_type_isSet) {
        obj.insert(QString("customType"), ::OpenAPI::toJsonValue(m_custom_type));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_email_url_isSet) {
        obj.insert(QString("emailUrl"), ::OpenAPI::toJsonValue(m_email_url));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEmailAddress::getCustomType() const {
    return m_custom_type;
}
void OAIEmailAddress::setCustomType(const QString &custom_type) {
    m_custom_type = custom_type;
    m_custom_type_isSet = true;
}

bool OAIEmailAddress::is_custom_type_Set() const{
    return m_custom_type_isSet;
}

bool OAIEmailAddress::is_custom_type_Valid() const{
    return m_custom_type_isValid;
}

QString OAIEmailAddress::getEmailAddress() const {
    return m_email_address;
}
void OAIEmailAddress::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIEmailAddress::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIEmailAddress::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIEmailAddress::getEmailUrl() const {
    return m_email_url;
}
void OAIEmailAddress::setEmailUrl(const QString &email_url) {
    m_email_url = email_url;
    m_email_url_isSet = true;
}

bool OAIEmailAddress::is_email_url_Set() const{
    return m_email_url_isSet;
}

bool OAIEmailAddress::is_email_url_Valid() const{
    return m_email_url_isValid;
}

bool OAIEmailAddress::isPrimary() const {
    return m_primary;
}
void OAIEmailAddress::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIEmailAddress::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIEmailAddress::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIEmailAddress::getType() const {
    return m_type;
}
void OAIEmailAddress::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEmailAddress::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEmailAddress::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEmailAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
