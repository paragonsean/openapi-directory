/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickGap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickGap::OAIEnterpriseTopazSidekickGap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickGap::OAIEnterpriseTopazSidekickGap() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickGap::~OAIEnterpriseTopazSidekickGap() {}

void OAIEnterpriseTopazSidekickGap::initializeModel() {

    m_display_remaining_time_isSet = false;
    m_display_remaining_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_end_time_ms_isSet = false;
    m_end_time_ms_isValid = false;

    m_remaining_time_isSet = false;
    m_remaining_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_start_time_ms_isSet = false;
    m_start_time_ms_isValid = false;
}

void OAIEnterpriseTopazSidekickGap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickGap::fromJsonObject(QJsonObject json) {

    m_display_remaining_time_isValid = ::OpenAPI::fromJsonValue(m_display_remaining_time, json[QString("displayRemainingTime")]);
    m_display_remaining_time_isSet = !json[QString("displayRemainingTime")].isNull() && m_display_remaining_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_end_time_ms, json[QString("endTimeMs")]);
    m_end_time_ms_isSet = !json[QString("endTimeMs")].isNull() && m_end_time_ms_isValid;

    m_remaining_time_isValid = ::OpenAPI::fromJsonValue(m_remaining_time, json[QString("remainingTime")]);
    m_remaining_time_isSet = !json[QString("remainingTime")].isNull() && m_remaining_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_start_time_ms, json[QString("startTimeMs")]);
    m_start_time_ms_isSet = !json[QString("startTimeMs")].isNull() && m_start_time_ms_isValid;
}

QString OAIEnterpriseTopazSidekickGap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickGap::asJsonObject() const {
    QJsonObject obj;
    if (m_display_remaining_time_isSet) {
        obj.insert(QString("displayRemainingTime"), ::OpenAPI::toJsonValue(m_display_remaining_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_end_time_ms_isSet) {
        obj.insert(QString("endTimeMs"), ::OpenAPI::toJsonValue(m_end_time_ms));
    }
    if (m_remaining_time_isSet) {
        obj.insert(QString("remainingTime"), ::OpenAPI::toJsonValue(m_remaining_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_start_time_ms_isSet) {
        obj.insert(QString("startTimeMs"), ::OpenAPI::toJsonValue(m_start_time_ms));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickGap::getDisplayRemainingTime() const {
    return m_display_remaining_time;
}
void OAIEnterpriseTopazSidekickGap::setDisplayRemainingTime(const QString &display_remaining_time) {
    m_display_remaining_time = display_remaining_time;
    m_display_remaining_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_display_remaining_time_Set() const{
    return m_display_remaining_time_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_display_remaining_time_Valid() const{
    return m_display_remaining_time_isValid;
}

QString OAIEnterpriseTopazSidekickGap::getEndTime() const {
    return m_end_time;
}
void OAIEnterpriseTopazSidekickGap::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIEnterpriseTopazSidekickGap::getEndTimeMs() const {
    return m_end_time_ms;
}
void OAIEnterpriseTopazSidekickGap::setEndTimeMs(const QString &end_time_ms) {
    m_end_time_ms = end_time_ms;
    m_end_time_ms_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_end_time_ms_Set() const{
    return m_end_time_ms_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_end_time_ms_Valid() const{
    return m_end_time_ms_isValid;
}

QString OAIEnterpriseTopazSidekickGap::getRemainingTime() const {
    return m_remaining_time;
}
void OAIEnterpriseTopazSidekickGap::setRemainingTime(const QString &remaining_time) {
    m_remaining_time = remaining_time;
    m_remaining_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_remaining_time_Set() const{
    return m_remaining_time_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_remaining_time_Valid() const{
    return m_remaining_time_isValid;
}

QString OAIEnterpriseTopazSidekickGap::getStartTime() const {
    return m_start_time;
}
void OAIEnterpriseTopazSidekickGap::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIEnterpriseTopazSidekickGap::getStartTimeMs() const {
    return m_start_time_ms;
}
void OAIEnterpriseTopazSidekickGap::setStartTimeMs(const QString &start_time_ms) {
    m_start_time_ms = start_time_ms;
    m_start_time_ms_isSet = true;
}

bool OAIEnterpriseTopazSidekickGap::is_start_time_ms_Set() const{
    return m_start_time_ms_isSet;
}

bool OAIEnterpriseTopazSidekickGap::is_start_time_ms_Valid() const{
    return m_start_time_ms_isValid;
}

bool OAIEnterpriseTopazSidekickGap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_remaining_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickGap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
