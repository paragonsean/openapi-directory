/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::~OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto() {}

void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::initializeModel() {

    m_declined_events_isSet = false;
    m_declined_events_isValid = false;

    m_mentioned_documents_isSet = false;
    m_mentioned_documents_isValid = false;

    m_shared_documents_isSet = false;
    m_shared_documents_isValid = false;
}

void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::fromJsonObject(QJsonObject json) {

    m_declined_events_isValid = ::OpenAPI::fromJsonValue(m_declined_events, json[QString("declinedEvents")]);
    m_declined_events_isSet = !json[QString("declinedEvents")].isNull() && m_declined_events_isValid;

    m_mentioned_documents_isValid = ::OpenAPI::fromJsonValue(m_mentioned_documents, json[QString("mentionedDocuments")]);
    m_mentioned_documents_isSet = !json[QString("mentionedDocuments")].isNull() && m_mentioned_documents_isValid;

    m_shared_documents_isValid = ::OpenAPI::fromJsonValue(m_shared_documents, json[QString("sharedDocuments")]);
    m_shared_documents_isSet = !json[QString("sharedDocuments")].isNull() && m_shared_documents_isValid;
}

QString OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::asJsonObject() const {
    QJsonObject obj;
    if (m_declined_events.isSet()) {
        obj.insert(QString("declinedEvents"), ::OpenAPI::toJsonValue(m_declined_events));
    }
    if (m_mentioned_documents.isSet()) {
        obj.insert(QString("mentionedDocuments"), ::OpenAPI::toJsonValue(m_mentioned_documents));
    }
    if (m_shared_documents.isSet()) {
        obj.insert(QString("sharedDocuments"), ::OpenAPI::toJsonValue(m_shared_documents));
    }
    return obj;
}

OAIEnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::getDeclinedEvents() const {
    return m_declined_events;
}
void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::setDeclinedEvents(const OAIEnterpriseTopazSidekickGetAndKeepAheadCardProtoDeclinedEvents &declined_events) {
    m_declined_events = declined_events;
    m_declined_events_isSet = true;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_declined_events_Set() const{
    return m_declined_events_isSet;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_declined_events_Valid() const{
    return m_declined_events_isValid;
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::getMentionedDocuments() const {
    return m_mentioned_documents;
}
void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::setMentionedDocuments(const OAIEnterpriseTopazSidekickDocumentPerCategoryList &mentioned_documents) {
    m_mentioned_documents = mentioned_documents;
    m_mentioned_documents_isSet = true;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_mentioned_documents_Set() const{
    return m_mentioned_documents_isSet;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_mentioned_documents_Valid() const{
    return m_mentioned_documents_isValid;
}

OAIEnterpriseTopazSidekickDocumentPerCategoryList OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::getSharedDocuments() const {
    return m_shared_documents;
}
void OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::setSharedDocuments(const OAIEnterpriseTopazSidekickDocumentPerCategoryList &shared_documents) {
    m_shared_documents = shared_documents;
    m_shared_documents_isSet = true;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_shared_documents_Set() const{
    return m_shared_documents_isSet;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::is_shared_documents_Valid() const{
    return m_shared_documents_isValid;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_declined_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickGetAndKeepAheadCardProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
