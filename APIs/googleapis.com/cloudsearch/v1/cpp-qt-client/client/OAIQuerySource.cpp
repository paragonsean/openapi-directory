/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuerySource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuerySource::OAIQuerySource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuerySource::OAIQuerySource() {
    this->initializeModel();
}

OAIQuerySource::~OAIQuerySource() {}

void OAIQuerySource::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_operators_isSet = false;
    m_operators_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIQuerySource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuerySource::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_operators_isValid = ::OpenAPI::fromJsonValue(m_operators, json[QString("operators")]);
    m_operators_isSet = !json[QString("operators")].isNull() && m_operators_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIQuerySource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuerySource::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_operators.size() > 0) {
        obj.insert(QString("operators"), ::OpenAPI::toJsonValue(m_operators));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIQuerySource::getDisplayName() const {
    return m_display_name;
}
void OAIQuerySource::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIQuerySource::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIQuerySource::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIQueryOperator> OAIQuerySource::getOperators() const {
    return m_operators;
}
void OAIQuerySource::setOperators(const QList<OAIQueryOperator> &operators) {
    m_operators = operators;
    m_operators_isSet = true;
}

bool OAIQuerySource::is_operators_Set() const{
    return m_operators_isSet;
}

bool OAIQuerySource::is_operators_Valid() const{
    return m_operators_isValid;
}

QString OAIQuerySource::getShortName() const {
    return m_short_name;
}
void OAIQuerySource::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIQuerySource::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIQuerySource::is_short_name_Valid() const{
    return m_short_name_isValid;
}

OAISource OAIQuerySource::getSource() const {
    return m_source;
}
void OAIQuerySource::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIQuerySource::is_source_Set() const{
    return m_source_isSet;
}

bool OAIQuerySource::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIQuerySource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuerySource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
