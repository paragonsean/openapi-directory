/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickAgendaItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickAgendaItem::OAIEnterpriseTopazSidekickAgendaItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickAgendaItem::OAIEnterpriseTopazSidekickAgendaItem() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickAgendaItem::~OAIEnterpriseTopazSidekickAgendaItem() {}

void OAIEnterpriseTopazSidekickAgendaItem::initializeModel() {

    m_conflicted_group_isSet = false;
    m_conflicted_group_isValid = false;

    m_gap_before_isSet = false;
    m_gap_before_isValid = false;

    m_meeting_isSet = false;
    m_meeting_isValid = false;
}

void OAIEnterpriseTopazSidekickAgendaItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickAgendaItem::fromJsonObject(QJsonObject json) {

    m_conflicted_group_isValid = ::OpenAPI::fromJsonValue(m_conflicted_group, json[QString("conflictedGroup")]);
    m_conflicted_group_isSet = !json[QString("conflictedGroup")].isNull() && m_conflicted_group_isValid;

    m_gap_before_isValid = ::OpenAPI::fromJsonValue(m_gap_before, json[QString("gapBefore")]);
    m_gap_before_isSet = !json[QString("gapBefore")].isNull() && m_gap_before_isValid;

    m_meeting_isValid = ::OpenAPI::fromJsonValue(m_meeting, json[QString("meeting")]);
    m_meeting_isSet = !json[QString("meeting")].isNull() && m_meeting_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickAgendaItem::asJsonObject() const {
    QJsonObject obj;
    if (m_conflicted_group.isSet()) {
        obj.insert(QString("conflictedGroup"), ::OpenAPI::toJsonValue(m_conflicted_group));
    }
    if (m_gap_before.isSet()) {
        obj.insert(QString("gapBefore"), ::OpenAPI::toJsonValue(m_gap_before));
    }
    if (m_meeting.isSet()) {
        obj.insert(QString("meeting"), ::OpenAPI::toJsonValue(m_meeting));
    }
    return obj;
}

OAIEnterpriseTopazSidekickConflictingEventsCardProto OAIEnterpriseTopazSidekickAgendaItem::getConflictedGroup() const {
    return m_conflicted_group;
}
void OAIEnterpriseTopazSidekickAgendaItem::setConflictedGroup(const OAIEnterpriseTopazSidekickConflictingEventsCardProto &conflicted_group) {
    m_conflicted_group = conflicted_group;
    m_conflicted_group_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_conflicted_group_Set() const{
    return m_conflicted_group_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_conflicted_group_Valid() const{
    return m_conflicted_group_isValid;
}

OAIEnterpriseTopazSidekickGap OAIEnterpriseTopazSidekickAgendaItem::getGapBefore() const {
    return m_gap_before;
}
void OAIEnterpriseTopazSidekickAgendaItem::setGapBefore(const OAIEnterpriseTopazSidekickGap &gap_before) {
    m_gap_before = gap_before;
    m_gap_before_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_gap_before_Set() const{
    return m_gap_before_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_gap_before_Valid() const{
    return m_gap_before_isValid;
}

OAIEnterpriseTopazSidekickAgendaEntry OAIEnterpriseTopazSidekickAgendaItem::getMeeting() const {
    return m_meeting;
}
void OAIEnterpriseTopazSidekickAgendaItem::setMeeting(const OAIEnterpriseTopazSidekickAgendaEntry &meeting) {
    m_meeting = meeting;
    m_meeting_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_meeting_Set() const{
    return m_meeting_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaItem::is_meeting_Valid() const{
    return m_meeting_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflicted_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gap_before.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickAgendaItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
