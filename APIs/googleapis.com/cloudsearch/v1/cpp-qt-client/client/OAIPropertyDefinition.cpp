/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyDefinition::OAIPropertyDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyDefinition::OAIPropertyDefinition() {
    this->initializeModel();
}

OAIPropertyDefinition::~OAIPropertyDefinition() {}

void OAIPropertyDefinition::initializeModel() {

    m_boolean_property_options_isSet = false;
    m_boolean_property_options_isValid = false;

    m_date_property_options_isSet = false;
    m_date_property_options_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;

    m_double_property_options_isSet = false;
    m_double_property_options_isValid = false;

    m_enum_property_options_isSet = false;
    m_enum_property_options_isValid = false;

    m_html_property_options_isSet = false;
    m_html_property_options_isValid = false;

    m_integer_property_options_isSet = false;
    m_integer_property_options_isValid = false;

    m_is_facetable_isSet = false;
    m_is_facetable_isValid = false;

    m_is_repeatable_isSet = false;
    m_is_repeatable_isValid = false;

    m_is_returnable_isSet = false;
    m_is_returnable_isValid = false;

    m_is_sortable_isSet = false;
    m_is_sortable_isValid = false;

    m_is_suggestable_isSet = false;
    m_is_suggestable_isValid = false;

    m_is_wildcard_searchable_isSet = false;
    m_is_wildcard_searchable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_property_options_isSet = false;
    m_object_property_options_isValid = false;

    m_text_property_options_isSet = false;
    m_text_property_options_isValid = false;

    m_timestamp_property_options_isSet = false;
    m_timestamp_property_options_isValid = false;
}

void OAIPropertyDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyDefinition::fromJsonObject(QJsonObject json) {

    m_boolean_property_options_isValid = ::OpenAPI::fromJsonValue(m_boolean_property_options, json[QString("booleanPropertyOptions")]);
    m_boolean_property_options_isSet = !json[QString("booleanPropertyOptions")].isNull() && m_boolean_property_options_isValid;

    m_date_property_options_isValid = ::OpenAPI::fromJsonValue(m_date_property_options, json[QString("datePropertyOptions")]);
    m_date_property_options_isSet = !json[QString("datePropertyOptions")].isNull() && m_date_property_options_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("displayOptions")]);
    m_display_options_isSet = !json[QString("displayOptions")].isNull() && m_display_options_isValid;

    m_double_property_options_isValid = ::OpenAPI::fromJsonValue(m_double_property_options, json[QString("doublePropertyOptions")]);
    m_double_property_options_isSet = !json[QString("doublePropertyOptions")].isNull() && m_double_property_options_isValid;

    m_enum_property_options_isValid = ::OpenAPI::fromJsonValue(m_enum_property_options, json[QString("enumPropertyOptions")]);
    m_enum_property_options_isSet = !json[QString("enumPropertyOptions")].isNull() && m_enum_property_options_isValid;

    m_html_property_options_isValid = ::OpenAPI::fromJsonValue(m_html_property_options, json[QString("htmlPropertyOptions")]);
    m_html_property_options_isSet = !json[QString("htmlPropertyOptions")].isNull() && m_html_property_options_isValid;

    m_integer_property_options_isValid = ::OpenAPI::fromJsonValue(m_integer_property_options, json[QString("integerPropertyOptions")]);
    m_integer_property_options_isSet = !json[QString("integerPropertyOptions")].isNull() && m_integer_property_options_isValid;

    m_is_facetable_isValid = ::OpenAPI::fromJsonValue(m_is_facetable, json[QString("isFacetable")]);
    m_is_facetable_isSet = !json[QString("isFacetable")].isNull() && m_is_facetable_isValid;

    m_is_repeatable_isValid = ::OpenAPI::fromJsonValue(m_is_repeatable, json[QString("isRepeatable")]);
    m_is_repeatable_isSet = !json[QString("isRepeatable")].isNull() && m_is_repeatable_isValid;

    m_is_returnable_isValid = ::OpenAPI::fromJsonValue(m_is_returnable, json[QString("isReturnable")]);
    m_is_returnable_isSet = !json[QString("isReturnable")].isNull() && m_is_returnable_isValid;

    m_is_sortable_isValid = ::OpenAPI::fromJsonValue(m_is_sortable, json[QString("isSortable")]);
    m_is_sortable_isSet = !json[QString("isSortable")].isNull() && m_is_sortable_isValid;

    m_is_suggestable_isValid = ::OpenAPI::fromJsonValue(m_is_suggestable, json[QString("isSuggestable")]);
    m_is_suggestable_isSet = !json[QString("isSuggestable")].isNull() && m_is_suggestable_isValid;

    m_is_wildcard_searchable_isValid = ::OpenAPI::fromJsonValue(m_is_wildcard_searchable, json[QString("isWildcardSearchable")]);
    m_is_wildcard_searchable_isSet = !json[QString("isWildcardSearchable")].isNull() && m_is_wildcard_searchable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_property_options_isValid = ::OpenAPI::fromJsonValue(m_object_property_options, json[QString("objectPropertyOptions")]);
    m_object_property_options_isSet = !json[QString("objectPropertyOptions")].isNull() && m_object_property_options_isValid;

    m_text_property_options_isValid = ::OpenAPI::fromJsonValue(m_text_property_options, json[QString("textPropertyOptions")]);
    m_text_property_options_isSet = !json[QString("textPropertyOptions")].isNull() && m_text_property_options_isValid;

    m_timestamp_property_options_isValid = ::OpenAPI::fromJsonValue(m_timestamp_property_options, json[QString("timestampPropertyOptions")]);
    m_timestamp_property_options_isSet = !json[QString("timestampPropertyOptions")].isNull() && m_timestamp_property_options_isValid;
}

QString OAIPropertyDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_property_options.isSet()) {
        obj.insert(QString("booleanPropertyOptions"), ::OpenAPI::toJsonValue(m_boolean_property_options));
    }
    if (m_date_property_options.isSet()) {
        obj.insert(QString("datePropertyOptions"), ::OpenAPI::toJsonValue(m_date_property_options));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("displayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    if (m_double_property_options.isSet()) {
        obj.insert(QString("doublePropertyOptions"), ::OpenAPI::toJsonValue(m_double_property_options));
    }
    if (m_enum_property_options.isSet()) {
        obj.insert(QString("enumPropertyOptions"), ::OpenAPI::toJsonValue(m_enum_property_options));
    }
    if (m_html_property_options.isSet()) {
        obj.insert(QString("htmlPropertyOptions"), ::OpenAPI::toJsonValue(m_html_property_options));
    }
    if (m_integer_property_options.isSet()) {
        obj.insert(QString("integerPropertyOptions"), ::OpenAPI::toJsonValue(m_integer_property_options));
    }
    if (m_is_facetable_isSet) {
        obj.insert(QString("isFacetable"), ::OpenAPI::toJsonValue(m_is_facetable));
    }
    if (m_is_repeatable_isSet) {
        obj.insert(QString("isRepeatable"), ::OpenAPI::toJsonValue(m_is_repeatable));
    }
    if (m_is_returnable_isSet) {
        obj.insert(QString("isReturnable"), ::OpenAPI::toJsonValue(m_is_returnable));
    }
    if (m_is_sortable_isSet) {
        obj.insert(QString("isSortable"), ::OpenAPI::toJsonValue(m_is_sortable));
    }
    if (m_is_suggestable_isSet) {
        obj.insert(QString("isSuggestable"), ::OpenAPI::toJsonValue(m_is_suggestable));
    }
    if (m_is_wildcard_searchable_isSet) {
        obj.insert(QString("isWildcardSearchable"), ::OpenAPI::toJsonValue(m_is_wildcard_searchable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_property_options.isSet()) {
        obj.insert(QString("objectPropertyOptions"), ::OpenAPI::toJsonValue(m_object_property_options));
    }
    if (m_text_property_options.isSet()) {
        obj.insert(QString("textPropertyOptions"), ::OpenAPI::toJsonValue(m_text_property_options));
    }
    if (m_timestamp_property_options.isSet()) {
        obj.insert(QString("timestampPropertyOptions"), ::OpenAPI::toJsonValue(m_timestamp_property_options));
    }
    return obj;
}

OAIBooleanPropertyOptions OAIPropertyDefinition::getBooleanPropertyOptions() const {
    return m_boolean_property_options;
}
void OAIPropertyDefinition::setBooleanPropertyOptions(const OAIBooleanPropertyOptions &boolean_property_options) {
    m_boolean_property_options = boolean_property_options;
    m_boolean_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_boolean_property_options_Set() const{
    return m_boolean_property_options_isSet;
}

bool OAIPropertyDefinition::is_boolean_property_options_Valid() const{
    return m_boolean_property_options_isValid;
}

OAIDatePropertyOptions OAIPropertyDefinition::getDatePropertyOptions() const {
    return m_date_property_options;
}
void OAIPropertyDefinition::setDatePropertyOptions(const OAIDatePropertyOptions &date_property_options) {
    m_date_property_options = date_property_options;
    m_date_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_date_property_options_Set() const{
    return m_date_property_options_isSet;
}

bool OAIPropertyDefinition::is_date_property_options_Valid() const{
    return m_date_property_options_isValid;
}

OAIPropertyDisplayOptions OAIPropertyDefinition::getDisplayOptions() const {
    return m_display_options;
}
void OAIPropertyDefinition::setDisplayOptions(const OAIPropertyDisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIPropertyDefinition::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIPropertyDefinition::is_display_options_Valid() const{
    return m_display_options_isValid;
}

OAIDoublePropertyOptions OAIPropertyDefinition::getDoublePropertyOptions() const {
    return m_double_property_options;
}
void OAIPropertyDefinition::setDoublePropertyOptions(const OAIDoublePropertyOptions &double_property_options) {
    m_double_property_options = double_property_options;
    m_double_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_double_property_options_Set() const{
    return m_double_property_options_isSet;
}

bool OAIPropertyDefinition::is_double_property_options_Valid() const{
    return m_double_property_options_isValid;
}

OAIEnumPropertyOptions OAIPropertyDefinition::getEnumPropertyOptions() const {
    return m_enum_property_options;
}
void OAIPropertyDefinition::setEnumPropertyOptions(const OAIEnumPropertyOptions &enum_property_options) {
    m_enum_property_options = enum_property_options;
    m_enum_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_enum_property_options_Set() const{
    return m_enum_property_options_isSet;
}

bool OAIPropertyDefinition::is_enum_property_options_Valid() const{
    return m_enum_property_options_isValid;
}

OAIHtmlPropertyOptions OAIPropertyDefinition::getHtmlPropertyOptions() const {
    return m_html_property_options;
}
void OAIPropertyDefinition::setHtmlPropertyOptions(const OAIHtmlPropertyOptions &html_property_options) {
    m_html_property_options = html_property_options;
    m_html_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_html_property_options_Set() const{
    return m_html_property_options_isSet;
}

bool OAIPropertyDefinition::is_html_property_options_Valid() const{
    return m_html_property_options_isValid;
}

OAIIntegerPropertyOptions OAIPropertyDefinition::getIntegerPropertyOptions() const {
    return m_integer_property_options;
}
void OAIPropertyDefinition::setIntegerPropertyOptions(const OAIIntegerPropertyOptions &integer_property_options) {
    m_integer_property_options = integer_property_options;
    m_integer_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_integer_property_options_Set() const{
    return m_integer_property_options_isSet;
}

bool OAIPropertyDefinition::is_integer_property_options_Valid() const{
    return m_integer_property_options_isValid;
}

bool OAIPropertyDefinition::isIsFacetable() const {
    return m_is_facetable;
}
void OAIPropertyDefinition::setIsFacetable(const bool &is_facetable) {
    m_is_facetable = is_facetable;
    m_is_facetable_isSet = true;
}

bool OAIPropertyDefinition::is_is_facetable_Set() const{
    return m_is_facetable_isSet;
}

bool OAIPropertyDefinition::is_is_facetable_Valid() const{
    return m_is_facetable_isValid;
}

bool OAIPropertyDefinition::isIsRepeatable() const {
    return m_is_repeatable;
}
void OAIPropertyDefinition::setIsRepeatable(const bool &is_repeatable) {
    m_is_repeatable = is_repeatable;
    m_is_repeatable_isSet = true;
}

bool OAIPropertyDefinition::is_is_repeatable_Set() const{
    return m_is_repeatable_isSet;
}

bool OAIPropertyDefinition::is_is_repeatable_Valid() const{
    return m_is_repeatable_isValid;
}

bool OAIPropertyDefinition::isIsReturnable() const {
    return m_is_returnable;
}
void OAIPropertyDefinition::setIsReturnable(const bool &is_returnable) {
    m_is_returnable = is_returnable;
    m_is_returnable_isSet = true;
}

bool OAIPropertyDefinition::is_is_returnable_Set() const{
    return m_is_returnable_isSet;
}

bool OAIPropertyDefinition::is_is_returnable_Valid() const{
    return m_is_returnable_isValid;
}

bool OAIPropertyDefinition::isIsSortable() const {
    return m_is_sortable;
}
void OAIPropertyDefinition::setIsSortable(const bool &is_sortable) {
    m_is_sortable = is_sortable;
    m_is_sortable_isSet = true;
}

bool OAIPropertyDefinition::is_is_sortable_Set() const{
    return m_is_sortable_isSet;
}

bool OAIPropertyDefinition::is_is_sortable_Valid() const{
    return m_is_sortable_isValid;
}

bool OAIPropertyDefinition::isIsSuggestable() const {
    return m_is_suggestable;
}
void OAIPropertyDefinition::setIsSuggestable(const bool &is_suggestable) {
    m_is_suggestable = is_suggestable;
    m_is_suggestable_isSet = true;
}

bool OAIPropertyDefinition::is_is_suggestable_Set() const{
    return m_is_suggestable_isSet;
}

bool OAIPropertyDefinition::is_is_suggestable_Valid() const{
    return m_is_suggestable_isValid;
}

bool OAIPropertyDefinition::isIsWildcardSearchable() const {
    return m_is_wildcard_searchable;
}
void OAIPropertyDefinition::setIsWildcardSearchable(const bool &is_wildcard_searchable) {
    m_is_wildcard_searchable = is_wildcard_searchable;
    m_is_wildcard_searchable_isSet = true;
}

bool OAIPropertyDefinition::is_is_wildcard_searchable_Set() const{
    return m_is_wildcard_searchable_isSet;
}

bool OAIPropertyDefinition::is_is_wildcard_searchable_Valid() const{
    return m_is_wildcard_searchable_isValid;
}

QString OAIPropertyDefinition::getName() const {
    return m_name;
}
void OAIPropertyDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPropertyDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPropertyDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAIObjectPropertyOptions OAIPropertyDefinition::getObjectPropertyOptions() const {
    return m_object_property_options;
}
void OAIPropertyDefinition::setObjectPropertyOptions(const OAIObjectPropertyOptions &object_property_options) {
    m_object_property_options = object_property_options;
    m_object_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_object_property_options_Set() const{
    return m_object_property_options_isSet;
}

bool OAIPropertyDefinition::is_object_property_options_Valid() const{
    return m_object_property_options_isValid;
}

OAITextPropertyOptions OAIPropertyDefinition::getTextPropertyOptions() const {
    return m_text_property_options;
}
void OAIPropertyDefinition::setTextPropertyOptions(const OAITextPropertyOptions &text_property_options) {
    m_text_property_options = text_property_options;
    m_text_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_text_property_options_Set() const{
    return m_text_property_options_isSet;
}

bool OAIPropertyDefinition::is_text_property_options_Valid() const{
    return m_text_property_options_isValid;
}

OAITimestampPropertyOptions OAIPropertyDefinition::getTimestampPropertyOptions() const {
    return m_timestamp_property_options;
}
void OAIPropertyDefinition::setTimestampPropertyOptions(const OAITimestampPropertyOptions &timestamp_property_options) {
    m_timestamp_property_options = timestamp_property_options;
    m_timestamp_property_options_isSet = true;
}

bool OAIPropertyDefinition::is_timestamp_property_options_Set() const{
    return m_timestamp_property_options_isSet;
}

bool OAIPropertyDefinition::is_timestamp_property_options_Valid() const{
    return m_timestamp_property_options_isValid;
}

bool OAIPropertyDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_facetable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_repeatable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_returnable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sortable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_suggestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wildcard_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_property_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
