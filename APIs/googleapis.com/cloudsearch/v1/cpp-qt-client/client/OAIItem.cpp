/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_acl_isSet = false;
    m_acl_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_structured_data_isSet = false;
    m_structured_data_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_acl_isValid = ::OpenAPI::fromJsonValue(m_acl, json[QString("acl")]);
    m_acl_isSet = !json[QString("acl")].isNull() && m_acl_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_structured_data_isValid = ::OpenAPI::fromJsonValue(m_structured_data, json[QString("structuredData")]);
    m_structured_data_isSet = !json[QString("structuredData")].isNull() && m_structured_data_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_acl.isSet()) {
        obj.insert(QString("acl"), ::OpenAPI::toJsonValue(m_acl));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_queue_isSet) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_structured_data.isSet()) {
        obj.insert(QString("structuredData"), ::OpenAPI::toJsonValue(m_structured_data));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIItemAcl OAIItem::getAcl() const {
    return m_acl;
}
void OAIItem::setAcl(const OAIItemAcl &acl) {
    m_acl = acl;
    m_acl_isSet = true;
}

bool OAIItem::is_acl_Set() const{
    return m_acl_isSet;
}

bool OAIItem::is_acl_Valid() const{
    return m_acl_isValid;
}

OAIItemContent OAIItem::getContent() const {
    return m_content;
}
void OAIItem::setContent(const OAIItemContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIItem::is_content_Set() const{
    return m_content_isSet;
}

bool OAIItem::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIItem::getItemType() const {
    return m_item_type;
}
void OAIItem::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIItem::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIItem::is_item_type_Valid() const{
    return m_item_type_isValid;
}

OAIItemMetadata OAIItem::getMetadata() const {
    return m_metadata;
}
void OAIItem::setMetadata(const OAIItemMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

QByteArray OAIItem::getPayload() const {
    return m_payload;
}
void OAIItem::setPayload(const QByteArray &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIItem::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIItem::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIItem::getQueue() const {
    return m_queue;
}
void OAIItem::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIItem::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIItem::is_queue_Valid() const{
    return m_queue_isValid;
}

OAIItemStatus OAIItem::getStatus() const {
    return m_status;
}
void OAIItem::setStatus(const OAIItemStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIItem::is_status_Valid() const{
    return m_status_isValid;
}

OAIItemStructuredData OAIItem::getStructuredData() const {
    return m_structured_data;
}
void OAIItem::setStructuredData(const OAIItemStructuredData &structured_data) {
    m_structured_data = structured_data;
    m_structured_data_isSet = true;
}

bool OAIItem::is_structured_data_Set() const{
    return m_structured_data_isSet;
}

bool OAIItem::is_structured_data_Valid() const{
    return m_structured_data_isValid;
}

QByteArray OAIItem::getVersion() const {
    return m_version;
}
void OAIItem::setVersion(const QByteArray &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIItem::is_version_Set() const{
    return m_version_isSet;
}

bool OAIItem::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
