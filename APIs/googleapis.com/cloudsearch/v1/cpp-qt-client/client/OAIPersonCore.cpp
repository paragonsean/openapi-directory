/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonCore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonCore::OAIPersonCore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonCore::OAIPersonCore() {
    this->initializeModel();
}

OAIPersonCore::~OAIPersonCore() {}

void OAIPersonCore::initializeModel() {

    m_address_me_as_isSet = false;
    m_address_me_as_isValid = false;

    m_admin_to_isSet = false;
    m_admin_to_isValid = false;

    m_admins_isSet = false;
    m_admins_isValid = false;

    m_availability_status_isSet = false;
    m_availability_status_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_calendar_url_isSet = false;
    m_calendar_url_isValid = false;

    m_chat_url_isSet = false;
    m_chat_url_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_direct_reports_isSet = false;
    m_direct_reports_isValid = false;

    m_dotted_line_managers_isSet = false;
    m_dotted_line_managers_isValid = false;

    m_dotted_line_reports_isSet = false;
    m_dotted_line_reports_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_fte_permille_isSet = false;
    m_fte_permille_isValid = false;

    m_geo_location_isSet = false;
    m_geo_location_isValid = false;

    m_gmail_url_isSet = false;
    m_gmail_url_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_keyword_types_isSet = false;
    m_keyword_types_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_managers_isSet = false;
    m_managers_isValid = false;

    m_mission_isSet = false;
    m_mission_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_office_location_isSet = false;
    m_office_location_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_postal_address_isSet = false;
    m_postal_address_isValid = false;

    m_total_direct_reports_count_isSet = false;
    m_total_direct_reports_count_isValid = false;

    m_total_dlr_count_isSet = false;
    m_total_dlr_count_isValid = false;

    m_total_fte_count_isSet = false;
    m_total_fte_count_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_waldo_come_back_time_isSet = false;
    m_waldo_come_back_time_isValid = false;
}

void OAIPersonCore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonCore::fromJsonObject(QJsonObject json) {

    m_address_me_as_isValid = ::OpenAPI::fromJsonValue(m_address_me_as, json[QString("addressMeAs")]);
    m_address_me_as_isSet = !json[QString("addressMeAs")].isNull() && m_address_me_as_isValid;

    m_admin_to_isValid = ::OpenAPI::fromJsonValue(m_admin_to, json[QString("adminTo")]);
    m_admin_to_isSet = !json[QString("adminTo")].isNull() && m_admin_to_isValid;

    m_admins_isValid = ::OpenAPI::fromJsonValue(m_admins, json[QString("admins")]);
    m_admins_isSet = !json[QString("admins")].isNull() && m_admins_isValid;

    m_availability_status_isValid = ::OpenAPI::fromJsonValue(m_availability_status, json[QString("availabilityStatus")]);
    m_availability_status_isSet = !json[QString("availabilityStatus")].isNull() && m_availability_status_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_calendar_url_isValid = ::OpenAPI::fromJsonValue(m_calendar_url, json[QString("calendarUrl")]);
    m_calendar_url_isSet = !json[QString("calendarUrl")].isNull() && m_calendar_url_isValid;

    m_chat_url_isValid = ::OpenAPI::fromJsonValue(m_chat_url, json[QString("chatUrl")]);
    m_chat_url_isSet = !json[QString("chatUrl")].isNull() && m_chat_url_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_direct_reports_isValid = ::OpenAPI::fromJsonValue(m_direct_reports, json[QString("directReports")]);
    m_direct_reports_isSet = !json[QString("directReports")].isNull() && m_direct_reports_isValid;

    m_dotted_line_managers_isValid = ::OpenAPI::fromJsonValue(m_dotted_line_managers, json[QString("dottedLineManagers")]);
    m_dotted_line_managers_isSet = !json[QString("dottedLineManagers")].isNull() && m_dotted_line_managers_isValid;

    m_dotted_line_reports_isValid = ::OpenAPI::fromJsonValue(m_dotted_line_reports, json[QString("dottedLineReports")]);
    m_dotted_line_reports_isSet = !json[QString("dottedLineReports")].isNull() && m_dotted_line_reports_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employeeId")]);
    m_employee_id_isSet = !json[QString("employeeId")].isNull() && m_employee_id_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_fte_permille_isValid = ::OpenAPI::fromJsonValue(m_fte_permille, json[QString("ftePermille")]);
    m_fte_permille_isSet = !json[QString("ftePermille")].isNull() && m_fte_permille_isValid;

    m_geo_location_isValid = ::OpenAPI::fromJsonValue(m_geo_location, json[QString("geoLocation")]);
    m_geo_location_isSet = !json[QString("geoLocation")].isNull() && m_geo_location_isValid;

    m_gmail_url_isValid = ::OpenAPI::fromJsonValue(m_gmail_url, json[QString("gmailUrl")]);
    m_gmail_url_isSet = !json[QString("gmailUrl")].isNull() && m_gmail_url_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_keyword_types_isValid = ::OpenAPI::fromJsonValue(m_keyword_types, json[QString("keywordTypes")]);
    m_keyword_types_isSet = !json[QString("keywordTypes")].isNull() && m_keyword_types_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_managers_isValid = ::OpenAPI::fromJsonValue(m_managers, json[QString("managers")]);
    m_managers_isSet = !json[QString("managers")].isNull() && m_managers_isValid;

    m_mission_isValid = ::OpenAPI::fromJsonValue(m_mission, json[QString("mission")]);
    m_mission_isSet = !json[QString("mission")].isNull() && m_mission_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_office_location_isValid = ::OpenAPI::fromJsonValue(m_office_location, json[QString("officeLocation")]);
    m_office_location_isSet = !json[QString("officeLocation")].isNull() && m_office_location_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_postal_address_isValid = ::OpenAPI::fromJsonValue(m_postal_address, json[QString("postalAddress")]);
    m_postal_address_isSet = !json[QString("postalAddress")].isNull() && m_postal_address_isValid;

    m_total_direct_reports_count_isValid = ::OpenAPI::fromJsonValue(m_total_direct_reports_count, json[QString("totalDirectReportsCount")]);
    m_total_direct_reports_count_isSet = !json[QString("totalDirectReportsCount")].isNull() && m_total_direct_reports_count_isValid;

    m_total_dlr_count_isValid = ::OpenAPI::fromJsonValue(m_total_dlr_count, json[QString("totalDlrCount")]);
    m_total_dlr_count_isSet = !json[QString("totalDlrCount")].isNull() && m_total_dlr_count_isValid;

    m_total_fte_count_isValid = ::OpenAPI::fromJsonValue(m_total_fte_count, json[QString("totalFteCount")]);
    m_total_fte_count_isSet = !json[QString("totalFteCount")].isNull() && m_total_fte_count_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_waldo_come_back_time_isValid = ::OpenAPI::fromJsonValue(m_waldo_come_back_time, json[QString("waldoComeBackTime")]);
    m_waldo_come_back_time_isSet = !json[QString("waldoComeBackTime")].isNull() && m_waldo_come_back_time_isValid;
}

QString OAIPersonCore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonCore::asJsonObject() const {
    QJsonObject obj;
    if (m_address_me_as_isSet) {
        obj.insert(QString("addressMeAs"), ::OpenAPI::toJsonValue(m_address_me_as));
    }
    if (m_admin_to.size() > 0) {
        obj.insert(QString("adminTo"), ::OpenAPI::toJsonValue(m_admin_to));
    }
    if (m_admins.size() > 0) {
        obj.insert(QString("admins"), ::OpenAPI::toJsonValue(m_admins));
    }
    if (m_availability_status_isSet) {
        obj.insert(QString("availabilityStatus"), ::OpenAPI::toJsonValue(m_availability_status));
    }
    if (m_birthday.isSet()) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_calendar_url.isSet()) {
        obj.insert(QString("calendarUrl"), ::OpenAPI::toJsonValue(m_calendar_url));
    }
    if (m_chat_url.isSet()) {
        obj.insert(QString("chatUrl"), ::OpenAPI::toJsonValue(m_chat_url));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_direct_reports.size() > 0) {
        obj.insert(QString("directReports"), ::OpenAPI::toJsonValue(m_direct_reports));
    }
    if (m_dotted_line_managers.size() > 0) {
        obj.insert(QString("dottedLineManagers"), ::OpenAPI::toJsonValue(m_dotted_line_managers));
    }
    if (m_dotted_line_reports.size() > 0) {
        obj.insert(QString("dottedLineReports"), ::OpenAPI::toJsonValue(m_dotted_line_reports));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employeeId"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_fte_permille_isSet) {
        obj.insert(QString("ftePermille"), ::OpenAPI::toJsonValue(m_fte_permille));
    }
    if (m_geo_location.isSet()) {
        obj.insert(QString("geoLocation"), ::OpenAPI::toJsonValue(m_geo_location));
    }
    if (m_gmail_url_isSet) {
        obj.insert(QString("gmailUrl"), ::OpenAPI::toJsonValue(m_gmail_url));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_keyword_types.size() > 0) {
        obj.insert(QString("keywordTypes"), ::OpenAPI::toJsonValue(m_keyword_types));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_managers.size() > 0) {
        obj.insert(QString("managers"), ::OpenAPI::toJsonValue(m_managers));
    }
    if (m_mission_isSet) {
        obj.insert(QString("mission"), ::OpenAPI::toJsonValue(m_mission));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_office_location_isSet) {
        obj.insert(QString("officeLocation"), ::OpenAPI::toJsonValue(m_office_location));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_photo_url.isSet()) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_postal_address_isSet) {
        obj.insert(QString("postalAddress"), ::OpenAPI::toJsonValue(m_postal_address));
    }
    if (m_total_direct_reports_count_isSet) {
        obj.insert(QString("totalDirectReportsCount"), ::OpenAPI::toJsonValue(m_total_direct_reports_count));
    }
    if (m_total_dlr_count_isSet) {
        obj.insert(QString("totalDlrCount"), ::OpenAPI::toJsonValue(m_total_dlr_count));
    }
    if (m_total_fte_count_isSet) {
        obj.insert(QString("totalFteCount"), ::OpenAPI::toJsonValue(m_total_fte_count));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_waldo_come_back_time_isSet) {
        obj.insert(QString("waldoComeBackTime"), ::OpenAPI::toJsonValue(m_waldo_come_back_time));
    }
    return obj;
}

QString OAIPersonCore::getAddressMeAs() const {
    return m_address_me_as;
}
void OAIPersonCore::setAddressMeAs(const QString &address_me_as) {
    m_address_me_as = address_me_as;
    m_address_me_as_isSet = true;
}

bool OAIPersonCore::is_address_me_as_Set() const{
    return m_address_me_as_isSet;
}

bool OAIPersonCore::is_address_me_as_Valid() const{
    return m_address_me_as_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getAdminTo() const {
    return m_admin_to;
}
void OAIPersonCore::setAdminTo(const QList<OAIPersonCore> &admin_to) {
    m_admin_to = admin_to;
    m_admin_to_isSet = true;
}

bool OAIPersonCore::is_admin_to_Set() const{
    return m_admin_to_isSet;
}

bool OAIPersonCore::is_admin_to_Valid() const{
    return m_admin_to_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getAdmins() const {
    return m_admins;
}
void OAIPersonCore::setAdmins(const QList<OAIPersonCore> &admins) {
    m_admins = admins;
    m_admins_isSet = true;
}

bool OAIPersonCore::is_admins_Set() const{
    return m_admins_isSet;
}

bool OAIPersonCore::is_admins_Valid() const{
    return m_admins_isValid;
}

QString OAIPersonCore::getAvailabilityStatus() const {
    return m_availability_status;
}
void OAIPersonCore::setAvailabilityStatus(const QString &availability_status) {
    m_availability_status = availability_status;
    m_availability_status_isSet = true;
}

bool OAIPersonCore::is_availability_status_Set() const{
    return m_availability_status_isSet;
}

bool OAIPersonCore::is_availability_status_Valid() const{
    return m_availability_status_isValid;
}

OAIDate OAIPersonCore::getBirthday() const {
    return m_birthday;
}
void OAIPersonCore::setBirthday(const OAIDate &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIPersonCore::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIPersonCore::is_birthday_Valid() const{
    return m_birthday_isValid;
}

OAISafeUrlProto OAIPersonCore::getCalendarUrl() const {
    return m_calendar_url;
}
void OAIPersonCore::setCalendarUrl(const OAISafeUrlProto &calendar_url) {
    m_calendar_url = calendar_url;
    m_calendar_url_isSet = true;
}

bool OAIPersonCore::is_calendar_url_Set() const{
    return m_calendar_url_isSet;
}

bool OAIPersonCore::is_calendar_url_Valid() const{
    return m_calendar_url_isValid;
}

OAISafeUrlProto OAIPersonCore::getChatUrl() const {
    return m_chat_url;
}
void OAIPersonCore::setChatUrl(const OAISafeUrlProto &chat_url) {
    m_chat_url = chat_url;
    m_chat_url_isSet = true;
}

bool OAIPersonCore::is_chat_url_Set() const{
    return m_chat_url_isSet;
}

bool OAIPersonCore::is_chat_url_Valid() const{
    return m_chat_url_isValid;
}

QString OAIPersonCore::getCostCenter() const {
    return m_cost_center;
}
void OAIPersonCore::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIPersonCore::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIPersonCore::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QString OAIPersonCore::getDepartment() const {
    return m_department;
}
void OAIPersonCore::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIPersonCore::is_department_Set() const{
    return m_department_isSet;
}

bool OAIPersonCore::is_department_Valid() const{
    return m_department_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getDirectReports() const {
    return m_direct_reports;
}
void OAIPersonCore::setDirectReports(const QList<OAIPersonCore> &direct_reports) {
    m_direct_reports = direct_reports;
    m_direct_reports_isSet = true;
}

bool OAIPersonCore::is_direct_reports_Set() const{
    return m_direct_reports_isSet;
}

bool OAIPersonCore::is_direct_reports_Valid() const{
    return m_direct_reports_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getDottedLineManagers() const {
    return m_dotted_line_managers;
}
void OAIPersonCore::setDottedLineManagers(const QList<OAIPersonCore> &dotted_line_managers) {
    m_dotted_line_managers = dotted_line_managers;
    m_dotted_line_managers_isSet = true;
}

bool OAIPersonCore::is_dotted_line_managers_Set() const{
    return m_dotted_line_managers_isSet;
}

bool OAIPersonCore::is_dotted_line_managers_Valid() const{
    return m_dotted_line_managers_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getDottedLineReports() const {
    return m_dotted_line_reports;
}
void OAIPersonCore::setDottedLineReports(const QList<OAIPersonCore> &dotted_line_reports) {
    m_dotted_line_reports = dotted_line_reports;
    m_dotted_line_reports_isSet = true;
}

bool OAIPersonCore::is_dotted_line_reports_Set() const{
    return m_dotted_line_reports_isSet;
}

bool OAIPersonCore::is_dotted_line_reports_Valid() const{
    return m_dotted_line_reports_isValid;
}

QList<QString> OAIPersonCore::getEmails() const {
    return m_emails;
}
void OAIPersonCore::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIPersonCore::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIPersonCore::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIPersonCore::getEmployeeId() const {
    return m_employee_id;
}
void OAIPersonCore::setEmployeeId(const QString &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAIPersonCore::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAIPersonCore::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QString OAIPersonCore::getFingerprint() const {
    return m_fingerprint;
}
void OAIPersonCore::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIPersonCore::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIPersonCore::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIPersonCore::getFtePermille() const {
    return m_fte_permille;
}
void OAIPersonCore::setFtePermille(const QString &fte_permille) {
    m_fte_permille = fte_permille;
    m_fte_permille_isSet = true;
}

bool OAIPersonCore::is_fte_permille_Set() const{
    return m_fte_permille_isSet;
}

bool OAIPersonCore::is_fte_permille_Valid() const{
    return m_fte_permille_isValid;
}

OAIMapInfo OAIPersonCore::getGeoLocation() const {
    return m_geo_location;
}
void OAIPersonCore::setGeoLocation(const OAIMapInfo &geo_location) {
    m_geo_location = geo_location;
    m_geo_location_isSet = true;
}

bool OAIPersonCore::is_geo_location_Set() const{
    return m_geo_location_isSet;
}

bool OAIPersonCore::is_geo_location_Valid() const{
    return m_geo_location_isValid;
}

QString OAIPersonCore::getGmailUrl() const {
    return m_gmail_url;
}
void OAIPersonCore::setGmailUrl(const QString &gmail_url) {
    m_gmail_url = gmail_url;
    m_gmail_url_isSet = true;
}

bool OAIPersonCore::is_gmail_url_Set() const{
    return m_gmail_url_isSet;
}

bool OAIPersonCore::is_gmail_url_Valid() const{
    return m_gmail_url_isValid;
}

QString OAIPersonCore::getJobTitle() const {
    return m_job_title;
}
void OAIPersonCore::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIPersonCore::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIPersonCore::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QList<QString> OAIPersonCore::getKeywordTypes() const {
    return m_keyword_types;
}
void OAIPersonCore::setKeywordTypes(const QList<QString> &keyword_types) {
    m_keyword_types = keyword_types;
    m_keyword_types_isSet = true;
}

bool OAIPersonCore::is_keyword_types_Set() const{
    return m_keyword_types_isSet;
}

bool OAIPersonCore::is_keyword_types_Valid() const{
    return m_keyword_types_isValid;
}

QMap<QString, QString> OAIPersonCore::getKeywords() const {
    return m_keywords;
}
void OAIPersonCore::setKeywords(const QMap<QString, QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIPersonCore::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIPersonCore::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<OAIEnterpriseTopazFrontendTeamsLink> OAIPersonCore::getLinks() const {
    return m_links;
}
void OAIPersonCore::setLinks(const QList<OAIEnterpriseTopazFrontendTeamsLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPersonCore::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPersonCore::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPersonCore::getLocation() const {
    return m_location;
}
void OAIPersonCore::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPersonCore::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPersonCore::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIPersonCore> OAIPersonCore::getManagers() const {
    return m_managers;
}
void OAIPersonCore::setManagers(const QList<OAIPersonCore> &managers) {
    m_managers = managers;
    m_managers_isSet = true;
}

bool OAIPersonCore::is_managers_Set() const{
    return m_managers_isSet;
}

bool OAIPersonCore::is_managers_Valid() const{
    return m_managers_isValid;
}

QString OAIPersonCore::getMission() const {
    return m_mission;
}
void OAIPersonCore::setMission(const QString &mission) {
    m_mission = mission;
    m_mission_isSet = true;
}

bool OAIPersonCore::is_mission_Set() const{
    return m_mission_isSet;
}

bool OAIPersonCore::is_mission_Valid() const{
    return m_mission_isValid;
}

QString OAIPersonCore::getName() const {
    return m_name;
}
void OAIPersonCore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonCore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonCore::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPersonCore::getOfficeLocation() const {
    return m_office_location;
}
void OAIPersonCore::setOfficeLocation(const QString &office_location) {
    m_office_location = office_location;
    m_office_location_isSet = true;
}

bool OAIPersonCore::is_office_location_Set() const{
    return m_office_location_isSet;
}

bool OAIPersonCore::is_office_location_Valid() const{
    return m_office_location_isValid;
}

QString OAIPersonCore::getPersonId() const {
    return m_person_id;
}
void OAIPersonCore::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAIPersonCore::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAIPersonCore::is_person_id_Valid() const{
    return m_person_id_isValid;
}

QList<OAIEnterpriseTopazFrontendTeamsPersonCorePhoneNumber> OAIPersonCore::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIPersonCore::setPhoneNumbers(const QList<OAIEnterpriseTopazFrontendTeamsPersonCorePhoneNumber> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIPersonCore::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIPersonCore::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

OAISafeUrlProto OAIPersonCore::getPhotoUrl() const {
    return m_photo_url;
}
void OAIPersonCore::setPhotoUrl(const OAISafeUrlProto &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIPersonCore::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIPersonCore::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIPersonCore::getPostalAddress() const {
    return m_postal_address;
}
void OAIPersonCore::setPostalAddress(const QString &postal_address) {
    m_postal_address = postal_address;
    m_postal_address_isSet = true;
}

bool OAIPersonCore::is_postal_address_Set() const{
    return m_postal_address_isSet;
}

bool OAIPersonCore::is_postal_address_Valid() const{
    return m_postal_address_isValid;
}

qint32 OAIPersonCore::getTotalDirectReportsCount() const {
    return m_total_direct_reports_count;
}
void OAIPersonCore::setTotalDirectReportsCount(const qint32 &total_direct_reports_count) {
    m_total_direct_reports_count = total_direct_reports_count;
    m_total_direct_reports_count_isSet = true;
}

bool OAIPersonCore::is_total_direct_reports_count_Set() const{
    return m_total_direct_reports_count_isSet;
}

bool OAIPersonCore::is_total_direct_reports_count_Valid() const{
    return m_total_direct_reports_count_isValid;
}

qint32 OAIPersonCore::getTotalDlrCount() const {
    return m_total_dlr_count;
}
void OAIPersonCore::setTotalDlrCount(const qint32 &total_dlr_count) {
    m_total_dlr_count = total_dlr_count;
    m_total_dlr_count_isSet = true;
}

bool OAIPersonCore::is_total_dlr_count_Set() const{
    return m_total_dlr_count_isSet;
}

bool OAIPersonCore::is_total_dlr_count_Valid() const{
    return m_total_dlr_count_isValid;
}

QString OAIPersonCore::getTotalFteCount() const {
    return m_total_fte_count;
}
void OAIPersonCore::setTotalFteCount(const QString &total_fte_count) {
    m_total_fte_count = total_fte_count;
    m_total_fte_count_isSet = true;
}

bool OAIPersonCore::is_total_fte_count_Set() const{
    return m_total_fte_count_isSet;
}

bool OAIPersonCore::is_total_fte_count_Valid() const{
    return m_total_fte_count_isValid;
}

QString OAIPersonCore::getUsername() const {
    return m_username;
}
void OAIPersonCore::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPersonCore::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPersonCore::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIPersonCore::getWaldoComeBackTime() const {
    return m_waldo_come_back_time;
}
void OAIPersonCore::setWaldoComeBackTime(const QString &waldo_come_back_time) {
    m_waldo_come_back_time = waldo_come_back_time;
    m_waldo_come_back_time_isSet = true;
}

bool OAIPersonCore::is_waldo_come_back_time_Set() const{
    return m_waldo_come_back_time_isSet;
}

bool OAIPersonCore::is_waldo_come_back_time_Valid() const{
    return m_waldo_come_back_time_isValid;
}

bool OAIPersonCore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_me_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_admins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotted_line_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotted_line_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fte_permille_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_direct_reports_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_dlr_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_fte_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waldo_come_back_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonCore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
