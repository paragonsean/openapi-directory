/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseTopazSidekickAgendaEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterpriseTopazSidekickAgendaEntry::OAIEnterpriseTopazSidekickAgendaEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterpriseTopazSidekickAgendaEntry::OAIEnterpriseTopazSidekickAgendaEntry() {
    this->initializeModel();
}

OAIEnterpriseTopazSidekickAgendaEntry::~OAIEnterpriseTopazSidekickAgendaEntry() {}

void OAIEnterpriseTopazSidekickAgendaEntry::initializeModel() {

    m_agenda_item_url_isSet = false;
    m_agenda_item_url_isValid = false;

    m_chronology_isSet = false;
    m_chronology_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_current_user_attending_status_isSet = false;
    m_current_user_attending_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_end_time_ms_isSet = false;
    m_end_time_ms_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_guests_can_invite_others_isSet = false;
    m_guests_can_invite_others_isValid = false;

    m_guests_can_modify_isSet = false;
    m_guests_can_modify_isValid = false;

    m_guests_can_see_guests_isSet = false;
    m_guests_can_see_guests_isValid = false;

    m_hangout_id_isSet = false;
    m_hangout_id_isValid = false;

    m_hangout_url_isSet = false;
    m_hangout_url_isValid = false;

    m_invitee_isSet = false;
    m_invitee_isValid = false;

    m_is_all_day_isSet = false;
    m_is_all_day_isValid = false;

    m_last_modification_time_ms_isSet = false;
    m_last_modification_time_ms_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_notify_to_user_isSet = false;
    m_notify_to_user_isValid = false;

    m_other_attendees_excluded_isSet = false;
    m_other_attendees_excluded_isValid = false;

    m_requester_is_owner_isSet = false;
    m_requester_is_owner_isValid = false;

    m_show_full_event_details_to_use_isSet = false;
    m_show_full_event_details_to_use_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_start_time_ms_isSet = false;
    m_start_time_ms_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEnterpriseTopazSidekickAgendaEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterpriseTopazSidekickAgendaEntry::fromJsonObject(QJsonObject json) {

    m_agenda_item_url_isValid = ::OpenAPI::fromJsonValue(m_agenda_item_url, json[QString("agendaItemUrl")]);
    m_agenda_item_url_isSet = !json[QString("agendaItemUrl")].isNull() && m_agenda_item_url_isValid;

    m_chronology_isValid = ::OpenAPI::fromJsonValue(m_chronology, json[QString("chronology")]);
    m_chronology_isSet = !json[QString("chronology")].isNull() && m_chronology_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_current_user_attending_status_isValid = ::OpenAPI::fromJsonValue(m_current_user_attending_status, json[QString("currentUserAttendingStatus")]);
    m_current_user_attending_status_isSet = !json[QString("currentUserAttendingStatus")].isNull() && m_current_user_attending_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_end_time_ms, json[QString("endTimeMs")]);
    m_end_time_ms_isSet = !json[QString("endTimeMs")].isNull() && m_end_time_ms_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_guests_can_invite_others_isValid = ::OpenAPI::fromJsonValue(m_guests_can_invite_others, json[QString("guestsCanInviteOthers")]);
    m_guests_can_invite_others_isSet = !json[QString("guestsCanInviteOthers")].isNull() && m_guests_can_invite_others_isValid;

    m_guests_can_modify_isValid = ::OpenAPI::fromJsonValue(m_guests_can_modify, json[QString("guestsCanModify")]);
    m_guests_can_modify_isSet = !json[QString("guestsCanModify")].isNull() && m_guests_can_modify_isValid;

    m_guests_can_see_guests_isValid = ::OpenAPI::fromJsonValue(m_guests_can_see_guests, json[QString("guestsCanSeeGuests")]);
    m_guests_can_see_guests_isSet = !json[QString("guestsCanSeeGuests")].isNull() && m_guests_can_see_guests_isValid;

    m_hangout_id_isValid = ::OpenAPI::fromJsonValue(m_hangout_id, json[QString("hangoutId")]);
    m_hangout_id_isSet = !json[QString("hangoutId")].isNull() && m_hangout_id_isValid;

    m_hangout_url_isValid = ::OpenAPI::fromJsonValue(m_hangout_url, json[QString("hangoutUrl")]);
    m_hangout_url_isSet = !json[QString("hangoutUrl")].isNull() && m_hangout_url_isValid;

    m_invitee_isValid = ::OpenAPI::fromJsonValue(m_invitee, json[QString("invitee")]);
    m_invitee_isSet = !json[QString("invitee")].isNull() && m_invitee_isValid;

    m_is_all_day_isValid = ::OpenAPI::fromJsonValue(m_is_all_day, json[QString("isAllDay")]);
    m_is_all_day_isSet = !json[QString("isAllDay")].isNull() && m_is_all_day_isValid;

    m_last_modification_time_ms_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time_ms, json[QString("lastModificationTimeMs")]);
    m_last_modification_time_ms_isSet = !json[QString("lastModificationTimeMs")].isNull() && m_last_modification_time_ms_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_notify_to_user_isValid = ::OpenAPI::fromJsonValue(m_notify_to_user, json[QString("notifyToUser")]);
    m_notify_to_user_isSet = !json[QString("notifyToUser")].isNull() && m_notify_to_user_isValid;

    m_other_attendees_excluded_isValid = ::OpenAPI::fromJsonValue(m_other_attendees_excluded, json[QString("otherAttendeesExcluded")]);
    m_other_attendees_excluded_isSet = !json[QString("otherAttendeesExcluded")].isNull() && m_other_attendees_excluded_isValid;

    m_requester_is_owner_isValid = ::OpenAPI::fromJsonValue(m_requester_is_owner, json[QString("requesterIsOwner")]);
    m_requester_is_owner_isSet = !json[QString("requesterIsOwner")].isNull() && m_requester_is_owner_isValid;

    m_show_full_event_details_to_use_isValid = ::OpenAPI::fromJsonValue(m_show_full_event_details_to_use, json[QString("showFullEventDetailsToUse")]);
    m_show_full_event_details_to_use_isSet = !json[QString("showFullEventDetailsToUse")].isNull() && m_show_full_event_details_to_use_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_start_time_ms, json[QString("startTimeMs")]);
    m_start_time_ms_isSet = !json[QString("startTimeMs")].isNull() && m_start_time_ms_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterpriseTopazSidekickAgendaEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_agenda_item_url_isSet) {
        obj.insert(QString("agendaItemUrl"), ::OpenAPI::toJsonValue(m_agenda_item_url));
    }
    if (m_chronology_isSet) {
        obj.insert(QString("chronology"), ::OpenAPI::toJsonValue(m_chronology));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_current_user_attending_status_isSet) {
        obj.insert(QString("currentUserAttendingStatus"), ::OpenAPI::toJsonValue(m_current_user_attending_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document.size() > 0) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_end_time_ms_isSet) {
        obj.insert(QString("endTimeMs"), ::OpenAPI::toJsonValue(m_end_time_ms));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_guests_can_invite_others_isSet) {
        obj.insert(QString("guestsCanInviteOthers"), ::OpenAPI::toJsonValue(m_guests_can_invite_others));
    }
    if (m_guests_can_modify_isSet) {
        obj.insert(QString("guestsCanModify"), ::OpenAPI::toJsonValue(m_guests_can_modify));
    }
    if (m_guests_can_see_guests_isSet) {
        obj.insert(QString("guestsCanSeeGuests"), ::OpenAPI::toJsonValue(m_guests_can_see_guests));
    }
    if (m_hangout_id_isSet) {
        obj.insert(QString("hangoutId"), ::OpenAPI::toJsonValue(m_hangout_id));
    }
    if (m_hangout_url_isSet) {
        obj.insert(QString("hangoutUrl"), ::OpenAPI::toJsonValue(m_hangout_url));
    }
    if (m_invitee.size() > 0) {
        obj.insert(QString("invitee"), ::OpenAPI::toJsonValue(m_invitee));
    }
    if (m_is_all_day_isSet) {
        obj.insert(QString("isAllDay"), ::OpenAPI::toJsonValue(m_is_all_day));
    }
    if (m_last_modification_time_ms_isSet) {
        obj.insert(QString("lastModificationTimeMs"), ::OpenAPI::toJsonValue(m_last_modification_time_ms));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_notify_to_user_isSet) {
        obj.insert(QString("notifyToUser"), ::OpenAPI::toJsonValue(m_notify_to_user));
    }
    if (m_other_attendees_excluded_isSet) {
        obj.insert(QString("otherAttendeesExcluded"), ::OpenAPI::toJsonValue(m_other_attendees_excluded));
    }
    if (m_requester_is_owner_isSet) {
        obj.insert(QString("requesterIsOwner"), ::OpenAPI::toJsonValue(m_requester_is_owner));
    }
    if (m_show_full_event_details_to_use_isSet) {
        obj.insert(QString("showFullEventDetailsToUse"), ::OpenAPI::toJsonValue(m_show_full_event_details_to_use));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_start_time_ms_isSet) {
        obj.insert(QString("startTimeMs"), ::OpenAPI::toJsonValue(m_start_time_ms));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getAgendaItemUrl() const {
    return m_agenda_item_url;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setAgendaItemUrl(const QString &agenda_item_url) {
    m_agenda_item_url = agenda_item_url;
    m_agenda_item_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_agenda_item_url_Set() const{
    return m_agenda_item_url_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_agenda_item_url_Valid() const{
    return m_agenda_item_url_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getChronology() const {
    return m_chronology;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setChronology(const QString &chronology) {
    m_chronology = chronology;
    m_chronology_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_chronology_Set() const{
    return m_chronology_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_chronology_Valid() const{
    return m_chronology_isValid;
}

OAIEnterpriseTopazSidekickPerson OAIEnterpriseTopazSidekickAgendaEntry::getCreator() const {
    return m_creator;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setCreator(const OAIEnterpriseTopazSidekickPerson &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getCurrentUserAttendingStatus() const {
    return m_current_user_attending_status;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setCurrentUserAttendingStatus(const QString &current_user_attending_status) {
    m_current_user_attending_status = current_user_attending_status;
    m_current_user_attending_status_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_current_user_attending_status_Set() const{
    return m_current_user_attending_status_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_current_user_attending_status_Valid() const{
    return m_current_user_attending_status_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getDescription() const {
    return m_description;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEnterpriseTopazSidekickCommonDocument> OAIEnterpriseTopazSidekickAgendaEntry::getDocument() const {
    return m_document;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setDocument(const QList<OAIEnterpriseTopazSidekickCommonDocument> &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_document_Set() const{
    return m_document_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getEndDate() const {
    return m_end_date;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getEndTime() const {
    return m_end_time;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getEndTimeMs() const {
    return m_end_time_ms;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setEndTimeMs(const QString &end_time_ms) {
    m_end_time_ms = end_time_ms;
    m_end_time_ms_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_time_ms_Set() const{
    return m_end_time_ms_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_end_time_ms_Valid() const{
    return m_end_time_ms_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getEventId() const {
    return m_event_id;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_event_id_Valid() const{
    return m_event_id_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isGuestsCanInviteOthers() const {
    return m_guests_can_invite_others;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setGuestsCanInviteOthers(const bool &guests_can_invite_others) {
    m_guests_can_invite_others = guests_can_invite_others;
    m_guests_can_invite_others_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_invite_others_Set() const{
    return m_guests_can_invite_others_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_invite_others_Valid() const{
    return m_guests_can_invite_others_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isGuestsCanModify() const {
    return m_guests_can_modify;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setGuestsCanModify(const bool &guests_can_modify) {
    m_guests_can_modify = guests_can_modify;
    m_guests_can_modify_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_modify_Set() const{
    return m_guests_can_modify_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_modify_Valid() const{
    return m_guests_can_modify_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isGuestsCanSeeGuests() const {
    return m_guests_can_see_guests;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setGuestsCanSeeGuests(const bool &guests_can_see_guests) {
    m_guests_can_see_guests = guests_can_see_guests;
    m_guests_can_see_guests_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_see_guests_Set() const{
    return m_guests_can_see_guests_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_guests_can_see_guests_Valid() const{
    return m_guests_can_see_guests_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getHangoutId() const {
    return m_hangout_id;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setHangoutId(const QString &hangout_id) {
    m_hangout_id = hangout_id;
    m_hangout_id_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_hangout_id_Set() const{
    return m_hangout_id_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_hangout_id_Valid() const{
    return m_hangout_id_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getHangoutUrl() const {
    return m_hangout_url;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setHangoutUrl(const QString &hangout_url) {
    m_hangout_url = hangout_url;
    m_hangout_url_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_hangout_url_Set() const{
    return m_hangout_url_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_hangout_url_Valid() const{
    return m_hangout_url_isValid;
}

QList<OAIEnterpriseTopazSidekickPerson> OAIEnterpriseTopazSidekickAgendaEntry::getInvitee() const {
    return m_invitee;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setInvitee(const QList<OAIEnterpriseTopazSidekickPerson> &invitee) {
    m_invitee = invitee;
    m_invitee_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_invitee_Set() const{
    return m_invitee_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_invitee_Valid() const{
    return m_invitee_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isIsAllDay() const {
    return m_is_all_day;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setIsAllDay(const bool &is_all_day) {
    m_is_all_day = is_all_day;
    m_is_all_day_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_is_all_day_Set() const{
    return m_is_all_day_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_is_all_day_Valid() const{
    return m_is_all_day_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getLastModificationTimeMs() const {
    return m_last_modification_time_ms;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setLastModificationTimeMs(const QString &last_modification_time_ms) {
    m_last_modification_time_ms = last_modification_time_ms;
    m_last_modification_time_ms_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_last_modification_time_ms_Set() const{
    return m_last_modification_time_ms_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_last_modification_time_ms_Valid() const{
    return m_last_modification_time_ms_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getLocation() const {
    return m_location;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isNotifyToUser() const {
    return m_notify_to_user;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setNotifyToUser(const bool &notify_to_user) {
    m_notify_to_user = notify_to_user;
    m_notify_to_user_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_notify_to_user_Set() const{
    return m_notify_to_user_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_notify_to_user_Valid() const{
    return m_notify_to_user_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isOtherAttendeesExcluded() const {
    return m_other_attendees_excluded;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setOtherAttendeesExcluded(const bool &other_attendees_excluded) {
    m_other_attendees_excluded = other_attendees_excluded;
    m_other_attendees_excluded_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_other_attendees_excluded_Set() const{
    return m_other_attendees_excluded_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_other_attendees_excluded_Valid() const{
    return m_other_attendees_excluded_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isRequesterIsOwner() const {
    return m_requester_is_owner;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setRequesterIsOwner(const bool &requester_is_owner) {
    m_requester_is_owner = requester_is_owner;
    m_requester_is_owner_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_requester_is_owner_Set() const{
    return m_requester_is_owner_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_requester_is_owner_Valid() const{
    return m_requester_is_owner_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isShowFullEventDetailsToUse() const {
    return m_show_full_event_details_to_use;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setShowFullEventDetailsToUse(const bool &show_full_event_details_to_use) {
    m_show_full_event_details_to_use = show_full_event_details_to_use;
    m_show_full_event_details_to_use_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_show_full_event_details_to_use_Set() const{
    return m_show_full_event_details_to_use_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_show_full_event_details_to_use_Valid() const{
    return m_show_full_event_details_to_use_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getStartDate() const {
    return m_start_date;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getStartTime() const {
    return m_start_time;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getStartTimeMs() const {
    return m_start_time_ms;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setStartTimeMs(const QString &start_time_ms) {
    m_start_time_ms = start_time_ms;
    m_start_time_ms_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_time_ms_Set() const{
    return m_start_time_ms_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_start_time_ms_Valid() const{
    return m_start_time_ms_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getTimeZone() const {
    return m_time_zone;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIEnterpriseTopazSidekickAgendaEntry::getTitle() const {
    return m_title;
}
void OAIEnterpriseTopazSidekickAgendaEntry::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agenda_item_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chronology_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_attending_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_invite_others_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_see_guests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hangout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hangout_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_to_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_attendees_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_full_event_details_to_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterpriseTopazSidekickAgendaEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
