/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseTopazSidekickDocumentPerCategoryList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickDocumentPerCategoryList {
  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HELP_MESSAGE = "helpMessage";
  @SerializedName(SERIALIZED_NAME_HELP_MESSAGE)
  private String helpMessage;

  /**
   * Gets or Sets listType
   */
  @JsonAdapter(ListTypeEnum.Adapter.class)
  public enum ListTypeEnum {
    UNKNOWN_LIST_TYPE("UNKNOWN_LIST_TYPE"),
    
    MENTIONS("MENTIONS"),
    
    SHARES("SHARES"),
    
    NEEDS_ATTENTION("NEEDS_ATTENTION"),
    
    VIEWS("VIEWS"),
    
    EDITS("EDITS");

    private String value;

    ListTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ListTypeEnum fromValue(String value) {
      for (ListTypeEnum b : ListTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ListTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ListTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ListTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ListTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ListTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIST_TYPE = "listType";
  @SerializedName(SERIALIZED_NAME_LIST_TYPE)
  private ListTypeEnum listType;

  public static final String SERIALIZED_NAME_LIST_TYPE_DESCRIPTION = "listTypeDescription";
  @SerializedName(SERIALIZED_NAME_LIST_TYPE_DESCRIPTION)
  private String listTypeDescription;

  public static final String SERIALIZED_NAME_RESPONSE_MESSAGE = "responseMessage";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MESSAGE)
  private String responseMessage;

  public EnterpriseTopazSidekickDocumentPerCategoryList() {
  }

  public EnterpriseTopazSidekickDocumentPerCategoryList documents(List<EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> documents) {
    this.documents = documents;
    return this;
  }

  public EnterpriseTopazSidekickDocumentPerCategoryList addDocumentsItem(EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> getDocuments() {
    return documents;
  }

  public void setDocuments(List<EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry> documents) {
    this.documents = documents;
  }


  public EnterpriseTopazSidekickDocumentPerCategoryList helpMessage(String helpMessage) {
    this.helpMessage = helpMessage;
    return this;
  }

  /**
   * Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional.
   * @return helpMessage
   */
  @javax.annotation.Nullable
  public String getHelpMessage() {
    return helpMessage;
  }

  public void setHelpMessage(String helpMessage) {
    this.helpMessage = helpMessage;
  }


  public EnterpriseTopazSidekickDocumentPerCategoryList listType(ListTypeEnum listType) {
    this.listType = listType;
    return this;
  }

  /**
   * Get listType
   * @return listType
   */
  @javax.annotation.Nullable
  public ListTypeEnum getListType() {
    return listType;
  }

  public void setListType(ListTypeEnum listType) {
    this.listType = listType;
  }


  public EnterpriseTopazSidekickDocumentPerCategoryList listTypeDescription(String listTypeDescription) {
    this.listTypeDescription = listTypeDescription;
    return this;
  }

  /**
   * Description of the types of documents present in the list.
   * @return listTypeDescription
   */
  @javax.annotation.Nullable
  public String getListTypeDescription() {
    return listTypeDescription;
  }

  public void setListTypeDescription(String listTypeDescription) {
    this.listTypeDescription = listTypeDescription;
  }


  public EnterpriseTopazSidekickDocumentPerCategoryList responseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
    return this;
  }

  /**
   * Response message in case no documents are present in the card.
   * @return responseMessage
   */
  @javax.annotation.Nullable
  public String getResponseMessage() {
    return responseMessage;
  }

  public void setResponseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickDocumentPerCategoryList enterpriseTopazSidekickDocumentPerCategoryList = (EnterpriseTopazSidekickDocumentPerCategoryList) o;
    return Objects.equals(this.documents, enterpriseTopazSidekickDocumentPerCategoryList.documents) &&
        Objects.equals(this.helpMessage, enterpriseTopazSidekickDocumentPerCategoryList.helpMessage) &&
        Objects.equals(this.listType, enterpriseTopazSidekickDocumentPerCategoryList.listType) &&
        Objects.equals(this.listTypeDescription, enterpriseTopazSidekickDocumentPerCategoryList.listTypeDescription) &&
        Objects.equals(this.responseMessage, enterpriseTopazSidekickDocumentPerCategoryList.responseMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, helpMessage, listType, listTypeDescription, responseMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickDocumentPerCategoryList {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    helpMessage: ").append(toIndentedString(helpMessage)).append("\n");
    sb.append("    listType: ").append(toIndentedString(listType)).append("\n");
    sb.append("    listTypeDescription: ").append(toIndentedString(listTypeDescription)).append("\n");
    sb.append("    responseMessage: ").append(toIndentedString(responseMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documents");
    openapiFields.add("helpMessage");
    openapiFields.add("listType");
    openapiFields.add("listTypeDescription");
    openapiFields.add("responseMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickDocumentPerCategoryList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickDocumentPerCategoryList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickDocumentPerCategoryList is not found in the empty JSON string", EnterpriseTopazSidekickDocumentPerCategoryList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickDocumentPerCategoryList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickDocumentPerCategoryList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("helpMessage") != null && !jsonObj.get("helpMessage").isJsonNull()) && !jsonObj.get("helpMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpMessage").toString()));
      }
      if ((jsonObj.get("listType") != null && !jsonObj.get("listType").isJsonNull()) && !jsonObj.get("listType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listType").toString()));
      }
      // validate the optional field `listType`
      if (jsonObj.get("listType") != null && !jsonObj.get("listType").isJsonNull()) {
        ListTypeEnum.validateJsonElement(jsonObj.get("listType"));
      }
      if ((jsonObj.get("listTypeDescription") != null && !jsonObj.get("listTypeDescription").isJsonNull()) && !jsonObj.get("listTypeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listTypeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listTypeDescription").toString()));
      }
      if ((jsonObj.get("responseMessage") != null && !jsonObj.get("responseMessage").isJsonNull()) && !jsonObj.get("responseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickDocumentPerCategoryList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickDocumentPerCategoryList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickDocumentPerCategoryList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickDocumentPerCategoryList.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickDocumentPerCategoryList>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickDocumentPerCategoryList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickDocumentPerCategoryList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickDocumentPerCategoryList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickDocumentPerCategoryList
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickDocumentPerCategoryList
   */
  public static EnterpriseTopazSidekickDocumentPerCategoryList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickDocumentPerCategoryList.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickDocumentPerCategoryList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

