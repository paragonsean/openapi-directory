/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The schema definition for a data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schema {
  public static final String SERIALIZED_NAME_OBJECT_DEFINITIONS = "objectDefinitions";
  @SerializedName(SERIALIZED_NAME_OBJECT_DEFINITIONS)
  private List<ObjectDefinition> objectDefinitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATION_IDS = "operationIds";
  @SerializedName(SERIALIZED_NAME_OPERATION_IDS)
  private List<String> operationIds = new ArrayList<>();

  public Schema() {
  }

  public Schema objectDefinitions(List<ObjectDefinition> objectDefinitions) {
    this.objectDefinitions = objectDefinitions;
    return this;
  }

  public Schema addObjectDefinitionsItem(ObjectDefinition objectDefinitionsItem) {
    if (this.objectDefinitions == null) {
      this.objectDefinitions = new ArrayList<>();
    }
    this.objectDefinitions.add(objectDefinitionsItem);
    return this;
  }

  /**
   * The list of top-level objects for the data source. The maximum number of elements is 10.
   * @return objectDefinitions
   */
  @javax.annotation.Nullable
  public List<ObjectDefinition> getObjectDefinitions() {
    return objectDefinitions;
  }

  public void setObjectDefinitions(List<ObjectDefinition> objectDefinitions) {
    this.objectDefinitions = objectDefinitions;
  }


  public Schema operationIds(List<String> operationIds) {
    this.operationIds = operationIds;
    return this;
  }

  public Schema addOperationIdsItem(String operationIdsItem) {
    if (this.operationIds == null) {
      this.operationIds = new ArrayList<>();
    }
    this.operationIds.add(operationIdsItem);
    return this;
  }

  /**
   * IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content.
   * @return operationIds
   */
  @javax.annotation.Nullable
  public List<String> getOperationIds() {
    return operationIds;
  }

  public void setOperationIds(List<String> operationIds) {
    this.operationIds = operationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schema schema = (Schema) o;
    return Objects.equals(this.objectDefinitions, schema.objectDefinitions) &&
        Objects.equals(this.operationIds, schema.operationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectDefinitions, operationIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schema {\n");
    sb.append("    objectDefinitions: ").append(toIndentedString(objectDefinitions)).append("\n");
    sb.append("    operationIds: ").append(toIndentedString(operationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectDefinitions");
    openapiFields.add("operationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schema is not found in the empty JSON string", Schema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("objectDefinitions") != null && !jsonObj.get("objectDefinitions").isJsonNull()) {
        JsonArray jsonArrayobjectDefinitions = jsonObj.getAsJsonArray("objectDefinitions");
        if (jsonArrayobjectDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("objectDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `objectDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("objectDefinitions").toString()));
          }

          // validate the optional field `objectDefinitions` (array)
          for (int i = 0; i < jsonArrayobjectDefinitions.size(); i++) {
            ObjectDefinition.validateJsonElement(jsonArrayobjectDefinitions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operationIds") != null && !jsonObj.get("operationIds").isJsonNull() && !jsonObj.get("operationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationIds` to be an array in the JSON string but got `%s`", jsonObj.get("operationIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schema.class));

       return (TypeAdapter<T>) new TypeAdapter<Schema>() {
           @Override
           public void write(JsonWriter out, Schema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schema
   * @throws IOException if the JSON string is invalid with respect to Schema
   */
  public static Schema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schema.class);
  }

  /**
   * Convert an instance of Schema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

