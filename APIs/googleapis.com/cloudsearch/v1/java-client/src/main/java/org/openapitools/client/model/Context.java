/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Context
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Context {
  /**
   * Gets or Sets app
   */
  @JsonAdapter(AppEnum.Adapter.class)
  public enum AppEnum {
    UNKNOWN_APP("UNKNOWN_APP"),
    
    TOPAZ("TOPAZ"),
    
    MOMA("MOMA");

    private String value;

    AppEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppEnum fromValue(String value) {
      for (AppEnum b : AppEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private List<AppEnum> app = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private List<Integer> dayOfWeek = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE_SEC = "endDateSec";
  @SerializedName(SERIALIZED_NAME_END_DATE_SEC)
  private String endDateSec;

  public static final String SERIALIZED_NAME_END_DAY_OFFSET_SEC = "endDayOffsetSec";
  @SerializedName(SERIALIZED_NAME_END_DAY_OFFSET_SEC)
  private String endDayOffsetSec;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private List<String> locale = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private List<String> location = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private List<String> query = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE_SEC = "startDateSec";
  @SerializedName(SERIALIZED_NAME_START_DATE_SEC)
  private String startDateSec;

  public static final String SERIALIZED_NAME_START_DAY_OFFSET_SEC = "startDayOffsetSec";
  @SerializedName(SERIALIZED_NAME_START_DAY_OFFSET_SEC)
  private String startDayOffsetSec;

  /**
   * Gets or Sets surface
   */
  @JsonAdapter(SurfaceEnum.Adapter.class)
  public enum SurfaceEnum {
    UNKNOWN_SURFACE("UNKNOWN_SURFACE"),
    
    DESKTOP("DESKTOP"),
    
    ANDROID("ANDROID"),
    
    IOS("IOS"),
    
    MOBILE("MOBILE"),
    
    ANY("ANY");

    private String value;

    SurfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SurfaceEnum fromValue(String value) {
      for (SurfaceEnum b : SurfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SurfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SurfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SurfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SurfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SurfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SURFACE = "surface";
  @SerializedName(SERIALIZED_NAME_SURFACE)
  private List<SurfaceEnum> surface = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN_CARD_TYPE("UNKNOWN_CARD_TYPE"),
    
    HOMEPAGE_CARD("HOMEPAGE_CARD"),
    
    ANSWER_CARD("ANSWER_CARD"),
    
    RHS_CARD("RHS_CARD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<TypeEnum> type = new ArrayList<>();

  public Context() {
  }

  public Context app(List<AppEnum> app) {
    this.app = app;
    return this;
  }

  public Context addAppItem(AppEnum appItem) {
    if (this.app == null) {
      this.app = new ArrayList<>();
    }
    this.app.add(appItem);
    return this;
  }

  /**
   * [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
   * @return app
   */
  @javax.annotation.Nullable
  public List<AppEnum> getApp() {
    return app;
  }

  public void setApp(List<AppEnum> app) {
    this.app = app;
  }


  public Context dayOfWeek(List<Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  public Context addDayOfWeekItem(Integer dayOfWeekItem) {
    if (this.dayOfWeek == null) {
      this.dayOfWeek = new ArrayList<>();
    }
    this.dayOfWeek.add(dayOfWeekItem);
    return this;
  }

  /**
   * [Optional] Day of week when the card should be shown, where 0 is Monday.
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public List<Integer> getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(List<Integer> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public Context endDateSec(String endDateSec) {
    this.endDateSec = endDateSec;
    return this;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing, end_date_sec will be set to Jan 1st, 2100.
   * @return endDateSec
   */
  @javax.annotation.Nullable
  public String getEndDateSec() {
    return endDateSec;
  }

  public void setEndDateSec(String endDateSec) {
    this.endDateSec = endDateSec;
  }


  public Context endDayOffsetSec(String endDayOffsetSec) {
    this.endDayOffsetSec = endDayOffsetSec;
    return this;
  }

  /**
   * [Optional] End time in seconds, within a day, when the card should stop being shown if it&#39;s within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600 sec/hour), i.e., midnight next day.
   * @return endDayOffsetSec
   */
  @javax.annotation.Nullable
  public String getEndDayOffsetSec() {
    return endDayOffsetSec;
  }

  public void setEndDayOffsetSec(String endDayOffsetSec) {
    this.endDayOffsetSec = endDayOffsetSec;
  }


  public Context locale(List<String> locale) {
    this.locale = locale;
    return this;
  }

  public Context addLocaleItem(String localeItem) {
    if (this.locale == null) {
      this.locale = new ArrayList<>();
    }
    this.locale.add(localeItem);
    return this;
  }

  /**
   * [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If missing, the card is going to show to clients regardless of their locale.
   * @return locale
   */
  @javax.annotation.Nullable
  public List<String> getLocale() {
    return locale;
  }

  public void setLocale(List<String> locale) {
    this.locale = locale;
  }


  public Context location(List<String> location) {
    this.location = location;
    return this;
  }

  public Context addLocationItem(String locationItem) {
    if (this.location == null) {
      this.location = new ArrayList<>();
    }
    this.location.add(locationItem);
    return this;
  }

  /**
   * [Optional] Text-free locations where the card should be shown. This is expected to match the user&#39;s location in focus. If no location is specified, the card will be shown for any location.
   * @return location
   */
  @javax.annotation.Nullable
  public List<String> getLocation() {
    return location;
  }

  public void setLocation(List<String> location) {
    this.location = location;
  }


  public Context query(List<String> query) {
    this.query = query;
    return this;
  }

  public Context addQueryItem(String queryItem) {
    if (this.query == null) {
      this.query = new ArrayList<>();
    }
    this.query.add(queryItem);
    return this;
  }

  /**
   * [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It&#39;s the exact case-insensitive queries that will trigger the Answer or RHS card.
   * @return query
   */
  @javax.annotation.Nullable
  public List<String> getQuery() {
    return query;
  }

  public void setQuery(List<String> query) {
    this.query = query;
  }


  public Context startDateSec(String startDateSec) {
    this.startDateSec = startDateSec;
    return this;
  }

  /**
   * [Optional] Date (in seconds since epoch) when the card should start being shown. If missing, start_date_sec will be Jan 1st, 1970 UTC.
   * @return startDateSec
   */
  @javax.annotation.Nullable
  public String getStartDateSec() {
    return startDateSec;
  }

  public void setStartDateSec(String startDateSec) {
    this.startDateSec = startDateSec;
  }


  public Context startDayOffsetSec(String startDayOffsetSec) {
    this.startDayOffsetSec = startDayOffsetSec;
    return this;
  }

  /**
   * [Optional] Start time in seconds, within a day, when the card should be shown if it&#39;s within [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
   * @return startDayOffsetSec
   */
  @javax.annotation.Nullable
  public String getStartDayOffsetSec() {
    return startDayOffsetSec;
  }

  public void setStartDayOffsetSec(String startDayOffsetSec) {
    this.startDayOffsetSec = startDayOffsetSec;
  }


  public Context surface(List<SurfaceEnum> surface) {
    this.surface = surface;
    return this;
  }

  public Context addSurfaceItem(SurfaceEnum surfaceItem) {
    if (this.surface == null) {
      this.surface = new ArrayList<>();
    }
    this.surface.add(surfaceItem);
    return this;
  }

  /**
   * [Optional] Surface where the card should be shown in. If missing, the card will be shown in any surface.
   * @return surface
   */
  @javax.annotation.Nullable
  public List<SurfaceEnum> getSurface() {
    return surface;
  }

  public void setSurface(List<SurfaceEnum> surface) {
    this.surface = surface;
  }


  public Context type(List<TypeEnum> type) {
    this.type = type;
    return this;
  }

  public Context addTypeItem(TypeEnum typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * [Required] Type of the card (homepage, Answer or RHS).
   * @return type
   */
  @javax.annotation.Nullable
  public List<TypeEnum> getType() {
    return type;
  }

  public void setType(List<TypeEnum> type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Context context = (Context) o;
    return Objects.equals(this.app, context.app) &&
        Objects.equals(this.dayOfWeek, context.dayOfWeek) &&
        Objects.equals(this.endDateSec, context.endDateSec) &&
        Objects.equals(this.endDayOffsetSec, context.endDayOffsetSec) &&
        Objects.equals(this.locale, context.locale) &&
        Objects.equals(this.location, context.location) &&
        Objects.equals(this.query, context.query) &&
        Objects.equals(this.startDateSec, context.startDateSec) &&
        Objects.equals(this.startDayOffsetSec, context.startDayOffsetSec) &&
        Objects.equals(this.surface, context.surface) &&
        Objects.equals(this.type, context.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, dayOfWeek, endDateSec, endDayOffsetSec, locale, location, query, startDateSec, startDayOffsetSec, surface, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Context {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    endDateSec: ").append(toIndentedString(endDateSec)).append("\n");
    sb.append("    endDayOffsetSec: ").append(toIndentedString(endDayOffsetSec)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    startDateSec: ").append(toIndentedString(startDateSec)).append("\n");
    sb.append("    startDayOffsetSec: ").append(toIndentedString(startDayOffsetSec)).append("\n");
    sb.append("    surface: ").append(toIndentedString(surface)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("dayOfWeek");
    openapiFields.add("endDateSec");
    openapiFields.add("endDayOffsetSec");
    openapiFields.add("locale");
    openapiFields.add("location");
    openapiFields.add("query");
    openapiFields.add("startDateSec");
    openapiFields.add("startDayOffsetSec");
    openapiFields.add("surface");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Context
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Context.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Context is not found in the empty JSON string", Context.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Context.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Context` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull() && !jsonObj.get("app").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `app` to be an array in the JSON string but got `%s`", jsonObj.get("app").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dayOfWeek") != null && !jsonObj.get("dayOfWeek").isJsonNull() && !jsonObj.get("dayOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfWeek").toString()));
      }
      if ((jsonObj.get("endDateSec") != null && !jsonObj.get("endDateSec").isJsonNull()) && !jsonObj.get("endDateSec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateSec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateSec").toString()));
      }
      if ((jsonObj.get("endDayOffsetSec") != null && !jsonObj.get("endDayOffsetSec").isJsonNull()) && !jsonObj.get("endDayOffsetSec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDayOffsetSec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDayOffsetSec").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull() && !jsonObj.get("locale").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be an array in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull() && !jsonObj.get("location").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be an array in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull() && !jsonObj.get("query").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be an array in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("startDateSec") != null && !jsonObj.get("startDateSec").isJsonNull()) && !jsonObj.get("startDateSec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateSec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateSec").toString()));
      }
      if ((jsonObj.get("startDayOffsetSec") != null && !jsonObj.get("startDayOffsetSec").isJsonNull()) && !jsonObj.get("startDayOffsetSec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDayOffsetSec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDayOffsetSec").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("surface") != null && !jsonObj.get("surface").isJsonNull() && !jsonObj.get("surface").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface` to be an array in the JSON string but got `%s`", jsonObj.get("surface").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Context.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Context' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Context> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Context.class));

       return (TypeAdapter<T>) new TypeAdapter<Context>() {
           @Override
           public void write(JsonWriter out, Context value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Context read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Context given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Context
   * @throws IOException if the JSON string is invalid with respect to Context
   */
  public static Context fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Context.class);
  }

  /**
   * Convert an instance of Context to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

