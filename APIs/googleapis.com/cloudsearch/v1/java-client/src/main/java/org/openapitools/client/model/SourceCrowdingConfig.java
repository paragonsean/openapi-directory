/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host \&quot;crowd out\&quot; other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceCrowdingConfig {
  public static final String SERIALIZED_NAME_NUM_RESULTS = "numResults";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Integer numResults;

  public static final String SERIALIZED_NAME_NUM_SUGGESTIONS = "numSuggestions";
  @SerializedName(SERIALIZED_NAME_NUM_SUGGESTIONS)
  private Integer numSuggestions;

  public SourceCrowdingConfig() {
  }

  public SourceCrowdingConfig numResults(Integer numResults) {
    this.numResults = numResults;
    return this;
  }

  /**
   * Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.
   * @return numResults
   */
  @javax.annotation.Nullable
  public Integer getNumResults() {
    return numResults;
  }

  public void setNumResults(Integer numResults) {
    this.numResults = numResults;
  }


  public SourceCrowdingConfig numSuggestions(Integer numSuggestions) {
    this.numSuggestions = numSuggestions;
    return this;
  }

  /**
   * Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.
   * @return numSuggestions
   */
  @javax.annotation.Nullable
  public Integer getNumSuggestions() {
    return numSuggestions;
  }

  public void setNumSuggestions(Integer numSuggestions) {
    this.numSuggestions = numSuggestions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceCrowdingConfig sourceCrowdingConfig = (SourceCrowdingConfig) o;
    return Objects.equals(this.numResults, sourceCrowdingConfig.numResults) &&
        Objects.equals(this.numSuggestions, sourceCrowdingConfig.numSuggestions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numResults, numSuggestions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceCrowdingConfig {\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    numSuggestions: ").append(toIndentedString(numSuggestions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numResults");
    openapiFields.add("numSuggestions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceCrowdingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceCrowdingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceCrowdingConfig is not found in the empty JSON string", SourceCrowdingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceCrowdingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceCrowdingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceCrowdingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceCrowdingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceCrowdingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceCrowdingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceCrowdingConfig>() {
           @Override
           public void write(JsonWriter out, SourceCrowdingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceCrowdingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceCrowdingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceCrowdingConfig
   * @throws IOException if the JSON string is invalid with respect to SourceCrowdingConfig
   */
  public static SourceCrowdingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceCrowdingConfig.class);
  }

  /**
   * Convert an instance of SourceCrowdingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

