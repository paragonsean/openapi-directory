/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the settings for Cloud audit logging
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditLoggingSettings {
  public static final String SERIALIZED_NAME_LOG_ADMIN_READ_ACTIONS = "logAdminReadActions";
  @SerializedName(SERIALIZED_NAME_LOG_ADMIN_READ_ACTIONS)
  private Boolean logAdminReadActions;

  public static final String SERIALIZED_NAME_LOG_DATA_READ_ACTIONS = "logDataReadActions";
  @SerializedName(SERIALIZED_NAME_LOG_DATA_READ_ACTIONS)
  private Boolean logDataReadActions;

  public static final String SERIALIZED_NAME_LOG_DATA_WRITE_ACTIONS = "logDataWriteActions";
  @SerializedName(SERIALIZED_NAME_LOG_DATA_WRITE_ACTIONS)
  private Boolean logDataWriteActions;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public AuditLoggingSettings() {
  }

  public AuditLoggingSettings logAdminReadActions(Boolean logAdminReadActions) {
    this.logAdminReadActions = logAdminReadActions;
    return this;
  }

  /**
   * Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.
   * @return logAdminReadActions
   */
  @javax.annotation.Nullable
  public Boolean getLogAdminReadActions() {
    return logAdminReadActions;
  }

  public void setLogAdminReadActions(Boolean logAdminReadActions) {
    this.logAdminReadActions = logAdminReadActions;
  }


  public AuditLoggingSettings logDataReadActions(Boolean logDataReadActions) {
    this.logDataReadActions = logDataReadActions;
    return this;
  }

  /**
   * Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc.
   * @return logDataReadActions
   */
  @javax.annotation.Nullable
  public Boolean getLogDataReadActions() {
    return logDataReadActions;
  }

  public void setLogDataReadActions(Boolean logDataReadActions) {
    this.logDataReadActions = logDataReadActions;
  }


  public AuditLoggingSettings logDataWriteActions(Boolean logDataWriteActions) {
    this.logDataWriteActions = logDataWriteActions;
    return this;
  }

  /**
   * Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.
   * @return logDataWriteActions
   */
  @javax.annotation.Nullable
  public Boolean getLogDataWriteActions() {
    return logDataWriteActions;
  }

  public void setLogDataWriteActions(Boolean logDataWriteActions) {
    this.logDataWriteActions = logDataWriteActions;
  }


  public AuditLoggingSettings project(String project) {
    this.project = project;
    return this;
  }

  /**
   * The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLoggingSettings auditLoggingSettings = (AuditLoggingSettings) o;
    return Objects.equals(this.logAdminReadActions, auditLoggingSettings.logAdminReadActions) &&
        Objects.equals(this.logDataReadActions, auditLoggingSettings.logDataReadActions) &&
        Objects.equals(this.logDataWriteActions, auditLoggingSettings.logDataWriteActions) &&
        Objects.equals(this.project, auditLoggingSettings.project);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logAdminReadActions, logDataReadActions, logDataWriteActions, project);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLoggingSettings {\n");
    sb.append("    logAdminReadActions: ").append(toIndentedString(logAdminReadActions)).append("\n");
    sb.append("    logDataReadActions: ").append(toIndentedString(logDataReadActions)).append("\n");
    sb.append("    logDataWriteActions: ").append(toIndentedString(logDataWriteActions)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logAdminReadActions");
    openapiFields.add("logDataReadActions");
    openapiFields.add("logDataWriteActions");
    openapiFields.add("project");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLoggingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLoggingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLoggingSettings is not found in the empty JSON string", AuditLoggingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLoggingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLoggingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLoggingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLoggingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLoggingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLoggingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLoggingSettings>() {
           @Override
           public void write(JsonWriter out, AuditLoggingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLoggingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLoggingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLoggingSettings
   * @throws IOException if the JSON string is invalid with respect to AuditLoggingSettings
   */
  public static AuditLoggingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLoggingSettings.class);
  }

  /**
   * Convert an instance of AuditLoggingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

