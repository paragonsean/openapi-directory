/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickPerson {
  /**
   * The level of affinity this person has with the requesting user.
   */
  @JsonAdapter(AffinityLevelEnum.Adapter.class)
  public enum AffinityLevelEnum {
    UNKNOWN("UNKNOWN"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    AffinityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AffinityLevelEnum fromValue(String value) {
      for (AffinityLevelEnum b : AffinityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AffinityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AffinityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AffinityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AffinityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AffinityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AFFINITY_LEVEL = "affinityLevel";
  @SerializedName(SERIALIZED_NAME_AFFINITY_LEVEL)
  private AffinityLevelEnum affinityLevel;

  /**
   * Attendance status of the person when included in a meeting event.
   */
  @JsonAdapter(AttendingStatusEnum.Adapter.class)
  public enum AttendingStatusEnum {
    AWAITING("AWAITING"),
    
    TRUE("true"),
    
    FALSE("false"),
    
    MAYBE("MAYBE");

    private String value;

    AttendingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttendingStatusEnum fromValue(String value) {
      for (AttendingStatusEnum b : AttendingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttendingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttendingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttendingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttendingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttendingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTENDING_STATUS = "attendingStatus";
  @SerializedName(SERIALIZED_NAME_ATTENDING_STATUS)
  private AttendingStatusEnum attendingStatus;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GAIA_ID = "gaiaId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GAIA_ID)
  private String gaiaId;

  public static final String SERIALIZED_NAME_IS_GROUP = "isGroup";
  @SerializedName(SERIALIZED_NAME_IS_GROUP)
  private Boolean isGroup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBFUSCATED_GAIA_ID = "obfuscatedGaiaId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_GAIA_ID)
  private String obfuscatedGaiaId;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public EnterpriseTopazSidekickPerson() {
  }

  public EnterpriseTopazSidekickPerson affinityLevel(AffinityLevelEnum affinityLevel) {
    this.affinityLevel = affinityLevel;
    return this;
  }

  /**
   * The level of affinity this person has with the requesting user.
   * @return affinityLevel
   */
  @javax.annotation.Nullable
  public AffinityLevelEnum getAffinityLevel() {
    return affinityLevel;
  }

  public void setAffinityLevel(AffinityLevelEnum affinityLevel) {
    this.affinityLevel = affinityLevel;
  }


  public EnterpriseTopazSidekickPerson attendingStatus(AttendingStatusEnum attendingStatus) {
    this.attendingStatus = attendingStatus;
    return this;
  }

  /**
   * Attendance status of the person when included in a meeting event.
   * @return attendingStatus
   */
  @javax.annotation.Nullable
  public AttendingStatusEnum getAttendingStatus() {
    return attendingStatus;
  }

  public void setAttendingStatus(AttendingStatusEnum attendingStatus) {
    this.attendingStatus = attendingStatus;
  }


  public EnterpriseTopazSidekickPerson email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  @Deprecated
  public EnterpriseTopazSidekickPerson gaiaId(String gaiaId) {
    this.gaiaId = gaiaId;
    return this;
  }

  /**
   * Gaia id.
   * @return gaiaId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getGaiaId() {
    return gaiaId;
  }

  @Deprecated
  public void setGaiaId(String gaiaId) {
    this.gaiaId = gaiaId;
  }


  public EnterpriseTopazSidekickPerson isGroup(Boolean isGroup) {
    this.isGroup = isGroup;
    return this;
  }

  /**
   * Whether the invitee is a group.
   * @return isGroup
   */
  @javax.annotation.Nullable
  public Boolean getIsGroup() {
    return isGroup;
  }

  public void setIsGroup(Boolean isGroup) {
    this.isGroup = isGroup;
  }


  public EnterpriseTopazSidekickPerson name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EnterpriseTopazSidekickPerson obfuscatedGaiaId(String obfuscatedGaiaId) {
    this.obfuscatedGaiaId = obfuscatedGaiaId;
    return this;
  }

  /**
   * Obfuscated Gaia id.
   * @return obfuscatedGaiaId
   */
  @javax.annotation.Nullable
  public String getObfuscatedGaiaId() {
    return obfuscatedGaiaId;
  }

  public void setObfuscatedGaiaId(String obfuscatedGaiaId) {
    this.obfuscatedGaiaId = obfuscatedGaiaId;
  }


  public EnterpriseTopazSidekickPerson photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Absolute URL to the profile photo of the person.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickPerson enterpriseTopazSidekickPerson = (EnterpriseTopazSidekickPerson) o;
    return Objects.equals(this.affinityLevel, enterpriseTopazSidekickPerson.affinityLevel) &&
        Objects.equals(this.attendingStatus, enterpriseTopazSidekickPerson.attendingStatus) &&
        Objects.equals(this.email, enterpriseTopazSidekickPerson.email) &&
        Objects.equals(this.gaiaId, enterpriseTopazSidekickPerson.gaiaId) &&
        Objects.equals(this.isGroup, enterpriseTopazSidekickPerson.isGroup) &&
        Objects.equals(this.name, enterpriseTopazSidekickPerson.name) &&
        Objects.equals(this.obfuscatedGaiaId, enterpriseTopazSidekickPerson.obfuscatedGaiaId) &&
        Objects.equals(this.photoUrl, enterpriseTopazSidekickPerson.photoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affinityLevel, attendingStatus, email, gaiaId, isGroup, name, obfuscatedGaiaId, photoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickPerson {\n");
    sb.append("    affinityLevel: ").append(toIndentedString(affinityLevel)).append("\n");
    sb.append("    attendingStatus: ").append(toIndentedString(attendingStatus)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gaiaId: ").append(toIndentedString(gaiaId)).append("\n");
    sb.append("    isGroup: ").append(toIndentedString(isGroup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    obfuscatedGaiaId: ").append(toIndentedString(obfuscatedGaiaId)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affinityLevel");
    openapiFields.add("attendingStatus");
    openapiFields.add("email");
    openapiFields.add("gaiaId");
    openapiFields.add("isGroup");
    openapiFields.add("name");
    openapiFields.add("obfuscatedGaiaId");
    openapiFields.add("photoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickPerson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickPerson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickPerson is not found in the empty JSON string", EnterpriseTopazSidekickPerson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickPerson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickPerson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affinityLevel") != null && !jsonObj.get("affinityLevel").isJsonNull()) && !jsonObj.get("affinityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affinityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affinityLevel").toString()));
      }
      // validate the optional field `affinityLevel`
      if (jsonObj.get("affinityLevel") != null && !jsonObj.get("affinityLevel").isJsonNull()) {
        AffinityLevelEnum.validateJsonElement(jsonObj.get("affinityLevel"));
      }
      if ((jsonObj.get("attendingStatus") != null && !jsonObj.get("attendingStatus").isJsonNull()) && !jsonObj.get("attendingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendingStatus").toString()));
      }
      // validate the optional field `attendingStatus`
      if (jsonObj.get("attendingStatus") != null && !jsonObj.get("attendingStatus").isJsonNull()) {
        AttendingStatusEnum.validateJsonElement(jsonObj.get("attendingStatus"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("gaiaId") != null && !jsonObj.get("gaiaId").isJsonNull()) && !jsonObj.get("gaiaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gaiaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gaiaId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("obfuscatedGaiaId") != null && !jsonObj.get("obfuscatedGaiaId").isJsonNull()) && !jsonObj.get("obfuscatedGaiaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedGaiaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedGaiaId").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickPerson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickPerson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickPerson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickPerson.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickPerson>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickPerson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickPerson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickPerson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickPerson
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickPerson
   */
  public static EnterpriseTopazSidekickPerson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickPerson.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickPerson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

