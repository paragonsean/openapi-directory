/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDebugInfo;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDocumentJustification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a document. NEXT_TAG: 15
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickCommonDocument {
  /**
   * Access type, i.e., whether the user has access to the document or not.
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    UNKNOWN_ACCESS("UNKNOWN_ACCESS"),
    
    ALLOWED("ALLOWED"),
    
    NOT_ALLOWED("NOT_ALLOWED");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTypeEnum fromValue(String value) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "accessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypeEnum accessType;

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private EnterpriseTopazSidekickCommonDebugInfo debugInfo;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_DRIVE_DOCUMENT_METADATA = "driveDocumentMetadata";
  @SerializedName(SERIALIZED_NAME_DRIVE_DOCUMENT_METADATA)
  private EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata driveDocumentMetadata;

  public static final String SERIALIZED_NAME_GENERIC_URL = "genericUrl";
  @SerializedName(SERIALIZED_NAME_GENERIC_URL)
  private String genericUrl;

  public static final String SERIALIZED_NAME_JUSTIFICATION = "justification";
  @SerializedName(SERIALIZED_NAME_JUSTIFICATION)
  private EnterpriseTopazSidekickCommonDocumentJustification justification;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  /**
   * Document provenance.
   */
  @JsonAdapter(ProvenanceEnum.Adapter.class)
  public enum ProvenanceEnum {
    UNKNOWN_PROVENANCE("UNKNOWN_PROVENANCE"),
    
    CALENDAR_DESCRIPTION("CALENDAR_DESCRIPTION"),
    
    CALENDAR_ATTACHMENT("CALENDAR_ATTACHMENT"),
    
    MINED("MINED"),
    
    CALENDAR_ASSIST_ATTACHMENT("CALENDAR_ASSIST_ATTACHMENT");

    private String value;

    ProvenanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvenanceEnum fromValue(String value) {
      for (ProvenanceEnum b : ProvenanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvenanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvenanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvenanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvenanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvenanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private ProvenanceEnum provenance;

  /**
   * Justification of why this document is being returned.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    UNKNOWN("UNKNOWN"),
    
    TRENDING_IN_COLLABORATORS("TRENDING_IN_COLLABORATORS"),
    
    TRENDING_IN_DOMAIN("TRENDING_IN_DOMAIN"),
    
    FREQUENTLY_VIEWED("FREQUENTLY_VIEWED"),
    
    FREQUENTLY_EDITED("FREQUENTLY_EDITED"),
    
    NEW_UPDATES("NEW_UPDATES"),
    
    NEW_COMMENTS("NEW_COMMENTS"),
    
    EVENT_DESCRIPTION("EVENT_DESCRIPTION"),
    
    EVENT_ATTACHMENT("EVENT_ATTACHMENT"),
    
    EVENT_METADATA_ATTACHMENT("EVENT_METADATA_ATTACHMENT"),
    
    MINED_DOCUMENT("MINED_DOCUMENT"),
    
    NEW_MENTIONS("NEW_MENTIONS"),
    
    NEW_SHARES("NEW_SHARES");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Type of the document.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("UNKNOWN"),
    
    DOCUMENT("DOCUMENT"),
    
    PRESENTATION("PRESENTATION"),
    
    SPREADSHEET("SPREADSHEET"),
    
    PDF("PDF"),
    
    IMAGE("IMAGE"),
    
    BINARY_BLOB("BINARY_BLOB"),
    
    FUSION_TABLE("FUSION_TABLE"),
    
    FOLDER("FOLDER"),
    
    DRAWING("DRAWING"),
    
    VIDEO("VIDEO"),
    
    FORM("FORM"),
    
    LINK_URL("LINK_URL"),
    
    LINK_GO("LINK_GO"),
    
    LINK_GOO_GL("LINK_GOO_GL"),
    
    LINK_BIT_LY("LINK_BIT_LY"),
    
    LINK_GMAIL("LINK_GMAIL"),
    
    LINK_MAILTO("LINK_MAILTO"),
    
    VIDEO_YOUTUBE("VIDEO_YOUTUBE"),
    
    VIDEO_LIVE("VIDEO_LIVE"),
    
    GROUPS("GROUPS"),
    
    NEWS("NEWS"),
    
    SITES("SITES"),
    
    HANGOUT("HANGOUT"),
    
    AUDIO("AUDIO"),
    
    MS_WORD("MS_WORD"),
    
    MS_POWERPOINT("MS_POWERPOINT"),
    
    MS_EXCEL("MS_EXCEL"),
    
    MS_OUTLOOK("MS_OUTLOOK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public EnterpriseTopazSidekickCommonDocument() {
  }

  public EnterpriseTopazSidekickCommonDocument accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Access type, i.e., whether the user has access to the document or not.
   * @return accessType
   */
  @javax.annotation.Nullable
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }


  public EnterpriseTopazSidekickCommonDocument debugInfo(EnterpriseTopazSidekickCommonDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Get debugInfo
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonDebugInfo getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(EnterpriseTopazSidekickCommonDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
  }


  public EnterpriseTopazSidekickCommonDocument documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Document id.
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public EnterpriseTopazSidekickCommonDocument driveDocumentMetadata(EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata driveDocumentMetadata) {
    this.driveDocumentMetadata = driveDocumentMetadata;
    return this;
  }

  /**
   * Get driveDocumentMetadata
   * @return driveDocumentMetadata
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata getDriveDocumentMetadata() {
    return driveDocumentMetadata;
  }

  public void setDriveDocumentMetadata(EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata driveDocumentMetadata) {
    this.driveDocumentMetadata = driveDocumentMetadata;
  }


  public EnterpriseTopazSidekickCommonDocument genericUrl(String genericUrl) {
    this.genericUrl = genericUrl;
    return this;
  }

  /**
   * Generic Drive-based url in the format of drive.google.com/open to be used for deeplink
   * @return genericUrl
   */
  @javax.annotation.Nullable
  public String getGenericUrl() {
    return genericUrl;
  }

  public void setGenericUrl(String genericUrl) {
    this.genericUrl = genericUrl;
  }


  public EnterpriseTopazSidekickCommonDocument justification(EnterpriseTopazSidekickCommonDocumentJustification justification) {
    this.justification = justification;
    return this;
  }

  /**
   * Get justification
   * @return justification
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonDocumentJustification getJustification() {
    return justification;
  }

  public void setJustification(EnterpriseTopazSidekickCommonDocumentJustification justification) {
    this.justification = justification;
  }


  public EnterpriseTopazSidekickCommonDocument mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * MIME type
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  @Deprecated
  public EnterpriseTopazSidekickCommonDocument provenance(ProvenanceEnum provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * Document provenance.
   * @return provenance
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ProvenanceEnum getProvenance() {
    return provenance;
  }

  @Deprecated
  public void setProvenance(ProvenanceEnum provenance) {
    this.provenance = provenance;
  }


  @Deprecated
  public EnterpriseTopazSidekickCommonDocument reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Justification of why this document is being returned.
   * @return reason
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  @Deprecated
  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  public EnterpriseTopazSidekickCommonDocument snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * A sampling of the text from the document.
   * @return snippet
   */
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public EnterpriseTopazSidekickCommonDocument thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * Thumbnail URL.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  public EnterpriseTopazSidekickCommonDocument title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the document.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EnterpriseTopazSidekickCommonDocument type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the document.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public EnterpriseTopazSidekickCommonDocument url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Absolute URL of the document.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickCommonDocument enterpriseTopazSidekickCommonDocument = (EnterpriseTopazSidekickCommonDocument) o;
    return Objects.equals(this.accessType, enterpriseTopazSidekickCommonDocument.accessType) &&
        Objects.equals(this.debugInfo, enterpriseTopazSidekickCommonDocument.debugInfo) &&
        Objects.equals(this.documentId, enterpriseTopazSidekickCommonDocument.documentId) &&
        Objects.equals(this.driveDocumentMetadata, enterpriseTopazSidekickCommonDocument.driveDocumentMetadata) &&
        Objects.equals(this.genericUrl, enterpriseTopazSidekickCommonDocument.genericUrl) &&
        Objects.equals(this.justification, enterpriseTopazSidekickCommonDocument.justification) &&
        Objects.equals(this.mimeType, enterpriseTopazSidekickCommonDocument.mimeType) &&
        Objects.equals(this.provenance, enterpriseTopazSidekickCommonDocument.provenance) &&
        Objects.equals(this.reason, enterpriseTopazSidekickCommonDocument.reason) &&
        Objects.equals(this.snippet, enterpriseTopazSidekickCommonDocument.snippet) &&
        Objects.equals(this.thumbnailUrl, enterpriseTopazSidekickCommonDocument.thumbnailUrl) &&
        Objects.equals(this.title, enterpriseTopazSidekickCommonDocument.title) &&
        Objects.equals(this.type, enterpriseTopazSidekickCommonDocument.type) &&
        Objects.equals(this.url, enterpriseTopazSidekickCommonDocument.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, debugInfo, documentId, driveDocumentMetadata, genericUrl, justification, mimeType, provenance, reason, snippet, thumbnailUrl, title, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickCommonDocument {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    driveDocumentMetadata: ").append(toIndentedString(driveDocumentMetadata)).append("\n");
    sb.append("    genericUrl: ").append(toIndentedString(genericUrl)).append("\n");
    sb.append("    justification: ").append(toIndentedString(justification)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessType");
    openapiFields.add("debugInfo");
    openapiFields.add("documentId");
    openapiFields.add("driveDocumentMetadata");
    openapiFields.add("genericUrl");
    openapiFields.add("justification");
    openapiFields.add("mimeType");
    openapiFields.add("provenance");
    openapiFields.add("reason");
    openapiFields.add("snippet");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickCommonDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickCommonDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickCommonDocument is not found in the empty JSON string", EnterpriseTopazSidekickCommonDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickCommonDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickCommonDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessType") != null && !jsonObj.get("accessType").isJsonNull()) && !jsonObj.get("accessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessType").toString()));
      }
      // validate the optional field `accessType`
      if (jsonObj.get("accessType") != null && !jsonObj.get("accessType").isJsonNull()) {
        AccessTypeEnum.validateJsonElement(jsonObj.get("accessType"));
      }
      // validate the optional field `debugInfo`
      if (jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) {
        EnterpriseTopazSidekickCommonDebugInfo.validateJsonElement(jsonObj.get("debugInfo"));
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      // validate the optional field `driveDocumentMetadata`
      if (jsonObj.get("driveDocumentMetadata") != null && !jsonObj.get("driveDocumentMetadata").isJsonNull()) {
        EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.validateJsonElement(jsonObj.get("driveDocumentMetadata"));
      }
      if ((jsonObj.get("genericUrl") != null && !jsonObj.get("genericUrl").isJsonNull()) && !jsonObj.get("genericUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genericUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genericUrl").toString()));
      }
      // validate the optional field `justification`
      if (jsonObj.get("justification") != null && !jsonObj.get("justification").isJsonNull()) {
        EnterpriseTopazSidekickCommonDocumentJustification.validateJsonElement(jsonObj.get("justification"));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) && !jsonObj.get("provenance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provenance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provenance").toString()));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        ProvenanceEnum.validateJsonElement(jsonObj.get("provenance"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
      if ((jsonObj.get("thumbnailUrl") != null && !jsonObj.get("thumbnailUrl").isJsonNull()) && !jsonObj.get("thumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUrl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickCommonDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickCommonDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickCommonDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickCommonDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickCommonDocument>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickCommonDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickCommonDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickCommonDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickCommonDocument
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickCommonDocument
   */
  public static EnterpriseTopazSidekickCommonDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickCommonDocument.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickCommonDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

