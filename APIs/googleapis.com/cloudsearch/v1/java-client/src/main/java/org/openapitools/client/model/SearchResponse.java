/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorInfo;
import org.openapitools.client.model.FacetResult;
import org.openapitools.client.model.QueryInterpretation;
import org.openapitools.client.model.ResponseDebugInfo;
import org.openapitools.client.model.ResultCounts;
import org.openapitools.client.model.SearchResult;
import org.openapitools.client.model.SpellResult;
import org.openapitools.client.model.StructuredResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The search API response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResponse {
  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private ResponseDebugInfo debugInfo;

  public static final String SERIALIZED_NAME_ERROR_INFO = "errorInfo";
  @SerializedName(SERIALIZED_NAME_ERROR_INFO)
  private ErrorInfo errorInfo;

  public static final String SERIALIZED_NAME_FACET_RESULTS = "facetResults";
  @SerializedName(SERIALIZED_NAME_FACET_RESULTS)
  private List<FacetResult> facetResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_MORE_RESULTS = "hasMoreResults";
  @SerializedName(SERIALIZED_NAME_HAS_MORE_RESULTS)
  private Boolean hasMoreResults;

  public static final String SERIALIZED_NAME_QUERY_INTERPRETATION = "queryInterpretation";
  @SerializedName(SERIALIZED_NAME_QUERY_INTERPRETATION)
  private QueryInterpretation queryInterpretation;

  public static final String SERIALIZED_NAME_RESULT_COUNT_ESTIMATE = "resultCountEstimate";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT_ESTIMATE)
  private String resultCountEstimate;

  public static final String SERIALIZED_NAME_RESULT_COUNT_EXACT = "resultCountExact";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT_EXACT)
  private String resultCountExact;

  public static final String SERIALIZED_NAME_RESULT_COUNTS = "resultCounts";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNTS)
  private ResultCounts resultCounts;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<SearchResult> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPELL_RESULTS = "spellResults";
  @SerializedName(SERIALIZED_NAME_SPELL_RESULTS)
  private List<SpellResult> spellResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRUCTURED_RESULTS = "structuredResults";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_RESULTS)
  private List<StructuredResult> structuredResults = new ArrayList<>();

  public SearchResponse() {
  }

  public SearchResponse debugInfo(ResponseDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Get debugInfo
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public ResponseDebugInfo getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(ResponseDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
  }


  public SearchResponse errorInfo(ErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  /**
   * Get errorInfo
   * @return errorInfo
   */
  @javax.annotation.Nullable
  public ErrorInfo getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(ErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
  }


  public SearchResponse facetResults(List<FacetResult> facetResults) {
    this.facetResults = facetResults;
    return this;
  }

  public SearchResponse addFacetResultsItem(FacetResult facetResultsItem) {
    if (this.facetResults == null) {
      this.facetResults = new ArrayList<>();
    }
    this.facetResults.add(facetResultsItem);
    return this;
  }

  /**
   * Repeated facet results.
   * @return facetResults
   */
  @javax.annotation.Nullable
  public List<FacetResult> getFacetResults() {
    return facetResults;
  }

  public void setFacetResults(List<FacetResult> facetResults) {
    this.facetResults = facetResults;
  }


  public SearchResponse hasMoreResults(Boolean hasMoreResults) {
    this.hasMoreResults = hasMoreResults;
    return this;
  }

  /**
   * Whether there are more search results matching the query.
   * @return hasMoreResults
   */
  @javax.annotation.Nullable
  public Boolean getHasMoreResults() {
    return hasMoreResults;
  }

  public void setHasMoreResults(Boolean hasMoreResults) {
    this.hasMoreResults = hasMoreResults;
  }


  public SearchResponse queryInterpretation(QueryInterpretation queryInterpretation) {
    this.queryInterpretation = queryInterpretation;
    return this;
  }

  /**
   * Get queryInterpretation
   * @return queryInterpretation
   */
  @javax.annotation.Nullable
  public QueryInterpretation getQueryInterpretation() {
    return queryInterpretation;
  }

  public void setQueryInterpretation(QueryInterpretation queryInterpretation) {
    this.queryInterpretation = queryInterpretation;
  }


  public SearchResponse resultCountEstimate(String resultCountEstimate) {
    this.resultCountEstimate = resultCountEstimate;
    return this;
  }

  /**
   * The estimated result count for this query.
   * @return resultCountEstimate
   */
  @javax.annotation.Nullable
  public String getResultCountEstimate() {
    return resultCountEstimate;
  }

  public void setResultCountEstimate(String resultCountEstimate) {
    this.resultCountEstimate = resultCountEstimate;
  }


  public SearchResponse resultCountExact(String resultCountExact) {
    this.resultCountExact = resultCountExact;
    return this;
  }

  /**
   * The exact result count for this query.
   * @return resultCountExact
   */
  @javax.annotation.Nullable
  public String getResultCountExact() {
    return resultCountExact;
  }

  public void setResultCountExact(String resultCountExact) {
    this.resultCountExact = resultCountExact;
  }


  public SearchResponse resultCounts(ResultCounts resultCounts) {
    this.resultCounts = resultCounts;
    return this;
  }

  /**
   * Get resultCounts
   * @return resultCounts
   */
  @javax.annotation.Nullable
  public ResultCounts getResultCounts() {
    return resultCounts;
  }

  public void setResultCounts(ResultCounts resultCounts) {
    this.resultCounts = resultCounts;
  }


  public SearchResponse results(List<SearchResult> results) {
    this.results = results;
    return this;
  }

  public SearchResponse addResultsItem(SearchResult resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Results from a search query.
   * @return results
   */
  @javax.annotation.Nullable
  public List<SearchResult> getResults() {
    return results;
  }

  public void setResults(List<SearchResult> results) {
    this.results = results;
  }


  public SearchResponse spellResults(List<SpellResult> spellResults) {
    this.spellResults = spellResults;
    return this;
  }

  public SearchResponse addSpellResultsItem(SpellResult spellResultsItem) {
    if (this.spellResults == null) {
      this.spellResults = new ArrayList<>();
    }
    this.spellResults.add(spellResultsItem);
    return this;
  }

  /**
   * Suggested spelling for the query.
   * @return spellResults
   */
  @javax.annotation.Nullable
  public List<SpellResult> getSpellResults() {
    return spellResults;
  }

  public void setSpellResults(List<SpellResult> spellResults) {
    this.spellResults = spellResults;
  }


  public SearchResponse structuredResults(List<StructuredResult> structuredResults) {
    this.structuredResults = structuredResults;
    return this;
  }

  public SearchResponse addStructuredResultsItem(StructuredResult structuredResultsItem) {
    if (this.structuredResults == null) {
      this.structuredResults = new ArrayList<>();
    }
    this.structuredResults.add(structuredResultsItem);
    return this;
  }

  /**
   * Structured results for the user query. These results are not counted against the page_size.
   * @return structuredResults
   */
  @javax.annotation.Nullable
  public List<StructuredResult> getStructuredResults() {
    return structuredResults;
  }

  public void setStructuredResults(List<StructuredResult> structuredResults) {
    this.structuredResults = structuredResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResponse searchResponse = (SearchResponse) o;
    return Objects.equals(this.debugInfo, searchResponse.debugInfo) &&
        Objects.equals(this.errorInfo, searchResponse.errorInfo) &&
        Objects.equals(this.facetResults, searchResponse.facetResults) &&
        Objects.equals(this.hasMoreResults, searchResponse.hasMoreResults) &&
        Objects.equals(this.queryInterpretation, searchResponse.queryInterpretation) &&
        Objects.equals(this.resultCountEstimate, searchResponse.resultCountEstimate) &&
        Objects.equals(this.resultCountExact, searchResponse.resultCountExact) &&
        Objects.equals(this.resultCounts, searchResponse.resultCounts) &&
        Objects.equals(this.results, searchResponse.results) &&
        Objects.equals(this.spellResults, searchResponse.spellResults) &&
        Objects.equals(this.structuredResults, searchResponse.structuredResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debugInfo, errorInfo, facetResults, hasMoreResults, queryInterpretation, resultCountEstimate, resultCountExact, resultCounts, results, spellResults, structuredResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResponse {\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("    facetResults: ").append(toIndentedString(facetResults)).append("\n");
    sb.append("    hasMoreResults: ").append(toIndentedString(hasMoreResults)).append("\n");
    sb.append("    queryInterpretation: ").append(toIndentedString(queryInterpretation)).append("\n");
    sb.append("    resultCountEstimate: ").append(toIndentedString(resultCountEstimate)).append("\n");
    sb.append("    resultCountExact: ").append(toIndentedString(resultCountExact)).append("\n");
    sb.append("    resultCounts: ").append(toIndentedString(resultCounts)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    spellResults: ").append(toIndentedString(spellResults)).append("\n");
    sb.append("    structuredResults: ").append(toIndentedString(structuredResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("debugInfo");
    openapiFields.add("errorInfo");
    openapiFields.add("facetResults");
    openapiFields.add("hasMoreResults");
    openapiFields.add("queryInterpretation");
    openapiFields.add("resultCountEstimate");
    openapiFields.add("resultCountExact");
    openapiFields.add("resultCounts");
    openapiFields.add("results");
    openapiFields.add("spellResults");
    openapiFields.add("structuredResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResponse is not found in the empty JSON string", SearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `debugInfo`
      if (jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) {
        ResponseDebugInfo.validateJsonElement(jsonObj.get("debugInfo"));
      }
      // validate the optional field `errorInfo`
      if (jsonObj.get("errorInfo") != null && !jsonObj.get("errorInfo").isJsonNull()) {
        ErrorInfo.validateJsonElement(jsonObj.get("errorInfo"));
      }
      if (jsonObj.get("facetResults") != null && !jsonObj.get("facetResults").isJsonNull()) {
        JsonArray jsonArrayfacetResults = jsonObj.getAsJsonArray("facetResults");
        if (jsonArrayfacetResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facetResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facetResults` to be an array in the JSON string but got `%s`", jsonObj.get("facetResults").toString()));
          }

          // validate the optional field `facetResults` (array)
          for (int i = 0; i < jsonArrayfacetResults.size(); i++) {
            FacetResult.validateJsonElement(jsonArrayfacetResults.get(i));
          };
        }
      }
      // validate the optional field `queryInterpretation`
      if (jsonObj.get("queryInterpretation") != null && !jsonObj.get("queryInterpretation").isJsonNull()) {
        QueryInterpretation.validateJsonElement(jsonObj.get("queryInterpretation"));
      }
      if ((jsonObj.get("resultCountEstimate") != null && !jsonObj.get("resultCountEstimate").isJsonNull()) && !jsonObj.get("resultCountEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCountEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCountEstimate").toString()));
      }
      if ((jsonObj.get("resultCountExact") != null && !jsonObj.get("resultCountExact").isJsonNull()) && !jsonObj.get("resultCountExact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCountExact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCountExact").toString()));
      }
      // validate the optional field `resultCounts`
      if (jsonObj.get("resultCounts") != null && !jsonObj.get("resultCounts").isJsonNull()) {
        ResultCounts.validateJsonElement(jsonObj.get("resultCounts"));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            SearchResult.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
      if (jsonObj.get("spellResults") != null && !jsonObj.get("spellResults").isJsonNull()) {
        JsonArray jsonArrayspellResults = jsonObj.getAsJsonArray("spellResults");
        if (jsonArrayspellResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spellResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spellResults` to be an array in the JSON string but got `%s`", jsonObj.get("spellResults").toString()));
          }

          // validate the optional field `spellResults` (array)
          for (int i = 0; i < jsonArrayspellResults.size(); i++) {
            SpellResult.validateJsonElement(jsonArrayspellResults.get(i));
          };
        }
      }
      if (jsonObj.get("structuredResults") != null && !jsonObj.get("structuredResults").isJsonNull()) {
        JsonArray jsonArraystructuredResults = jsonObj.getAsJsonArray("structuredResults");
        if (jsonArraystructuredResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("structuredResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `structuredResults` to be an array in the JSON string but got `%s`", jsonObj.get("structuredResults").toString()));
          }

          // validate the optional field `structuredResults` (array)
          for (int i = 0; i < jsonArraystructuredResults.size(); i++) {
            StructuredResult.validateJsonElement(jsonArraystructuredResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResponse>() {
           @Override
           public void write(JsonWriter out, SearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResponse
   * @throws IOException if the JSON string is invalid with respect to SearchResponse
   */
  public static SearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResponse.class);
  }

  /**
   * Convert an instance of SearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

