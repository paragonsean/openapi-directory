/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MapTile;
import org.openapitools.client.model.SafeUrlProto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Geo information used for rendering a map that shows the user&#39;s work location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MapInfo {
  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Double lat;

  public static final String SERIALIZED_NAME_LOCATION_URL = "locationUrl";
  @SerializedName(SERIALIZED_NAME_LOCATION_URL)
  private SafeUrlProto locationUrl;

  public static final String SERIALIZED_NAME_LONG = "long";
  @SerializedName(SERIALIZED_NAME_LONG)
  private Double _long;

  public static final String SERIALIZED_NAME_MAP_TILE = "mapTile";
  @SerializedName(SERIALIZED_NAME_MAP_TILE)
  private List<MapTile> mapTile = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZOOM = "zoom";
  @SerializedName(SERIALIZED_NAME_ZOOM)
  private Integer zoom;

  public MapInfo() {
  }

  public MapInfo lat(Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude in degrees
   * @return lat
   */
  @javax.annotation.Nullable
  public Double getLat() {
    return lat;
  }

  public void setLat(Double lat) {
    this.lat = lat;
  }


  public MapInfo locationUrl(SafeUrlProto locationUrl) {
    this.locationUrl = locationUrl;
    return this;
  }

  /**
   * Get locationUrl
   * @return locationUrl
   */
  @javax.annotation.Nullable
  public SafeUrlProto getLocationUrl() {
    return locationUrl;
  }

  public void setLocationUrl(SafeUrlProto locationUrl) {
    this.locationUrl = locationUrl;
  }


  public MapInfo _long(Double _long) {
    this._long = _long;
    return this;
  }

  /**
   * Longitude in degrees
   * @return _long
   */
  @javax.annotation.Nullable
  public Double getLong() {
    return _long;
  }

  public void setLong(Double _long) {
    this._long = _long;
  }


  public MapInfo mapTile(List<MapTile> mapTile) {
    this.mapTile = mapTile;
    return this;
  }

  public MapInfo addMapTileItem(MapTile mapTileItem) {
    if (this.mapTile == null) {
      this.mapTile = new ArrayList<>();
    }
    this.mapTile.add(mapTileItem);
    return this;
  }

  /**
   * MapTiles for the area around a user&#39;s work location
   * @return mapTile
   */
  @javax.annotation.Nullable
  public List<MapTile> getMapTile() {
    return mapTile;
  }

  public void setMapTile(List<MapTile> mapTile) {
    this.mapTile = mapTile;
  }


  public MapInfo zoom(Integer zoom) {
    this.zoom = zoom;
    return this;
  }

  /**
   * The zoom level of the map. A constant zoom value of 18 is used for now to match the zoom of the map shown on a Moma Teams Profile page
   * @return zoom
   */
  @javax.annotation.Nullable
  public Integer getZoom() {
    return zoom;
  }

  public void setZoom(Integer zoom) {
    this.zoom = zoom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapInfo mapInfo = (MapInfo) o;
    return Objects.equals(this.lat, mapInfo.lat) &&
        Objects.equals(this.locationUrl, mapInfo.locationUrl) &&
        Objects.equals(this._long, mapInfo._long) &&
        Objects.equals(this.mapTile, mapInfo.mapTile) &&
        Objects.equals(this.zoom, mapInfo.zoom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lat, locationUrl, _long, mapTile, zoom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapInfo {\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    locationUrl: ").append(toIndentedString(locationUrl)).append("\n");
    sb.append("    _long: ").append(toIndentedString(_long)).append("\n");
    sb.append("    mapTile: ").append(toIndentedString(mapTile)).append("\n");
    sb.append("    zoom: ").append(toIndentedString(zoom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lat");
    openapiFields.add("locationUrl");
    openapiFields.add("long");
    openapiFields.add("mapTile");
    openapiFields.add("zoom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MapInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MapInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MapInfo is not found in the empty JSON string", MapInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MapInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MapInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `locationUrl`
      if (jsonObj.get("locationUrl") != null && !jsonObj.get("locationUrl").isJsonNull()) {
        SafeUrlProto.validateJsonElement(jsonObj.get("locationUrl"));
      }
      if (jsonObj.get("mapTile") != null && !jsonObj.get("mapTile").isJsonNull()) {
        JsonArray jsonArraymapTile = jsonObj.getAsJsonArray("mapTile");
        if (jsonArraymapTile != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mapTile").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mapTile` to be an array in the JSON string but got `%s`", jsonObj.get("mapTile").toString()));
          }

          // validate the optional field `mapTile` (array)
          for (int i = 0; i < jsonArraymapTile.size(); i++) {
            MapTile.validateJsonElement(jsonArraymapTile.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MapInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MapInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MapInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MapInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MapInfo>() {
           @Override
           public void write(JsonWriter out, MapInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MapInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MapInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MapInfo
   * @throws IOException if the JSON string is invalid with respect to MapInfo
   */
  public static MapInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MapInfo.class);
  }

  /**
   * Convert an instance of MapInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

