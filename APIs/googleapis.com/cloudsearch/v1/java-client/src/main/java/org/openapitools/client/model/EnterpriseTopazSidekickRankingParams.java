/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ranking params.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickRankingParams {
  public static final String SERIALIZED_NAME_END_TIME_MS = "endTimeMs";
  @SerializedName(SERIALIZED_NAME_END_TIME_MS)
  private String endTimeMs;

  /**
   * The priority to determine between objects that have the same start_time_ms The lower-value of priority &#x3D;&#x3D; ranked higher. Max-priority &#x3D; 0. Expected to be set for all types.
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    UNKNOWN("UNKNOWN"),
    
    CRITICAL("CRITICAL"),
    
    IMPORTANT("IMPORTANT"),
    
    HIGH("HIGH"),
    
    NORMAL("NORMAL"),
    
    BEST_EFFORT("BEST_EFFORT");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SPAN_MS = "spanMs";
  @SerializedName(SERIALIZED_NAME_SPAN_MS)
  private String spanMs;

  public static final String SERIALIZED_NAME_START_TIME_MS = "startTimeMs";
  @SerializedName(SERIALIZED_NAME_START_TIME_MS)
  private String startTimeMs;

  /**
   * The packing type of this object.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FIXED("FIXED"),
    
    FLEXIBLE("FLEXIBLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EnterpriseTopazSidekickRankingParams() {
  }

  public EnterpriseTopazSidekickRankingParams endTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
    return this;
  }

  /**
   * The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.
   * @return endTimeMs
   */
  @javax.annotation.Nullable
  public String getEndTimeMs() {
    return endTimeMs;
  }

  public void setEndTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
  }


  public EnterpriseTopazSidekickRankingParams priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority to determine between objects that have the same start_time_ms The lower-value of priority &#x3D;&#x3D; ranked higher. Max-priority &#x3D; 0. Expected to be set for all types.
   * @return priority
   */
  @javax.annotation.Nullable
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  public EnterpriseTopazSidekickRankingParams score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * The score of the card to be used to break priority-ties
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public EnterpriseTopazSidekickRankingParams spanMs(String spanMs) {
    this.spanMs = spanMs;
    return this;
  }

  /**
   * The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE.
   * @return spanMs
   */
  @javax.annotation.Nullable
  public String getSpanMs() {
    return spanMs;
  }

  public void setSpanMs(String spanMs) {
    this.spanMs = spanMs;
  }


  public EnterpriseTopazSidekickRankingParams startTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
    return this;
  }

  /**
   * The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types.
   * @return startTimeMs
   */
  @javax.annotation.Nullable
  public String getStartTimeMs() {
    return startTimeMs;
  }

  public void setStartTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
  }


  public EnterpriseTopazSidekickRankingParams type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The packing type of this object.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickRankingParams enterpriseTopazSidekickRankingParams = (EnterpriseTopazSidekickRankingParams) o;
    return Objects.equals(this.endTimeMs, enterpriseTopazSidekickRankingParams.endTimeMs) &&
        Objects.equals(this.priority, enterpriseTopazSidekickRankingParams.priority) &&
        Objects.equals(this.score, enterpriseTopazSidekickRankingParams.score) &&
        Objects.equals(this.spanMs, enterpriseTopazSidekickRankingParams.spanMs) &&
        Objects.equals(this.startTimeMs, enterpriseTopazSidekickRankingParams.startTimeMs) &&
        Objects.equals(this.type, enterpriseTopazSidekickRankingParams.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeMs, priority, score, spanMs, startTimeMs, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickRankingParams {\n");
    sb.append("    endTimeMs: ").append(toIndentedString(endTimeMs)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    spanMs: ").append(toIndentedString(spanMs)).append("\n");
    sb.append("    startTimeMs: ").append(toIndentedString(startTimeMs)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeMs");
    openapiFields.add("priority");
    openapiFields.add("score");
    openapiFields.add("spanMs");
    openapiFields.add("startTimeMs");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickRankingParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickRankingParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickRankingParams is not found in the empty JSON string", EnterpriseTopazSidekickRankingParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickRankingParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickRankingParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTimeMs") != null && !jsonObj.get("endTimeMs").isJsonNull()) && !jsonObj.get("endTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeMs").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        PriorityEnum.validateJsonElement(jsonObj.get("priority"));
      }
      if ((jsonObj.get("spanMs") != null && !jsonObj.get("spanMs").isJsonNull()) && !jsonObj.get("spanMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanMs").toString()));
      }
      if ((jsonObj.get("startTimeMs") != null && !jsonObj.get("startTimeMs").isJsonNull()) && !jsonObj.get("startTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeMs").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickRankingParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickRankingParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickRankingParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickRankingParams.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickRankingParams>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickRankingParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickRankingParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickRankingParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickRankingParams
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickRankingParams
   */
  public static EnterpriseTopazSidekickRankingParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickRankingParams.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickRankingParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

