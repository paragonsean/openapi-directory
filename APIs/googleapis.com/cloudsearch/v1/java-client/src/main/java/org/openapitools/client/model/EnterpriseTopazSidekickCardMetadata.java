/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseTopazSidekickNlpMetadata;
import org.openapitools.client.model.EnterpriseTopazSidekickRankingParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Card metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickCardMetadata {
  /**
   * Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.
   */
  @JsonAdapter(CardCategoryEnum.Adapter.class)
  public enum CardCategoryEnum {
    DEFAULT("DEFAULT"),
    
    ANSWER("ANSWER"),
    
    KNOWLEDGE("KNOWLEDGE"),
    
    HOMEPAGE("HOMEPAGE");

    private String value;

    CardCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardCategoryEnum fromValue(String value) {
      for (CardCategoryEnum b : CardCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARD_CATEGORY = "cardCategory";
  @SerializedName(SERIALIZED_NAME_CARD_CATEGORY)
  private CardCategoryEnum cardCategory;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  /**
   * Chronology.
   */
  @JsonAdapter(ChronologyEnum.Adapter.class)
  public enum ChronologyEnum {
    UNKNOWN("UNKNOWN"),
    
    PAST("PAST"),
    
    RECENTLY_PAST("RECENTLY_PAST"),
    
    PRESENT("PRESENT"),
    
    NEAR_FUTURE("NEAR_FUTURE"),
    
    FUTURE("FUTURE");

    private String value;

    ChronologyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChronologyEnum fromValue(String value) {
      for (ChronologyEnum b : ChronologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChronologyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChronologyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChronologyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChronologyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChronologyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHRONOLOGY = "chronology";
  @SerializedName(SERIALIZED_NAME_CHRONOLOGY)
  private ChronologyEnum chronology;

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private String debugInfo;

  public static final String SERIALIZED_NAME_NLP_METADATA = "nlpMetadata";
  @SerializedName(SERIALIZED_NAME_NLP_METADATA)
  private EnterpriseTopazSidekickNlpMetadata nlpMetadata;

  public static final String SERIALIZED_NAME_RANKING_PARAMS = "rankingParams";
  @SerializedName(SERIALIZED_NAME_RANKING_PARAMS)
  private EnterpriseTopazSidekickRankingParams rankingParams;

  /**
   * Render mode.
   */
  @JsonAdapter(RenderModeEnum.Adapter.class)
  public enum RenderModeEnum {
    UNKNOWN_RENDER("UNKNOWN_RENDER"),
    
    COLLAPSED("COLLAPSED"),
    
    EXPANDED("EXPANDED");

    private String value;

    RenderModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderModeEnum fromValue(String value) {
      for (RenderModeEnum b : RenderModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenderModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenderModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RenderModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENDER_MODE = "renderMode";
  @SerializedName(SERIALIZED_NAME_RENDER_MODE)
  private RenderModeEnum renderMode;

  public EnterpriseTopazSidekickCardMetadata() {
  }

  public EnterpriseTopazSidekickCardMetadata cardCategory(CardCategoryEnum cardCategory) {
    this.cardCategory = cardCategory;
    return this;
  }

  /**
   * Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.
   * @return cardCategory
   */
  @javax.annotation.Nullable
  public CardCategoryEnum getCardCategory() {
    return cardCategory;
  }

  public void setCardCategory(CardCategoryEnum cardCategory) {
    this.cardCategory = cardCategory;
  }


  public EnterpriseTopazSidekickCardMetadata cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public EnterpriseTopazSidekickCardMetadata chronology(ChronologyEnum chronology) {
    this.chronology = chronology;
    return this;
  }

  /**
   * Chronology.
   * @return chronology
   */
  @javax.annotation.Nullable
  public ChronologyEnum getChronology() {
    return chronology;
  }

  public void setChronology(ChronologyEnum chronology) {
    this.chronology = chronology;
  }


  public EnterpriseTopazSidekickCardMetadata debugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Debug info (only reported if request&#39;s debug_level &gt; 0).
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public String getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
  }


  public EnterpriseTopazSidekickCardMetadata nlpMetadata(EnterpriseTopazSidekickNlpMetadata nlpMetadata) {
    this.nlpMetadata = nlpMetadata;
    return this;
  }

  /**
   * Get nlpMetadata
   * @return nlpMetadata
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickNlpMetadata getNlpMetadata() {
    return nlpMetadata;
  }

  public void setNlpMetadata(EnterpriseTopazSidekickNlpMetadata nlpMetadata) {
    this.nlpMetadata = nlpMetadata;
  }


  public EnterpriseTopazSidekickCardMetadata rankingParams(EnterpriseTopazSidekickRankingParams rankingParams) {
    this.rankingParams = rankingParams;
    return this;
  }

  /**
   * Get rankingParams
   * @return rankingParams
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickRankingParams getRankingParams() {
    return rankingParams;
  }

  public void setRankingParams(EnterpriseTopazSidekickRankingParams rankingParams) {
    this.rankingParams = rankingParams;
  }


  public EnterpriseTopazSidekickCardMetadata renderMode(RenderModeEnum renderMode) {
    this.renderMode = renderMode;
    return this;
  }

  /**
   * Render mode.
   * @return renderMode
   */
  @javax.annotation.Nullable
  public RenderModeEnum getRenderMode() {
    return renderMode;
  }

  public void setRenderMode(RenderModeEnum renderMode) {
    this.renderMode = renderMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickCardMetadata enterpriseTopazSidekickCardMetadata = (EnterpriseTopazSidekickCardMetadata) o;
    return Objects.equals(this.cardCategory, enterpriseTopazSidekickCardMetadata.cardCategory) &&
        Objects.equals(this.cardId, enterpriseTopazSidekickCardMetadata.cardId) &&
        Objects.equals(this.chronology, enterpriseTopazSidekickCardMetadata.chronology) &&
        Objects.equals(this.debugInfo, enterpriseTopazSidekickCardMetadata.debugInfo) &&
        Objects.equals(this.nlpMetadata, enterpriseTopazSidekickCardMetadata.nlpMetadata) &&
        Objects.equals(this.rankingParams, enterpriseTopazSidekickCardMetadata.rankingParams) &&
        Objects.equals(this.renderMode, enterpriseTopazSidekickCardMetadata.renderMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardCategory, cardId, chronology, debugInfo, nlpMetadata, rankingParams, renderMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickCardMetadata {\n");
    sb.append("    cardCategory: ").append(toIndentedString(cardCategory)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    chronology: ").append(toIndentedString(chronology)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    nlpMetadata: ").append(toIndentedString(nlpMetadata)).append("\n");
    sb.append("    rankingParams: ").append(toIndentedString(rankingParams)).append("\n");
    sb.append("    renderMode: ").append(toIndentedString(renderMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardCategory");
    openapiFields.add("cardId");
    openapiFields.add("chronology");
    openapiFields.add("debugInfo");
    openapiFields.add("nlpMetadata");
    openapiFields.add("rankingParams");
    openapiFields.add("renderMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickCardMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickCardMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickCardMetadata is not found in the empty JSON string", EnterpriseTopazSidekickCardMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickCardMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickCardMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardCategory") != null && !jsonObj.get("cardCategory").isJsonNull()) && !jsonObj.get("cardCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCategory").toString()));
      }
      // validate the optional field `cardCategory`
      if (jsonObj.get("cardCategory") != null && !jsonObj.get("cardCategory").isJsonNull()) {
        CardCategoryEnum.validateJsonElement(jsonObj.get("cardCategory"));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("chronology") != null && !jsonObj.get("chronology").isJsonNull()) && !jsonObj.get("chronology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chronology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chronology").toString()));
      }
      // validate the optional field `chronology`
      if (jsonObj.get("chronology") != null && !jsonObj.get("chronology").isJsonNull()) {
        ChronologyEnum.validateJsonElement(jsonObj.get("chronology"));
      }
      if ((jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) && !jsonObj.get("debugInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugInfo").toString()));
      }
      // validate the optional field `nlpMetadata`
      if (jsonObj.get("nlpMetadata") != null && !jsonObj.get("nlpMetadata").isJsonNull()) {
        EnterpriseTopazSidekickNlpMetadata.validateJsonElement(jsonObj.get("nlpMetadata"));
      }
      // validate the optional field `rankingParams`
      if (jsonObj.get("rankingParams") != null && !jsonObj.get("rankingParams").isJsonNull()) {
        EnterpriseTopazSidekickRankingParams.validateJsonElement(jsonObj.get("rankingParams"));
      }
      if ((jsonObj.get("renderMode") != null && !jsonObj.get("renderMode").isJsonNull()) && !jsonObj.get("renderMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderMode").toString()));
      }
      // validate the optional field `renderMode`
      if (jsonObj.get("renderMode") != null && !jsonObj.get("renderMode").isJsonNull()) {
        RenderModeEnum.validateJsonElement(jsonObj.get("renderMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickCardMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickCardMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickCardMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickCardMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickCardMetadata>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickCardMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickCardMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickCardMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickCardMetadata
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickCardMetadata
   */
  public static EnterpriseTopazSidekickCardMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickCardMetadata.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickCardMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

