/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EnterpriseTopazFrontendTeamsLink;
import org.openapitools.client.model.EnterpriseTopazFrontendTeamsPersonCorePhoneNumber;
import org.openapitools.client.model.MapInfo;
import org.openapitools.client.model.SafeUrlProto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information for rendering a person. NEXT ID: 37
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonCore {
  public static final String SERIALIZED_NAME_ADDRESS_ME_AS = "addressMeAs";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ME_AS)
  private String addressMeAs;

  public static final String SERIALIZED_NAME_ADMIN_TO = "adminTo";
  @SerializedName(SERIALIZED_NAME_ADMIN_TO)
  private List<PersonCore> adminTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  private List<PersonCore> admins = new ArrayList<>();

  /**
   * Gets or Sets availabilityStatus
   */
  @JsonAdapter(AvailabilityStatusEnum.Adapter.class)
  public enum AvailabilityStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    OUT_OF_OFFICE("OUT_OF_OFFICE"),
    
    OUTSIDE_WORKING_HOURS("OUTSIDE_WORKING_HOURS"),
    
    AVAILABLE("AVAILABLE");

    private String value;

    AvailabilityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityStatusEnum fromValue(String value) {
      for (AvailabilityStatusEnum b : AvailabilityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_STATUS = "availabilityStatus";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_STATUS)
  private AvailabilityStatusEnum availabilityStatus;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private Date birthday;

  public static final String SERIALIZED_NAME_CALENDAR_URL = "calendarUrl";
  @SerializedName(SERIALIZED_NAME_CALENDAR_URL)
  private SafeUrlProto calendarUrl;

  public static final String SERIALIZED_NAME_CHAT_URL = "chatUrl";
  @SerializedName(SERIALIZED_NAME_CHAT_URL)
  private SafeUrlProto chatUrl;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DIRECT_REPORTS = "directReports";
  @SerializedName(SERIALIZED_NAME_DIRECT_REPORTS)
  private List<PersonCore> directReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOTTED_LINE_MANAGERS = "dottedLineManagers";
  @SerializedName(SERIALIZED_NAME_DOTTED_LINE_MANAGERS)
  private List<PersonCore> dottedLineManagers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOTTED_LINE_REPORTS = "dottedLineReports";
  @SerializedName(SERIALIZED_NAME_DOTTED_LINE_REPORTS)
  private List<PersonCore> dottedLineReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FTE_PERMILLE = "ftePermille";
  @SerializedName(SERIALIZED_NAME_FTE_PERMILLE)
  private String ftePermille;

  public static final String SERIALIZED_NAME_GEO_LOCATION = "geoLocation";
  @SerializedName(SERIALIZED_NAME_GEO_LOCATION)
  private MapInfo geoLocation;

  public static final String SERIALIZED_NAME_GMAIL_URL = "gmailUrl";
  @SerializedName(SERIALIZED_NAME_GMAIL_URL)
  private String gmailUrl;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_KEYWORD_TYPES = "keywordTypes";
  @SerializedName(SERIALIZED_NAME_KEYWORD_TYPES)
  private List<String> keywordTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private Map<String, String> keywords = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<EnterpriseTopazFrontendTeamsLink> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MANAGERS = "managers";
  @SerializedName(SERIALIZED_NAME_MANAGERS)
  private List<PersonCore> managers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSION = "mission";
  @SerializedName(SERIALIZED_NAME_MISSION)
  private String mission;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICE_LOCATION = "officeLocation";
  @SerializedName(SERIALIZED_NAME_OFFICE_LOCATION)
  private String officeLocation;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private SafeUrlProto photoUrl;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "postalAddress";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private String postalAddress;

  public static final String SERIALIZED_NAME_TOTAL_DIRECT_REPORTS_COUNT = "totalDirectReportsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DIRECT_REPORTS_COUNT)
  private Integer totalDirectReportsCount;

  public static final String SERIALIZED_NAME_TOTAL_DLR_COUNT = "totalDlrCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DLR_COUNT)
  private Integer totalDlrCount;

  public static final String SERIALIZED_NAME_TOTAL_FTE_COUNT = "totalFteCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FTE_COUNT)
  private String totalFteCount;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WALDO_COME_BACK_TIME = "waldoComeBackTime";
  @SerializedName(SERIALIZED_NAME_WALDO_COME_BACK_TIME)
  private String waldoComeBackTime;

  public PersonCore() {
  }

  public PersonCore addressMeAs(String addressMeAs) {
    this.addressMeAs = addressMeAs;
    return this;
  }

  /**
   * Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.
   * @return addressMeAs
   */
  @javax.annotation.Nullable
  public String getAddressMeAs() {
    return addressMeAs;
  }

  public void setAddressMeAs(String addressMeAs) {
    this.addressMeAs = addressMeAs;
  }


  public PersonCore adminTo(List<PersonCore> adminTo) {
    this.adminTo = adminTo;
    return this;
  }

  public PersonCore addAdminToItem(PersonCore adminToItem) {
    if (this.adminTo == null) {
      this.adminTo = new ArrayList<>();
    }
    this.adminTo.add(adminToItem);
    return this;
  }

  /**
   * People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return adminTo
   */
  @javax.annotation.Nullable
  public List<PersonCore> getAdminTo() {
    return adminTo;
  }

  public void setAdminTo(List<PersonCore> adminTo) {
    this.adminTo = adminTo;
  }


  public PersonCore admins(List<PersonCore> admins) {
    this.admins = admins;
    return this;
  }

  public PersonCore addAdminsItem(PersonCore adminsItem) {
    if (this.admins == null) {
      this.admins = new ArrayList<>();
    }
    this.admins.add(adminsItem);
    return this;
  }

  /**
   * The profile owner&#39;s admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return admins
   */
  @javax.annotation.Nullable
  public List<PersonCore> getAdmins() {
    return admins;
  }

  public void setAdmins(List<PersonCore> admins) {
    this.admins = admins;
  }


  public PersonCore availabilityStatus(AvailabilityStatusEnum availabilityStatus) {
    this.availabilityStatus = availabilityStatus;
    return this;
  }

  /**
   * Get availabilityStatus
   * @return availabilityStatus
   */
  @javax.annotation.Nullable
  public AvailabilityStatusEnum getAvailabilityStatus() {
    return availabilityStatus;
  }

  public void setAvailabilityStatus(AvailabilityStatusEnum availabilityStatus) {
    this.availabilityStatus = availabilityStatus;
  }


  public PersonCore birthday(Date birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Get birthday
   * @return birthday
   */
  @javax.annotation.Nullable
  public Date getBirthday() {
    return birthday;
  }

  public void setBirthday(Date birthday) {
    this.birthday = birthday;
  }


  public PersonCore calendarUrl(SafeUrlProto calendarUrl) {
    this.calendarUrl = calendarUrl;
    return this;
  }

  /**
   * Get calendarUrl
   * @return calendarUrl
   */
  @javax.annotation.Nullable
  public SafeUrlProto getCalendarUrl() {
    return calendarUrl;
  }

  public void setCalendarUrl(SafeUrlProto calendarUrl) {
    this.calendarUrl = calendarUrl;
  }


  public PersonCore chatUrl(SafeUrlProto chatUrl) {
    this.chatUrl = chatUrl;
    return this;
  }

  /**
   * Get chatUrl
   * @return chatUrl
   */
  @javax.annotation.Nullable
  public SafeUrlProto getChatUrl() {
    return chatUrl;
  }

  public void setChatUrl(SafeUrlProto chatUrl) {
    this.chatUrl = chatUrl;
  }


  public PersonCore costCenter(String costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * Person&#39;s cost center as a string, e.g. \&quot;926: Googler Apps\&quot;.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(String costCenter) {
    this.costCenter = costCenter;
  }


  public PersonCore department(String department) {
    this.department = department;
    return this;
  }

  /**
   * The person&#39;s Organization department, e.g. \&quot;People Operations\&quot;. For google.com this is usually called \&quot;area\&quot;.
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public PersonCore directReports(List<PersonCore> directReports) {
    this.directReports = directReports;
    return this;
  }

  public PersonCore addDirectReportsItem(PersonCore directReportsItem) {
    if (this.directReports == null) {
      this.directReports = new ArrayList<>();
    }
    this.directReports.add(directReportsItem);
    return this;
  }

  /**
   * A subset of the profile owner&#39;s direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person&#39;s reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return directReports
   */
  @javax.annotation.Nullable
  public List<PersonCore> getDirectReports() {
    return directReports;
  }

  public void setDirectReports(List<PersonCore> directReports) {
    this.directReports = directReports;
  }


  public PersonCore dottedLineManagers(List<PersonCore> dottedLineManagers) {
    this.dottedLineManagers = dottedLineManagers;
    return this;
  }

  public PersonCore addDottedLineManagersItem(PersonCore dottedLineManagersItem) {
    if (this.dottedLineManagers == null) {
      this.dottedLineManagers = new ArrayList<>();
    }
    this.dottedLineManagers.add(dottedLineManagersItem);
    return this;
  }

  /**
   * The profile owner&#39;s direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return dottedLineManagers
   */
  @javax.annotation.Nullable
  public List<PersonCore> getDottedLineManagers() {
    return dottedLineManagers;
  }

  public void setDottedLineManagers(List<PersonCore> dottedLineManagers) {
    this.dottedLineManagers = dottedLineManagers;
  }


  public PersonCore dottedLineReports(List<PersonCore> dottedLineReports) {
    this.dottedLineReports = dottedLineReports;
    return this;
  }

  public PersonCore addDottedLineReportsItem(PersonCore dottedLineReportsItem) {
    if (this.dottedLineReports == null) {
      this.dottedLineReports = new ArrayList<>();
    }
    this.dottedLineReports.add(dottedLineReportsItem);
    return this;
  }

  /**
   * A subset of the profile owner&#39;s dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return dottedLineReports
   */
  @javax.annotation.Nullable
  public List<PersonCore> getDottedLineReports() {
    return dottedLineReports;
  }

  public void setDottedLineReports(List<PersonCore> dottedLineReports) {
    this.dottedLineReports = dottedLineReports;
  }


  public PersonCore emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public PersonCore addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * E-mail addresses of the person. The primary or preferred email should be first.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public PersonCore employeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  /**
   * Person&#39;s employee number (external ID of type \&quot;organization\&quot;) For google.com this is the badge number (e.g. 2 for Larry Page).
   * @return employeeId
   */
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }


  public PersonCore fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public PersonCore ftePermille(String ftePermille) {
    this.ftePermille = ftePermille;
    return this;
  }

  /**
   * Full-time equivalent (in ‰) (e.g. 800 for a person who&#39;s working 80%).
   * @return ftePermille
   */
  @javax.annotation.Nullable
  public String getFtePermille() {
    return ftePermille;
  }

  public void setFtePermille(String ftePermille) {
    this.ftePermille = ftePermille;
  }


  public PersonCore geoLocation(MapInfo geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * Get geoLocation
   * @return geoLocation
   */
  @javax.annotation.Nullable
  public MapInfo getGeoLocation() {
    return geoLocation;
  }

  public void setGeoLocation(MapInfo geoLocation) {
    this.geoLocation = geoLocation;
  }


  public PersonCore gmailUrl(String gmailUrl) {
    this.gmailUrl = gmailUrl;
    return this;
  }

  /**
   * Get gmailUrl
   * @return gmailUrl
   */
  @javax.annotation.Nullable
  public String getGmailUrl() {
    return gmailUrl;
  }

  public void setGmailUrl(String gmailUrl) {
    this.gmailUrl = gmailUrl;
  }


  public PersonCore jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Profile owner&#39;s job title (e.g. \&quot;Software Engineer\&quot;). For google.com this is the Workday preferred job title.
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public PersonCore keywordTypes(List<String> keywordTypes) {
    this.keywordTypes = keywordTypes;
    return this;
  }

  public PersonCore addKeywordTypesItem(String keywordTypesItem) {
    if (this.keywordTypes == null) {
      this.keywordTypes = new ArrayList<>();
    }
    this.keywordTypes.add(keywordTypesItem);
    return this;
  }

  /**
   * List of keys to use from the map &#39;keywords&#39;.
   * @return keywordTypes
   */
  @javax.annotation.Nullable
  public List<String> getKeywordTypes() {
    return keywordTypes;
  }

  public void setKeywordTypes(List<String> keywordTypes) {
    this.keywordTypes = keywordTypes;
  }


  public PersonCore keywords(Map<String, String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public PersonCore putKeywordsItem(String key, String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new HashMap<>();
    }
    this.keywords.put(key, keywordsItem);
    return this;
  }

  /**
   * Custom keywords the domain admin has added.
   * @return keywords
   */
  @javax.annotation.Nullable
  public Map<String, String> getKeywords() {
    return keywords;
  }

  public void setKeywords(Map<String, String> keywords) {
    this.keywords = keywords;
  }


  public PersonCore links(List<EnterpriseTopazFrontendTeamsLink> links) {
    this.links = links;
    return this;
  }

  public PersonCore addLinksItem(EnterpriseTopazFrontendTeamsLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Custom links the profile owner has added.
   * @return links
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazFrontendTeamsLink> getLinks() {
    return links;
  }

  public void setLinks(List<EnterpriseTopazFrontendTeamsLink> links) {
    this.links = links;
  }


  public PersonCore location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Detailed desk location within the company. For google.com this is the desk location code (e.g. \&quot;DE-MUC-ARP-6T2-6T2C0C\&quot;) if the person has a desk.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public PersonCore managers(List<PersonCore> managers) {
    this.managers = managers;
    return this;
  }

  public PersonCore addManagersItem(PersonCore managersItem) {
    if (this.managers == null) {
      this.managers = new ArrayList<>();
    }
    this.managers.add(managersItem);
    return this;
  }

  /**
   * The profile owner&#39;s management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person&#39;s manager&#39;s manager and managers[N-1] is the person&#39;s direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
   * @return managers
   */
  @javax.annotation.Nullable
  public List<PersonCore> getManagers() {
    return managers;
  }

  public void setManagers(List<PersonCore> managers) {
    this.managers = managers;
  }


  public PersonCore mission(String mission) {
    this.mission = mission;
    return this;
  }

  /**
   * Custom mission statement the profile owner has added.
   * @return mission
   */
  @javax.annotation.Nullable
  public String getMission() {
    return mission;
  }

  public void setMission(String mission) {
    this.mission = mission;
  }


  public PersonCore name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Human-readable Unicode display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PersonCore officeLocation(String officeLocation) {
    this.officeLocation = officeLocation;
    return this;
  }

  /**
   * Office/building identifier within the company. For google.com this is the office code (e.g. \&quot;DE-MUC-ARP\&quot;).
   * @return officeLocation
   */
  @javax.annotation.Nullable
  public String getOfficeLocation() {
    return officeLocation;
  }

  public void setOfficeLocation(String officeLocation) {
    this.officeLocation = officeLocation;
  }


  public PersonCore personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * The person&#39;s obfuscated Gaia ID.
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public PersonCore phoneNumbers(List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public PersonCore addPhoneNumbersItem(EnterpriseTopazFrontendTeamsPersonCorePhoneNumber phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * Get phoneNumbers
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<EnterpriseTopazFrontendTeamsPersonCorePhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public PersonCore photoUrl(SafeUrlProto photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public SafeUrlProto getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(SafeUrlProto photoUrl) {
    this.photoUrl = photoUrl;
  }


  public PersonCore postalAddress(String postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  /**
   * Postal address of office/building.
   * @return postalAddress
   */
  @javax.annotation.Nullable
  public String getPostalAddress() {
    return postalAddress;
  }

  public void setPostalAddress(String postalAddress) {
    this.postalAddress = postalAddress;
  }


  public PersonCore totalDirectReportsCount(Integer totalDirectReportsCount) {
    this.totalDirectReportsCount = totalDirectReportsCount;
    return this;
  }

  /**
   * Total count of the profile owner&#39;s direct reports.
   * @return totalDirectReportsCount
   */
  @javax.annotation.Nullable
  public Integer getTotalDirectReportsCount() {
    return totalDirectReportsCount;
  }

  public void setTotalDirectReportsCount(Integer totalDirectReportsCount) {
    this.totalDirectReportsCount = totalDirectReportsCount;
  }


  public PersonCore totalDlrCount(Integer totalDlrCount) {
    this.totalDlrCount = totalDlrCount;
    return this;
  }

  /**
   * Total count of the profile owner&#39;s dotted-line reports.
   * @return totalDlrCount
   */
  @javax.annotation.Nullable
  public Integer getTotalDlrCount() {
    return totalDlrCount;
  }

  public void setTotalDlrCount(Integer totalDlrCount) {
    this.totalDlrCount = totalDlrCount;
  }


  public PersonCore totalFteCount(String totalFteCount) {
    this.totalFteCount = totalFteCount;
    return this;
  }

  /**
   * The sum of all profile owner&#39;s reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).
   * @return totalFteCount
   */
  @javax.annotation.Nullable
  public String getTotalFteCount() {
    return totalFteCount;
  }

  public void setTotalFteCount(String totalFteCount) {
    this.totalFteCount = totalFteCount;
  }


  public PersonCore username(String username) {
    this.username = username;
    return this;
  }

  /**
   * External ID of type \&quot;login_id\&quot; for the profile. For google.com this is the username/LDAP.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public PersonCore waldoComeBackTime(String waldoComeBackTime) {
    this.waldoComeBackTime = waldoComeBackTime;
    return this;
  }

  /**
   * Get waldoComeBackTime
   * @return waldoComeBackTime
   */
  @javax.annotation.Nullable
  public String getWaldoComeBackTime() {
    return waldoComeBackTime;
  }

  public void setWaldoComeBackTime(String waldoComeBackTime) {
    this.waldoComeBackTime = waldoComeBackTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonCore personCore = (PersonCore) o;
    return Objects.equals(this.addressMeAs, personCore.addressMeAs) &&
        Objects.equals(this.adminTo, personCore.adminTo) &&
        Objects.equals(this.admins, personCore.admins) &&
        Objects.equals(this.availabilityStatus, personCore.availabilityStatus) &&
        Objects.equals(this.birthday, personCore.birthday) &&
        Objects.equals(this.calendarUrl, personCore.calendarUrl) &&
        Objects.equals(this.chatUrl, personCore.chatUrl) &&
        Objects.equals(this.costCenter, personCore.costCenter) &&
        Objects.equals(this.department, personCore.department) &&
        Objects.equals(this.directReports, personCore.directReports) &&
        Objects.equals(this.dottedLineManagers, personCore.dottedLineManagers) &&
        Objects.equals(this.dottedLineReports, personCore.dottedLineReports) &&
        Objects.equals(this.emails, personCore.emails) &&
        Objects.equals(this.employeeId, personCore.employeeId) &&
        Objects.equals(this.fingerprint, personCore.fingerprint) &&
        Objects.equals(this.ftePermille, personCore.ftePermille) &&
        Objects.equals(this.geoLocation, personCore.geoLocation) &&
        Objects.equals(this.gmailUrl, personCore.gmailUrl) &&
        Objects.equals(this.jobTitle, personCore.jobTitle) &&
        Objects.equals(this.keywordTypes, personCore.keywordTypes) &&
        Objects.equals(this.keywords, personCore.keywords) &&
        Objects.equals(this.links, personCore.links) &&
        Objects.equals(this.location, personCore.location) &&
        Objects.equals(this.managers, personCore.managers) &&
        Objects.equals(this.mission, personCore.mission) &&
        Objects.equals(this.name, personCore.name) &&
        Objects.equals(this.officeLocation, personCore.officeLocation) &&
        Objects.equals(this.personId, personCore.personId) &&
        Objects.equals(this.phoneNumbers, personCore.phoneNumbers) &&
        Objects.equals(this.photoUrl, personCore.photoUrl) &&
        Objects.equals(this.postalAddress, personCore.postalAddress) &&
        Objects.equals(this.totalDirectReportsCount, personCore.totalDirectReportsCount) &&
        Objects.equals(this.totalDlrCount, personCore.totalDlrCount) &&
        Objects.equals(this.totalFteCount, personCore.totalFteCount) &&
        Objects.equals(this.username, personCore.username) &&
        Objects.equals(this.waldoComeBackTime, personCore.waldoComeBackTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressMeAs, adminTo, admins, availabilityStatus, birthday, calendarUrl, chatUrl, costCenter, department, directReports, dottedLineManagers, dottedLineReports, emails, employeeId, fingerprint, ftePermille, geoLocation, gmailUrl, jobTitle, keywordTypes, keywords, links, location, managers, mission, name, officeLocation, personId, phoneNumbers, photoUrl, postalAddress, totalDirectReportsCount, totalDlrCount, totalFteCount, username, waldoComeBackTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonCore {\n");
    sb.append("    addressMeAs: ").append(toIndentedString(addressMeAs)).append("\n");
    sb.append("    adminTo: ").append(toIndentedString(adminTo)).append("\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    availabilityStatus: ").append(toIndentedString(availabilityStatus)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    calendarUrl: ").append(toIndentedString(calendarUrl)).append("\n");
    sb.append("    chatUrl: ").append(toIndentedString(chatUrl)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    directReports: ").append(toIndentedString(directReports)).append("\n");
    sb.append("    dottedLineManagers: ").append(toIndentedString(dottedLineManagers)).append("\n");
    sb.append("    dottedLineReports: ").append(toIndentedString(dottedLineReports)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    ftePermille: ").append(toIndentedString(ftePermille)).append("\n");
    sb.append("    geoLocation: ").append(toIndentedString(geoLocation)).append("\n");
    sb.append("    gmailUrl: ").append(toIndentedString(gmailUrl)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    keywordTypes: ").append(toIndentedString(keywordTypes)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    managers: ").append(toIndentedString(managers)).append("\n");
    sb.append("    mission: ").append(toIndentedString(mission)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    officeLocation: ").append(toIndentedString(officeLocation)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    totalDirectReportsCount: ").append(toIndentedString(totalDirectReportsCount)).append("\n");
    sb.append("    totalDlrCount: ").append(toIndentedString(totalDlrCount)).append("\n");
    sb.append("    totalFteCount: ").append(toIndentedString(totalFteCount)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    waldoComeBackTime: ").append(toIndentedString(waldoComeBackTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressMeAs");
    openapiFields.add("adminTo");
    openapiFields.add("admins");
    openapiFields.add("availabilityStatus");
    openapiFields.add("birthday");
    openapiFields.add("calendarUrl");
    openapiFields.add("chatUrl");
    openapiFields.add("costCenter");
    openapiFields.add("department");
    openapiFields.add("directReports");
    openapiFields.add("dottedLineManagers");
    openapiFields.add("dottedLineReports");
    openapiFields.add("emails");
    openapiFields.add("employeeId");
    openapiFields.add("fingerprint");
    openapiFields.add("ftePermille");
    openapiFields.add("geoLocation");
    openapiFields.add("gmailUrl");
    openapiFields.add("jobTitle");
    openapiFields.add("keywordTypes");
    openapiFields.add("keywords");
    openapiFields.add("links");
    openapiFields.add("location");
    openapiFields.add("managers");
    openapiFields.add("mission");
    openapiFields.add("name");
    openapiFields.add("officeLocation");
    openapiFields.add("personId");
    openapiFields.add("phoneNumbers");
    openapiFields.add("photoUrl");
    openapiFields.add("postalAddress");
    openapiFields.add("totalDirectReportsCount");
    openapiFields.add("totalDlrCount");
    openapiFields.add("totalFteCount");
    openapiFields.add("username");
    openapiFields.add("waldoComeBackTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonCore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonCore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonCore is not found in the empty JSON string", PersonCore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonCore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonCore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressMeAs") != null && !jsonObj.get("addressMeAs").isJsonNull()) && !jsonObj.get("addressMeAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressMeAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressMeAs").toString()));
      }
      if (jsonObj.get("adminTo") != null && !jsonObj.get("adminTo").isJsonNull()) {
        JsonArray jsonArrayadminTo = jsonObj.getAsJsonArray("adminTo");
        if (jsonArrayadminTo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adminTo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adminTo` to be an array in the JSON string but got `%s`", jsonObj.get("adminTo").toString()));
          }

          // validate the optional field `adminTo` (array)
          for (int i = 0; i < jsonArrayadminTo.size(); i++) {
            PersonCore.validateJsonElement(jsonArrayadminTo.get(i));
          };
        }
      }
      if (jsonObj.get("admins") != null && !jsonObj.get("admins").isJsonNull()) {
        JsonArray jsonArrayadmins = jsonObj.getAsJsonArray("admins");
        if (jsonArrayadmins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("admins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `admins` to be an array in the JSON string but got `%s`", jsonObj.get("admins").toString()));
          }

          // validate the optional field `admins` (array)
          for (int i = 0; i < jsonArrayadmins.size(); i++) {
            PersonCore.validateJsonElement(jsonArrayadmins.get(i));
          };
        }
      }
      if ((jsonObj.get("availabilityStatus") != null && !jsonObj.get("availabilityStatus").isJsonNull()) && !jsonObj.get("availabilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityStatus").toString()));
      }
      // validate the optional field `availabilityStatus`
      if (jsonObj.get("availabilityStatus") != null && !jsonObj.get("availabilityStatus").isJsonNull()) {
        AvailabilityStatusEnum.validateJsonElement(jsonObj.get("availabilityStatus"));
      }
      // validate the optional field `birthday`
      if (jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("birthday"));
      }
      // validate the optional field `calendarUrl`
      if (jsonObj.get("calendarUrl") != null && !jsonObj.get("calendarUrl").isJsonNull()) {
        SafeUrlProto.validateJsonElement(jsonObj.get("calendarUrl"));
      }
      // validate the optional field `chatUrl`
      if (jsonObj.get("chatUrl") != null && !jsonObj.get("chatUrl").isJsonNull()) {
        SafeUrlProto.validateJsonElement(jsonObj.get("chatUrl"));
      }
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (jsonObj.get("directReports") != null && !jsonObj.get("directReports").isJsonNull()) {
        JsonArray jsonArraydirectReports = jsonObj.getAsJsonArray("directReports");
        if (jsonArraydirectReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directReports` to be an array in the JSON string but got `%s`", jsonObj.get("directReports").toString()));
          }

          // validate the optional field `directReports` (array)
          for (int i = 0; i < jsonArraydirectReports.size(); i++) {
            PersonCore.validateJsonElement(jsonArraydirectReports.get(i));
          };
        }
      }
      if (jsonObj.get("dottedLineManagers") != null && !jsonObj.get("dottedLineManagers").isJsonNull()) {
        JsonArray jsonArraydottedLineManagers = jsonObj.getAsJsonArray("dottedLineManagers");
        if (jsonArraydottedLineManagers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dottedLineManagers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dottedLineManagers` to be an array in the JSON string but got `%s`", jsonObj.get("dottedLineManagers").toString()));
          }

          // validate the optional field `dottedLineManagers` (array)
          for (int i = 0; i < jsonArraydottedLineManagers.size(); i++) {
            PersonCore.validateJsonElement(jsonArraydottedLineManagers.get(i));
          };
        }
      }
      if (jsonObj.get("dottedLineReports") != null && !jsonObj.get("dottedLineReports").isJsonNull()) {
        JsonArray jsonArraydottedLineReports = jsonObj.getAsJsonArray("dottedLineReports");
        if (jsonArraydottedLineReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dottedLineReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dottedLineReports` to be an array in the JSON string but got `%s`", jsonObj.get("dottedLineReports").toString()));
          }

          // validate the optional field `dottedLineReports` (array)
          for (int i = 0; i < jsonArraydottedLineReports.size(); i++) {
            PersonCore.validateJsonElement(jsonArraydottedLineReports.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("ftePermille") != null && !jsonObj.get("ftePermille").isJsonNull()) && !jsonObj.get("ftePermille").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftePermille` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftePermille").toString()));
      }
      // validate the optional field `geoLocation`
      if (jsonObj.get("geoLocation") != null && !jsonObj.get("geoLocation").isJsonNull()) {
        MapInfo.validateJsonElement(jsonObj.get("geoLocation"));
      }
      if ((jsonObj.get("gmailUrl") != null && !jsonObj.get("gmailUrl").isJsonNull()) && !jsonObj.get("gmailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmailUrl").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywordTypes") != null && !jsonObj.get("keywordTypes").isJsonNull() && !jsonObj.get("keywordTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordTypes` to be an array in the JSON string but got `%s`", jsonObj.get("keywordTypes").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            EnterpriseTopazFrontendTeamsLink.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (jsonObj.get("managers") != null && !jsonObj.get("managers").isJsonNull()) {
        JsonArray jsonArraymanagers = jsonObj.getAsJsonArray("managers");
        if (jsonArraymanagers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("managers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `managers` to be an array in the JSON string but got `%s`", jsonObj.get("managers").toString()));
          }

          // validate the optional field `managers` (array)
          for (int i = 0; i < jsonArraymanagers.size(); i++) {
            PersonCore.validateJsonElement(jsonArraymanagers.get(i));
          };
        }
      }
      if ((jsonObj.get("mission") != null && !jsonObj.get("mission").isJsonNull()) && !jsonObj.get("mission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mission").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("officeLocation") != null && !jsonObj.get("officeLocation").isJsonNull()) && !jsonObj.get("officeLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeLocation").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            EnterpriseTopazFrontendTeamsPersonCorePhoneNumber.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      // validate the optional field `photoUrl`
      if (jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) {
        SafeUrlProto.validateJsonElement(jsonObj.get("photoUrl"));
      }
      if ((jsonObj.get("postalAddress") != null && !jsonObj.get("postalAddress").isJsonNull()) && !jsonObj.get("postalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalAddress").toString()));
      }
      if ((jsonObj.get("totalFteCount") != null && !jsonObj.get("totalFteCount").isJsonNull()) && !jsonObj.get("totalFteCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalFteCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalFteCount").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("waldoComeBackTime") != null && !jsonObj.get("waldoComeBackTime").isJsonNull()) && !jsonObj.get("waldoComeBackTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waldoComeBackTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waldoComeBackTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonCore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonCore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonCore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonCore.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonCore>() {
           @Override
           public void write(JsonWriter out, PersonCore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonCore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonCore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonCore
   * @throws IOException if the JSON string is invalid with respect to PersonCore
   */
  public static PersonCore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonCore.class);
  }

  /**
   * Convert an instance of PersonCore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

