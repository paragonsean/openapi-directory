/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DriveFollowUpRestrict;
import org.openapitools.client.model.DriveLocationRestrict;
import org.openapitools.client.model.DriveMimeTypeRestrict;
import org.openapitools.client.model.DriveTimeSpanRestrict;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information relevant only to a restrict entry. NextId: 12
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestrictItem {
  public static final String SERIALIZED_NAME_DRIVE_FOLLOW_UP_RESTRICT = "driveFollowUpRestrict";
  @SerializedName(SERIALIZED_NAME_DRIVE_FOLLOW_UP_RESTRICT)
  private DriveFollowUpRestrict driveFollowUpRestrict;

  public static final String SERIALIZED_NAME_DRIVE_LOCATION_RESTRICT = "driveLocationRestrict";
  @SerializedName(SERIALIZED_NAME_DRIVE_LOCATION_RESTRICT)
  private DriveLocationRestrict driveLocationRestrict;

  public static final String SERIALIZED_NAME_DRIVE_MIME_TYPE_RESTRICT = "driveMimeTypeRestrict";
  @SerializedName(SERIALIZED_NAME_DRIVE_MIME_TYPE_RESTRICT)
  private DriveMimeTypeRestrict driveMimeTypeRestrict;

  public static final String SERIALIZED_NAME_DRIVE_TIME_SPAN_RESTRICT = "driveTimeSpanRestrict";
  @SerializedName(SERIALIZED_NAME_DRIVE_TIME_SPAN_RESTRICT)
  private DriveTimeSpanRestrict driveTimeSpanRestrict;

  public static final String SERIALIZED_NAME_SEARCH_OPERATOR = "searchOperator";
  @SerializedName(SERIALIZED_NAME_SEARCH_OPERATOR)
  private String searchOperator;

  public RestrictItem() {
  }

  public RestrictItem driveFollowUpRestrict(DriveFollowUpRestrict driveFollowUpRestrict) {
    this.driveFollowUpRestrict = driveFollowUpRestrict;
    return this;
  }

  /**
   * Get driveFollowUpRestrict
   * @return driveFollowUpRestrict
   */
  @javax.annotation.Nullable
  public DriveFollowUpRestrict getDriveFollowUpRestrict() {
    return driveFollowUpRestrict;
  }

  public void setDriveFollowUpRestrict(DriveFollowUpRestrict driveFollowUpRestrict) {
    this.driveFollowUpRestrict = driveFollowUpRestrict;
  }


  public RestrictItem driveLocationRestrict(DriveLocationRestrict driveLocationRestrict) {
    this.driveLocationRestrict = driveLocationRestrict;
    return this;
  }

  /**
   * Get driveLocationRestrict
   * @return driveLocationRestrict
   */
  @javax.annotation.Nullable
  public DriveLocationRestrict getDriveLocationRestrict() {
    return driveLocationRestrict;
  }

  public void setDriveLocationRestrict(DriveLocationRestrict driveLocationRestrict) {
    this.driveLocationRestrict = driveLocationRestrict;
  }


  public RestrictItem driveMimeTypeRestrict(DriveMimeTypeRestrict driveMimeTypeRestrict) {
    this.driveMimeTypeRestrict = driveMimeTypeRestrict;
    return this;
  }

  /**
   * Get driveMimeTypeRestrict
   * @return driveMimeTypeRestrict
   */
  @javax.annotation.Nullable
  public DriveMimeTypeRestrict getDriveMimeTypeRestrict() {
    return driveMimeTypeRestrict;
  }

  public void setDriveMimeTypeRestrict(DriveMimeTypeRestrict driveMimeTypeRestrict) {
    this.driveMimeTypeRestrict = driveMimeTypeRestrict;
  }


  public RestrictItem driveTimeSpanRestrict(DriveTimeSpanRestrict driveTimeSpanRestrict) {
    this.driveTimeSpanRestrict = driveTimeSpanRestrict;
    return this;
  }

  /**
   * Get driveTimeSpanRestrict
   * @return driveTimeSpanRestrict
   */
  @javax.annotation.Nullable
  public DriveTimeSpanRestrict getDriveTimeSpanRestrict() {
    return driveTimeSpanRestrict;
  }

  public void setDriveTimeSpanRestrict(DriveTimeSpanRestrict driveTimeSpanRestrict) {
    this.driveTimeSpanRestrict = driveTimeSpanRestrict;
  }


  public RestrictItem searchOperator(String searchOperator) {
    this.searchOperator = searchOperator;
    return this;
  }

  /**
   * The search restrict (e.g. \&quot;after:2017-09-11 before:2017-09-12\&quot;).
   * @return searchOperator
   */
  @javax.annotation.Nullable
  public String getSearchOperator() {
    return searchOperator;
  }

  public void setSearchOperator(String searchOperator) {
    this.searchOperator = searchOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestrictItem restrictItem = (RestrictItem) o;
    return Objects.equals(this.driveFollowUpRestrict, restrictItem.driveFollowUpRestrict) &&
        Objects.equals(this.driveLocationRestrict, restrictItem.driveLocationRestrict) &&
        Objects.equals(this.driveMimeTypeRestrict, restrictItem.driveMimeTypeRestrict) &&
        Objects.equals(this.driveTimeSpanRestrict, restrictItem.driveTimeSpanRestrict) &&
        Objects.equals(this.searchOperator, restrictItem.searchOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driveFollowUpRestrict, driveLocationRestrict, driveMimeTypeRestrict, driveTimeSpanRestrict, searchOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestrictItem {\n");
    sb.append("    driveFollowUpRestrict: ").append(toIndentedString(driveFollowUpRestrict)).append("\n");
    sb.append("    driveLocationRestrict: ").append(toIndentedString(driveLocationRestrict)).append("\n");
    sb.append("    driveMimeTypeRestrict: ").append(toIndentedString(driveMimeTypeRestrict)).append("\n");
    sb.append("    driveTimeSpanRestrict: ").append(toIndentedString(driveTimeSpanRestrict)).append("\n");
    sb.append("    searchOperator: ").append(toIndentedString(searchOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("driveFollowUpRestrict");
    openapiFields.add("driveLocationRestrict");
    openapiFields.add("driveMimeTypeRestrict");
    openapiFields.add("driveTimeSpanRestrict");
    openapiFields.add("searchOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestrictItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestrictItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestrictItem is not found in the empty JSON string", RestrictItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestrictItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestrictItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `driveFollowUpRestrict`
      if (jsonObj.get("driveFollowUpRestrict") != null && !jsonObj.get("driveFollowUpRestrict").isJsonNull()) {
        DriveFollowUpRestrict.validateJsonElement(jsonObj.get("driveFollowUpRestrict"));
      }
      // validate the optional field `driveLocationRestrict`
      if (jsonObj.get("driveLocationRestrict") != null && !jsonObj.get("driveLocationRestrict").isJsonNull()) {
        DriveLocationRestrict.validateJsonElement(jsonObj.get("driveLocationRestrict"));
      }
      // validate the optional field `driveMimeTypeRestrict`
      if (jsonObj.get("driveMimeTypeRestrict") != null && !jsonObj.get("driveMimeTypeRestrict").isJsonNull()) {
        DriveMimeTypeRestrict.validateJsonElement(jsonObj.get("driveMimeTypeRestrict"));
      }
      // validate the optional field `driveTimeSpanRestrict`
      if (jsonObj.get("driveTimeSpanRestrict") != null && !jsonObj.get("driveTimeSpanRestrict").isJsonNull()) {
        DriveTimeSpanRestrict.validateJsonElement(jsonObj.get("driveTimeSpanRestrict"));
      }
      if ((jsonObj.get("searchOperator") != null && !jsonObj.get("searchOperator").isJsonNull()) && !jsonObj.get("searchOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchOperator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestrictItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestrictItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestrictItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestrictItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RestrictItem>() {
           @Override
           public void write(JsonWriter out, RestrictItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestrictItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestrictItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestrictItem
   * @throws IOException if the JSON string is invalid with respect to RestrictItem
   */
  public static RestrictItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestrictItem.class);
  }

  /**
   * Convert an instance of RestrictItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

