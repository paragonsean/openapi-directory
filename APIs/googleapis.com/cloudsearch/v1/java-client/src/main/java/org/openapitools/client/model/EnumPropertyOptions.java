/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnumOperatorOptions;
import org.openapitools.client.model.EnumValuePair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnumPropertyOptions {
  public static final String SERIALIZED_NAME_OPERATOR_OPTIONS = "operatorOptions";
  @SerializedName(SERIALIZED_NAME_OPERATOR_OPTIONS)
  private EnumOperatorOptions operatorOptions;

  /**
   * Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.
   */
  @JsonAdapter(OrderedRankingEnum.Adapter.class)
  public enum OrderedRankingEnum {
    NO_ORDER("NO_ORDER"),
    
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    OrderedRankingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderedRankingEnum fromValue(String value) {
      for (OrderedRankingEnum b : OrderedRankingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderedRankingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderedRankingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderedRankingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderedRankingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderedRankingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDERED_RANKING = "orderedRanking";
  @SerializedName(SERIALIZED_NAME_ORDERED_RANKING)
  private OrderedRankingEnum orderedRanking;

  public static final String SERIALIZED_NAME_POSSIBLE_VALUES = "possibleValues";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_VALUES)
  private List<EnumValuePair> possibleValues = new ArrayList<>();

  public EnumPropertyOptions() {
  }

  public EnumPropertyOptions operatorOptions(EnumOperatorOptions operatorOptions) {
    this.operatorOptions = operatorOptions;
    return this;
  }

  /**
   * Get operatorOptions
   * @return operatorOptions
   */
  @javax.annotation.Nullable
  public EnumOperatorOptions getOperatorOptions() {
    return operatorOptions;
  }

  public void setOperatorOptions(EnumOperatorOptions operatorOptions) {
    this.operatorOptions = operatorOptions;
  }


  public EnumPropertyOptions orderedRanking(OrderedRankingEnum orderedRanking) {
    this.orderedRanking = orderedRanking;
    return this;
  }

  /**
   * Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.
   * @return orderedRanking
   */
  @javax.annotation.Nullable
  public OrderedRankingEnum getOrderedRanking() {
    return orderedRanking;
  }

  public void setOrderedRanking(OrderedRankingEnum orderedRanking) {
    this.orderedRanking = orderedRanking;
  }


  public EnumPropertyOptions possibleValues(List<EnumValuePair> possibleValues) {
    this.possibleValues = possibleValues;
    return this;
  }

  public EnumPropertyOptions addPossibleValuesItem(EnumValuePair possibleValuesItem) {
    if (this.possibleValues == null) {
      this.possibleValues = new ArrayList<>();
    }
    this.possibleValues.add(possibleValuesItem);
    return this;
  }

  /**
   * The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.
   * @return possibleValues
   */
  @javax.annotation.Nullable
  public List<EnumValuePair> getPossibleValues() {
    return possibleValues;
  }

  public void setPossibleValues(List<EnumValuePair> possibleValues) {
    this.possibleValues = possibleValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumPropertyOptions enumPropertyOptions = (EnumPropertyOptions) o;
    return Objects.equals(this.operatorOptions, enumPropertyOptions.operatorOptions) &&
        Objects.equals(this.orderedRanking, enumPropertyOptions.orderedRanking) &&
        Objects.equals(this.possibleValues, enumPropertyOptions.possibleValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorOptions, orderedRanking, possibleValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumPropertyOptions {\n");
    sb.append("    operatorOptions: ").append(toIndentedString(operatorOptions)).append("\n");
    sb.append("    orderedRanking: ").append(toIndentedString(orderedRanking)).append("\n");
    sb.append("    possibleValues: ").append(toIndentedString(possibleValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operatorOptions");
    openapiFields.add("orderedRanking");
    openapiFields.add("possibleValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnumPropertyOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnumPropertyOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnumPropertyOptions is not found in the empty JSON string", EnumPropertyOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnumPropertyOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnumPropertyOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `operatorOptions`
      if (jsonObj.get("operatorOptions") != null && !jsonObj.get("operatorOptions").isJsonNull()) {
        EnumOperatorOptions.validateJsonElement(jsonObj.get("operatorOptions"));
      }
      if ((jsonObj.get("orderedRanking") != null && !jsonObj.get("orderedRanking").isJsonNull()) && !jsonObj.get("orderedRanking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderedRanking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderedRanking").toString()));
      }
      // validate the optional field `orderedRanking`
      if (jsonObj.get("orderedRanking") != null && !jsonObj.get("orderedRanking").isJsonNull()) {
        OrderedRankingEnum.validateJsonElement(jsonObj.get("orderedRanking"));
      }
      if (jsonObj.get("possibleValues") != null && !jsonObj.get("possibleValues").isJsonNull()) {
        JsonArray jsonArraypossibleValues = jsonObj.getAsJsonArray("possibleValues");
        if (jsonArraypossibleValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("possibleValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `possibleValues` to be an array in the JSON string but got `%s`", jsonObj.get("possibleValues").toString()));
          }

          // validate the optional field `possibleValues` (array)
          for (int i = 0; i < jsonArraypossibleValues.size(); i++) {
            EnumValuePair.validateJsonElement(jsonArraypossibleValues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnumPropertyOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnumPropertyOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnumPropertyOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnumPropertyOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<EnumPropertyOptions>() {
           @Override
           public void write(JsonWriter out, EnumPropertyOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnumPropertyOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnumPropertyOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnumPropertyOptions
   * @throws IOException if the JSON string is invalid with respect to EnumPropertyOptions
   */
  public static EnumPropertyOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnumPropertyOptions.class);
  }

  /**
   * Convert an instance of EnumPropertyOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

