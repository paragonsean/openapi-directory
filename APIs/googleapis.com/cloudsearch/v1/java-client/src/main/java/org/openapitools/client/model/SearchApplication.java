/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSourceRestriction;
import org.openapitools.client.model.FacetOptions;
import org.openapitools.client.model.QueryInterpretationConfig;
import org.openapitools.client.model.ScoringConfig;
import org.openapitools.client.model.SortOptions;
import org.openapitools.client.model.SourceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchApplication {
  public static final String SERIALIZED_NAME_DATA_SOURCE_RESTRICTIONS = "dataSourceRestrictions";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_RESTRICTIONS)
  private List<DataSourceRestriction> dataSourceRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_FACET_OPTIONS = "defaultFacetOptions";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FACET_OPTIONS)
  private List<FacetOptions> defaultFacetOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_SORT_OPTIONS = "defaultSortOptions";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SORT_OPTIONS)
  private SortOptions defaultSortOptions;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_AUDIT_LOG = "enableAuditLog";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUDIT_LOG)
  private Boolean enableAuditLog;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPERATION_IDS = "operationIds";
  @SerializedName(SERIALIZED_NAME_OPERATION_IDS)
  private List<String> operationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_INTERPRETATION_CONFIG = "queryInterpretationConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_INTERPRETATION_CONFIG)
  private QueryInterpretationConfig queryInterpretationConfig;

  public static final String SERIALIZED_NAME_RETURN_RESULT_THUMBNAIL_URLS = "returnResultThumbnailUrls";
  @SerializedName(SERIALIZED_NAME_RETURN_RESULT_THUMBNAIL_URLS)
  private Boolean returnResultThumbnailUrls;

  public static final String SERIALIZED_NAME_SCORING_CONFIG = "scoringConfig";
  @SerializedName(SERIALIZED_NAME_SCORING_CONFIG)
  private ScoringConfig scoringConfig;

  public static final String SERIALIZED_NAME_SOURCE_CONFIG = "sourceConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIG)
  private List<SourceConfig> sourceConfig = new ArrayList<>();

  public SearchApplication() {
  }

  public SearchApplication(
     List<String> operationIds
  ) {
    this();
    this.operationIds = operationIds;
  }

  public SearchApplication dataSourceRestrictions(List<DataSourceRestriction> dataSourceRestrictions) {
    this.dataSourceRestrictions = dataSourceRestrictions;
    return this;
  }

  public SearchApplication addDataSourceRestrictionsItem(DataSourceRestriction dataSourceRestrictionsItem) {
    if (this.dataSourceRestrictions == null) {
      this.dataSourceRestrictions = new ArrayList<>();
    }
    this.dataSourceRestrictions.add(dataSourceRestrictionsItem);
    return this;
  }

  /**
   * Retrictions applied to the configurations. The maximum number of elements is 10.
   * @return dataSourceRestrictions
   */
  @javax.annotation.Nullable
  public List<DataSourceRestriction> getDataSourceRestrictions() {
    return dataSourceRestrictions;
  }

  public void setDataSourceRestrictions(List<DataSourceRestriction> dataSourceRestrictions) {
    this.dataSourceRestrictions = dataSourceRestrictions;
  }


  public SearchApplication defaultFacetOptions(List<FacetOptions> defaultFacetOptions) {
    this.defaultFacetOptions = defaultFacetOptions;
    return this;
  }

  public SearchApplication addDefaultFacetOptionsItem(FacetOptions defaultFacetOptionsItem) {
    if (this.defaultFacetOptions == null) {
      this.defaultFacetOptions = new ArrayList<>();
    }
    this.defaultFacetOptions.add(defaultFacetOptionsItem);
    return this;
  }

  /**
   * The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
   * @return defaultFacetOptions
   */
  @javax.annotation.Nullable
  public List<FacetOptions> getDefaultFacetOptions() {
    return defaultFacetOptions;
  }

  public void setDefaultFacetOptions(List<FacetOptions> defaultFacetOptions) {
    this.defaultFacetOptions = defaultFacetOptions;
  }


  public SearchApplication defaultSortOptions(SortOptions defaultSortOptions) {
    this.defaultSortOptions = defaultSortOptions;
    return this;
  }

  /**
   * Get defaultSortOptions
   * @return defaultSortOptions
   */
  @javax.annotation.Nullable
  public SortOptions getDefaultSortOptions() {
    return defaultSortOptions;
  }

  public void setDefaultSortOptions(SortOptions defaultSortOptions) {
    this.defaultSortOptions = defaultSortOptions;
  }


  public SearchApplication displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the Search Application. The maximum length is 300 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SearchApplication enableAuditLog(Boolean enableAuditLog) {
    this.enableAuditLog = enableAuditLog;
    return this;
  }

  /**
   * Indicates whether audit logging is on/off for requests made for the search application in query APIs.
   * @return enableAuditLog
   */
  @javax.annotation.Nullable
  public Boolean getEnableAuditLog() {
    return enableAuditLog;
  }

  public void setEnableAuditLog(Boolean enableAuditLog) {
    this.enableAuditLog = enableAuditLog;
  }


  public SearchApplication name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Search Application. Format: searchapplications/{application_id}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.
   * @return operationIds
   */
  @javax.annotation.Nullable
  public List<String> getOperationIds() {
    return operationIds;
  }



  public SearchApplication queryInterpretationConfig(QueryInterpretationConfig queryInterpretationConfig) {
    this.queryInterpretationConfig = queryInterpretationConfig;
    return this;
  }

  /**
   * Get queryInterpretationConfig
   * @return queryInterpretationConfig
   */
  @javax.annotation.Nullable
  public QueryInterpretationConfig getQueryInterpretationConfig() {
    return queryInterpretationConfig;
  }

  public void setQueryInterpretationConfig(QueryInterpretationConfig queryInterpretationConfig) {
    this.queryInterpretationConfig = queryInterpretationConfig;
  }


  public SearchApplication returnResultThumbnailUrls(Boolean returnResultThumbnailUrls) {
    this.returnResultThumbnailUrls = returnResultThumbnailUrls;
    return this;
  }

  /**
   * With each result we should return the URI for its thumbnail (when applicable)
   * @return returnResultThumbnailUrls
   */
  @javax.annotation.Nullable
  public Boolean getReturnResultThumbnailUrls() {
    return returnResultThumbnailUrls;
  }

  public void setReturnResultThumbnailUrls(Boolean returnResultThumbnailUrls) {
    this.returnResultThumbnailUrls = returnResultThumbnailUrls;
  }


  public SearchApplication scoringConfig(ScoringConfig scoringConfig) {
    this.scoringConfig = scoringConfig;
    return this;
  }

  /**
   * Get scoringConfig
   * @return scoringConfig
   */
  @javax.annotation.Nullable
  public ScoringConfig getScoringConfig() {
    return scoringConfig;
  }

  public void setScoringConfig(ScoringConfig scoringConfig) {
    this.scoringConfig = scoringConfig;
  }


  public SearchApplication sourceConfig(List<SourceConfig> sourceConfig) {
    this.sourceConfig = sourceConfig;
    return this;
  }

  public SearchApplication addSourceConfigItem(SourceConfig sourceConfigItem) {
    if (this.sourceConfig == null) {
      this.sourceConfig = new ArrayList<>();
    }
    this.sourceConfig.add(sourceConfigItem);
    return this;
  }

  /**
   * Configuration for a sources specified in data_source_restrictions.
   * @return sourceConfig
   */
  @javax.annotation.Nullable
  public List<SourceConfig> getSourceConfig() {
    return sourceConfig;
  }

  public void setSourceConfig(List<SourceConfig> sourceConfig) {
    this.sourceConfig = sourceConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchApplication searchApplication = (SearchApplication) o;
    return Objects.equals(this.dataSourceRestrictions, searchApplication.dataSourceRestrictions) &&
        Objects.equals(this.defaultFacetOptions, searchApplication.defaultFacetOptions) &&
        Objects.equals(this.defaultSortOptions, searchApplication.defaultSortOptions) &&
        Objects.equals(this.displayName, searchApplication.displayName) &&
        Objects.equals(this.enableAuditLog, searchApplication.enableAuditLog) &&
        Objects.equals(this.name, searchApplication.name) &&
        Objects.equals(this.operationIds, searchApplication.operationIds) &&
        Objects.equals(this.queryInterpretationConfig, searchApplication.queryInterpretationConfig) &&
        Objects.equals(this.returnResultThumbnailUrls, searchApplication.returnResultThumbnailUrls) &&
        Objects.equals(this.scoringConfig, searchApplication.scoringConfig) &&
        Objects.equals(this.sourceConfig, searchApplication.sourceConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceRestrictions, defaultFacetOptions, defaultSortOptions, displayName, enableAuditLog, name, operationIds, queryInterpretationConfig, returnResultThumbnailUrls, scoringConfig, sourceConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchApplication {\n");
    sb.append("    dataSourceRestrictions: ").append(toIndentedString(dataSourceRestrictions)).append("\n");
    sb.append("    defaultFacetOptions: ").append(toIndentedString(defaultFacetOptions)).append("\n");
    sb.append("    defaultSortOptions: ").append(toIndentedString(defaultSortOptions)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableAuditLog: ").append(toIndentedString(enableAuditLog)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operationIds: ").append(toIndentedString(operationIds)).append("\n");
    sb.append("    queryInterpretationConfig: ").append(toIndentedString(queryInterpretationConfig)).append("\n");
    sb.append("    returnResultThumbnailUrls: ").append(toIndentedString(returnResultThumbnailUrls)).append("\n");
    sb.append("    scoringConfig: ").append(toIndentedString(scoringConfig)).append("\n");
    sb.append("    sourceConfig: ").append(toIndentedString(sourceConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceRestrictions");
    openapiFields.add("defaultFacetOptions");
    openapiFields.add("defaultSortOptions");
    openapiFields.add("displayName");
    openapiFields.add("enableAuditLog");
    openapiFields.add("name");
    openapiFields.add("operationIds");
    openapiFields.add("queryInterpretationConfig");
    openapiFields.add("returnResultThumbnailUrls");
    openapiFields.add("scoringConfig");
    openapiFields.add("sourceConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchApplication is not found in the empty JSON string", SearchApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataSourceRestrictions") != null && !jsonObj.get("dataSourceRestrictions").isJsonNull()) {
        JsonArray jsonArraydataSourceRestrictions = jsonObj.getAsJsonArray("dataSourceRestrictions");
        if (jsonArraydataSourceRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSourceRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSourceRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("dataSourceRestrictions").toString()));
          }

          // validate the optional field `dataSourceRestrictions` (array)
          for (int i = 0; i < jsonArraydataSourceRestrictions.size(); i++) {
            DataSourceRestriction.validateJsonElement(jsonArraydataSourceRestrictions.get(i));
          };
        }
      }
      if (jsonObj.get("defaultFacetOptions") != null && !jsonObj.get("defaultFacetOptions").isJsonNull()) {
        JsonArray jsonArraydefaultFacetOptions = jsonObj.getAsJsonArray("defaultFacetOptions");
        if (jsonArraydefaultFacetOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultFacetOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultFacetOptions` to be an array in the JSON string but got `%s`", jsonObj.get("defaultFacetOptions").toString()));
          }

          // validate the optional field `defaultFacetOptions` (array)
          for (int i = 0; i < jsonArraydefaultFacetOptions.size(); i++) {
            FacetOptions.validateJsonElement(jsonArraydefaultFacetOptions.get(i));
          };
        }
      }
      // validate the optional field `defaultSortOptions`
      if (jsonObj.get("defaultSortOptions") != null && !jsonObj.get("defaultSortOptions").isJsonNull()) {
        SortOptions.validateJsonElement(jsonObj.get("defaultSortOptions"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operationIds") != null && !jsonObj.get("operationIds").isJsonNull() && !jsonObj.get("operationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationIds` to be an array in the JSON string but got `%s`", jsonObj.get("operationIds").toString()));
      }
      // validate the optional field `queryInterpretationConfig`
      if (jsonObj.get("queryInterpretationConfig") != null && !jsonObj.get("queryInterpretationConfig").isJsonNull()) {
        QueryInterpretationConfig.validateJsonElement(jsonObj.get("queryInterpretationConfig"));
      }
      // validate the optional field `scoringConfig`
      if (jsonObj.get("scoringConfig") != null && !jsonObj.get("scoringConfig").isJsonNull()) {
        ScoringConfig.validateJsonElement(jsonObj.get("scoringConfig"));
      }
      if (jsonObj.get("sourceConfig") != null && !jsonObj.get("sourceConfig").isJsonNull()) {
        JsonArray jsonArraysourceConfig = jsonObj.getAsJsonArray("sourceConfig");
        if (jsonArraysourceConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceConfig` to be an array in the JSON string but got `%s`", jsonObj.get("sourceConfig").toString()));
          }

          // validate the optional field `sourceConfig` (array)
          for (int i = 0; i < jsonArraysourceConfig.size(); i++) {
            SourceConfig.validateJsonElement(jsonArraysourceConfig.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchApplication>() {
           @Override
           public void write(JsonWriter out, SearchApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchApplication
   * @throws IOException if the JSON string is invalid with respect to SearchApplication
   */
  public static SearchApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchApplication.class);
  }

  /**
   * Convert an instance of SearchApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

