/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmailAddress;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.PhoneNumber;
import org.openapitools.client.model.Photo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object to represent a person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Person {
  public static final String SERIALIZED_NAME_EMAIL_ADDRESSES = "emailAddresses";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESSES)
  private List<EmailAddress> emailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBFUSCATED_ID = "obfuscatedId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_ID)
  private String obfuscatedId;

  public static final String SERIALIZED_NAME_PERSON_NAMES = "personNames";
  @SerializedName(SERIALIZED_NAME_PERSON_NAMES)
  private List<Name> personNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<PhoneNumber> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<Photo> photos = new ArrayList<>();

  public Person() {
  }

  public Person emailAddresses(List<EmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
    return this;
  }

  public Person addEmailAddressesItem(EmailAddress emailAddressesItem) {
    if (this.emailAddresses == null) {
      this.emailAddresses = new ArrayList<>();
    }
    this.emailAddresses.add(emailAddressesItem);
    return this;
  }

  /**
   * The person&#39;s email addresses
   * @return emailAddresses
   */
  @javax.annotation.Nullable
  public List<EmailAddress> getEmailAddresses() {
    return emailAddresses;
  }

  public void setEmailAddresses(List<EmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
  }


  public Person name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the person to provide information about. See [&#x60;People.get&#x60;](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Person obfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
    return this;
  }

  /**
   * Obfuscated ID of a person.
   * @return obfuscatedId
   */
  @javax.annotation.Nullable
  public String getObfuscatedId() {
    return obfuscatedId;
  }

  public void setObfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
  }


  public Person personNames(List<Name> personNames) {
    this.personNames = personNames;
    return this;
  }

  public Person addPersonNamesItem(Name personNamesItem) {
    if (this.personNames == null) {
      this.personNames = new ArrayList<>();
    }
    this.personNames.add(personNamesItem);
    return this;
  }

  /**
   * The person&#39;s name
   * @return personNames
   */
  @javax.annotation.Nullable
  public List<Name> getPersonNames() {
    return personNames;
  }

  public void setPersonNames(List<Name> personNames) {
    this.personNames = personNames;
  }


  public Person phoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public Person addPhoneNumbersItem(PhoneNumber phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * The person&#39;s phone numbers
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<PhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public Person photos(List<Photo> photos) {
    this.photos = photos;
    return this;
  }

  public Person addPhotosItem(Photo photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * A person&#39;s read-only photo. A picture shown next to the person&#39;s name to help others recognize the person in search results.
   * @return photos
   */
  @javax.annotation.Nullable
  public List<Photo> getPhotos() {
    return photos;
  }

  public void setPhotos(List<Photo> photos) {
    this.photos = photos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.emailAddresses, person.emailAddresses) &&
        Objects.equals(this.name, person.name) &&
        Objects.equals(this.obfuscatedId, person.obfuscatedId) &&
        Objects.equals(this.personNames, person.personNames) &&
        Objects.equals(this.phoneNumbers, person.phoneNumbers) &&
        Objects.equals(this.photos, person.photos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddresses, name, obfuscatedId, personNames, phoneNumbers, photos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    emailAddresses: ").append(toIndentedString(emailAddresses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    obfuscatedId: ").append(toIndentedString(obfuscatedId)).append("\n");
    sb.append("    personNames: ").append(toIndentedString(personNames)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailAddresses");
    openapiFields.add("name");
    openapiFields.add("obfuscatedId");
    openapiFields.add("personNames");
    openapiFields.add("phoneNumbers");
    openapiFields.add("photos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("emailAddresses") != null && !jsonObj.get("emailAddresses").isJsonNull()) {
        JsonArray jsonArrayemailAddresses = jsonObj.getAsJsonArray("emailAddresses");
        if (jsonArrayemailAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emailAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddresses").toString()));
          }

          // validate the optional field `emailAddresses` (array)
          for (int i = 0; i < jsonArrayemailAddresses.size(); i++) {
            EmailAddress.validateJsonElement(jsonArrayemailAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("obfuscatedId") != null && !jsonObj.get("obfuscatedId").isJsonNull()) && !jsonObj.get("obfuscatedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedId").toString()));
      }
      if (jsonObj.get("personNames") != null && !jsonObj.get("personNames").isJsonNull()) {
        JsonArray jsonArraypersonNames = jsonObj.getAsJsonArray("personNames");
        if (jsonArraypersonNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("personNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `personNames` to be an array in the JSON string but got `%s`", jsonObj.get("personNames").toString()));
          }

          // validate the optional field `personNames` (array)
          for (int i = 0; i < jsonArraypersonNames.size(); i++) {
            Name.validateJsonElement(jsonArraypersonNames.get(i));
          };
        }
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            PhoneNumber.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) {
        JsonArray jsonArrayphotos = jsonObj.getAsJsonArray("photos");
        if (jsonArrayphotos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
          }

          // validate the optional field `photos` (array)
          for (int i = 0; i < jsonArrayphotos.size(); i++) {
            Photo.validateJsonElement(jsonArrayphotos.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

