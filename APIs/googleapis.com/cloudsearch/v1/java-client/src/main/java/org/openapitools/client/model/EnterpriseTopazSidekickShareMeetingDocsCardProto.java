/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickAgendaEntry;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Share meeting docs card proto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickShareMeetingDocsCardProto {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private List<EnterpriseTopazSidekickCommonDocument> document = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EnterpriseTopazSidekickAgendaEntry event;

  public EnterpriseTopazSidekickShareMeetingDocsCardProto() {
  }

  public EnterpriseTopazSidekickShareMeetingDocsCardProto document(List<EnterpriseTopazSidekickCommonDocument> document) {
    this.document = document;
    return this;
  }

  public EnterpriseTopazSidekickShareMeetingDocsCardProto addDocumentItem(EnterpriseTopazSidekickCommonDocument documentItem) {
    if (this.document == null) {
      this.document = new ArrayList<>();
    }
    this.document.add(documentItem);
    return this;
  }

  /**
   * Documents to share for the given meeting.
   * @return document
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickCommonDocument> getDocument() {
    return document;
  }

  public void setDocument(List<EnterpriseTopazSidekickCommonDocument> document) {
    this.document = document;
  }


  public EnterpriseTopazSidekickShareMeetingDocsCardProto event(EnterpriseTopazSidekickAgendaEntry event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickAgendaEntry getEvent() {
    return event;
  }

  public void setEvent(EnterpriseTopazSidekickAgendaEntry event) {
    this.event = event;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickShareMeetingDocsCardProto enterpriseTopazSidekickShareMeetingDocsCardProto = (EnterpriseTopazSidekickShareMeetingDocsCardProto) o;
    return Objects.equals(this.document, enterpriseTopazSidekickShareMeetingDocsCardProto.document) &&
        Objects.equals(this.event, enterpriseTopazSidekickShareMeetingDocsCardProto.event);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, event);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickShareMeetingDocsCardProto {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("event");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickShareMeetingDocsCardProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickShareMeetingDocsCardProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickShareMeetingDocsCardProto is not found in the empty JSON string", EnterpriseTopazSidekickShareMeetingDocsCardProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickShareMeetingDocsCardProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickShareMeetingDocsCardProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        JsonArray jsonArraydocument = jsonObj.getAsJsonArray("document");
        if (jsonArraydocument != null) {
          // ensure the json data is an array
          if (!jsonObj.get("document").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `document` to be an array in the JSON string but got `%s`", jsonObj.get("document").toString()));
          }

          // validate the optional field `document` (array)
          for (int i = 0; i < jsonArraydocument.size(); i++) {
            EnterpriseTopazSidekickCommonDocument.validateJsonElement(jsonArraydocument.get(i));
          };
        }
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EnterpriseTopazSidekickAgendaEntry.validateJsonElement(jsonObj.get("event"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickShareMeetingDocsCardProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickShareMeetingDocsCardProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickShareMeetingDocsCardProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickShareMeetingDocsCardProto.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickShareMeetingDocsCardProto>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickShareMeetingDocsCardProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickShareMeetingDocsCardProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickShareMeetingDocsCardProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickShareMeetingDocsCardProto
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickShareMeetingDocsCardProto
   */
  public static EnterpriseTopazSidekickShareMeetingDocsCardProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickShareMeetingDocsCardProto.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickShareMeetingDocsCardProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

