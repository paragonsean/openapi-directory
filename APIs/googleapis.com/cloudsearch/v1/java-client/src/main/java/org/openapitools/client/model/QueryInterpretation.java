/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryInterpretation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryInterpretation {
  /**
   * Gets or Sets interpretationType
   */
  @JsonAdapter(InterpretationTypeEnum.Adapter.class)
  public enum InterpretationTypeEnum {
    NONE("NONE"),
    
    BLEND("BLEND"),
    
    REPLACE("REPLACE");

    private String value;

    InterpretationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterpretationTypeEnum fromValue(String value) {
      for (InterpretationTypeEnum b : InterpretationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterpretationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterpretationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterpretationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterpretationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterpretationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERPRETATION_TYPE = "interpretationType";
  @SerializedName(SERIALIZED_NAME_INTERPRETATION_TYPE)
  private InterpretationTypeEnum interpretationType;

  public static final String SERIALIZED_NAME_INTERPRETED_QUERY = "interpretedQuery";
  @SerializedName(SERIALIZED_NAME_INTERPRETED_QUERY)
  private String interpretedQuery;

  /**
   * The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    QUERY_HAS_NATURAL_LANGUAGE_INTENT("QUERY_HAS_NATURAL_LANGUAGE_INTENT"),
    
    NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY("NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public QueryInterpretation() {
  }

  public QueryInterpretation interpretationType(InterpretationTypeEnum interpretationType) {
    this.interpretationType = interpretationType;
    return this;
  }

  /**
   * Get interpretationType
   * @return interpretationType
   */
  @javax.annotation.Nullable
  public InterpretationTypeEnum getInterpretationType() {
    return interpretationType;
  }

  public void setInterpretationType(InterpretationTypeEnum interpretationType) {
    this.interpretationType = interpretationType;
  }


  public QueryInterpretation interpretedQuery(String interpretedQuery) {
    this.interpretedQuery = interpretedQuery;
    return this;
  }

  /**
   * The interpretation of the query used in search. For example, queries with natural language intent like \&quot;email from john\&quot; will be interpreted as \&quot;from:john source:mail\&quot;. This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.
   * @return interpretedQuery
   */
  @javax.annotation.Nullable
  public String getInterpretedQuery() {
    return interpretedQuery;
  }

  public void setInterpretedQuery(String interpretedQuery) {
    this.interpretedQuery = interpretedQuery;
  }


  public QueryInterpretation reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInterpretation queryInterpretation = (QueryInterpretation) o;
    return Objects.equals(this.interpretationType, queryInterpretation.interpretationType) &&
        Objects.equals(this.interpretedQuery, queryInterpretation.interpretedQuery) &&
        Objects.equals(this.reason, queryInterpretation.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interpretationType, interpretedQuery, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInterpretation {\n");
    sb.append("    interpretationType: ").append(toIndentedString(interpretationType)).append("\n");
    sb.append("    interpretedQuery: ").append(toIndentedString(interpretedQuery)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interpretationType");
    openapiFields.add("interpretedQuery");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInterpretation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInterpretation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInterpretation is not found in the empty JSON string", QueryInterpretation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInterpretation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInterpretation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("interpretationType") != null && !jsonObj.get("interpretationType").isJsonNull()) && !jsonObj.get("interpretationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interpretationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interpretationType").toString()));
      }
      // validate the optional field `interpretationType`
      if (jsonObj.get("interpretationType") != null && !jsonObj.get("interpretationType").isJsonNull()) {
        InterpretationTypeEnum.validateJsonElement(jsonObj.get("interpretationType"));
      }
      if ((jsonObj.get("interpretedQuery") != null && !jsonObj.get("interpretedQuery").isJsonNull()) && !jsonObj.get("interpretedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interpretedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interpretedQuery").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInterpretation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInterpretation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInterpretation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInterpretation.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInterpretation>() {
           @Override
           public void write(JsonWriter out, QueryInterpretation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInterpretation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInterpretation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInterpretation
   * @throws IOException if the JSON string is invalid with respect to QueryInterpretation
   */
  public static QueryInterpretation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInterpretation.class);
  }

  /**
   * Convert an instance of QueryInterpretation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

