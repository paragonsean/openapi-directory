/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectOptions;
import org.openapitools.client.model.PropertyDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition for an object within a data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectDefinition {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private ObjectOptions options;

  public static final String SERIALIZED_NAME_PROPERTY_DEFINITIONS = "propertyDefinitions";
  @SerializedName(SERIALIZED_NAME_PROPERTY_DEFINITIONS)
  private List<PropertyDefinition> propertyDefinitions = new ArrayList<>();

  public ObjectDefinition() {
  }

  public ObjectDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ObjectDefinition options(ObjectOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public ObjectOptions getOptions() {
    return options;
  }

  public void setOptions(ObjectOptions options) {
    this.options = options;
  }


  public ObjectDefinition propertyDefinitions(List<PropertyDefinition> propertyDefinitions) {
    this.propertyDefinitions = propertyDefinitions;
    return this;
  }

  public ObjectDefinition addPropertyDefinitionsItem(PropertyDefinition propertyDefinitionsItem) {
    if (this.propertyDefinitions == null) {
      this.propertyDefinitions = new ArrayList<>();
    }
    this.propertyDefinitions.add(propertyDefinitionsItem);
    return this;
  }

  /**
   * The property definitions for the object. The maximum number of elements is 1000.
   * @return propertyDefinitions
   */
  @javax.annotation.Nullable
  public List<PropertyDefinition> getPropertyDefinitions() {
    return propertyDefinitions;
  }

  public void setPropertyDefinitions(List<PropertyDefinition> propertyDefinitions) {
    this.propertyDefinitions = propertyDefinitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectDefinition objectDefinition = (ObjectDefinition) o;
    return Objects.equals(this.name, objectDefinition.name) &&
        Objects.equals(this.options, objectDefinition.options) &&
        Objects.equals(this.propertyDefinitions, objectDefinition.propertyDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, options, propertyDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    propertyDefinitions: ").append(toIndentedString(propertyDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("propertyDefinitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectDefinition is not found in the empty JSON string", ObjectDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        ObjectOptions.validateJsonElement(jsonObj.get("options"));
      }
      if (jsonObj.get("propertyDefinitions") != null && !jsonObj.get("propertyDefinitions").isJsonNull()) {
        JsonArray jsonArraypropertyDefinitions = jsonObj.getAsJsonArray("propertyDefinitions");
        if (jsonArraypropertyDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("propertyDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `propertyDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("propertyDefinitions").toString()));
          }

          // validate the optional field `propertyDefinitions` (array)
          for (int i = 0; i < jsonArraypropertyDefinitions.size(); i++) {
            PropertyDefinition.validateJsonElement(jsonArraypropertyDefinitions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectDefinition>() {
           @Override
           public void write(JsonWriter out, ObjectDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectDefinition
   * @throws IOException if the JSON string is invalid with respect to ObjectDefinition
   */
  public static ObjectDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectDefinition.class);
  }

  /**
   * Convert an instance of ObjectDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

