/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DebugOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PollItemsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PollItemsRequest {
  public static final String SERIALIZED_NAME_CONNECTOR_NAME = "connectorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_NAME)
  private String connectorName;

  public static final String SERIALIZED_NAME_DEBUG_OPTIONS = "debugOptions";
  @SerializedName(SERIALIZED_NAME_DEBUG_OPTIONS)
  private DebugOptions debugOptions;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  /**
   * Gets or Sets statusCodes
   */
  @JsonAdapter(StatusCodesEnum.Adapter.class)
  public enum StatusCodesEnum {
    CODE_UNSPECIFIED("CODE_UNSPECIFIED"),
    
    ERROR("ERROR"),
    
    MODIFIED("MODIFIED"),
    
    NEW_ITEM("NEW_ITEM"),
    
    ACCEPTED("ACCEPTED");

    private String value;

    StatusCodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodesEnum fromValue(String value) {
      for (StatusCodesEnum b : StatusCodesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCodesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODES = "statusCodes";
  @SerializedName(SERIALIZED_NAME_STATUS_CODES)
  private List<StatusCodesEnum> statusCodes = new ArrayList<>();

  public PollItemsRequest() {
  }

  public PollItemsRequest connectorName(String connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  /**
   * The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
   * @return connectorName
   */
  @javax.annotation.Nullable
  public String getConnectorName() {
    return connectorName;
  }

  public void setConnectorName(String connectorName) {
    this.connectorName = connectorName;
  }


  public PollItemsRequest debugOptions(DebugOptions debugOptions) {
    this.debugOptions = debugOptions;
    return this;
  }

  /**
   * Get debugOptions
   * @return debugOptions
   */
  @javax.annotation.Nullable
  public DebugOptions getDebugOptions() {
    return debugOptions;
  }

  public void setDebugOptions(DebugOptions debugOptions) {
    this.debugOptions = debugOptions;
  }


  public PollItemsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Maximum number of items to return. The maximum value is 100 and the default value is 20.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public PollItemsRequest queue(String queue) {
    this.queue = queue;
    return this;
  }

  /**
   * Queue name to fetch items from. If unspecified, PollItems will fetch from &#39;default&#39; queue. The maximum length is 100 characters.
   * @return queue
   */
  @javax.annotation.Nullable
  public String getQueue() {
    return queue;
  }

  public void setQueue(String queue) {
    this.queue = queue;
  }


  public PollItemsRequest statusCodes(List<StatusCodesEnum> statusCodes) {
    this.statusCodes = statusCodes;
    return this;
  }

  public PollItemsRequest addStatusCodesItem(StatusCodesEnum statusCodesItem) {
    if (this.statusCodes == null) {
      this.statusCodes = new ArrayList<>();
    }
    this.statusCodes.add(statusCodesItem);
    return this;
  }

  /**
   * Limit the items polled to the ones with these statuses.
   * @return statusCodes
   */
  @javax.annotation.Nullable
  public List<StatusCodesEnum> getStatusCodes() {
    return statusCodes;
  }

  public void setStatusCodes(List<StatusCodesEnum> statusCodes) {
    this.statusCodes = statusCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PollItemsRequest pollItemsRequest = (PollItemsRequest) o;
    return Objects.equals(this.connectorName, pollItemsRequest.connectorName) &&
        Objects.equals(this.debugOptions, pollItemsRequest.debugOptions) &&
        Objects.equals(this.limit, pollItemsRequest.limit) &&
        Objects.equals(this.queue, pollItemsRequest.queue) &&
        Objects.equals(this.statusCodes, pollItemsRequest.statusCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorName, debugOptions, limit, queue, statusCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PollItemsRequest {\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    debugOptions: ").append(toIndentedString(debugOptions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    statusCodes: ").append(toIndentedString(statusCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorName");
    openapiFields.add("debugOptions");
    openapiFields.add("limit");
    openapiFields.add("queue");
    openapiFields.add("statusCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PollItemsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PollItemsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PollItemsRequest is not found in the empty JSON string", PollItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PollItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PollItemsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorName") != null && !jsonObj.get("connectorName").isJsonNull()) && !jsonObj.get("connectorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorName").toString()));
      }
      // validate the optional field `debugOptions`
      if (jsonObj.get("debugOptions") != null && !jsonObj.get("debugOptions").isJsonNull()) {
        DebugOptions.validateJsonElement(jsonObj.get("debugOptions"));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusCodes") != null && !jsonObj.get("statusCodes").isJsonNull() && !jsonObj.get("statusCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCodes` to be an array in the JSON string but got `%s`", jsonObj.get("statusCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PollItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PollItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PollItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PollItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PollItemsRequest>() {
           @Override
           public void write(JsonWriter out, PollItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PollItemsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PollItemsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PollItemsRequest
   * @throws IOException if the JSON string is invalid with respect to PollItemsRequest
   */
  public static PollItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PollItemsRequest.class);
  }

  /**
   * Convert an instance of PollItemsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

