/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.ResultDebugInfo;
import org.openapitools.client.model.Snippet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results containing indexed information for a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResult {
  public static final String SERIALIZED_NAME_CLUSTERED_RESULTS = "clusteredResults";
  @SerializedName(SERIALIZED_NAME_CLUSTERED_RESULTS)
  private List<SearchResult> clusteredResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private ResultDebugInfo debugInfo;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private Snippet snippet;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public SearchResult() {
  }

  public SearchResult clusteredResults(List<SearchResult> clusteredResults) {
    this.clusteredResults = clusteredResults;
    return this;
  }

  public SearchResult addClusteredResultsItem(SearchResult clusteredResultsItem) {
    if (this.clusteredResults == null) {
      this.clusteredResults = new ArrayList<>();
    }
    this.clusteredResults.add(clusteredResultsItem);
    return this;
  }

  /**
   * If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty.
   * @return clusteredResults
   */
  @javax.annotation.Nullable
  public List<SearchResult> getClusteredResults() {
    return clusteredResults;
  }

  public void setClusteredResults(List<SearchResult> clusteredResults) {
    this.clusteredResults = clusteredResults;
  }


  public SearchResult debugInfo(ResultDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Get debugInfo
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public ResultDebugInfo getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(ResultDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
  }


  public SearchResult metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public SearchResult snippet(Snippet snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * Get snippet
   * @return snippet
   */
  @javax.annotation.Nullable
  public Snippet getSnippet() {
    return snippet;
  }

  public void setSnippet(Snippet snippet) {
    this.snippet = snippet;
  }


  public SearchResult title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the search result.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SearchResult url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn&#39;t be changed.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResult searchResult = (SearchResult) o;
    return Objects.equals(this.clusteredResults, searchResult.clusteredResults) &&
        Objects.equals(this.debugInfo, searchResult.debugInfo) &&
        Objects.equals(this.metadata, searchResult.metadata) &&
        Objects.equals(this.snippet, searchResult.snippet) &&
        Objects.equals(this.title, searchResult.title) &&
        Objects.equals(this.url, searchResult.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusteredResults, debugInfo, metadata, snippet, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResult {\n");
    sb.append("    clusteredResults: ").append(toIndentedString(clusteredResults)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusteredResults");
    openapiFields.add("debugInfo");
    openapiFields.add("metadata");
    openapiFields.add("snippet");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResult is not found in the empty JSON string", SearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clusteredResults") != null && !jsonObj.get("clusteredResults").isJsonNull()) {
        JsonArray jsonArrayclusteredResults = jsonObj.getAsJsonArray("clusteredResults");
        if (jsonArrayclusteredResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clusteredResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clusteredResults` to be an array in the JSON string but got `%s`", jsonObj.get("clusteredResults").toString()));
          }

          // validate the optional field `clusteredResults` (array)
          for (int i = 0; i < jsonArrayclusteredResults.size(); i++) {
            SearchResult.validateJsonElement(jsonArrayclusteredResults.get(i));
          };
        }
      }
      // validate the optional field `debugInfo`
      if (jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) {
        ResultDebugInfo.validateJsonElement(jsonObj.get("debugInfo"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `snippet`
      if (jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) {
        Snippet.validateJsonElement(jsonObj.get("snippet"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResult>() {
           @Override
           public void write(JsonWriter out, SearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResult
   * @throws IOException if the JSON string is invalid with respect to SearchResult
   */
  public static SearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResult.class);
  }

  /**
   * Convert an instance of SearchResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

