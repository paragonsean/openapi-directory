/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FreshnessOptions {
  public static final String SERIALIZED_NAME_FRESHNESS_DURATION = "freshnessDuration";
  @SerializedName(SERIALIZED_NAME_FRESHNESS_DURATION)
  private String freshnessDuration;

  public static final String SERIALIZED_NAME_FRESHNESS_PROPERTY = "freshnessProperty";
  @SerializedName(SERIALIZED_NAME_FRESHNESS_PROPERTY)
  private String freshnessProperty;

  public FreshnessOptions() {
  }

  public FreshnessOptions freshnessDuration(String freshnessDuration) {
    this.freshnessDuration = freshnessDuration;
    return this;
  }

  /**
   * The duration after which an object should be considered stale. The default value is 180 days (in seconds).
   * @return freshnessDuration
   */
  @javax.annotation.Nullable
  public String getFreshnessDuration() {
    return freshnessDuration;
  }

  public void setFreshnessDuration(String freshnessDuration) {
    this.freshnessDuration = freshnessDuration;
  }


  public FreshnessOptions freshnessProperty(String freshnessProperty) {
    this.freshnessProperty = freshnessProperty;
    return this;
  }

  /**
   * This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.
   * @return freshnessProperty
   */
  @javax.annotation.Nullable
  public String getFreshnessProperty() {
    return freshnessProperty;
  }

  public void setFreshnessProperty(String freshnessProperty) {
    this.freshnessProperty = freshnessProperty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreshnessOptions freshnessOptions = (FreshnessOptions) o;
    return Objects.equals(this.freshnessDuration, freshnessOptions.freshnessDuration) &&
        Objects.equals(this.freshnessProperty, freshnessOptions.freshnessProperty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freshnessDuration, freshnessProperty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreshnessOptions {\n");
    sb.append("    freshnessDuration: ").append(toIndentedString(freshnessDuration)).append("\n");
    sb.append("    freshnessProperty: ").append(toIndentedString(freshnessProperty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freshnessDuration");
    openapiFields.add("freshnessProperty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FreshnessOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FreshnessOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FreshnessOptions is not found in the empty JSON string", FreshnessOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FreshnessOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FreshnessOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("freshnessDuration") != null && !jsonObj.get("freshnessDuration").isJsonNull()) && !jsonObj.get("freshnessDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freshnessDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freshnessDuration").toString()));
      }
      if ((jsonObj.get("freshnessProperty") != null && !jsonObj.get("freshnessProperty").isJsonNull()) && !jsonObj.get("freshnessProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freshnessProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freshnessProperty").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FreshnessOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FreshnessOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FreshnessOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FreshnessOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<FreshnessOptions>() {
           @Override
           public void write(JsonWriter out, FreshnessOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FreshnessOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FreshnessOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FreshnessOptions
   * @throws IOException if the JSON string is invalid with respect to FreshnessOptions
   */
  public static FreshnessOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FreshnessOptions.class);
  }

  /**
   * Convert an instance of FreshnessOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

