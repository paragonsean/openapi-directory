/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContextAttribute;
import org.openapitools.client.model.DataSourceRestriction;
import org.openapitools.client.model.FacetOptions;
import org.openapitools.client.model.QueryInterpretationOptions;
import org.openapitools.client.model.RequestOptions;
import org.openapitools.client.model.SortOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The search API request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchRequest {
  public static final String SERIALIZED_NAME_CONTEXT_ATTRIBUTES = "contextAttributes";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ATTRIBUTES)
  private List<ContextAttribute> contextAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE_RESTRICTIONS = "dataSourceRestrictions";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_RESTRICTIONS)
  private List<DataSourceRestriction> dataSourceRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACET_OPTIONS = "facetOptions";
  @SerializedName(SERIALIZED_NAME_FACET_OPTIONS)
  private List<FacetOptions> facetOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_QUERY_INTERPRETATION_OPTIONS = "queryInterpretationOptions";
  @SerializedName(SERIALIZED_NAME_QUERY_INTERPRETATION_OPTIONS)
  private QueryInterpretationOptions queryInterpretationOptions;

  public static final String SERIALIZED_NAME_REQUEST_OPTIONS = "requestOptions";
  @SerializedName(SERIALIZED_NAME_REQUEST_OPTIONS)
  private RequestOptions requestOptions;

  public static final String SERIALIZED_NAME_SORT_OPTIONS = "sortOptions";
  @SerializedName(SERIALIZED_NAME_SORT_OPTIONS)
  private SortOptions sortOptions;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public SearchRequest() {
  }

  public SearchRequest contextAttributes(List<ContextAttribute> contextAttributes) {
    this.contextAttributes = contextAttributes;
    return this;
  }

  public SearchRequest addContextAttributesItem(ContextAttribute contextAttributesItem) {
    if (this.contextAttributes == null) {
      this.contextAttributes = new ArrayList<>();
    }
    this.contextAttributes.add(contextAttributesItem);
    return this;
  }

  /**
   * Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.
   * @return contextAttributes
   */
  @javax.annotation.Nullable
  public List<ContextAttribute> getContextAttributes() {
    return contextAttributes;
  }

  public void setContextAttributes(List<ContextAttribute> contextAttributes) {
    this.contextAttributes = contextAttributes;
  }


  public SearchRequest dataSourceRestrictions(List<DataSourceRestriction> dataSourceRestrictions) {
    this.dataSourceRestrictions = dataSourceRestrictions;
    return this;
  }

  public SearchRequest addDataSourceRestrictionsItem(DataSourceRestriction dataSourceRestrictionsItem) {
    if (this.dataSourceRestrictions == null) {
      this.dataSourceRestrictions = new ArrayList<>();
    }
    this.dataSourceRestrictions.add(dataSourceRestrictionsItem);
    return this;
  }

  /**
   * The sources to use for querying. If not specified, all data sources from the current search application are used.
   * @return dataSourceRestrictions
   */
  @javax.annotation.Nullable
  public List<DataSourceRestriction> getDataSourceRestrictions() {
    return dataSourceRestrictions;
  }

  public void setDataSourceRestrictions(List<DataSourceRestriction> dataSourceRestrictions) {
    this.dataSourceRestrictions = dataSourceRestrictions;
  }


  public SearchRequest facetOptions(List<FacetOptions> facetOptions) {
    this.facetOptions = facetOptions;
    return this;
  }

  public SearchRequest addFacetOptionsItem(FacetOptions facetOptionsItem) {
    if (this.facetOptions == null) {
      this.facetOptions = new ArrayList<>();
    }
    this.facetOptions.add(facetOptionsItem);
    return this;
  }

  /**
   * Get facetOptions
   * @return facetOptions
   */
  @javax.annotation.Nullable
  public List<FacetOptions> getFacetOptions() {
    return facetOptions;
  }

  public void setFacetOptions(List<FacetOptions> facetOptions) {
    this.facetOptions = facetOptions;
  }


  public SearchRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public SearchRequest query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public SearchRequest queryInterpretationOptions(QueryInterpretationOptions queryInterpretationOptions) {
    this.queryInterpretationOptions = queryInterpretationOptions;
    return this;
  }

  /**
   * Get queryInterpretationOptions
   * @return queryInterpretationOptions
   */
  @javax.annotation.Nullable
  public QueryInterpretationOptions getQueryInterpretationOptions() {
    return queryInterpretationOptions;
  }

  public void setQueryInterpretationOptions(QueryInterpretationOptions queryInterpretationOptions) {
    this.queryInterpretationOptions = queryInterpretationOptions;
  }


  public SearchRequest requestOptions(RequestOptions requestOptions) {
    this.requestOptions = requestOptions;
    return this;
  }

  /**
   * Get requestOptions
   * @return requestOptions
   */
  @javax.annotation.Nullable
  public RequestOptions getRequestOptions() {
    return requestOptions;
  }

  public void setRequestOptions(RequestOptions requestOptions) {
    this.requestOptions = requestOptions;
  }


  public SearchRequest sortOptions(SortOptions sortOptions) {
    this.sortOptions = sortOptions;
    return this;
  }

  /**
   * Get sortOptions
   * @return sortOptions
   */
  @javax.annotation.Nullable
  public SortOptions getSortOptions() {
    return sortOptions;
  }

  public void setSortOptions(SortOptions sortOptions) {
    this.sortOptions = sortOptions;
  }


  public SearchRequest start(Integer start) {
    this.start = start;
    return this;
  }

  /**
   * Starting index of the results.
   * @return start
   */
  @javax.annotation.Nullable
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.contextAttributes, searchRequest.contextAttributes) &&
        Objects.equals(this.dataSourceRestrictions, searchRequest.dataSourceRestrictions) &&
        Objects.equals(this.facetOptions, searchRequest.facetOptions) &&
        Objects.equals(this.pageSize, searchRequest.pageSize) &&
        Objects.equals(this.query, searchRequest.query) &&
        Objects.equals(this.queryInterpretationOptions, searchRequest.queryInterpretationOptions) &&
        Objects.equals(this.requestOptions, searchRequest.requestOptions) &&
        Objects.equals(this.sortOptions, searchRequest.sortOptions) &&
        Objects.equals(this.start, searchRequest.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextAttributes, dataSourceRestrictions, facetOptions, pageSize, query, queryInterpretationOptions, requestOptions, sortOptions, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");
    sb.append("    contextAttributes: ").append(toIndentedString(contextAttributes)).append("\n");
    sb.append("    dataSourceRestrictions: ").append(toIndentedString(dataSourceRestrictions)).append("\n");
    sb.append("    facetOptions: ").append(toIndentedString(facetOptions)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryInterpretationOptions: ").append(toIndentedString(queryInterpretationOptions)).append("\n");
    sb.append("    requestOptions: ").append(toIndentedString(requestOptions)).append("\n");
    sb.append("    sortOptions: ").append(toIndentedString(sortOptions)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contextAttributes");
    openapiFields.add("dataSourceRestrictions");
    openapiFields.add("facetOptions");
    openapiFields.add("pageSize");
    openapiFields.add("query");
    openapiFields.add("queryInterpretationOptions");
    openapiFields.add("requestOptions");
    openapiFields.add("sortOptions");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchRequest is not found in the empty JSON string", SearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contextAttributes") != null && !jsonObj.get("contextAttributes").isJsonNull()) {
        JsonArray jsonArraycontextAttributes = jsonObj.getAsJsonArray("contextAttributes");
        if (jsonArraycontextAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contextAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contextAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("contextAttributes").toString()));
          }

          // validate the optional field `contextAttributes` (array)
          for (int i = 0; i < jsonArraycontextAttributes.size(); i++) {
            ContextAttribute.validateJsonElement(jsonArraycontextAttributes.get(i));
          };
        }
      }
      if (jsonObj.get("dataSourceRestrictions") != null && !jsonObj.get("dataSourceRestrictions").isJsonNull()) {
        JsonArray jsonArraydataSourceRestrictions = jsonObj.getAsJsonArray("dataSourceRestrictions");
        if (jsonArraydataSourceRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSourceRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSourceRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("dataSourceRestrictions").toString()));
          }

          // validate the optional field `dataSourceRestrictions` (array)
          for (int i = 0; i < jsonArraydataSourceRestrictions.size(); i++) {
            DataSourceRestriction.validateJsonElement(jsonArraydataSourceRestrictions.get(i));
          };
        }
      }
      if (jsonObj.get("facetOptions") != null && !jsonObj.get("facetOptions").isJsonNull()) {
        JsonArray jsonArrayfacetOptions = jsonObj.getAsJsonArray("facetOptions");
        if (jsonArrayfacetOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facetOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facetOptions` to be an array in the JSON string but got `%s`", jsonObj.get("facetOptions").toString()));
          }

          // validate the optional field `facetOptions` (array)
          for (int i = 0; i < jsonArrayfacetOptions.size(); i++) {
            FacetOptions.validateJsonElement(jsonArrayfacetOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // validate the optional field `queryInterpretationOptions`
      if (jsonObj.get("queryInterpretationOptions") != null && !jsonObj.get("queryInterpretationOptions").isJsonNull()) {
        QueryInterpretationOptions.validateJsonElement(jsonObj.get("queryInterpretationOptions"));
      }
      // validate the optional field `requestOptions`
      if (jsonObj.get("requestOptions") != null && !jsonObj.get("requestOptions").isJsonNull()) {
        RequestOptions.validateJsonElement(jsonObj.get("requestOptions"));
      }
      // validate the optional field `sortOptions`
      if (jsonObj.get("sortOptions") != null && !jsonObj.get("sortOptions").isJsonNull()) {
        SortOptions.validateJsonElement(jsonObj.get("sortOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchRequest>() {
           @Override
           public void write(JsonWriter out, SearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchRequest
   * @throws IOException if the JSON string is invalid with respect to SearchRequest
   */
  public static SearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchRequest.class);
  }

  /**
   * Convert an instance of SearchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

