/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FilterOptions;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Restriction on Datasource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceRestriction {
  public static final String SERIALIZED_NAME_FILTER_OPTIONS = "filterOptions";
  @SerializedName(SERIALIZED_NAME_FILTER_OPTIONS)
  private List<FilterOptions> filterOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public DataSourceRestriction() {
  }

  public DataSourceRestriction filterOptions(List<FilterOptions> filterOptions) {
    this.filterOptions = filterOptions;
    return this;
  }

  public DataSourceRestriction addFilterOptionsItem(FilterOptions filterOptionsItem) {
    if (this.filterOptions == null) {
      this.filterOptions = new ArrayList<>();
    }
    this.filterOptions.add(filterOptionsItem);
    return this;
  }

  /**
   * Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \&quot;objecttype\&quot;, \&quot;type\&quot; and \&quot;mimetype\&quot;. For now, schema specific filters cannot be used to filter suggestions.
   * @return filterOptions
   */
  @javax.annotation.Nullable
  public List<FilterOptions> getFilterOptions() {
    return filterOptions;
  }

  public void setFilterOptions(List<FilterOptions> filterOptions) {
    this.filterOptions = filterOptions;
  }


  public DataSourceRestriction source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceRestriction dataSourceRestriction = (DataSourceRestriction) o;
    return Objects.equals(this.filterOptions, dataSourceRestriction.filterOptions) &&
        Objects.equals(this.source, dataSourceRestriction.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterOptions, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceRestriction {\n");
    sb.append("    filterOptions: ").append(toIndentedString(filterOptions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterOptions");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceRestriction is not found in the empty JSON string", DataSourceRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filterOptions") != null && !jsonObj.get("filterOptions").isJsonNull()) {
        JsonArray jsonArrayfilterOptions = jsonObj.getAsJsonArray("filterOptions");
        if (jsonArrayfilterOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterOptions` to be an array in the JSON string but got `%s`", jsonObj.get("filterOptions").toString()));
          }

          // validate the optional field `filterOptions` (array)
          for (int i = 0; i < jsonArrayfilterOptions.size(); i++) {
            FilterOptions.validateJsonElement(jsonArrayfilterOptions.get(i));
          };
        }
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceRestriction>() {
           @Override
           public void write(JsonWriter out, DataSourceRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceRestriction
   * @throws IOException if the JSON string is invalid with respect to DataSourceRestriction
   */
  public static DataSourceRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceRestriction.class);
  }

  /**
   * Convert an instance of DataSourceRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

