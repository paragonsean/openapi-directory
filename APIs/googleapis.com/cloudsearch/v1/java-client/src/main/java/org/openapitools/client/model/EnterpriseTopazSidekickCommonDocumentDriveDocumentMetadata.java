/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Meta data for drive documents.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata {
  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_LAST_COMMENT_TIME_MS = "lastCommentTimeMs";
  @SerializedName(SERIALIZED_NAME_LAST_COMMENT_TIME_MS)
  private String lastCommentTimeMs;

  public static final String SERIALIZED_NAME_LAST_EDIT_TIME_MS = "lastEditTimeMs";
  @SerializedName(SERIALIZED_NAME_LAST_EDIT_TIME_MS)
  private String lastEditTimeMs;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME_MILLIS = "lastModificationTimeMillis";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME_MILLIS)
  private String lastModificationTimeMillis;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_MS = "lastUpdatedTimeMs";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_MS)
  private String lastUpdatedTimeMs;

  public static final String SERIALIZED_NAME_LAST_VIEW_TIME_MS = "lastViewTimeMs";
  @SerializedName(SERIALIZED_NAME_LAST_VIEW_TIME_MS)
  private String lastViewTimeMs;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private EnterpriseTopazSidekickCommonPerson owner;

  /**
   * ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    UNKNOWN_DOCUMENT_SCOPE("UNKNOWN_DOCUMENT_SCOPE"),
    
    LIMITED("LIMITED"),
    
    DASHER_DOMAIN_WITH_LINK("DASHER_DOMAIN_WITH_LINK"),
    
    DASHER_DOMAIN("DASHER_DOMAIN"),
    
    PUBLIC_WITH_LINK("PUBLIC_WITH_LINK"),
    
    PUBLIC("PUBLIC"),
    
    TEAM_DRIVE("TEAM_DRIVE");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata() {
  }

  @Deprecated
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id.
   * @return documentId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  @Deprecated
  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it&#39;s shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata lastCommentTimeMs(String lastCommentTimeMs) {
    this.lastCommentTimeMs = lastCommentTimeMs;
    return this;
  }

  /**
   * Timestamp of the most recent comment added to the document in milliseconds since epoch.
   * @return lastCommentTimeMs
   */
  @javax.annotation.Nullable
  public String getLastCommentTimeMs() {
    return lastCommentTimeMs;
  }

  public void setLastCommentTimeMs(String lastCommentTimeMs) {
    this.lastCommentTimeMs = lastCommentTimeMs;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata lastEditTimeMs(String lastEditTimeMs) {
    this.lastEditTimeMs = lastEditTimeMs;
    return this;
  }

  /**
   * Timestamp of the most recent edit from the current user in milliseconds since epoch.
   * @return lastEditTimeMs
   */
  @javax.annotation.Nullable
  public String getLastEditTimeMs() {
    return lastEditTimeMs;
  }

  public void setLastEditTimeMs(String lastEditTimeMs) {
    this.lastEditTimeMs = lastEditTimeMs;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata lastModificationTimeMillis(String lastModificationTimeMillis) {
    this.lastModificationTimeMillis = lastModificationTimeMillis;
    return this;
  }

  /**
   * Last modification time of the document (independent of the user that modified it).
   * @return lastModificationTimeMillis
   */
  @javax.annotation.Nullable
  public String getLastModificationTimeMillis() {
    return lastModificationTimeMillis;
  }

  public void setLastModificationTimeMillis(String lastModificationTimeMillis) {
    this.lastModificationTimeMillis = lastModificationTimeMillis;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata lastUpdatedTimeMs(String lastUpdatedTimeMs) {
    this.lastUpdatedTimeMs = lastUpdatedTimeMs;
    return this;
  }

  /**
   * Timestamp of the last updated time of the document in milliseconds since epoch.
   * @return lastUpdatedTimeMs
   */
  @javax.annotation.Nullable
  public String getLastUpdatedTimeMs() {
    return lastUpdatedTimeMs;
  }

  public void setLastUpdatedTimeMs(String lastUpdatedTimeMs) {
    this.lastUpdatedTimeMs = lastUpdatedTimeMs;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata lastViewTimeMs(String lastViewTimeMs) {
    this.lastViewTimeMs = lastViewTimeMs;
    return this;
  }

  /**
   * Timestamp of the most recent view from the current user in milliseconds since epoch.
   * @return lastViewTimeMs
   */
  @javax.annotation.Nullable
  public String getLastViewTimeMs() {
    return lastViewTimeMs;
  }

  public void setLastViewTimeMs(String lastViewTimeMs) {
    this.lastViewTimeMs = lastViewTimeMs;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata owner(EnterpriseTopazSidekickCommonPerson owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonPerson getOwner() {
    return owner;
  }

  public void setOwner(EnterpriseTopazSidekickCommonPerson owner) {
    this.owner = owner;
  }


  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).
   * @return scope
   */
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata = (EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata) o;
    return Objects.equals(this.documentId, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.documentId) &&
        Objects.equals(this.isPrivate, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.isPrivate) &&
        Objects.equals(this.lastCommentTimeMs, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.lastCommentTimeMs) &&
        Objects.equals(this.lastEditTimeMs, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.lastEditTimeMs) &&
        Objects.equals(this.lastModificationTimeMillis, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.lastModificationTimeMillis) &&
        Objects.equals(this.lastUpdatedTimeMs, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.lastUpdatedTimeMs) &&
        Objects.equals(this.lastViewTimeMs, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.lastViewTimeMs) &&
        Objects.equals(this.owner, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.owner) &&
        Objects.equals(this.scope, enterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, isPrivate, lastCommentTimeMs, lastEditTimeMs, lastModificationTimeMillis, lastUpdatedTimeMs, lastViewTimeMs, owner, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata {\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    lastCommentTimeMs: ").append(toIndentedString(lastCommentTimeMs)).append("\n");
    sb.append("    lastEditTimeMs: ").append(toIndentedString(lastEditTimeMs)).append("\n");
    sb.append("    lastModificationTimeMillis: ").append(toIndentedString(lastModificationTimeMillis)).append("\n");
    sb.append("    lastUpdatedTimeMs: ").append(toIndentedString(lastUpdatedTimeMs)).append("\n");
    sb.append("    lastViewTimeMs: ").append(toIndentedString(lastViewTimeMs)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentId");
    openapiFields.add("isPrivate");
    openapiFields.add("lastCommentTimeMs");
    openapiFields.add("lastEditTimeMs");
    openapiFields.add("lastModificationTimeMillis");
    openapiFields.add("lastUpdatedTimeMs");
    openapiFields.add("lastViewTimeMs");
    openapiFields.add("owner");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata is not found in the empty JSON string", EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("lastCommentTimeMs") != null && !jsonObj.get("lastCommentTimeMs").isJsonNull()) && !jsonObj.get("lastCommentTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCommentTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCommentTimeMs").toString()));
      }
      if ((jsonObj.get("lastEditTimeMs") != null && !jsonObj.get("lastEditTimeMs").isJsonNull()) && !jsonObj.get("lastEditTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastEditTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastEditTimeMs").toString()));
      }
      if ((jsonObj.get("lastModificationTimeMillis") != null && !jsonObj.get("lastModificationTimeMillis").isJsonNull()) && !jsonObj.get("lastModificationTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModificationTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModificationTimeMillis").toString()));
      }
      if ((jsonObj.get("lastUpdatedTimeMs") != null && !jsonObj.get("lastUpdatedTimeMs").isJsonNull()) && !jsonObj.get("lastUpdatedTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTimeMs").toString()));
      }
      if ((jsonObj.get("lastViewTimeMs") != null && !jsonObj.get("lastViewTimeMs").isJsonNull()) && !jsonObj.get("lastViewTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastViewTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastViewTimeMs").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        EnterpriseTopazSidekickCommonPerson.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        ScopeEnum.validateJsonElement(jsonObj.get("scope"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
   */
  public static EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

