/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to interpret user query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryInterpretationOptions {
  public static final String SERIALIZED_NAME_DISABLE_NL_INTERPRETATION = "disableNlInterpretation";
  @SerializedName(SERIALIZED_NAME_DISABLE_NL_INTERPRETATION)
  private Boolean disableNlInterpretation;

  public static final String SERIALIZED_NAME_DISABLE_SUPPLEMENTAL_RESULTS = "disableSupplementalResults";
  @SerializedName(SERIALIZED_NAME_DISABLE_SUPPLEMENTAL_RESULTS)
  private Boolean disableSupplementalResults;

  public static final String SERIALIZED_NAME_ENABLE_VERBATIM_MODE = "enableVerbatimMode";
  @SerializedName(SERIALIZED_NAME_ENABLE_VERBATIM_MODE)
  private Boolean enableVerbatimMode;

  public QueryInterpretationOptions() {
  }

  public QueryInterpretationOptions disableNlInterpretation(Boolean disableNlInterpretation) {
    this.disableNlInterpretation = disableNlInterpretation;
    return this;
  }

  /**
   * Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to predefined datasources.
   * @return disableNlInterpretation
   */
  @javax.annotation.Nullable
  public Boolean getDisableNlInterpretation() {
    return disableNlInterpretation;
  }

  public void setDisableNlInterpretation(Boolean disableNlInterpretation) {
    this.disableNlInterpretation = disableNlInterpretation;
  }


  public QueryInterpretationOptions disableSupplementalResults(Boolean disableSupplementalResults) {
    this.disableSupplementalResults = disableSupplementalResults;
    return this;
  }

  /**
   * Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True.
   * @return disableSupplementalResults
   */
  @javax.annotation.Nullable
  public Boolean getDisableSupplementalResults() {
    return disableSupplementalResults;
  }

  public void setDisableSupplementalResults(Boolean disableSupplementalResults) {
    this.disableSupplementalResults = disableSupplementalResults;
  }


  public QueryInterpretationOptions enableVerbatimMode(Boolean enableVerbatimMode) {
    this.enableVerbatimMode = enableVerbatimMode;
    return this;
  }

  /**
   * Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom ones. Nl interpretation will be disabled if either one of the two flags is true.
   * @return enableVerbatimMode
   */
  @javax.annotation.Nullable
  public Boolean getEnableVerbatimMode() {
    return enableVerbatimMode;
  }

  public void setEnableVerbatimMode(Boolean enableVerbatimMode) {
    this.enableVerbatimMode = enableVerbatimMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInterpretationOptions queryInterpretationOptions = (QueryInterpretationOptions) o;
    return Objects.equals(this.disableNlInterpretation, queryInterpretationOptions.disableNlInterpretation) &&
        Objects.equals(this.disableSupplementalResults, queryInterpretationOptions.disableSupplementalResults) &&
        Objects.equals(this.enableVerbatimMode, queryInterpretationOptions.enableVerbatimMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableNlInterpretation, disableSupplementalResults, enableVerbatimMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInterpretationOptions {\n");
    sb.append("    disableNlInterpretation: ").append(toIndentedString(disableNlInterpretation)).append("\n");
    sb.append("    disableSupplementalResults: ").append(toIndentedString(disableSupplementalResults)).append("\n");
    sb.append("    enableVerbatimMode: ").append(toIndentedString(enableVerbatimMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableNlInterpretation");
    openapiFields.add("disableSupplementalResults");
    openapiFields.add("enableVerbatimMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInterpretationOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInterpretationOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInterpretationOptions is not found in the empty JSON string", QueryInterpretationOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInterpretationOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInterpretationOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInterpretationOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInterpretationOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInterpretationOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInterpretationOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInterpretationOptions>() {
           @Override
           public void write(JsonWriter out, QueryInterpretationOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInterpretationOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInterpretationOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInterpretationOptions
   * @throws IOException if the JSON string is invalid with respect to QueryInterpretationOptions
   */
  public static QueryInterpretationOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInterpretationOptions.class);
  }

  /**
   * Convert an instance of QueryInterpretationOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

