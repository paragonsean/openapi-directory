/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickAnswerAnswerList;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonPerson;
import org.openapitools.client.model.EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo;
import org.openapitools.client.model.EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader;
import org.openapitools.client.model.SafeHtmlProto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An answer card for a single person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard {
  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private List<SafeHtmlProto> answer = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANSWER_TEXT = "answerText";
  @SerializedName(SERIALIZED_NAME_ANSWER_TEXT)
  private EnterpriseTopazSidekickAnswerAnswerList answerText;

  public static final String SERIALIZED_NAME_DISAMBIGUATION_INFO = "disambiguationInfo";
  @SerializedName(SERIALIZED_NAME_DISAMBIGUATION_INFO)
  private EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo disambiguationInfo;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader header;

  /**
   * The response status.
   */
  @JsonAdapter(ResponseStatusEnum.Adapter.class)
  public enum ResponseStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    SUCCESS("SUCCESS"),
    
    MISSING_PERSON("MISSING_PERSON"),
    
    MISSING_DATA("MISSING_DATA");

    private String value;

    ResponseStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseStatusEnum fromValue(String value) {
      for (ResponseStatusEnum b : ResponseStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private ResponseStatusEnum responseStatus;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private EnterpriseTopazSidekickCommonPerson subject;

  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard() {
  }

  @Deprecated
  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard answer(List<SafeHtmlProto> answer) {
    this.answer = answer;
    return this;
  }

  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard addAnswerItem(SafeHtmlProto answerItem) {
    if (this.answer == null) {
      this.answer = new ArrayList<>();
    }
    this.answer.add(answerItem);
    return this;
  }

  /**
   * List of answers.
   * @return answer
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<SafeHtmlProto> getAnswer() {
    return answer;
  }

  @Deprecated
  public void setAnswer(List<SafeHtmlProto> answer) {
    this.answer = answer;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard answerText(EnterpriseTopazSidekickAnswerAnswerList answerText) {
    this.answerText = answerText;
    return this;
  }

  /**
   * Get answerText
   * @return answerText
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickAnswerAnswerList getAnswerText() {
    return answerText;
  }

  public void setAnswerText(EnterpriseTopazSidekickAnswerAnswerList answerText) {
    this.answerText = answerText;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard disambiguationInfo(EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo disambiguationInfo) {
    this.disambiguationInfo = disambiguationInfo;
    return this;
  }

  /**
   * Get disambiguationInfo
   * @return disambiguationInfo
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo getDisambiguationInfo() {
    return disambiguationInfo;
  }

  public void setDisambiguationInfo(EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo disambiguationInfo) {
    this.disambiguationInfo = disambiguationInfo;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard header(EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader getHeader() {
    return header;
  }

  public void setHeader(EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader header) {
    this.header = header;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard responseStatus(ResponseStatusEnum responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * The response status.
   * @return responseStatus
   */
  @javax.annotation.Nullable
  public ResponseStatusEnum getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(ResponseStatusEnum responseStatus) {
    this.responseStatus = responseStatus;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Localized user friendly message to display to the user in the case of missing data or an error.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard subject(EnterpriseTopazSidekickCommonPerson subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonPerson getSubject() {
    return subject;
  }

  public void setSubject(EnterpriseTopazSidekickCommonPerson subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard enterpriseTopazSidekickPeopleAnswerPersonAnswerCard = (EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard) o;
    return Objects.equals(this.answer, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.answer) &&
        Objects.equals(this.answerText, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.answerText) &&
        Objects.equals(this.disambiguationInfo, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.disambiguationInfo) &&
        Objects.equals(this.header, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.header) &&
        Objects.equals(this.responseStatus, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.responseStatus) &&
        Objects.equals(this.statusMessage, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.statusMessage) &&
        Objects.equals(this.subject, enterpriseTopazSidekickPeopleAnswerPersonAnswerCard.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, answerText, disambiguationInfo, header, responseStatus, statusMessage, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    answerText: ").append(toIndentedString(answerText)).append("\n");
    sb.append("    disambiguationInfo: ").append(toIndentedString(disambiguationInfo)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answer");
    openapiFields.add("answerText");
    openapiFields.add("disambiguationInfo");
    openapiFields.add("header");
    openapiFields.add("responseStatus");
    openapiFields.add("statusMessage");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard is not found in the empty JSON string", EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) {
        JsonArray jsonArrayanswer = jsonObj.getAsJsonArray("answer");
        if (jsonArrayanswer != null) {
          // ensure the json data is an array
          if (!jsonObj.get("answer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `answer` to be an array in the JSON string but got `%s`", jsonObj.get("answer").toString()));
          }

          // validate the optional field `answer` (array)
          for (int i = 0; i < jsonArrayanswer.size(); i++) {
            SafeHtmlProto.validateJsonElement(jsonArrayanswer.get(i));
          };
        }
      }
      // validate the optional field `answerText`
      if (jsonObj.get("answerText") != null && !jsonObj.get("answerText").isJsonNull()) {
        EnterpriseTopazSidekickAnswerAnswerList.validateJsonElement(jsonObj.get("answerText"));
      }
      // validate the optional field `disambiguationInfo`
      if (jsonObj.get("disambiguationInfo") != null && !jsonObj.get("disambiguationInfo").isJsonNull()) {
        EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.validateJsonElement(jsonObj.get("disambiguationInfo"));
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        EnterpriseTopazSidekickPeopleAnswerPeopleAnswerCardHeader.validateJsonElement(jsonObj.get("header"));
      }
      if ((jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) && !jsonObj.get("responseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseStatus").toString()));
      }
      // validate the optional field `responseStatus`
      if (jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) {
        ResponseStatusEnum.validateJsonElement(jsonObj.get("responseStatus"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        EnterpriseTopazSidekickCommonPerson.validateJsonElement(jsonObj.get("subject"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard
   */
  public static EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

