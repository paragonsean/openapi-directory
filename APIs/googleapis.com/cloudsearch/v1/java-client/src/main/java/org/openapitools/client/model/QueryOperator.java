/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a operator that can be used in a Search/Suggest request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryOperator {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENUM_VALUES = "enumValues";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUES)
  private List<String> enumValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_GREATER_THAN_OPERATOR_NAME = "greaterThanOperatorName";
  @SerializedName(SERIALIZED_NAME_GREATER_THAN_OPERATOR_NAME)
  private String greaterThanOperatorName;

  public static final String SERIALIZED_NAME_IS_FACETABLE = "isFacetable";
  @SerializedName(SERIALIZED_NAME_IS_FACETABLE)
  private Boolean isFacetable;

  public static final String SERIALIZED_NAME_IS_REPEATABLE = "isRepeatable";
  @SerializedName(SERIALIZED_NAME_IS_REPEATABLE)
  private Boolean isRepeatable;

  public static final String SERIALIZED_NAME_IS_RETURNABLE = "isReturnable";
  @SerializedName(SERIALIZED_NAME_IS_RETURNABLE)
  private Boolean isReturnable;

  public static final String SERIALIZED_NAME_IS_SORTABLE = "isSortable";
  @SerializedName(SERIALIZED_NAME_IS_SORTABLE)
  private Boolean isSortable;

  public static final String SERIALIZED_NAME_IS_SUGGESTABLE = "isSuggestable";
  @SerializedName(SERIALIZED_NAME_IS_SUGGESTABLE)
  private Boolean isSuggestable;

  public static final String SERIALIZED_NAME_LESS_THAN_OPERATOR_NAME = "lessThanOperatorName";
  @SerializedName(SERIALIZED_NAME_LESS_THAN_OPERATOR_NAME)
  private String lessThanOperatorName;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_OPERATOR_NAME = "operatorName";
  @SerializedName(SERIALIZED_NAME_OPERATOR_NAME)
  private String operatorName;

  /**
   * The type of the operator.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("UNKNOWN"),
    
    INTEGER("INTEGER"),
    
    DOUBLE("DOUBLE"),
    
    TIMESTAMP("TIMESTAMP"),
    
    BOOLEAN("BOOLEAN"),
    
    ENUM("ENUM"),
    
    DATE("DATE"),
    
    TEXT("TEXT"),
    
    HTML("HTML");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public QueryOperator() {
  }

  public QueryOperator displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the operator
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public QueryOperator enumValues(List<String> enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  public QueryOperator addEnumValuesItem(String enumValuesItem) {
    if (this.enumValues == null) {
      this.enumValues = new ArrayList<>();
    }
    this.enumValues.add(enumValuesItem);
    return this;
  }

  /**
   * Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
   * @return enumValues
   */
  @javax.annotation.Nullable
  public List<String> getEnumValues() {
    return enumValues;
  }

  public void setEnumValues(List<String> enumValues) {
    this.enumValues = enumValues;
  }


  public QueryOperator greaterThanOperatorName(String greaterThanOperatorName) {
    this.greaterThanOperatorName = greaterThanOperatorName;
    return this;
  }

  /**
   * Indicates the operator name that can be used to isolate the property using the greater-than operator.
   * @return greaterThanOperatorName
   */
  @javax.annotation.Nullable
  public String getGreaterThanOperatorName() {
    return greaterThanOperatorName;
  }

  public void setGreaterThanOperatorName(String greaterThanOperatorName) {
    this.greaterThanOperatorName = greaterThanOperatorName;
  }


  public QueryOperator isFacetable(Boolean isFacetable) {
    this.isFacetable = isFacetable;
    return this;
  }

  /**
   * Can this operator be used to get facets.
   * @return isFacetable
   */
  @javax.annotation.Nullable
  public Boolean getIsFacetable() {
    return isFacetable;
  }

  public void setIsFacetable(Boolean isFacetable) {
    this.isFacetable = isFacetable;
  }


  public QueryOperator isRepeatable(Boolean isRepeatable) {
    this.isRepeatable = isRepeatable;
    return this;
  }

  /**
   * Indicates if multiple values can be set for this property.
   * @return isRepeatable
   */
  @javax.annotation.Nullable
  public Boolean getIsRepeatable() {
    return isRepeatable;
  }

  public void setIsRepeatable(Boolean isRepeatable) {
    this.isRepeatable = isRepeatable;
  }


  public QueryOperator isReturnable(Boolean isReturnable) {
    this.isReturnable = isReturnable;
    return this;
  }

  /**
   * Will the property associated with this facet be returned as part of search results.
   * @return isReturnable
   */
  @javax.annotation.Nullable
  public Boolean getIsReturnable() {
    return isReturnable;
  }

  public void setIsReturnable(Boolean isReturnable) {
    this.isReturnable = isReturnable;
  }


  public QueryOperator isSortable(Boolean isSortable) {
    this.isSortable = isSortable;
    return this;
  }

  /**
   * Can this operator be used to sort results.
   * @return isSortable
   */
  @javax.annotation.Nullable
  public Boolean getIsSortable() {
    return isSortable;
  }

  public void setIsSortable(Boolean isSortable) {
    this.isSortable = isSortable;
  }


  public QueryOperator isSuggestable(Boolean isSuggestable) {
    this.isSuggestable = isSuggestable;
    return this;
  }

  /**
   * Can get suggestions for this field.
   * @return isSuggestable
   */
  @javax.annotation.Nullable
  public Boolean getIsSuggestable() {
    return isSuggestable;
  }

  public void setIsSuggestable(Boolean isSuggestable) {
    this.isSuggestable = isSuggestable;
  }


  public QueryOperator lessThanOperatorName(String lessThanOperatorName) {
    this.lessThanOperatorName = lessThanOperatorName;
    return this;
  }

  /**
   * Indicates the operator name that can be used to isolate the property using the less-than operator.
   * @return lessThanOperatorName
   */
  @javax.annotation.Nullable
  public String getLessThanOperatorName() {
    return lessThanOperatorName;
  }

  public void setLessThanOperatorName(String lessThanOperatorName) {
    this.lessThanOperatorName = lessThanOperatorName;
  }


  public QueryOperator objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public QueryOperator operatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * The name of the operator.
   * @return operatorName
   */
  @javax.annotation.Nullable
  public String getOperatorName() {
    return operatorName;
  }

  public void setOperatorName(String operatorName) {
    this.operatorName = operatorName;
  }


  public QueryOperator type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the operator.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryOperator queryOperator = (QueryOperator) o;
    return Objects.equals(this.displayName, queryOperator.displayName) &&
        Objects.equals(this.enumValues, queryOperator.enumValues) &&
        Objects.equals(this.greaterThanOperatorName, queryOperator.greaterThanOperatorName) &&
        Objects.equals(this.isFacetable, queryOperator.isFacetable) &&
        Objects.equals(this.isRepeatable, queryOperator.isRepeatable) &&
        Objects.equals(this.isReturnable, queryOperator.isReturnable) &&
        Objects.equals(this.isSortable, queryOperator.isSortable) &&
        Objects.equals(this.isSuggestable, queryOperator.isSuggestable) &&
        Objects.equals(this.lessThanOperatorName, queryOperator.lessThanOperatorName) &&
        Objects.equals(this.objectType, queryOperator.objectType) &&
        Objects.equals(this.operatorName, queryOperator.operatorName) &&
        Objects.equals(this.type, queryOperator.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, enumValues, greaterThanOperatorName, isFacetable, isRepeatable, isReturnable, isSortable, isSuggestable, lessThanOperatorName, objectType, operatorName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryOperator {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enumValues: ").append(toIndentedString(enumValues)).append("\n");
    sb.append("    greaterThanOperatorName: ").append(toIndentedString(greaterThanOperatorName)).append("\n");
    sb.append("    isFacetable: ").append(toIndentedString(isFacetable)).append("\n");
    sb.append("    isRepeatable: ").append(toIndentedString(isRepeatable)).append("\n");
    sb.append("    isReturnable: ").append(toIndentedString(isReturnable)).append("\n");
    sb.append("    isSortable: ").append(toIndentedString(isSortable)).append("\n");
    sb.append("    isSuggestable: ").append(toIndentedString(isSuggestable)).append("\n");
    sb.append("    lessThanOperatorName: ").append(toIndentedString(lessThanOperatorName)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    operatorName: ").append(toIndentedString(operatorName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("enumValues");
    openapiFields.add("greaterThanOperatorName");
    openapiFields.add("isFacetable");
    openapiFields.add("isRepeatable");
    openapiFields.add("isReturnable");
    openapiFields.add("isSortable");
    openapiFields.add("isSuggestable");
    openapiFields.add("lessThanOperatorName");
    openapiFields.add("objectType");
    openapiFields.add("operatorName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryOperator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryOperator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryOperator is not found in the empty JSON string", QueryOperator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryOperator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryOperator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enumValues") != null && !jsonObj.get("enumValues").isJsonNull() && !jsonObj.get("enumValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumValues` to be an array in the JSON string but got `%s`", jsonObj.get("enumValues").toString()));
      }
      if ((jsonObj.get("greaterThanOperatorName") != null && !jsonObj.get("greaterThanOperatorName").isJsonNull()) && !jsonObj.get("greaterThanOperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greaterThanOperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greaterThanOperatorName").toString()));
      }
      if ((jsonObj.get("lessThanOperatorName") != null && !jsonObj.get("lessThanOperatorName").isJsonNull()) && !jsonObj.get("lessThanOperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lessThanOperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lessThanOperatorName").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("operatorName") != null && !jsonObj.get("operatorName").isJsonNull()) && !jsonObj.get("operatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatorName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryOperator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryOperator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryOperator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryOperator.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryOperator>() {
           @Override
           public void write(JsonWriter out, QueryOperator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryOperator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryOperator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryOperator
   * @throws IOException if the JSON string is invalid with respect to QueryOperator
   */
  public static QueryOperator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryOperator.class);
  }

  /**
   * Convert an instance of QueryOperator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

