/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickPerson;
import org.openapitools.client.model.EnterpriseTopazSidekickScheduledMeeting;
import org.openapitools.client.model.EnterpriseTopazSidekickTimeSlot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response to find meeting time among a set of people.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickFindMeetingTimeCardProto {
  public static final String SERIALIZED_NAME_COMMON_AVAILABLE_TIME_SLOTS = "commonAvailableTimeSlots";
  @SerializedName(SERIALIZED_NAME_COMMON_AVAILABLE_TIME_SLOTS)
  private List<EnterpriseTopazSidekickTimeSlot> commonAvailableTimeSlots = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITEES = "invitees";
  @SerializedName(SERIALIZED_NAME_INVITEES)
  private List<EnterpriseTopazSidekickPerson> invitees = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private EnterpriseTopazSidekickPerson requester;

  public static final String SERIALIZED_NAME_SCHEDULED_MEETING = "scheduledMeeting";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_MEETING)
  private EnterpriseTopazSidekickScheduledMeeting scheduledMeeting;

  public static final String SERIALIZED_NAME_SKIPPED_INVITEES = "skippedInvitees";
  @SerializedName(SERIALIZED_NAME_SKIPPED_INVITEES)
  private List<EnterpriseTopazSidekickPerson> skippedInvitees = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_BOUNDARIES = "timeBoundaries";
  @SerializedName(SERIALIZED_NAME_TIME_BOUNDARIES)
  private EnterpriseTopazSidekickTimeSlot timeBoundaries;

  public static final String SERIALIZED_NAME_TIMEZONE_ID = "timezoneId";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_ID)
  private String timezoneId;

  public EnterpriseTopazSidekickFindMeetingTimeCardProto() {
  }

  public EnterpriseTopazSidekickFindMeetingTimeCardProto commonAvailableTimeSlots(List<EnterpriseTopazSidekickTimeSlot> commonAvailableTimeSlots) {
    this.commonAvailableTimeSlots = commonAvailableTimeSlots;
    return this;
  }

  public EnterpriseTopazSidekickFindMeetingTimeCardProto addCommonAvailableTimeSlotsItem(EnterpriseTopazSidekickTimeSlot commonAvailableTimeSlotsItem) {
    if (this.commonAvailableTimeSlots == null) {
      this.commonAvailableTimeSlots = new ArrayList<>();
    }
    this.commonAvailableTimeSlots.add(commonAvailableTimeSlotsItem);
    return this;
  }

  /**
   * Slots when all attendees have availability.
   * @return commonAvailableTimeSlots
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickTimeSlot> getCommonAvailableTimeSlots() {
    return commonAvailableTimeSlots;
  }

  public void setCommonAvailableTimeSlots(List<EnterpriseTopazSidekickTimeSlot> commonAvailableTimeSlots) {
    this.commonAvailableTimeSlots = commonAvailableTimeSlots;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto invitees(List<EnterpriseTopazSidekickPerson> invitees) {
    this.invitees = invitees;
    return this;
  }

  public EnterpriseTopazSidekickFindMeetingTimeCardProto addInviteesItem(EnterpriseTopazSidekickPerson inviteesItem) {
    if (this.invitees == null) {
      this.invitees = new ArrayList<>();
    }
    this.invitees.add(inviteesItem);
    return this;
  }

  /**
   * Invitees to the event.
   * @return invitees
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickPerson> getInvitees() {
    return invitees;
  }

  public void setInvitees(List<EnterpriseTopazSidekickPerson> invitees) {
    this.invitees = invitees;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto requester(EnterpriseTopazSidekickPerson requester) {
    this.requester = requester;
    return this;
  }

  /**
   * Get requester
   * @return requester
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickPerson getRequester() {
    return requester;
  }

  public void setRequester(EnterpriseTopazSidekickPerson requester) {
    this.requester = requester;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto scheduledMeeting(EnterpriseTopazSidekickScheduledMeeting scheduledMeeting) {
    this.scheduledMeeting = scheduledMeeting;
    return this;
  }

  /**
   * Get scheduledMeeting
   * @return scheduledMeeting
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickScheduledMeeting getScheduledMeeting() {
    return scheduledMeeting;
  }

  public void setScheduledMeeting(EnterpriseTopazSidekickScheduledMeeting scheduledMeeting) {
    this.scheduledMeeting = scheduledMeeting;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto skippedInvitees(List<EnterpriseTopazSidekickPerson> skippedInvitees) {
    this.skippedInvitees = skippedInvitees;
    return this;
  }

  public EnterpriseTopazSidekickFindMeetingTimeCardProto addSkippedInviteesItem(EnterpriseTopazSidekickPerson skippedInviteesItem) {
    if (this.skippedInvitees == null) {
      this.skippedInvitees = new ArrayList<>();
    }
    this.skippedInvitees.add(skippedInviteesItem);
    return this;
  }

  /**
   * Invitees that have been skipped in the computation, most likely because they are groups.
   * @return skippedInvitees
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickPerson> getSkippedInvitees() {
    return skippedInvitees;
  }

  public void setSkippedInvitees(List<EnterpriseTopazSidekickPerson> skippedInvitees) {
    this.skippedInvitees = skippedInvitees;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto timeBoundaries(EnterpriseTopazSidekickTimeSlot timeBoundaries) {
    this.timeBoundaries = timeBoundaries;
    return this;
  }

  /**
   * Get timeBoundaries
   * @return timeBoundaries
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickTimeSlot getTimeBoundaries() {
    return timeBoundaries;
  }

  public void setTimeBoundaries(EnterpriseTopazSidekickTimeSlot timeBoundaries) {
    this.timeBoundaries = timeBoundaries;
  }


  public EnterpriseTopazSidekickFindMeetingTimeCardProto timezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
    return this;
  }

  /**
   * Timezone ID.
   * @return timezoneId
   */
  @javax.annotation.Nullable
  public String getTimezoneId() {
    return timezoneId;
  }

  public void setTimezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickFindMeetingTimeCardProto enterpriseTopazSidekickFindMeetingTimeCardProto = (EnterpriseTopazSidekickFindMeetingTimeCardProto) o;
    return Objects.equals(this.commonAvailableTimeSlots, enterpriseTopazSidekickFindMeetingTimeCardProto.commonAvailableTimeSlots) &&
        Objects.equals(this.invitees, enterpriseTopazSidekickFindMeetingTimeCardProto.invitees) &&
        Objects.equals(this.requester, enterpriseTopazSidekickFindMeetingTimeCardProto.requester) &&
        Objects.equals(this.scheduledMeeting, enterpriseTopazSidekickFindMeetingTimeCardProto.scheduledMeeting) &&
        Objects.equals(this.skippedInvitees, enterpriseTopazSidekickFindMeetingTimeCardProto.skippedInvitees) &&
        Objects.equals(this.timeBoundaries, enterpriseTopazSidekickFindMeetingTimeCardProto.timeBoundaries) &&
        Objects.equals(this.timezoneId, enterpriseTopazSidekickFindMeetingTimeCardProto.timezoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonAvailableTimeSlots, invitees, requester, scheduledMeeting, skippedInvitees, timeBoundaries, timezoneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickFindMeetingTimeCardProto {\n");
    sb.append("    commonAvailableTimeSlots: ").append(toIndentedString(commonAvailableTimeSlots)).append("\n");
    sb.append("    invitees: ").append(toIndentedString(invitees)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    scheduledMeeting: ").append(toIndentedString(scheduledMeeting)).append("\n");
    sb.append("    skippedInvitees: ").append(toIndentedString(skippedInvitees)).append("\n");
    sb.append("    timeBoundaries: ").append(toIndentedString(timeBoundaries)).append("\n");
    sb.append("    timezoneId: ").append(toIndentedString(timezoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonAvailableTimeSlots");
    openapiFields.add("invitees");
    openapiFields.add("requester");
    openapiFields.add("scheduledMeeting");
    openapiFields.add("skippedInvitees");
    openapiFields.add("timeBoundaries");
    openapiFields.add("timezoneId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickFindMeetingTimeCardProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickFindMeetingTimeCardProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickFindMeetingTimeCardProto is not found in the empty JSON string", EnterpriseTopazSidekickFindMeetingTimeCardProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickFindMeetingTimeCardProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickFindMeetingTimeCardProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commonAvailableTimeSlots") != null && !jsonObj.get("commonAvailableTimeSlots").isJsonNull()) {
        JsonArray jsonArraycommonAvailableTimeSlots = jsonObj.getAsJsonArray("commonAvailableTimeSlots");
        if (jsonArraycommonAvailableTimeSlots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonAvailableTimeSlots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonAvailableTimeSlots` to be an array in the JSON string but got `%s`", jsonObj.get("commonAvailableTimeSlots").toString()));
          }

          // validate the optional field `commonAvailableTimeSlots` (array)
          for (int i = 0; i < jsonArraycommonAvailableTimeSlots.size(); i++) {
            EnterpriseTopazSidekickTimeSlot.validateJsonElement(jsonArraycommonAvailableTimeSlots.get(i));
          };
        }
      }
      if (jsonObj.get("invitees") != null && !jsonObj.get("invitees").isJsonNull()) {
        JsonArray jsonArrayinvitees = jsonObj.getAsJsonArray("invitees");
        if (jsonArrayinvitees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invitees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invitees` to be an array in the JSON string but got `%s`", jsonObj.get("invitees").toString()));
          }

          // validate the optional field `invitees` (array)
          for (int i = 0; i < jsonArrayinvitees.size(); i++) {
            EnterpriseTopazSidekickPerson.validateJsonElement(jsonArrayinvitees.get(i));
          };
        }
      }
      // validate the optional field `requester`
      if (jsonObj.get("requester") != null && !jsonObj.get("requester").isJsonNull()) {
        EnterpriseTopazSidekickPerson.validateJsonElement(jsonObj.get("requester"));
      }
      // validate the optional field `scheduledMeeting`
      if (jsonObj.get("scheduledMeeting") != null && !jsonObj.get("scheduledMeeting").isJsonNull()) {
        EnterpriseTopazSidekickScheduledMeeting.validateJsonElement(jsonObj.get("scheduledMeeting"));
      }
      if (jsonObj.get("skippedInvitees") != null && !jsonObj.get("skippedInvitees").isJsonNull()) {
        JsonArray jsonArrayskippedInvitees = jsonObj.getAsJsonArray("skippedInvitees");
        if (jsonArrayskippedInvitees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skippedInvitees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skippedInvitees` to be an array in the JSON string but got `%s`", jsonObj.get("skippedInvitees").toString()));
          }

          // validate the optional field `skippedInvitees` (array)
          for (int i = 0; i < jsonArrayskippedInvitees.size(); i++) {
            EnterpriseTopazSidekickPerson.validateJsonElement(jsonArrayskippedInvitees.get(i));
          };
        }
      }
      // validate the optional field `timeBoundaries`
      if (jsonObj.get("timeBoundaries") != null && !jsonObj.get("timeBoundaries").isJsonNull()) {
        EnterpriseTopazSidekickTimeSlot.validateJsonElement(jsonObj.get("timeBoundaries"));
      }
      if ((jsonObj.get("timezoneId") != null && !jsonObj.get("timezoneId").isJsonNull()) && !jsonObj.get("timezoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickFindMeetingTimeCardProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickFindMeetingTimeCardProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickFindMeetingTimeCardProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickFindMeetingTimeCardProto.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickFindMeetingTimeCardProto>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickFindMeetingTimeCardProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickFindMeetingTimeCardProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickFindMeetingTimeCardProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickFindMeetingTimeCardProto
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickFindMeetingTimeCardProto
   */
  public static EnterpriseTopazSidekickFindMeetingTimeCardProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickFindMeetingTimeCardProto.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickFindMeetingTimeCardProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

