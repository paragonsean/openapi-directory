/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickAgendaEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conflicting meetings card proto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickConflictingEventsCardProto {
  public static final String SERIALIZED_NAME_CONFLICTING_EVENT = "conflictingEvent";
  @SerializedName(SERIALIZED_NAME_CONFLICTING_EVENT)
  private List<EnterpriseTopazSidekickAgendaEntry> conflictingEvent = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIN_EVENT = "mainEvent";
  @SerializedName(SERIALIZED_NAME_MAIN_EVENT)
  private EnterpriseTopazSidekickAgendaEntry mainEvent;

  public EnterpriseTopazSidekickConflictingEventsCardProto() {
  }

  public EnterpriseTopazSidekickConflictingEventsCardProto conflictingEvent(List<EnterpriseTopazSidekickAgendaEntry> conflictingEvent) {
    this.conflictingEvent = conflictingEvent;
    return this;
  }

  public EnterpriseTopazSidekickConflictingEventsCardProto addConflictingEventItem(EnterpriseTopazSidekickAgendaEntry conflictingEventItem) {
    if (this.conflictingEvent == null) {
      this.conflictingEvent = new ArrayList<>();
    }
    this.conflictingEvent.add(conflictingEventItem);
    return this;
  }

  /**
   * All the events that conflict with main_event.
   * @return conflictingEvent
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickAgendaEntry> getConflictingEvent() {
    return conflictingEvent;
  }

  public void setConflictingEvent(List<EnterpriseTopazSidekickAgendaEntry> conflictingEvent) {
    this.conflictingEvent = conflictingEvent;
  }


  public EnterpriseTopazSidekickConflictingEventsCardProto mainEvent(EnterpriseTopazSidekickAgendaEntry mainEvent) {
    this.mainEvent = mainEvent;
    return this;
  }

  /**
   * Get mainEvent
   * @return mainEvent
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickAgendaEntry getMainEvent() {
    return mainEvent;
  }

  public void setMainEvent(EnterpriseTopazSidekickAgendaEntry mainEvent) {
    this.mainEvent = mainEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickConflictingEventsCardProto enterpriseTopazSidekickConflictingEventsCardProto = (EnterpriseTopazSidekickConflictingEventsCardProto) o;
    return Objects.equals(this.conflictingEvent, enterpriseTopazSidekickConflictingEventsCardProto.conflictingEvent) &&
        Objects.equals(this.mainEvent, enterpriseTopazSidekickConflictingEventsCardProto.mainEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conflictingEvent, mainEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickConflictingEventsCardProto {\n");
    sb.append("    conflictingEvent: ").append(toIndentedString(conflictingEvent)).append("\n");
    sb.append("    mainEvent: ").append(toIndentedString(mainEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conflictingEvent");
    openapiFields.add("mainEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickConflictingEventsCardProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickConflictingEventsCardProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickConflictingEventsCardProto is not found in the empty JSON string", EnterpriseTopazSidekickConflictingEventsCardProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickConflictingEventsCardProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickConflictingEventsCardProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conflictingEvent") != null && !jsonObj.get("conflictingEvent").isJsonNull()) {
        JsonArray jsonArrayconflictingEvent = jsonObj.getAsJsonArray("conflictingEvent");
        if (jsonArrayconflictingEvent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conflictingEvent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conflictingEvent` to be an array in the JSON string but got `%s`", jsonObj.get("conflictingEvent").toString()));
          }

          // validate the optional field `conflictingEvent` (array)
          for (int i = 0; i < jsonArrayconflictingEvent.size(); i++) {
            EnterpriseTopazSidekickAgendaEntry.validateJsonElement(jsonArrayconflictingEvent.get(i));
          };
        }
      }
      // validate the optional field `mainEvent`
      if (jsonObj.get("mainEvent") != null && !jsonObj.get("mainEvent").isJsonNull()) {
        EnterpriseTopazSidekickAgendaEntry.validateJsonElement(jsonObj.get("mainEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickConflictingEventsCardProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickConflictingEventsCardProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickConflictingEventsCardProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickConflictingEventsCardProto.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickConflictingEventsCardProto>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickConflictingEventsCardProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickConflictingEventsCardProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickConflictingEventsCardProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickConflictingEventsCardProto
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickConflictingEventsCardProto
   */
  public static EnterpriseTopazSidekickConflictingEventsCardProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickConflictingEventsCardProto.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickConflictingEventsCardProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

