/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonPersonBirthday;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common representation of a person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickCommonPerson {
  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private EnterpriseTopazSidekickCommonPersonBirthday birthday;

  public static final String SERIALIZED_NAME_CELL_PHONE = "cellPhone";
  @SerializedName(SERIALIZED_NAME_CELL_PHONE)
  private String cellPhone;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DESK_LOCATION = "deskLocation";
  @SerializedName(SERIALIZED_NAME_DESK_LOCATION)
  private String deskLocation;

  public static final String SERIALIZED_NAME_DESK_PHONE = "deskPhone";
  @SerializedName(SERIALIZED_NAME_DESK_PHONE)
  private String deskPhone;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "familyName";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "fullAddress";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private String fullAddress;

  public static final String SERIALIZED_NAME_GAIA_ID = "gaiaId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GAIA_ID)
  private String gaiaId;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private EnterpriseTopazSidekickCommonPerson manager;

  public static final String SERIALIZED_NAME_OBFUSCATED_ID = "obfuscatedId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_ID)
  private String obfuscatedId;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public EnterpriseTopazSidekickCommonPerson() {
  }

  public EnterpriseTopazSidekickCommonPerson birthday(EnterpriseTopazSidekickCommonPersonBirthday birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Get birthday
   * @return birthday
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonPersonBirthday getBirthday() {
    return birthday;
  }

  public void setBirthday(EnterpriseTopazSidekickCommonPersonBirthday birthday) {
    this.birthday = birthday;
  }


  public EnterpriseTopazSidekickCommonPerson cellPhone(String cellPhone) {
    this.cellPhone = cellPhone;
    return this;
  }

  /**
   * Cell phone number.
   * @return cellPhone
   */
  @javax.annotation.Nullable
  public String getCellPhone() {
    return cellPhone;
  }

  public void setCellPhone(String cellPhone) {
    this.cellPhone = cellPhone;
  }


  public EnterpriseTopazSidekickCommonPerson department(String department) {
    this.department = department;
    return this;
  }

  /**
   * The department the person works in (e.g. Engineering).
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public EnterpriseTopazSidekickCommonPerson deskLocation(String deskLocation) {
    this.deskLocation = deskLocation;
    return this;
  }

  /**
   * Desk location (e.g. US-MTV-PR55-5-5B1I).
   * @return deskLocation
   */
  @javax.annotation.Nullable
  public String getDeskLocation() {
    return deskLocation;
  }

  public void setDeskLocation(String deskLocation) {
    this.deskLocation = deskLocation;
  }


  public EnterpriseTopazSidekickCommonPerson deskPhone(String deskPhone) {
    this.deskPhone = deskPhone;
    return this;
  }

  /**
   * Work desk phone number.
   * @return deskPhone
   */
  @javax.annotation.Nullable
  public String getDeskPhone() {
    return deskPhone;
  }

  public void setDeskPhone(String deskPhone) {
    this.deskPhone = deskPhone;
  }


  public EnterpriseTopazSidekickCommonPerson displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The full name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EnterpriseTopazSidekickCommonPerson email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public EnterpriseTopazSidekickCommonPerson familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The last name.
   * @return familyName
   */
  @javax.annotation.Nullable
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public EnterpriseTopazSidekickCommonPerson fullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
    return this;
  }

  /**
   * The fully formatted address (e.g. 1255 Pear Avenue, Mountain View 94043, United States).
   * @return fullAddress
   */
  @javax.annotation.Nullable
  public String getFullAddress() {
    return fullAddress;
  }

  public void setFullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
  }


  @Deprecated
  public EnterpriseTopazSidekickCommonPerson gaiaId(String gaiaId) {
    this.gaiaId = gaiaId;
    return this;
  }

  /**
   * This field is deprecated. The obfuscated_id should be used instead.
   * @return gaiaId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getGaiaId() {
    return gaiaId;
  }

  @Deprecated
  public void setGaiaId(String gaiaId) {
    this.gaiaId = gaiaId;
  }


  public EnterpriseTopazSidekickCommonPerson givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The first name.
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public EnterpriseTopazSidekickCommonPerson jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * The person&#39;s job title (e.g. Software Engineer).
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public EnterpriseTopazSidekickCommonPerson manager(EnterpriseTopazSidekickCommonPerson manager) {
    this.manager = manager;
    return this;
  }

  /**
   * Get manager
   * @return manager
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickCommonPerson getManager() {
    return manager;
  }

  public void setManager(EnterpriseTopazSidekickCommonPerson manager) {
    this.manager = manager;
  }


  public EnterpriseTopazSidekickCommonPerson obfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
    return this;
  }

  /**
   * The obfuscated GAIA ID.
   * @return obfuscatedId
   */
  @javax.annotation.Nullable
  public String getObfuscatedId() {
    return obfuscatedId;
  }

  public void setObfuscatedId(String obfuscatedId) {
    this.obfuscatedId = obfuscatedId;
  }


  public EnterpriseTopazSidekickCommonPerson photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The URL for the Focus profile picture.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public EnterpriseTopazSidekickCommonPerson streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * The street address (e.g. 1255 Pear Avenue).
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickCommonPerson enterpriseTopazSidekickCommonPerson = (EnterpriseTopazSidekickCommonPerson) o;
    return Objects.equals(this.birthday, enterpriseTopazSidekickCommonPerson.birthday) &&
        Objects.equals(this.cellPhone, enterpriseTopazSidekickCommonPerson.cellPhone) &&
        Objects.equals(this.department, enterpriseTopazSidekickCommonPerson.department) &&
        Objects.equals(this.deskLocation, enterpriseTopazSidekickCommonPerson.deskLocation) &&
        Objects.equals(this.deskPhone, enterpriseTopazSidekickCommonPerson.deskPhone) &&
        Objects.equals(this.displayName, enterpriseTopazSidekickCommonPerson.displayName) &&
        Objects.equals(this.email, enterpriseTopazSidekickCommonPerson.email) &&
        Objects.equals(this.familyName, enterpriseTopazSidekickCommonPerson.familyName) &&
        Objects.equals(this.fullAddress, enterpriseTopazSidekickCommonPerson.fullAddress) &&
        Objects.equals(this.gaiaId, enterpriseTopazSidekickCommonPerson.gaiaId) &&
        Objects.equals(this.givenName, enterpriseTopazSidekickCommonPerson.givenName) &&
        Objects.equals(this.jobTitle, enterpriseTopazSidekickCommonPerson.jobTitle) &&
        Objects.equals(this.manager, enterpriseTopazSidekickCommonPerson.manager) &&
        Objects.equals(this.obfuscatedId, enterpriseTopazSidekickCommonPerson.obfuscatedId) &&
        Objects.equals(this.photoUrl, enterpriseTopazSidekickCommonPerson.photoUrl) &&
        Objects.equals(this.streetAddress, enterpriseTopazSidekickCommonPerson.streetAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthday, cellPhone, department, deskLocation, deskPhone, displayName, email, familyName, fullAddress, gaiaId, givenName, jobTitle, manager, obfuscatedId, photoUrl, streetAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickCommonPerson {\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    cellPhone: ").append(toIndentedString(cellPhone)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    deskLocation: ").append(toIndentedString(deskLocation)).append("\n");
    sb.append("    deskPhone: ").append(toIndentedString(deskPhone)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    gaiaId: ").append(toIndentedString(gaiaId)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    obfuscatedId: ").append(toIndentedString(obfuscatedId)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birthday");
    openapiFields.add("cellPhone");
    openapiFields.add("department");
    openapiFields.add("deskLocation");
    openapiFields.add("deskPhone");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("familyName");
    openapiFields.add("fullAddress");
    openapiFields.add("gaiaId");
    openapiFields.add("givenName");
    openapiFields.add("jobTitle");
    openapiFields.add("manager");
    openapiFields.add("obfuscatedId");
    openapiFields.add("photoUrl");
    openapiFields.add("streetAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickCommonPerson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickCommonPerson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickCommonPerson is not found in the empty JSON string", EnterpriseTopazSidekickCommonPerson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickCommonPerson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickCommonPerson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `birthday`
      if (jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) {
        EnterpriseTopazSidekickCommonPersonBirthday.validateJsonElement(jsonObj.get("birthday"));
      }
      if ((jsonObj.get("cellPhone") != null && !jsonObj.get("cellPhone").isJsonNull()) && !jsonObj.get("cellPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cellPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cellPhone").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("deskLocation") != null && !jsonObj.get("deskLocation").isJsonNull()) && !jsonObj.get("deskLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deskLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deskLocation").toString()));
      }
      if ((jsonObj.get("deskPhone") != null && !jsonObj.get("deskPhone").isJsonNull()) && !jsonObj.get("deskPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deskPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deskPhone").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("familyName") != null && !jsonObj.get("familyName").isJsonNull()) && !jsonObj.get("familyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyName").toString()));
      }
      if ((jsonObj.get("fullAddress") != null && !jsonObj.get("fullAddress").isJsonNull()) && !jsonObj.get("fullAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullAddress").toString()));
      }
      if ((jsonObj.get("gaiaId") != null && !jsonObj.get("gaiaId").isJsonNull()) && !jsonObj.get("gaiaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gaiaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gaiaId").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      // validate the optional field `manager`
      if (jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) {
        EnterpriseTopazSidekickCommonPerson.validateJsonElement(jsonObj.get("manager"));
      }
      if ((jsonObj.get("obfuscatedId") != null && !jsonObj.get("obfuscatedId").isJsonNull()) && !jsonObj.get("obfuscatedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedId").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      if ((jsonObj.get("streetAddress") != null && !jsonObj.get("streetAddress").isJsonNull()) && !jsonObj.get("streetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickCommonPerson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickCommonPerson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickCommonPerson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickCommonPerson.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickCommonPerson>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickCommonPerson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickCommonPerson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickCommonPerson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickCommonPerson
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickCommonPerson
   */
  public static EnterpriseTopazSidekickCommonPerson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickCommonPerson.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickCommonPerson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

