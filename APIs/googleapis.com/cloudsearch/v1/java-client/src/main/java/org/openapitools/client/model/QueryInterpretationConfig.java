/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Default options to interpret user query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryInterpretationConfig {
  public static final String SERIALIZED_NAME_FORCE_DISABLE_SUPPLEMENTAL_RESULTS = "forceDisableSupplementalResults";
  @SerializedName(SERIALIZED_NAME_FORCE_DISABLE_SUPPLEMENTAL_RESULTS)
  private Boolean forceDisableSupplementalResults;

  public static final String SERIALIZED_NAME_FORCE_VERBATIM_MODE = "forceVerbatimMode";
  @SerializedName(SERIALIZED_NAME_FORCE_VERBATIM_MODE)
  private Boolean forceVerbatimMode;

  public QueryInterpretationConfig() {
  }

  public QueryInterpretationConfig forceDisableSupplementalResults(Boolean forceDisableSupplementalResults) {
    this.forceDisableSupplementalResults = forceDisableSupplementalResults;
    return this;
  }

  /**
   * Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.
   * @return forceDisableSupplementalResults
   */
  @javax.annotation.Nullable
  public Boolean getForceDisableSupplementalResults() {
    return forceDisableSupplementalResults;
  }

  public void setForceDisableSupplementalResults(Boolean forceDisableSupplementalResults) {
    this.forceDisableSupplementalResults = forceDisableSupplementalResults;
  }


  public QueryInterpretationConfig forceVerbatimMode(Boolean forceVerbatimMode) {
    this.forceVerbatimMode = forceVerbatimMode;
    return this;
  }

  /**
   * Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode.
   * @return forceVerbatimMode
   */
  @javax.annotation.Nullable
  public Boolean getForceVerbatimMode() {
    return forceVerbatimMode;
  }

  public void setForceVerbatimMode(Boolean forceVerbatimMode) {
    this.forceVerbatimMode = forceVerbatimMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInterpretationConfig queryInterpretationConfig = (QueryInterpretationConfig) o;
    return Objects.equals(this.forceDisableSupplementalResults, queryInterpretationConfig.forceDisableSupplementalResults) &&
        Objects.equals(this.forceVerbatimMode, queryInterpretationConfig.forceVerbatimMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forceDisableSupplementalResults, forceVerbatimMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInterpretationConfig {\n");
    sb.append("    forceDisableSupplementalResults: ").append(toIndentedString(forceDisableSupplementalResults)).append("\n");
    sb.append("    forceVerbatimMode: ").append(toIndentedString(forceVerbatimMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forceDisableSupplementalResults");
    openapiFields.add("forceVerbatimMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInterpretationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInterpretationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInterpretationConfig is not found in the empty JSON string", QueryInterpretationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInterpretationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInterpretationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInterpretationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInterpretationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInterpretationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInterpretationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInterpretationConfig>() {
           @Override
           public void write(JsonWriter out, QueryInterpretationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInterpretationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInterpretationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInterpretationConfig
   * @throws IOException if the JSON string is invalid with respect to QueryInterpretationConfig
   */
  public static QueryInterpretationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInterpretationConfig.class);
  }

  /**
   * Convert an instance of QueryInterpretationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

