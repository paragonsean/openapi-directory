/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IMPORTANT: It is unsafe to accept this message from an untrusted source, since it&#39;s trivial for an attacker to forge serialized messages that don&#39;t fulfill the type&#39;s safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it&#39;s generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SafeHtmlProto {
  public static final String SERIALIZED_NAME_PRIVATE_DO_NOT_ACCESS_OR_ELSE_SAFE_HTML_WRAPPED_VALUE = "privateDoNotAccessOrElseSafeHtmlWrappedValue";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DO_NOT_ACCESS_OR_ELSE_SAFE_HTML_WRAPPED_VALUE)
  private String privateDoNotAccessOrElseSafeHtmlWrappedValue;

  public SafeHtmlProto() {
  }

  public SafeHtmlProto privateDoNotAccessOrElseSafeHtmlWrappedValue(String privateDoNotAccessOrElseSafeHtmlWrappedValue) {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue = privateDoNotAccessOrElseSafeHtmlWrappedValue;
    return this;
  }

  /**
   * IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
   * @return privateDoNotAccessOrElseSafeHtmlWrappedValue
   */
  @javax.annotation.Nullable
  public String getPrivateDoNotAccessOrElseSafeHtmlWrappedValue() {
    return privateDoNotAccessOrElseSafeHtmlWrappedValue;
  }

  public void setPrivateDoNotAccessOrElseSafeHtmlWrappedValue(String privateDoNotAccessOrElseSafeHtmlWrappedValue) {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue = privateDoNotAccessOrElseSafeHtmlWrappedValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SafeHtmlProto safeHtmlProto = (SafeHtmlProto) o;
    return Objects.equals(this.privateDoNotAccessOrElseSafeHtmlWrappedValue, safeHtmlProto.privateDoNotAccessOrElseSafeHtmlWrappedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateDoNotAccessOrElseSafeHtmlWrappedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SafeHtmlProto {\n");
    sb.append("    privateDoNotAccessOrElseSafeHtmlWrappedValue: ").append(toIndentedString(privateDoNotAccessOrElseSafeHtmlWrappedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privateDoNotAccessOrElseSafeHtmlWrappedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SafeHtmlProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SafeHtmlProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SafeHtmlProto is not found in the empty JSON string", SafeHtmlProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SafeHtmlProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SafeHtmlProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateDoNotAccessOrElseSafeHtmlWrappedValue") != null && !jsonObj.get("privateDoNotAccessOrElseSafeHtmlWrappedValue").isJsonNull()) && !jsonObj.get("privateDoNotAccessOrElseSafeHtmlWrappedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateDoNotAccessOrElseSafeHtmlWrappedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateDoNotAccessOrElseSafeHtmlWrappedValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SafeHtmlProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SafeHtmlProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SafeHtmlProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SafeHtmlProto.class));

       return (TypeAdapter<T>) new TypeAdapter<SafeHtmlProto>() {
           @Override
           public void write(JsonWriter out, SafeHtmlProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SafeHtmlProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SafeHtmlProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SafeHtmlProto
   * @throws IOException if the JSON string is invalid with respect to SafeHtmlProto
   */
  public static SafeHtmlProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SafeHtmlProto.class);
  }

  /**
   * Convert an instance of SafeHtmlProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

