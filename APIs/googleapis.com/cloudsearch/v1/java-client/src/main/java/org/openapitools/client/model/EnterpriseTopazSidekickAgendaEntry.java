/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDocument;
import org.openapitools.client.model.EnterpriseTopazSidekickPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An AgendaEntry, e.g., a Calendar Event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickAgendaEntry {
  public static final String SERIALIZED_NAME_AGENDA_ITEM_URL = "agendaItemUrl";
  @SerializedName(SERIALIZED_NAME_AGENDA_ITEM_URL)
  private String agendaItemUrl;

  /**
   * The chronology from the present.
   */
  @JsonAdapter(ChronologyEnum.Adapter.class)
  public enum ChronologyEnum {
    STALE("STALE"),
    
    ALL_DAY("ALL_DAY"),
    
    PAST("PAST"),
    
    RECENTLY_PAST("RECENTLY_PAST"),
    
    PRESENT("PRESENT"),
    
    NEAR_FUTURE("NEAR_FUTURE"),
    
    FUTURE("FUTURE");

    private String value;

    ChronologyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChronologyEnum fromValue(String value) {
      for (ChronologyEnum b : ChronologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChronologyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChronologyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChronologyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChronologyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChronologyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHRONOLOGY = "chronology";
  @SerializedName(SERIALIZED_NAME_CHRONOLOGY)
  private ChronologyEnum chronology;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private EnterpriseTopazSidekickPerson creator;

  /**
   * Attendance status for the current user making the request. This is a convenience data member in order to avoid figuring out the same by iterating the invitee list above on the caller side.
   */
  @JsonAdapter(CurrentUserAttendingStatusEnum.Adapter.class)
  public enum CurrentUserAttendingStatusEnum {
    AWAITING("AWAITING"),
    
    TRUE("true"),
    
    FALSE("false"),
    
    MAYBE("MAYBE");

    private String value;

    CurrentUserAttendingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentUserAttendingStatusEnum fromValue(String value) {
      for (CurrentUserAttendingStatusEnum b : CurrentUserAttendingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentUserAttendingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentUserAttendingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentUserAttendingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentUserAttendingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentUserAttendingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_USER_ATTENDING_STATUS = "currentUserAttendingStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ATTENDING_STATUS)
  private CurrentUserAttendingStatusEnum currentUserAttendingStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private List<EnterpriseTopazSidekickCommonDocument> document = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_END_TIME_MS = "endTimeMs";
  @SerializedName(SERIALIZED_NAME_END_TIME_MS)
  private String endTimeMs;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_GUESTS_CAN_INVITE_OTHERS = "guestsCanInviteOthers";
  @SerializedName(SERIALIZED_NAME_GUESTS_CAN_INVITE_OTHERS)
  private Boolean guestsCanInviteOthers;

  public static final String SERIALIZED_NAME_GUESTS_CAN_MODIFY = "guestsCanModify";
  @SerializedName(SERIALIZED_NAME_GUESTS_CAN_MODIFY)
  private Boolean guestsCanModify;

  public static final String SERIALIZED_NAME_GUESTS_CAN_SEE_GUESTS = "guestsCanSeeGuests";
  @SerializedName(SERIALIZED_NAME_GUESTS_CAN_SEE_GUESTS)
  private Boolean guestsCanSeeGuests;

  public static final String SERIALIZED_NAME_HANGOUT_ID = "hangoutId";
  @SerializedName(SERIALIZED_NAME_HANGOUT_ID)
  private String hangoutId;

  public static final String SERIALIZED_NAME_HANGOUT_URL = "hangoutUrl";
  @SerializedName(SERIALIZED_NAME_HANGOUT_URL)
  private String hangoutUrl;

  public static final String SERIALIZED_NAME_INVITEE = "invitee";
  @SerializedName(SERIALIZED_NAME_INVITEE)
  private List<EnterpriseTopazSidekickPerson> invitee = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ALL_DAY = "isAllDay";
  @SerializedName(SERIALIZED_NAME_IS_ALL_DAY)
  private Boolean isAllDay;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME_MS = "lastModificationTimeMs";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME_MS)
  private String lastModificationTimeMs;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NOTIFY_TO_USER = "notifyToUser";
  @SerializedName(SERIALIZED_NAME_NOTIFY_TO_USER)
  private Boolean notifyToUser;

  public static final String SERIALIZED_NAME_OTHER_ATTENDEES_EXCLUDED = "otherAttendeesExcluded";
  @SerializedName(SERIALIZED_NAME_OTHER_ATTENDEES_EXCLUDED)
  private Boolean otherAttendeesExcluded;

  public static final String SERIALIZED_NAME_REQUESTER_IS_OWNER = "requesterIsOwner";
  @SerializedName(SERIALIZED_NAME_REQUESTER_IS_OWNER)
  private Boolean requesterIsOwner;

  public static final String SERIALIZED_NAME_SHOW_FULL_EVENT_DETAILS_TO_USE = "showFullEventDetailsToUse";
  @SerializedName(SERIALIZED_NAME_SHOW_FULL_EVENT_DETAILS_TO_USE)
  private Boolean showFullEventDetailsToUse;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_START_TIME_MS = "startTimeMs";
  @SerializedName(SERIALIZED_NAME_START_TIME_MS)
  private String startTimeMs;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public EnterpriseTopazSidekickAgendaEntry() {
  }

  public EnterpriseTopazSidekickAgendaEntry agendaItemUrl(String agendaItemUrl) {
    this.agendaItemUrl = agendaItemUrl;
    return this;
  }

  /**
   * URL of the agenda item.
   * @return agendaItemUrl
   */
  @javax.annotation.Nullable
  public String getAgendaItemUrl() {
    return agendaItemUrl;
  }

  public void setAgendaItemUrl(String agendaItemUrl) {
    this.agendaItemUrl = agendaItemUrl;
  }


  public EnterpriseTopazSidekickAgendaEntry chronology(ChronologyEnum chronology) {
    this.chronology = chronology;
    return this;
  }

  /**
   * The chronology from the present.
   * @return chronology
   */
  @javax.annotation.Nullable
  public ChronologyEnum getChronology() {
    return chronology;
  }

  public void setChronology(ChronologyEnum chronology) {
    this.chronology = chronology;
  }


  public EnterpriseTopazSidekickAgendaEntry creator(EnterpriseTopazSidekickPerson creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickPerson getCreator() {
    return creator;
  }

  public void setCreator(EnterpriseTopazSidekickPerson creator) {
    this.creator = creator;
  }


  public EnterpriseTopazSidekickAgendaEntry currentUserAttendingStatus(CurrentUserAttendingStatusEnum currentUserAttendingStatus) {
    this.currentUserAttendingStatus = currentUserAttendingStatus;
    return this;
  }

  /**
   * Attendance status for the current user making the request. This is a convenience data member in order to avoid figuring out the same by iterating the invitee list above on the caller side.
   * @return currentUserAttendingStatus
   */
  @javax.annotation.Nullable
  public CurrentUserAttendingStatusEnum getCurrentUserAttendingStatus() {
    return currentUserAttendingStatus;
  }

  public void setCurrentUserAttendingStatus(CurrentUserAttendingStatusEnum currentUserAttendingStatus) {
    this.currentUserAttendingStatus = currentUserAttendingStatus;
  }


  public EnterpriseTopazSidekickAgendaEntry description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the agenda item (i.e., typically, summary in calendar event).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EnterpriseTopazSidekickAgendaEntry document(List<EnterpriseTopazSidekickCommonDocument> document) {
    this.document = document;
    return this;
  }

  public EnterpriseTopazSidekickAgendaEntry addDocumentItem(EnterpriseTopazSidekickCommonDocument documentItem) {
    if (this.document == null) {
      this.document = new ArrayList<>();
    }
    this.document.add(documentItem);
    return this;
  }

  /**
   * Items related to the current AgendaEntry. E.g., related drive/mail/groups documents.
   * @return document
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickCommonDocument> getDocument() {
    return document;
  }

  public void setDocument(List<EnterpriseTopazSidekickCommonDocument> document) {
    this.document = document;
  }


  public EnterpriseTopazSidekickAgendaEntry endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date \&quot;Friday, August 26\&quot; in the user&#39;s timezone.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public EnterpriseTopazSidekickAgendaEntry endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time (HH:mm) in the user&#39;s timezone.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public EnterpriseTopazSidekickAgendaEntry endTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
    return this;
  }

  /**
   * End time in milliseconds
   * @return endTimeMs
   */
  @javax.annotation.Nullable
  public String getEndTimeMs() {
    return endTimeMs;
  }

  public void setEndTimeMs(String endTimeMs) {
    this.endTimeMs = endTimeMs;
  }


  public EnterpriseTopazSidekickAgendaEntry eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Event id provided by Calendar API.
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EnterpriseTopazSidekickAgendaEntry guestsCanInviteOthers(Boolean guestsCanInviteOthers) {
    this.guestsCanInviteOthers = guestsCanInviteOthers;
    return this;
  }

  /**
   * Whether the guests can invite other guests.
   * @return guestsCanInviteOthers
   */
  @javax.annotation.Nullable
  public Boolean getGuestsCanInviteOthers() {
    return guestsCanInviteOthers;
  }

  public void setGuestsCanInviteOthers(Boolean guestsCanInviteOthers) {
    this.guestsCanInviteOthers = guestsCanInviteOthers;
  }


  public EnterpriseTopazSidekickAgendaEntry guestsCanModify(Boolean guestsCanModify) {
    this.guestsCanModify = guestsCanModify;
    return this;
  }

  /**
   * Whether the guests can modify the event.
   * @return guestsCanModify
   */
  @javax.annotation.Nullable
  public Boolean getGuestsCanModify() {
    return guestsCanModify;
  }

  public void setGuestsCanModify(Boolean guestsCanModify) {
    this.guestsCanModify = guestsCanModify;
  }


  public EnterpriseTopazSidekickAgendaEntry guestsCanSeeGuests(Boolean guestsCanSeeGuests) {
    this.guestsCanSeeGuests = guestsCanSeeGuests;
    return this;
  }

  /**
   * Whether the guests of the event can be seen. If false, the user is going to be reported as the only attendee to the meeting, even though there may be more attendees.
   * @return guestsCanSeeGuests
   */
  @javax.annotation.Nullable
  public Boolean getGuestsCanSeeGuests() {
    return guestsCanSeeGuests;
  }

  public void setGuestsCanSeeGuests(Boolean guestsCanSeeGuests) {
    this.guestsCanSeeGuests = guestsCanSeeGuests;
  }


  public EnterpriseTopazSidekickAgendaEntry hangoutId(String hangoutId) {
    this.hangoutId = hangoutId;
    return this;
  }

  /**
   * Hangout meeting identifier.
   * @return hangoutId
   */
  @javax.annotation.Nullable
  public String getHangoutId() {
    return hangoutId;
  }

  public void setHangoutId(String hangoutId) {
    this.hangoutId = hangoutId;
  }


  public EnterpriseTopazSidekickAgendaEntry hangoutUrl(String hangoutUrl) {
    this.hangoutUrl = hangoutUrl;
    return this;
  }

  /**
   * Absolute URL for the Hangout meeting.
   * @return hangoutUrl
   */
  @javax.annotation.Nullable
  public String getHangoutUrl() {
    return hangoutUrl;
  }

  public void setHangoutUrl(String hangoutUrl) {
    this.hangoutUrl = hangoutUrl;
  }


  public EnterpriseTopazSidekickAgendaEntry invitee(List<EnterpriseTopazSidekickPerson> invitee) {
    this.invitee = invitee;
    return this;
  }

  public EnterpriseTopazSidekickAgendaEntry addInviteeItem(EnterpriseTopazSidekickPerson inviteeItem) {
    if (this.invitee == null) {
      this.invitee = new ArrayList<>();
    }
    this.invitee.add(inviteeItem);
    return this;
  }

  /**
   * People attending the meeting.
   * @return invitee
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickPerson> getInvitee() {
    return invitee;
  }

  public void setInvitee(List<EnterpriseTopazSidekickPerson> invitee) {
    this.invitee = invitee;
  }


  public EnterpriseTopazSidekickAgendaEntry isAllDay(Boolean isAllDay) {
    this.isAllDay = isAllDay;
    return this;
  }

  /**
   * Whether the entry lasts all day.
   * @return isAllDay
   */
  @javax.annotation.Nullable
  public Boolean getIsAllDay() {
    return isAllDay;
  }

  public void setIsAllDay(Boolean isAllDay) {
    this.isAllDay = isAllDay;
  }


  public EnterpriseTopazSidekickAgendaEntry lastModificationTimeMs(String lastModificationTimeMs) {
    this.lastModificationTimeMs = lastModificationTimeMs;
    return this;
  }

  /**
   * Last time the event was modified.
   * @return lastModificationTimeMs
   */
  @javax.annotation.Nullable
  public String getLastModificationTimeMs() {
    return lastModificationTimeMs;
  }

  public void setLastModificationTimeMs(String lastModificationTimeMs) {
    this.lastModificationTimeMs = lastModificationTimeMs;
  }


  public EnterpriseTopazSidekickAgendaEntry location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Agenda item location.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public EnterpriseTopazSidekickAgendaEntry notifyToUser(Boolean notifyToUser) {
    this.notifyToUser = notifyToUser;
    return this;
  }

  /**
   * Whether this should be notified to the user.
   * @return notifyToUser
   */
  @javax.annotation.Nullable
  public Boolean getNotifyToUser() {
    return notifyToUser;
  }

  public void setNotifyToUser(Boolean notifyToUser) {
    this.notifyToUser = notifyToUser;
  }


  public EnterpriseTopazSidekickAgendaEntry otherAttendeesExcluded(Boolean otherAttendeesExcluded) {
    this.otherAttendeesExcluded = otherAttendeesExcluded;
    return this;
  }

  /**
   * Whether guest list is not returned because number of attendees is too large.
   * @return otherAttendeesExcluded
   */
  @javax.annotation.Nullable
  public Boolean getOtherAttendeesExcluded() {
    return otherAttendeesExcluded;
  }

  public void setOtherAttendeesExcluded(Boolean otherAttendeesExcluded) {
    this.otherAttendeesExcluded = otherAttendeesExcluded;
  }


  public EnterpriseTopazSidekickAgendaEntry requesterIsOwner(Boolean requesterIsOwner) {
    this.requesterIsOwner = requesterIsOwner;
    return this;
  }

  /**
   * Whether the requester is the owner of the agenda entry.
   * @return requesterIsOwner
   */
  @javax.annotation.Nullable
  public Boolean getRequesterIsOwner() {
    return requesterIsOwner;
  }

  public void setRequesterIsOwner(Boolean requesterIsOwner) {
    this.requesterIsOwner = requesterIsOwner;
  }


  public EnterpriseTopazSidekickAgendaEntry showFullEventDetailsToUse(Boolean showFullEventDetailsToUse) {
    this.showFullEventDetailsToUse = showFullEventDetailsToUse;
    return this;
  }

  /**
   * Whether the details of this entry should be displayed to the user.
   * @return showFullEventDetailsToUse
   */
  @javax.annotation.Nullable
  public Boolean getShowFullEventDetailsToUse() {
    return showFullEventDetailsToUse;
  }

  public void setShowFullEventDetailsToUse(Boolean showFullEventDetailsToUse) {
    this.showFullEventDetailsToUse = showFullEventDetailsToUse;
  }


  public EnterpriseTopazSidekickAgendaEntry startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date \&quot;Friday, August 26\&quot; in the user&#39;s timezone.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public EnterpriseTopazSidekickAgendaEntry startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time (HH:mm) in the user&#39;s timezone.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public EnterpriseTopazSidekickAgendaEntry startTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
    return this;
  }

  /**
   * Start time in milliseconds.
   * @return startTimeMs
   */
  @javax.annotation.Nullable
  public String getStartTimeMs() {
    return startTimeMs;
  }

  public void setStartTimeMs(String startTimeMs) {
    this.startTimeMs = startTimeMs;
  }


  public EnterpriseTopazSidekickAgendaEntry timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * User&#39;s calendar timezone;
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public EnterpriseTopazSidekickAgendaEntry title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the agenda item.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickAgendaEntry enterpriseTopazSidekickAgendaEntry = (EnterpriseTopazSidekickAgendaEntry) o;
    return Objects.equals(this.agendaItemUrl, enterpriseTopazSidekickAgendaEntry.agendaItemUrl) &&
        Objects.equals(this.chronology, enterpriseTopazSidekickAgendaEntry.chronology) &&
        Objects.equals(this.creator, enterpriseTopazSidekickAgendaEntry.creator) &&
        Objects.equals(this.currentUserAttendingStatus, enterpriseTopazSidekickAgendaEntry.currentUserAttendingStatus) &&
        Objects.equals(this.description, enterpriseTopazSidekickAgendaEntry.description) &&
        Objects.equals(this.document, enterpriseTopazSidekickAgendaEntry.document) &&
        Objects.equals(this.endDate, enterpriseTopazSidekickAgendaEntry.endDate) &&
        Objects.equals(this.endTime, enterpriseTopazSidekickAgendaEntry.endTime) &&
        Objects.equals(this.endTimeMs, enterpriseTopazSidekickAgendaEntry.endTimeMs) &&
        Objects.equals(this.eventId, enterpriseTopazSidekickAgendaEntry.eventId) &&
        Objects.equals(this.guestsCanInviteOthers, enterpriseTopazSidekickAgendaEntry.guestsCanInviteOthers) &&
        Objects.equals(this.guestsCanModify, enterpriseTopazSidekickAgendaEntry.guestsCanModify) &&
        Objects.equals(this.guestsCanSeeGuests, enterpriseTopazSidekickAgendaEntry.guestsCanSeeGuests) &&
        Objects.equals(this.hangoutId, enterpriseTopazSidekickAgendaEntry.hangoutId) &&
        Objects.equals(this.hangoutUrl, enterpriseTopazSidekickAgendaEntry.hangoutUrl) &&
        Objects.equals(this.invitee, enterpriseTopazSidekickAgendaEntry.invitee) &&
        Objects.equals(this.isAllDay, enterpriseTopazSidekickAgendaEntry.isAllDay) &&
        Objects.equals(this.lastModificationTimeMs, enterpriseTopazSidekickAgendaEntry.lastModificationTimeMs) &&
        Objects.equals(this.location, enterpriseTopazSidekickAgendaEntry.location) &&
        Objects.equals(this.notifyToUser, enterpriseTopazSidekickAgendaEntry.notifyToUser) &&
        Objects.equals(this.otherAttendeesExcluded, enterpriseTopazSidekickAgendaEntry.otherAttendeesExcluded) &&
        Objects.equals(this.requesterIsOwner, enterpriseTopazSidekickAgendaEntry.requesterIsOwner) &&
        Objects.equals(this.showFullEventDetailsToUse, enterpriseTopazSidekickAgendaEntry.showFullEventDetailsToUse) &&
        Objects.equals(this.startDate, enterpriseTopazSidekickAgendaEntry.startDate) &&
        Objects.equals(this.startTime, enterpriseTopazSidekickAgendaEntry.startTime) &&
        Objects.equals(this.startTimeMs, enterpriseTopazSidekickAgendaEntry.startTimeMs) &&
        Objects.equals(this.timeZone, enterpriseTopazSidekickAgendaEntry.timeZone) &&
        Objects.equals(this.title, enterpriseTopazSidekickAgendaEntry.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agendaItemUrl, chronology, creator, currentUserAttendingStatus, description, document, endDate, endTime, endTimeMs, eventId, guestsCanInviteOthers, guestsCanModify, guestsCanSeeGuests, hangoutId, hangoutUrl, invitee, isAllDay, lastModificationTimeMs, location, notifyToUser, otherAttendeesExcluded, requesterIsOwner, showFullEventDetailsToUse, startDate, startTime, startTimeMs, timeZone, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickAgendaEntry {\n");
    sb.append("    agendaItemUrl: ").append(toIndentedString(agendaItemUrl)).append("\n");
    sb.append("    chronology: ").append(toIndentedString(chronology)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    currentUserAttendingStatus: ").append(toIndentedString(currentUserAttendingStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endTimeMs: ").append(toIndentedString(endTimeMs)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    guestsCanInviteOthers: ").append(toIndentedString(guestsCanInviteOthers)).append("\n");
    sb.append("    guestsCanModify: ").append(toIndentedString(guestsCanModify)).append("\n");
    sb.append("    guestsCanSeeGuests: ").append(toIndentedString(guestsCanSeeGuests)).append("\n");
    sb.append("    hangoutId: ").append(toIndentedString(hangoutId)).append("\n");
    sb.append("    hangoutUrl: ").append(toIndentedString(hangoutUrl)).append("\n");
    sb.append("    invitee: ").append(toIndentedString(invitee)).append("\n");
    sb.append("    isAllDay: ").append(toIndentedString(isAllDay)).append("\n");
    sb.append("    lastModificationTimeMs: ").append(toIndentedString(lastModificationTimeMs)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    notifyToUser: ").append(toIndentedString(notifyToUser)).append("\n");
    sb.append("    otherAttendeesExcluded: ").append(toIndentedString(otherAttendeesExcluded)).append("\n");
    sb.append("    requesterIsOwner: ").append(toIndentedString(requesterIsOwner)).append("\n");
    sb.append("    showFullEventDetailsToUse: ").append(toIndentedString(showFullEventDetailsToUse)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startTimeMs: ").append(toIndentedString(startTimeMs)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agendaItemUrl");
    openapiFields.add("chronology");
    openapiFields.add("creator");
    openapiFields.add("currentUserAttendingStatus");
    openapiFields.add("description");
    openapiFields.add("document");
    openapiFields.add("endDate");
    openapiFields.add("endTime");
    openapiFields.add("endTimeMs");
    openapiFields.add("eventId");
    openapiFields.add("guestsCanInviteOthers");
    openapiFields.add("guestsCanModify");
    openapiFields.add("guestsCanSeeGuests");
    openapiFields.add("hangoutId");
    openapiFields.add("hangoutUrl");
    openapiFields.add("invitee");
    openapiFields.add("isAllDay");
    openapiFields.add("lastModificationTimeMs");
    openapiFields.add("location");
    openapiFields.add("notifyToUser");
    openapiFields.add("otherAttendeesExcluded");
    openapiFields.add("requesterIsOwner");
    openapiFields.add("showFullEventDetailsToUse");
    openapiFields.add("startDate");
    openapiFields.add("startTime");
    openapiFields.add("startTimeMs");
    openapiFields.add("timeZone");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickAgendaEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickAgendaEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickAgendaEntry is not found in the empty JSON string", EnterpriseTopazSidekickAgendaEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickAgendaEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickAgendaEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agendaItemUrl") != null && !jsonObj.get("agendaItemUrl").isJsonNull()) && !jsonObj.get("agendaItemUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agendaItemUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agendaItemUrl").toString()));
      }
      if ((jsonObj.get("chronology") != null && !jsonObj.get("chronology").isJsonNull()) && !jsonObj.get("chronology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chronology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chronology").toString()));
      }
      // validate the optional field `chronology`
      if (jsonObj.get("chronology") != null && !jsonObj.get("chronology").isJsonNull()) {
        ChronologyEnum.validateJsonElement(jsonObj.get("chronology"));
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        EnterpriseTopazSidekickPerson.validateJsonElement(jsonObj.get("creator"));
      }
      if ((jsonObj.get("currentUserAttendingStatus") != null && !jsonObj.get("currentUserAttendingStatus").isJsonNull()) && !jsonObj.get("currentUserAttendingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentUserAttendingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentUserAttendingStatus").toString()));
      }
      // validate the optional field `currentUserAttendingStatus`
      if (jsonObj.get("currentUserAttendingStatus") != null && !jsonObj.get("currentUserAttendingStatus").isJsonNull()) {
        CurrentUserAttendingStatusEnum.validateJsonElement(jsonObj.get("currentUserAttendingStatus"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        JsonArray jsonArraydocument = jsonObj.getAsJsonArray("document");
        if (jsonArraydocument != null) {
          // ensure the json data is an array
          if (!jsonObj.get("document").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `document` to be an array in the JSON string but got `%s`", jsonObj.get("document").toString()));
          }

          // validate the optional field `document` (array)
          for (int i = 0; i < jsonArraydocument.size(); i++) {
            EnterpriseTopazSidekickCommonDocument.validateJsonElement(jsonArraydocument.get(i));
          };
        }
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("endTimeMs") != null && !jsonObj.get("endTimeMs").isJsonNull()) && !jsonObj.get("endTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeMs").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("hangoutId") != null && !jsonObj.get("hangoutId").isJsonNull()) && !jsonObj.get("hangoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hangoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hangoutId").toString()));
      }
      if ((jsonObj.get("hangoutUrl") != null && !jsonObj.get("hangoutUrl").isJsonNull()) && !jsonObj.get("hangoutUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hangoutUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hangoutUrl").toString()));
      }
      if (jsonObj.get("invitee") != null && !jsonObj.get("invitee").isJsonNull()) {
        JsonArray jsonArrayinvitee = jsonObj.getAsJsonArray("invitee");
        if (jsonArrayinvitee != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invitee").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invitee` to be an array in the JSON string but got `%s`", jsonObj.get("invitee").toString()));
          }

          // validate the optional field `invitee` (array)
          for (int i = 0; i < jsonArrayinvitee.size(); i++) {
            EnterpriseTopazSidekickPerson.validateJsonElement(jsonArrayinvitee.get(i));
          };
        }
      }
      if ((jsonObj.get("lastModificationTimeMs") != null && !jsonObj.get("lastModificationTimeMs").isJsonNull()) && !jsonObj.get("lastModificationTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModificationTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModificationTimeMs").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("startTimeMs") != null && !jsonObj.get("startTimeMs").isJsonNull()) && !jsonObj.get("startTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeMs").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickAgendaEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickAgendaEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickAgendaEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickAgendaEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickAgendaEntry>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickAgendaEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickAgendaEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickAgendaEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickAgendaEntry
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickAgendaEntry
   */
  public static EnterpriseTopazSidekickAgendaEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickAgendaEntry.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickAgendaEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

