/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Optional. Provides a search operator for date properties. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DateOperatorOptions {
  public static final String SERIALIZED_NAME_GREATER_THAN_OPERATOR_NAME = "greaterThanOperatorName";
  @SerializedName(SERIALIZED_NAME_GREATER_THAN_OPERATOR_NAME)
  private String greaterThanOperatorName;

  public static final String SERIALIZED_NAME_LESS_THAN_OPERATOR_NAME = "lessThanOperatorName";
  @SerializedName(SERIALIZED_NAME_LESS_THAN_OPERATOR_NAME)
  private String lessThanOperatorName;

  public static final String SERIALIZED_NAME_OPERATOR_NAME = "operatorName";
  @SerializedName(SERIALIZED_NAME_OPERATOR_NAME)
  private String operatorName;

  public DateOperatorOptions() {
  }

  public DateOperatorOptions greaterThanOperatorName(String greaterThanOperatorName) {
    this.greaterThanOperatorName = greaterThanOperatorName;
    return this;
  }

  /**
   * Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and the property&#39;s name is *closeDate*, then queries like *closedafter:&lt;value&gt;* show results only where the value of the property named *closeDate* is later than *&lt;value&gt;*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
   * @return greaterThanOperatorName
   */
  @javax.annotation.Nullable
  public String getGreaterThanOperatorName() {
    return greaterThanOperatorName;
  }

  public void setGreaterThanOperatorName(String greaterThanOperatorName) {
    this.greaterThanOperatorName = greaterThanOperatorName;
  }


  public DateOperatorOptions lessThanOperatorName(String lessThanOperatorName) {
    this.lessThanOperatorName = lessThanOperatorName;
    return this;
  }

  /**
   * Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the property&#39;s name is *closeDate*, then queries like *closedbefore:&lt;value&gt;* show results only where the value of the property named *closeDate* is earlier than *&lt;value&gt;*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
   * @return lessThanOperatorName
   */
  @javax.annotation.Nullable
  public String getLessThanOperatorName() {
    return lessThanOperatorName;
  }

  public void setLessThanOperatorName(String lessThanOperatorName) {
    this.lessThanOperatorName = lessThanOperatorName;
  }


  public DateOperatorOptions operatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:&lt;value&gt;* show results only where the value of the *closeDate* property matches *&lt;value&gt;*. By contrast, a search that uses the same *&lt;value&gt;* without an operator returns all items where *&lt;value&gt;* matches the value of any String properties or text within the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
   * @return operatorName
   */
  @javax.annotation.Nullable
  public String getOperatorName() {
    return operatorName;
  }

  public void setOperatorName(String operatorName) {
    this.operatorName = operatorName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateOperatorOptions dateOperatorOptions = (DateOperatorOptions) o;
    return Objects.equals(this.greaterThanOperatorName, dateOperatorOptions.greaterThanOperatorName) &&
        Objects.equals(this.lessThanOperatorName, dateOperatorOptions.lessThanOperatorName) &&
        Objects.equals(this.operatorName, dateOperatorOptions.operatorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(greaterThanOperatorName, lessThanOperatorName, operatorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateOperatorOptions {\n");
    sb.append("    greaterThanOperatorName: ").append(toIndentedString(greaterThanOperatorName)).append("\n");
    sb.append("    lessThanOperatorName: ").append(toIndentedString(lessThanOperatorName)).append("\n");
    sb.append("    operatorName: ").append(toIndentedString(operatorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("greaterThanOperatorName");
    openapiFields.add("lessThanOperatorName");
    openapiFields.add("operatorName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DateOperatorOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DateOperatorOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DateOperatorOptions is not found in the empty JSON string", DateOperatorOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DateOperatorOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DateOperatorOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("greaterThanOperatorName") != null && !jsonObj.get("greaterThanOperatorName").isJsonNull()) && !jsonObj.get("greaterThanOperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greaterThanOperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greaterThanOperatorName").toString()));
      }
      if ((jsonObj.get("lessThanOperatorName") != null && !jsonObj.get("lessThanOperatorName").isJsonNull()) && !jsonObj.get("lessThanOperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lessThanOperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lessThanOperatorName").toString()));
      }
      if ((jsonObj.get("operatorName") != null && !jsonObj.get("operatorName").isJsonNull()) && !jsonObj.get("operatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatorName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DateOperatorOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DateOperatorOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DateOperatorOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DateOperatorOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DateOperatorOptions>() {
           @Override
           public void write(JsonWriter out, DateOperatorOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DateOperatorOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DateOperatorOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DateOperatorOptions
   * @throws IOException if the JSON string is invalid with respect to DateOperatorOptions
   */
  public static DateOperatorOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DateOperatorOptions.class);
  }

  /**
   * Convert an instance of DateOperatorOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

