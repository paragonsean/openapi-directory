/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PeopleSuggestion;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * One suggestion result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestResult {
  public static final String SERIALIZED_NAME_PEOPLE_SUGGESTION = "peopleSuggestion";
  @SerializedName(SERIALIZED_NAME_PEOPLE_SUGGESTION)
  private PeopleSuggestion peopleSuggestion;

  public static final String SERIALIZED_NAME_QUERY_SUGGESTION = "querySuggestion";
  @SerializedName(SERIALIZED_NAME_QUERY_SUGGESTION)
  private Object querySuggestion;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_SUGGESTED_QUERY = "suggestedQuery";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_QUERY)
  private String suggestedQuery;

  public SuggestResult() {
  }

  public SuggestResult peopleSuggestion(PeopleSuggestion peopleSuggestion) {
    this.peopleSuggestion = peopleSuggestion;
    return this;
  }

  /**
   * Get peopleSuggestion
   * @return peopleSuggestion
   */
  @javax.annotation.Nullable
  public PeopleSuggestion getPeopleSuggestion() {
    return peopleSuggestion;
  }

  public void setPeopleSuggestion(PeopleSuggestion peopleSuggestion) {
    this.peopleSuggestion = peopleSuggestion;
  }


  public SuggestResult querySuggestion(Object querySuggestion) {
    this.querySuggestion = querySuggestion;
    return this;
  }

  /**
   * This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.
   * @return querySuggestion
   */
  @javax.annotation.Nullable
  public Object getQuerySuggestion() {
    return querySuggestion;
  }

  public void setQuerySuggestion(Object querySuggestion) {
    this.querySuggestion = querySuggestion;
  }


  public SuggestResult source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public SuggestResult suggestedQuery(String suggestedQuery) {
    this.suggestedQuery = suggestedQuery;
    return this;
  }

  /**
   * The suggested query that will be used for search, when the user clicks on the suggestion
   * @return suggestedQuery
   */
  @javax.annotation.Nullable
  public String getSuggestedQuery() {
    return suggestedQuery;
  }

  public void setSuggestedQuery(String suggestedQuery) {
    this.suggestedQuery = suggestedQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestResult suggestResult = (SuggestResult) o;
    return Objects.equals(this.peopleSuggestion, suggestResult.peopleSuggestion) &&
        Objects.equals(this.querySuggestion, suggestResult.querySuggestion) &&
        Objects.equals(this.source, suggestResult.source) &&
        Objects.equals(this.suggestedQuery, suggestResult.suggestedQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peopleSuggestion, querySuggestion, source, suggestedQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestResult {\n");
    sb.append("    peopleSuggestion: ").append(toIndentedString(peopleSuggestion)).append("\n");
    sb.append("    querySuggestion: ").append(toIndentedString(querySuggestion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    suggestedQuery: ").append(toIndentedString(suggestedQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("peopleSuggestion");
    openapiFields.add("querySuggestion");
    openapiFields.add("source");
    openapiFields.add("suggestedQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestResult is not found in the empty JSON string", SuggestResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `peopleSuggestion`
      if (jsonObj.get("peopleSuggestion") != null && !jsonObj.get("peopleSuggestion").isJsonNull()) {
        PeopleSuggestion.validateJsonElement(jsonObj.get("peopleSuggestion"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("suggestedQuery") != null && !jsonObj.get("suggestedQuery").isJsonNull()) && !jsonObj.get("suggestedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestedQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestResult>() {
           @Override
           public void write(JsonWriter out, SuggestResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestResult
   * @throws IOException if the JSON string is invalid with respect to SuggestResult
   */
  public static SuggestResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestResult.class);
  }

  /**
   * Convert an instance of SuggestResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

