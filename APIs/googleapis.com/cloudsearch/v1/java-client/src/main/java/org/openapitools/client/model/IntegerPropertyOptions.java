/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IntegerFacetingOptions;
import org.openapitools.client.model.IntegerOperatorOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The options for integer properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegerPropertyOptions {
  public static final String SERIALIZED_NAME_INTEGER_FACETING_OPTIONS = "integerFacetingOptions";
  @SerializedName(SERIALIZED_NAME_INTEGER_FACETING_OPTIONS)
  private IntegerFacetingOptions integerFacetingOptions;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE = "maximumValue";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE)
  private String maximumValue;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE = "minimumValue";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE)
  private String minimumValue;

  public static final String SERIALIZED_NAME_OPERATOR_OPTIONS = "operatorOptions";
  @SerializedName(SERIALIZED_NAME_OPERATOR_OPTIONS)
  private IntegerOperatorOptions operatorOptions;

  /**
   * Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.
   */
  @JsonAdapter(OrderedRankingEnum.Adapter.class)
  public enum OrderedRankingEnum {
    NO_ORDER("NO_ORDER"),
    
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    OrderedRankingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderedRankingEnum fromValue(String value) {
      for (OrderedRankingEnum b : OrderedRankingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderedRankingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderedRankingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderedRankingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderedRankingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderedRankingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDERED_RANKING = "orderedRanking";
  @SerializedName(SERIALIZED_NAME_ORDERED_RANKING)
  private OrderedRankingEnum orderedRanking;

  public IntegerPropertyOptions() {
  }

  public IntegerPropertyOptions integerFacetingOptions(IntegerFacetingOptions integerFacetingOptions) {
    this.integerFacetingOptions = integerFacetingOptions;
    return this;
  }

  /**
   * Get integerFacetingOptions
   * @return integerFacetingOptions
   */
  @javax.annotation.Nullable
  public IntegerFacetingOptions getIntegerFacetingOptions() {
    return integerFacetingOptions;
  }

  public void setIntegerFacetingOptions(IntegerFacetingOptions integerFacetingOptions) {
    this.integerFacetingOptions = integerFacetingOptions;
  }


  public IntegerPropertyOptions maximumValue(String maximumValue) {
    this.maximumValue = maximumValue;
    return this;
  }

  /**
   * The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.
   * @return maximumValue
   */
  @javax.annotation.Nullable
  public String getMaximumValue() {
    return maximumValue;
  }

  public void setMaximumValue(String maximumValue) {
    this.maximumValue = maximumValue;
  }


  public IntegerPropertyOptions minimumValue(String minimumValue) {
    this.minimumValue = minimumValue;
    return this;
  }

  /**
   * The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.
   * @return minimumValue
   */
  @javax.annotation.Nullable
  public String getMinimumValue() {
    return minimumValue;
  }

  public void setMinimumValue(String minimumValue) {
    this.minimumValue = minimumValue;
  }


  public IntegerPropertyOptions operatorOptions(IntegerOperatorOptions operatorOptions) {
    this.operatorOptions = operatorOptions;
    return this;
  }

  /**
   * Get operatorOptions
   * @return operatorOptions
   */
  @javax.annotation.Nullable
  public IntegerOperatorOptions getOperatorOptions() {
    return operatorOptions;
  }

  public void setOperatorOptions(IntegerOperatorOptions operatorOptions) {
    this.operatorOptions = operatorOptions;
  }


  public IntegerPropertyOptions orderedRanking(OrderedRankingEnum orderedRanking) {
    this.orderedRanking = orderedRanking;
    return this;
  }

  /**
   * Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.
   * @return orderedRanking
   */
  @javax.annotation.Nullable
  public OrderedRankingEnum getOrderedRanking() {
    return orderedRanking;
  }

  public void setOrderedRanking(OrderedRankingEnum orderedRanking) {
    this.orderedRanking = orderedRanking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegerPropertyOptions integerPropertyOptions = (IntegerPropertyOptions) o;
    return Objects.equals(this.integerFacetingOptions, integerPropertyOptions.integerFacetingOptions) &&
        Objects.equals(this.maximumValue, integerPropertyOptions.maximumValue) &&
        Objects.equals(this.minimumValue, integerPropertyOptions.minimumValue) &&
        Objects.equals(this.operatorOptions, integerPropertyOptions.operatorOptions) &&
        Objects.equals(this.orderedRanking, integerPropertyOptions.orderedRanking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integerFacetingOptions, maximumValue, minimumValue, operatorOptions, orderedRanking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegerPropertyOptions {\n");
    sb.append("    integerFacetingOptions: ").append(toIndentedString(integerFacetingOptions)).append("\n");
    sb.append("    maximumValue: ").append(toIndentedString(maximumValue)).append("\n");
    sb.append("    minimumValue: ").append(toIndentedString(minimumValue)).append("\n");
    sb.append("    operatorOptions: ").append(toIndentedString(operatorOptions)).append("\n");
    sb.append("    orderedRanking: ").append(toIndentedString(orderedRanking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("integerFacetingOptions");
    openapiFields.add("maximumValue");
    openapiFields.add("minimumValue");
    openapiFields.add("operatorOptions");
    openapiFields.add("orderedRanking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegerPropertyOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegerPropertyOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegerPropertyOptions is not found in the empty JSON string", IntegerPropertyOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegerPropertyOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegerPropertyOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `integerFacetingOptions`
      if (jsonObj.get("integerFacetingOptions") != null && !jsonObj.get("integerFacetingOptions").isJsonNull()) {
        IntegerFacetingOptions.validateJsonElement(jsonObj.get("integerFacetingOptions"));
      }
      if ((jsonObj.get("maximumValue") != null && !jsonObj.get("maximumValue").isJsonNull()) && !jsonObj.get("maximumValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumValue").toString()));
      }
      if ((jsonObj.get("minimumValue") != null && !jsonObj.get("minimumValue").isJsonNull()) && !jsonObj.get("minimumValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumValue").toString()));
      }
      // validate the optional field `operatorOptions`
      if (jsonObj.get("operatorOptions") != null && !jsonObj.get("operatorOptions").isJsonNull()) {
        IntegerOperatorOptions.validateJsonElement(jsonObj.get("operatorOptions"));
      }
      if ((jsonObj.get("orderedRanking") != null && !jsonObj.get("orderedRanking").isJsonNull()) && !jsonObj.get("orderedRanking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderedRanking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderedRanking").toString()));
      }
      // validate the optional field `orderedRanking`
      if (jsonObj.get("orderedRanking") != null && !jsonObj.get("orderedRanking").isJsonNull()) {
        OrderedRankingEnum.validateJsonElement(jsonObj.get("orderedRanking"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegerPropertyOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegerPropertyOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegerPropertyOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegerPropertyOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegerPropertyOptions>() {
           @Override
           public void write(JsonWriter out, IntegerPropertyOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegerPropertyOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegerPropertyOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegerPropertyOptions
   * @throws IOException if the JSON string is invalid with respect to IntegerPropertyOptions
   */
  public static IntegerPropertyOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegerPropertyOptions.class);
  }

  /**
   * Convert an instance of IntegerPropertyOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

