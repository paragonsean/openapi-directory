/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickCommonDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a mapping between a document type and its corresponding documents. Use for Work in Progress card in v1 homepage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickDocumentGroup {
  /**
   * Document group type
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    UNKNOWN_TYPE("UNKNOWN_TYPE"),
    
    ALL("ALL");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_PERSONALIZED_DOCUMENT = "personalizedDocument";
  @SerializedName(SERIALIZED_NAME_PERSONALIZED_DOCUMENT)
  private List<EnterpriseTopazSidekickCommonDocument> personalizedDocument = new ArrayList<>();

  public EnterpriseTopazSidekickDocumentGroup() {
  }

  @Deprecated
  public EnterpriseTopazSidekickDocumentGroup groupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Document group type
   * @return groupType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public GroupTypeEnum getGroupType() {
    return groupType;
  }

  @Deprecated
  public void setGroupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
  }


  public EnterpriseTopazSidekickDocumentGroup personalizedDocument(List<EnterpriseTopazSidekickCommonDocument> personalizedDocument) {
    this.personalizedDocument = personalizedDocument;
    return this;
  }

  public EnterpriseTopazSidekickDocumentGroup addPersonalizedDocumentItem(EnterpriseTopazSidekickCommonDocument personalizedDocumentItem) {
    if (this.personalizedDocument == null) {
      this.personalizedDocument = new ArrayList<>();
    }
    this.personalizedDocument.add(personalizedDocumentItem);
    return this;
  }

  /**
   * The list of corresponding documents.
   * @return personalizedDocument
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickCommonDocument> getPersonalizedDocument() {
    return personalizedDocument;
  }

  public void setPersonalizedDocument(List<EnterpriseTopazSidekickCommonDocument> personalizedDocument) {
    this.personalizedDocument = personalizedDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickDocumentGroup enterpriseTopazSidekickDocumentGroup = (EnterpriseTopazSidekickDocumentGroup) o;
    return Objects.equals(this.groupType, enterpriseTopazSidekickDocumentGroup.groupType) &&
        Objects.equals(this.personalizedDocument, enterpriseTopazSidekickDocumentGroup.personalizedDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupType, personalizedDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickDocumentGroup {\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    personalizedDocument: ").append(toIndentedString(personalizedDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupType");
    openapiFields.add("personalizedDocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickDocumentGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickDocumentGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickDocumentGroup is not found in the empty JSON string", EnterpriseTopazSidekickDocumentGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickDocumentGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickDocumentGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) && !jsonObj.get("groupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupType").toString()));
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        GroupTypeEnum.validateJsonElement(jsonObj.get("groupType"));
      }
      if (jsonObj.get("personalizedDocument") != null && !jsonObj.get("personalizedDocument").isJsonNull()) {
        JsonArray jsonArraypersonalizedDocument = jsonObj.getAsJsonArray("personalizedDocument");
        if (jsonArraypersonalizedDocument != null) {
          // ensure the json data is an array
          if (!jsonObj.get("personalizedDocument").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `personalizedDocument` to be an array in the JSON string but got `%s`", jsonObj.get("personalizedDocument").toString()));
          }

          // validate the optional field `personalizedDocument` (array)
          for (int i = 0; i < jsonArraypersonalizedDocument.size(); i++) {
            EnterpriseTopazSidekickCommonDocument.validateJsonElement(jsonArraypersonalizedDocument.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickDocumentGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickDocumentGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickDocumentGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickDocumentGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickDocumentGroup>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickDocumentGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickDocumentGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickDocumentGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickDocumentGroup
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickDocumentGroup
   */
  public static EnterpriseTopazSidekickDocumentGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickDocumentGroup.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickDocumentGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

