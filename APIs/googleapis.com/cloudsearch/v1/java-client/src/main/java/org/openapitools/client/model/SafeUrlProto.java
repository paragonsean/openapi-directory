/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message containing a string that is safe to use in URL contexts in DOM APIs and HTML documents, where the URL context does not refer to a resource that loads code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SafeUrlProto {
  public static final String SERIALIZED_NAME_PRIVATE_DO_NOT_ACCESS_OR_ELSE_SAFE_URL_WRAPPED_VALUE = "privateDoNotAccessOrElseSafeUrlWrappedValue";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DO_NOT_ACCESS_OR_ELSE_SAFE_URL_WRAPPED_VALUE)
  private String privateDoNotAccessOrElseSafeUrlWrappedValue;

  public SafeUrlProto() {
  }

  public SafeUrlProto privateDoNotAccessOrElseSafeUrlWrappedValue(String privateDoNotAccessOrElseSafeUrlWrappedValue) {
    this.privateDoNotAccessOrElseSafeUrlWrappedValue = privateDoNotAccessOrElseSafeUrlWrappedValue;
    return this;
  }

  /**
   * IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
   * @return privateDoNotAccessOrElseSafeUrlWrappedValue
   */
  @javax.annotation.Nullable
  public String getPrivateDoNotAccessOrElseSafeUrlWrappedValue() {
    return privateDoNotAccessOrElseSafeUrlWrappedValue;
  }

  public void setPrivateDoNotAccessOrElseSafeUrlWrappedValue(String privateDoNotAccessOrElseSafeUrlWrappedValue) {
    this.privateDoNotAccessOrElseSafeUrlWrappedValue = privateDoNotAccessOrElseSafeUrlWrappedValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SafeUrlProto safeUrlProto = (SafeUrlProto) o;
    return Objects.equals(this.privateDoNotAccessOrElseSafeUrlWrappedValue, safeUrlProto.privateDoNotAccessOrElseSafeUrlWrappedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateDoNotAccessOrElseSafeUrlWrappedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SafeUrlProto {\n");
    sb.append("    privateDoNotAccessOrElseSafeUrlWrappedValue: ").append(toIndentedString(privateDoNotAccessOrElseSafeUrlWrappedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privateDoNotAccessOrElseSafeUrlWrappedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SafeUrlProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SafeUrlProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SafeUrlProto is not found in the empty JSON string", SafeUrlProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SafeUrlProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SafeUrlProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateDoNotAccessOrElseSafeUrlWrappedValue") != null && !jsonObj.get("privateDoNotAccessOrElseSafeUrlWrappedValue").isJsonNull()) && !jsonObj.get("privateDoNotAccessOrElseSafeUrlWrappedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateDoNotAccessOrElseSafeUrlWrappedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateDoNotAccessOrElseSafeUrlWrappedValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SafeUrlProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SafeUrlProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SafeUrlProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SafeUrlProto.class));

       return (TypeAdapter<T>) new TypeAdapter<SafeUrlProto>() {
           @Override
           public void write(JsonWriter out, SafeUrlProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SafeUrlProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SafeUrlProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SafeUrlProto
   * @throws IOException if the JSON string is invalid with respect to SafeUrlProto
   */
  public static SafeUrlProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SafeUrlProto.class);
  }

  /**
   * Convert an instance of SafeUrlProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

