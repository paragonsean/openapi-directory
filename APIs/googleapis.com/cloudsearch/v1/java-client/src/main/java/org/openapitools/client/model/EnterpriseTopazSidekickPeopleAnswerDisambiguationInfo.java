/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for disambiguation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo {
  public static final String SERIALIZED_NAME_DISAMBIGUATION = "disambiguation";
  @SerializedName(SERIALIZED_NAME_DISAMBIGUATION)
  private List<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson> disambiguation = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo() {
  }

  public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo disambiguation(List<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson> disambiguation) {
    this.disambiguation = disambiguation;
    return this;
  }

  public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo addDisambiguationItem(EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson disambiguationItem) {
    if (this.disambiguation == null) {
      this.disambiguation = new ArrayList<>();
    }
    this.disambiguation.add(disambiguationItem);
    return this;
  }

  /**
   * A list of people that also matched the query. This list is not complete.
   * @return disambiguation
   */
  @javax.annotation.Nullable
  public List<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson> getDisambiguation() {
    return disambiguation;
  }

  public void setDisambiguation(List<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson> disambiguation) {
    this.disambiguation = disambiguation;
  }


  public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. \&quot;Bob&#39;s\&quot; -&gt; \&quot;Bob\&quot;).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo enterpriseTopazSidekickPeopleAnswerDisambiguationInfo = (EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo) o;
    return Objects.equals(this.disambiguation, enterpriseTopazSidekickPeopleAnswerDisambiguationInfo.disambiguation) &&
        Objects.equals(this.name, enterpriseTopazSidekickPeopleAnswerDisambiguationInfo.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disambiguation, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo {\n");
    sb.append("    disambiguation: ").append(toIndentedString(disambiguation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disambiguation");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo is not found in the empty JSON string", EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("disambiguation") != null && !jsonObj.get("disambiguation").isJsonNull()) {
        JsonArray jsonArraydisambiguation = jsonObj.getAsJsonArray("disambiguation");
        if (jsonArraydisambiguation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disambiguation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disambiguation` to be an array in the JSON string but got `%s`", jsonObj.get("disambiguation").toString()));
          }

          // validate the optional field `disambiguation` (array)
          for (int i = 0; i < jsonArraydisambiguation.size(); i++) {
            EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.validateJsonElement(jsonArraydisambiguation.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo
   */
  public static EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

