/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepositoryError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an item to be pushed to the indexing queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PushItem {
  public static final String SERIALIZED_NAME_CONTENT_HASH = "contentHash";
  @SerializedName(SERIALIZED_NAME_CONTENT_HASH)
  private String contentHash;

  public static final String SERIALIZED_NAME_METADATA_HASH = "metadataHash";
  @SerializedName(SERIALIZED_NAME_METADATA_HASH)
  private String metadataHash;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private byte[] payload;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_REPOSITORY_ERROR = "repositoryError";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ERROR)
  private RepositoryError repositoryError;

  public static final String SERIALIZED_NAME_STRUCTURED_DATA_HASH = "structuredDataHash";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_DATA_HASH)
  private String structuredDataHash;

  /**
   * The type of the push operation that defines the push behavior.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    MODIFIED("MODIFIED"),
    
    NOT_MODIFIED("NOT_MODIFIED"),
    
    REPOSITORY_ERROR("REPOSITORY_ERROR"),
    
    REQUEUE("REQUEUE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PushItem() {
  }

  public PushItem contentHash(String contentHash) {
    this.contentHash = contentHash;
    return this;
  }

  /**
   * Content hash of the item according to the repository. If specified, this is used to determine how to modify this item&#39;s status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
   * @return contentHash
   */
  @javax.annotation.Nullable
  public String getContentHash() {
    return contentHash;
  }

  public void setContentHash(String contentHash) {
    this.contentHash = contentHash;
  }


  public PushItem metadataHash(String metadataHash) {
    this.metadataHash = metadataHash;
    return this;
  }

  /**
   * The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item&#39;s status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
   * @return metadataHash
   */
  @javax.annotation.Nullable
  public String getMetadataHash() {
    return metadataHash;
  }

  public void setMetadataHash(String metadataHash) {
    this.metadataHash = metadataHash;
  }


  public PushItem payload(byte[] payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.
   * @return payload
   */
  @javax.annotation.Nullable
  public byte[] getPayload() {
    return payload;
  }

  public void setPayload(byte[] payload) {
    this.payload = payload;
  }


  public PushItem queue(String queue) {
    this.queue = queue;
    return this;
  }

  /**
   * Queue to which this item belongs. The &#x60;default&#x60; queue is chosen if this field is not specified. The maximum length is 512 characters.
   * @return queue
   */
  @javax.annotation.Nullable
  public String getQueue() {
    return queue;
  }

  public void setQueue(String queue) {
    this.queue = queue;
  }


  public PushItem repositoryError(RepositoryError repositoryError) {
    this.repositoryError = repositoryError;
    return this;
  }

  /**
   * Get repositoryError
   * @return repositoryError
   */
  @javax.annotation.Nullable
  public RepositoryError getRepositoryError() {
    return repositoryError;
  }

  public void setRepositoryError(RepositoryError repositoryError) {
    this.repositoryError = repositoryError;
  }


  public PushItem structuredDataHash(String structuredDataHash) {
    this.structuredDataHash = structuredDataHash;
    return this;
  }

  /**
   * Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item&#39;s status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
   * @return structuredDataHash
   */
  @javax.annotation.Nullable
  public String getStructuredDataHash() {
    return structuredDataHash;
  }

  public void setStructuredDataHash(String structuredDataHash) {
    this.structuredDataHash = structuredDataHash;
  }


  public PushItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the push operation that defines the push behavior.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushItem pushItem = (PushItem) o;
    return Objects.equals(this.contentHash, pushItem.contentHash) &&
        Objects.equals(this.metadataHash, pushItem.metadataHash) &&
        Arrays.equals(this.payload, pushItem.payload) &&
        Objects.equals(this.queue, pushItem.queue) &&
        Objects.equals(this.repositoryError, pushItem.repositoryError) &&
        Objects.equals(this.structuredDataHash, pushItem.structuredDataHash) &&
        Objects.equals(this.type, pushItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentHash, metadataHash, Arrays.hashCode(payload), queue, repositoryError, structuredDataHash, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushItem {\n");
    sb.append("    contentHash: ").append(toIndentedString(contentHash)).append("\n");
    sb.append("    metadataHash: ").append(toIndentedString(metadataHash)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    repositoryError: ").append(toIndentedString(repositoryError)).append("\n");
    sb.append("    structuredDataHash: ").append(toIndentedString(structuredDataHash)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentHash");
    openapiFields.add("metadataHash");
    openapiFields.add("payload");
    openapiFields.add("queue");
    openapiFields.add("repositoryError");
    openapiFields.add("structuredDataHash");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PushItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PushItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PushItem is not found in the empty JSON string", PushItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PushItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PushItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentHash") != null && !jsonObj.get("contentHash").isJsonNull()) && !jsonObj.get("contentHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentHash").toString()));
      }
      if ((jsonObj.get("metadataHash") != null && !jsonObj.get("metadataHash").isJsonNull()) && !jsonObj.get("metadataHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataHash").toString()));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      // validate the optional field `repositoryError`
      if (jsonObj.get("repositoryError") != null && !jsonObj.get("repositoryError").isJsonNull()) {
        RepositoryError.validateJsonElement(jsonObj.get("repositoryError"));
      }
      if ((jsonObj.get("structuredDataHash") != null && !jsonObj.get("structuredDataHash").isJsonNull()) && !jsonObj.get("structuredDataHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `structuredDataHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("structuredDataHash").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PushItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PushItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PushItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PushItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PushItem>() {
           @Override
           public void write(JsonWriter out, PushItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PushItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PushItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PushItem
   * @throws IOException if the JSON string is invalid with respect to PushItem
   */
  public static PushItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PushItem.class);
  }

  /**
   * Convert an instance of PushItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

