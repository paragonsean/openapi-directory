/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemCountByStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemCountByStatus {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_INDEXED_ITEMS_COUNT = "indexedItemsCount";
  @SerializedName(SERIALIZED_NAME_INDEXED_ITEMS_COUNT)
  private String indexedItemsCount;

  /**
   * Status of the items.
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    CODE_UNSPECIFIED("CODE_UNSPECIFIED"),
    
    ERROR("ERROR"),
    
    MODIFIED("MODIFIED"),
    
    NEW_ITEM("NEW_ITEM"),
    
    ACCEPTED("ACCEPTED");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(String value) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCodeEnum statusCode;

  public ItemCountByStatus() {
  }

  public ItemCountByStatus count(String count) {
    this.count = count;
    return this;
  }

  /**
   * Number of items matching the status code.
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public ItemCountByStatus indexedItemsCount(String indexedItemsCount) {
    this.indexedItemsCount = indexedItemsCount;
    return this;
  }

  /**
   * Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.
   * @return indexedItemsCount
   */
  @javax.annotation.Nullable
  public String getIndexedItemsCount() {
    return indexedItemsCount;
  }

  public void setIndexedItemsCount(String indexedItemsCount) {
    this.indexedItemsCount = indexedItemsCount;
  }


  public ItemCountByStatus statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Status of the items.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemCountByStatus itemCountByStatus = (ItemCountByStatus) o;
    return Objects.equals(this.count, itemCountByStatus.count) &&
        Objects.equals(this.indexedItemsCount, itemCountByStatus.indexedItemsCount) &&
        Objects.equals(this.statusCode, itemCountByStatus.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, indexedItemsCount, statusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemCountByStatus {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    indexedItemsCount: ").append(toIndentedString(indexedItemsCount)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("indexedItemsCount");
    openapiFields.add("statusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemCountByStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemCountByStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemCountByStatus is not found in the empty JSON string", ItemCountByStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemCountByStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemCountByStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("indexedItemsCount") != null && !jsonObj.get("indexedItemsCount").isJsonNull()) && !jsonObj.get("indexedItemsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexedItemsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexedItemsCount").toString()));
      }
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StatusCodeEnum.validateJsonElement(jsonObj.get("statusCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemCountByStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemCountByStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemCountByStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemCountByStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemCountByStatus>() {
           @Override
           public void write(JsonWriter out, ItemCountByStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemCountByStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemCountByStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemCountByStatus
   * @throws IOException if the JSON string is invalid with respect to ItemCountByStatus
   */
  public static ItemCountByStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemCountByStatus.class);
  }

  /**
   * Convert an instance of ItemCountByStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

