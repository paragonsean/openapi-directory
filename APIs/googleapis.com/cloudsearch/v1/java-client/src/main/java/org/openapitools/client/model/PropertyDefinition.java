/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BooleanPropertyOptions;
import org.openapitools.client.model.DatePropertyOptions;
import org.openapitools.client.model.DoublePropertyOptions;
import org.openapitools.client.model.EnumPropertyOptions;
import org.openapitools.client.model.HtmlPropertyOptions;
import org.openapitools.client.model.IntegerPropertyOptions;
import org.openapitools.client.model.ObjectPropertyOptions;
import org.openapitools.client.model.PropertyDisplayOptions;
import org.openapitools.client.model.TextPropertyOptions;
import org.openapitools.client.model.TimestampPropertyOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a property within an object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyDefinition {
  public static final String SERIALIZED_NAME_BOOLEAN_PROPERTY_OPTIONS = "booleanPropertyOptions";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_PROPERTY_OPTIONS)
  private BooleanPropertyOptions booleanPropertyOptions;

  public static final String SERIALIZED_NAME_DATE_PROPERTY_OPTIONS = "datePropertyOptions";
  @SerializedName(SERIALIZED_NAME_DATE_PROPERTY_OPTIONS)
  private DatePropertyOptions datePropertyOptions;

  public static final String SERIALIZED_NAME_DISPLAY_OPTIONS = "displayOptions";
  @SerializedName(SERIALIZED_NAME_DISPLAY_OPTIONS)
  private PropertyDisplayOptions displayOptions;

  public static final String SERIALIZED_NAME_DOUBLE_PROPERTY_OPTIONS = "doublePropertyOptions";
  @SerializedName(SERIALIZED_NAME_DOUBLE_PROPERTY_OPTIONS)
  private DoublePropertyOptions doublePropertyOptions;

  public static final String SERIALIZED_NAME_ENUM_PROPERTY_OPTIONS = "enumPropertyOptions";
  @SerializedName(SERIALIZED_NAME_ENUM_PROPERTY_OPTIONS)
  private EnumPropertyOptions enumPropertyOptions;

  public static final String SERIALIZED_NAME_HTML_PROPERTY_OPTIONS = "htmlPropertyOptions";
  @SerializedName(SERIALIZED_NAME_HTML_PROPERTY_OPTIONS)
  private HtmlPropertyOptions htmlPropertyOptions;

  public static final String SERIALIZED_NAME_INTEGER_PROPERTY_OPTIONS = "integerPropertyOptions";
  @SerializedName(SERIALIZED_NAME_INTEGER_PROPERTY_OPTIONS)
  private IntegerPropertyOptions integerPropertyOptions;

  public static final String SERIALIZED_NAME_IS_FACETABLE = "isFacetable";
  @SerializedName(SERIALIZED_NAME_IS_FACETABLE)
  private Boolean isFacetable;

  public static final String SERIALIZED_NAME_IS_REPEATABLE = "isRepeatable";
  @SerializedName(SERIALIZED_NAME_IS_REPEATABLE)
  private Boolean isRepeatable;

  public static final String SERIALIZED_NAME_IS_RETURNABLE = "isReturnable";
  @SerializedName(SERIALIZED_NAME_IS_RETURNABLE)
  private Boolean isReturnable;

  public static final String SERIALIZED_NAME_IS_SORTABLE = "isSortable";
  @SerializedName(SERIALIZED_NAME_IS_SORTABLE)
  private Boolean isSortable;

  public static final String SERIALIZED_NAME_IS_SUGGESTABLE = "isSuggestable";
  @SerializedName(SERIALIZED_NAME_IS_SUGGESTABLE)
  private Boolean isSuggestable;

  public static final String SERIALIZED_NAME_IS_WILDCARD_SEARCHABLE = "isWildcardSearchable";
  @SerializedName(SERIALIZED_NAME_IS_WILDCARD_SEARCHABLE)
  private Boolean isWildcardSearchable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT_PROPERTY_OPTIONS = "objectPropertyOptions";
  @SerializedName(SERIALIZED_NAME_OBJECT_PROPERTY_OPTIONS)
  private ObjectPropertyOptions objectPropertyOptions;

  public static final String SERIALIZED_NAME_TEXT_PROPERTY_OPTIONS = "textPropertyOptions";
  @SerializedName(SERIALIZED_NAME_TEXT_PROPERTY_OPTIONS)
  private TextPropertyOptions textPropertyOptions;

  public static final String SERIALIZED_NAME_TIMESTAMP_PROPERTY_OPTIONS = "timestampPropertyOptions";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_PROPERTY_OPTIONS)
  private TimestampPropertyOptions timestampPropertyOptions;

  public PropertyDefinition() {
  }

  public PropertyDefinition booleanPropertyOptions(BooleanPropertyOptions booleanPropertyOptions) {
    this.booleanPropertyOptions = booleanPropertyOptions;
    return this;
  }

  /**
   * Get booleanPropertyOptions
   * @return booleanPropertyOptions
   */
  @javax.annotation.Nullable
  public BooleanPropertyOptions getBooleanPropertyOptions() {
    return booleanPropertyOptions;
  }

  public void setBooleanPropertyOptions(BooleanPropertyOptions booleanPropertyOptions) {
    this.booleanPropertyOptions = booleanPropertyOptions;
  }


  public PropertyDefinition datePropertyOptions(DatePropertyOptions datePropertyOptions) {
    this.datePropertyOptions = datePropertyOptions;
    return this;
  }

  /**
   * Get datePropertyOptions
   * @return datePropertyOptions
   */
  @javax.annotation.Nullable
  public DatePropertyOptions getDatePropertyOptions() {
    return datePropertyOptions;
  }

  public void setDatePropertyOptions(DatePropertyOptions datePropertyOptions) {
    this.datePropertyOptions = datePropertyOptions;
  }


  public PropertyDefinition displayOptions(PropertyDisplayOptions displayOptions) {
    this.displayOptions = displayOptions;
    return this;
  }

  /**
   * Get displayOptions
   * @return displayOptions
   */
  @javax.annotation.Nullable
  public PropertyDisplayOptions getDisplayOptions() {
    return displayOptions;
  }

  public void setDisplayOptions(PropertyDisplayOptions displayOptions) {
    this.displayOptions = displayOptions;
  }


  public PropertyDefinition doublePropertyOptions(DoublePropertyOptions doublePropertyOptions) {
    this.doublePropertyOptions = doublePropertyOptions;
    return this;
  }

  /**
   * Get doublePropertyOptions
   * @return doublePropertyOptions
   */
  @javax.annotation.Nullable
  public DoublePropertyOptions getDoublePropertyOptions() {
    return doublePropertyOptions;
  }

  public void setDoublePropertyOptions(DoublePropertyOptions doublePropertyOptions) {
    this.doublePropertyOptions = doublePropertyOptions;
  }


  public PropertyDefinition enumPropertyOptions(EnumPropertyOptions enumPropertyOptions) {
    this.enumPropertyOptions = enumPropertyOptions;
    return this;
  }

  /**
   * Get enumPropertyOptions
   * @return enumPropertyOptions
   */
  @javax.annotation.Nullable
  public EnumPropertyOptions getEnumPropertyOptions() {
    return enumPropertyOptions;
  }

  public void setEnumPropertyOptions(EnumPropertyOptions enumPropertyOptions) {
    this.enumPropertyOptions = enumPropertyOptions;
  }


  public PropertyDefinition htmlPropertyOptions(HtmlPropertyOptions htmlPropertyOptions) {
    this.htmlPropertyOptions = htmlPropertyOptions;
    return this;
  }

  /**
   * Get htmlPropertyOptions
   * @return htmlPropertyOptions
   */
  @javax.annotation.Nullable
  public HtmlPropertyOptions getHtmlPropertyOptions() {
    return htmlPropertyOptions;
  }

  public void setHtmlPropertyOptions(HtmlPropertyOptions htmlPropertyOptions) {
    this.htmlPropertyOptions = htmlPropertyOptions;
  }


  public PropertyDefinition integerPropertyOptions(IntegerPropertyOptions integerPropertyOptions) {
    this.integerPropertyOptions = integerPropertyOptions;
    return this;
  }

  /**
   * Get integerPropertyOptions
   * @return integerPropertyOptions
   */
  @javax.annotation.Nullable
  public IntegerPropertyOptions getIntegerPropertyOptions() {
    return integerPropertyOptions;
  }

  public void setIntegerPropertyOptions(IntegerPropertyOptions integerPropertyOptions) {
    this.integerPropertyOptions = integerPropertyOptions;
  }


  public PropertyDefinition isFacetable(Boolean isFacetable) {
    this.isFacetable = isFacetable;
    return this;
  }

  /**
   * Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.
   * @return isFacetable
   */
  @javax.annotation.Nullable
  public Boolean getIsFacetable() {
    return isFacetable;
  }

  public void setIsFacetable(Boolean isFacetable) {
    this.isFacetable = isFacetable;
  }


  public PropertyDefinition isRepeatable(Boolean isRepeatable) {
    this.isRepeatable = isRepeatable;
    return this;
  }

  /**
   * Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.
   * @return isRepeatable
   */
  @javax.annotation.Nullable
  public Boolean getIsRepeatable() {
    return isRepeatable;
  }

  public void setIsRepeatable(Boolean isRepeatable) {
    this.isRepeatable = isRepeatable;
  }


  public PropertyDefinition isReturnable(Boolean isReturnable) {
    this.isReturnable = isReturnable;
    return this;
  }

  /**
   * Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.
   * @return isReturnable
   */
  @javax.annotation.Nullable
  public Boolean getIsReturnable() {
    return isReturnable;
  }

  public void setIsReturnable(Boolean isReturnable) {
    this.isReturnable = isReturnable;
  }


  public PropertyDefinition isSortable(Boolean isSortable) {
    this.isSortable = isSortable;
    return this;
  }

  /**
   * Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.
   * @return isSortable
   */
  @javax.annotation.Nullable
  public Boolean getIsSortable() {
    return isSortable;
  }

  public void setIsSortable(Boolean isSortable) {
    this.isSortable = isSortable;
  }


  public PropertyDefinition isSuggestable(Boolean isSuggestable) {
    this.isSuggestable = isSuggestable;
    return this;
  }

  /**
   * Indicates that the property can be used for generating query suggestions.
   * @return isSuggestable
   */
  @javax.annotation.Nullable
  public Boolean getIsSuggestable() {
    return isSuggestable;
  }

  public void setIsSuggestable(Boolean isSuggestable) {
    this.isSuggestable = isSuggestable;
  }


  public PropertyDefinition isWildcardSearchable(Boolean isWildcardSearchable) {
    this.isWildcardSearchable = isWildcardSearchable;
    return this;
  }

  /**
   * Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)
   * @return isWildcardSearchable
   */
  @javax.annotation.Nullable
  public Boolean getIsWildcardSearchable() {
    return isWildcardSearchable;
  }

  public void setIsWildcardSearchable(Boolean isWildcardSearchable) {
    this.isWildcardSearchable = isWildcardSearchable;
  }


  public PropertyDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PropertyDefinition objectPropertyOptions(ObjectPropertyOptions objectPropertyOptions) {
    this.objectPropertyOptions = objectPropertyOptions;
    return this;
  }

  /**
   * Get objectPropertyOptions
   * @return objectPropertyOptions
   */
  @javax.annotation.Nullable
  public ObjectPropertyOptions getObjectPropertyOptions() {
    return objectPropertyOptions;
  }

  public void setObjectPropertyOptions(ObjectPropertyOptions objectPropertyOptions) {
    this.objectPropertyOptions = objectPropertyOptions;
  }


  public PropertyDefinition textPropertyOptions(TextPropertyOptions textPropertyOptions) {
    this.textPropertyOptions = textPropertyOptions;
    return this;
  }

  /**
   * Get textPropertyOptions
   * @return textPropertyOptions
   */
  @javax.annotation.Nullable
  public TextPropertyOptions getTextPropertyOptions() {
    return textPropertyOptions;
  }

  public void setTextPropertyOptions(TextPropertyOptions textPropertyOptions) {
    this.textPropertyOptions = textPropertyOptions;
  }


  public PropertyDefinition timestampPropertyOptions(TimestampPropertyOptions timestampPropertyOptions) {
    this.timestampPropertyOptions = timestampPropertyOptions;
    return this;
  }

  /**
   * Get timestampPropertyOptions
   * @return timestampPropertyOptions
   */
  @javax.annotation.Nullable
  public TimestampPropertyOptions getTimestampPropertyOptions() {
    return timestampPropertyOptions;
  }

  public void setTimestampPropertyOptions(TimestampPropertyOptions timestampPropertyOptions) {
    this.timestampPropertyOptions = timestampPropertyOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDefinition propertyDefinition = (PropertyDefinition) o;
    return Objects.equals(this.booleanPropertyOptions, propertyDefinition.booleanPropertyOptions) &&
        Objects.equals(this.datePropertyOptions, propertyDefinition.datePropertyOptions) &&
        Objects.equals(this.displayOptions, propertyDefinition.displayOptions) &&
        Objects.equals(this.doublePropertyOptions, propertyDefinition.doublePropertyOptions) &&
        Objects.equals(this.enumPropertyOptions, propertyDefinition.enumPropertyOptions) &&
        Objects.equals(this.htmlPropertyOptions, propertyDefinition.htmlPropertyOptions) &&
        Objects.equals(this.integerPropertyOptions, propertyDefinition.integerPropertyOptions) &&
        Objects.equals(this.isFacetable, propertyDefinition.isFacetable) &&
        Objects.equals(this.isRepeatable, propertyDefinition.isRepeatable) &&
        Objects.equals(this.isReturnable, propertyDefinition.isReturnable) &&
        Objects.equals(this.isSortable, propertyDefinition.isSortable) &&
        Objects.equals(this.isSuggestable, propertyDefinition.isSuggestable) &&
        Objects.equals(this.isWildcardSearchable, propertyDefinition.isWildcardSearchable) &&
        Objects.equals(this.name, propertyDefinition.name) &&
        Objects.equals(this.objectPropertyOptions, propertyDefinition.objectPropertyOptions) &&
        Objects.equals(this.textPropertyOptions, propertyDefinition.textPropertyOptions) &&
        Objects.equals(this.timestampPropertyOptions, propertyDefinition.timestampPropertyOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(booleanPropertyOptions, datePropertyOptions, displayOptions, doublePropertyOptions, enumPropertyOptions, htmlPropertyOptions, integerPropertyOptions, isFacetable, isRepeatable, isReturnable, isSortable, isSuggestable, isWildcardSearchable, name, objectPropertyOptions, textPropertyOptions, timestampPropertyOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDefinition {\n");
    sb.append("    booleanPropertyOptions: ").append(toIndentedString(booleanPropertyOptions)).append("\n");
    sb.append("    datePropertyOptions: ").append(toIndentedString(datePropertyOptions)).append("\n");
    sb.append("    displayOptions: ").append(toIndentedString(displayOptions)).append("\n");
    sb.append("    doublePropertyOptions: ").append(toIndentedString(doublePropertyOptions)).append("\n");
    sb.append("    enumPropertyOptions: ").append(toIndentedString(enumPropertyOptions)).append("\n");
    sb.append("    htmlPropertyOptions: ").append(toIndentedString(htmlPropertyOptions)).append("\n");
    sb.append("    integerPropertyOptions: ").append(toIndentedString(integerPropertyOptions)).append("\n");
    sb.append("    isFacetable: ").append(toIndentedString(isFacetable)).append("\n");
    sb.append("    isRepeatable: ").append(toIndentedString(isRepeatable)).append("\n");
    sb.append("    isReturnable: ").append(toIndentedString(isReturnable)).append("\n");
    sb.append("    isSortable: ").append(toIndentedString(isSortable)).append("\n");
    sb.append("    isSuggestable: ").append(toIndentedString(isSuggestable)).append("\n");
    sb.append("    isWildcardSearchable: ").append(toIndentedString(isWildcardSearchable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectPropertyOptions: ").append(toIndentedString(objectPropertyOptions)).append("\n");
    sb.append("    textPropertyOptions: ").append(toIndentedString(textPropertyOptions)).append("\n");
    sb.append("    timestampPropertyOptions: ").append(toIndentedString(timestampPropertyOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("booleanPropertyOptions");
    openapiFields.add("datePropertyOptions");
    openapiFields.add("displayOptions");
    openapiFields.add("doublePropertyOptions");
    openapiFields.add("enumPropertyOptions");
    openapiFields.add("htmlPropertyOptions");
    openapiFields.add("integerPropertyOptions");
    openapiFields.add("isFacetable");
    openapiFields.add("isRepeatable");
    openapiFields.add("isReturnable");
    openapiFields.add("isSortable");
    openapiFields.add("isSuggestable");
    openapiFields.add("isWildcardSearchable");
    openapiFields.add("name");
    openapiFields.add("objectPropertyOptions");
    openapiFields.add("textPropertyOptions");
    openapiFields.add("timestampPropertyOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyDefinition is not found in the empty JSON string", PropertyDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `booleanPropertyOptions`
      if (jsonObj.get("booleanPropertyOptions") != null && !jsonObj.get("booleanPropertyOptions").isJsonNull()) {
        BooleanPropertyOptions.validateJsonElement(jsonObj.get("booleanPropertyOptions"));
      }
      // validate the optional field `datePropertyOptions`
      if (jsonObj.get("datePropertyOptions") != null && !jsonObj.get("datePropertyOptions").isJsonNull()) {
        DatePropertyOptions.validateJsonElement(jsonObj.get("datePropertyOptions"));
      }
      // validate the optional field `displayOptions`
      if (jsonObj.get("displayOptions") != null && !jsonObj.get("displayOptions").isJsonNull()) {
        PropertyDisplayOptions.validateJsonElement(jsonObj.get("displayOptions"));
      }
      // validate the optional field `doublePropertyOptions`
      if (jsonObj.get("doublePropertyOptions") != null && !jsonObj.get("doublePropertyOptions").isJsonNull()) {
        DoublePropertyOptions.validateJsonElement(jsonObj.get("doublePropertyOptions"));
      }
      // validate the optional field `enumPropertyOptions`
      if (jsonObj.get("enumPropertyOptions") != null && !jsonObj.get("enumPropertyOptions").isJsonNull()) {
        EnumPropertyOptions.validateJsonElement(jsonObj.get("enumPropertyOptions"));
      }
      // validate the optional field `htmlPropertyOptions`
      if (jsonObj.get("htmlPropertyOptions") != null && !jsonObj.get("htmlPropertyOptions").isJsonNull()) {
        HtmlPropertyOptions.validateJsonElement(jsonObj.get("htmlPropertyOptions"));
      }
      // validate the optional field `integerPropertyOptions`
      if (jsonObj.get("integerPropertyOptions") != null && !jsonObj.get("integerPropertyOptions").isJsonNull()) {
        IntegerPropertyOptions.validateJsonElement(jsonObj.get("integerPropertyOptions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `objectPropertyOptions`
      if (jsonObj.get("objectPropertyOptions") != null && !jsonObj.get("objectPropertyOptions").isJsonNull()) {
        ObjectPropertyOptions.validateJsonElement(jsonObj.get("objectPropertyOptions"));
      }
      // validate the optional field `textPropertyOptions`
      if (jsonObj.get("textPropertyOptions") != null && !jsonObj.get("textPropertyOptions").isJsonNull()) {
        TextPropertyOptions.validateJsonElement(jsonObj.get("textPropertyOptions"));
      }
      // validate the optional field `timestampPropertyOptions`
      if (jsonObj.get("timestampPropertyOptions") != null && !jsonObj.get("timestampPropertyOptions").isJsonNull()) {
        TimestampPropertyOptions.validateJsonElement(jsonObj.get("timestampPropertyOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyDefinition>() {
           @Override
           public void write(JsonWriter out, PropertyDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyDefinition
   * @throws IOException if the JSON string is invalid with respect to PropertyDefinition
   */
  public static PropertyDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyDefinition.class);
  }

  /**
   * Convert an instance of PropertyDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

