/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseTopazSidekickTimeSlot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about scheduled meetings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:46.641752-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseTopazSidekickScheduledMeeting {
  public static final String SERIALIZED_NAME_MEETING_LOCATION = "meetingLocation";
  @SerializedName(SERIALIZED_NAME_MEETING_LOCATION)
  private String meetingLocation;

  public static final String SERIALIZED_NAME_MEETING_TIME = "meetingTime";
  @SerializedName(SERIALIZED_NAME_MEETING_TIME)
  private EnterpriseTopazSidekickTimeSlot meetingTime;

  public static final String SERIALIZED_NAME_MEETING_TITLE = "meetingTitle";
  @SerializedName(SERIALIZED_NAME_MEETING_TITLE)
  private String meetingTitle;

  public EnterpriseTopazSidekickScheduledMeeting() {
  }

  public EnterpriseTopazSidekickScheduledMeeting meetingLocation(String meetingLocation) {
    this.meetingLocation = meetingLocation;
    return this;
  }

  /**
   * The meeting location.
   * @return meetingLocation
   */
  @javax.annotation.Nullable
  public String getMeetingLocation() {
    return meetingLocation;
  }

  public void setMeetingLocation(String meetingLocation) {
    this.meetingLocation = meetingLocation;
  }


  public EnterpriseTopazSidekickScheduledMeeting meetingTime(EnterpriseTopazSidekickTimeSlot meetingTime) {
    this.meetingTime = meetingTime;
    return this;
  }

  /**
   * Get meetingTime
   * @return meetingTime
   */
  @javax.annotation.Nullable
  public EnterpriseTopazSidekickTimeSlot getMeetingTime() {
    return meetingTime;
  }

  public void setMeetingTime(EnterpriseTopazSidekickTimeSlot meetingTime) {
    this.meetingTime = meetingTime;
  }


  public EnterpriseTopazSidekickScheduledMeeting meetingTitle(String meetingTitle) {
    this.meetingTitle = meetingTitle;
    return this;
  }

  /**
   * The meeting title.
   * @return meetingTitle
   */
  @javax.annotation.Nullable
  public String getMeetingTitle() {
    return meetingTitle;
  }

  public void setMeetingTitle(String meetingTitle) {
    this.meetingTitle = meetingTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseTopazSidekickScheduledMeeting enterpriseTopazSidekickScheduledMeeting = (EnterpriseTopazSidekickScheduledMeeting) o;
    return Objects.equals(this.meetingLocation, enterpriseTopazSidekickScheduledMeeting.meetingLocation) &&
        Objects.equals(this.meetingTime, enterpriseTopazSidekickScheduledMeeting.meetingTime) &&
        Objects.equals(this.meetingTitle, enterpriseTopazSidekickScheduledMeeting.meetingTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meetingLocation, meetingTime, meetingTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseTopazSidekickScheduledMeeting {\n");
    sb.append("    meetingLocation: ").append(toIndentedString(meetingLocation)).append("\n");
    sb.append("    meetingTime: ").append(toIndentedString(meetingTime)).append("\n");
    sb.append("    meetingTitle: ").append(toIndentedString(meetingTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meetingLocation");
    openapiFields.add("meetingTime");
    openapiFields.add("meetingTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseTopazSidekickScheduledMeeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseTopazSidekickScheduledMeeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseTopazSidekickScheduledMeeting is not found in the empty JSON string", EnterpriseTopazSidekickScheduledMeeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseTopazSidekickScheduledMeeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseTopazSidekickScheduledMeeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("meetingLocation") != null && !jsonObj.get("meetingLocation").isJsonNull()) && !jsonObj.get("meetingLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingLocation").toString()));
      }
      // validate the optional field `meetingTime`
      if (jsonObj.get("meetingTime") != null && !jsonObj.get("meetingTime").isJsonNull()) {
        EnterpriseTopazSidekickTimeSlot.validateJsonElement(jsonObj.get("meetingTime"));
      }
      if ((jsonObj.get("meetingTitle") != null && !jsonObj.get("meetingTitle").isJsonNull()) && !jsonObj.get("meetingTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseTopazSidekickScheduledMeeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseTopazSidekickScheduledMeeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseTopazSidekickScheduledMeeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseTopazSidekickScheduledMeeting.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseTopazSidekickScheduledMeeting>() {
           @Override
           public void write(JsonWriter out, EnterpriseTopazSidekickScheduledMeeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseTopazSidekickScheduledMeeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseTopazSidekickScheduledMeeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseTopazSidekickScheduledMeeting
   * @throws IOException if the JSON string is invalid with respect to EnterpriseTopazSidekickScheduledMeeting
   */
  public static EnterpriseTopazSidekickScheduledMeeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseTopazSidekickScheduledMeeting.class);
  }

  /**
   * Convert an instance of EnterpriseTopazSidekickScheduledMeeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

