/*
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteQueueItemsRequest;
import org.openapitools.client.model.IndexItemRequest;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.ListItemsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PollItemsRequest;
import org.openapitools.client.model.PollItemsResponse;
import org.openapitools.client.model.PushItemRequest;
import io.swagger.v3.oas.annotations.media.Schema;
import org.openapitools.client.model.StartUploadItemRequest;
import org.openapitools.client.model.UnreserveItemsRequest;
import org.openapitools.client.model.UpdateSchemaRequest;
import org.openapitools.client.model.UploadItemRef;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IndexingApi
 */
@Disabled
public class IndexingApiTest {

    private final IndexingApi api = new IndexingApi();

    /**
     * Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesDeleteSchemaTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean debugOptionsEnableDebugging = null;
        Operation response = api.cloudsearchIndexingDatasourcesDeleteSchema(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, debugOptionsEnableDebugging);
        // TODO: test validations
    }

    /**
     * Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesGetSchemaTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean debugOptionsEnableDebugging = null;
        Schema response = api.cloudsearchIndexingDatasourcesGetSchema(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, debugOptionsEnableDebugging);
        // TODO: test validations
    }

    /**
     * Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String connectorName = null;
        Boolean debugOptionsEnableDebugging = null;
        String mode = null;
        String version = null;
        Operation response = api.cloudsearchIndexingDatasourcesItemsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connectorName, debugOptionsEnableDebugging, mode, version);
        // TODO: test validations
    }

    /**
     * Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsDeleteQueueItemsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeleteQueueItemsRequest deleteQueueItemsRequest = null;
        Operation response = api.cloudsearchIndexingDatasourcesItemsDeleteQueueItems(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deleteQueueItemsRequest);
        // TODO: test validations
    }

    /**
     * Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String connectorName = null;
        Boolean debugOptionsEnableDebugging = null;
        Item response = api.cloudsearchIndexingDatasourcesItemsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connectorName, debugOptionsEnableDebugging);
        // TODO: test validations
    }

    /**
     * Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsIndexTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        IndexItemRequest indexItemRequest = null;
        Operation response = api.cloudsearchIndexingDatasourcesItemsIndex(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, indexItemRequest);
        // TODO: test validations
    }

    /**
     * Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean brief = null;
        String connectorName = null;
        Boolean debugOptionsEnableDebugging = null;
        Integer pageSize = null;
        String pageToken = null;
        ListItemsResponse response = api.cloudsearchIndexingDatasourcesItemsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, brief, connectorName, debugOptionsEnableDebugging, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsPollTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PollItemsRequest pollItemsRequest = null;
        PollItemsResponse response = api.cloudsearchIndexingDatasourcesItemsPoll(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pollItemsRequest);
        // TODO: test validations
    }

    /**
     * Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsPushTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PushItemRequest pushItemRequest = null;
        Item response = api.cloudsearchIndexingDatasourcesItemsPush(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pushItemRequest);
        // TODO: test validations
    }

    /**
     * Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsUnreserveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnreserveItemsRequest unreserveItemsRequest = null;
        Operation response = api.cloudsearchIndexingDatasourcesItemsUnreserve(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unreserveItemsRequest);
        // TODO: test validations
    }

    /**
     * Creates an upload session for uploading item content. For items smaller than 100 KB, it&#39;s easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesItemsUploadTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartUploadItemRequest startUploadItemRequest = null;
        UploadItemRef response = api.cloudsearchIndexingDatasourcesItemsUpload(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startUploadItemRequest);
        // TODO: test validations
    }

    /**
     * Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudsearchIndexingDatasourcesUpdateSchemaTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateSchemaRequest updateSchemaRequest = null;
        Operation response = api.cloudsearchIndexingDatasourcesUpdateSchema(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateSchemaRequest);
        // TODO: test validations
    }

}
