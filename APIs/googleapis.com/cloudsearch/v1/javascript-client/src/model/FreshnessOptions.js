/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FreshnessOptions model module.
 * @module model/FreshnessOptions
 * @version v1
 */
class FreshnessOptions {
    /**
     * Constructs a new <code>FreshnessOptions</code>.
     * Indicates which freshness property to use when adjusting search ranking for an item. Fresher, more recent dates indicate higher quality. Use the freshness option property that best works with your data. For fileshare documents, last modified time is most relevant. For calendar event data, the time when the event occurs is a more relevant freshness indicator. In this way, calendar events that occur closer to the time of the search query are considered higher quality and ranked accordingly.
     * @alias module:model/FreshnessOptions
     */
    constructor() { 
        
        FreshnessOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FreshnessOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FreshnessOptions} obj Optional instance to populate.
     * @return {module:model/FreshnessOptions} The populated <code>FreshnessOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FreshnessOptions();

            if (data.hasOwnProperty('freshnessDuration')) {
                obj['freshnessDuration'] = ApiClient.convertToType(data['freshnessDuration'], 'String');
            }
            if (data.hasOwnProperty('freshnessProperty')) {
                obj['freshnessProperty'] = ApiClient.convertToType(data['freshnessProperty'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FreshnessOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FreshnessOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['freshnessDuration'] && !(typeof data['freshnessDuration'] === 'string' || data['freshnessDuration'] instanceof String)) {
            throw new Error("Expected the field `freshnessDuration` to be a primitive type in the JSON string but got " + data['freshnessDuration']);
        }
        // ensure the json data is a string
        if (data['freshnessProperty'] && !(typeof data['freshnessProperty'] === 'string' || data['freshnessProperty'] instanceof String)) {
            throw new Error("Expected the field `freshnessProperty` to be a primitive type in the JSON string but got " + data['freshnessProperty']);
        }

        return true;
    }


}



/**
 * The duration after which an object should be considered stale. The default value is 180 days (in seconds).
 * @member {String} freshnessDuration
 */
FreshnessOptions.prototype['freshnessDuration'] = undefined;

/**
 * This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.
 * @member {String} freshnessProperty
 */
FreshnessOptions.prototype['freshnessProperty'] = undefined;






export default FreshnessOptions;

