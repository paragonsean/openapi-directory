/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BooleanPropertyOptions from './BooleanPropertyOptions';
import DatePropertyOptions from './DatePropertyOptions';
import DoublePropertyOptions from './DoublePropertyOptions';
import EnumPropertyOptions from './EnumPropertyOptions';
import HtmlPropertyOptions from './HtmlPropertyOptions';
import IntegerPropertyOptions from './IntegerPropertyOptions';
import ObjectPropertyOptions from './ObjectPropertyOptions';
import PropertyDisplayOptions from './PropertyDisplayOptions';
import TextPropertyOptions from './TextPropertyOptions';
import TimestampPropertyOptions from './TimestampPropertyOptions';

/**
 * The PropertyDefinition model module.
 * @module model/PropertyDefinition
 * @version v1
 */
class PropertyDefinition {
    /**
     * Constructs a new <code>PropertyDefinition</code>.
     * The definition of a property within an object.
     * @alias module:model/PropertyDefinition
     */
    constructor() { 
        
        PropertyDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyDefinition} obj Optional instance to populate.
     * @return {module:model/PropertyDefinition} The populated <code>PropertyDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyDefinition();

            if (data.hasOwnProperty('booleanPropertyOptions')) {
                obj['booleanPropertyOptions'] = BooleanPropertyOptions.constructFromObject(data['booleanPropertyOptions']);
            }
            if (data.hasOwnProperty('datePropertyOptions')) {
                obj['datePropertyOptions'] = DatePropertyOptions.constructFromObject(data['datePropertyOptions']);
            }
            if (data.hasOwnProperty('displayOptions')) {
                obj['displayOptions'] = PropertyDisplayOptions.constructFromObject(data['displayOptions']);
            }
            if (data.hasOwnProperty('doublePropertyOptions')) {
                obj['doublePropertyOptions'] = DoublePropertyOptions.constructFromObject(data['doublePropertyOptions']);
            }
            if (data.hasOwnProperty('enumPropertyOptions')) {
                obj['enumPropertyOptions'] = EnumPropertyOptions.constructFromObject(data['enumPropertyOptions']);
            }
            if (data.hasOwnProperty('htmlPropertyOptions')) {
                obj['htmlPropertyOptions'] = HtmlPropertyOptions.constructFromObject(data['htmlPropertyOptions']);
            }
            if (data.hasOwnProperty('integerPropertyOptions')) {
                obj['integerPropertyOptions'] = IntegerPropertyOptions.constructFromObject(data['integerPropertyOptions']);
            }
            if (data.hasOwnProperty('isFacetable')) {
                obj['isFacetable'] = ApiClient.convertToType(data['isFacetable'], 'Boolean');
            }
            if (data.hasOwnProperty('isRepeatable')) {
                obj['isRepeatable'] = ApiClient.convertToType(data['isRepeatable'], 'Boolean');
            }
            if (data.hasOwnProperty('isReturnable')) {
                obj['isReturnable'] = ApiClient.convertToType(data['isReturnable'], 'Boolean');
            }
            if (data.hasOwnProperty('isSortable')) {
                obj['isSortable'] = ApiClient.convertToType(data['isSortable'], 'Boolean');
            }
            if (data.hasOwnProperty('isSuggestable')) {
                obj['isSuggestable'] = ApiClient.convertToType(data['isSuggestable'], 'Boolean');
            }
            if (data.hasOwnProperty('isWildcardSearchable')) {
                obj['isWildcardSearchable'] = ApiClient.convertToType(data['isWildcardSearchable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectPropertyOptions')) {
                obj['objectPropertyOptions'] = ObjectPropertyOptions.constructFromObject(data['objectPropertyOptions']);
            }
            if (data.hasOwnProperty('textPropertyOptions')) {
                obj['textPropertyOptions'] = TextPropertyOptions.constructFromObject(data['textPropertyOptions']);
            }
            if (data.hasOwnProperty('timestampPropertyOptions')) {
                obj['timestampPropertyOptions'] = TimestampPropertyOptions.constructFromObject(data['timestampPropertyOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyDefinition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `booleanPropertyOptions`
        if (data['booleanPropertyOptions']) { // data not null
          BooleanPropertyOptions.validateJSON(data['booleanPropertyOptions']);
        }
        // validate the optional field `datePropertyOptions`
        if (data['datePropertyOptions']) { // data not null
          DatePropertyOptions.validateJSON(data['datePropertyOptions']);
        }
        // validate the optional field `displayOptions`
        if (data['displayOptions']) { // data not null
          PropertyDisplayOptions.validateJSON(data['displayOptions']);
        }
        // validate the optional field `doublePropertyOptions`
        if (data['doublePropertyOptions']) { // data not null
          DoublePropertyOptions.validateJSON(data['doublePropertyOptions']);
        }
        // validate the optional field `enumPropertyOptions`
        if (data['enumPropertyOptions']) { // data not null
          EnumPropertyOptions.validateJSON(data['enumPropertyOptions']);
        }
        // validate the optional field `htmlPropertyOptions`
        if (data['htmlPropertyOptions']) { // data not null
          HtmlPropertyOptions.validateJSON(data['htmlPropertyOptions']);
        }
        // validate the optional field `integerPropertyOptions`
        if (data['integerPropertyOptions']) { // data not null
          IntegerPropertyOptions.validateJSON(data['integerPropertyOptions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `objectPropertyOptions`
        if (data['objectPropertyOptions']) { // data not null
          ObjectPropertyOptions.validateJSON(data['objectPropertyOptions']);
        }
        // validate the optional field `textPropertyOptions`
        if (data['textPropertyOptions']) { // data not null
          TextPropertyOptions.validateJSON(data['textPropertyOptions']);
        }
        // validate the optional field `timestampPropertyOptions`
        if (data['timestampPropertyOptions']) { // data not null
          TimestampPropertyOptions.validateJSON(data['timestampPropertyOptions']);
        }

        return true;
    }


}



/**
 * @member {module:model/BooleanPropertyOptions} booleanPropertyOptions
 */
PropertyDefinition.prototype['booleanPropertyOptions'] = undefined;

/**
 * @member {module:model/DatePropertyOptions} datePropertyOptions
 */
PropertyDefinition.prototype['datePropertyOptions'] = undefined;

/**
 * @member {module:model/PropertyDisplayOptions} displayOptions
 */
PropertyDefinition.prototype['displayOptions'] = undefined;

/**
 * @member {module:model/DoublePropertyOptions} doublePropertyOptions
 */
PropertyDefinition.prototype['doublePropertyOptions'] = undefined;

/**
 * @member {module:model/EnumPropertyOptions} enumPropertyOptions
 */
PropertyDefinition.prototype['enumPropertyOptions'] = undefined;

/**
 * @member {module:model/HtmlPropertyOptions} htmlPropertyOptions
 */
PropertyDefinition.prototype['htmlPropertyOptions'] = undefined;

/**
 * @member {module:model/IntegerPropertyOptions} integerPropertyOptions
 */
PropertyDefinition.prototype['integerPropertyOptions'] = undefined;

/**
 * Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.
 * @member {Boolean} isFacetable
 */
PropertyDefinition.prototype['isFacetable'] = undefined;

/**
 * Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.
 * @member {Boolean} isRepeatable
 */
PropertyDefinition.prototype['isRepeatable'] = undefined;

/**
 * Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.
 * @member {Boolean} isReturnable
 */
PropertyDefinition.prototype['isReturnable'] = undefined;

/**
 * Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.
 * @member {Boolean} isSortable
 */
PropertyDefinition.prototype['isSortable'] = undefined;

/**
 * Indicates that the property can be used for generating query suggestions.
 * @member {Boolean} isSuggestable
 */
PropertyDefinition.prototype['isSuggestable'] = undefined;

/**
 * Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)
 * @member {Boolean} isWildcardSearchable
 */
PropertyDefinition.prototype['isWildcardSearchable'] = undefined;

/**
 * The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
 * @member {String} name
 */
PropertyDefinition.prototype['name'] = undefined;

/**
 * @member {module:model/ObjectPropertyOptions} objectPropertyOptions
 */
PropertyDefinition.prototype['objectPropertyOptions'] = undefined;

/**
 * @member {module:model/TextPropertyOptions} textPropertyOptions
 */
PropertyDefinition.prototype['textPropertyOptions'] = undefined;

/**
 * @member {module:model/TimestampPropertyOptions} timestampPropertyOptions
 */
PropertyDefinition.prototype['timestampPropertyOptions'] = undefined;






export default PropertyDefinition;

