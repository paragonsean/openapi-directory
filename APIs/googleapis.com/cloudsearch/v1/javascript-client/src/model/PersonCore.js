/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseTopazFrontendTeamsLink from './EnterpriseTopazFrontendTeamsLink';
import EnterpriseTopazFrontendTeamsPersonCorePhoneNumber from './EnterpriseTopazFrontendTeamsPersonCorePhoneNumber';
import MapInfo from './MapInfo';
import ModelDate from './ModelDate';
import SafeUrlProto from './SafeUrlProto';

/**
 * The PersonCore model module.
 * @module model/PersonCore
 * @version v1
 */
class PersonCore {
    /**
     * Constructs a new <code>PersonCore</code>.
     * Information for rendering a person. NEXT ID: 37
     * @alias module:model/PersonCore
     */
    constructor() { 
        
        PersonCore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonCore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonCore} obj Optional instance to populate.
     * @return {module:model/PersonCore} The populated <code>PersonCore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonCore();

            if (data.hasOwnProperty('addressMeAs')) {
                obj['addressMeAs'] = ApiClient.convertToType(data['addressMeAs'], 'String');
            }
            if (data.hasOwnProperty('adminTo')) {
                obj['adminTo'] = ApiClient.convertToType(data['adminTo'], [PersonCore]);
            }
            if (data.hasOwnProperty('admins')) {
                obj['admins'] = ApiClient.convertToType(data['admins'], [PersonCore]);
            }
            if (data.hasOwnProperty('availabilityStatus')) {
                obj['availabilityStatus'] = ApiClient.convertToType(data['availabilityStatus'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ModelDate.constructFromObject(data['birthday']);
            }
            if (data.hasOwnProperty('calendarUrl')) {
                obj['calendarUrl'] = SafeUrlProto.constructFromObject(data['calendarUrl']);
            }
            if (data.hasOwnProperty('chatUrl')) {
                obj['chatUrl'] = SafeUrlProto.constructFromObject(data['chatUrl']);
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('directReports')) {
                obj['directReports'] = ApiClient.convertToType(data['directReports'], [PersonCore]);
            }
            if (data.hasOwnProperty('dottedLineManagers')) {
                obj['dottedLineManagers'] = ApiClient.convertToType(data['dottedLineManagers'], [PersonCore]);
            }
            if (data.hasOwnProperty('dottedLineReports')) {
                obj['dottedLineReports'] = ApiClient.convertToType(data['dottedLineReports'], [PersonCore]);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('employeeId')) {
                obj['employeeId'] = ApiClient.convertToType(data['employeeId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('ftePermille')) {
                obj['ftePermille'] = ApiClient.convertToType(data['ftePermille'], 'String');
            }
            if (data.hasOwnProperty('geoLocation')) {
                obj['geoLocation'] = MapInfo.constructFromObject(data['geoLocation']);
            }
            if (data.hasOwnProperty('gmailUrl')) {
                obj['gmailUrl'] = ApiClient.convertToType(data['gmailUrl'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('keywordTypes')) {
                obj['keywordTypes'] = ApiClient.convertToType(data['keywordTypes'], ['String']);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], {'String': 'String'});
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [EnterpriseTopazFrontendTeamsLink]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('managers')) {
                obj['managers'] = ApiClient.convertToType(data['managers'], [PersonCore]);
            }
            if (data.hasOwnProperty('mission')) {
                obj['mission'] = ApiClient.convertToType(data['mission'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('officeLocation')) {
                obj['officeLocation'] = ApiClient.convertToType(data['officeLocation'], 'String');
            }
            if (data.hasOwnProperty('personId')) {
                obj['personId'] = ApiClient.convertToType(data['personId'], 'String');
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [EnterpriseTopazFrontendTeamsPersonCorePhoneNumber]);
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = SafeUrlProto.constructFromObject(data['photoUrl']);
            }
            if (data.hasOwnProperty('postalAddress')) {
                obj['postalAddress'] = ApiClient.convertToType(data['postalAddress'], 'String');
            }
            if (data.hasOwnProperty('totalDirectReportsCount')) {
                obj['totalDirectReportsCount'] = ApiClient.convertToType(data['totalDirectReportsCount'], 'Number');
            }
            if (data.hasOwnProperty('totalDlrCount')) {
                obj['totalDlrCount'] = ApiClient.convertToType(data['totalDlrCount'], 'Number');
            }
            if (data.hasOwnProperty('totalFteCount')) {
                obj['totalFteCount'] = ApiClient.convertToType(data['totalFteCount'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('waldoComeBackTime')) {
                obj['waldoComeBackTime'] = ApiClient.convertToType(data['waldoComeBackTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonCore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonCore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressMeAs'] && !(typeof data['addressMeAs'] === 'string' || data['addressMeAs'] instanceof String)) {
            throw new Error("Expected the field `addressMeAs` to be a primitive type in the JSON string but got " + data['addressMeAs']);
        }
        if (data['adminTo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adminTo'])) {
                throw new Error("Expected the field `adminTo` to be an array in the JSON data but got " + data['adminTo']);
            }
            // validate the optional field `adminTo` (array)
            for (const item of data['adminTo']) {
                PersonCore.validateJSON(item);
            };
        }
        if (data['admins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['admins'])) {
                throw new Error("Expected the field `admins` to be an array in the JSON data but got " + data['admins']);
            }
            // validate the optional field `admins` (array)
            for (const item of data['admins']) {
                PersonCore.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['availabilityStatus'] && !(typeof data['availabilityStatus'] === 'string' || data['availabilityStatus'] instanceof String)) {
            throw new Error("Expected the field `availabilityStatus` to be a primitive type in the JSON string but got " + data['availabilityStatus']);
        }
        // validate the optional field `birthday`
        if (data['birthday']) { // data not null
          ModelDate.validateJSON(data['birthday']);
        }
        // validate the optional field `calendarUrl`
        if (data['calendarUrl']) { // data not null
          SafeUrlProto.validateJSON(data['calendarUrl']);
        }
        // validate the optional field `chatUrl`
        if (data['chatUrl']) { // data not null
          SafeUrlProto.validateJSON(data['chatUrl']);
        }
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        if (data['directReports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['directReports'])) {
                throw new Error("Expected the field `directReports` to be an array in the JSON data but got " + data['directReports']);
            }
            // validate the optional field `directReports` (array)
            for (const item of data['directReports']) {
                PersonCore.validateJSON(item);
            };
        }
        if (data['dottedLineManagers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dottedLineManagers'])) {
                throw new Error("Expected the field `dottedLineManagers` to be an array in the JSON data but got " + data['dottedLineManagers']);
            }
            // validate the optional field `dottedLineManagers` (array)
            for (const item of data['dottedLineManagers']) {
                PersonCore.validateJSON(item);
            };
        }
        if (data['dottedLineReports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dottedLineReports'])) {
                throw new Error("Expected the field `dottedLineReports` to be an array in the JSON data but got " + data['dottedLineReports']);
            }
            // validate the optional field `dottedLineReports` (array)
            for (const item of data['dottedLineReports']) {
                PersonCore.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is a string
        if (data['employeeId'] && !(typeof data['employeeId'] === 'string' || data['employeeId'] instanceof String)) {
            throw new Error("Expected the field `employeeId` to be a primitive type in the JSON string but got " + data['employeeId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['ftePermille'] && !(typeof data['ftePermille'] === 'string' || data['ftePermille'] instanceof String)) {
            throw new Error("Expected the field `ftePermille` to be a primitive type in the JSON string but got " + data['ftePermille']);
        }
        // validate the optional field `geoLocation`
        if (data['geoLocation']) { // data not null
          MapInfo.validateJSON(data['geoLocation']);
        }
        // ensure the json data is a string
        if (data['gmailUrl'] && !(typeof data['gmailUrl'] === 'string' || data['gmailUrl'] instanceof String)) {
            throw new Error("Expected the field `gmailUrl` to be a primitive type in the JSON string but got " + data['gmailUrl']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywordTypes'])) {
            throw new Error("Expected the field `keywordTypes` to be an array in the JSON data but got " + data['keywordTypes']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                EnterpriseTopazFrontendTeamsLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        if (data['managers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['managers'])) {
                throw new Error("Expected the field `managers` to be an array in the JSON data but got " + data['managers']);
            }
            // validate the optional field `managers` (array)
            for (const item of data['managers']) {
                PersonCore.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mission'] && !(typeof data['mission'] === 'string' || data['mission'] instanceof String)) {
            throw new Error("Expected the field `mission` to be a primitive type in the JSON string but got " + data['mission']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['officeLocation'] && !(typeof data['officeLocation'] === 'string' || data['officeLocation'] instanceof String)) {
            throw new Error("Expected the field `officeLocation` to be a primitive type in the JSON string but got " + data['officeLocation']);
        }
        // ensure the json data is a string
        if (data['personId'] && !(typeof data['personId'] === 'string' || data['personId'] instanceof String)) {
            throw new Error("Expected the field `personId` to be a primitive type in the JSON string but got " + data['personId']);
        }
        if (data['phoneNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phoneNumbers'])) {
                throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
            }
            // validate the optional field `phoneNumbers` (array)
            for (const item of data['phoneNumbers']) {
                EnterpriseTopazFrontendTeamsPersonCorePhoneNumber.validateJSON(item);
            };
        }
        // validate the optional field `photoUrl`
        if (data['photoUrl']) { // data not null
          SafeUrlProto.validateJSON(data['photoUrl']);
        }
        // ensure the json data is a string
        if (data['postalAddress'] && !(typeof data['postalAddress'] === 'string' || data['postalAddress'] instanceof String)) {
            throw new Error("Expected the field `postalAddress` to be a primitive type in the JSON string but got " + data['postalAddress']);
        }
        // ensure the json data is a string
        if (data['totalFteCount'] && !(typeof data['totalFteCount'] === 'string' || data['totalFteCount'] instanceof String)) {
            throw new Error("Expected the field `totalFteCount` to be a primitive type in the JSON string but got " + data['totalFteCount']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['waldoComeBackTime'] && !(typeof data['waldoComeBackTime'] === 'string' || data['waldoComeBackTime'] instanceof String)) {
            throw new Error("Expected the field `waldoComeBackTime` to be a primitive type in the JSON string but got " + data['waldoComeBackTime']);
        }

        return true;
    }


}



/**
 * Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.
 * @member {String} addressMeAs
 */
PersonCore.prototype['addressMeAs'] = undefined;

/**
 * People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} adminTo
 */
PersonCore.prototype['adminTo'] = undefined;

/**
 * The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} admins
 */
PersonCore.prototype['admins'] = undefined;

/**
 * @member {module:model/PersonCore.AvailabilityStatusEnum} availabilityStatus
 */
PersonCore.prototype['availabilityStatus'] = undefined;

/**
 * @member {module:model/ModelDate} birthday
 */
PersonCore.prototype['birthday'] = undefined;

/**
 * @member {module:model/SafeUrlProto} calendarUrl
 */
PersonCore.prototype['calendarUrl'] = undefined;

/**
 * @member {module:model/SafeUrlProto} chatUrl
 */
PersonCore.prototype['chatUrl'] = undefined;

/**
 * Person's cost center as a string, e.g. \"926: Googler Apps\".
 * @member {String} costCenter
 */
PersonCore.prototype['costCenter'] = undefined;

/**
 * The person's Organization department, e.g. \"People Operations\". For google.com this is usually called \"area\".
 * @member {String} department
 */
PersonCore.prototype['department'] = undefined;

/**
 * A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} directReports
 */
PersonCore.prototype['directReports'] = undefined;

/**
 * The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} dottedLineManagers
 */
PersonCore.prototype['dottedLineManagers'] = undefined;

/**
 * A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} dottedLineReports
 */
PersonCore.prototype['dottedLineReports'] = undefined;

/**
 * E-mail addresses of the person. The primary or preferred email should be first.
 * @member {Array.<String>} emails
 */
PersonCore.prototype['emails'] = undefined;

/**
 * Person's employee number (external ID of type \"organization\") For google.com this is the badge number (e.g. 2 for Larry Page).
 * @member {String} employeeId
 */
PersonCore.prototype['employeeId'] = undefined;

/**
 * A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.
 * @member {String} fingerprint
 */
PersonCore.prototype['fingerprint'] = undefined;

/**
 * Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).
 * @member {String} ftePermille
 */
PersonCore.prototype['ftePermille'] = undefined;

/**
 * @member {module:model/MapInfo} geoLocation
 */
PersonCore.prototype['geoLocation'] = undefined;

/**
 * @member {String} gmailUrl
 */
PersonCore.prototype['gmailUrl'] = undefined;

/**
 * Profile owner's job title (e.g. \"Software Engineer\"). For google.com this is the Workday preferred job title.
 * @member {String} jobTitle
 */
PersonCore.prototype['jobTitle'] = undefined;

/**
 * List of keys to use from the map 'keywords'.
 * @member {Array.<String>} keywordTypes
 */
PersonCore.prototype['keywordTypes'] = undefined;

/**
 * Custom keywords the domain admin has added.
 * @member {Object.<String, String>} keywords
 */
PersonCore.prototype['keywords'] = undefined;

/**
 * Custom links the profile owner has added.
 * @member {Array.<module:model/EnterpriseTopazFrontendTeamsLink>} links
 */
PersonCore.prototype['links'] = undefined;

/**
 * Detailed desk location within the company. For google.com this is the desk location code (e.g. \"DE-MUC-ARP-6T2-6T2C0C\") if the person has a desk.
 * @member {String} location
 */
PersonCore.prototype['location'] = undefined;

/**
 * The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.
 * @member {Array.<module:model/PersonCore>} managers
 */
PersonCore.prototype['managers'] = undefined;

/**
 * Custom mission statement the profile owner has added.
 * @member {String} mission
 */
PersonCore.prototype['mission'] = undefined;

/**
 * Human-readable Unicode display name.
 * @member {String} name
 */
PersonCore.prototype['name'] = undefined;

/**
 * Office/building identifier within the company. For google.com this is the office code (e.g. \"DE-MUC-ARP\").
 * @member {String} officeLocation
 */
PersonCore.prototype['officeLocation'] = undefined;

/**
 * The person's obfuscated Gaia ID.
 * @member {String} personId
 */
PersonCore.prototype['personId'] = undefined;

/**
 * @member {Array.<module:model/EnterpriseTopazFrontendTeamsPersonCorePhoneNumber>} phoneNumbers
 */
PersonCore.prototype['phoneNumbers'] = undefined;

/**
 * @member {module:model/SafeUrlProto} photoUrl
 */
PersonCore.prototype['photoUrl'] = undefined;

/**
 * Postal address of office/building.
 * @member {String} postalAddress
 */
PersonCore.prototype['postalAddress'] = undefined;

/**
 * Total count of the profile owner's direct reports.
 * @member {Number} totalDirectReportsCount
 */
PersonCore.prototype['totalDirectReportsCount'] = undefined;

/**
 * Total count of the profile owner's dotted-line reports.
 * @member {Number} totalDlrCount
 */
PersonCore.prototype['totalDlrCount'] = undefined;

/**
 * The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).
 * @member {String} totalFteCount
 */
PersonCore.prototype['totalFteCount'] = undefined;

/**
 * External ID of type \"login_id\" for the profile. For google.com this is the username/LDAP.
 * @member {String} username
 */
PersonCore.prototype['username'] = undefined;

/**
 * @member {String} waldoComeBackTime
 */
PersonCore.prototype['waldoComeBackTime'] = undefined;





/**
 * Allowed values for the <code>availabilityStatus</code> property.
 * @enum {String}
 * @readonly
 */
PersonCore['AvailabilityStatusEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "OUT_OF_OFFICE"
     * @const
     */
    "OUT_OF_OFFICE": "OUT_OF_OFFICE",

    /**
     * value: "OUTSIDE_WORKING_HOURS"
     * @const
     */
    "OUTSIDE_WORKING_HOURS": "OUTSIDE_WORKING_HOURS",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE"
};



export default PersonCore;

