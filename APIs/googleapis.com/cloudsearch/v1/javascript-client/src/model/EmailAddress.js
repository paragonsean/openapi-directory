/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmailAddress model module.
 * @module model/EmailAddress
 * @version v1
 */
class EmailAddress {
    /**
     * Constructs a new <code>EmailAddress</code>.
     * A person&#39;s email address.
     * @alias module:model/EmailAddress
     */
    constructor() { 
        
        EmailAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmailAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailAddress} obj Optional instance to populate.
     * @return {module:model/EmailAddress} The populated <code>EmailAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailAddress();

            if (data.hasOwnProperty('customType')) {
                obj['customType'] = ApiClient.convertToType(data['customType'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('emailUrl')) {
                obj['emailUrl'] = ApiClient.convertToType(data['emailUrl'], 'String');
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customType'] && !(typeof data['customType'] === 'string' || data['customType'] instanceof String)) {
            throw new Error("Expected the field `customType` to be a primitive type in the JSON string but got " + data['customType']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['emailUrl'] && !(typeof data['emailUrl'] === 'string' || data['emailUrl'] instanceof String)) {
            throw new Error("Expected the field `emailUrl` to be a primitive type in the JSON string but got " + data['emailUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * If the value of type is custom, this property contains the custom type string.
 * @member {String} customType
 */
EmailAddress.prototype['customType'] = undefined;

/**
 * The email address.
 * @member {String} emailAddress
 */
EmailAddress.prototype['emailAddress'] = undefined;

/**
 * The URL to send email.
 * @member {String} emailUrl
 */
EmailAddress.prototype['emailUrl'] = undefined;

/**
 * Indicates if this is the user's primary email. Only one entry can be marked as primary.
 * @member {Boolean} primary
 */
EmailAddress.prototype['primary'] = undefined;

/**
 * The type of the email account. Acceptable values are: \"custom\", \"home\", \"other\", \"work\".
 * @member {String} type
 */
EmailAddress.prototype['type'] = undefined;






export default EmailAddress;

