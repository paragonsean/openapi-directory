/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectOptions from './ObjectOptions';
import PropertyDefinition from './PropertyDefinition';

/**
 * The ObjectDefinition model module.
 * @module model/ObjectDefinition
 * @version v1
 */
class ObjectDefinition {
    /**
     * Constructs a new <code>ObjectDefinition</code>.
     * The definition for an object within a data source.
     * @alias module:model/ObjectDefinition
     */
    constructor() { 
        
        ObjectDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectDefinition} obj Optional instance to populate.
     * @return {module:model/ObjectDefinition} The populated <code>ObjectDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectDefinition();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ObjectOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('propertyDefinitions')) {
                obj['propertyDefinitions'] = ApiClient.convertToType(data['propertyDefinitions'], [PropertyDefinition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          ObjectOptions.validateJSON(data['options']);
        }
        if (data['propertyDefinitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['propertyDefinitions'])) {
                throw new Error("Expected the field `propertyDefinitions` to be an array in the JSON data but got " + data['propertyDefinitions']);
            }
            // validate the optional field `propertyDefinitions` (array)
            for (const item of data['propertyDefinitions']) {
                PropertyDefinition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
 * @member {String} name
 */
ObjectDefinition.prototype['name'] = undefined;

/**
 * @member {module:model/ObjectOptions} options
 */
ObjectDefinition.prototype['options'] = undefined;

/**
 * The property definitions for the object. The maximum number of elements is 1000.
 * @member {Array.<module:model/PropertyDefinition>} propertyDefinitions
 */
ObjectDefinition.prototype['propertyDefinitions'] = undefined;






export default ObjectDefinition;

