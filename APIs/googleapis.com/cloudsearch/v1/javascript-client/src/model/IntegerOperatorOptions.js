/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntegerOperatorOptions model module.
 * @module model/IntegerOperatorOptions
 * @version v1
 */
class IntegerOperatorOptions {
    /**
     * Constructs a new <code>IntegerOperatorOptions</code>.
     * Used to provide a search operator for integer properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
     * @alias module:model/IntegerOperatorOptions
     */
    constructor() { 
        
        IntegerOperatorOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegerOperatorOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegerOperatorOptions} obj Optional instance to populate.
     * @return {module:model/IntegerOperatorOptions} The populated <code>IntegerOperatorOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegerOperatorOptions();

            if (data.hasOwnProperty('greaterThanOperatorName')) {
                obj['greaterThanOperatorName'] = ApiClient.convertToType(data['greaterThanOperatorName'], 'String');
            }
            if (data.hasOwnProperty('lessThanOperatorName')) {
                obj['lessThanOperatorName'] = ApiClient.convertToType(data['lessThanOperatorName'], 'String');
            }
            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegerOperatorOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegerOperatorOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['greaterThanOperatorName'] && !(typeof data['greaterThanOperatorName'] === 'string' || data['greaterThanOperatorName'] instanceof String)) {
            throw new Error("Expected the field `greaterThanOperatorName` to be a primitive type in the JSON string but got " + data['greaterThanOperatorName']);
        }
        // ensure the json data is a string
        if (data['lessThanOperatorName'] && !(typeof data['lessThanOperatorName'] === 'string' || data['lessThanOperatorName'] instanceof String)) {
            throw new Error("Expected the field `lessThanOperatorName` to be a primitive type in the JSON string but got " + data['lessThanOperatorName']);
        }
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }

        return true;
    }


}



/**
 * Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:<value>* show results only where the value of the property named *priorityVal* is greater than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
 * @member {String} greaterThanOperatorName
 */
IntegerOperatorOptions.prototype['greaterThanOperatorName'] = undefined;

/**
 * Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and the property's name is *priorityVal*, then queries like *prioritybelow:<value>* show results only where the value of the property named *priorityVal* is less than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
 * @member {String} lessThanOperatorName
 */
IntegerOperatorOptions.prototype['lessThanOperatorName'] = undefined;

/**
 * Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then queries like *priority:<value>* show results only where the value of the property named *priorityVal* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
 * @member {String} operatorName
 */
IntegerOperatorOptions.prototype['operatorName'] = undefined;






export default IntegerOperatorOptions;

