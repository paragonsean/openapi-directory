/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryInterpretation model module.
 * @module model/QueryInterpretation
 * @version v1
 */
class QueryInterpretation {
    /**
     * Constructs a new <code>QueryInterpretation</code>.
     * @alias module:model/QueryInterpretation
     */
    constructor() { 
        
        QueryInterpretation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryInterpretation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryInterpretation} obj Optional instance to populate.
     * @return {module:model/QueryInterpretation} The populated <code>QueryInterpretation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryInterpretation();

            if (data.hasOwnProperty('interpretationType')) {
                obj['interpretationType'] = ApiClient.convertToType(data['interpretationType'], 'String');
            }
            if (data.hasOwnProperty('interpretedQuery')) {
                obj['interpretedQuery'] = ApiClient.convertToType(data['interpretedQuery'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryInterpretation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryInterpretation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['interpretationType'] && !(typeof data['interpretationType'] === 'string' || data['interpretationType'] instanceof String)) {
            throw new Error("Expected the field `interpretationType` to be a primitive type in the JSON string but got " + data['interpretationType']);
        }
        // ensure the json data is a string
        if (data['interpretedQuery'] && !(typeof data['interpretedQuery'] === 'string' || data['interpretedQuery'] instanceof String)) {
            throw new Error("Expected the field `interpretedQuery` to be a primitive type in the JSON string but got " + data['interpretedQuery']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * @member {module:model/QueryInterpretation.InterpretationTypeEnum} interpretationType
 */
QueryInterpretation.prototype['interpretationType'] = undefined;

/**
 * The interpretation of the query used in search. For example, queries with natural language intent like \"email from john\" will be interpreted as \"from:john source:mail\". This field will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.
 * @member {String} interpretedQuery
 */
QueryInterpretation.prototype['interpretedQuery'] = undefined;

/**
 * The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE.
 * @member {module:model/QueryInterpretation.ReasonEnum} reason
 */
QueryInterpretation.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>interpretationType</code> property.
 * @enum {String}
 * @readonly
 */
QueryInterpretation['InterpretationTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "BLEND"
     * @const
     */
    "BLEND": "BLEND",

    /**
     * value: "REPLACE"
     * @const
     */
    "REPLACE": "REPLACE"
};


/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
QueryInterpretation['ReasonEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "QUERY_HAS_NATURAL_LANGUAGE_INTENT"
     * @const
     */
    "QUERY_HAS_NATURAL_LANGUAGE_INTENT": "QUERY_HAS_NATURAL_LANGUAGE_INTENT",

    /**
     * value: "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
     * @const
     */
    "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY": "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
};



export default QueryInterpretation;

