/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectDefinition from './ObjectDefinition';

/**
 * The Schema model module.
 * @module model/Schema
 * @version v1
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * The schema definition for a data source.
     * @alias module:model/Schema
     */
    constructor() { 
        
        Schema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('objectDefinitions')) {
                obj['objectDefinitions'] = ApiClient.convertToType(data['objectDefinitions'], [ObjectDefinition]);
            }
            if (data.hasOwnProperty('operationIds')) {
                obj['operationIds'] = ApiClient.convertToType(data['operationIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schema</code>.
     */
    static validateJSON(data) {
        if (data['objectDefinitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['objectDefinitions'])) {
                throw new Error("Expected the field `objectDefinitions` to be an array in the JSON data but got " + data['objectDefinitions']);
            }
            // validate the optional field `objectDefinitions` (array)
            for (const item of data['objectDefinitions']) {
                ObjectDefinition.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operationIds'])) {
            throw new Error("Expected the field `operationIds` to be an array in the JSON data but got " + data['operationIds']);
        }

        return true;
    }


}



/**
 * The list of top-level objects for the data source. The maximum number of elements is 10.
 * @member {Array.<module:model/ObjectDefinition>} objectDefinitions
 */
Schema.prototype['objectDefinitions'] = undefined;

/**
 * IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content.
 * @member {Array.<String>} operationIds
 */
Schema.prototype['operationIds'] = undefined;






export default Schema;

