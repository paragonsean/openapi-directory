/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import BackgroundColoredText from './BackgroundColoredText';
import SafeHtmlProto from './SafeHtmlProto';

/**
 * The Content model module.
 * @module model/Content
 * @version v1
 */
class Content {
    /**
     * Constructs a new <code>Content</code>.
     * @alias module:model/Content
     */
    constructor() { 
        
        Content.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Content</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Content} obj Optional instance to populate.
     * @return {module:model/Content} The populated <code>Content</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Content();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [Action]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = SafeHtmlProto.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = BackgroundColoredText.constructFromObject(data['subtitle']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = BackgroundColoredText.constructFromObject(data['title']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Content</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Content</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                Action.validateJSON(item);
            };
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          SafeHtmlProto.validateJSON(data['description']);
        }
        // validate the optional field `subtitle`
        if (data['subtitle']) { // data not null
          BackgroundColoredText.validateJSON(data['subtitle']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          BackgroundColoredText.validateJSON(data['title']);
        }

        return true;
    }


}



/**
 * [Optional] Actions for this card.
 * @member {Array.<module:model/Action>} actions
 */
Content.prototype['actions'] = undefined;

/**
 * @member {module:model/SafeHtmlProto} description
 */
Content.prototype['description'] = undefined;

/**
 * @member {module:model/BackgroundColoredText} subtitle
 */
Content.prototype['subtitle'] = undefined;

/**
 * @member {module:model/BackgroundColoredText} title
 */
Content.prototype['title'] = undefined;






export default Content;

