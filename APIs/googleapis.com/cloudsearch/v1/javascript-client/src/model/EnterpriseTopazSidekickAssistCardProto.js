/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseTopazSidekickAgendaEntry from './EnterpriseTopazSidekickAgendaEntry';
import EnterpriseTopazSidekickAgendaGroupCardProto from './EnterpriseTopazSidekickAgendaGroupCardProto';
import EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard from './EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard';
import EnterpriseTopazSidekickCardMetadata from './EnterpriseTopazSidekickCardMetadata';
import EnterpriseTopazSidekickConflictingEventsCardProto from './EnterpriseTopazSidekickConflictingEventsCardProto';
import EnterpriseTopazSidekickDocumentPerCategoryList from './EnterpriseTopazSidekickDocumentPerCategoryList';
import EnterpriseTopazSidekickFindMeetingTimeCardProto from './EnterpriseTopazSidekickFindMeetingTimeCardProto';
import EnterpriseTopazSidekickGenericAnswerCard from './EnterpriseTopazSidekickGenericAnswerCard';
import EnterpriseTopazSidekickGetAndKeepAheadCardProto from './EnterpriseTopazSidekickGetAndKeepAheadCardProto';
import EnterpriseTopazSidekickMeetingNotesCardProto from './EnterpriseTopazSidekickMeetingNotesCardProto';
import EnterpriseTopazSidekickMeetingNotesCardRequest from './EnterpriseTopazSidekickMeetingNotesCardRequest';
import EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard from './EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard';
import EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard from './EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard';
import EnterpriseTopazSidekickPeopleDisambiguationCard from './EnterpriseTopazSidekickPeopleDisambiguationCard';
import EnterpriseTopazSidekickPersonProfileCard from './EnterpriseTopazSidekickPersonProfileCard';
import EnterpriseTopazSidekickPersonalizedDocsCardProto from './EnterpriseTopazSidekickPersonalizedDocsCardProto';
import EnterpriseTopazSidekickRecentDocumentsCardProto from './EnterpriseTopazSidekickRecentDocumentsCardProto';
import EnterpriseTopazSidekickShareMeetingDocsCardProto from './EnterpriseTopazSidekickShareMeetingDocsCardProto';
import PeoplePromotionCard from './PeoplePromotionCard';
import ThirdPartyGenericCard from './ThirdPartyGenericCard';

/**
 * The EnterpriseTopazSidekickAssistCardProto model module.
 * @module model/EnterpriseTopazSidekickAssistCardProto
 * @version v1
 */
class EnterpriseTopazSidekickAssistCardProto {
    /**
     * Constructs a new <code>EnterpriseTopazSidekickAssistCardProto</code>.
     * Wrapper proto for the Assist cards.
     * @alias module:model/EnterpriseTopazSidekickAssistCardProto
     */
    constructor() { 
        
        EnterpriseTopazSidekickAssistCardProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnterpriseTopazSidekickAssistCardProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnterpriseTopazSidekickAssistCardProto} obj Optional instance to populate.
     * @return {module:model/EnterpriseTopazSidekickAssistCardProto} The populated <code>EnterpriseTopazSidekickAssistCardProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnterpriseTopazSidekickAssistCardProto();

            if (data.hasOwnProperty('agendaGroupCardProto')) {
                obj['agendaGroupCardProto'] = EnterpriseTopazSidekickAgendaGroupCardProto.constructFromObject(data['agendaGroupCardProto']);
            }
            if (data.hasOwnProperty('cardMetadata')) {
                obj['cardMetadata'] = EnterpriseTopazSidekickCardMetadata.constructFromObject(data['cardMetadata']);
            }
            if (data.hasOwnProperty('cardType')) {
                obj['cardType'] = ApiClient.convertToType(data['cardType'], 'String');
            }
            if (data.hasOwnProperty('conflictingMeetingsCard')) {
                obj['conflictingMeetingsCard'] = EnterpriseTopazSidekickConflictingEventsCardProto.constructFromObject(data['conflictingMeetingsCard']);
            }
            if (data.hasOwnProperty('documentListCard')) {
                obj['documentListCard'] = EnterpriseTopazSidekickDocumentPerCategoryList.constructFromObject(data['documentListCard']);
            }
            if (data.hasOwnProperty('documentsWithMentions')) {
                obj['documentsWithMentions'] = EnterpriseTopazSidekickDocumentPerCategoryList.constructFromObject(data['documentsWithMentions']);
            }
            if (data.hasOwnProperty('findMeetingTimeCard')) {
                obj['findMeetingTimeCard'] = EnterpriseTopazSidekickFindMeetingTimeCardProto.constructFromObject(data['findMeetingTimeCard']);
            }
            if (data.hasOwnProperty('genericAnswerCard')) {
                obj['genericAnswerCard'] = EnterpriseTopazSidekickGenericAnswerCard.constructFromObject(data['genericAnswerCard']);
            }
            if (data.hasOwnProperty('getAndKeepAheadCard')) {
                obj['getAndKeepAheadCard'] = EnterpriseTopazSidekickGetAndKeepAheadCardProto.constructFromObject(data['getAndKeepAheadCard']);
            }
            if (data.hasOwnProperty('meeting')) {
                obj['meeting'] = EnterpriseTopazSidekickAgendaEntry.constructFromObject(data['meeting']);
            }
            if (data.hasOwnProperty('meetingNotesCard')) {
                obj['meetingNotesCard'] = EnterpriseTopazSidekickMeetingNotesCardProto.constructFromObject(data['meetingNotesCard']);
            }
            if (data.hasOwnProperty('meetingNotesCardRequest')) {
                obj['meetingNotesCardRequest'] = EnterpriseTopazSidekickMeetingNotesCardRequest.constructFromObject(data['meetingNotesCardRequest']);
            }
            if (data.hasOwnProperty('peopleDisambiguationCard')) {
                obj['peopleDisambiguationCard'] = EnterpriseTopazSidekickPeopleDisambiguationCard.constructFromObject(data['peopleDisambiguationCard']);
            }
            if (data.hasOwnProperty('peoplePromotionCard')) {
                obj['peoplePromotionCard'] = PeoplePromotionCard.constructFromObject(data['peoplePromotionCard']);
            }
            if (data.hasOwnProperty('personAnswerCard')) {
                obj['personAnswerCard'] = EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.constructFromObject(data['personAnswerCard']);
            }
            if (data.hasOwnProperty('personProfileCard')) {
                obj['personProfileCard'] = EnterpriseTopazSidekickPersonProfileCard.constructFromObject(data['personProfileCard']);
            }
            if (data.hasOwnProperty('personalizedDocsCard')) {
                obj['personalizedDocsCard'] = EnterpriseTopazSidekickPersonalizedDocsCardProto.constructFromObject(data['personalizedDocsCard']);
            }
            if (data.hasOwnProperty('relatedPeopleAnswerCard')) {
                obj['relatedPeopleAnswerCard'] = EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard.constructFromObject(data['relatedPeopleAnswerCard']);
            }
            if (data.hasOwnProperty('shareMeetingDocsCard')) {
                obj['shareMeetingDocsCard'] = EnterpriseTopazSidekickShareMeetingDocsCardProto.constructFromObject(data['shareMeetingDocsCard']);
            }
            if (data.hasOwnProperty('sharedDocuments')) {
                obj['sharedDocuments'] = EnterpriseTopazSidekickDocumentPerCategoryList.constructFromObject(data['sharedDocuments']);
            }
            if (data.hasOwnProperty('suggestedQueryAnswerCard')) {
                obj['suggestedQueryAnswerCard'] = EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard.constructFromObject(data['suggestedQueryAnswerCard']);
            }
            if (data.hasOwnProperty('thirdPartyAnswerCard')) {
                obj['thirdPartyAnswerCard'] = ThirdPartyGenericCard.constructFromObject(data['thirdPartyAnswerCard']);
            }
            if (data.hasOwnProperty('workInProgressCardProto')) {
                obj['workInProgressCardProto'] = EnterpriseTopazSidekickRecentDocumentsCardProto.constructFromObject(data['workInProgressCardProto']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnterpriseTopazSidekickAssistCardProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnterpriseTopazSidekickAssistCardProto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `agendaGroupCardProto`
        if (data['agendaGroupCardProto']) { // data not null
          EnterpriseTopazSidekickAgendaGroupCardProto.validateJSON(data['agendaGroupCardProto']);
        }
        // validate the optional field `cardMetadata`
        if (data['cardMetadata']) { // data not null
          EnterpriseTopazSidekickCardMetadata.validateJSON(data['cardMetadata']);
        }
        // ensure the json data is a string
        if (data['cardType'] && !(typeof data['cardType'] === 'string' || data['cardType'] instanceof String)) {
            throw new Error("Expected the field `cardType` to be a primitive type in the JSON string but got " + data['cardType']);
        }
        // validate the optional field `conflictingMeetingsCard`
        if (data['conflictingMeetingsCard']) { // data not null
          EnterpriseTopazSidekickConflictingEventsCardProto.validateJSON(data['conflictingMeetingsCard']);
        }
        // validate the optional field `documentListCard`
        if (data['documentListCard']) { // data not null
          EnterpriseTopazSidekickDocumentPerCategoryList.validateJSON(data['documentListCard']);
        }
        // validate the optional field `documentsWithMentions`
        if (data['documentsWithMentions']) { // data not null
          EnterpriseTopazSidekickDocumentPerCategoryList.validateJSON(data['documentsWithMentions']);
        }
        // validate the optional field `findMeetingTimeCard`
        if (data['findMeetingTimeCard']) { // data not null
          EnterpriseTopazSidekickFindMeetingTimeCardProto.validateJSON(data['findMeetingTimeCard']);
        }
        // validate the optional field `genericAnswerCard`
        if (data['genericAnswerCard']) { // data not null
          EnterpriseTopazSidekickGenericAnswerCard.validateJSON(data['genericAnswerCard']);
        }
        // validate the optional field `getAndKeepAheadCard`
        if (data['getAndKeepAheadCard']) { // data not null
          EnterpriseTopazSidekickGetAndKeepAheadCardProto.validateJSON(data['getAndKeepAheadCard']);
        }
        // validate the optional field `meeting`
        if (data['meeting']) { // data not null
          EnterpriseTopazSidekickAgendaEntry.validateJSON(data['meeting']);
        }
        // validate the optional field `meetingNotesCard`
        if (data['meetingNotesCard']) { // data not null
          EnterpriseTopazSidekickMeetingNotesCardProto.validateJSON(data['meetingNotesCard']);
        }
        // validate the optional field `meetingNotesCardRequest`
        if (data['meetingNotesCardRequest']) { // data not null
          EnterpriseTopazSidekickMeetingNotesCardRequest.validateJSON(data['meetingNotesCardRequest']);
        }
        // validate the optional field `peopleDisambiguationCard`
        if (data['peopleDisambiguationCard']) { // data not null
          EnterpriseTopazSidekickPeopleDisambiguationCard.validateJSON(data['peopleDisambiguationCard']);
        }
        // validate the optional field `peoplePromotionCard`
        if (data['peoplePromotionCard']) { // data not null
          PeoplePromotionCard.validateJSON(data['peoplePromotionCard']);
        }
        // validate the optional field `personAnswerCard`
        if (data['personAnswerCard']) { // data not null
          EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard.validateJSON(data['personAnswerCard']);
        }
        // validate the optional field `personProfileCard`
        if (data['personProfileCard']) { // data not null
          EnterpriseTopazSidekickPersonProfileCard.validateJSON(data['personProfileCard']);
        }
        // validate the optional field `personalizedDocsCard`
        if (data['personalizedDocsCard']) { // data not null
          EnterpriseTopazSidekickPersonalizedDocsCardProto.validateJSON(data['personalizedDocsCard']);
        }
        // validate the optional field `relatedPeopleAnswerCard`
        if (data['relatedPeopleAnswerCard']) { // data not null
          EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard.validateJSON(data['relatedPeopleAnswerCard']);
        }
        // validate the optional field `shareMeetingDocsCard`
        if (data['shareMeetingDocsCard']) { // data not null
          EnterpriseTopazSidekickShareMeetingDocsCardProto.validateJSON(data['shareMeetingDocsCard']);
        }
        // validate the optional field `sharedDocuments`
        if (data['sharedDocuments']) { // data not null
          EnterpriseTopazSidekickDocumentPerCategoryList.validateJSON(data['sharedDocuments']);
        }
        // validate the optional field `suggestedQueryAnswerCard`
        if (data['suggestedQueryAnswerCard']) { // data not null
          EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard.validateJSON(data['suggestedQueryAnswerCard']);
        }
        // validate the optional field `thirdPartyAnswerCard`
        if (data['thirdPartyAnswerCard']) { // data not null
          ThirdPartyGenericCard.validateJSON(data['thirdPartyAnswerCard']);
        }
        // validate the optional field `workInProgressCardProto`
        if (data['workInProgressCardProto']) { // data not null
          EnterpriseTopazSidekickRecentDocumentsCardProto.validateJSON(data['workInProgressCardProto']);
        }

        return true;
    }


}



/**
 * @member {module:model/EnterpriseTopazSidekickAgendaGroupCardProto} agendaGroupCardProto
 */
EnterpriseTopazSidekickAssistCardProto.prototype['agendaGroupCardProto'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickCardMetadata} cardMetadata
 */
EnterpriseTopazSidekickAssistCardProto.prototype['cardMetadata'] = undefined;

/**
 * Card type.
 * @member {module:model/EnterpriseTopazSidekickAssistCardProto.CardTypeEnum} cardType
 */
EnterpriseTopazSidekickAssistCardProto.prototype['cardType'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickConflictingEventsCardProto} conflictingMeetingsCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['conflictingMeetingsCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickDocumentPerCategoryList} documentListCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['documentListCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickDocumentPerCategoryList} documentsWithMentions
 */
EnterpriseTopazSidekickAssistCardProto.prototype['documentsWithMentions'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickFindMeetingTimeCardProto} findMeetingTimeCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['findMeetingTimeCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickGenericAnswerCard} genericAnswerCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['genericAnswerCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickGetAndKeepAheadCardProto} getAndKeepAheadCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['getAndKeepAheadCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickAgendaEntry} meeting
 */
EnterpriseTopazSidekickAssistCardProto.prototype['meeting'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickMeetingNotesCardProto} meetingNotesCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['meetingNotesCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickMeetingNotesCardRequest} meetingNotesCardRequest
 */
EnterpriseTopazSidekickAssistCardProto.prototype['meetingNotesCardRequest'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPeopleDisambiguationCard} peopleDisambiguationCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['peopleDisambiguationCard'] = undefined;

/**
 * @member {module:model/PeoplePromotionCard} peoplePromotionCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['peoplePromotionCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPeopleAnswerPersonAnswerCard} personAnswerCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['personAnswerCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPersonProfileCard} personProfileCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['personProfileCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPersonalizedDocsCardProto} personalizedDocsCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['personalizedDocsCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPeopleAnswerRelatedPeopleAnswerCard} relatedPeopleAnswerCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['relatedPeopleAnswerCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickShareMeetingDocsCardProto} shareMeetingDocsCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['shareMeetingDocsCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickDocumentPerCategoryList} sharedDocuments
 */
EnterpriseTopazSidekickAssistCardProto.prototype['sharedDocuments'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickAnswerSuggestedQueryAnswerCard} suggestedQueryAnswerCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['suggestedQueryAnswerCard'] = undefined;

/**
 * @member {module:model/ThirdPartyGenericCard} thirdPartyAnswerCard
 */
EnterpriseTopazSidekickAssistCardProto.prototype['thirdPartyAnswerCard'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickRecentDocumentsCardProto} workInProgressCardProto
 */
EnterpriseTopazSidekickAssistCardProto.prototype['workInProgressCardProto'] = undefined;





/**
 * Allowed values for the <code>cardType</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickAssistCardProto['CardTypeEnum'] = {

    /**
     * value: "UNKNOWN_TYPE"
     * @const
     */
    "UNKNOWN_TYPE": "UNKNOWN_TYPE",

    /**
     * value: "AGENDA"
     * @const
     */
    "AGENDA": "AGENDA",

    /**
     * value: "CHANGELISTS"
     * @const
     */
    "CHANGELISTS": "CHANGELISTS",

    /**
     * value: "CONFLICTING_MEETINGS"
     * @const
     */
    "CONFLICTING_MEETINGS": "CONFLICTING_MEETINGS",

    /**
     * value: "CREATE_NOTES_FOR_MEETING"
     * @const
     */
    "CREATE_NOTES_FOR_MEETING": "CREATE_NOTES_FOR_MEETING",

    /**
     * value: "CREATE_NOTES_FOR_MEETING_REQUEST"
     * @const
     */
    "CREATE_NOTES_FOR_MEETING_REQUEST": "CREATE_NOTES_FOR_MEETING_REQUEST",

    /**
     * value: "CUSTOMER_NEWS"
     * @const
     */
    "CUSTOMER_NEWS": "CUSTOMER_NEWS",

    /**
     * value: "FIND_MEETING_TIME"
     * @const
     */
    "FIND_MEETING_TIME": "FIND_MEETING_TIME",

    /**
     * value: "NEXT_MEETING"
     * @const
     */
    "NEXT_MEETING": "NEXT_MEETING",

    /**
     * value: "PERSONALIZED_DOCS"
     * @const
     */
    "PERSONALIZED_DOCS": "PERSONALIZED_DOCS",

    /**
     * value: "TRENDING_DOCS"
     * @const
     */
    "TRENDING_DOCS": "TRENDING_DOCS",

    /**
     * value: "UPCOMING_TRIP"
     * @const
     */
    "UPCOMING_TRIP": "UPCOMING_TRIP",

    /**
     * value: "SUMMARY"
     * @const
     */
    "SUMMARY": "SUMMARY",

    /**
     * value: "MEETINGS"
     * @const
     */
    "MEETINGS": "MEETINGS",

    /**
     * value: "HOMEPAGE"
     * @const
     */
    "HOMEPAGE": "HOMEPAGE",

    /**
     * value: "SHARE_MEETING_DOCS"
     * @const
     */
    "SHARE_MEETING_DOCS": "SHARE_MEETING_DOCS",

    /**
     * value: "DISCOVER_PEOPLE"
     * @const
     */
    "DISCOVER_PEOPLE": "DISCOVER_PEOPLE",

    /**
     * value: "HOMEPAGE_V3"
     * @const
     */
    "HOMEPAGE_V3": "HOMEPAGE_V3",

    /**
     * value: "AGENDA_GROUP"
     * @const
     */
    "AGENDA_GROUP": "AGENDA_GROUP",

    /**
     * value: "WORK_IN_PROGRESS"
     * @const
     */
    "WORK_IN_PROGRESS": "WORK_IN_PROGRESS",

    /**
     * value: "GET_AND_KEEP_AHEAD"
     * @const
     */
    "GET_AND_KEEP_AHEAD": "GET_AND_KEEP_AHEAD",

    /**
     * value: "GENERIC_ANSWER_CARD"
     * @const
     */
    "GENERIC_ANSWER_CARD": "GENERIC_ANSWER_CARD",

    /**
     * value: "THIRD_PARTY_ANSWER_CARD"
     * @const
     */
    "THIRD_PARTY_ANSWER_CARD": "THIRD_PARTY_ANSWER_CARD",

    /**
     * value: "DOMAIN_TRENDING_DOCS"
     * @const
     */
    "DOMAIN_TRENDING_DOCS": "DOMAIN_TRENDING_DOCS",

    /**
     * value: "TEAM_TRENDING_DOCS"
     * @const
     */
    "TEAM_TRENDING_DOCS": "TEAM_TRENDING_DOCS",

    /**
     * value: "DOCUMENT_LIST_ANSWER_CARD"
     * @const
     */
    "DOCUMENT_LIST_ANSWER_CARD": "DOCUMENT_LIST_ANSWER_CARD",

    /**
     * value: "SUGGESTED_QUERY_ANSWER_CARD"
     * @const
     */
    "SUGGESTED_QUERY_ANSWER_CARD": "SUGGESTED_QUERY_ANSWER_CARD",

    /**
     * value: "PERSON_ANSWER_CARD"
     * @const
     */
    "PERSON_ANSWER_CARD": "PERSON_ANSWER_CARD",

    /**
     * value: "RELATED_PEOPLE_ANSWER_CARD"
     * @const
     */
    "RELATED_PEOPLE_ANSWER_CARD": "RELATED_PEOPLE_ANSWER_CARD",

    /**
     * value: "PERSON_KNOWLEDGE_CARD"
     * @const
     */
    "PERSON_KNOWLEDGE_CARD": "PERSON_KNOWLEDGE_CARD",

    /**
     * value: "PEOPLE_SEARCH_PROMOTION_CARD"
     * @const
     */
    "PEOPLE_SEARCH_PROMOTION_CARD": "PEOPLE_SEARCH_PROMOTION_CARD"
};



export default EnterpriseTopazSidekickAssistCardProto;

