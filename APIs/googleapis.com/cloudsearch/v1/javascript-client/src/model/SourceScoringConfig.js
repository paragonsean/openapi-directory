/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceScoringConfig model module.
 * @module model/SourceScoringConfig
 * @version v1
 */
class SourceScoringConfig {
    /**
     * Constructs a new <code>SourceScoringConfig</code>.
     * Set the scoring configuration. This allows modifying the ranking of results for a source.
     * @alias module:model/SourceScoringConfig
     */
    constructor() { 
        
        SourceScoringConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceScoringConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceScoringConfig} obj Optional instance to populate.
     * @return {module:model/SourceScoringConfig} The populated <code>SourceScoringConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceScoringConfig();

            if (data.hasOwnProperty('sourceImportance')) {
                obj['sourceImportance'] = ApiClient.convertToType(data['sourceImportance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceScoringConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceScoringConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sourceImportance'] && !(typeof data['sourceImportance'] === 'string' || data['sourceImportance'] instanceof String)) {
            throw new Error("Expected the field `sourceImportance` to be a primitive type in the JSON string but got " + data['sourceImportance']);
        }

        return true;
    }


}



/**
 * Importance of the source.
 * @member {module:model/SourceScoringConfig.SourceImportanceEnum} sourceImportance
 */
SourceScoringConfig.prototype['sourceImportance'] = undefined;





/**
 * Allowed values for the <code>sourceImportance</code> property.
 * @enum {String}
 * @readonly
 */
SourceScoringConfig['SourceImportanceEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH"
};



export default SourceScoringConfig;

