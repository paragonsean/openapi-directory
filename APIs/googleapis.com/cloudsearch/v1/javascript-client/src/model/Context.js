/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Context model module.
 * @module model/Context
 * @version v1
 */
class Context {
    /**
     * Constructs a new <code>Context</code>.
     * @alias module:model/Context
     */
    constructor() { 
        
        Context.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Context</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Context} obj Optional instance to populate.
     * @return {module:model/Context} The populated <code>Context</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Context();

            if (data.hasOwnProperty('app')) {
                obj['app'] = ApiClient.convertToType(data['app'], ['String']);
            }
            if (data.hasOwnProperty('dayOfWeek')) {
                obj['dayOfWeek'] = ApiClient.convertToType(data['dayOfWeek'], ['Number']);
            }
            if (data.hasOwnProperty('endDateSec')) {
                obj['endDateSec'] = ApiClient.convertToType(data['endDateSec'], 'String');
            }
            if (data.hasOwnProperty('endDayOffsetSec')) {
                obj['endDayOffsetSec'] = ApiClient.convertToType(data['endDayOffsetSec'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], ['String']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], ['String']);
            }
            if (data.hasOwnProperty('startDateSec')) {
                obj['startDateSec'] = ApiClient.convertToType(data['startDateSec'], 'String');
            }
            if (data.hasOwnProperty('startDayOffsetSec')) {
                obj['startDayOffsetSec'] = ApiClient.convertToType(data['startDayOffsetSec'], 'String');
            }
            if (data.hasOwnProperty('surface')) {
                obj['surface'] = ApiClient.convertToType(data['surface'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Context</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Context</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['app'])) {
            throw new Error("Expected the field `app` to be an array in the JSON data but got " + data['app']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dayOfWeek'])) {
            throw new Error("Expected the field `dayOfWeek` to be an array in the JSON data but got " + data['dayOfWeek']);
        }
        // ensure the json data is a string
        if (data['endDateSec'] && !(typeof data['endDateSec'] === 'string' || data['endDateSec'] instanceof String)) {
            throw new Error("Expected the field `endDateSec` to be a primitive type in the JSON string but got " + data['endDateSec']);
        }
        // ensure the json data is a string
        if (data['endDayOffsetSec'] && !(typeof data['endDayOffsetSec'] === 'string' || data['endDayOffsetSec'] instanceof String)) {
            throw new Error("Expected the field `endDayOffsetSec` to be a primitive type in the JSON string but got " + data['endDayOffsetSec']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locale'])) {
            throw new Error("Expected the field `locale` to be an array in the JSON data but got " + data['locale']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location'])) {
            throw new Error("Expected the field `location` to be an array in the JSON data but got " + data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['query'])) {
            throw new Error("Expected the field `query` to be an array in the JSON data but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['startDateSec'] && !(typeof data['startDateSec'] === 'string' || data['startDateSec'] instanceof String)) {
            throw new Error("Expected the field `startDateSec` to be a primitive type in the JSON string but got " + data['startDateSec']);
        }
        // ensure the json data is a string
        if (data['startDayOffsetSec'] && !(typeof data['startDayOffsetSec'] === 'string' || data['startDayOffsetSec'] instanceof String)) {
            throw new Error("Expected the field `startDayOffsetSec` to be a primitive type in the JSON string but got " + data['startDayOffsetSec']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['surface'])) {
            throw new Error("Expected the field `surface` to be an array in the JSON data but got " + data['surface']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['type'])) {
            throw new Error("Expected the field `type` to be an array in the JSON data but got " + data['type']);
        }

        return true;
    }


}



/**
 * [Optional] App where the card should be shown. If missing, the card will be shown in TOPAZ.
 * @member {Array.<module:model/Context.AppEnum>} app
 */
Context.prototype['app'] = undefined;

/**
 * [Optional] Day of week when the card should be shown, where 0 is Monday.
 * @member {Array.<Number>} dayOfWeek
 */
Context.prototype['dayOfWeek'] = undefined;

/**
 * [Optional] Date (in seconds since epoch) when the card should stop being shown. If missing, end_date_sec will be set to Jan 1st, 2100.
 * @member {String} endDateSec
 */
Context.prototype['endDateSec'] = undefined;

/**
 * [Optional] End time in seconds, within a day, when the card should stop being shown if it's within [start_date_sec, end_date_sec]. If missing, this is set to 86400 (24 hours x 3600 sec/hour), i.e., midnight next day.
 * @member {String} endDayOffsetSec
 */
Context.prototype['endDayOffsetSec'] = undefined;

/**
 * [Optional] The locales for which the card should be triggered (e.g., en_US and en_CA). If missing, the card is going to show to clients regardless of their locale.
 * @member {Array.<String>} locale
 */
Context.prototype['locale'] = undefined;

/**
 * [Optional] Text-free locations where the card should be shown. This is expected to match the user's location in focus. If no location is specified, the card will be shown for any location.
 * @member {Array.<String>} location
 */
Context.prototype['location'] = undefined;

/**
 * [Required only for Answer and RHS cards - will be ignored for Homepage] cards. It's the exact case-insensitive queries that will trigger the Answer or RHS card.
 * @member {Array.<String>} query
 */
Context.prototype['query'] = undefined;

/**
 * [Optional] Date (in seconds since epoch) when the card should start being shown. If missing, start_date_sec will be Jan 1st, 1970 UTC.
 * @member {String} startDateSec
 */
Context.prototype['startDateSec'] = undefined;

/**
 * [Optional] Start time in seconds, within a day, when the card should be shown if it's within [start_date_sec, end_date_sec]. If 0, the card will be shown from 12:00am on.
 * @member {String} startDayOffsetSec
 */
Context.prototype['startDayOffsetSec'] = undefined;

/**
 * [Optional] Surface where the card should be shown in. If missing, the card will be shown in any surface.
 * @member {Array.<module:model/Context.SurfaceEnum>} surface
 */
Context.prototype['surface'] = undefined;

/**
 * [Required] Type of the card (homepage, Answer or RHS).
 * @member {Array.<module:model/Context.TypeEnum>} type
 */
Context.prototype['type'] = undefined;





/**
 * Allowed values for the <code>app</code> property.
 * @enum {String}
 * @readonly
 */
Context['AppEnum'] = {

    /**
     * value: "UNKNOWN_APP"
     * @const
     */
    "UNKNOWN_APP": "UNKNOWN_APP",

    /**
     * value: "TOPAZ"
     * @const
     */
    "TOPAZ": "TOPAZ",

    /**
     * value: "MOMA"
     * @const
     */
    "MOMA": "MOMA"
};


/**
 * Allowed values for the <code>surface</code> property.
 * @enum {String}
 * @readonly
 */
Context['SurfaceEnum'] = {

    /**
     * value: "UNKNOWN_SURFACE"
     * @const
     */
    "UNKNOWN_SURFACE": "UNKNOWN_SURFACE",

    /**
     * value: "DESKTOP"
     * @const
     */
    "DESKTOP": "DESKTOP",

    /**
     * value: "ANDROID"
     * @const
     */
    "ANDROID": "ANDROID",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Context['TypeEnum'] = {

    /**
     * value: "UNKNOWN_CARD_TYPE"
     * @const
     */
    "UNKNOWN_CARD_TYPE": "UNKNOWN_CARD_TYPE",

    /**
     * value: "HOMEPAGE_CARD"
     * @const
     */
    "HOMEPAGE_CARD": "HOMEPAGE_CARD",

    /**
     * value: "ANSWER_CARD"
     * @const
     */
    "ANSWER_CARD": "ANSWER_CARD",

    /**
     * value: "RHS_CARD"
     * @const
     */
    "RHS_CARD": "RHS_CARD"
};



export default Context;

