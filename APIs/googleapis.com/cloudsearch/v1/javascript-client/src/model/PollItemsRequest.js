/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DebugOptions from './DebugOptions';

/**
 * The PollItemsRequest model module.
 * @module model/PollItemsRequest
 * @version v1
 */
class PollItemsRequest {
    /**
     * Constructs a new <code>PollItemsRequest</code>.
     * @alias module:model/PollItemsRequest
     */
    constructor() { 
        
        PollItemsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PollItemsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollItemsRequest} obj Optional instance to populate.
     * @return {module:model/PollItemsRequest} The populated <code>PollItemsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollItemsRequest();

            if (data.hasOwnProperty('connectorName')) {
                obj['connectorName'] = ApiClient.convertToType(data['connectorName'], 'String');
            }
            if (data.hasOwnProperty('debugOptions')) {
                obj['debugOptions'] = DebugOptions.constructFromObject(data['debugOptions']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('queue')) {
                obj['queue'] = ApiClient.convertToType(data['queue'], 'String');
            }
            if (data.hasOwnProperty('statusCodes')) {
                obj['statusCodes'] = ApiClient.convertToType(data['statusCodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollItemsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollItemsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectorName'] && !(typeof data['connectorName'] === 'string' || data['connectorName'] instanceof String)) {
            throw new Error("Expected the field `connectorName` to be a primitive type in the JSON string but got " + data['connectorName']);
        }
        // validate the optional field `debugOptions`
        if (data['debugOptions']) { // data not null
          DebugOptions.validateJSON(data['debugOptions']);
        }
        // ensure the json data is a string
        if (data['queue'] && !(typeof data['queue'] === 'string' || data['queue'] instanceof String)) {
            throw new Error("Expected the field `queue` to be a primitive type in the JSON string but got " + data['queue']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statusCodes'])) {
            throw new Error("Expected the field `statusCodes` to be an array in the JSON data but got " + data['statusCodes']);
        }

        return true;
    }


}



/**
 * The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
 * @member {String} connectorName
 */
PollItemsRequest.prototype['connectorName'] = undefined;

/**
 * @member {module:model/DebugOptions} debugOptions
 */
PollItemsRequest.prototype['debugOptions'] = undefined;

/**
 * Maximum number of items to return. The maximum value is 100 and the default value is 20.
 * @member {Number} limit
 */
PollItemsRequest.prototype['limit'] = undefined;

/**
 * Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.
 * @member {String} queue
 */
PollItemsRequest.prototype['queue'] = undefined;

/**
 * Limit the items polled to the ones with these statuses.
 * @member {Array.<module:model/PollItemsRequest.StatusCodesEnum>} statusCodes
 */
PollItemsRequest.prototype['statusCodes'] = undefined;





/**
 * Allowed values for the <code>statusCodes</code> property.
 * @enum {String}
 * @readonly
 */
PollItemsRequest['StatusCodesEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED",

    /**
     * value: "NEW_ITEM"
     * @const
     */
    "NEW_ITEM": "NEW_ITEM",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED"
};



export default PollItemsRequest;

