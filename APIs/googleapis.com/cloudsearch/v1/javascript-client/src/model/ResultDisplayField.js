/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamedProperty from './NamedProperty';

/**
 * The ResultDisplayField model module.
 * @module model/ResultDisplayField
 * @version v1
 */
class ResultDisplayField {
    /**
     * Constructs a new <code>ResultDisplayField</code>.
     * Display Fields for Search Results
     * @alias module:model/ResultDisplayField
     */
    constructor() { 
        
        ResultDisplayField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultDisplayField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultDisplayField} obj Optional instance to populate.
     * @return {module:model/ResultDisplayField} The populated <code>ResultDisplayField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultDisplayField();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = NamedProperty.constructFromObject(data['property']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResultDisplayField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResultDisplayField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }
        // validate the optional field `property`
        if (data['property']) { // data not null
          NamedProperty.validateJSON(data['property']);
        }

        return true;
    }


}



/**
 * The display label for the property.
 * @member {String} label
 */
ResultDisplayField.prototype['label'] = undefined;

/**
 * The operator name of the property.
 * @member {String} operatorName
 */
ResultDisplayField.prototype['operatorName'] = undefined;

/**
 * @member {module:model/NamedProperty} property
 */
ResultDisplayField.prototype['property'] = undefined;






export default ResultDisplayField;

