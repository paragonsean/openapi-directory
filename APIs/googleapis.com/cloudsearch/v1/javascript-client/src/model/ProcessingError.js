/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldViolation from './FieldViolation';

/**
 * The ProcessingError model module.
 * @module model/ProcessingError
 * @version v1
 */
class ProcessingError {
    /**
     * Constructs a new <code>ProcessingError</code>.
     * @alias module:model/ProcessingError
     */
    constructor() { 
        
        ProcessingError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessingError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessingError} obj Optional instance to populate.
     * @return {module:model/ProcessingError} The populated <code>ProcessingError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessingError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('fieldViolations')) {
                obj['fieldViolations'] = ApiClient.convertToType(data['fieldViolations'], [FieldViolation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessingError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessingError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        if (data['fieldViolations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldViolations'])) {
                throw new Error("Expected the field `fieldViolations` to be an array in the JSON data but got " + data['fieldViolations']);
            }
            // validate the optional field `fieldViolations` (array)
            for (const item of data['fieldViolations']) {
                FieldViolation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Error code indicating the nature of the error.
 * @member {module:model/ProcessingError.CodeEnum} code
 */
ProcessingError.prototype['code'] = undefined;

/**
 * The description of the error.
 * @member {String} errorMessage
 */
ProcessingError.prototype['errorMessage'] = undefined;

/**
 * In case the item fields are invalid, this field contains the details about the validation errors.
 * @member {Array.<module:model/FieldViolation>} fieldViolations
 */
ProcessingError.prototype['fieldViolations'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ProcessingError['CodeEnum'] = {

    /**
     * value: "PROCESSING_ERROR_CODE_UNSPECIFIED"
     * @const
     */
    "PROCESSING_ERROR_CODE_UNSPECIFIED": "PROCESSING_ERROR_CODE_UNSPECIFIED",

    /**
     * value: "MALFORMED_REQUEST"
     * @const
     */
    "MALFORMED_REQUEST": "MALFORMED_REQUEST",

    /**
     * value: "UNSUPPORTED_CONTENT_FORMAT"
     * @const
     */
    "UNSUPPORTED_CONTENT_FORMAT": "UNSUPPORTED_CONTENT_FORMAT",

    /**
     * value: "INDIRECT_BROKEN_ACL"
     * @const
     */
    "INDIRECT_BROKEN_ACL": "INDIRECT_BROKEN_ACL",

    /**
     * value: "ACL_CYCLE"
     * @const
     */
    "ACL_CYCLE": "ACL_CYCLE"
};



export default ProcessingError;

