/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SortOptions model module.
 * @module model/SortOptions
 * @version v1
 */
class SortOptions {
    /**
     * Constructs a new <code>SortOptions</code>.
     * @alias module:model/SortOptions
     */
    constructor() { 
        
        SortOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SortOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SortOptions} obj Optional instance to populate.
     * @return {module:model/SortOptions} The populated <code>SortOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SortOptions();

            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SortOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SortOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }

        return true;
    }


}



/**
 * The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.
 * @member {String} operatorName
 */
SortOptions.prototype['operatorName'] = undefined;

/**
 * Ascending is the default sort order
 * @member {module:model/SortOptions.SortOrderEnum} sortOrder
 */
SortOptions.prototype['sortOrder'] = undefined;





/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
SortOptions['SortOrderEnum'] = {

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default SortOptions;

