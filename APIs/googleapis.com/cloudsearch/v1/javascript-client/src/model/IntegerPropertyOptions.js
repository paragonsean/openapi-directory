/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegerFacetingOptions from './IntegerFacetingOptions';
import IntegerOperatorOptions from './IntegerOperatorOptions';

/**
 * The IntegerPropertyOptions model module.
 * @module model/IntegerPropertyOptions
 * @version v1
 */
class IntegerPropertyOptions {
    /**
     * Constructs a new <code>IntegerPropertyOptions</code>.
     * The options for integer properties.
     * @alias module:model/IntegerPropertyOptions
     */
    constructor() { 
        
        IntegerPropertyOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegerPropertyOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegerPropertyOptions} obj Optional instance to populate.
     * @return {module:model/IntegerPropertyOptions} The populated <code>IntegerPropertyOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegerPropertyOptions();

            if (data.hasOwnProperty('integerFacetingOptions')) {
                obj['integerFacetingOptions'] = IntegerFacetingOptions.constructFromObject(data['integerFacetingOptions']);
            }
            if (data.hasOwnProperty('maximumValue')) {
                obj['maximumValue'] = ApiClient.convertToType(data['maximumValue'], 'String');
            }
            if (data.hasOwnProperty('minimumValue')) {
                obj['minimumValue'] = ApiClient.convertToType(data['minimumValue'], 'String');
            }
            if (data.hasOwnProperty('operatorOptions')) {
                obj['operatorOptions'] = IntegerOperatorOptions.constructFromObject(data['operatorOptions']);
            }
            if (data.hasOwnProperty('orderedRanking')) {
                obj['orderedRanking'] = ApiClient.convertToType(data['orderedRanking'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegerPropertyOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegerPropertyOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `integerFacetingOptions`
        if (data['integerFacetingOptions']) { // data not null
          IntegerFacetingOptions.validateJSON(data['integerFacetingOptions']);
        }
        // ensure the json data is a string
        if (data['maximumValue'] && !(typeof data['maximumValue'] === 'string' || data['maximumValue'] instanceof String)) {
            throw new Error("Expected the field `maximumValue` to be a primitive type in the JSON string but got " + data['maximumValue']);
        }
        // ensure the json data is a string
        if (data['minimumValue'] && !(typeof data['minimumValue'] === 'string' || data['minimumValue'] instanceof String)) {
            throw new Error("Expected the field `minimumValue` to be a primitive type in the JSON string but got " + data['minimumValue']);
        }
        // validate the optional field `operatorOptions`
        if (data['operatorOptions']) { // data not null
          IntegerOperatorOptions.validateJSON(data['operatorOptions']);
        }
        // ensure the json data is a string
        if (data['orderedRanking'] && !(typeof data['orderedRanking'] === 'string' || data['orderedRanking'] instanceof String)) {
            throw new Error("Expected the field `orderedRanking` to be a primitive type in the JSON string but got " + data['orderedRanking']);
        }

        return true;
    }


}



/**
 * @member {module:model/IntegerFacetingOptions} integerFacetingOptions
 */
IntegerPropertyOptions.prototype['integerFacetingOptions'] = undefined;

/**
 * The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.
 * @member {String} maximumValue
 */
IntegerPropertyOptions.prototype['maximumValue'] = undefined;

/**
 * The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.
 * @member {String} minimumValue
 */
IntegerPropertyOptions.prototype['minimumValue'] = undefined;

/**
 * @member {module:model/IntegerOperatorOptions} operatorOptions
 */
IntegerPropertyOptions.prototype['operatorOptions'] = undefined;

/**
 * Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.
 * @member {module:model/IntegerPropertyOptions.OrderedRankingEnum} orderedRanking
 */
IntegerPropertyOptions.prototype['orderedRanking'] = undefined;





/**
 * Allowed values for the <code>orderedRanking</code> property.
 * @enum {String}
 * @readonly
 */
IntegerPropertyOptions['OrderedRankingEnum'] = {

    /**
     * value: "NO_ORDER"
     * @const
     */
    "NO_ORDER": "NO_ORDER",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default IntegerPropertyOptions;

