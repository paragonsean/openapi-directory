/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MapTile from './MapTile';
import SafeUrlProto from './SafeUrlProto';

/**
 * The MapInfo model module.
 * @module model/MapInfo
 * @version v1
 */
class MapInfo {
    /**
     * Constructs a new <code>MapInfo</code>.
     * Geo information used for rendering a map that shows the user&#39;s work location.
     * @alias module:model/MapInfo
     */
    constructor() { 
        
        MapInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MapInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MapInfo} obj Optional instance to populate.
     * @return {module:model/MapInfo} The populated <code>MapInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MapInfo();

            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('locationUrl')) {
                obj['locationUrl'] = SafeUrlProto.constructFromObject(data['locationUrl']);
            }
            if (data.hasOwnProperty('long')) {
                obj['long'] = ApiClient.convertToType(data['long'], 'Number');
            }
            if (data.hasOwnProperty('mapTile')) {
                obj['mapTile'] = ApiClient.convertToType(data['mapTile'], [MapTile]);
            }
            if (data.hasOwnProperty('zoom')) {
                obj['zoom'] = ApiClient.convertToType(data['zoom'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MapInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MapInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `locationUrl`
        if (data['locationUrl']) { // data not null
          SafeUrlProto.validateJSON(data['locationUrl']);
        }
        if (data['mapTile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mapTile'])) {
                throw new Error("Expected the field `mapTile` to be an array in the JSON data but got " + data['mapTile']);
            }
            // validate the optional field `mapTile` (array)
            for (const item of data['mapTile']) {
                MapTile.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Latitude in degrees
 * @member {Number} lat
 */
MapInfo.prototype['lat'] = undefined;

/**
 * @member {module:model/SafeUrlProto} locationUrl
 */
MapInfo.prototype['locationUrl'] = undefined;

/**
 * Longitude in degrees
 * @member {Number} long
 */
MapInfo.prototype['long'] = undefined;

/**
 * MapTiles for the area around a user's work location
 * @member {Array.<module:model/MapTile>} mapTile
 */
MapInfo.prototype['mapTile'] = undefined;

/**
 * The zoom level of the map. A constant zoom value of 18 is used for now to match the zoom of the map shown on a Moma Teams Profile page
 * @member {Number} zoom
 */
MapInfo.prototype['zoom'] = undefined;






export default MapInfo;

