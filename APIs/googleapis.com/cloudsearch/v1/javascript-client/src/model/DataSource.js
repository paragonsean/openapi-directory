/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GSuitePrincipal from './GSuitePrincipal';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version v1
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Datasource is a logical namespace for items to be indexed. All items must belong to a datasource. This is the prerequisite before items can be indexed into Cloud Search. 
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('disableModifications')) {
                obj['disableModifications'] = ApiClient.convertToType(data['disableModifications'], 'Boolean');
            }
            if (data.hasOwnProperty('disableServing')) {
                obj['disableServing'] = ApiClient.convertToType(data['disableServing'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('indexingServiceAccounts')) {
                obj['indexingServiceAccounts'] = ApiClient.convertToType(data['indexingServiceAccounts'], ['String']);
            }
            if (data.hasOwnProperty('itemsVisibility')) {
                obj['itemsVisibility'] = ApiClient.convertToType(data['itemsVisibility'], [GSuitePrincipal]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationIds')) {
                obj['operationIds'] = ApiClient.convertToType(data['operationIds'], ['String']);
            }
            if (data.hasOwnProperty('returnThumbnailUrls')) {
                obj['returnThumbnailUrls'] = ApiClient.convertToType(data['returnThumbnailUrls'], 'Boolean');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['indexingServiceAccounts'])) {
            throw new Error("Expected the field `indexingServiceAccounts` to be an array in the JSON data but got " + data['indexingServiceAccounts']);
        }
        if (data['itemsVisibility']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemsVisibility'])) {
                throw new Error("Expected the field `itemsVisibility` to be an array in the JSON data but got " + data['itemsVisibility']);
            }
            // validate the optional field `itemsVisibility` (array)
            for (const item of data['itemsVisibility']) {
                GSuitePrincipal.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operationIds'])) {
            throw new Error("Expected the field `operationIds` to be an array in the JSON data but got " + data['operationIds']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }

        return true;
    }


}



/**
 * If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.
 * @member {Boolean} disableModifications
 */
DataSource.prototype['disableModifications'] = undefined;

/**
 * Disable serving any search or assist results.
 * @member {Boolean} disableServing
 */
DataSource.prototype['disableServing'] = undefined;

/**
 * Required. Display name of the datasource The maximum length is 300 characters.
 * @member {String} displayName
 */
DataSource.prototype['displayName'] = undefined;

/**
 * List of service accounts that have indexing access.
 * @member {Array.<String>} indexingServiceAccounts
 */
DataSource.prototype['indexingServiceAccounts'] = undefined;

/**
 * This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.
 * @member {Array.<module:model/GSuitePrincipal>} itemsVisibility
 */
DataSource.prototype['itemsVisibility'] = undefined;

/**
 * The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.
 * @member {String} name
 */
DataSource.prototype['name'] = undefined;

/**
 * IDs of the Long Running Operations (LROs) currently running for this schema.
 * @member {Array.<String>} operationIds
 */
DataSource.prototype['operationIds'] = undefined;

/**
 * Can a user request to get thumbnail URI for Items indexed in this data source.
 * @member {Boolean} returnThumbnailUrls
 */
DataSource.prototype['returnThumbnailUrls'] = undefined;

/**
 * A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.
 * @member {String} shortName
 */
DataSource.prototype['shortName'] = undefined;






export default DataSource;

