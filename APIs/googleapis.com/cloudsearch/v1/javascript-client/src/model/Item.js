/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemAcl from './ItemAcl';
import ItemContent from './ItemContent';
import ItemMetadata from './ItemMetadata';
import ItemStatus from './ItemStatus';
import ItemStructuredData from './ItemStructuredData';

/**
 * The Item model module.
 * @module model/Item
 * @version v1
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * Represents a single object that is an item in the search index, such as a file, folder, or a database record.
     * @alias module:model/Item
     */
    constructor() { 
        
        Item.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ItemAcl.constructFromObject(data['acl']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ItemContent.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('itemType')) {
                obj['itemType'] = ApiClient.convertToType(data['itemType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ItemMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'Blob');
            }
            if (data.hasOwnProperty('queue')) {
                obj['queue'] = ApiClient.convertToType(data['queue'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ItemStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('structuredData')) {
                obj['structuredData'] = ItemStructuredData.constructFromObject(data['structuredData']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // validate the optional field `acl`
        if (data['acl']) { // data not null
          ItemAcl.validateJSON(data['acl']);
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          ItemContent.validateJSON(data['content']);
        }
        // ensure the json data is a string
        if (data['itemType'] && !(typeof data['itemType'] === 'string' || data['itemType'] instanceof String)) {
            throw new Error("Expected the field `itemType` to be a primitive type in the JSON string but got " + data['itemType']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ItemMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['queue'] && !(typeof data['queue'] === 'string' || data['queue'] instanceof String)) {
            throw new Error("Expected the field `queue` to be a primitive type in the JSON string but got " + data['queue']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ItemStatus.validateJSON(data['status']);
        }
        // validate the optional field `structuredData`
        if (data['structuredData']) { // data not null
          ItemStructuredData.validateJSON(data['structuredData']);
        }

        return true;
    }


}



/**
 * @member {module:model/ItemAcl} acl
 */
Item.prototype['acl'] = undefined;

/**
 * @member {module:model/ItemContent} content
 */
Item.prototype['content'] = undefined;

/**
 * The type for this item.
 * @member {module:model/Item.ItemTypeEnum} itemType
 */
Item.prototype['itemType'] = undefined;

/**
 * @member {module:model/ItemMetadata} metadata
 */
Item.prototype['metadata'] = undefined;

/**
 * The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
 * @member {String} name
 */
Item.prototype['name'] = undefined;

/**
 * Additional state connector can store for this item. The maximum length is 10000 bytes.
 * @member {Blob} payload
 */
Item.prototype['payload'] = undefined;

/**
 * Queue this item belongs to. The maximum length is 100 characters.
 * @member {String} queue
 */
Item.prototype['queue'] = undefined;

/**
 * @member {module:model/ItemStatus} status
 */
Item.prototype['status'] = undefined;

/**
 * @member {module:model/ItemStructuredData} structuredData
 */
Item.prototype['structuredData'] = undefined;

/**
 * Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
 * @member {Blob} version
 */
Item.prototype['version'] = undefined;





/**
 * Allowed values for the <code>itemType</code> property.
 * @enum {String}
 * @readonly
 */
Item['ItemTypeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "CONTENT_ITEM"
     * @const
     */
    "CONTENT_ITEM": "CONTENT_ITEM",

    /**
     * value: "CONTAINER_ITEM"
     * @const
     */
    "CONTAINER_ITEM": "CONTAINER_ITEM",

    /**
     * value: "VIRTUAL_CONTAINER_ITEM"
     * @const
     */
    "VIRTUAL_CONTAINER_ITEM": "VIRTUAL_CONTAINER_ITEM"
};



export default Item;

