/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceRestriction from './DataSourceRestriction';
import FacetOptions from './FacetOptions';
import QueryInterpretationConfig from './QueryInterpretationConfig';
import ScoringConfig from './ScoringConfig';
import SortOptions from './SortOptions';
import SourceConfig from './SourceConfig';

/**
 * The SearchApplication model module.
 * @module model/SearchApplication
 * @version v1
 */
class SearchApplication {
    /**
     * Constructs a new <code>SearchApplication</code>.
     * SearchApplication
     * @alias module:model/SearchApplication
     */
    constructor() { 
        
        SearchApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchApplication} obj Optional instance to populate.
     * @return {module:model/SearchApplication} The populated <code>SearchApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchApplication();

            if (data.hasOwnProperty('dataSourceRestrictions')) {
                obj['dataSourceRestrictions'] = ApiClient.convertToType(data['dataSourceRestrictions'], [DataSourceRestriction]);
            }
            if (data.hasOwnProperty('defaultFacetOptions')) {
                obj['defaultFacetOptions'] = ApiClient.convertToType(data['defaultFacetOptions'], [FacetOptions]);
            }
            if (data.hasOwnProperty('defaultSortOptions')) {
                obj['defaultSortOptions'] = SortOptions.constructFromObject(data['defaultSortOptions']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableAuditLog')) {
                obj['enableAuditLog'] = ApiClient.convertToType(data['enableAuditLog'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationIds')) {
                obj['operationIds'] = ApiClient.convertToType(data['operationIds'], ['String']);
            }
            if (data.hasOwnProperty('queryInterpretationConfig')) {
                obj['queryInterpretationConfig'] = QueryInterpretationConfig.constructFromObject(data['queryInterpretationConfig']);
            }
            if (data.hasOwnProperty('returnResultThumbnailUrls')) {
                obj['returnResultThumbnailUrls'] = ApiClient.convertToType(data['returnResultThumbnailUrls'], 'Boolean');
            }
            if (data.hasOwnProperty('scoringConfig')) {
                obj['scoringConfig'] = ScoringConfig.constructFromObject(data['scoringConfig']);
            }
            if (data.hasOwnProperty('sourceConfig')) {
                obj['sourceConfig'] = ApiClient.convertToType(data['sourceConfig'], [SourceConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchApplication</code>.
     */
    static validateJSON(data) {
        if (data['dataSourceRestrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSourceRestrictions'])) {
                throw new Error("Expected the field `dataSourceRestrictions` to be an array in the JSON data but got " + data['dataSourceRestrictions']);
            }
            // validate the optional field `dataSourceRestrictions` (array)
            for (const item of data['dataSourceRestrictions']) {
                DataSourceRestriction.validateJSON(item);
            };
        }
        if (data['defaultFacetOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultFacetOptions'])) {
                throw new Error("Expected the field `defaultFacetOptions` to be an array in the JSON data but got " + data['defaultFacetOptions']);
            }
            // validate the optional field `defaultFacetOptions` (array)
            for (const item of data['defaultFacetOptions']) {
                FacetOptions.validateJSON(item);
            };
        }
        // validate the optional field `defaultSortOptions`
        if (data['defaultSortOptions']) { // data not null
          SortOptions.validateJSON(data['defaultSortOptions']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operationIds'])) {
            throw new Error("Expected the field `operationIds` to be an array in the JSON data but got " + data['operationIds']);
        }
        // validate the optional field `queryInterpretationConfig`
        if (data['queryInterpretationConfig']) { // data not null
          QueryInterpretationConfig.validateJSON(data['queryInterpretationConfig']);
        }
        // validate the optional field `scoringConfig`
        if (data['scoringConfig']) { // data not null
          ScoringConfig.validateJSON(data['scoringConfig']);
        }
        if (data['sourceConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sourceConfig'])) {
                throw new Error("Expected the field `sourceConfig` to be an array in the JSON data but got " + data['sourceConfig']);
            }
            // validate the optional field `sourceConfig` (array)
            for (const item of data['sourceConfig']) {
                SourceConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Retrictions applied to the configurations. The maximum number of elements is 10.
 * @member {Array.<module:model/DataSourceRestriction>} dataSourceRestrictions
 */
SearchApplication.prototype['dataSourceRestrictions'] = undefined;

/**
 * The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
 * @member {Array.<module:model/FacetOptions>} defaultFacetOptions
 */
SearchApplication.prototype['defaultFacetOptions'] = undefined;

/**
 * @member {module:model/SortOptions} defaultSortOptions
 */
SearchApplication.prototype['defaultSortOptions'] = undefined;

/**
 * Display name of the Search Application. The maximum length is 300 characters.
 * @member {String} displayName
 */
SearchApplication.prototype['displayName'] = undefined;

/**
 * Indicates whether audit logging is on/off for requests made for the search application in query APIs.
 * @member {Boolean} enableAuditLog
 */
SearchApplication.prototype['enableAuditLog'] = undefined;

/**
 * The name of the Search Application. Format: searchapplications/{application_id}.
 * @member {String} name
 */
SearchApplication.prototype['name'] = undefined;

/**
 * Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.
 * @member {Array.<String>} operationIds
 */
SearchApplication.prototype['operationIds'] = undefined;

/**
 * @member {module:model/QueryInterpretationConfig} queryInterpretationConfig
 */
SearchApplication.prototype['queryInterpretationConfig'] = undefined;

/**
 * With each result we should return the URI for its thumbnail (when applicable)
 * @member {Boolean} returnResultThumbnailUrls
 */
SearchApplication.prototype['returnResultThumbnailUrls'] = undefined;

/**
 * @member {module:model/ScoringConfig} scoringConfig
 */
SearchApplication.prototype['scoringConfig'] = undefined;

/**
 * Configuration for a sources specified in data_source_restrictions.
 * @member {Array.<module:model/SourceConfig>} sourceConfig
 */
SearchApplication.prototype['sourceConfig'] = undefined;






export default SearchApplication;

