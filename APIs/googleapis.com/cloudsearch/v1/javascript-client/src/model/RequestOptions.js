/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DebugOptions from './DebugOptions';

/**
 * The RequestOptions model module.
 * @module model/RequestOptions
 * @version v1
 */
class RequestOptions {
    /**
     * Constructs a new <code>RequestOptions</code>.
     * Shared request options for all RPC methods.
     * @alias module:model/RequestOptions
     */
    constructor() { 
        
        RequestOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RequestOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestOptions} obj Optional instance to populate.
     * @return {module:model/RequestOptions} The populated <code>RequestOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestOptions();

            if (data.hasOwnProperty('debugOptions')) {
                obj['debugOptions'] = DebugOptions.constructFromObject(data['debugOptions']);
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('searchApplicationId')) {
                obj['searchApplicationId'] = ApiClient.convertToType(data['searchApplicationId'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `debugOptions`
        if (data['debugOptions']) { // data not null
          DebugOptions.validateJSON(data['debugOptions']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['searchApplicationId'] && !(typeof data['searchApplicationId'] === 'string' || data['searchApplicationId'] instanceof String)) {
            throw new Error("Expected the field `searchApplicationId` to be a primitive type in the JSON string but got " + data['searchApplicationId']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/DebugOptions} debugOptions
 */
RequestOptions.prototype['debugOptions'] = undefined;

/**
 * The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the documents in search results are biased towards the specified language. The Suggest API uses this field as a hint to make better third-party autocomplete predictions.
 * @member {String} languageCode
 */
RequestOptions.prototype['languageCode'] = undefined;

/**
 * The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922).
 * @member {String} searchApplicationId
 */
RequestOptions.prototype['searchApplicationId'] = undefined;

/**
 * Current user's time zone id, such as \"America/Los_Angeles\" or \"Australia/Sydney\". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.
 * @member {String} timeZone
 */
RequestOptions.prototype['timeZone'] = undefined;






export default RequestOptions;

