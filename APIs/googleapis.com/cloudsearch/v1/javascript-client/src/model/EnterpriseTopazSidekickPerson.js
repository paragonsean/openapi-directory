/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EnterpriseTopazSidekickPerson model module.
 * @module model/EnterpriseTopazSidekickPerson
 * @version v1
 */
class EnterpriseTopazSidekickPerson {
    /**
     * Constructs a new <code>EnterpriseTopazSidekickPerson</code>.
     * Person.
     * @alias module:model/EnterpriseTopazSidekickPerson
     */
    constructor() { 
        
        EnterpriseTopazSidekickPerson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnterpriseTopazSidekickPerson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnterpriseTopazSidekickPerson} obj Optional instance to populate.
     * @return {module:model/EnterpriseTopazSidekickPerson} The populated <code>EnterpriseTopazSidekickPerson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnterpriseTopazSidekickPerson();

            if (data.hasOwnProperty('affinityLevel')) {
                obj['affinityLevel'] = ApiClient.convertToType(data['affinityLevel'], 'String');
            }
            if (data.hasOwnProperty('attendingStatus')) {
                obj['attendingStatus'] = ApiClient.convertToType(data['attendingStatus'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('gaiaId')) {
                obj['gaiaId'] = ApiClient.convertToType(data['gaiaId'], 'String');
            }
            if (data.hasOwnProperty('isGroup')) {
                obj['isGroup'] = ApiClient.convertToType(data['isGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('obfuscatedGaiaId')) {
                obj['obfuscatedGaiaId'] = ApiClient.convertToType(data['obfuscatedGaiaId'], 'String');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnterpriseTopazSidekickPerson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnterpriseTopazSidekickPerson</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affinityLevel'] && !(typeof data['affinityLevel'] === 'string' || data['affinityLevel'] instanceof String)) {
            throw new Error("Expected the field `affinityLevel` to be a primitive type in the JSON string but got " + data['affinityLevel']);
        }
        // ensure the json data is a string
        if (data['attendingStatus'] && !(typeof data['attendingStatus'] === 'string' || data['attendingStatus'] instanceof String)) {
            throw new Error("Expected the field `attendingStatus` to be a primitive type in the JSON string but got " + data['attendingStatus']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['gaiaId'] && !(typeof data['gaiaId'] === 'string' || data['gaiaId'] instanceof String)) {
            throw new Error("Expected the field `gaiaId` to be a primitive type in the JSON string but got " + data['gaiaId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['obfuscatedGaiaId'] && !(typeof data['obfuscatedGaiaId'] === 'string' || data['obfuscatedGaiaId'] instanceof String)) {
            throw new Error("Expected the field `obfuscatedGaiaId` to be a primitive type in the JSON string but got " + data['obfuscatedGaiaId']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }

        return true;
    }


}



/**
 * The level of affinity this person has with the requesting user.
 * @member {module:model/EnterpriseTopazSidekickPerson.AffinityLevelEnum} affinityLevel
 */
EnterpriseTopazSidekickPerson.prototype['affinityLevel'] = undefined;

/**
 * Attendance status of the person when included in a meeting event.
 * @member {module:model/EnterpriseTopazSidekickPerson.AttendingStatusEnum} attendingStatus
 */
EnterpriseTopazSidekickPerson.prototype['attendingStatus'] = undefined;

/**
 * Email.
 * @member {String} email
 */
EnterpriseTopazSidekickPerson.prototype['email'] = undefined;

/**
 * Gaia id.
 * @member {String} gaiaId
 */
EnterpriseTopazSidekickPerson.prototype['gaiaId'] = undefined;

/**
 * Whether the invitee is a group.
 * @member {Boolean} isGroup
 */
EnterpriseTopazSidekickPerson.prototype['isGroup'] = undefined;

/**
 * Name.
 * @member {String} name
 */
EnterpriseTopazSidekickPerson.prototype['name'] = undefined;

/**
 * Obfuscated Gaia id.
 * @member {String} obfuscatedGaiaId
 */
EnterpriseTopazSidekickPerson.prototype['obfuscatedGaiaId'] = undefined;

/**
 * Absolute URL to the profile photo of the person.
 * @member {String} photoUrl
 */
EnterpriseTopazSidekickPerson.prototype['photoUrl'] = undefined;





/**
 * Allowed values for the <code>affinityLevel</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickPerson['AffinityLevelEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH"
};


/**
 * Allowed values for the <code>attendingStatus</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickPerson['AttendingStatusEnum'] = {

    /**
     * value: "AWAITING"
     * @const
     */
    "AWAITING": "AWAITING",

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "MAYBE"
     * @const
     */
    "MAYBE": "MAYBE"
};



export default EnterpriseTopazSidekickPerson;

