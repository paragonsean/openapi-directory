/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Value from './Value';

/**
 * The ValueFilter model module.
 * @module model/ValueFilter
 * @version v1
 */
class ValueFilter {
    /**
     * Constructs a new <code>ValueFilter</code>.
     * @alias module:model/ValueFilter
     */
    constructor() { 
        
        ValueFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueFilter} obj Optional instance to populate.
     * @return {module:model/ValueFilter} The populated <code>ValueFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueFilter();

            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = Value.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          Value.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
 * @member {String} operatorName
 */
ValueFilter.prototype['operatorName'] = undefined;

/**
 * @member {module:model/Value} value
 */
ValueFilter.prototype['value'] = undefined;






export default ValueFilter;

