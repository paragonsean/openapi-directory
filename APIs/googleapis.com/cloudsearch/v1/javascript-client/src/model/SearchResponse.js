/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorInfo from './ErrorInfo';
import FacetResult from './FacetResult';
import QueryInterpretation from './QueryInterpretation';
import ResponseDebugInfo from './ResponseDebugInfo';
import ResultCounts from './ResultCounts';
import SearchResult from './SearchResult';
import SpellResult from './SpellResult';
import StructuredResult from './StructuredResult';

/**
 * The SearchResponse model module.
 * @module model/SearchResponse
 * @version v1
 */
class SearchResponse {
    /**
     * Constructs a new <code>SearchResponse</code>.
     * The search API response.
     * @alias module:model/SearchResponse
     */
    constructor() { 
        
        SearchResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResponse} obj Optional instance to populate.
     * @return {module:model/SearchResponse} The populated <code>SearchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResponse();

            if (data.hasOwnProperty('debugInfo')) {
                obj['debugInfo'] = ResponseDebugInfo.constructFromObject(data['debugInfo']);
            }
            if (data.hasOwnProperty('errorInfo')) {
                obj['errorInfo'] = ErrorInfo.constructFromObject(data['errorInfo']);
            }
            if (data.hasOwnProperty('facetResults')) {
                obj['facetResults'] = ApiClient.convertToType(data['facetResults'], [FacetResult]);
            }
            if (data.hasOwnProperty('hasMoreResults')) {
                obj['hasMoreResults'] = ApiClient.convertToType(data['hasMoreResults'], 'Boolean');
            }
            if (data.hasOwnProperty('queryInterpretation')) {
                obj['queryInterpretation'] = QueryInterpretation.constructFromObject(data['queryInterpretation']);
            }
            if (data.hasOwnProperty('resultCountEstimate')) {
                obj['resultCountEstimate'] = ApiClient.convertToType(data['resultCountEstimate'], 'String');
            }
            if (data.hasOwnProperty('resultCountExact')) {
                obj['resultCountExact'] = ApiClient.convertToType(data['resultCountExact'], 'String');
            }
            if (data.hasOwnProperty('resultCounts')) {
                obj['resultCounts'] = ResultCounts.constructFromObject(data['resultCounts']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [SearchResult]);
            }
            if (data.hasOwnProperty('spellResults')) {
                obj['spellResults'] = ApiClient.convertToType(data['spellResults'], [SpellResult]);
            }
            if (data.hasOwnProperty('structuredResults')) {
                obj['structuredResults'] = ApiClient.convertToType(data['structuredResults'], [StructuredResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `debugInfo`
        if (data['debugInfo']) { // data not null
          ResponseDebugInfo.validateJSON(data['debugInfo']);
        }
        // validate the optional field `errorInfo`
        if (data['errorInfo']) { // data not null
          ErrorInfo.validateJSON(data['errorInfo']);
        }
        if (data['facetResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facetResults'])) {
                throw new Error("Expected the field `facetResults` to be an array in the JSON data but got " + data['facetResults']);
            }
            // validate the optional field `facetResults` (array)
            for (const item of data['facetResults']) {
                FacetResult.validateJSON(item);
            };
        }
        // validate the optional field `queryInterpretation`
        if (data['queryInterpretation']) { // data not null
          QueryInterpretation.validateJSON(data['queryInterpretation']);
        }
        // ensure the json data is a string
        if (data['resultCountEstimate'] && !(typeof data['resultCountEstimate'] === 'string' || data['resultCountEstimate'] instanceof String)) {
            throw new Error("Expected the field `resultCountEstimate` to be a primitive type in the JSON string but got " + data['resultCountEstimate']);
        }
        // ensure the json data is a string
        if (data['resultCountExact'] && !(typeof data['resultCountExact'] === 'string' || data['resultCountExact'] instanceof String)) {
            throw new Error("Expected the field `resultCountExact` to be a primitive type in the JSON string but got " + data['resultCountExact']);
        }
        // validate the optional field `resultCounts`
        if (data['resultCounts']) { // data not null
          ResultCounts.validateJSON(data['resultCounts']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                SearchResult.validateJSON(item);
            };
        }
        if (data['spellResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spellResults'])) {
                throw new Error("Expected the field `spellResults` to be an array in the JSON data but got " + data['spellResults']);
            }
            // validate the optional field `spellResults` (array)
            for (const item of data['spellResults']) {
                SpellResult.validateJSON(item);
            };
        }
        if (data['structuredResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['structuredResults'])) {
                throw new Error("Expected the field `structuredResults` to be an array in the JSON data but got " + data['structuredResults']);
            }
            // validate the optional field `structuredResults` (array)
            for (const item of data['structuredResults']) {
                StructuredResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ResponseDebugInfo} debugInfo
 */
SearchResponse.prototype['debugInfo'] = undefined;

/**
 * @member {module:model/ErrorInfo} errorInfo
 */
SearchResponse.prototype['errorInfo'] = undefined;

/**
 * Repeated facet results.
 * @member {Array.<module:model/FacetResult>} facetResults
 */
SearchResponse.prototype['facetResults'] = undefined;

/**
 * Whether there are more search results matching the query.
 * @member {Boolean} hasMoreResults
 */
SearchResponse.prototype['hasMoreResults'] = undefined;

/**
 * @member {module:model/QueryInterpretation} queryInterpretation
 */
SearchResponse.prototype['queryInterpretation'] = undefined;

/**
 * The estimated result count for this query.
 * @member {String} resultCountEstimate
 */
SearchResponse.prototype['resultCountEstimate'] = undefined;

/**
 * The exact result count for this query.
 * @member {String} resultCountExact
 */
SearchResponse.prototype['resultCountExact'] = undefined;

/**
 * @member {module:model/ResultCounts} resultCounts
 */
SearchResponse.prototype['resultCounts'] = undefined;

/**
 * Results from a search query.
 * @member {Array.<module:model/SearchResult>} results
 */
SearchResponse.prototype['results'] = undefined;

/**
 * Suggested spelling for the query.
 * @member {Array.<module:model/SpellResult>} spellResults
 */
SearchResponse.prototype['spellResults'] = undefined;

/**
 * Structured results for the user query. These results are not counted against the page_size.
 * @member {Array.<module:model/StructuredResult>} structuredResults
 */
SearchResponse.prototype['structuredResults'] = undefined;






export default SearchResponse;

