/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HtmlOperatorOptions model module.
 * @module model/HtmlOperatorOptions
 * @version v1
 */
class HtmlOperatorOptions {
    /**
     * Constructs a new <code>HtmlOperatorOptions</code>.
     * Used to provide a search operator for html properties. This is optional. Search operators let users restrict the query to specific fields relevant to the type of item being searched.
     * @alias module:model/HtmlOperatorOptions
     */
    constructor() { 
        
        HtmlOperatorOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HtmlOperatorOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HtmlOperatorOptions} obj Optional instance to populate.
     * @return {module:model/HtmlOperatorOptions} The populated <code>HtmlOperatorOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HtmlOperatorOptions();

            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HtmlOperatorOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HtmlOperatorOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }

        return true;
    }


}



/**
 * Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator return all items where *<value>* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
 * @member {String} operatorName
 */
HtmlOperatorOptions.prototype['operatorName'] = undefined;






export default HtmlOperatorOptions;

