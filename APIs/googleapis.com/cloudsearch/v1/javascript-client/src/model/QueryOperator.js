/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryOperator model module.
 * @module model/QueryOperator
 * @version v1
 */
class QueryOperator {
    /**
     * Constructs a new <code>QueryOperator</code>.
     * The definition of a operator that can be used in a Search/Suggest request.
     * @alias module:model/QueryOperator
     */
    constructor() { 
        
        QueryOperator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryOperator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryOperator} obj Optional instance to populate.
     * @return {module:model/QueryOperator} The populated <code>QueryOperator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryOperator();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enumValues')) {
                obj['enumValues'] = ApiClient.convertToType(data['enumValues'], ['String']);
            }
            if (data.hasOwnProperty('greaterThanOperatorName')) {
                obj['greaterThanOperatorName'] = ApiClient.convertToType(data['greaterThanOperatorName'], 'String');
            }
            if (data.hasOwnProperty('isFacetable')) {
                obj['isFacetable'] = ApiClient.convertToType(data['isFacetable'], 'Boolean');
            }
            if (data.hasOwnProperty('isRepeatable')) {
                obj['isRepeatable'] = ApiClient.convertToType(data['isRepeatable'], 'Boolean');
            }
            if (data.hasOwnProperty('isReturnable')) {
                obj['isReturnable'] = ApiClient.convertToType(data['isReturnable'], 'Boolean');
            }
            if (data.hasOwnProperty('isSortable')) {
                obj['isSortable'] = ApiClient.convertToType(data['isSortable'], 'Boolean');
            }
            if (data.hasOwnProperty('isSuggestable')) {
                obj['isSuggestable'] = ApiClient.convertToType(data['isSuggestable'], 'Boolean');
            }
            if (data.hasOwnProperty('lessThanOperatorName')) {
                obj['lessThanOperatorName'] = ApiClient.convertToType(data['lessThanOperatorName'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryOperator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryOperator</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enumValues'])) {
            throw new Error("Expected the field `enumValues` to be an array in the JSON data but got " + data['enumValues']);
        }
        // ensure the json data is a string
        if (data['greaterThanOperatorName'] && !(typeof data['greaterThanOperatorName'] === 'string' || data['greaterThanOperatorName'] instanceof String)) {
            throw new Error("Expected the field `greaterThanOperatorName` to be a primitive type in the JSON string but got " + data['greaterThanOperatorName']);
        }
        // ensure the json data is a string
        if (data['lessThanOperatorName'] && !(typeof data['lessThanOperatorName'] === 'string' || data['lessThanOperatorName'] instanceof String)) {
            throw new Error("Expected the field `lessThanOperatorName` to be a primitive type in the JSON string but got " + data['lessThanOperatorName']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Display name of the operator
 * @member {String} displayName
 */
QueryOperator.prototype['displayName'] = undefined;

/**
 * Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
 * @member {Array.<String>} enumValues
 */
QueryOperator.prototype['enumValues'] = undefined;

/**
 * Indicates the operator name that can be used to isolate the property using the greater-than operator.
 * @member {String} greaterThanOperatorName
 */
QueryOperator.prototype['greaterThanOperatorName'] = undefined;

/**
 * Can this operator be used to get facets.
 * @member {Boolean} isFacetable
 */
QueryOperator.prototype['isFacetable'] = undefined;

/**
 * Indicates if multiple values can be set for this property.
 * @member {Boolean} isRepeatable
 */
QueryOperator.prototype['isRepeatable'] = undefined;

/**
 * Will the property associated with this facet be returned as part of search results.
 * @member {Boolean} isReturnable
 */
QueryOperator.prototype['isReturnable'] = undefined;

/**
 * Can this operator be used to sort results.
 * @member {Boolean} isSortable
 */
QueryOperator.prototype['isSortable'] = undefined;

/**
 * Can get suggestions for this field.
 * @member {Boolean} isSuggestable
 */
QueryOperator.prototype['isSuggestable'] = undefined;

/**
 * Indicates the operator name that can be used to isolate the property using the less-than operator.
 * @member {String} lessThanOperatorName
 */
QueryOperator.prototype['lessThanOperatorName'] = undefined;

/**
 * The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
 * @member {String} objectType
 */
QueryOperator.prototype['objectType'] = undefined;

/**
 * The name of the operator.
 * @member {String} operatorName
 */
QueryOperator.prototype['operatorName'] = undefined;

/**
 * The type of the operator.
 * @member {module:model/QueryOperator.TypeEnum} type
 */
QueryOperator.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
QueryOperator['TypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML"
};



export default QueryOperator;

