/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailAddress from './EmailAddress';
import Name from './Name';
import PhoneNumber from './PhoneNumber';
import Photo from './Photo';

/**
 * The Person model module.
 * @module model/Person
 * @version v1
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * Object to represent a person.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('emailAddresses')) {
                obj['emailAddresses'] = ApiClient.convertToType(data['emailAddresses'], [EmailAddress]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('obfuscatedId')) {
                obj['obfuscatedId'] = ApiClient.convertToType(data['obfuscatedId'], 'String');
            }
            if (data.hasOwnProperty('personNames')) {
                obj['personNames'] = ApiClient.convertToType(data['personNames'], [Name]);
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [PhoneNumber]);
            }
            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [Photo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        if (data['emailAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emailAddresses'])) {
                throw new Error("Expected the field `emailAddresses` to be an array in the JSON data but got " + data['emailAddresses']);
            }
            // validate the optional field `emailAddresses` (array)
            for (const item of data['emailAddresses']) {
                EmailAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['obfuscatedId'] && !(typeof data['obfuscatedId'] === 'string' || data['obfuscatedId'] instanceof String)) {
            throw new Error("Expected the field `obfuscatedId` to be a primitive type in the JSON string but got " + data['obfuscatedId']);
        }
        if (data['personNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['personNames'])) {
                throw new Error("Expected the field `personNames` to be an array in the JSON data but got " + data['personNames']);
            }
            // validate the optional field `personNames` (array)
            for (const item of data['personNames']) {
                Name.validateJSON(item);
            };
        }
        if (data['phoneNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phoneNumbers'])) {
                throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
            }
            // validate the optional field `phoneNumbers` (array)
            for (const item of data['phoneNumbers']) {
                PhoneNumber.validateJSON(item);
            };
        }
        if (data['photos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photos'])) {
                throw new Error("Expected the field `photos` to be an array in the JSON data but got " + data['photos']);
            }
            // validate the optional field `photos` (array)
            for (const item of data['photos']) {
                Photo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The person's email addresses
 * @member {Array.<module:model/EmailAddress>} emailAddresses
 */
Person.prototype['emailAddresses'] = undefined;

/**
 * The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.
 * @member {String} name
 */
Person.prototype['name'] = undefined;

/**
 * Obfuscated ID of a person.
 * @member {String} obfuscatedId
 */
Person.prototype['obfuscatedId'] = undefined;

/**
 * The person's name
 * @member {Array.<module:model/Name>} personNames
 */
Person.prototype['personNames'] = undefined;

/**
 * The person's phone numbers
 * @member {Array.<module:model/PhoneNumber>} phoneNumbers
 */
Person.prototype['phoneNumbers'] = undefined;

/**
 * A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.
 * @member {Array.<module:model/Photo>} photos
 */
Person.prototype['photos'] = undefined;






export default Person;

