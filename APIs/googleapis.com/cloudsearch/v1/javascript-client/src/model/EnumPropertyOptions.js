/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumOperatorOptions from './EnumOperatorOptions';
import EnumValuePair from './EnumValuePair';

/**
 * The EnumPropertyOptions model module.
 * @module model/EnumPropertyOptions
 * @version v1
 */
class EnumPropertyOptions {
    /**
     * Constructs a new <code>EnumPropertyOptions</code>.
     * The options for enum properties, which allow you to define a restricted set of strings to match user queries, set rankings for those string values, and define an operator name to be paired with those strings so that users can narrow results to only items with a specific value. For example, for items in a request tracking system with priority information, you could define *p0* as an allowable enum value and tie this enum to the operator name *priority* so that search users could add *priority:p0* to their query to restrict the set of results to only those items indexed with the value *p0*.
     * @alias module:model/EnumPropertyOptions
     */
    constructor() { 
        
        EnumPropertyOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnumPropertyOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnumPropertyOptions} obj Optional instance to populate.
     * @return {module:model/EnumPropertyOptions} The populated <code>EnumPropertyOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnumPropertyOptions();

            if (data.hasOwnProperty('operatorOptions')) {
                obj['operatorOptions'] = EnumOperatorOptions.constructFromObject(data['operatorOptions']);
            }
            if (data.hasOwnProperty('orderedRanking')) {
                obj['orderedRanking'] = ApiClient.convertToType(data['orderedRanking'], 'String');
            }
            if (data.hasOwnProperty('possibleValues')) {
                obj['possibleValues'] = ApiClient.convertToType(data['possibleValues'], [EnumValuePair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnumPropertyOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnumPropertyOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `operatorOptions`
        if (data['operatorOptions']) { // data not null
          EnumOperatorOptions.validateJSON(data['operatorOptions']);
        }
        // ensure the json data is a string
        if (data['orderedRanking'] && !(typeof data['orderedRanking'] === 'string' || data['orderedRanking'] instanceof String)) {
            throw new Error("Expected the field `orderedRanking` to be a primitive type in the JSON string but got " + data['orderedRanking']);
        }
        if (data['possibleValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['possibleValues'])) {
                throw new Error("Expected the field `possibleValues` to be an array in the JSON data but got " + data['possibleValues']);
            }
            // validate the optional field `possibleValues` (array)
            for (const item of data['possibleValues']) {
                EnumValuePair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/EnumOperatorOptions} operatorOptions
 */
EnumPropertyOptions.prototype['operatorOptions'] = undefined;

/**
 * Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.
 * @member {module:model/EnumPropertyOptions.OrderedRankingEnum} orderedRanking
 */
EnumPropertyOptions.prototype['orderedRanking'] = undefined;

/**
 * The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.
 * @member {Array.<module:model/EnumValuePair>} possibleValues
 */
EnumPropertyOptions.prototype['possibleValues'] = undefined;





/**
 * Allowed values for the <code>orderedRanking</code> property.
 * @enum {String}
 * @readonly
 */
EnumPropertyOptions['OrderedRankingEnum'] = {

    /**
     * value: "NO_ORDER"
     * @const
     */
    "NO_ORDER": "NO_ORDER",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default EnumPropertyOptions;

