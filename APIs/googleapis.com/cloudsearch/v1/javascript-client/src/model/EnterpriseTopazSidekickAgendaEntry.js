/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseTopazSidekickCommonDocument from './EnterpriseTopazSidekickCommonDocument';
import EnterpriseTopazSidekickPerson from './EnterpriseTopazSidekickPerson';

/**
 * The EnterpriseTopazSidekickAgendaEntry model module.
 * @module model/EnterpriseTopazSidekickAgendaEntry
 * @version v1
 */
class EnterpriseTopazSidekickAgendaEntry {
    /**
     * Constructs a new <code>EnterpriseTopazSidekickAgendaEntry</code>.
     * An AgendaEntry, e.g., a Calendar Event.
     * @alias module:model/EnterpriseTopazSidekickAgendaEntry
     */
    constructor() { 
        
        EnterpriseTopazSidekickAgendaEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnterpriseTopazSidekickAgendaEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnterpriseTopazSidekickAgendaEntry} obj Optional instance to populate.
     * @return {module:model/EnterpriseTopazSidekickAgendaEntry} The populated <code>EnterpriseTopazSidekickAgendaEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnterpriseTopazSidekickAgendaEntry();

            if (data.hasOwnProperty('agendaItemUrl')) {
                obj['agendaItemUrl'] = ApiClient.convertToType(data['agendaItemUrl'], 'String');
            }
            if (data.hasOwnProperty('chronology')) {
                obj['chronology'] = ApiClient.convertToType(data['chronology'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = EnterpriseTopazSidekickPerson.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('currentUserAttendingStatus')) {
                obj['currentUserAttendingStatus'] = ApiClient.convertToType(data['currentUserAttendingStatus'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], [EnterpriseTopazSidekickCommonDocument]);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('endTimeMs')) {
                obj['endTimeMs'] = ApiClient.convertToType(data['endTimeMs'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('guestsCanInviteOthers')) {
                obj['guestsCanInviteOthers'] = ApiClient.convertToType(data['guestsCanInviteOthers'], 'Boolean');
            }
            if (data.hasOwnProperty('guestsCanModify')) {
                obj['guestsCanModify'] = ApiClient.convertToType(data['guestsCanModify'], 'Boolean');
            }
            if (data.hasOwnProperty('guestsCanSeeGuests')) {
                obj['guestsCanSeeGuests'] = ApiClient.convertToType(data['guestsCanSeeGuests'], 'Boolean');
            }
            if (data.hasOwnProperty('hangoutId')) {
                obj['hangoutId'] = ApiClient.convertToType(data['hangoutId'], 'String');
            }
            if (data.hasOwnProperty('hangoutUrl')) {
                obj['hangoutUrl'] = ApiClient.convertToType(data['hangoutUrl'], 'String');
            }
            if (data.hasOwnProperty('invitee')) {
                obj['invitee'] = ApiClient.convertToType(data['invitee'], [EnterpriseTopazSidekickPerson]);
            }
            if (data.hasOwnProperty('isAllDay')) {
                obj['isAllDay'] = ApiClient.convertToType(data['isAllDay'], 'Boolean');
            }
            if (data.hasOwnProperty('lastModificationTimeMs')) {
                obj['lastModificationTimeMs'] = ApiClient.convertToType(data['lastModificationTimeMs'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('notifyToUser')) {
                obj['notifyToUser'] = ApiClient.convertToType(data['notifyToUser'], 'Boolean');
            }
            if (data.hasOwnProperty('otherAttendeesExcluded')) {
                obj['otherAttendeesExcluded'] = ApiClient.convertToType(data['otherAttendeesExcluded'], 'Boolean');
            }
            if (data.hasOwnProperty('requesterIsOwner')) {
                obj['requesterIsOwner'] = ApiClient.convertToType(data['requesterIsOwner'], 'Boolean');
            }
            if (data.hasOwnProperty('showFullEventDetailsToUse')) {
                obj['showFullEventDetailsToUse'] = ApiClient.convertToType(data['showFullEventDetailsToUse'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('startTimeMs')) {
                obj['startTimeMs'] = ApiClient.convertToType(data['startTimeMs'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnterpriseTopazSidekickAgendaEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnterpriseTopazSidekickAgendaEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agendaItemUrl'] && !(typeof data['agendaItemUrl'] === 'string' || data['agendaItemUrl'] instanceof String)) {
            throw new Error("Expected the field `agendaItemUrl` to be a primitive type in the JSON string but got " + data['agendaItemUrl']);
        }
        // ensure the json data is a string
        if (data['chronology'] && !(typeof data['chronology'] === 'string' || data['chronology'] instanceof String)) {
            throw new Error("Expected the field `chronology` to be a primitive type in the JSON string but got " + data['chronology']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          EnterpriseTopazSidekickPerson.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['currentUserAttendingStatus'] && !(typeof data['currentUserAttendingStatus'] === 'string' || data['currentUserAttendingStatus'] instanceof String)) {
            throw new Error("Expected the field `currentUserAttendingStatus` to be a primitive type in the JSON string but got " + data['currentUserAttendingStatus']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['document']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['document'])) {
                throw new Error("Expected the field `document` to be an array in the JSON data but got " + data['document']);
            }
            // validate the optional field `document` (array)
            for (const item of data['document']) {
                EnterpriseTopazSidekickCommonDocument.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['endTimeMs'] && !(typeof data['endTimeMs'] === 'string' || data['endTimeMs'] instanceof String)) {
            throw new Error("Expected the field `endTimeMs` to be a primitive type in the JSON string but got " + data['endTimeMs']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['hangoutId'] && !(typeof data['hangoutId'] === 'string' || data['hangoutId'] instanceof String)) {
            throw new Error("Expected the field `hangoutId` to be a primitive type in the JSON string but got " + data['hangoutId']);
        }
        // ensure the json data is a string
        if (data['hangoutUrl'] && !(typeof data['hangoutUrl'] === 'string' || data['hangoutUrl'] instanceof String)) {
            throw new Error("Expected the field `hangoutUrl` to be a primitive type in the JSON string but got " + data['hangoutUrl']);
        }
        if (data['invitee']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invitee'])) {
                throw new Error("Expected the field `invitee` to be an array in the JSON data but got " + data['invitee']);
            }
            // validate the optional field `invitee` (array)
            for (const item of data['invitee']) {
                EnterpriseTopazSidekickPerson.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastModificationTimeMs'] && !(typeof data['lastModificationTimeMs'] === 'string' || data['lastModificationTimeMs'] instanceof String)) {
            throw new Error("Expected the field `lastModificationTimeMs` to be a primitive type in the JSON string but got " + data['lastModificationTimeMs']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['startTimeMs'] && !(typeof data['startTimeMs'] === 'string' || data['startTimeMs'] instanceof String)) {
            throw new Error("Expected the field `startTimeMs` to be a primitive type in the JSON string but got " + data['startTimeMs']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * URL of the agenda item.
 * @member {String} agendaItemUrl
 */
EnterpriseTopazSidekickAgendaEntry.prototype['agendaItemUrl'] = undefined;

/**
 * The chronology from the present.
 * @member {module:model/EnterpriseTopazSidekickAgendaEntry.ChronologyEnum} chronology
 */
EnterpriseTopazSidekickAgendaEntry.prototype['chronology'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickPerson} creator
 */
EnterpriseTopazSidekickAgendaEntry.prototype['creator'] = undefined;

/**
 * Attendance status for the current user making the request. This is a convenience data member in order to avoid figuring out the same by iterating the invitee list above on the caller side.
 * @member {module:model/EnterpriseTopazSidekickAgendaEntry.CurrentUserAttendingStatusEnum} currentUserAttendingStatus
 */
EnterpriseTopazSidekickAgendaEntry.prototype['currentUserAttendingStatus'] = undefined;

/**
 * Description of the agenda item (i.e., typically, summary in calendar event).
 * @member {String} description
 */
EnterpriseTopazSidekickAgendaEntry.prototype['description'] = undefined;

/**
 * Items related to the current AgendaEntry. E.g., related drive/mail/groups documents.
 * @member {Array.<module:model/EnterpriseTopazSidekickCommonDocument>} document
 */
EnterpriseTopazSidekickAgendaEntry.prototype['document'] = undefined;

/**
 * End date \"Friday, August 26\" in the user's timezone.
 * @member {String} endDate
 */
EnterpriseTopazSidekickAgendaEntry.prototype['endDate'] = undefined;

/**
 * End time (HH:mm) in the user's timezone.
 * @member {String} endTime
 */
EnterpriseTopazSidekickAgendaEntry.prototype['endTime'] = undefined;

/**
 * End time in milliseconds
 * @member {String} endTimeMs
 */
EnterpriseTopazSidekickAgendaEntry.prototype['endTimeMs'] = undefined;

/**
 * Event id provided by Calendar API.
 * @member {String} eventId
 */
EnterpriseTopazSidekickAgendaEntry.prototype['eventId'] = undefined;

/**
 * Whether the guests can invite other guests.
 * @member {Boolean} guestsCanInviteOthers
 */
EnterpriseTopazSidekickAgendaEntry.prototype['guestsCanInviteOthers'] = undefined;

/**
 * Whether the guests can modify the event.
 * @member {Boolean} guestsCanModify
 */
EnterpriseTopazSidekickAgendaEntry.prototype['guestsCanModify'] = undefined;

/**
 * Whether the guests of the event can be seen. If false, the user is going to be reported as the only attendee to the meeting, even though there may be more attendees.
 * @member {Boolean} guestsCanSeeGuests
 */
EnterpriseTopazSidekickAgendaEntry.prototype['guestsCanSeeGuests'] = undefined;

/**
 * Hangout meeting identifier.
 * @member {String} hangoutId
 */
EnterpriseTopazSidekickAgendaEntry.prototype['hangoutId'] = undefined;

/**
 * Absolute URL for the Hangout meeting.
 * @member {String} hangoutUrl
 */
EnterpriseTopazSidekickAgendaEntry.prototype['hangoutUrl'] = undefined;

/**
 * People attending the meeting.
 * @member {Array.<module:model/EnterpriseTopazSidekickPerson>} invitee
 */
EnterpriseTopazSidekickAgendaEntry.prototype['invitee'] = undefined;

/**
 * Whether the entry lasts all day.
 * @member {Boolean} isAllDay
 */
EnterpriseTopazSidekickAgendaEntry.prototype['isAllDay'] = undefined;

/**
 * Last time the event was modified.
 * @member {String} lastModificationTimeMs
 */
EnterpriseTopazSidekickAgendaEntry.prototype['lastModificationTimeMs'] = undefined;

/**
 * Agenda item location.
 * @member {String} location
 */
EnterpriseTopazSidekickAgendaEntry.prototype['location'] = undefined;

/**
 * Whether this should be notified to the user.
 * @member {Boolean} notifyToUser
 */
EnterpriseTopazSidekickAgendaEntry.prototype['notifyToUser'] = undefined;

/**
 * Whether guest list is not returned because number of attendees is too large.
 * @member {Boolean} otherAttendeesExcluded
 */
EnterpriseTopazSidekickAgendaEntry.prototype['otherAttendeesExcluded'] = undefined;

/**
 * Whether the requester is the owner of the agenda entry.
 * @member {Boolean} requesterIsOwner
 */
EnterpriseTopazSidekickAgendaEntry.prototype['requesterIsOwner'] = undefined;

/**
 * Whether the details of this entry should be displayed to the user.
 * @member {Boolean} showFullEventDetailsToUse
 */
EnterpriseTopazSidekickAgendaEntry.prototype['showFullEventDetailsToUse'] = undefined;

/**
 * Start date \"Friday, August 26\" in the user's timezone.
 * @member {String} startDate
 */
EnterpriseTopazSidekickAgendaEntry.prototype['startDate'] = undefined;

/**
 * Start time (HH:mm) in the user's timezone.
 * @member {String} startTime
 */
EnterpriseTopazSidekickAgendaEntry.prototype['startTime'] = undefined;

/**
 * Start time in milliseconds.
 * @member {String} startTimeMs
 */
EnterpriseTopazSidekickAgendaEntry.prototype['startTimeMs'] = undefined;

/**
 * User's calendar timezone;
 * @member {String} timeZone
 */
EnterpriseTopazSidekickAgendaEntry.prototype['timeZone'] = undefined;

/**
 * Title of the agenda item.
 * @member {String} title
 */
EnterpriseTopazSidekickAgendaEntry.prototype['title'] = undefined;





/**
 * Allowed values for the <code>chronology</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickAgendaEntry['ChronologyEnum'] = {

    /**
     * value: "STALE"
     * @const
     */
    "STALE": "STALE",

    /**
     * value: "ALL_DAY"
     * @const
     */
    "ALL_DAY": "ALL_DAY",

    /**
     * value: "PAST"
     * @const
     */
    "PAST": "PAST",

    /**
     * value: "RECENTLY_PAST"
     * @const
     */
    "RECENTLY_PAST": "RECENTLY_PAST",

    /**
     * value: "PRESENT"
     * @const
     */
    "PRESENT": "PRESENT",

    /**
     * value: "NEAR_FUTURE"
     * @const
     */
    "NEAR_FUTURE": "NEAR_FUTURE",

    /**
     * value: "FUTURE"
     * @const
     */
    "FUTURE": "FUTURE"
};


/**
 * Allowed values for the <code>currentUserAttendingStatus</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickAgendaEntry['CurrentUserAttendingStatusEnum'] = {

    /**
     * value: "AWAITING"
     * @const
     */
    "AWAITING": "AWAITING",

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "MAYBE"
     * @const
     */
    "MAYBE": "MAYBE"
};



export default EnterpriseTopazSidekickAgendaEntry;

