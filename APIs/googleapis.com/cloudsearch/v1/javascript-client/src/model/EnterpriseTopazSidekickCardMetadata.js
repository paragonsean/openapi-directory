/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseTopazSidekickNlpMetadata from './EnterpriseTopazSidekickNlpMetadata';
import EnterpriseTopazSidekickRankingParams from './EnterpriseTopazSidekickRankingParams';

/**
 * The EnterpriseTopazSidekickCardMetadata model module.
 * @module model/EnterpriseTopazSidekickCardMetadata
 * @version v1
 */
class EnterpriseTopazSidekickCardMetadata {
    /**
     * Constructs a new <code>EnterpriseTopazSidekickCardMetadata</code>.
     * Card metadata.
     * @alias module:model/EnterpriseTopazSidekickCardMetadata
     */
    constructor() { 
        
        EnterpriseTopazSidekickCardMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnterpriseTopazSidekickCardMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnterpriseTopazSidekickCardMetadata} obj Optional instance to populate.
     * @return {module:model/EnterpriseTopazSidekickCardMetadata} The populated <code>EnterpriseTopazSidekickCardMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnterpriseTopazSidekickCardMetadata();

            if (data.hasOwnProperty('cardCategory')) {
                obj['cardCategory'] = ApiClient.convertToType(data['cardCategory'], 'String');
            }
            if (data.hasOwnProperty('cardId')) {
                obj['cardId'] = ApiClient.convertToType(data['cardId'], 'String');
            }
            if (data.hasOwnProperty('chronology')) {
                obj['chronology'] = ApiClient.convertToType(data['chronology'], 'String');
            }
            if (data.hasOwnProperty('debugInfo')) {
                obj['debugInfo'] = ApiClient.convertToType(data['debugInfo'], 'String');
            }
            if (data.hasOwnProperty('nlpMetadata')) {
                obj['nlpMetadata'] = EnterpriseTopazSidekickNlpMetadata.constructFromObject(data['nlpMetadata']);
            }
            if (data.hasOwnProperty('rankingParams')) {
                obj['rankingParams'] = EnterpriseTopazSidekickRankingParams.constructFromObject(data['rankingParams']);
            }
            if (data.hasOwnProperty('renderMode')) {
                obj['renderMode'] = ApiClient.convertToType(data['renderMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnterpriseTopazSidekickCardMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnterpriseTopazSidekickCardMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardCategory'] && !(typeof data['cardCategory'] === 'string' || data['cardCategory'] instanceof String)) {
            throw new Error("Expected the field `cardCategory` to be a primitive type in the JSON string but got " + data['cardCategory']);
        }
        // ensure the json data is a string
        if (data['cardId'] && !(typeof data['cardId'] === 'string' || data['cardId'] instanceof String)) {
            throw new Error("Expected the field `cardId` to be a primitive type in the JSON string but got " + data['cardId']);
        }
        // ensure the json data is a string
        if (data['chronology'] && !(typeof data['chronology'] === 'string' || data['chronology'] instanceof String)) {
            throw new Error("Expected the field `chronology` to be a primitive type in the JSON string but got " + data['chronology']);
        }
        // ensure the json data is a string
        if (data['debugInfo'] && !(typeof data['debugInfo'] === 'string' || data['debugInfo'] instanceof String)) {
            throw new Error("Expected the field `debugInfo` to be a primitive type in the JSON string but got " + data['debugInfo']);
        }
        // validate the optional field `nlpMetadata`
        if (data['nlpMetadata']) { // data not null
          EnterpriseTopazSidekickNlpMetadata.validateJSON(data['nlpMetadata']);
        }
        // validate the optional field `rankingParams`
        if (data['rankingParams']) { // data not null
          EnterpriseTopazSidekickRankingParams.validateJSON(data['rankingParams']);
        }
        // ensure the json data is a string
        if (data['renderMode'] && !(typeof data['renderMode'] === 'string' || data['renderMode'] instanceof String)) {
            throw new Error("Expected the field `renderMode` to be a primitive type in the JSON string but got " + data['renderMode']);
        }

        return true;
    }


}



/**
 * Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.
 * @member {module:model/EnterpriseTopazSidekickCardMetadata.CardCategoryEnum} cardCategory
 */
EnterpriseTopazSidekickCardMetadata.prototype['cardCategory'] = undefined;

/**
 * An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.
 * @member {String} cardId
 */
EnterpriseTopazSidekickCardMetadata.prototype['cardId'] = undefined;

/**
 * Chronology.
 * @member {module:model/EnterpriseTopazSidekickCardMetadata.ChronologyEnum} chronology
 */
EnterpriseTopazSidekickCardMetadata.prototype['chronology'] = undefined;

/**
 * Debug info (only reported if request's debug_level > 0).
 * @member {String} debugInfo
 */
EnterpriseTopazSidekickCardMetadata.prototype['debugInfo'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickNlpMetadata} nlpMetadata
 */
EnterpriseTopazSidekickCardMetadata.prototype['nlpMetadata'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickRankingParams} rankingParams
 */
EnterpriseTopazSidekickCardMetadata.prototype['rankingParams'] = undefined;

/**
 * Render mode.
 * @member {module:model/EnterpriseTopazSidekickCardMetadata.RenderModeEnum} renderMode
 */
EnterpriseTopazSidekickCardMetadata.prototype['renderMode'] = undefined;





/**
 * Allowed values for the <code>cardCategory</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickCardMetadata['CardCategoryEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "ANSWER"
     * @const
     */
    "ANSWER": "ANSWER",

    /**
     * value: "KNOWLEDGE"
     * @const
     */
    "KNOWLEDGE": "KNOWLEDGE",

    /**
     * value: "HOMEPAGE"
     * @const
     */
    "HOMEPAGE": "HOMEPAGE"
};


/**
 * Allowed values for the <code>chronology</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickCardMetadata['ChronologyEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "PAST"
     * @const
     */
    "PAST": "PAST",

    /**
     * value: "RECENTLY_PAST"
     * @const
     */
    "RECENTLY_PAST": "RECENTLY_PAST",

    /**
     * value: "PRESENT"
     * @const
     */
    "PRESENT": "PRESENT",

    /**
     * value: "NEAR_FUTURE"
     * @const
     */
    "NEAR_FUTURE": "NEAR_FUTURE",

    /**
     * value: "FUTURE"
     * @const
     */
    "FUTURE": "FUTURE"
};


/**
 * Allowed values for the <code>renderMode</code> property.
 * @enum {String}
 * @readonly
 */
EnterpriseTopazSidekickCardMetadata['RenderModeEnum'] = {

    /**
     * value: "UNKNOWN_RENDER"
     * @const
     */
    "UNKNOWN_RENDER": "UNKNOWN_RENDER",

    /**
     * value: "COLLAPSED"
     * @const
     */
    "COLLAPSED": "COLLAPSED",

    /**
     * value: "EXPANDED"
     * @const
     */
    "EXPANDED": "EXPANDED"
};



export default EnterpriseTopazSidekickCardMetadata;

