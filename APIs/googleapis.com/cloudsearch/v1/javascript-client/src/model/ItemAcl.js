/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Principal from './Principal';

/**
 * The ItemAcl model module.
 * @module model/ItemAcl
 * @version v1
 */
class ItemAcl {
    /**
     * Constructs a new <code>ItemAcl</code>.
     * Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
     * @alias module:model/ItemAcl
     */
    constructor() { 
        
        ItemAcl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemAcl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemAcl} obj Optional instance to populate.
     * @return {module:model/ItemAcl} The populated <code>ItemAcl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemAcl();

            if (data.hasOwnProperty('aclInheritanceType')) {
                obj['aclInheritanceType'] = ApiClient.convertToType(data['aclInheritanceType'], 'String');
            }
            if (data.hasOwnProperty('deniedReaders')) {
                obj['deniedReaders'] = ApiClient.convertToType(data['deniedReaders'], [Principal]);
            }
            if (data.hasOwnProperty('inheritAclFrom')) {
                obj['inheritAclFrom'] = ApiClient.convertToType(data['inheritAclFrom'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [Principal]);
            }
            if (data.hasOwnProperty('readers')) {
                obj['readers'] = ApiClient.convertToType(data['readers'], [Principal]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemAcl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemAcl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aclInheritanceType'] && !(typeof data['aclInheritanceType'] === 'string' || data['aclInheritanceType'] instanceof String)) {
            throw new Error("Expected the field `aclInheritanceType` to be a primitive type in the JSON string but got " + data['aclInheritanceType']);
        }
        if (data['deniedReaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deniedReaders'])) {
                throw new Error("Expected the field `deniedReaders` to be an array in the JSON data but got " + data['deniedReaders']);
            }
            // validate the optional field `deniedReaders` (array)
            for (const item of data['deniedReaders']) {
                Principal.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['inheritAclFrom'] && !(typeof data['inheritAclFrom'] === 'string' || data['inheritAclFrom'] instanceof String)) {
            throw new Error("Expected the field `inheritAclFrom` to be a primitive type in the JSON string but got " + data['inheritAclFrom']);
        }
        if (data['owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['owners'])) {
                throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
            }
            // validate the optional field `owners` (array)
            for (const item of data['owners']) {
                Principal.validateJSON(item);
            };
        }
        if (data['readers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['readers'])) {
                throw new Error("Expected the field `readers` to be an array in the JSON data but got " + data['readers']);
            }
            // validate the optional field `readers` (array)
            for (const item of data['readers']) {
                Principal.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.
 * @member {module:model/ItemAcl.AclInheritanceTypeEnum} aclInheritanceType
 */
ItemAcl.prototype['aclInheritanceType'] = undefined;

/**
 * List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.
 * @member {Array.<module:model/Principal>} deniedReaders
 */
ItemAcl.prototype['deniedReaders'] = undefined;

/**
 * The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.
 * @member {String} inheritAclFrom
 */
ItemAcl.prototype['inheritAclFrom'] = undefined;

/**
 * Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.
 * @member {Array.<module:model/Principal>} owners
 */
ItemAcl.prototype['owners'] = undefined;

/**
 * List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.
 * @member {Array.<module:model/Principal>} readers
 */
ItemAcl.prototype['readers'] = undefined;





/**
 * Allowed values for the <code>aclInheritanceType</code> property.
 * @enum {String}
 * @readonly
 */
ItemAcl['AclInheritanceTypeEnum'] = {

    /**
     * value: "NOT_APPLICABLE"
     * @const
     */
    "NOT_APPLICABLE": "NOT_APPLICABLE",

    /**
     * value: "CHILD_OVERRIDE"
     * @const
     */
    "CHILD_OVERRIDE": "CHILD_OVERRIDE",

    /**
     * value: "PARENT_OVERRIDE"
     * @const
     */
    "PARENT_OVERRIDE": "PARENT_OVERRIDE",

    /**
     * value: "BOTH_PERMIT"
     * @const
     */
    "BOTH_PERMIT": "BOTH_PERMIT"
};



export default ItemAcl;

