/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextAttribute from './ContextAttribute';
import Interaction from './Interaction';
import SearchQualityMetadata from './SearchQualityMetadata';

/**
 * The ItemMetadata model module.
 * @module model/ItemMetadata
 * @version v1
 */
class ItemMetadata {
    /**
     * Constructs a new <code>ItemMetadata</code>.
     * Available metadata fields for the item.
     * @alias module:model/ItemMetadata
     */
    constructor() { 
        
        ItemMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemMetadata} obj Optional instance to populate.
     * @return {module:model/ItemMetadata} The populated <code>ItemMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemMetadata();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('contentLanguage')) {
                obj['contentLanguage'] = ApiClient.convertToType(data['contentLanguage'], 'String');
            }
            if (data.hasOwnProperty('contextAttributes')) {
                obj['contextAttributes'] = ApiClient.convertToType(data['contextAttributes'], [ContextAttribute]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = ApiClient.convertToType(data['interactions'], [Interaction]);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('searchQualityMetadata')) {
                obj['searchQualityMetadata'] = SearchQualityMetadata.constructFromObject(data['searchQualityMetadata']);
            }
            if (data.hasOwnProperty('sourceRepositoryUrl')) {
                obj['sourceRepositoryUrl'] = ApiClient.convertToType(data['sourceRepositoryUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['contentLanguage'] && !(typeof data['contentLanguage'] === 'string' || data['contentLanguage'] instanceof String)) {
            throw new Error("Expected the field `contentLanguage` to be a primitive type in the JSON string but got " + data['contentLanguage']);
        }
        if (data['contextAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contextAttributes'])) {
                throw new Error("Expected the field `contextAttributes` to be an array in the JSON data but got " + data['contextAttributes']);
            }
            // validate the optional field `contextAttributes` (array)
            for (const item of data['contextAttributes']) {
                ContextAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        if (data['interactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interactions'])) {
                throw new Error("Expected the field `interactions` to be an array in the JSON data but got " + data['interactions']);
            }
            // validate the optional field `interactions` (array)
            for (const item of data['interactions']) {
                Interaction.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // validate the optional field `searchQualityMetadata`
        if (data['searchQualityMetadata']) { // data not null
          SearchQualityMetadata.validateJSON(data['searchQualityMetadata']);
        }
        // ensure the json data is a string
        if (data['sourceRepositoryUrl'] && !(typeof data['sourceRepositoryUrl'] === 'string' || data['sourceRepositoryUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceRepositoryUrl` to be a primitive type in the JSON string but got " + data['sourceRepositoryUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.
 * @member {String} containerName
 */
ItemMetadata.prototype['containerName'] = undefined;

/**
 * The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.
 * @member {String} contentLanguage
 */
ItemMetadata.prototype['contentLanguage'] = undefined;

/**
 * A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.
 * @member {Array.<module:model/ContextAttribute>} contextAttributes
 */
ItemMetadata.prototype['contextAttributes'] = undefined;

/**
 * The time when the item was created in the source repository.
 * @member {String} createTime
 */
ItemMetadata.prototype['createTime'] = undefined;

/**
 * Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.
 * @member {String} hash
 */
ItemMetadata.prototype['hash'] = undefined;

/**
 * A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.
 * @member {Array.<module:model/Interaction>} interactions
 */
ItemMetadata.prototype['interactions'] = undefined;

/**
 * Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.
 * @member {Array.<String>} keywords
 */
ItemMetadata.prototype['keywords'] = undefined;

/**
 * The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.
 * @member {String} mimeType
 */
ItemMetadata.prototype['mimeType'] = undefined;

/**
 * The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.
 * @member {String} objectType
 */
ItemMetadata.prototype['objectType'] = undefined;

/**
 * @member {module:model/SearchQualityMetadata} searchQualityMetadata
 */
ItemMetadata.prototype['searchQualityMetadata'] = undefined;

/**
 * Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.
 * @member {String} sourceRepositoryUrl
 */
ItemMetadata.prototype['sourceRepositoryUrl'] = undefined;

/**
 * The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.
 * @member {String} title
 */
ItemMetadata.prototype['title'] = undefined;

/**
 * The time when the item was last modified in the source repository.
 * @member {String} updateTime
 */
ItemMetadata.prototype['updateTime'] = undefined;






export default ItemMetadata;

