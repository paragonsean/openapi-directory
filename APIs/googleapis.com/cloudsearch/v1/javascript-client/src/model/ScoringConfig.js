/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScoringConfig model module.
 * @module model/ScoringConfig
 * @version v1
 */
class ScoringConfig {
    /**
     * Constructs a new <code>ScoringConfig</code>.
     * Scoring configurations for a source while processing a Search or Suggest request.
     * @alias module:model/ScoringConfig
     */
    constructor() { 
        
        ScoringConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoringConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoringConfig} obj Optional instance to populate.
     * @return {module:model/ScoringConfig} The populated <code>ScoringConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoringConfig();

            if (data.hasOwnProperty('disableFreshness')) {
                obj['disableFreshness'] = ApiClient.convertToType(data['disableFreshness'], 'Boolean');
            }
            if (data.hasOwnProperty('disablePersonalization')) {
                obj['disablePersonalization'] = ApiClient.convertToType(data['disablePersonalization'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoringConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoringConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
 * @member {Boolean} disableFreshness
 */
ScoringConfig.prototype['disableFreshness'] = undefined;

/**
 * Whether to personalize the results. By default, personal signals will be used to boost results.
 * @member {Boolean} disablePersonalization
 */
ScoringConfig.prototype['disablePersonalization'] = undefined;






export default ScoringConfig;

