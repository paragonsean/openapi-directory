/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FreshnessOptions from './FreshnessOptions';
import ObjectDisplayOptions from './ObjectDisplayOptions';

/**
 * The ObjectOptions model module.
 * @module model/ObjectOptions
 * @version v1
 */
class ObjectOptions {
    /**
     * Constructs a new <code>ObjectOptions</code>.
     * The options for an object.
     * @alias module:model/ObjectOptions
     */
    constructor() { 
        
        ObjectOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectOptions} obj Optional instance to populate.
     * @return {module:model/ObjectOptions} The populated <code>ObjectOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectOptions();

            if (data.hasOwnProperty('displayOptions')) {
                obj['displayOptions'] = ObjectDisplayOptions.constructFromObject(data['displayOptions']);
            }
            if (data.hasOwnProperty('freshnessOptions')) {
                obj['freshnessOptions'] = FreshnessOptions.constructFromObject(data['freshnessOptions']);
            }
            if (data.hasOwnProperty('suggestionFilteringOperators')) {
                obj['suggestionFilteringOperators'] = ApiClient.convertToType(data['suggestionFilteringOperators'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `displayOptions`
        if (data['displayOptions']) { // data not null
          ObjectDisplayOptions.validateJSON(data['displayOptions']);
        }
        // validate the optional field `freshnessOptions`
        if (data['freshnessOptions']) { // data not null
          FreshnessOptions.validateJSON(data['freshnessOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestionFilteringOperators'])) {
            throw new Error("Expected the field `suggestionFilteringOperators` to be an array in the JSON data but got " + data['suggestionFilteringOperators']);
        }

        return true;
    }


}



/**
 * @member {module:model/ObjectDisplayOptions} displayOptions
 */
ObjectOptions.prototype['displayOptions'] = undefined;

/**
 * @member {module:model/FreshnessOptions} freshnessOptions
 */
ObjectOptions.prototype['freshnessOptions'] = undefined;

/**
 * Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported. NOTE: \"objecttype\", \"type\" and \"mimetype\" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different object types, this option has to be set once for each object definition.
 * @member {Array.<String>} suggestionFilteringOperators
 */
ObjectOptions.prototype['suggestionFilteringOperators'] = undefined;






export default ObjectOptions;

