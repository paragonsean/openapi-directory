/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryError from './RepositoryError';

/**
 * The PushItem model module.
 * @module model/PushItem
 * @version v1
 */
class PushItem {
    /**
     * Constructs a new <code>PushItem</code>.
     * Represents an item to be pushed to the indexing queue.
     * @alias module:model/PushItem
     */
    constructor() { 
        
        PushItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PushItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PushItem} obj Optional instance to populate.
     * @return {module:model/PushItem} The populated <code>PushItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PushItem();

            if (data.hasOwnProperty('contentHash')) {
                obj['contentHash'] = ApiClient.convertToType(data['contentHash'], 'String');
            }
            if (data.hasOwnProperty('metadataHash')) {
                obj['metadataHash'] = ApiClient.convertToType(data['metadataHash'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'Blob');
            }
            if (data.hasOwnProperty('queue')) {
                obj['queue'] = ApiClient.convertToType(data['queue'], 'String');
            }
            if (data.hasOwnProperty('repositoryError')) {
                obj['repositoryError'] = RepositoryError.constructFromObject(data['repositoryError']);
            }
            if (data.hasOwnProperty('structuredDataHash')) {
                obj['structuredDataHash'] = ApiClient.convertToType(data['structuredDataHash'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PushItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PushItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentHash'] && !(typeof data['contentHash'] === 'string' || data['contentHash'] instanceof String)) {
            throw new Error("Expected the field `contentHash` to be a primitive type in the JSON string but got " + data['contentHash']);
        }
        // ensure the json data is a string
        if (data['metadataHash'] && !(typeof data['metadataHash'] === 'string' || data['metadataHash'] instanceof String)) {
            throw new Error("Expected the field `metadataHash` to be a primitive type in the JSON string but got " + data['metadataHash']);
        }
        // ensure the json data is a string
        if (data['queue'] && !(typeof data['queue'] === 'string' || data['queue'] instanceof String)) {
            throw new Error("Expected the field `queue` to be a primitive type in the JSON string but got " + data['queue']);
        }
        // validate the optional field `repositoryError`
        if (data['repositoryError']) { // data not null
          RepositoryError.validateJSON(data['repositoryError']);
        }
        // ensure the json data is a string
        if (data['structuredDataHash'] && !(typeof data['structuredDataHash'] === 'string' || data['structuredDataHash'] instanceof String)) {
            throw new Error("Expected the field `structuredDataHash` to be a primitive type in the JSON string but got " + data['structuredDataHash']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
 * @member {String} contentHash
 */
PushItem.prototype['contentHash'] = undefined;

/**
 * The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
 * @member {String} metadataHash
 */
PushItem.prototype['metadataHash'] = undefined;

/**
 * Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.
 * @member {Blob} payload
 */
PushItem.prototype['payload'] = undefined;

/**
 * Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.
 * @member {String} queue
 */
PushItem.prototype['queue'] = undefined;

/**
 * @member {module:model/RepositoryError} repositoryError
 */
PushItem.prototype['repositoryError'] = undefined;

/**
 * Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.
 * @member {String} structuredDataHash
 */
PushItem.prototype['structuredDataHash'] = undefined;

/**
 * The type of the push operation that defines the push behavior.
 * @member {module:model/PushItem.TypeEnum} type
 */
PushItem.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PushItem['TypeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED",

    /**
     * value: "NOT_MODIFIED"
     * @const
     */
    "NOT_MODIFIED": "NOT_MODIFIED",

    /**
     * value: "REPOSITORY_ERROR"
     * @const
     */
    "REPOSITORY_ERROR": "REPOSITORY_ERROR",

    /**
     * value: "REQUEUE"
     * @const
     */
    "REQUEUE": "REQUEUE"
};



export default PushItem;

