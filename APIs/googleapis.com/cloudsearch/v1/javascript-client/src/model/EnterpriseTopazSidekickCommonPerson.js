/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseTopazSidekickCommonPersonBirthday from './EnterpriseTopazSidekickCommonPersonBirthday';

/**
 * The EnterpriseTopazSidekickCommonPerson model module.
 * @module model/EnterpriseTopazSidekickCommonPerson
 * @version v1
 */
class EnterpriseTopazSidekickCommonPerson {
    /**
     * Constructs a new <code>EnterpriseTopazSidekickCommonPerson</code>.
     * Common representation of a person.
     * @alias module:model/EnterpriseTopazSidekickCommonPerson
     */
    constructor() { 
        
        EnterpriseTopazSidekickCommonPerson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnterpriseTopazSidekickCommonPerson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnterpriseTopazSidekickCommonPerson} obj Optional instance to populate.
     * @return {module:model/EnterpriseTopazSidekickCommonPerson} The populated <code>EnterpriseTopazSidekickCommonPerson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnterpriseTopazSidekickCommonPerson();

            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = EnterpriseTopazSidekickCommonPersonBirthday.constructFromObject(data['birthday']);
            }
            if (data.hasOwnProperty('cellPhone')) {
                obj['cellPhone'] = ApiClient.convertToType(data['cellPhone'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('deskLocation')) {
                obj['deskLocation'] = ApiClient.convertToType(data['deskLocation'], 'String');
            }
            if (data.hasOwnProperty('deskPhone')) {
                obj['deskPhone'] = ApiClient.convertToType(data['deskPhone'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('fullAddress')) {
                obj['fullAddress'] = ApiClient.convertToType(data['fullAddress'], 'String');
            }
            if (data.hasOwnProperty('gaiaId')) {
                obj['gaiaId'] = ApiClient.convertToType(data['gaiaId'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = EnterpriseTopazSidekickCommonPerson.constructFromObject(data['manager']);
            }
            if (data.hasOwnProperty('obfuscatedId')) {
                obj['obfuscatedId'] = ApiClient.convertToType(data['obfuscatedId'], 'String');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnterpriseTopazSidekickCommonPerson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnterpriseTopazSidekickCommonPerson</code>.
     */
    static validateJSON(data) {
        // validate the optional field `birthday`
        if (data['birthday']) { // data not null
          EnterpriseTopazSidekickCommonPersonBirthday.validateJSON(data['birthday']);
        }
        // ensure the json data is a string
        if (data['cellPhone'] && !(typeof data['cellPhone'] === 'string' || data['cellPhone'] instanceof String)) {
            throw new Error("Expected the field `cellPhone` to be a primitive type in the JSON string but got " + data['cellPhone']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['deskLocation'] && !(typeof data['deskLocation'] === 'string' || data['deskLocation'] instanceof String)) {
            throw new Error("Expected the field `deskLocation` to be a primitive type in the JSON string but got " + data['deskLocation']);
        }
        // ensure the json data is a string
        if (data['deskPhone'] && !(typeof data['deskPhone'] === 'string' || data['deskPhone'] instanceof String)) {
            throw new Error("Expected the field `deskPhone` to be a primitive type in the JSON string but got " + data['deskPhone']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['fullAddress'] && !(typeof data['fullAddress'] === 'string' || data['fullAddress'] instanceof String)) {
            throw new Error("Expected the field `fullAddress` to be a primitive type in the JSON string but got " + data['fullAddress']);
        }
        // ensure the json data is a string
        if (data['gaiaId'] && !(typeof data['gaiaId'] === 'string' || data['gaiaId'] instanceof String)) {
            throw new Error("Expected the field `gaiaId` to be a primitive type in the JSON string but got " + data['gaiaId']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // validate the optional field `manager`
        if (data['manager']) { // data not null
          EnterpriseTopazSidekickCommonPerson.validateJSON(data['manager']);
        }
        // ensure the json data is a string
        if (data['obfuscatedId'] && !(typeof data['obfuscatedId'] === 'string' || data['obfuscatedId'] instanceof String)) {
            throw new Error("Expected the field `obfuscatedId` to be a primitive type in the JSON string but got " + data['obfuscatedId']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }

        return true;
    }


}



/**
 * @member {module:model/EnterpriseTopazSidekickCommonPersonBirthday} birthday
 */
EnterpriseTopazSidekickCommonPerson.prototype['birthday'] = undefined;

/**
 * Cell phone number.
 * @member {String} cellPhone
 */
EnterpriseTopazSidekickCommonPerson.prototype['cellPhone'] = undefined;

/**
 * The department the person works in (e.g. Engineering).
 * @member {String} department
 */
EnterpriseTopazSidekickCommonPerson.prototype['department'] = undefined;

/**
 * Desk location (e.g. US-MTV-PR55-5-5B1I).
 * @member {String} deskLocation
 */
EnterpriseTopazSidekickCommonPerson.prototype['deskLocation'] = undefined;

/**
 * Work desk phone number.
 * @member {String} deskPhone
 */
EnterpriseTopazSidekickCommonPerson.prototype['deskPhone'] = undefined;

/**
 * The full name.
 * @member {String} displayName
 */
EnterpriseTopazSidekickCommonPerson.prototype['displayName'] = undefined;

/**
 * Email.
 * @member {String} email
 */
EnterpriseTopazSidekickCommonPerson.prototype['email'] = undefined;

/**
 * The last name.
 * @member {String} familyName
 */
EnterpriseTopazSidekickCommonPerson.prototype['familyName'] = undefined;

/**
 * The fully formatted address (e.g. 1255 Pear Avenue, Mountain View 94043, United States).
 * @member {String} fullAddress
 */
EnterpriseTopazSidekickCommonPerson.prototype['fullAddress'] = undefined;

/**
 * This field is deprecated. The obfuscated_id should be used instead.
 * @member {String} gaiaId
 */
EnterpriseTopazSidekickCommonPerson.prototype['gaiaId'] = undefined;

/**
 * The first name.
 * @member {String} givenName
 */
EnterpriseTopazSidekickCommonPerson.prototype['givenName'] = undefined;

/**
 * The person's job title (e.g. Software Engineer).
 * @member {String} jobTitle
 */
EnterpriseTopazSidekickCommonPerson.prototype['jobTitle'] = undefined;

/**
 * @member {module:model/EnterpriseTopazSidekickCommonPerson} manager
 */
EnterpriseTopazSidekickCommonPerson.prototype['manager'] = undefined;

/**
 * The obfuscated GAIA ID.
 * @member {String} obfuscatedId
 */
EnterpriseTopazSidekickCommonPerson.prototype['obfuscatedId'] = undefined;

/**
 * The URL for the Focus profile picture.
 * @member {String} photoUrl
 */
EnterpriseTopazSidekickCommonPerson.prototype['photoUrl'] = undefined;

/**
 * The street address (e.g. 1255 Pear Avenue).
 * @member {String} streetAddress
 */
EnterpriseTopazSidekickCommonPerson.prototype['streetAddress'] = undefined;






export default EnterpriseTopazSidekickCommonPerson;

