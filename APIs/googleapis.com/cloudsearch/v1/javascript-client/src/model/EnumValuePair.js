/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EnumValuePair model module.
 * @module model/EnumValuePair
 * @version v1
 */
class EnumValuePair {
    /**
     * Constructs a new <code>EnumValuePair</code>.
     * The enumeration value pair defines two things: a required string value and an optional integer value. The string value defines the necessary query term required to retrieve that item, such as *p0* for a priority item. The integer value determines the ranking of that string value relative to other enumerated values for the same property. For example, you might associate *p0* with *0* and define another enum pair such as *p1* and *1*. You must use the integer value in combination with ordered ranking to set the ranking of a given value relative to other enumerated values for the same property name. Here, a ranking order of DESCENDING for *priority* properties results in a ranking boost for items indexed with a value of *p0* compared to items indexed with a value of *p1*. Without a specified ranking order, the integer value has no effect on item ranking.
     * @alias module:model/EnumValuePair
     */
    constructor() { 
        
        EnumValuePair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnumValuePair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnumValuePair} obj Optional instance to populate.
     * @return {module:model/EnumValuePair} The populated <code>EnumValuePair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnumValuePair();

            if (data.hasOwnProperty('integerValue')) {
                obj['integerValue'] = ApiClient.convertToType(data['integerValue'], 'Number');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnumValuePair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnumValuePair</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * The integer value of the EnumValuePair which must be non-negative. Optional.
 * @member {Number} integerValue
 */
EnumValuePair.prototype['integerValue'] = undefined;

/**
 * The string value of the EnumValuePair. The maximum length is 32 characters.
 * @member {String} stringValue
 */
EnumValuePair.prototype['stringValue'] = undefined;






export default EnumValuePair;

