/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Principal from './Principal';

/**
 * The UnmappedIdentity model module.
 * @module model/UnmappedIdentity
 * @version v1
 */
class UnmappedIdentity {
    /**
     * Constructs a new <code>UnmappedIdentity</code>.
     * @alias module:model/UnmappedIdentity
     */
    constructor() { 
        
        UnmappedIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UnmappedIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnmappedIdentity} obj Optional instance to populate.
     * @return {module:model/UnmappedIdentity} The populated <code>UnmappedIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnmappedIdentity();

            if (data.hasOwnProperty('externalIdentity')) {
                obj['externalIdentity'] = Principal.constructFromObject(data['externalIdentity']);
            }
            if (data.hasOwnProperty('resolutionStatusCode')) {
                obj['resolutionStatusCode'] = ApiClient.convertToType(data['resolutionStatusCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UnmappedIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UnmappedIdentity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `externalIdentity`
        if (data['externalIdentity']) { // data not null
          Principal.validateJSON(data['externalIdentity']);
        }
        // ensure the json data is a string
        if (data['resolutionStatusCode'] && !(typeof data['resolutionStatusCode'] === 'string' || data['resolutionStatusCode'] instanceof String)) {
            throw new Error("Expected the field `resolutionStatusCode` to be a primitive type in the JSON string but got " + data['resolutionStatusCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/Principal} externalIdentity
 */
UnmappedIdentity.prototype['externalIdentity'] = undefined;

/**
 * The resolution status for the external identity.
 * @member {module:model/UnmappedIdentity.ResolutionStatusCodeEnum} resolutionStatusCode
 */
UnmappedIdentity.prototype['resolutionStatusCode'] = undefined;





/**
 * Allowed values for the <code>resolutionStatusCode</code> property.
 * @enum {String}
 * @readonly
 */
UnmappedIdentity['ResolutionStatusCodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "IDENTITY_SOURCE_NOT_FOUND"
     * @const
     */
    "IDENTITY_SOURCE_NOT_FOUND": "IDENTITY_SOURCE_NOT_FOUND",

    /**
     * value: "IDENTITY_SOURCE_MISCONFIGURED"
     * @const
     */
    "IDENTITY_SOURCE_MISCONFIGURED": "IDENTITY_SOURCE_MISCONFIGURED",

    /**
     * value: "TOO_MANY_MAPPINGS_FOUND"
     * @const
     */
    "TOO_MANY_MAPPINGS_FOUND": "TOO_MANY_MAPPINGS_FOUND",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR"
};



export default UnmappedIdentity;

