/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadItemRef from './UploadItemRef';

/**
 * The ItemContent model module.
 * @module model/ItemContent
 * @version v1
 */
class ItemContent {
    /**
     * Constructs a new <code>ItemContent</code>.
     * Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.
     * @alias module:model/ItemContent
     */
    constructor() { 
        
        ItemContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemContent} obj Optional instance to populate.
     * @return {module:model/ItemContent} The populated <code>ItemContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemContent();

            if (data.hasOwnProperty('contentDataRef')) {
                obj['contentDataRef'] = UploadItemRef.constructFromObject(data['contentDataRef']);
            }
            if (data.hasOwnProperty('contentFormat')) {
                obj['contentFormat'] = ApiClient.convertToType(data['contentFormat'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('inlineContent')) {
                obj['inlineContent'] = ApiClient.convertToType(data['inlineContent'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemContent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contentDataRef`
        if (data['contentDataRef']) { // data not null
          UploadItemRef.validateJSON(data['contentDataRef']);
        }
        // ensure the json data is a string
        if (data['contentFormat'] && !(typeof data['contentFormat'] === 'string' || data['contentFormat'] instanceof String)) {
            throw new Error("Expected the field `contentFormat` to be a primitive type in the JSON string but got " + data['contentFormat']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }

        return true;
    }


}



/**
 * @member {module:model/UploadItemRef} contentDataRef
 */
ItemContent.prototype['contentDataRef'] = undefined;

/**
 * @member {module:model/ItemContent.ContentFormatEnum} contentFormat
 */
ItemContent.prototype['contentFormat'] = undefined;

/**
 * Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.
 * @member {String} hash
 */
ItemContent.prototype['hash'] = undefined;

/**
 * Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).
 * @member {Blob} inlineContent
 */
ItemContent.prototype['inlineContent'] = undefined;





/**
 * Allowed values for the <code>contentFormat</code> property.
 * @enum {String}
 * @readonly
 */
ItemContent['ContentFormatEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "RAW"
     * @const
     */
    "RAW": "RAW"
};



export default ItemContent;

