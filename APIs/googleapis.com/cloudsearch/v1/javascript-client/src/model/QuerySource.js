/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryOperator from './QueryOperator';
import Source from './Source';

/**
 * The QuerySource model module.
 * @module model/QuerySource
 * @version v1
 */
class QuerySource {
    /**
     * Constructs a new <code>QuerySource</code>.
     * List of sources that the user can search using the query API.
     * @alias module:model/QuerySource
     */
    constructor() { 
        
        QuerySource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuerySource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuerySource} obj Optional instance to populate.
     * @return {module:model/QuerySource} The populated <code>QuerySource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuerySource();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('operators')) {
                obj['operators'] = ApiClient.convertToType(data['operators'], [QueryOperator]);
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuerySource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuerySource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['operators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operators'])) {
                throw new Error("Expected the field `operators` to be an array in the JSON data but got " + data['operators']);
            }
            // validate the optional field `operators` (array)
            for (const item of data['operators']) {
                QueryOperator.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * Display name of the data source.
 * @member {String} displayName
 */
QuerySource.prototype['displayName'] = undefined;

/**
 * List of all operators applicable for this source.
 * @member {Array.<module:model/QueryOperator>} operators
 */
QuerySource.prototype['operators'] = undefined;

/**
 * A short name or alias for the source. This value can be used with the 'source' operator.
 * @member {String} shortName
 */
QuerySource.prototype['shortName'] = undefined;

/**
 * @member {module:model/Source} source
 */
QuerySource.prototype['source'] = undefined;






export default QuerySource;

