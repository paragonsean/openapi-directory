/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateValues from './DateValues';
import DoubleValues from './DoubleValues';
import EnumValues from './EnumValues';
import HtmlValues from './HtmlValues';
import IntegerValues from './IntegerValues';
import ObjectValues from './ObjectValues';
import TextValues from './TextValues';
import TimestampValues from './TimestampValues';

/**
 * The NamedProperty model module.
 * @module model/NamedProperty
 * @version v1
 */
class NamedProperty {
    /**
     * Constructs a new <code>NamedProperty</code>.
     * A typed name-value pair for structured data. The type of the value should be the same as the registered type for the &#x60;name&#x60; property in the object definition of &#x60;objectType&#x60;.
     * @alias module:model/NamedProperty
     */
    constructor() { 
        
        NamedProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamedProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamedProperty} obj Optional instance to populate.
     * @return {module:model/NamedProperty} The populated <code>NamedProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamedProperty();

            if (data.hasOwnProperty('booleanValue')) {
                obj['booleanValue'] = ApiClient.convertToType(data['booleanValue'], 'Boolean');
            }
            if (data.hasOwnProperty('dateValues')) {
                obj['dateValues'] = DateValues.constructFromObject(data['dateValues']);
            }
            if (data.hasOwnProperty('doubleValues')) {
                obj['doubleValues'] = DoubleValues.constructFromObject(data['doubleValues']);
            }
            if (data.hasOwnProperty('enumValues')) {
                obj['enumValues'] = EnumValues.constructFromObject(data['enumValues']);
            }
            if (data.hasOwnProperty('htmlValues')) {
                obj['htmlValues'] = HtmlValues.constructFromObject(data['htmlValues']);
            }
            if (data.hasOwnProperty('integerValues')) {
                obj['integerValues'] = IntegerValues.constructFromObject(data['integerValues']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectValues')) {
                obj['objectValues'] = ObjectValues.constructFromObject(data['objectValues']);
            }
            if (data.hasOwnProperty('textValues')) {
                obj['textValues'] = TextValues.constructFromObject(data['textValues']);
            }
            if (data.hasOwnProperty('timestampValues')) {
                obj['timestampValues'] = TimestampValues.constructFromObject(data['timestampValues']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamedProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamedProperty</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dateValues`
        if (data['dateValues']) { // data not null
          DateValues.validateJSON(data['dateValues']);
        }
        // validate the optional field `doubleValues`
        if (data['doubleValues']) { // data not null
          DoubleValues.validateJSON(data['doubleValues']);
        }
        // validate the optional field `enumValues`
        if (data['enumValues']) { // data not null
          EnumValues.validateJSON(data['enumValues']);
        }
        // validate the optional field `htmlValues`
        if (data['htmlValues']) { // data not null
          HtmlValues.validateJSON(data['htmlValues']);
        }
        // validate the optional field `integerValues`
        if (data['integerValues']) { // data not null
          IntegerValues.validateJSON(data['integerValues']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `objectValues`
        if (data['objectValues']) { // data not null
          ObjectValues.validateJSON(data['objectValues']);
        }
        // validate the optional field `textValues`
        if (data['textValues']) { // data not null
          TextValues.validateJSON(data['textValues']);
        }
        // validate the optional field `timestampValues`
        if (data['timestampValues']) { // data not null
          TimestampValues.validateJSON(data['timestampValues']);
        }

        return true;
    }


}



/**
 * @member {Boolean} booleanValue
 */
NamedProperty.prototype['booleanValue'] = undefined;

/**
 * @member {module:model/DateValues} dateValues
 */
NamedProperty.prototype['dateValues'] = undefined;

/**
 * @member {module:model/DoubleValues} doubleValues
 */
NamedProperty.prototype['doubleValues'] = undefined;

/**
 * @member {module:model/EnumValues} enumValues
 */
NamedProperty.prototype['enumValues'] = undefined;

/**
 * @member {module:model/HtmlValues} htmlValues
 */
NamedProperty.prototype['htmlValues'] = undefined;

/**
 * @member {module:model/IntegerValues} integerValues
 */
NamedProperty.prototype['integerValues'] = undefined;

/**
 * The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.
 * @member {String} name
 */
NamedProperty.prototype['name'] = undefined;

/**
 * @member {module:model/ObjectValues} objectValues
 */
NamedProperty.prototype['objectValues'] = undefined;

/**
 * @member {module:model/TextValues} textValues
 */
NamedProperty.prototype['textValues'] = undefined;

/**
 * @member {module:model/TimestampValues} timestampValues
 */
NamedProperty.prototype['timestampValues'] = undefined;






export default NamedProperty;

