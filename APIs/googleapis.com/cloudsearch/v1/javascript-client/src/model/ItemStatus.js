/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProcessingError from './ProcessingError';
import RepositoryError from './RepositoryError';

/**
 * The ItemStatus model module.
 * @module model/ItemStatus
 * @version v1
 */
class ItemStatus {
    /**
     * Constructs a new <code>ItemStatus</code>.
     * This contains item&#39;s status and any errors.
     * @alias module:model/ItemStatus
     */
    constructor() { 
        
        ItemStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemStatus} obj Optional instance to populate.
     * @return {module:model/ItemStatus} The populated <code>ItemStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemStatus();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('processingErrors')) {
                obj['processingErrors'] = ApiClient.convertToType(data['processingErrors'], [ProcessingError]);
            }
            if (data.hasOwnProperty('repositoryErrors')) {
                obj['repositoryErrors'] = ApiClient.convertToType(data['repositoryErrors'], [RepositoryError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['processingErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['processingErrors'])) {
                throw new Error("Expected the field `processingErrors` to be an array in the JSON data but got " + data['processingErrors']);
            }
            // validate the optional field `processingErrors` (array)
            for (const item of data['processingErrors']) {
                ProcessingError.validateJSON(item);
            };
        }
        if (data['repositoryErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['repositoryErrors'])) {
                throw new Error("Expected the field `repositoryErrors` to be an array in the JSON data but got " + data['repositoryErrors']);
            }
            // validate the optional field `repositoryErrors` (array)
            for (const item of data['repositoryErrors']) {
                RepositoryError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Status code.
 * @member {module:model/ItemStatus.CodeEnum} code
 */
ItemStatus.prototype['code'] = undefined;

/**
 * Error details in case the item is in ERROR state.
 * @member {Array.<module:model/ProcessingError>} processingErrors
 */
ItemStatus.prototype['processingErrors'] = undefined;

/**
 * Repository error reported by connector.
 * @member {Array.<module:model/RepositoryError>} repositoryErrors
 */
ItemStatus.prototype['repositoryErrors'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ItemStatus['CodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED",

    /**
     * value: "NEW_ITEM"
     * @const
     */
    "NEW_ITEM": "NEW_ITEM",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED"
};



export default ItemStatus;

