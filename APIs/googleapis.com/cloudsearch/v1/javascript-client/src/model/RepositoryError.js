/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryError model module.
 * @module model/RepositoryError
 * @version v1
 */
class RepositoryError {
    /**
     * Constructs a new <code>RepositoryError</code>.
     * Errors when the connector is communicating to the source repository.
     * @alias module:model/RepositoryError
     */
    constructor() { 
        
        RepositoryError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepositoryError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryError} obj Optional instance to populate.
     * @return {module:model/RepositoryError} The populated <code>RepositoryError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryError();

            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('httpStatusCode')) {
                obj['httpStatusCode'] = ApiClient.convertToType(data['httpStatusCode'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Message that describes the error. The maximum allowable length of the message is 8192 characters.
 * @member {String} errorMessage
 */
RepositoryError.prototype['errorMessage'] = undefined;

/**
 * Error codes. Matches the definition of HTTP status codes.
 * @member {Number} httpStatusCode
 */
RepositoryError.prototype['httpStatusCode'] = undefined;

/**
 * The type of error.
 * @member {module:model/RepositoryError.TypeEnum} type
 */
RepositoryError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryError['TypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "NETWORK_ERROR"
     * @const
     */
    "NETWORK_ERROR": "NETWORK_ERROR",

    /**
     * value: "DNS_ERROR"
     * @const
     */
    "DNS_ERROR": "DNS_ERROR",

    /**
     * value: "CONNECTION_ERROR"
     * @const
     */
    "CONNECTION_ERROR": "CONNECTION_ERROR",

    /**
     * value: "AUTHENTICATION_ERROR"
     * @const
     */
    "AUTHENTICATION_ERROR": "AUTHENTICATION_ERROR",

    /**
     * value: "AUTHORIZATION_ERROR"
     * @const
     */
    "AUTHORIZATION_ERROR": "AUTHORIZATION_ERROR",

    /**
     * value: "SERVER_ERROR"
     * @const
     */
    "SERVER_ERROR": "SERVER_ERROR",

    /**
     * value: "QUOTA_EXCEEDED"
     * @const
     */
    "QUOTA_EXCEEDED": "QUOTA_EXCEEDED",

    /**
     * value: "SERVICE_UNAVAILABLE"
     * @const
     */
    "SERVICE_UNAVAILABLE": "SERVICE_UNAVAILABLE",

    /**
     * value: "CLIENT_ERROR"
     * @const
     */
    "CLIENT_ERROR": "CLIENT_ERROR"
};



export default RepositoryError;

