/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegerFacetingOptions from './IntegerFacetingOptions';

/**
 * The FacetOptions model module.
 * @module model/FacetOptions
 * @version v1
 */
class FacetOptions {
    /**
     * Constructs a new <code>FacetOptions</code>.
     * Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
     * @alias module:model/FacetOptions
     */
    constructor() { 
        
        FacetOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FacetOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacetOptions} obj Optional instance to populate.
     * @return {module:model/FacetOptions} The populated <code>FacetOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacetOptions();

            if (data.hasOwnProperty('integerFacetingOptions')) {
                obj['integerFacetingOptions'] = IntegerFacetingOptions.constructFromObject(data['integerFacetingOptions']);
            }
            if (data.hasOwnProperty('numFacetBuckets')) {
                obj['numFacetBuckets'] = ApiClient.convertToType(data['numFacetBuckets'], 'Number');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = ApiClient.convertToType(data['sourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacetOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacetOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `integerFacetingOptions`
        if (data['integerFacetingOptions']) { // data not null
          IntegerFacetingOptions.validateJSON(data['integerFacetingOptions']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }
        // ensure the json data is a string
        if (data['sourceName'] && !(typeof data['sourceName'] === 'string' || data['sourceName'] instanceof String)) {
            throw new Error("Expected the field `sourceName` to be a primitive type in the JSON string but got " + data['sourceName']);
        }

        return true;
    }


}



/**
 * @member {module:model/IntegerFacetingOptions} integerFacetingOptions
 */
FacetOptions.prototype['integerFacetingOptions'] = undefined;

/**
 * Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
 * @member {Number} numFacetBuckets
 */
FacetOptions.prototype['numFacetBuckets'] = undefined;

/**
 * If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
 * @member {String} objectType
 */
FacetOptions.prototype['objectType'] = undefined;

/**
 * The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
 * @member {String} operatorName
 */
FacetOptions.prototype['operatorName'] = undefined;

/**
 * Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
 * @member {String} sourceName
 */
FacetOptions.prototype['sourceName'] = undefined;






export default FacetOptions;

