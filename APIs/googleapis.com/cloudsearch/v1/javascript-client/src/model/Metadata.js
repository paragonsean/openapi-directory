/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamedProperty from './NamedProperty';
import Person from './Person';
import ResultDisplayMetadata from './ResultDisplayMetadata';
import Source from './Source';

/**
 * The Metadata model module.
 * @module model/Metadata
 * @version v1
 */
class Metadata {
    /**
     * Constructs a new <code>Metadata</code>.
     * Metadata of a matched search result.
     * @alias module:model/Metadata
     */
    constructor() { 
        
        Metadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metadata} obj Optional instance to populate.
     * @return {module:model/Metadata} The populated <code>Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metadata();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayOptions')) {
                obj['displayOptions'] = ResultDisplayMetadata.constructFromObject(data['displayOptions']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [NamedProperty]);
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = Person.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('thumbnailUrl')) {
                obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `displayOptions`
        if (data['displayOptions']) { // data not null
          ResultDisplayMetadata.validateJSON(data['displayOptions']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                NamedProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          Person.validateJSON(data['owner']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['thumbnailUrl'] && !(typeof data['thumbnailUrl'] === 'string' || data['thumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got " + data['thumbnailUrl']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The creation time for this document or object in the search result.
 * @member {String} createTime
 */
Metadata.prototype['createTime'] = undefined;

/**
 * @member {module:model/ResultDisplayMetadata} displayOptions
 */
Metadata.prototype['displayOptions'] = undefined;

/**
 * Indexed fields in structured data, returned as a generic named property.
 * @member {Array.<module:model/NamedProperty>} fields
 */
Metadata.prototype['fields'] = undefined;

/**
 * Mime type of the search result.
 * @member {String} mimeType
 */
Metadata.prototype['mimeType'] = undefined;

/**
 * Object type of the search result.
 * @member {String} objectType
 */
Metadata.prototype['objectType'] = undefined;

/**
 * @member {module:model/Person} owner
 */
Metadata.prototype['owner'] = undefined;

/**
 * @member {module:model/Source} source
 */
Metadata.prototype['source'] = undefined;

/**
 * The thumbnail URL of the result.
 * @member {String} thumbnailUrl
 */
Metadata.prototype['thumbnailUrl'] = undefined;

/**
 * The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.
 * @member {String} updateTime
 */
Metadata.prototype['updateTime'] = undefined;






export default Metadata;

