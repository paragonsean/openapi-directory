/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterOptions from './FilterOptions';
import Source from './Source';

/**
 * The DataSourceRestriction model module.
 * @module model/DataSourceRestriction
 * @version v1
 */
class DataSourceRestriction {
    /**
     * Constructs a new <code>DataSourceRestriction</code>.
     * Restriction on Datasource.
     * @alias module:model/DataSourceRestriction
     */
    constructor() { 
        
        DataSourceRestriction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceRestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceRestriction} obj Optional instance to populate.
     * @return {module:model/DataSourceRestriction} The populated <code>DataSourceRestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceRestriction();

            if (data.hasOwnProperty('filterOptions')) {
                obj['filterOptions'] = ApiClient.convertToType(data['filterOptions'], [FilterOptions]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceRestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceRestriction</code>.
     */
    static validateJSON(data) {
        if (data['filterOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterOptions'])) {
                throw new Error("Expected the field `filterOptions` to be an array in the JSON data but got " + data['filterOptions']);
            }
            // validate the optional field `filterOptions` (array)
            for (const item of data['filterOptions']) {
                FilterOptions.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: \"objecttype\", \"type\" and \"mimetype\". For now, schema specific filters cannot be used to filter suggestions.
 * @member {Array.<module:model/FilterOptions>} filterOptions
 */
DataSourceRestriction.prototype['filterOptions'] = undefined;

/**
 * @member {module:model/Source} source
 */
DataSourceRestriction.prototype['source'] = undefined;






export default DataSourceRestriction;

