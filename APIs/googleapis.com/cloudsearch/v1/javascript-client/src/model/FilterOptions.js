/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filter from './Filter';

/**
 * The FilterOptions model module.
 * @module model/FilterOptions
 * @version v1
 */
class FilterOptions {
    /**
     * Constructs a new <code>FilterOptions</code>.
     * Filter options to be applied on query.
     * @alias module:model/FilterOptions
     */
    constructor() { 
        
        FilterOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterOptions} obj Optional instance to populate.
     * @return {module:model/FilterOptions} The populated <code>FilterOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterOptions();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Filter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Filter.validateJSON(data['filter']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }

        return true;
    }


}



/**
 * @member {module:model/Filter} filter
 */
FilterOptions.prototype['filter'] = undefined;

/**
 * If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters.
 * @member {String} objectType
 */
FilterOptions.prototype['objectType'] = undefined;






export default FilterOptions;

