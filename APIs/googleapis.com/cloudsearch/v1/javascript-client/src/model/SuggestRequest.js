/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceRestriction from './DataSourceRestriction';
import RequestOptions from './RequestOptions';

/**
 * The SuggestRequest model module.
 * @module model/SuggestRequest
 * @version v1
 */
class SuggestRequest {
    /**
     * Constructs a new <code>SuggestRequest</code>.
     * Request of suggest API.
     * @alias module:model/SuggestRequest
     */
    constructor() { 
        
        SuggestRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuggestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuggestRequest} obj Optional instance to populate.
     * @return {module:model/SuggestRequest} The populated <code>SuggestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuggestRequest();

            if (data.hasOwnProperty('dataSourceRestrictions')) {
                obj['dataSourceRestrictions'] = ApiClient.convertToType(data['dataSourceRestrictions'], [DataSourceRestriction]);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('requestOptions')) {
                obj['requestOptions'] = RequestOptions.constructFromObject(data['requestOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuggestRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuggestRequest</code>.
     */
    static validateJSON(data) {
        if (data['dataSourceRestrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSourceRestrictions'])) {
                throw new Error("Expected the field `dataSourceRestrictions` to be an array in the JSON data but got " + data['dataSourceRestrictions']);
            }
            // validate the optional field `dataSourceRestrictions` (array)
            for (const item of data['dataSourceRestrictions']) {
                DataSourceRestriction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // validate the optional field `requestOptions`
        if (data['requestOptions']) { // data not null
          RequestOptions.validateJSON(data['requestOptions']);
        }

        return true;
    }


}



/**
 * The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources: * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE
 * @member {Array.<module:model/DataSourceRestriction>} dataSourceRestrictions
 */
SuggestRequest.prototype['dataSourceRestrictions'] = undefined;

/**
 * Partial query for which autocomplete suggestions will be shown. For example, if the query is \"sea\", then the server might return \"season\", \"search\", \"seagull\" and so on.
 * @member {String} query
 */
SuggestRequest.prototype['query'] = undefined;

/**
 * @member {module:model/RequestOptions} requestOptions
 */
SuggestRequest.prototype['requestOptions'] = undefined;






export default SuggestRequest;

