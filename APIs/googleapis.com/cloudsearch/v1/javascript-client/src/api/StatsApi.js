/**
 * Cloud Search API
 * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCustomerIndexStatsResponse from '../model/GetCustomerIndexStatsResponse';
import GetCustomerQueryStatsResponse from '../model/GetCustomerQueryStatsResponse';
import GetCustomerSearchApplicationStatsResponse from '../model/GetCustomerSearchApplicationStatsResponse';
import GetCustomerSessionStatsResponse from '../model/GetCustomerSessionStatsResponse';
import GetCustomerUserStatsResponse from '../model/GetCustomerUserStatsResponse';
import GetDataSourceIndexStatsResponse from '../model/GetDataSourceIndexStatsResponse';
import GetSearchApplicationQueryStatsResponse from '../model/GetSearchApplicationQueryStatsResponse';
import GetSearchApplicationSessionStatsResponse from '../model/GetSearchApplicationSessionStatsResponse';
import GetSearchApplicationUserStatsResponse from '../model/GetSearchApplicationUserStatsResponse';

/**
* Stats service.
* @module api/StatsApi
* @version v1
*/
export default class StatsApi {

    /**
    * Constructs a new StatsApi. 
    * @alias module:api/StatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloudsearchStatsGetIndex operation.
     * @callback module:api/StatsApi~cloudsearchStatsGetIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomerIndexStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsGetIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomerIndexStatsResponse}
     */
    cloudsearchStatsGetIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomerIndexStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/index', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsGetQuery operation.
     * @callback module:api/StatsApi~cloudsearchStatsGetQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomerQueryStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsGetQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomerQueryStatsResponse}
     */
    cloudsearchStatsGetQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomerQueryStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsGetSearchapplication operation.
     * @callback module:api/StatsApi~cloudsearchStatsGetSearchapplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomerSearchApplicationStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get search application stats for customer. **Note:** This API requires a standard end user account to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [endDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [endDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [endDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [startDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [startDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [startDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsGetSearchapplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomerSearchApplicationStatsResponse}
     */
    cloudsearchStatsGetSearchapplication(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'endDate.day': opts['endDateDay'],
        'endDate.month': opts['endDateMonth'],
        'endDate.year': opts['endDateYear'],
        'startDate.day': opts['startDateDay'],
        'startDate.month': opts['startDateMonth'],
        'startDate.year': opts['startDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomerSearchApplicationStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/searchapplication', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsGetSession operation.
     * @callback module:api/StatsApi~cloudsearchStatsGetSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomerSessionStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsGetSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomerSessionStatsResponse}
     */
    cloudsearchStatsGetSession(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomerSessionStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsGetUser operation.
     * @callback module:api/StatsApi~cloudsearchStatsGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomerUserStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomerUserStatsResponse}
     */
    cloudsearchStatsGetUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomerUserStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsIndexDatasourcesGet operation.
     * @callback module:api/StatsApi~cloudsearchStatsIndexDatasourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSourceIndexStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.
     * @param {String} name The resource id of the data source to retrieve statistics for, in the following format: \"datasources/{source_id}\"
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsIndexDatasourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSourceIndexStatsResponse}
     */
    cloudsearchStatsIndexDatasourcesGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cloudsearchStatsIndexDatasourcesGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataSourceIndexStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/index/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsQuerySearchapplicationsGet operation.
     * @callback module:api/StatsApi~cloudsearchStatsQuerySearchapplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchApplicationQueryStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.
     * @param {String} name The resource id of the search application query stats, in the following format: searchapplications/{application_id}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsQuerySearchapplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchApplicationQueryStatsResponse}
     */
    cloudsearchStatsQuerySearchapplicationsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cloudsearchStatsQuerySearchapplicationsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSearchApplicationQueryStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/query/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsSessionSearchapplicationsGet operation.
     * @callback module:api/StatsApi~cloudsearchStatsSessionSearchapplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchApplicationSessionStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.
     * @param {String} name The resource id of the search application session stats, in the following format: searchapplications/{application_id}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsSessionSearchapplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchApplicationSessionStatsResponse}
     */
    cloudsearchStatsSessionSearchapplicationsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cloudsearchStatsSessionSearchapplicationsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSearchApplicationSessionStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/session/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudsearchStatsUserSearchapplicationsGet operation.
     * @callback module:api/StatsApi~cloudsearchStatsUserSearchapplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchApplicationUserStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.
     * @param {String} name The resource id of the search application session stats, in the following format: searchapplications/{application_id}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [fromDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [fromDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [fromDateYear] Year of date. Must be from 1 to 9999.
     * @param {Number} [toDateDay] Day of month. Must be from 1 to 31 and valid for the year and month.
     * @param {Number} [toDateMonth] Month of date. Must be from 1 to 12.
     * @param {Number} [toDateYear] Year of date. Must be from 1 to 9999.
     * @param {module:api/StatsApi~cloudsearchStatsUserSearchapplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchApplicationUserStatsResponse}
     */
    cloudsearchStatsUserSearchapplicationsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cloudsearchStatsUserSearchapplicationsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fromDate.day': opts['fromDateDay'],
        'fromDate.month': opts['fromDateMonth'],
        'fromDate.year': opts['fromDateYear'],
        'toDate.day': opts['toDateDay'],
        'toDate.month': opts['toDateMonth'],
        'toDate.year': opts['toDateYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSearchApplicationUserStatsResponse;
      return this.apiClient.callApi(
        '/v1/stats/user/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
