# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_document_per_category_list_document_per_category_list_entry import EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry
from openapi_server import util


class EnterpriseTopazSidekickDocumentPerCategoryList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry]=None, help_message: str=None, list_type: str=None, list_type_description: str=None, response_message: str=None):
        """EnterpriseTopazSidekickDocumentPerCategoryList - a model defined in OpenAPI

        :param documents: The documents of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :param help_message: The help_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :param list_type: The list_type of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :param list_type_description: The list_type_description of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :param response_message: The response_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        """
        self.openapi_types = {
            'documents': List[EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry],
            'help_message': str,
            'list_type': str,
            'list_type_description': str,
            'response_message': str
        }

        self.attribute_map = {
            'documents': 'documents',
            'help_message': 'helpMessage',
            'list_type': 'listType',
            'list_type_description': 'listTypeDescription',
            'response_message': 'responseMessage'
        }

        self._documents = documents
        self._help_message = help_message
        self._list_type = list_type
        self._list_type_description = list_type_description
        self._response_message = response_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickDocumentPerCategoryList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickDocumentPerCategoryList of this EnterpriseTopazSidekickDocumentPerCategoryList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this EnterpriseTopazSidekickDocumentPerCategoryList.


        :return: The documents of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :rtype: List[EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this EnterpriseTopazSidekickDocumentPerCategoryList.


        :param documents: The documents of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :type documents: List[EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry]
        """

        self._documents = documents

    @property
    def help_message(self):
        """Gets the help_message of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional.

        :return: The help_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :rtype: str
        """
        return self._help_message

    @help_message.setter
    def help_message(self, help_message):
        """Sets the help_message of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Localized message explaining how the documents were derived (e.g. from the last 30 days activity). This field is optional.

        :param help_message: The help_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :type help_message: str
        """

        self._help_message = help_message

    @property
    def list_type(self):
        """Gets the list_type of this EnterpriseTopazSidekickDocumentPerCategoryList.


        :return: The list_type of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :rtype: str
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this EnterpriseTopazSidekickDocumentPerCategoryList.


        :param list_type: The list_type of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :type list_type: str
        """
        allowed_values = ["UNKNOWN_LIST_TYPE", "MENTIONS", "SHARES", "NEEDS_ATTENTION", "VIEWS", "EDITS"]  # noqa: E501
        if list_type not in allowed_values:
            raise ValueError(
                "Invalid value for `list_type` ({0}), must be one of {1}"
                .format(list_type, allowed_values)
            )

        self._list_type = list_type

    @property
    def list_type_description(self):
        """Gets the list_type_description of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Description of the types of documents present in the list.

        :return: The list_type_description of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :rtype: str
        """
        return self._list_type_description

    @list_type_description.setter
    def list_type_description(self, list_type_description):
        """Sets the list_type_description of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Description of the types of documents present in the list.

        :param list_type_description: The list_type_description of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :type list_type_description: str
        """

        self._list_type_description = list_type_description

    @property
    def response_message(self):
        """Gets the response_message of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Response message in case no documents are present in the card.

        :return: The response_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this EnterpriseTopazSidekickDocumentPerCategoryList.

        Response message in case no documents are present in the card.

        :param response_message: The response_message of this EnterpriseTopazSidekickDocumentPerCategoryList.
        :type response_message: str
        """

        self._response_message = response_message
