# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackgroundColoredText(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, text: str=None):
        """BackgroundColoredText - a model defined in OpenAPI

        :param background_color: The background_color of this BackgroundColoredText.
        :param text: The text of this BackgroundColoredText.
        """
        self.openapi_types = {
            'background_color': str,
            'text': str
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'text': 'text'
        }

        self._background_color = background_color
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackgroundColoredText':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackgroundColoredText of this BackgroundColoredText.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this BackgroundColoredText.

        [Optional] Color of the background. The text color can change depending on the selected background color, and the client does not have control over this. If missing, the background will be WHITE.

        :return: The background_color of this BackgroundColoredText.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this BackgroundColoredText.

        [Optional] Color of the background. The text color can change depending on the selected background color, and the client does not have control over this. If missing, the background will be WHITE.

        :param background_color: The background_color of this BackgroundColoredText.
        :type background_color: str
        """
        allowed_values = ["UNKNOWN_COLOR", "WHITE", "YELLOW", "ORANGE", "GREEN", "BLUE", "GREY"]  # noqa: E501
        if background_color not in allowed_values:
            raise ValueError(
                "Invalid value for `background_color` ({0}), must be one of {1}"
                .format(background_color, allowed_values)
            )

        self._background_color = background_color

    @property
    def text(self):
        """Gets the text of this BackgroundColoredText.

        [Required] The text to display.

        :return: The text of this BackgroundColoredText.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BackgroundColoredText.

        [Required] The text to display.

        :param text: The text of this BackgroundColoredText.
        :type text: str
        """

        self._text = text
