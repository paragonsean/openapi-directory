# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_common_document import EnterpriseTopazSidekickCommonDocument
from openapi_server import util


class EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, document: EnterpriseTopazSidekickCommonDocument=None, rationale: str=None):
        """EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry - a model defined in OpenAPI

        :param category: The category of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :param document: The document of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :param rationale: The rationale of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        """
        self.openapi_types = {
            'category': str,
            'document': EnterpriseTopazSidekickCommonDocument,
            'rationale': str
        }

        self.attribute_map = {
            'category': 'category',
            'document': 'document',
            'rationale': 'rationale'
        }

        self._category = category
        self._document = document
        self._rationale = rationale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.


        :return: The category of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.


        :param category: The category of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :type category: str
        """
        allowed_values = ["UNKNOWN_DOCUMENT", "ACTIONABLE", "VIEWED", "REPLIED", "MENTION_VIEWED", "MENTION_REPLIED", "MENTION_NOT_VIEWED", "SHARED_AND_VIEWED", "SHARED_NOT_VIEWED", "EDITED"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def document(self):
        """Gets the document of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.


        :return: The document of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :rtype: EnterpriseTopazSidekickCommonDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.


        :param document: The document of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :type document: EnterpriseTopazSidekickCommonDocument
        """

        self._document = document

    @property
    def rationale(self):
        """Gets the rationale of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.

        Reason this document was selected.

        :return: The rationale of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :rtype: str
        """
        return self._rationale

    @rationale.setter
    def rationale(self, rationale):
        """Sets the rationale of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.

        Reason this document was selected.

        :param rationale: The rationale of this EnterpriseTopazSidekickDocumentPerCategoryListDocumentPerCategoryListEntry.
        :type rationale: str
        """

        self._rationale = rationale
