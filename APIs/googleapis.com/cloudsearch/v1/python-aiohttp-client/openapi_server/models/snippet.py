# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_range import MatchRange
from openapi_server import util


class Snippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_ranges: List[MatchRange]=None, snippet: str=None):
        """Snippet - a model defined in OpenAPI

        :param match_ranges: The match_ranges of this Snippet.
        :param snippet: The snippet of this Snippet.
        """
        self.openapi_types = {
            'match_ranges': List[MatchRange],
            'snippet': str
        }

        self.attribute_map = {
            'match_ranges': 'matchRanges',
            'snippet': 'snippet'
        }

        self._match_ranges = match_ranges
        self._snippet = snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snippet of this Snippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_ranges(self):
        """Gets the match_ranges of this Snippet.

        The matched ranges in the snippet.

        :return: The match_ranges of this Snippet.
        :rtype: List[MatchRange]
        """
        return self._match_ranges

    @match_ranges.setter
    def match_ranges(self, match_ranges):
        """Sets the match_ranges of this Snippet.

        The matched ranges in the snippet.

        :param match_ranges: The match_ranges of this Snippet.
        :type match_ranges: List[MatchRange]
        """

        self._match_ranges = match_ranges

    @property
    def snippet(self):
        """Gets the snippet of this Snippet.

        The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering.

        :return: The snippet of this Snippet.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Snippet.

        The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering.

        :param snippet: The snippet of this Snippet.
        :type snippet: str
        """

        self._snippet = snippet
