# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrievalImportance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, importance: str=None):
        """RetrievalImportance - a model defined in OpenAPI

        :param importance: The importance of this RetrievalImportance.
        """
        self.openapi_types = {
            'importance': str
        }

        self.attribute_map = {
            'importance': 'importance'
        }

        self._importance = importance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrievalImportance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetrievalImportance of this RetrievalImportance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def importance(self):
        """Gets the importance of this RetrievalImportance.

        Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed.

        :return: The importance of this RetrievalImportance.
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this RetrievalImportance.

        Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed.

        :param importance: The importance of this RetrievalImportance.
        :type importance: str
        """
        allowed_values = ["DEFAULT", "HIGHEST", "HIGH", "LOW", "NONE"]  # noqa: E501
        if importance not in allowed_values:
            raise ValueError(
                "Invalid value for `importance` ({0}), must be one of {1}"
                .format(importance, allowed_values)
            )

        self._importance = importance
