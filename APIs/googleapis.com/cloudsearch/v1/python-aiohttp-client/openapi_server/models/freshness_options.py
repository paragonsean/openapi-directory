# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FreshnessOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, freshness_duration: str=None, freshness_property: str=None):
        """FreshnessOptions - a model defined in OpenAPI

        :param freshness_duration: The freshness_duration of this FreshnessOptions.
        :param freshness_property: The freshness_property of this FreshnessOptions.
        """
        self.openapi_types = {
            'freshness_duration': str,
            'freshness_property': str
        }

        self.attribute_map = {
            'freshness_duration': 'freshnessDuration',
            'freshness_property': 'freshnessProperty'
        }

        self._freshness_duration = freshness_duration
        self._freshness_property = freshness_property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FreshnessOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FreshnessOptions of this FreshnessOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def freshness_duration(self):
        """Gets the freshness_duration of this FreshnessOptions.

        The duration after which an object should be considered stale. The default value is 180 days (in seconds).

        :return: The freshness_duration of this FreshnessOptions.
        :rtype: str
        """
        return self._freshness_duration

    @freshness_duration.setter
    def freshness_duration(self, freshness_duration):
        """Sets the freshness_duration of this FreshnessOptions.

        The duration after which an object should be considered stale. The default value is 180 days (in seconds).

        :param freshness_duration: The freshness_duration of this FreshnessOptions.
        :type freshness_duration: str
        """

        self._freshness_duration = freshness_duration

    @property
    def freshness_property(self):
        """Gets the freshness_property of this FreshnessOptions.

        This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.

        :return: The freshness_property of this FreshnessOptions.
        :rtype: str
        """
        return self._freshness_property

    @freshness_property.setter
    def freshness_property(self, freshness_property):
        """Sets the freshness_property of this FreshnessOptions.

        This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the value defaults to 2 years from the current time.

        :param freshness_property: The freshness_property of this FreshnessOptions.
        :type freshness_property: str
        """

        self._freshness_property = freshness_property
