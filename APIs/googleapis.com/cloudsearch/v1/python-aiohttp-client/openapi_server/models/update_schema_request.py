# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.debug_options import DebugOptions
from openapi_server.models.model_schema import ModelSchema
from openapi_server import util


class UpdateSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_options: DebugOptions=None, _schema: ModelSchema=None, validate_only: bool=None):
        """UpdateSchemaRequest - a model defined in OpenAPI

        :param debug_options: The debug_options of this UpdateSchemaRequest.
        :param _schema: The _schema of this UpdateSchemaRequest.
        :param validate_only: The validate_only of this UpdateSchemaRequest.
        """
        self.openapi_types = {
            'debug_options': DebugOptions,
            '_schema': ModelSchema,
            'validate_only': bool
        }

        self.attribute_map = {
            'debug_options': 'debugOptions',
            '_schema': 'schema',
            'validate_only': 'validateOnly'
        }

        self._debug_options = debug_options
        self.__schema = _schema
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSchemaRequest of this UpdateSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_options(self):
        """Gets the debug_options of this UpdateSchemaRequest.


        :return: The debug_options of this UpdateSchemaRequest.
        :rtype: DebugOptions
        """
        return self._debug_options

    @debug_options.setter
    def debug_options(self, debug_options):
        """Sets the debug_options of this UpdateSchemaRequest.


        :param debug_options: The debug_options of this UpdateSchemaRequest.
        :type debug_options: DebugOptions
        """

        self._debug_options = debug_options

    @property
    def _schema(self):
        """Gets the _schema of this UpdateSchemaRequest.


        :return: The _schema of this UpdateSchemaRequest.
        :rtype: ModelSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this UpdateSchemaRequest.


        :param _schema: The _schema of this UpdateSchemaRequest.
        :type _schema: ModelSchema
        """

        self.__schema = _schema

    @property
    def validate_only(self):
        """Gets the validate_only of this UpdateSchemaRequest.

        If true, the schema will be checked for validity, but will not be registered with the data source, even if valid.

        :return: The validate_only of this UpdateSchemaRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this UpdateSchemaRequest.

        If true, the schema will be checked for validity, but will not be registered with the data source, even if valid.

        :param validate_only: The validate_only of this UpdateSchemaRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
