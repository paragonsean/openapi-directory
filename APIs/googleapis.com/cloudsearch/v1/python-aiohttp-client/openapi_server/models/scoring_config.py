# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoringConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_freshness: bool=None, disable_personalization: bool=None):
        """ScoringConfig - a model defined in OpenAPI

        :param disable_freshness: The disable_freshness of this ScoringConfig.
        :param disable_personalization: The disable_personalization of this ScoringConfig.
        """
        self.openapi_types = {
            'disable_freshness': bool,
            'disable_personalization': bool
        }

        self.attribute_map = {
            'disable_freshness': 'disableFreshness',
            'disable_personalization': 'disablePersonalization'
        }

        self._disable_freshness = disable_freshness
        self._disable_personalization = disable_personalization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoringConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoringConfig of this ScoringConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_freshness(self):
        """Gets the disable_freshness of this ScoringConfig.

        Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.

        :return: The disable_freshness of this ScoringConfig.
        :rtype: bool
        """
        return self._disable_freshness

    @disable_freshness.setter
    def disable_freshness(self, disable_freshness):
        """Sets the disable_freshness of this ScoringConfig.

        Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.

        :param disable_freshness: The disable_freshness of this ScoringConfig.
        :type disable_freshness: bool
        """

        self._disable_freshness = disable_freshness

    @property
    def disable_personalization(self):
        """Gets the disable_personalization of this ScoringConfig.

        Whether to personalize the results. By default, personal signals will be used to boost results.

        :return: The disable_personalization of this ScoringConfig.
        :rtype: bool
        """
        return self._disable_personalization

    @disable_personalization.setter
    def disable_personalization(self, disable_personalization):
        """Sets the disable_personalization of this ScoringConfig.

        Whether to personalize the results. By default, personal signals will be used to boost results.

        :param disable_personalization: The disable_personalization of this ScoringConfig.
        :type disable_personalization: bool
        """

        self._disable_personalization = disable_personalization
