# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.named_property import NamedProperty
from openapi_server.models.person import Person
from openapi_server.models.result_display_metadata import ResultDisplayMetadata
from openapi_server.models.source import Source
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_options: ResultDisplayMetadata=None, fields: List[NamedProperty]=None, mime_type: str=None, object_type: str=None, owner: Person=None, source: Source=None, thumbnail_url: str=None, update_time: str=None):
        """Metadata - a model defined in OpenAPI

        :param create_time: The create_time of this Metadata.
        :param display_options: The display_options of this Metadata.
        :param fields: The fields of this Metadata.
        :param mime_type: The mime_type of this Metadata.
        :param object_type: The object_type of this Metadata.
        :param owner: The owner of this Metadata.
        :param source: The source of this Metadata.
        :param thumbnail_url: The thumbnail_url of this Metadata.
        :param update_time: The update_time of this Metadata.
        """
        self.openapi_types = {
            'create_time': str,
            'display_options': ResultDisplayMetadata,
            'fields': List[NamedProperty],
            'mime_type': str,
            'object_type': str,
            'owner': Person,
            'source': Source,
            'thumbnail_url': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_options': 'displayOptions',
            'fields': 'fields',
            'mime_type': 'mimeType',
            'object_type': 'objectType',
            'owner': 'owner',
            'source': 'source',
            'thumbnail_url': 'thumbnailUrl',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._display_options = display_options
        self._fields = fields
        self._mime_type = mime_type
        self._object_type = object_type
        self._owner = owner
        self._source = source
        self._thumbnail_url = thumbnail_url
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Metadata.

        The creation time for this document or object in the search result.

        :return: The create_time of this Metadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Metadata.

        The creation time for this document or object in the search result.

        :param create_time: The create_time of this Metadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_options(self):
        """Gets the display_options of this Metadata.


        :return: The display_options of this Metadata.
        :rtype: ResultDisplayMetadata
        """
        return self._display_options

    @display_options.setter
    def display_options(self, display_options):
        """Sets the display_options of this Metadata.


        :param display_options: The display_options of this Metadata.
        :type display_options: ResultDisplayMetadata
        """

        self._display_options = display_options

    @property
    def fields(self):
        """Gets the fields of this Metadata.

        Indexed fields in structured data, returned as a generic named property.

        :return: The fields of this Metadata.
        :rtype: List[NamedProperty]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Metadata.

        Indexed fields in structured data, returned as a generic named property.

        :param fields: The fields of this Metadata.
        :type fields: List[NamedProperty]
        """

        self._fields = fields

    @property
    def mime_type(self):
        """Gets the mime_type of this Metadata.

        Mime type of the search result.

        :return: The mime_type of this Metadata.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Metadata.

        Mime type of the search result.

        :param mime_type: The mime_type of this Metadata.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def object_type(self):
        """Gets the object_type of this Metadata.

        Object type of the search result.

        :return: The object_type of this Metadata.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Metadata.

        Object type of the search result.

        :param object_type: The object_type of this Metadata.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def owner(self):
        """Gets the owner of this Metadata.


        :return: The owner of this Metadata.
        :rtype: Person
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Metadata.


        :param owner: The owner of this Metadata.
        :type owner: Person
        """

        self._owner = owner

    @property
    def source(self):
        """Gets the source of this Metadata.


        :return: The source of this Metadata.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Metadata.


        :param source: The source of this Metadata.
        :type source: Source
        """

        self._source = source

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Metadata.

        The thumbnail URL of the result.

        :return: The thumbnail_url of this Metadata.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Metadata.

        The thumbnail URL of the result.

        :param thumbnail_url: The thumbnail_url of this Metadata.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def update_time(self):
        """Gets the update_time of this Metadata.

        The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.

        :return: The update_time of this Metadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Metadata.

        The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not set, this value defaults to 2 years from the current time.

        :param update_time: The update_time of this Metadata.
        :type update_time: str
        """

        self._update_time = update_time
