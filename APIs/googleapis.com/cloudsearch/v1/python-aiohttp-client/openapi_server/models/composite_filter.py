# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server import util


class CompositeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logic_operator: str=None, sub_filters: List[Filter]=None):
        """CompositeFilter - a model defined in OpenAPI

        :param logic_operator: The logic_operator of this CompositeFilter.
        :param sub_filters: The sub_filters of this CompositeFilter.
        """
        self.openapi_types = {
            'logic_operator': str,
            'sub_filters': List[Filter]
        }

        self.attribute_map = {
            'logic_operator': 'logicOperator',
            'sub_filters': 'subFilters'
        }

        self._logic_operator = logic_operator
        self._sub_filters = sub_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompositeFilter of this CompositeFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logic_operator(self):
        """Gets the logic_operator of this CompositeFilter.

        The logic operator of the sub filter.

        :return: The logic_operator of this CompositeFilter.
        :rtype: str
        """
        return self._logic_operator

    @logic_operator.setter
    def logic_operator(self, logic_operator):
        """Sets the logic_operator of this CompositeFilter.

        The logic operator of the sub filter.

        :param logic_operator: The logic_operator of this CompositeFilter.
        :type logic_operator: str
        """
        allowed_values = ["AND", "OR", "NOT"]  # noqa: E501
        if logic_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logic_operator` ({0}), must be one of {1}"
                .format(logic_operator, allowed_values)
            )

        self._logic_operator = logic_operator

    @property
    def sub_filters(self):
        """Gets the sub_filters of this CompositeFilter.

        Sub filters.

        :return: The sub_filters of this CompositeFilter.
        :rtype: List[Filter]
        """
        return self._sub_filters

    @sub_filters.setter
    def sub_filters(self, sub_filters):
        """Sets the sub_filters of this CompositeFilter.

        Sub filters.

        :param sub_filters: The sub_filters of this CompositeFilter.
        :type sub_filters: List[Filter]
        """

        self._sub_filters = sub_filters
