# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SortOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator_name: str=None, sort_order: str=None):
        """SortOptions - a model defined in OpenAPI

        :param operator_name: The operator_name of this SortOptions.
        :param sort_order: The sort_order of this SortOptions.
        """
        self.openapi_types = {
            'operator_name': str,
            'sort_order': str
        }

        self.attribute_map = {
            'operator_name': 'operatorName',
            'sort_order': 'sortOrder'
        }

        self._operator_name = operator_name
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SortOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SortOptions of this SortOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator_name(self):
        """Gets the operator_name of this SortOptions.

        The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.

        :return: The operator_name of this SortOptions.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this SortOptions.

        The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.

        :param operator_name: The operator_name of this SortOptions.
        :type operator_name: str
        """

        self._operator_name = operator_name

    @property
    def sort_order(self):
        """Gets the sort_order of this SortOptions.

        Ascending is the default sort order

        :return: The sort_order of this SortOptions.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SortOptions.

        Ascending is the default sort order

        :param sort_order: The sort_order of this SortOptions.
        :type sort_order: str
        """
        allowed_values = ["ASCENDING", "DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
