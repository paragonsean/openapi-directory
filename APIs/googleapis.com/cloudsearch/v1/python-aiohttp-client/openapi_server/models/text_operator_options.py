# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextOperatorOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact_match_with_operator: bool=None, operator_name: str=None):
        """TextOperatorOptions - a model defined in OpenAPI

        :param exact_match_with_operator: The exact_match_with_operator of this TextOperatorOptions.
        :param operator_name: The operator_name of this TextOperatorOptions.
        """
        self.openapi_types = {
            'exact_match_with_operator': bool,
            'operator_name': str
        }

        self.attribute_map = {
            'exact_match_with_operator': 'exactMatchWithOperator',
            'operator_name': 'operatorName'
        }

        self._exact_match_with_operator = exact_match_with_operator
        self._operator_name = operator_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextOperatorOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextOperatorOptions of this TextOperatorOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact_match_with_operator(self):
        """Gets the exact_match_with_operator of this TextOperatorOptions.

        If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is \"genre\" and the value is \"science-fiction\" the query restrictions \"genre:science\" and \"genre:fiction\" doesn't match the item; \"genre:science-fiction\" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is \"science-fiction\" the queries \"genre:science\" and \"genre:fiction\" matches the item.

        :return: The exact_match_with_operator of this TextOperatorOptions.
        :rtype: bool
        """
        return self._exact_match_with_operator

    @exact_match_with_operator.setter
    def exact_match_with_operator(self, exact_match_with_operator):
        """Sets the exact_match_with_operator of this TextOperatorOptions.

        If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is \"genre\" and the value is \"science-fiction\" the query restrictions \"genre:science\" and \"genre:fiction\" doesn't match the item; \"genre:science-fiction\" does. Text value matching is case-sensitive and does not remove special characters. If false, the text is tokenized. For example, if the value is \"science-fiction\" the queries \"genre:science\" and \"genre:fiction\" matches the item.

        :param exact_match_with_operator: The exact_match_with_operator of this TextOperatorOptions.
        :type exact_match_with_operator: bool
        """

        self._exact_match_with_operator = exact_match_with_operator

    @property
    def operator_name(self):
        """Gets the operator_name of this TextOperatorOptions.

        Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.

        :return: The operator_name of this TextOperatorOptions.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this TextOperatorOptions.

        Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.

        :param operator_name: The operator_name of this TextOperatorOptions.
        :type operator_name: str
        """

        self._operator_name = operator_name
