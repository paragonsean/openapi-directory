# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_attribute import ContextAttribute
from openapi_server.models.data_source_restriction import DataSourceRestriction
from openapi_server.models.facet_options import FacetOptions
from openapi_server.models.query_interpretation_options import QueryInterpretationOptions
from openapi_server.models.request_options import RequestOptions
from openapi_server.models.sort_options import SortOptions
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_attributes: List[ContextAttribute]=None, data_source_restrictions: List[DataSourceRestriction]=None, facet_options: List[FacetOptions]=None, page_size: int=None, query: str=None, query_interpretation_options: QueryInterpretationOptions=None, request_options: RequestOptions=None, sort_options: SortOptions=None, start: int=None):
        """SearchRequest - a model defined in OpenAPI

        :param context_attributes: The context_attributes of this SearchRequest.
        :param data_source_restrictions: The data_source_restrictions of this SearchRequest.
        :param facet_options: The facet_options of this SearchRequest.
        :param page_size: The page_size of this SearchRequest.
        :param query: The query of this SearchRequest.
        :param query_interpretation_options: The query_interpretation_options of this SearchRequest.
        :param request_options: The request_options of this SearchRequest.
        :param sort_options: The sort_options of this SearchRequest.
        :param start: The start of this SearchRequest.
        """
        self.openapi_types = {
            'context_attributes': List[ContextAttribute],
            'data_source_restrictions': List[DataSourceRestriction],
            'facet_options': List[FacetOptions],
            'page_size': int,
            'query': str,
            'query_interpretation_options': QueryInterpretationOptions,
            'request_options': RequestOptions,
            'sort_options': SortOptions,
            'start': int
        }

        self.attribute_map = {
            'context_attributes': 'contextAttributes',
            'data_source_restrictions': 'dataSourceRestrictions',
            'facet_options': 'facetOptions',
            'page_size': 'pageSize',
            'query': 'query',
            'query_interpretation_options': 'queryInterpretationOptions',
            'request_options': 'requestOptions',
            'sort_options': 'sortOptions',
            'start': 'start'
        }

        self._context_attributes = context_attributes
        self._data_source_restrictions = data_source_restrictions
        self._facet_options = facet_options
        self._page_size = page_size
        self._query = query
        self._query_interpretation_options = query_interpretation_options
        self._request_options = request_options
        self._sort_options = sort_options
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_attributes(self):
        """Gets the context_attributes of this SearchRequest.

        Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.

        :return: The context_attributes of this SearchRequest.
        :rtype: List[ContextAttribute]
        """
        return self._context_attributes

    @context_attributes.setter
    def context_attributes(self, context_attributes):
        """Sets the context_attributes of this SearchRequest.

        Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.

        :param context_attributes: The context_attributes of this SearchRequest.
        :type context_attributes: List[ContextAttribute]
        """

        self._context_attributes = context_attributes

    @property
    def data_source_restrictions(self):
        """Gets the data_source_restrictions of this SearchRequest.

        The sources to use for querying. If not specified, all data sources from the current search application are used.

        :return: The data_source_restrictions of this SearchRequest.
        :rtype: List[DataSourceRestriction]
        """
        return self._data_source_restrictions

    @data_source_restrictions.setter
    def data_source_restrictions(self, data_source_restrictions):
        """Sets the data_source_restrictions of this SearchRequest.

        The sources to use for querying. If not specified, all data sources from the current search application are used.

        :param data_source_restrictions: The data_source_restrictions of this SearchRequest.
        :type data_source_restrictions: List[DataSourceRestriction]
        """

        self._data_source_restrictions = data_source_restrictions

    @property
    def facet_options(self):
        """Gets the facet_options of this SearchRequest.


        :return: The facet_options of this SearchRequest.
        :rtype: List[FacetOptions]
        """
        return self._facet_options

    @facet_options.setter
    def facet_options(self, facet_options):
        """Sets the facet_options of this SearchRequest.


        :param facet_options: The facet_options of this SearchRequest.
        :type facet_options: List[FacetOptions]
        """

        self._facet_options = facet_options

    @property
    def page_size(self):
        """Gets the page_size of this SearchRequest.

        Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.

        :return: The page_size of this SearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchRequest.

        Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.

        :param page_size: The page_size of this SearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def query(self):
        """Gets the query of this SearchRequest.

        The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)

        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.

        The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)

        :param query: The query of this SearchRequest.
        :type query: str
        """

        self._query = query

    @property
    def query_interpretation_options(self):
        """Gets the query_interpretation_options of this SearchRequest.


        :return: The query_interpretation_options of this SearchRequest.
        :rtype: QueryInterpretationOptions
        """
        return self._query_interpretation_options

    @query_interpretation_options.setter
    def query_interpretation_options(self, query_interpretation_options):
        """Sets the query_interpretation_options of this SearchRequest.


        :param query_interpretation_options: The query_interpretation_options of this SearchRequest.
        :type query_interpretation_options: QueryInterpretationOptions
        """

        self._query_interpretation_options = query_interpretation_options

    @property
    def request_options(self):
        """Gets the request_options of this SearchRequest.


        :return: The request_options of this SearchRequest.
        :rtype: RequestOptions
        """
        return self._request_options

    @request_options.setter
    def request_options(self, request_options):
        """Sets the request_options of this SearchRequest.


        :param request_options: The request_options of this SearchRequest.
        :type request_options: RequestOptions
        """

        self._request_options = request_options

    @property
    def sort_options(self):
        """Gets the sort_options of this SearchRequest.


        :return: The sort_options of this SearchRequest.
        :rtype: SortOptions
        """
        return self._sort_options

    @sort_options.setter
    def sort_options(self, sort_options):
        """Sets the sort_options of this SearchRequest.


        :param sort_options: The sort_options of this SearchRequest.
        :type sort_options: SortOptions
        """

        self._sort_options = sort_options

    @property
    def start(self):
        """Gets the start of this SearchRequest.

        Starting index of the results.

        :return: The start of this SearchRequest.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchRequest.

        Starting index of the results.

        :param start: The start of this SearchRequest.
        :type start: int
        """

        self._start = start
