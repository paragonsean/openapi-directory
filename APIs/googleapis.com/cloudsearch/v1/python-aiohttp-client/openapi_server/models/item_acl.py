# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal import Principal
from openapi_server import util


class ItemAcl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl_inheritance_type: str=None, denied_readers: List[Principal]=None, inherit_acl_from: str=None, owners: List[Principal]=None, readers: List[Principal]=None):
        """ItemAcl - a model defined in OpenAPI

        :param acl_inheritance_type: The acl_inheritance_type of this ItemAcl.
        :param denied_readers: The denied_readers of this ItemAcl.
        :param inherit_acl_from: The inherit_acl_from of this ItemAcl.
        :param owners: The owners of this ItemAcl.
        :param readers: The readers of this ItemAcl.
        """
        self.openapi_types = {
            'acl_inheritance_type': str,
            'denied_readers': List[Principal],
            'inherit_acl_from': str,
            'owners': List[Principal],
            'readers': List[Principal]
        }

        self.attribute_map = {
            'acl_inheritance_type': 'aclInheritanceType',
            'denied_readers': 'deniedReaders',
            'inherit_acl_from': 'inheritAclFrom',
            'owners': 'owners',
            'readers': 'readers'
        }

        self._acl_inheritance_type = acl_inheritance_type
        self._denied_readers = denied_readers
        self._inherit_acl_from = inherit_acl_from
        self._owners = owners
        self._readers = readers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemAcl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemAcl of this ItemAcl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl_inheritance_type(self):
        """Gets the acl_inheritance_type of this ItemAcl.

        Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.

        :return: The acl_inheritance_type of this ItemAcl.
        :rtype: str
        """
        return self._acl_inheritance_type

    @acl_inheritance_type.setter
    def acl_inheritance_type(self, acl_inheritance_type):
        """Sets the acl_inheritance_type of this ItemAcl.

        Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.

        :param acl_inheritance_type: The acl_inheritance_type of this ItemAcl.
        :type acl_inheritance_type: str
        """
        allowed_values = ["NOT_APPLICABLE", "CHILD_OVERRIDE", "PARENT_OVERRIDE", "BOTH_PERMIT"]  # noqa: E501
        if acl_inheritance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `acl_inheritance_type` ({0}), must be one of {1}"
                .format(acl_inheritance_type, allowed_values)
            )

        self._acl_inheritance_type = acl_inheritance_type

    @property
    def denied_readers(self):
        """Gets the denied_readers of this ItemAcl.

        List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.

        :return: The denied_readers of this ItemAcl.
        :rtype: List[Principal]
        """
        return self._denied_readers

    @denied_readers.setter
    def denied_readers(self, denied_readers):
        """Sets the denied_readers of this ItemAcl.

        List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.

        :param denied_readers: The denied_readers of this ItemAcl.
        :type denied_readers: List[Principal]
        """

        self._denied_readers = denied_readers

    @property
    def inherit_acl_from(self):
        """Gets the inherit_acl_from of this ItemAcl.

        The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.

        :return: The inherit_acl_from of this ItemAcl.
        :rtype: str
        """
        return self._inherit_acl_from

    @inherit_acl_from.setter
    def inherit_acl_from(self, inherit_acl_from):
        """Sets the inherit_acl_from of this ItemAcl.

        The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.

        :param inherit_acl_from: The inherit_acl_from of this ItemAcl.
        :type inherit_acl_from: str
        """

        self._inherit_acl_from = inherit_acl_from

    @property
    def owners(self):
        """Gets the owners of this ItemAcl.

        Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.

        :return: The owners of this ItemAcl.
        :rtype: List[Principal]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ItemAcl.

        Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.

        :param owners: The owners of this ItemAcl.
        :type owners: List[Principal]
        """

        self._owners = owners

    @property
    def readers(self):
        """Gets the readers of this ItemAcl.

        List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.

        :return: The readers of this ItemAcl.
        :rtype: List[Principal]
        """
        return self._readers

    @readers.setter
    def readers(self, readers):
        """Sets the readers of this ItemAcl.

        List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.

        :param readers: The readers of this ItemAcl.
        :type readers: List[Principal]
        """

        self._readers = readers
