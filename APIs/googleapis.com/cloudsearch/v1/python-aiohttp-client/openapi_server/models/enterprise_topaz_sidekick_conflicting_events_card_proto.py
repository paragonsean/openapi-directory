# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_agenda_entry import EnterpriseTopazSidekickAgendaEntry
from openapi_server import util


class EnterpriseTopazSidekickConflictingEventsCardProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflicting_event: List[EnterpriseTopazSidekickAgendaEntry]=None, main_event: EnterpriseTopazSidekickAgendaEntry=None):
        """EnterpriseTopazSidekickConflictingEventsCardProto - a model defined in OpenAPI

        :param conflicting_event: The conflicting_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        :param main_event: The main_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        """
        self.openapi_types = {
            'conflicting_event': List[EnterpriseTopazSidekickAgendaEntry],
            'main_event': EnterpriseTopazSidekickAgendaEntry
        }

        self.attribute_map = {
            'conflicting_event': 'conflictingEvent',
            'main_event': 'mainEvent'
        }

        self._conflicting_event = conflicting_event
        self._main_event = main_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickConflictingEventsCardProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickConflictingEventsCardProto of this EnterpriseTopazSidekickConflictingEventsCardProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflicting_event(self):
        """Gets the conflicting_event of this EnterpriseTopazSidekickConflictingEventsCardProto.

        All the events that conflict with main_event.

        :return: The conflicting_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        :rtype: List[EnterpriseTopazSidekickAgendaEntry]
        """
        return self._conflicting_event

    @conflicting_event.setter
    def conflicting_event(self, conflicting_event):
        """Sets the conflicting_event of this EnterpriseTopazSidekickConflictingEventsCardProto.

        All the events that conflict with main_event.

        :param conflicting_event: The conflicting_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        :type conflicting_event: List[EnterpriseTopazSidekickAgendaEntry]
        """

        self._conflicting_event = conflicting_event

    @property
    def main_event(self):
        """Gets the main_event of this EnterpriseTopazSidekickConflictingEventsCardProto.


        :return: The main_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        :rtype: EnterpriseTopazSidekickAgendaEntry
        """
        return self._main_event

    @main_event.setter
    def main_event(self, main_event):
        """Sets the main_event of this EnterpriseTopazSidekickConflictingEventsCardProto.


        :param main_event: The main_event of this EnterpriseTopazSidekickConflictingEventsCardProto.
        :type main_event: EnterpriseTopazSidekickAgendaEntry
        """

        self._main_event = main_event
