# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_answer_answer_list_labeled_answer import EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer
from openapi_server import util


class EnterpriseTopazSidekickAnswerAnswerList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeled_answer: List[EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer]=None, type: str=None):
        """EnterpriseTopazSidekickAnswerAnswerList - a model defined in OpenAPI

        :param labeled_answer: The labeled_answer of this EnterpriseTopazSidekickAnswerAnswerList.
        :param type: The type of this EnterpriseTopazSidekickAnswerAnswerList.
        """
        self.openapi_types = {
            'labeled_answer': List[EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer],
            'type': str
        }

        self.attribute_map = {
            'labeled_answer': 'labeledAnswer',
            'type': 'type'
        }

        self._labeled_answer = labeled_answer
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickAnswerAnswerList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickAnswerAnswerList of this EnterpriseTopazSidekickAnswerAnswerList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeled_answer(self):
        """Gets the labeled_answer of this EnterpriseTopazSidekickAnswerAnswerList.

        Answers that have a corresponding label.

        :return: The labeled_answer of this EnterpriseTopazSidekickAnswerAnswerList.
        :rtype: List[EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer]
        """
        return self._labeled_answer

    @labeled_answer.setter
    def labeled_answer(self, labeled_answer):
        """Sets the labeled_answer of this EnterpriseTopazSidekickAnswerAnswerList.

        Answers that have a corresponding label.

        :param labeled_answer: The labeled_answer of this EnterpriseTopazSidekickAnswerAnswerList.
        :type labeled_answer: List[EnterpriseTopazSidekickAnswerAnswerListLabeledAnswer]
        """

        self._labeled_answer = labeled_answer

    @property
    def type(self):
        """Gets the type of this EnterpriseTopazSidekickAnswerAnswerList.

        Answer type.

        :return: The type of this EnterpriseTopazSidekickAnswerAnswerList.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnterpriseTopazSidekickAnswerAnswerList.

        Answer type.

        :param type: The type of this EnterpriseTopazSidekickAnswerAnswerList.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "PERSON_ADDRESS", "PERSON_BIRTHDAY", "PERSON_DEPARTMENT", "PERSON_DESK_LOCATION", "PERSON_EMAIL", "PERSON_JOB_TITLE", "PERSON_PHONE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
