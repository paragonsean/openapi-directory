# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseTopazSidekickRankingParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_ms: str=None, priority: str=None, score: float=None, span_ms: str=None, start_time_ms: str=None, type: str=None):
        """EnterpriseTopazSidekickRankingParams - a model defined in OpenAPI

        :param end_time_ms: The end_time_ms of this EnterpriseTopazSidekickRankingParams.
        :param priority: The priority of this EnterpriseTopazSidekickRankingParams.
        :param score: The score of this EnterpriseTopazSidekickRankingParams.
        :param span_ms: The span_ms of this EnterpriseTopazSidekickRankingParams.
        :param start_time_ms: The start_time_ms of this EnterpriseTopazSidekickRankingParams.
        :param type: The type of this EnterpriseTopazSidekickRankingParams.
        """
        self.openapi_types = {
            'end_time_ms': str,
            'priority': str,
            'score': float,
            'span_ms': str,
            'start_time_ms': str,
            'type': str
        }

        self.attribute_map = {
            'end_time_ms': 'endTimeMs',
            'priority': 'priority',
            'score': 'score',
            'span_ms': 'spanMs',
            'start_time_ms': 'startTimeMs',
            'type': 'type'
        }

        self._end_time_ms = end_time_ms
        self._priority = priority
        self._score = score
        self._span_ms = span_ms
        self._start_time_ms = start_time_ms
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickRankingParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickRankingParams of this EnterpriseTopazSidekickRankingParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_ms(self):
        """Gets the end_time_ms of this EnterpriseTopazSidekickRankingParams.

        The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.

        :return: The end_time_ms of this EnterpriseTopazSidekickRankingParams.
        :rtype: str
        """
        return self._end_time_ms

    @end_time_ms.setter
    def end_time_ms(self, end_time_ms):
        """Sets the end_time_ms of this EnterpriseTopazSidekickRankingParams.

        The end-time that this object will expect to occur. If the type is marked as FIXED, then this end-time will persist after bidding. If the type is marked as FLEXIBLE, this field is NOT expected to be filled and will be filled in after it has won a bid. Expected to be set when type is set to FIXED.

        :param end_time_ms: The end_time_ms of this EnterpriseTopazSidekickRankingParams.
        :type end_time_ms: str
        """

        self._end_time_ms = end_time_ms

    @property
    def priority(self):
        """Gets the priority of this EnterpriseTopazSidekickRankingParams.

        The priority to determine between objects that have the same start_time_ms The lower-value of priority == ranked higher. Max-priority = 0. Expected to be set for all types.

        :return: The priority of this EnterpriseTopazSidekickRankingParams.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this EnterpriseTopazSidekickRankingParams.

        The priority to determine between objects that have the same start_time_ms The lower-value of priority == ranked higher. Max-priority = 0. Expected to be set for all types.

        :param priority: The priority of this EnterpriseTopazSidekickRankingParams.
        :type priority: str
        """
        allowed_values = ["UNKNOWN", "CRITICAL", "IMPORTANT", "HIGH", "NORMAL", "BEST_EFFORT"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def score(self):
        """Gets the score of this EnterpriseTopazSidekickRankingParams.

        The score of the card to be used to break priority-ties

        :return: The score of this EnterpriseTopazSidekickRankingParams.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this EnterpriseTopazSidekickRankingParams.

        The score of the card to be used to break priority-ties

        :param score: The score of this EnterpriseTopazSidekickRankingParams.
        :type score: float
        """

        self._score = score

    @property
    def span_ms(self):
        """Gets the span_ms of this EnterpriseTopazSidekickRankingParams.

        The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE.

        :return: The span_ms of this EnterpriseTopazSidekickRankingParams.
        :rtype: str
        """
        return self._span_ms

    @span_ms.setter
    def span_ms(self, span_ms):
        """Sets the span_ms of this EnterpriseTopazSidekickRankingParams.

        The span that this card will take in the stream Expected to be set when type is set to FLEXIBLE.

        :param span_ms: The span_ms of this EnterpriseTopazSidekickRankingParams.
        :type span_ms: str
        """

        self._span_ms = span_ms

    @property
    def start_time_ms(self):
        """Gets the start_time_ms of this EnterpriseTopazSidekickRankingParams.

        The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types.

        :return: The start_time_ms of this EnterpriseTopazSidekickRankingParams.
        :rtype: str
        """
        return self._start_time_ms

    @start_time_ms.setter
    def start_time_ms(self, start_time_ms):
        """Sets the start_time_ms of this EnterpriseTopazSidekickRankingParams.

        The start-time that this object will bid-for If the type is marked as FIXED, then this start-time will persist after bidding. If the type is marked as FLEXIBLE, then it will occur at the given time or sometime after the requested time. Expected to be set for all types.

        :param start_time_ms: The start_time_ms of this EnterpriseTopazSidekickRankingParams.
        :type start_time_ms: str
        """

        self._start_time_ms = start_time_ms

    @property
    def type(self):
        """Gets the type of this EnterpriseTopazSidekickRankingParams.

        The packing type of this object.

        :return: The type of this EnterpriseTopazSidekickRankingParams.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnterpriseTopazSidekickRankingParams.

        The packing type of this object.

        :param type: The type of this EnterpriseTopazSidekickRankingParams.
        :type type: str
        """
        allowed_values = ["FIXED", "FLEXIBLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
