# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.debug_options import DebugOptions
from openapi_server.models.index_item_options import IndexItemOptions
from openapi_server.models.item import Item
from openapi_server import util


class IndexItemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_name: str=None, debug_options: DebugOptions=None, index_item_options: IndexItemOptions=None, item: Item=None, mode: str=None):
        """IndexItemRequest - a model defined in OpenAPI

        :param connector_name: The connector_name of this IndexItemRequest.
        :param debug_options: The debug_options of this IndexItemRequest.
        :param index_item_options: The index_item_options of this IndexItemRequest.
        :param item: The item of this IndexItemRequest.
        :param mode: The mode of this IndexItemRequest.
        """
        self.openapi_types = {
            'connector_name': str,
            'debug_options': DebugOptions,
            'index_item_options': IndexItemOptions,
            'item': Item,
            'mode': str
        }

        self.attribute_map = {
            'connector_name': 'connectorName',
            'debug_options': 'debugOptions',
            'index_item_options': 'indexItemOptions',
            'item': 'item',
            'mode': 'mode'
        }

        self._connector_name = connector_name
        self._debug_options = debug_options
        self._index_item_options = index_item_options
        self._item = item
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexItemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexItemRequest of this IndexItemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_name(self):
        """Gets the connector_name of this IndexItemRequest.

        The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}

        :return: The connector_name of this IndexItemRequest.
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this IndexItemRequest.

        The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}

        :param connector_name: The connector_name of this IndexItemRequest.
        :type connector_name: str
        """

        self._connector_name = connector_name

    @property
    def debug_options(self):
        """Gets the debug_options of this IndexItemRequest.


        :return: The debug_options of this IndexItemRequest.
        :rtype: DebugOptions
        """
        return self._debug_options

    @debug_options.setter
    def debug_options(self, debug_options):
        """Sets the debug_options of this IndexItemRequest.


        :param debug_options: The debug_options of this IndexItemRequest.
        :type debug_options: DebugOptions
        """

        self._debug_options = debug_options

    @property
    def index_item_options(self):
        """Gets the index_item_options of this IndexItemRequest.


        :return: The index_item_options of this IndexItemRequest.
        :rtype: IndexItemOptions
        """
        return self._index_item_options

    @index_item_options.setter
    def index_item_options(self, index_item_options):
        """Sets the index_item_options of this IndexItemRequest.


        :param index_item_options: The index_item_options of this IndexItemRequest.
        :type index_item_options: IndexItemOptions
        """

        self._index_item_options = index_item_options

    @property
    def item(self):
        """Gets the item of this IndexItemRequest.


        :return: The item of this IndexItemRequest.
        :rtype: Item
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this IndexItemRequest.


        :param item: The item of this IndexItemRequest.
        :type item: Item
        """

        self._item = item

    @property
    def mode(self):
        """Gets the mode of this IndexItemRequest.

        Required. The RequestMode for this request.

        :return: The mode of this IndexItemRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this IndexItemRequest.

        Required. The RequestMode for this request.

        :param mode: The mode of this IndexItemRequest.
        :type mode: str
        """
        allowed_values = ["UNSPECIFIED", "SYNCHRONOUS", "ASYNCHRONOUS"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
