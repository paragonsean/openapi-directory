# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.g_suite_principal import GSuitePrincipal
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_modifications: bool=None, disable_serving: bool=None, display_name: str=None, indexing_service_accounts: List[str]=None, items_visibility: List[GSuitePrincipal]=None, name: str=None, operation_ids: List[str]=None, return_thumbnail_urls: bool=None, short_name: str=None):
        """DataSource - a model defined in OpenAPI

        :param disable_modifications: The disable_modifications of this DataSource.
        :param disable_serving: The disable_serving of this DataSource.
        :param display_name: The display_name of this DataSource.
        :param indexing_service_accounts: The indexing_service_accounts of this DataSource.
        :param items_visibility: The items_visibility of this DataSource.
        :param name: The name of this DataSource.
        :param operation_ids: The operation_ids of this DataSource.
        :param return_thumbnail_urls: The return_thumbnail_urls of this DataSource.
        :param short_name: The short_name of this DataSource.
        """
        self.openapi_types = {
            'disable_modifications': bool,
            'disable_serving': bool,
            'display_name': str,
            'indexing_service_accounts': List[str],
            'items_visibility': List[GSuitePrincipal],
            'name': str,
            'operation_ids': List[str],
            'return_thumbnail_urls': bool,
            'short_name': str
        }

        self.attribute_map = {
            'disable_modifications': 'disableModifications',
            'disable_serving': 'disableServing',
            'display_name': 'displayName',
            'indexing_service_accounts': 'indexingServiceAccounts',
            'items_visibility': 'itemsVisibility',
            'name': 'name',
            'operation_ids': 'operationIds',
            'return_thumbnail_urls': 'returnThumbnailUrls',
            'short_name': 'shortName'
        }

        self._disable_modifications = disable_modifications
        self._disable_serving = disable_serving
        self._display_name = display_name
        self._indexing_service_accounts = indexing_service_accounts
        self._items_visibility = items_visibility
        self._name = name
        self._operation_ids = operation_ids
        self._return_thumbnail_urls = return_thumbnail_urls
        self._short_name = short_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_modifications(self):
        """Gets the disable_modifications of this DataSource.

        If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.

        :return: The disable_modifications of this DataSource.
        :rtype: bool
        """
        return self._disable_modifications

    @disable_modifications.setter
    def disable_modifications(self, disable_modifications):
        """Sets the disable_modifications of this DataSource.

        If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not stop the processing of previously accepted data.

        :param disable_modifications: The disable_modifications of this DataSource.
        :type disable_modifications: bool
        """

        self._disable_modifications = disable_modifications

    @property
    def disable_serving(self):
        """Gets the disable_serving of this DataSource.

        Disable serving any search or assist results.

        :return: The disable_serving of this DataSource.
        :rtype: bool
        """
        return self._disable_serving

    @disable_serving.setter
    def disable_serving(self, disable_serving):
        """Sets the disable_serving of this DataSource.

        Disable serving any search or assist results.

        :param disable_serving: The disable_serving of this DataSource.
        :type disable_serving: bool
        """

        self._disable_serving = disable_serving

    @property
    def display_name(self):
        """Gets the display_name of this DataSource.

        Required. Display name of the datasource The maximum length is 300 characters.

        :return: The display_name of this DataSource.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DataSource.

        Required. Display name of the datasource The maximum length is 300 characters.

        :param display_name: The display_name of this DataSource.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def indexing_service_accounts(self):
        """Gets the indexing_service_accounts of this DataSource.

        List of service accounts that have indexing access.

        :return: The indexing_service_accounts of this DataSource.
        :rtype: List[str]
        """
        return self._indexing_service_accounts

    @indexing_service_accounts.setter
    def indexing_service_accounts(self, indexing_service_accounts):
        """Sets the indexing_service_accounts of this DataSource.

        List of service accounts that have indexing access.

        :param indexing_service_accounts: The indexing_service_accounts of this DataSource.
        :type indexing_service_accounts: List[str]
        """

        self._indexing_service_accounts = indexing_service_accounts

    @property
    def items_visibility(self):
        """Gets the items_visibility of this DataSource.

        This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.

        :return: The items_visibility of this DataSource.
        :rtype: List[GSuitePrincipal]
        """
        return self._items_visibility

    @items_visibility.setter
    def items_visibility(self, items_visibility):
        """Sets the items_visibility of this DataSource.

        This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the individual items are not shared outside this visibility.

        :param items_visibility: The items_visibility of this DataSource.
        :type items_visibility: List[GSuitePrincipal]
        """

        self._items_visibility = items_visibility

    @property
    def name(self):
        """Gets the name of this DataSource.

        The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.

        :return: The name of this DataSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSource.

        The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource.

        :param name: The name of this DataSource.
        :type name: str
        """

        self._name = name

    @property
    def operation_ids(self):
        """Gets the operation_ids of this DataSource.

        IDs of the Long Running Operations (LROs) currently running for this schema.

        :return: The operation_ids of this DataSource.
        :rtype: List[str]
        """
        return self._operation_ids

    @operation_ids.setter
    def operation_ids(self, operation_ids):
        """Sets the operation_ids of this DataSource.

        IDs of the Long Running Operations (LROs) currently running for this schema.

        :param operation_ids: The operation_ids of this DataSource.
        :type operation_ids: List[str]
        """

        self._operation_ids = operation_ids

    @property
    def return_thumbnail_urls(self):
        """Gets the return_thumbnail_urls of this DataSource.

        Can a user request to get thumbnail URI for Items indexed in this data source.

        :return: The return_thumbnail_urls of this DataSource.
        :rtype: bool
        """
        return self._return_thumbnail_urls

    @return_thumbnail_urls.setter
    def return_thumbnail_urls(self, return_thumbnail_urls):
        """Sets the return_thumbnail_urls of this DataSource.

        Can a user request to get thumbnail URI for Items indexed in this data source.

        :param return_thumbnail_urls: The return_thumbnail_urls of this DataSource.
        :type return_thumbnail_urls: bool
        """

        self._return_thumbnail_urls = return_thumbnail_urls

    @property
    def short_name(self):
        """Gets the short_name of this DataSource.

        A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.

        :return: The short_name of this DataSource.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this DataSource.

        A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.

        :param short_name: The short_name of this DataSource.
        :type short_name: str
        """

        self._short_name = short_name
