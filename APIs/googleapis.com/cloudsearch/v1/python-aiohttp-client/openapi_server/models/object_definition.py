# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_options import ObjectOptions
from openapi_server.models.property_definition import PropertyDefinition
from openapi_server import util


class ObjectDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, options: ObjectOptions=None, property_definitions: List[PropertyDefinition]=None):
        """ObjectDefinition - a model defined in OpenAPI

        :param name: The name of this ObjectDefinition.
        :param options: The options of this ObjectDefinition.
        :param property_definitions: The property_definitions of this ObjectDefinition.
        """
        self.openapi_types = {
            'name': str,
            'options': ObjectOptions,
            'property_definitions': List[PropertyDefinition]
        }

        self.attribute_map = {
            'name': 'name',
            'options': 'options',
            'property_definitions': 'propertyDefinitions'
        }

        self._name = name
        self._options = options
        self._property_definitions = property_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectDefinition of this ObjectDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ObjectDefinition.

        The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.

        :return: The name of this ObjectDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectDefinition.

        The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.

        :param name: The name of this ObjectDefinition.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this ObjectDefinition.


        :return: The options of this ObjectDefinition.
        :rtype: ObjectOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ObjectDefinition.


        :param options: The options of this ObjectDefinition.
        :type options: ObjectOptions
        """

        self._options = options

    @property
    def property_definitions(self):
        """Gets the property_definitions of this ObjectDefinition.

        The property definitions for the object. The maximum number of elements is 1000.

        :return: The property_definitions of this ObjectDefinition.
        :rtype: List[PropertyDefinition]
        """
        return self._property_definitions

    @property_definitions.setter
    def property_definitions(self, property_definitions):
        """Sets the property_definitions of this ObjectDefinition.

        The property definitions for the object. The maximum number of elements is 1000.

        :param property_definitions: The property_definitions of this ObjectDefinition.
        :type property_definitions: List[PropertyDefinition]
        """

        self._property_definitions = property_definitions
