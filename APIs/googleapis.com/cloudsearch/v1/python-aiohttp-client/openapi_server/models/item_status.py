# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processing_error import ProcessingError
from openapi_server.models.repository_error import RepositoryError
from openapi_server import util


class ItemStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, processing_errors: List[ProcessingError]=None, repository_errors: List[RepositoryError]=None):
        """ItemStatus - a model defined in OpenAPI

        :param code: The code of this ItemStatus.
        :param processing_errors: The processing_errors of this ItemStatus.
        :param repository_errors: The repository_errors of this ItemStatus.
        """
        self.openapi_types = {
            'code': str,
            'processing_errors': List[ProcessingError],
            'repository_errors': List[RepositoryError]
        }

        self.attribute_map = {
            'code': 'code',
            'processing_errors': 'processingErrors',
            'repository_errors': 'repositoryErrors'
        }

        self._code = code
        self._processing_errors = processing_errors
        self._repository_errors = repository_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemStatus of this ItemStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ItemStatus.

        Status code.

        :return: The code of this ItemStatus.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ItemStatus.

        Status code.

        :param code: The code of this ItemStatus.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "ERROR", "MODIFIED", "NEW_ITEM", "ACCEPTED"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def processing_errors(self):
        """Gets the processing_errors of this ItemStatus.

        Error details in case the item is in ERROR state.

        :return: The processing_errors of this ItemStatus.
        :rtype: List[ProcessingError]
        """
        return self._processing_errors

    @processing_errors.setter
    def processing_errors(self, processing_errors):
        """Sets the processing_errors of this ItemStatus.

        Error details in case the item is in ERROR state.

        :param processing_errors: The processing_errors of this ItemStatus.
        :type processing_errors: List[ProcessingError]
        """

        self._processing_errors = processing_errors

    @property
    def repository_errors(self):
        """Gets the repository_errors of this ItemStatus.

        Repository error reported by connector.

        :return: The repository_errors of this ItemStatus.
        :rtype: List[RepositoryError]
        """
        return self._repository_errors

    @repository_errors.setter
    def repository_errors(self, repository_errors):
        """Sets the repository_errors of this ItemStatus.

        Repository error reported by connector.

        :param repository_errors: The repository_errors of this ItemStatus.
        :type repository_errors: List[RepositoryError]
        """

        self._repository_errors = repository_errors
