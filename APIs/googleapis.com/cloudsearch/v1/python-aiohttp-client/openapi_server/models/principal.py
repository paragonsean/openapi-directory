# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.g_suite_principal import GSuitePrincipal
from openapi_server import util


class Principal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_resource_name: str=None, gsuite_principal: GSuitePrincipal=None, user_resource_name: str=None):
        """Principal - a model defined in OpenAPI

        :param group_resource_name: The group_resource_name of this Principal.
        :param gsuite_principal: The gsuite_principal of this Principal.
        :param user_resource_name: The user_resource_name of this Principal.
        """
        self.openapi_types = {
            'group_resource_name': str,
            'gsuite_principal': GSuitePrincipal,
            'user_resource_name': str
        }

        self.attribute_map = {
            'group_resource_name': 'groupResourceName',
            'gsuite_principal': 'gsuitePrincipal',
            'user_resource_name': 'userResourceName'
        }

        self._group_resource_name = group_resource_name
        self._gsuite_principal = gsuite_principal
        self._user_resource_name = user_resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Principal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Principal of this Principal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_resource_name(self):
        """Gets the group_resource_name of this Principal.

        This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}

        :return: The group_resource_name of this Principal.
        :rtype: str
        """
        return self._group_resource_name

    @group_resource_name.setter
    def group_resource_name(self, group_resource_name):
        """Sets the group_resource_name of this Principal.

        This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}

        :param group_resource_name: The group_resource_name of this Principal.
        :type group_resource_name: str
        """

        self._group_resource_name = group_resource_name

    @property
    def gsuite_principal(self):
        """Gets the gsuite_principal of this Principal.


        :return: The gsuite_principal of this Principal.
        :rtype: GSuitePrincipal
        """
        return self._gsuite_principal

    @gsuite_principal.setter
    def gsuite_principal(self, gsuite_principal):
        """Sets the gsuite_principal of this Principal.


        :param gsuite_principal: The gsuite_principal of this Principal.
        :type gsuite_principal: GSuitePrincipal
        """

        self._gsuite_principal = gsuite_principal

    @property
    def user_resource_name(self):
        """Gets the user_resource_name of this Principal.

        This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}

        :return: The user_resource_name of this Principal.
        :rtype: str
        """
        return self._user_resource_name

    @user_resource_name.setter
    def user_resource_name(self, user_resource_name):
        """Sets the user_resource_name of this Principal.

        This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}

        :param user_resource_name: The user_resource_name of this Principal.
        :type user_resource_name: str
        """

        self._user_resource_name = user_resource_name
