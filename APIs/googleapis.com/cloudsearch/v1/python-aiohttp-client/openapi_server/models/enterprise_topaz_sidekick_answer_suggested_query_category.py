# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseTopazSidekickAnswerSuggestedQueryCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, is_enabled: bool=None, query: List[str]=None):
        """EnterpriseTopazSidekickAnswerSuggestedQueryCategory - a model defined in OpenAPI

        :param category: The category of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :param is_enabled: The is_enabled of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :param query: The query of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        """
        self.openapi_types = {
            'category': str,
            'is_enabled': bool,
            'query': List[str]
        }

        self.attribute_map = {
            'category': 'category',
            'is_enabled': 'isEnabled',
            'query': 'query'
        }

        self._category = category
        self._is_enabled = is_enabled
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickAnswerSuggestedQueryCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickAnswerSuggestedQueryCategory of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        The query list category.

        :return: The category of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        The query list category.

        :param category: The category of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :type category: str
        """
        allowed_values = ["UNKNOWN", "CALENDAR", "DOCUMENT", "PEOPLE"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def is_enabled(self):
        """Gets the is_enabled of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        Whether this category is enabled.

        :return: The is_enabled of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        Whether this category is enabled.

        :param is_enabled: The is_enabled of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def query(self):
        """Gets the query of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        List of suggested queries to show the user.

        :return: The query of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :rtype: List[str]
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.

        List of suggested queries to show the user.

        :param query: The query of this EnterpriseTopazSidekickAnswerSuggestedQueryCategory.
        :type query: List[str]
        """

        self._query = query
