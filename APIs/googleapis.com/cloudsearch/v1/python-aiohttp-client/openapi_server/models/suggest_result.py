# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.people_suggestion import PeopleSuggestion
from openapi_server.models.source import Source
from openapi_server import util


class SuggestResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, people_suggestion: PeopleSuggestion=None, query_suggestion: object=None, source: Source=None, suggested_query: str=None):
        """SuggestResult - a model defined in OpenAPI

        :param people_suggestion: The people_suggestion of this SuggestResult.
        :param query_suggestion: The query_suggestion of this SuggestResult.
        :param source: The source of this SuggestResult.
        :param suggested_query: The suggested_query of this SuggestResult.
        """
        self.openapi_types = {
            'people_suggestion': PeopleSuggestion,
            'query_suggestion': object,
            'source': Source,
            'suggested_query': str
        }

        self.attribute_map = {
            'people_suggestion': 'peopleSuggestion',
            'query_suggestion': 'querySuggestion',
            'source': 'source',
            'suggested_query': 'suggestedQuery'
        }

        self._people_suggestion = people_suggestion
        self._query_suggestion = query_suggestion
        self._source = source
        self._suggested_query = suggested_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestResult of this SuggestResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def people_suggestion(self):
        """Gets the people_suggestion of this SuggestResult.


        :return: The people_suggestion of this SuggestResult.
        :rtype: PeopleSuggestion
        """
        return self._people_suggestion

    @people_suggestion.setter
    def people_suggestion(self, people_suggestion):
        """Sets the people_suggestion of this SuggestResult.


        :param people_suggestion: The people_suggestion of this SuggestResult.
        :type people_suggestion: PeopleSuggestion
        """

        self._people_suggestion = people_suggestion

    @property
    def query_suggestion(self):
        """Gets the query_suggestion of this SuggestResult.

        This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.

        :return: The query_suggestion of this SuggestResult.
        :rtype: object
        """
        return self._query_suggestion

    @query_suggestion.setter
    def query_suggestion(self, query_suggestion):
        """Sets the query_suggestion of this SuggestResult.

        This field does not contain anything as of now and is just used as an indicator that the suggest result was a phrase completion.

        :param query_suggestion: The query_suggestion of this SuggestResult.
        :type query_suggestion: object
        """

        self._query_suggestion = query_suggestion

    @property
    def source(self):
        """Gets the source of this SuggestResult.


        :return: The source of this SuggestResult.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SuggestResult.


        :param source: The source of this SuggestResult.
        :type source: Source
        """

        self._source = source

    @property
    def suggested_query(self):
        """Gets the suggested_query of this SuggestResult.

        The suggested query that will be used for search, when the user clicks on the suggestion

        :return: The suggested_query of this SuggestResult.
        :rtype: str
        """
        return self._suggested_query

    @suggested_query.setter
    def suggested_query(self, suggested_query):
        """Sets the suggested_query of this SuggestResult.

        The suggested query that will be used for search, when the user clicks on the suggestion

        :param suggested_query: The suggested_query of this SuggestResult.
        :type suggested_query: str
        """

        self._suggested_query = suggested_query
