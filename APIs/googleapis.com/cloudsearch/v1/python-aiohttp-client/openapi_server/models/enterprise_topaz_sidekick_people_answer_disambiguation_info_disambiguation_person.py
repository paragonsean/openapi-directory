# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_common_person import EnterpriseTopazSidekickCommonPerson
from openapi_server import util


class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, person: EnterpriseTopazSidekickCommonPerson=None, query: str=None):
        """EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson - a model defined in OpenAPI

        :param person: The person of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        :param query: The query of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        """
        self.openapi_types = {
            'person': EnterpriseTopazSidekickCommonPerson,
            'query': str
        }

        self.attribute_map = {
            'person': 'person',
            'query': 'query'
        }

        self._person = person
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person(self):
        """Gets the person of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.


        :return: The person of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        :rtype: EnterpriseTopazSidekickCommonPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.


        :param person: The person of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        :type person: EnterpriseTopazSidekickCommonPerson
        """

        self._person = person

    @property
    def query(self):
        """Gets the query of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.

        The query that can be used to produce an answer card with the same attribute, but for this person.

        :return: The query of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.

        The query that can be used to produce an answer card with the same attribute, but for this person.

        :param query: The query of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson.
        :type query: str
        """

        self._query = query
