# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_common_person import EnterpriseTopazSidekickCommonPerson
from openapi_server import util


class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_id: str=None, is_private: bool=None, last_comment_time_ms: str=None, last_edit_time_ms: str=None, last_modification_time_millis: str=None, last_updated_time_ms: str=None, last_view_time_ms: str=None, owner: EnterpriseTopazSidekickCommonPerson=None, scope: str=None):
        """EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata - a model defined in OpenAPI

        :param document_id: The document_id of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param is_private: The is_private of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param last_comment_time_ms: The last_comment_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param last_edit_time_ms: The last_edit_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param last_modification_time_millis: The last_modification_time_millis of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param last_updated_time_ms: The last_updated_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param last_view_time_ms: The last_view_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param owner: The owner of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :param scope: The scope of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        """
        self.openapi_types = {
            'document_id': str,
            'is_private': bool,
            'last_comment_time_ms': str,
            'last_edit_time_ms': str,
            'last_modification_time_millis': str,
            'last_updated_time_ms': str,
            'last_view_time_ms': str,
            'owner': EnterpriseTopazSidekickCommonPerson,
            'scope': str
        }

        self.attribute_map = {
            'document_id': 'documentId',
            'is_private': 'isPrivate',
            'last_comment_time_ms': 'lastCommentTimeMs',
            'last_edit_time_ms': 'lastEditTimeMs',
            'last_modification_time_millis': 'lastModificationTimeMillis',
            'last_updated_time_ms': 'lastUpdatedTimeMs',
            'last_view_time_ms': 'lastViewTimeMs',
            'owner': 'owner',
            'scope': 'scope'
        }

        self._document_id = document_id
        self._is_private = is_private
        self._last_comment_time_ms = last_comment_time_ms
        self._last_edit_time_ms = last_edit_time_ms
        self._last_modification_time_millis = last_modification_time_millis
        self._last_updated_time_ms = last_updated_time_ms
        self._last_view_time_ms = last_view_time_ms
        self._owner = owner
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_id(self):
        """Gets the document_id of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id.

        :return: The document_id of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        The drive document cosmo id. Client could use the id to build a URL to open a document. Please use Document.document_id.

        :param document_id: The document_id of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def is_private(self):
        """Gets the is_private of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it's shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.

        :return: The is_private of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Additional field to identify whether a document is private since scope set to LIMITED can mean both that the doc is private or that it's shared with others. is_private indicates whether the doc is not shared with anyone except for the owner.

        :param is_private: The is_private of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def last_comment_time_ms(self):
        """Gets the last_comment_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent comment added to the document in milliseconds since epoch.

        :return: The last_comment_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._last_comment_time_ms

    @last_comment_time_ms.setter
    def last_comment_time_ms(self, last_comment_time_ms):
        """Sets the last_comment_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent comment added to the document in milliseconds since epoch.

        :param last_comment_time_ms: The last_comment_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type last_comment_time_ms: str
        """

        self._last_comment_time_ms = last_comment_time_ms

    @property
    def last_edit_time_ms(self):
        """Gets the last_edit_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent edit from the current user in milliseconds since epoch.

        :return: The last_edit_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._last_edit_time_ms

    @last_edit_time_ms.setter
    def last_edit_time_ms(self, last_edit_time_ms):
        """Sets the last_edit_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent edit from the current user in milliseconds since epoch.

        :param last_edit_time_ms: The last_edit_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type last_edit_time_ms: str
        """

        self._last_edit_time_ms = last_edit_time_ms

    @property
    def last_modification_time_millis(self):
        """Gets the last_modification_time_millis of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Last modification time of the document (independent of the user that modified it).

        :return: The last_modification_time_millis of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._last_modification_time_millis

    @last_modification_time_millis.setter
    def last_modification_time_millis(self, last_modification_time_millis):
        """Sets the last_modification_time_millis of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Last modification time of the document (independent of the user that modified it).

        :param last_modification_time_millis: The last_modification_time_millis of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type last_modification_time_millis: str
        """

        self._last_modification_time_millis = last_modification_time_millis

    @property
    def last_updated_time_ms(self):
        """Gets the last_updated_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the last updated time of the document in milliseconds since epoch.

        :return: The last_updated_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._last_updated_time_ms

    @last_updated_time_ms.setter
    def last_updated_time_ms(self, last_updated_time_ms):
        """Sets the last_updated_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the last updated time of the document in milliseconds since epoch.

        :param last_updated_time_ms: The last_updated_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type last_updated_time_ms: str
        """

        self._last_updated_time_ms = last_updated_time_ms

    @property
    def last_view_time_ms(self):
        """Gets the last_view_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent view from the current user in milliseconds since epoch.

        :return: The last_view_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._last_view_time_ms

    @last_view_time_ms.setter
    def last_view_time_ms(self, last_view_time_ms):
        """Sets the last_view_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        Timestamp of the most recent view from the current user in milliseconds since epoch.

        :param last_view_time_ms: The last_view_time_ms of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type last_view_time_ms: str
        """

        self._last_view_time_ms = last_view_time_ms

    @property
    def owner(self):
        """Gets the owner of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.


        :return: The owner of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: EnterpriseTopazSidekickCommonPerson
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.


        :param owner: The owner of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type owner: EnterpriseTopazSidekickCommonPerson
        """

        self._owner = owner

    @property
    def scope(self):
        """Gets the scope of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).

        :return: The scope of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.

        ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared with link, team drive, ...).

        :param scope: The scope of this EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata.
        :type scope: str
        """
        allowed_values = ["UNKNOWN_DOCUMENT_SCOPE", "LIMITED", "DASHER_DOMAIN_WITH_LINK", "DASHER_DOMAIN", "PUBLIC_WITH_LINK", "PUBLIC", "TEAM_DRIVE"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
