# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.integer_faceting_options import IntegerFacetingOptions
from openapi_server import util


class FacetOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integer_faceting_options: IntegerFacetingOptions=None, num_facet_buckets: int=None, object_type: str=None, operator_name: str=None, source_name: str=None):
        """FacetOptions - a model defined in OpenAPI

        :param integer_faceting_options: The integer_faceting_options of this FacetOptions.
        :param num_facet_buckets: The num_facet_buckets of this FacetOptions.
        :param object_type: The object_type of this FacetOptions.
        :param operator_name: The operator_name of this FacetOptions.
        :param source_name: The source_name of this FacetOptions.
        """
        self.openapi_types = {
            'integer_faceting_options': IntegerFacetingOptions,
            'num_facet_buckets': int,
            'object_type': str,
            'operator_name': str,
            'source_name': str
        }

        self.attribute_map = {
            'integer_faceting_options': 'integerFacetingOptions',
            'num_facet_buckets': 'numFacetBuckets',
            'object_type': 'objectType',
            'operator_name': 'operatorName',
            'source_name': 'sourceName'
        }

        self._integer_faceting_options = integer_faceting_options
        self._num_facet_buckets = num_facet_buckets
        self._object_type = object_type
        self._operator_name = operator_name
        self._source_name = source_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetOptions of this FacetOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integer_faceting_options(self):
        """Gets the integer_faceting_options of this FacetOptions.


        :return: The integer_faceting_options of this FacetOptions.
        :rtype: IntegerFacetingOptions
        """
        return self._integer_faceting_options

    @integer_faceting_options.setter
    def integer_faceting_options(self, integer_faceting_options):
        """Sets the integer_faceting_options of this FacetOptions.


        :param integer_faceting_options: The integer_faceting_options of this FacetOptions.
        :type integer_faceting_options: IntegerFacetingOptions
        """

        self._integer_faceting_options = integer_faceting_options

    @property
    def num_facet_buckets(self):
        """Gets the num_facet_buckets of this FacetOptions.

        Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.

        :return: The num_facet_buckets of this FacetOptions.
        :rtype: int
        """
        return self._num_facet_buckets

    @num_facet_buckets.setter
    def num_facet_buckets(self, num_facet_buckets):
        """Sets the num_facet_buckets of this FacetOptions.

        Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.

        :param num_facet_buckets: The num_facet_buckets of this FacetOptions.
        :type num_facet_buckets: int
        """

        self._num_facet_buckets = num_facet_buckets

    @property
    def object_type(self):
        """Gets the object_type of this FacetOptions.

        If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.

        :return: The object_type of this FacetOptions.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this FacetOptions.

        If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.

        :param object_type: The object_type of this FacetOptions.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def operator_name(self):
        """Gets the operator_name of this FacetOptions.

        The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions

        :return: The operator_name of this FacetOptions.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this FacetOptions.

        The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions

        :param operator_name: The operator_name of this FacetOptions.
        :type operator_name: str
        """

        self._operator_name = operator_name

    @property
    def source_name(self):
        """Gets the source_name of this FacetOptions.

        Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.

        :return: The source_name of this FacetOptions.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this FacetOptions.

        Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.

        :param source_name: The source_name of this FacetOptions.
        :type source_name: str
        """

        self._source_name = source_name
