# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_common_person import EnterpriseTopazSidekickCommonPerson
from openapi_server import util


class EnterpriseTopazSidekickPersonProfileCardRelatedPeople(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, related_person: List[EnterpriseTopazSidekickCommonPerson]=None, relation: str=None):
        """EnterpriseTopazSidekickPersonProfileCardRelatedPeople - a model defined in OpenAPI

        :param related_person: The related_person of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        :param relation: The relation of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        """
        self.openapi_types = {
            'related_person': List[EnterpriseTopazSidekickCommonPerson],
            'relation': str
        }

        self.attribute_map = {
            'related_person': 'relatedPerson',
            'relation': 'relation'
        }

        self._related_person = related_person
        self._relation = relation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickPersonProfileCardRelatedPeople':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickPersonProfileCardRelatedPeople of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def related_person(self):
        """Gets the related_person of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.

        Related people.

        :return: The related_person of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        :rtype: List[EnterpriseTopazSidekickCommonPerson]
        """
        return self._related_person

    @related_person.setter
    def related_person(self, related_person):
        """Sets the related_person of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.

        Related people.

        :param related_person: The related_person of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        :type related_person: List[EnterpriseTopazSidekickCommonPerson]
        """

        self._related_person = related_person

    @property
    def relation(self):
        """Gets the relation of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.

        Relation type.

        :return: The relation of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.

        Relation type.

        :param relation: The relation of this EnterpriseTopazSidekickPersonProfileCardRelatedPeople.
        :type relation: str
        """
        allowed_values = ["UNKNOWN", "MANAGER", "DIRECT_REPORT"]  # noqa: E501
        if relation not in allowed_values:
            raise ValueError(
                "Invalid value for `relation` ({0}), must be one of {1}"
                .format(relation, allowed_values)
            )

        self._relation = relation
