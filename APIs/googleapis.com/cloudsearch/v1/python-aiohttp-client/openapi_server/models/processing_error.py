# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_violation import FieldViolation
from openapi_server import util


class ProcessingError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, error_message: str=None, field_violations: List[FieldViolation]=None):
        """ProcessingError - a model defined in OpenAPI

        :param code: The code of this ProcessingError.
        :param error_message: The error_message of this ProcessingError.
        :param field_violations: The field_violations of this ProcessingError.
        """
        self.openapi_types = {
            'code': str,
            'error_message': str,
            'field_violations': List[FieldViolation]
        }

        self.attribute_map = {
            'code': 'code',
            'error_message': 'errorMessage',
            'field_violations': 'fieldViolations'
        }

        self._code = code
        self._error_message = error_message
        self._field_violations = field_violations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessingError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessingError of this ProcessingError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ProcessingError.

        Error code indicating the nature of the error.

        :return: The code of this ProcessingError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProcessingError.

        Error code indicating the nature of the error.

        :param code: The code of this ProcessingError.
        :type code: str
        """
        allowed_values = ["PROCESSING_ERROR_CODE_UNSPECIFIED", "MALFORMED_REQUEST", "UNSUPPORTED_CONTENT_FORMAT", "INDIRECT_BROKEN_ACL", "ACL_CYCLE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def error_message(self):
        """Gets the error_message of this ProcessingError.

        The description of the error.

        :return: The error_message of this ProcessingError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ProcessingError.

        The description of the error.

        :param error_message: The error_message of this ProcessingError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def field_violations(self):
        """Gets the field_violations of this ProcessingError.

        In case the item fields are invalid, this field contains the details about the validation errors.

        :return: The field_violations of this ProcessingError.
        :rtype: List[FieldViolation]
        """
        return self._field_violations

    @field_violations.setter
    def field_violations(self, field_violations):
        """Sets the field_violations of this ProcessingError.

        In case the item fields are invalid, this field contains the details about the validation errors.

        :param field_violations: The field_violations of this ProcessingError.
        :type field_violations: List[FieldViolation]
        """

        self._field_violations = field_violations
