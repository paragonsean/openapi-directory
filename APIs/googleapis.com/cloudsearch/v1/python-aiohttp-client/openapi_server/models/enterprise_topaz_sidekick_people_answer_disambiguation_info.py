# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_people_answer_disambiguation_info_disambiguation_person import EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson
from openapi_server import util


class EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disambiguation: List[EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson]=None, name: str=None):
        """EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo - a model defined in OpenAPI

        :param disambiguation: The disambiguation of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        :param name: The name of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        """
        self.openapi_types = {
            'disambiguation': List[EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson],
            'name': str
        }

        self.attribute_map = {
            'disambiguation': 'disambiguation',
            'name': 'name'
        }

        self._disambiguation = disambiguation
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disambiguation(self):
        """Gets the disambiguation of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.

        A list of people that also matched the query. This list is not complete.

        :return: The disambiguation of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        :rtype: List[EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson]
        """
        return self._disambiguation

    @disambiguation.setter
    def disambiguation(self, disambiguation):
        """Sets the disambiguation of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.

        A list of people that also matched the query. This list is not complete.

        :param disambiguation: The disambiguation of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        :type disambiguation: List[EnterpriseTopazSidekickPeopleAnswerDisambiguationInfoDisambiguationPerson]
        """

        self._disambiguation = disambiguation

    @property
    def name(self):
        """Gets the name of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.

        The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. \"Bob's\" -> \"Bob\").

        :return: The name of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.

        The name that was extracted from the query. This may be in the form of the given name, last name, full name, LDAP, or email address. This name can be considered suitable for displaying to the user and can largely be considered to be normalized (e.g. \"Bob's\" -> \"Bob\").

        :param name: The name of this EnterpriseTopazSidekickPeopleAnswerDisambiguationInfo.
        :type name: str
        """

        self._name = name
