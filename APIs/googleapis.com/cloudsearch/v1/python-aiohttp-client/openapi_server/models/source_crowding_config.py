# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceCrowdingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_results: int=None, num_suggestions: int=None):
        """SourceCrowdingConfig - a model defined in OpenAPI

        :param num_results: The num_results of this SourceCrowdingConfig.
        :param num_suggestions: The num_suggestions of this SourceCrowdingConfig.
        """
        self.openapi_types = {
            'num_results': int,
            'num_suggestions': int
        }

        self.attribute_map = {
            'num_results': 'numResults',
            'num_suggestions': 'numSuggestions'
        }

        self._num_results = num_results
        self._num_suggestions = num_suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceCrowdingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceCrowdingConfig of this SourceCrowdingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_results(self):
        """Gets the num_results of this SourceCrowdingConfig.

        Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.

        :return: The num_results of this SourceCrowdingConfig.
        :rtype: int
        """
        return self._num_results

    @num_results.setter
    def num_results(self, num_results):
        """Sets the num_results of this SourceCrowdingConfig.

        Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.

        :param num_results: The num_results of this SourceCrowdingConfig.
        :type num_results: int
        """

        self._num_results = num_results

    @property
    def num_suggestions(self):
        """Gets the num_suggestions of this SourceCrowdingConfig.

        Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.

        :return: The num_suggestions of this SourceCrowdingConfig.
        :rtype: int
        """
        return self._num_suggestions

    @num_suggestions.setter
    def num_suggestions(self, num_suggestions):
        """Sets the num_suggestions of this SourceCrowdingConfig.

        Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.

        :param num_suggestions: The num_suggestions of this SourceCrowdingConfig.
        :type num_suggestions: int
        """

        self._num_suggestions = num_suggestions
