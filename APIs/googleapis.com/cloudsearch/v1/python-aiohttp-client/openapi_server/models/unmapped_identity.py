# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal import Principal
from openapi_server import util


class UnmappedIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_identity: Principal=None, resolution_status_code: str=None):
        """UnmappedIdentity - a model defined in OpenAPI

        :param external_identity: The external_identity of this UnmappedIdentity.
        :param resolution_status_code: The resolution_status_code of this UnmappedIdentity.
        """
        self.openapi_types = {
            'external_identity': Principal,
            'resolution_status_code': str
        }

        self.attribute_map = {
            'external_identity': 'externalIdentity',
            'resolution_status_code': 'resolutionStatusCode'
        }

        self._external_identity = external_identity
        self._resolution_status_code = resolution_status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmappedIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnmappedIdentity of this UnmappedIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_identity(self):
        """Gets the external_identity of this UnmappedIdentity.


        :return: The external_identity of this UnmappedIdentity.
        :rtype: Principal
        """
        return self._external_identity

    @external_identity.setter
    def external_identity(self, external_identity):
        """Sets the external_identity of this UnmappedIdentity.


        :param external_identity: The external_identity of this UnmappedIdentity.
        :type external_identity: Principal
        """

        self._external_identity = external_identity

    @property
    def resolution_status_code(self):
        """Gets the resolution_status_code of this UnmappedIdentity.

        The resolution status for the external identity.

        :return: The resolution_status_code of this UnmappedIdentity.
        :rtype: str
        """
        return self._resolution_status_code

    @resolution_status_code.setter
    def resolution_status_code(self, resolution_status_code):
        """Sets the resolution_status_code of this UnmappedIdentity.

        The resolution status for the external identity.

        :param resolution_status_code: The resolution_status_code of this UnmappedIdentity.
        :type resolution_status_code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "NOT_FOUND", "IDENTITY_SOURCE_NOT_FOUND", "IDENTITY_SOURCE_MISCONFIGURED", "TOO_MANY_MAPPINGS_FOUND", "INTERNAL_ERROR"]  # noqa: E501
        if resolution_status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_status_code` ({0}), must be one of {1}"
                .format(resolution_status_code, allowed_values)
            )

        self._resolution_status_code = resolution_status_code
