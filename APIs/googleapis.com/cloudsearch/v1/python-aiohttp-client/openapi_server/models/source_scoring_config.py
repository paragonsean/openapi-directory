# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceScoringConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_importance: str=None):
        """SourceScoringConfig - a model defined in OpenAPI

        :param source_importance: The source_importance of this SourceScoringConfig.
        """
        self.openapi_types = {
            'source_importance': str
        }

        self.attribute_map = {
            'source_importance': 'sourceImportance'
        }

        self._source_importance = source_importance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceScoringConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceScoringConfig of this SourceScoringConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_importance(self):
        """Gets the source_importance of this SourceScoringConfig.

        Importance of the source.

        :return: The source_importance of this SourceScoringConfig.
        :rtype: str
        """
        return self._source_importance

    @source_importance.setter
    def source_importance(self, source_importance):
        """Sets the source_importance of this SourceScoringConfig.

        Importance of the source.

        :param source_importance: The source_importance of this SourceScoringConfig.
        :type source_importance: str
        """
        allowed_values = ["DEFAULT", "LOW", "HIGH"]  # noqa: E501
        if source_importance not in allowed_values:
            raise ValueError(
                "Invalid value for `source_importance` ({0}), must be one of {1}"
                .format(source_importance, allowed_values)
            )

        self._source_importance = source_importance
