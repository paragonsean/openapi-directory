# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_agenda_entry import EnterpriseTopazSidekickAgendaEntry
from openapi_server.models.enterprise_topaz_sidekick_conflicting_events_card_proto import EnterpriseTopazSidekickConflictingEventsCardProto
from openapi_server.models.enterprise_topaz_sidekick_gap import EnterpriseTopazSidekickGap
from openapi_server import util


class EnterpriseTopazSidekickAgendaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflicted_group: EnterpriseTopazSidekickConflictingEventsCardProto=None, gap_before: EnterpriseTopazSidekickGap=None, meeting: EnterpriseTopazSidekickAgendaEntry=None):
        """EnterpriseTopazSidekickAgendaItem - a model defined in OpenAPI

        :param conflicted_group: The conflicted_group of this EnterpriseTopazSidekickAgendaItem.
        :param gap_before: The gap_before of this EnterpriseTopazSidekickAgendaItem.
        :param meeting: The meeting of this EnterpriseTopazSidekickAgendaItem.
        """
        self.openapi_types = {
            'conflicted_group': EnterpriseTopazSidekickConflictingEventsCardProto,
            'gap_before': EnterpriseTopazSidekickGap,
            'meeting': EnterpriseTopazSidekickAgendaEntry
        }

        self.attribute_map = {
            'conflicted_group': 'conflictedGroup',
            'gap_before': 'gapBefore',
            'meeting': 'meeting'
        }

        self._conflicted_group = conflicted_group
        self._gap_before = gap_before
        self._meeting = meeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickAgendaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickAgendaItem of this EnterpriseTopazSidekickAgendaItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflicted_group(self):
        """Gets the conflicted_group of this EnterpriseTopazSidekickAgendaItem.


        :return: The conflicted_group of this EnterpriseTopazSidekickAgendaItem.
        :rtype: EnterpriseTopazSidekickConflictingEventsCardProto
        """
        return self._conflicted_group

    @conflicted_group.setter
    def conflicted_group(self, conflicted_group):
        """Sets the conflicted_group of this EnterpriseTopazSidekickAgendaItem.


        :param conflicted_group: The conflicted_group of this EnterpriseTopazSidekickAgendaItem.
        :type conflicted_group: EnterpriseTopazSidekickConflictingEventsCardProto
        """

        self._conflicted_group = conflicted_group

    @property
    def gap_before(self):
        """Gets the gap_before of this EnterpriseTopazSidekickAgendaItem.


        :return: The gap_before of this EnterpriseTopazSidekickAgendaItem.
        :rtype: EnterpriseTopazSidekickGap
        """
        return self._gap_before

    @gap_before.setter
    def gap_before(self, gap_before):
        """Sets the gap_before of this EnterpriseTopazSidekickAgendaItem.


        :param gap_before: The gap_before of this EnterpriseTopazSidekickAgendaItem.
        :type gap_before: EnterpriseTopazSidekickGap
        """

        self._gap_before = gap_before

    @property
    def meeting(self):
        """Gets the meeting of this EnterpriseTopazSidekickAgendaItem.


        :return: The meeting of this EnterpriseTopazSidekickAgendaItem.
        :rtype: EnterpriseTopazSidekickAgendaEntry
        """
        return self._meeting

    @meeting.setter
    def meeting(self, meeting):
        """Sets the meeting of this EnterpriseTopazSidekickAgendaItem.


        :param meeting: The meeting of this EnterpriseTopazSidekickAgendaItem.
        :type meeting: EnterpriseTopazSidekickAgendaEntry
        """

        self._meeting = meeting
