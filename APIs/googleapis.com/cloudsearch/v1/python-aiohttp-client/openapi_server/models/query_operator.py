# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, enum_values: List[str]=None, greater_than_operator_name: str=None, is_facetable: bool=None, is_repeatable: bool=None, is_returnable: bool=None, is_sortable: bool=None, is_suggestable: bool=None, less_than_operator_name: str=None, object_type: str=None, operator_name: str=None, type: str=None):
        """QueryOperator - a model defined in OpenAPI

        :param display_name: The display_name of this QueryOperator.
        :param enum_values: The enum_values of this QueryOperator.
        :param greater_than_operator_name: The greater_than_operator_name of this QueryOperator.
        :param is_facetable: The is_facetable of this QueryOperator.
        :param is_repeatable: The is_repeatable of this QueryOperator.
        :param is_returnable: The is_returnable of this QueryOperator.
        :param is_sortable: The is_sortable of this QueryOperator.
        :param is_suggestable: The is_suggestable of this QueryOperator.
        :param less_than_operator_name: The less_than_operator_name of this QueryOperator.
        :param object_type: The object_type of this QueryOperator.
        :param operator_name: The operator_name of this QueryOperator.
        :param type: The type of this QueryOperator.
        """
        self.openapi_types = {
            'display_name': str,
            'enum_values': List[str],
            'greater_than_operator_name': str,
            'is_facetable': bool,
            'is_repeatable': bool,
            'is_returnable': bool,
            'is_sortable': bool,
            'is_suggestable': bool,
            'less_than_operator_name': str,
            'object_type': str,
            'operator_name': str,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'enum_values': 'enumValues',
            'greater_than_operator_name': 'greaterThanOperatorName',
            'is_facetable': 'isFacetable',
            'is_repeatable': 'isRepeatable',
            'is_returnable': 'isReturnable',
            'is_sortable': 'isSortable',
            'is_suggestable': 'isSuggestable',
            'less_than_operator_name': 'lessThanOperatorName',
            'object_type': 'objectType',
            'operator_name': 'operatorName',
            'type': 'type'
        }

        self._display_name = display_name
        self._enum_values = enum_values
        self._greater_than_operator_name = greater_than_operator_name
        self._is_facetable = is_facetable
        self._is_repeatable = is_repeatable
        self._is_returnable = is_returnable
        self._is_sortable = is_sortable
        self._is_suggestable = is_suggestable
        self._less_than_operator_name = less_than_operator_name
        self._object_type = object_type
        self._operator_name = operator_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryOperator of this QueryOperator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this QueryOperator.

        Display name of the operator

        :return: The display_name of this QueryOperator.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this QueryOperator.

        Display name of the operator

        :param display_name: The display_name of this QueryOperator.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enum_values(self):
        """Gets the enum_values of this QueryOperator.

        Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.

        :return: The enum_values of this QueryOperator.
        :rtype: List[str]
        """
        return self._enum_values

    @enum_values.setter
    def enum_values(self, enum_values):
        """Sets the enum_values of this QueryOperator.

        Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.

        :param enum_values: The enum_values of this QueryOperator.
        :type enum_values: List[str]
        """

        self._enum_values = enum_values

    @property
    def greater_than_operator_name(self):
        """Gets the greater_than_operator_name of this QueryOperator.

        Indicates the operator name that can be used to isolate the property using the greater-than operator.

        :return: The greater_than_operator_name of this QueryOperator.
        :rtype: str
        """
        return self._greater_than_operator_name

    @greater_than_operator_name.setter
    def greater_than_operator_name(self, greater_than_operator_name):
        """Sets the greater_than_operator_name of this QueryOperator.

        Indicates the operator name that can be used to isolate the property using the greater-than operator.

        :param greater_than_operator_name: The greater_than_operator_name of this QueryOperator.
        :type greater_than_operator_name: str
        """

        self._greater_than_operator_name = greater_than_operator_name

    @property
    def is_facetable(self):
        """Gets the is_facetable of this QueryOperator.

        Can this operator be used to get facets.

        :return: The is_facetable of this QueryOperator.
        :rtype: bool
        """
        return self._is_facetable

    @is_facetable.setter
    def is_facetable(self, is_facetable):
        """Sets the is_facetable of this QueryOperator.

        Can this operator be used to get facets.

        :param is_facetable: The is_facetable of this QueryOperator.
        :type is_facetable: bool
        """

        self._is_facetable = is_facetable

    @property
    def is_repeatable(self):
        """Gets the is_repeatable of this QueryOperator.

        Indicates if multiple values can be set for this property.

        :return: The is_repeatable of this QueryOperator.
        :rtype: bool
        """
        return self._is_repeatable

    @is_repeatable.setter
    def is_repeatable(self, is_repeatable):
        """Sets the is_repeatable of this QueryOperator.

        Indicates if multiple values can be set for this property.

        :param is_repeatable: The is_repeatable of this QueryOperator.
        :type is_repeatable: bool
        """

        self._is_repeatable = is_repeatable

    @property
    def is_returnable(self):
        """Gets the is_returnable of this QueryOperator.

        Will the property associated with this facet be returned as part of search results.

        :return: The is_returnable of this QueryOperator.
        :rtype: bool
        """
        return self._is_returnable

    @is_returnable.setter
    def is_returnable(self, is_returnable):
        """Sets the is_returnable of this QueryOperator.

        Will the property associated with this facet be returned as part of search results.

        :param is_returnable: The is_returnable of this QueryOperator.
        :type is_returnable: bool
        """

        self._is_returnable = is_returnable

    @property
    def is_sortable(self):
        """Gets the is_sortable of this QueryOperator.

        Can this operator be used to sort results.

        :return: The is_sortable of this QueryOperator.
        :rtype: bool
        """
        return self._is_sortable

    @is_sortable.setter
    def is_sortable(self, is_sortable):
        """Sets the is_sortable of this QueryOperator.

        Can this operator be used to sort results.

        :param is_sortable: The is_sortable of this QueryOperator.
        :type is_sortable: bool
        """

        self._is_sortable = is_sortable

    @property
    def is_suggestable(self):
        """Gets the is_suggestable of this QueryOperator.

        Can get suggestions for this field.

        :return: The is_suggestable of this QueryOperator.
        :rtype: bool
        """
        return self._is_suggestable

    @is_suggestable.setter
    def is_suggestable(self, is_suggestable):
        """Sets the is_suggestable of this QueryOperator.

        Can get suggestions for this field.

        :param is_suggestable: The is_suggestable of this QueryOperator.
        :type is_suggestable: bool
        """

        self._is_suggestable = is_suggestable

    @property
    def less_than_operator_name(self):
        """Gets the less_than_operator_name of this QueryOperator.

        Indicates the operator name that can be used to isolate the property using the less-than operator.

        :return: The less_than_operator_name of this QueryOperator.
        :rtype: str
        """
        return self._less_than_operator_name

    @less_than_operator_name.setter
    def less_than_operator_name(self, less_than_operator_name):
        """Sets the less_than_operator_name of this QueryOperator.

        Indicates the operator name that can be used to isolate the property using the less-than operator.

        :param less_than_operator_name: The less_than_operator_name of this QueryOperator.
        :type less_than_operator_name: str
        """

        self._less_than_operator_name = less_than_operator_name

    @property
    def object_type(self):
        """Gets the object_type of this QueryOperator.

        The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.

        :return: The object_type of this QueryOperator.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this QueryOperator.

        The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.

        :param object_type: The object_type of this QueryOperator.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def operator_name(self):
        """Gets the operator_name of this QueryOperator.

        The name of the operator.

        :return: The operator_name of this QueryOperator.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this QueryOperator.

        The name of the operator.

        :param operator_name: The operator_name of this QueryOperator.
        :type operator_name: str
        """

        self._operator_name = operator_name

    @property
    def type(self):
        """Gets the type of this QueryOperator.

        The type of the operator.

        :return: The type of this QueryOperator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QueryOperator.

        The type of the operator.

        :param type: The type of this QueryOperator.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "INTEGER", "DOUBLE", "TIMESTAMP", "BOOLEAN", "ENUM", "DATE", "TEXT", "HTML"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
