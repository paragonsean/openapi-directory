# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_acl import ItemAcl
from openapi_server.models.item_content import ItemContent
from openapi_server.models.item_metadata import ItemMetadata
from openapi_server.models.item_status import ItemStatus
from openapi_server.models.item_structured_data import ItemStructuredData
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: ItemAcl=None, content: ItemContent=None, item_type: str=None, metadata: ItemMetadata=None, name: str=None, payload: str=None, queue: str=None, status: ItemStatus=None, structured_data: ItemStructuredData=None, version: str=None):
        """Item - a model defined in OpenAPI

        :param acl: The acl of this Item.
        :param content: The content of this Item.
        :param item_type: The item_type of this Item.
        :param metadata: The metadata of this Item.
        :param name: The name of this Item.
        :param payload: The payload of this Item.
        :param queue: The queue of this Item.
        :param status: The status of this Item.
        :param structured_data: The structured_data of this Item.
        :param version: The version of this Item.
        """
        self.openapi_types = {
            'acl': ItemAcl,
            'content': ItemContent,
            'item_type': str,
            'metadata': ItemMetadata,
            'name': str,
            'payload': str,
            'queue': str,
            'status': ItemStatus,
            'structured_data': ItemStructuredData,
            'version': str
        }

        self.attribute_map = {
            'acl': 'acl',
            'content': 'content',
            'item_type': 'itemType',
            'metadata': 'metadata',
            'name': 'name',
            'payload': 'payload',
            'queue': 'queue',
            'status': 'status',
            'structured_data': 'structuredData',
            'version': 'version'
        }

        self._acl = acl
        self._content = content
        self._item_type = item_type
        self._metadata = metadata
        self._name = name
        self._payload = payload
        self._queue = queue
        self._status = status
        self._structured_data = structured_data
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Item.


        :return: The acl of this Item.
        :rtype: ItemAcl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Item.


        :param acl: The acl of this Item.
        :type acl: ItemAcl
        """

        self._acl = acl

    @property
    def content(self):
        """Gets the content of this Item.


        :return: The content of this Item.
        :rtype: ItemContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Item.


        :param content: The content of this Item.
        :type content: ItemContent
        """

        self._content = content

    @property
    def item_type(self):
        """Gets the item_type of this Item.

        The type for this item.

        :return: The item_type of this Item.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this Item.

        The type for this item.

        :param item_type: The item_type of this Item.
        :type item_type: str
        """
        allowed_values = ["UNSPECIFIED", "CONTENT_ITEM", "CONTAINER_ITEM", "VIRTUAL_CONTAINER_ITEM"]  # noqa: E501
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def metadata(self):
        """Gets the metadata of this Item.


        :return: The metadata of this Item.
        :rtype: ItemMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Item.


        :param metadata: The metadata of this Item.
        :type metadata: ItemMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Item.

        The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.

        The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.

        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def payload(self):
        """Gets the payload of this Item.

        Additional state connector can store for this item. The maximum length is 10000 bytes.

        :return: The payload of this Item.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Item.

        Additional state connector can store for this item. The maximum length is 10000 bytes.

        :param payload: The payload of this Item.
        :type payload: str
        """

        self._payload = payload

    @property
    def queue(self):
        """Gets the queue of this Item.

        Queue this item belongs to. The maximum length is 100 characters.

        :return: The queue of this Item.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this Item.

        Queue this item belongs to. The maximum length is 100 characters.

        :param queue: The queue of this Item.
        :type queue: str
        """

        self._queue = queue

    @property
    def status(self):
        """Gets the status of this Item.


        :return: The status of this Item.
        :rtype: ItemStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Item.


        :param status: The status of this Item.
        :type status: ItemStatus
        """

        self._status = status

    @property
    def structured_data(self):
        """Gets the structured_data of this Item.


        :return: The structured_data of this Item.
        :rtype: ItemStructuredData
        """
        return self._structured_data

    @structured_data.setter
    def structured_data(self, structured_data):
        """Sets the structured_data of this Item.


        :param structured_data: The structured_data of this Item.
        :type structured_data: ItemStructuredData
        """

        self._structured_data = structured_data

    @property
    def version(self):
        """Gets the version of this Item.

        Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).

        :return: The version of this Item.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Item.

        Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).

        :param version: The version of this Item.
        :type version: str
        """

        self._version = version
