# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.debug_options import DebugOptions
from openapi_server import util


class PollItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_name: str=None, debug_options: DebugOptions=None, limit: int=None, queue: str=None, status_codes: List[str]=None):
        """PollItemsRequest - a model defined in OpenAPI

        :param connector_name: The connector_name of this PollItemsRequest.
        :param debug_options: The debug_options of this PollItemsRequest.
        :param limit: The limit of this PollItemsRequest.
        :param queue: The queue of this PollItemsRequest.
        :param status_codes: The status_codes of this PollItemsRequest.
        """
        self.openapi_types = {
            'connector_name': str,
            'debug_options': DebugOptions,
            'limit': int,
            'queue': str,
            'status_codes': List[str]
        }

        self.attribute_map = {
            'connector_name': 'connectorName',
            'debug_options': 'debugOptions',
            'limit': 'limit',
            'queue': 'queue',
            'status_codes': 'statusCodes'
        }

        self._connector_name = connector_name
        self._debug_options = debug_options
        self._limit = limit
        self._queue = queue
        self._status_codes = status_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollItemsRequest of this PollItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_name(self):
        """Gets the connector_name of this PollItemsRequest.

        The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}

        :return: The connector_name of this PollItemsRequest.
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this PollItemsRequest.

        The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}

        :param connector_name: The connector_name of this PollItemsRequest.
        :type connector_name: str
        """

        self._connector_name = connector_name

    @property
    def debug_options(self):
        """Gets the debug_options of this PollItemsRequest.


        :return: The debug_options of this PollItemsRequest.
        :rtype: DebugOptions
        """
        return self._debug_options

    @debug_options.setter
    def debug_options(self, debug_options):
        """Sets the debug_options of this PollItemsRequest.


        :param debug_options: The debug_options of this PollItemsRequest.
        :type debug_options: DebugOptions
        """

        self._debug_options = debug_options

    @property
    def limit(self):
        """Gets the limit of this PollItemsRequest.

        Maximum number of items to return. The maximum value is 100 and the default value is 20.

        :return: The limit of this PollItemsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PollItemsRequest.

        Maximum number of items to return. The maximum value is 100 and the default value is 20.

        :param limit: The limit of this PollItemsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def queue(self):
        """Gets the queue of this PollItemsRequest.

        Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.

        :return: The queue of this PollItemsRequest.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this PollItemsRequest.

        Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.

        :param queue: The queue of this PollItemsRequest.
        :type queue: str
        """

        self._queue = queue

    @property
    def status_codes(self):
        """Gets the status_codes of this PollItemsRequest.

        Limit the items polled to the ones with these statuses.

        :return: The status_codes of this PollItemsRequest.
        :rtype: List[str]
        """
        return self._status_codes

    @status_codes.setter
    def status_codes(self, status_codes):
        """Sets the status_codes of this PollItemsRequest.

        Limit the items polled to the ones with these statuses.

        :param status_codes: The status_codes of this PollItemsRequest.
        :type status_codes: List[str]
        """
        allowed_values = ["CODE_UNSPECIFIED", "ERROR", "MODIFIED", "NEW_ITEM", "ACCEPTED"]  # noqa: E501
        if not set(status_codes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status_codes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(status_codes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._status_codes = status_codes
