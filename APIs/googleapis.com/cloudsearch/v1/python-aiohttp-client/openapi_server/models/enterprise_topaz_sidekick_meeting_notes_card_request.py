# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_agenda_entry import EnterpriseTopazSidekickAgendaEntry
from openapi_server.models.enterprise_topaz_sidekick_meeting_notes_card_error import EnterpriseTopazSidekickMeetingNotesCardError
from openapi_server import util


class EnterpriseTopazSidekickMeetingNotesCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_create_for: List[str]=None, error: EnterpriseTopazSidekickMeetingNotesCardError=None, event: EnterpriseTopazSidekickAgendaEntry=None):
        """EnterpriseTopazSidekickMeetingNotesCardRequest - a model defined in OpenAPI

        :param can_create_for: The can_create_for of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :param error: The error of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :param event: The event of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        """
        self.openapi_types = {
            'can_create_for': List[str],
            'error': EnterpriseTopazSidekickMeetingNotesCardError,
            'event': EnterpriseTopazSidekickAgendaEntry
        }

        self.attribute_map = {
            'can_create_for': 'canCreateFor',
            'error': 'error',
            'event': 'event'
        }

        self._can_create_for = can_create_for
        self._error = error
        self._event = event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickMeetingNotesCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickMeetingNotesCardRequest of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_create_for(self):
        """Gets the can_create_for of this EnterpriseTopazSidekickMeetingNotesCardRequest.

        Who are the meeting notes created for.

        :return: The can_create_for of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :rtype: List[str]
        """
        return self._can_create_for

    @can_create_for.setter
    def can_create_for(self, can_create_for):
        """Sets the can_create_for of this EnterpriseTopazSidekickMeetingNotesCardRequest.

        Who are the meeting notes created for.

        :param can_create_for: The can_create_for of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :type can_create_for: List[str]
        """
        allowed_values = ["UNKNOWN", "MYSELF", "ALL_ATTENDEES"]  # noqa: E501
        if not set(can_create_for).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `can_create_for` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(can_create_for) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._can_create_for = can_create_for

    @property
    def error(self):
        """Gets the error of this EnterpriseTopazSidekickMeetingNotesCardRequest.


        :return: The error of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :rtype: EnterpriseTopazSidekickMeetingNotesCardError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EnterpriseTopazSidekickMeetingNotesCardRequest.


        :param error: The error of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :type error: EnterpriseTopazSidekickMeetingNotesCardError
        """

        self._error = error

    @property
    def event(self):
        """Gets the event of this EnterpriseTopazSidekickMeetingNotesCardRequest.


        :return: The event of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :rtype: EnterpriseTopazSidekickAgendaEntry
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EnterpriseTopazSidekickMeetingNotesCardRequest.


        :param event: The event of this EnterpriseTopazSidekickMeetingNotesCardRequest.
        :type event: EnterpriseTopazSidekickAgendaEntry
        """

        self._event = event
