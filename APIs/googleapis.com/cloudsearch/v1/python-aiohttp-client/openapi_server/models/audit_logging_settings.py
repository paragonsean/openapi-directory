# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditLoggingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_admin_read_actions: bool=None, log_data_read_actions: bool=None, log_data_write_actions: bool=None, project: str=None):
        """AuditLoggingSettings - a model defined in OpenAPI

        :param log_admin_read_actions: The log_admin_read_actions of this AuditLoggingSettings.
        :param log_data_read_actions: The log_data_read_actions of this AuditLoggingSettings.
        :param log_data_write_actions: The log_data_write_actions of this AuditLoggingSettings.
        :param project: The project of this AuditLoggingSettings.
        """
        self.openapi_types = {
            'log_admin_read_actions': bool,
            'log_data_read_actions': bool,
            'log_data_write_actions': bool,
            'project': str
        }

        self.attribute_map = {
            'log_admin_read_actions': 'logAdminReadActions',
            'log_data_read_actions': 'logDataReadActions',
            'log_data_write_actions': 'logDataWriteActions',
            'project': 'project'
        }

        self._log_admin_read_actions = log_admin_read_actions
        self._log_data_read_actions = log_data_read_actions
        self._log_data_write_actions = log_data_write_actions
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditLoggingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditLoggingSettings of this AuditLoggingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_admin_read_actions(self):
        """Gets the log_admin_read_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.

        :return: The log_admin_read_actions of this AuditLoggingSettings.
        :rtype: bool
        """
        return self._log_admin_read_actions

    @log_admin_read_actions.setter
    def log_admin_read_actions(self, log_admin_read_actions):
        """Sets the log_admin_read_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc.

        :param log_admin_read_actions: The log_admin_read_actions of this AuditLoggingSettings.
        :type log_admin_read_actions: bool
        """

        self._log_admin_read_actions = log_admin_read_actions

    @property
    def log_data_read_actions(self):
        """Gets the log_data_read_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc.

        :return: The log_data_read_actions of this AuditLoggingSettings.
        :rtype: bool
        """
        return self._log_data_read_actions

    @log_data_read_actions.setter
    def log_data_read_actions(self, log_data_read_actions):
        """Sets the log_data_read_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc.

        :param log_data_read_actions: The log_data_read_actions of this AuditLoggingSettings.
        :type log_data_read_actions: bool
        """

        self._log_data_read_actions = log_data_read_actions

    @property
    def log_data_write_actions(self):
        """Gets the log_data_write_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.

        :return: The log_data_write_actions of this AuditLoggingSettings.
        :rtype: bool
        """
        return self._log_data_write_actions

    @log_data_write_actions.setter
    def log_data_write_actions(self, log_data_write_actions):
        """Sets the log_data_write_actions of this AuditLoggingSettings.

        Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc.

        :param log_data_write_actions: The log_data_write_actions of this AuditLoggingSettings.
        :type log_data_write_actions: bool
        """

        self._log_data_write_actions = log_data_write_actions

    @property
    def project(self):
        """Gets the project of this AuditLoggingSettings.

        The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}

        :return: The project of this AuditLoggingSettings.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AuditLoggingSettings.

        The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}

        :param project: The project of this AuditLoggingSettings.
        :type project: str
        """

        self._project = project
