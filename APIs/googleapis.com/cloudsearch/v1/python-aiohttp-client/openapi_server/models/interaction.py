# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal import Principal
from openapi_server import util


class Interaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interaction_time: str=None, principal: Principal=None, type: str=None):
        """Interaction - a model defined in OpenAPI

        :param interaction_time: The interaction_time of this Interaction.
        :param principal: The principal of this Interaction.
        :param type: The type of this Interaction.
        """
        self.openapi_types = {
            'interaction_time': str,
            'principal': Principal,
            'type': str
        }

        self.attribute_map = {
            'interaction_time': 'interactionTime',
            'principal': 'principal',
            'type': 'type'
        }

        self._interaction_time = interaction_time
        self._principal = principal
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interaction of this Interaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_time(self):
        """Gets the interaction_time of this Interaction.

        The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.

        :return: The interaction_time of this Interaction.
        :rtype: str
        """
        return self._interaction_time

    @interaction_time.setter
    def interaction_time(self, interaction_time):
        """Sets the interaction_time of this Interaction.

        The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.

        :param interaction_time: The interaction_time of this Interaction.
        :type interaction_time: str
        """

        self._interaction_time = interaction_time

    @property
    def principal(self):
        """Gets the principal of this Interaction.


        :return: The principal of this Interaction.
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Interaction.


        :param principal: The principal of this Interaction.
        :type principal: Principal
        """

        self._principal = principal

    @property
    def type(self):
        """Gets the type of this Interaction.


        :return: The type of this Interaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interaction.


        :param type: The type of this Interaction.
        :type type: str
        """
        allowed_values = ["UNSPECIFIED", "VIEW", "EDIT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
