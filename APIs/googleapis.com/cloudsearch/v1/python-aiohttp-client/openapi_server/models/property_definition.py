# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boolean_property_options import BooleanPropertyOptions
from openapi_server.models.date_property_options import DatePropertyOptions
from openapi_server.models.double_property_options import DoublePropertyOptions
from openapi_server.models.enum_property_options import EnumPropertyOptions
from openapi_server.models.html_property_options import HtmlPropertyOptions
from openapi_server.models.integer_property_options import IntegerPropertyOptions
from openapi_server.models.object_property_options import ObjectPropertyOptions
from openapi_server.models.property_display_options import PropertyDisplayOptions
from openapi_server.models.text_property_options import TextPropertyOptions
from openapi_server.models.timestamp_property_options import TimestampPropertyOptions
from openapi_server import util


class PropertyDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean_property_options: BooleanPropertyOptions=None, date_property_options: DatePropertyOptions=None, display_options: PropertyDisplayOptions=None, double_property_options: DoublePropertyOptions=None, enum_property_options: EnumPropertyOptions=None, html_property_options: HtmlPropertyOptions=None, integer_property_options: IntegerPropertyOptions=None, is_facetable: bool=None, is_repeatable: bool=None, is_returnable: bool=None, is_sortable: bool=None, is_suggestable: bool=None, is_wildcard_searchable: bool=None, name: str=None, object_property_options: ObjectPropertyOptions=None, text_property_options: TextPropertyOptions=None, timestamp_property_options: TimestampPropertyOptions=None):
        """PropertyDefinition - a model defined in OpenAPI

        :param boolean_property_options: The boolean_property_options of this PropertyDefinition.
        :param date_property_options: The date_property_options of this PropertyDefinition.
        :param display_options: The display_options of this PropertyDefinition.
        :param double_property_options: The double_property_options of this PropertyDefinition.
        :param enum_property_options: The enum_property_options of this PropertyDefinition.
        :param html_property_options: The html_property_options of this PropertyDefinition.
        :param integer_property_options: The integer_property_options of this PropertyDefinition.
        :param is_facetable: The is_facetable of this PropertyDefinition.
        :param is_repeatable: The is_repeatable of this PropertyDefinition.
        :param is_returnable: The is_returnable of this PropertyDefinition.
        :param is_sortable: The is_sortable of this PropertyDefinition.
        :param is_suggestable: The is_suggestable of this PropertyDefinition.
        :param is_wildcard_searchable: The is_wildcard_searchable of this PropertyDefinition.
        :param name: The name of this PropertyDefinition.
        :param object_property_options: The object_property_options of this PropertyDefinition.
        :param text_property_options: The text_property_options of this PropertyDefinition.
        :param timestamp_property_options: The timestamp_property_options of this PropertyDefinition.
        """
        self.openapi_types = {
            'boolean_property_options': BooleanPropertyOptions,
            'date_property_options': DatePropertyOptions,
            'display_options': PropertyDisplayOptions,
            'double_property_options': DoublePropertyOptions,
            'enum_property_options': EnumPropertyOptions,
            'html_property_options': HtmlPropertyOptions,
            'integer_property_options': IntegerPropertyOptions,
            'is_facetable': bool,
            'is_repeatable': bool,
            'is_returnable': bool,
            'is_sortable': bool,
            'is_suggestable': bool,
            'is_wildcard_searchable': bool,
            'name': str,
            'object_property_options': ObjectPropertyOptions,
            'text_property_options': TextPropertyOptions,
            'timestamp_property_options': TimestampPropertyOptions
        }

        self.attribute_map = {
            'boolean_property_options': 'booleanPropertyOptions',
            'date_property_options': 'datePropertyOptions',
            'display_options': 'displayOptions',
            'double_property_options': 'doublePropertyOptions',
            'enum_property_options': 'enumPropertyOptions',
            'html_property_options': 'htmlPropertyOptions',
            'integer_property_options': 'integerPropertyOptions',
            'is_facetable': 'isFacetable',
            'is_repeatable': 'isRepeatable',
            'is_returnable': 'isReturnable',
            'is_sortable': 'isSortable',
            'is_suggestable': 'isSuggestable',
            'is_wildcard_searchable': 'isWildcardSearchable',
            'name': 'name',
            'object_property_options': 'objectPropertyOptions',
            'text_property_options': 'textPropertyOptions',
            'timestamp_property_options': 'timestampPropertyOptions'
        }

        self._boolean_property_options = boolean_property_options
        self._date_property_options = date_property_options
        self._display_options = display_options
        self._double_property_options = double_property_options
        self._enum_property_options = enum_property_options
        self._html_property_options = html_property_options
        self._integer_property_options = integer_property_options
        self._is_facetable = is_facetable
        self._is_repeatable = is_repeatable
        self._is_returnable = is_returnable
        self._is_sortable = is_sortable
        self._is_suggestable = is_suggestable
        self._is_wildcard_searchable = is_wildcard_searchable
        self._name = name
        self._object_property_options = object_property_options
        self._text_property_options = text_property_options
        self._timestamp_property_options = timestamp_property_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyDefinition of this PropertyDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean_property_options(self):
        """Gets the boolean_property_options of this PropertyDefinition.


        :return: The boolean_property_options of this PropertyDefinition.
        :rtype: BooleanPropertyOptions
        """
        return self._boolean_property_options

    @boolean_property_options.setter
    def boolean_property_options(self, boolean_property_options):
        """Sets the boolean_property_options of this PropertyDefinition.


        :param boolean_property_options: The boolean_property_options of this PropertyDefinition.
        :type boolean_property_options: BooleanPropertyOptions
        """

        self._boolean_property_options = boolean_property_options

    @property
    def date_property_options(self):
        """Gets the date_property_options of this PropertyDefinition.


        :return: The date_property_options of this PropertyDefinition.
        :rtype: DatePropertyOptions
        """
        return self._date_property_options

    @date_property_options.setter
    def date_property_options(self, date_property_options):
        """Sets the date_property_options of this PropertyDefinition.


        :param date_property_options: The date_property_options of this PropertyDefinition.
        :type date_property_options: DatePropertyOptions
        """

        self._date_property_options = date_property_options

    @property
    def display_options(self):
        """Gets the display_options of this PropertyDefinition.


        :return: The display_options of this PropertyDefinition.
        :rtype: PropertyDisplayOptions
        """
        return self._display_options

    @display_options.setter
    def display_options(self, display_options):
        """Sets the display_options of this PropertyDefinition.


        :param display_options: The display_options of this PropertyDefinition.
        :type display_options: PropertyDisplayOptions
        """

        self._display_options = display_options

    @property
    def double_property_options(self):
        """Gets the double_property_options of this PropertyDefinition.


        :return: The double_property_options of this PropertyDefinition.
        :rtype: DoublePropertyOptions
        """
        return self._double_property_options

    @double_property_options.setter
    def double_property_options(self, double_property_options):
        """Sets the double_property_options of this PropertyDefinition.


        :param double_property_options: The double_property_options of this PropertyDefinition.
        :type double_property_options: DoublePropertyOptions
        """

        self._double_property_options = double_property_options

    @property
    def enum_property_options(self):
        """Gets the enum_property_options of this PropertyDefinition.


        :return: The enum_property_options of this PropertyDefinition.
        :rtype: EnumPropertyOptions
        """
        return self._enum_property_options

    @enum_property_options.setter
    def enum_property_options(self, enum_property_options):
        """Sets the enum_property_options of this PropertyDefinition.


        :param enum_property_options: The enum_property_options of this PropertyDefinition.
        :type enum_property_options: EnumPropertyOptions
        """

        self._enum_property_options = enum_property_options

    @property
    def html_property_options(self):
        """Gets the html_property_options of this PropertyDefinition.


        :return: The html_property_options of this PropertyDefinition.
        :rtype: HtmlPropertyOptions
        """
        return self._html_property_options

    @html_property_options.setter
    def html_property_options(self, html_property_options):
        """Sets the html_property_options of this PropertyDefinition.


        :param html_property_options: The html_property_options of this PropertyDefinition.
        :type html_property_options: HtmlPropertyOptions
        """

        self._html_property_options = html_property_options

    @property
    def integer_property_options(self):
        """Gets the integer_property_options of this PropertyDefinition.


        :return: The integer_property_options of this PropertyDefinition.
        :rtype: IntegerPropertyOptions
        """
        return self._integer_property_options

    @integer_property_options.setter
    def integer_property_options(self, integer_property_options):
        """Sets the integer_property_options of this PropertyDefinition.


        :param integer_property_options: The integer_property_options of this PropertyDefinition.
        :type integer_property_options: IntegerPropertyOptions
        """

        self._integer_property_options = integer_property_options

    @property
    def is_facetable(self):
        """Gets the is_facetable of this PropertyDefinition.

        Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.

        :return: The is_facetable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_facetable

    @is_facetable.setter
    def is_facetable(self, is_facetable):
        """Sets the is_facetable of this PropertyDefinition.

        Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, enum, integer, and text properties.

        :param is_facetable: The is_facetable of this PropertyDefinition.
        :type is_facetable: bool
        """

        self._is_facetable = is_facetable

    @property
    def is_repeatable(self):
        """Gets the is_repeatable of this PropertyDefinition.

        Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.

        :return: The is_repeatable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_repeatable

    @is_repeatable.setter
    def is_repeatable(self, is_repeatable):
        """Sets the is_repeatable of this PropertyDefinition.

        Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.

        :param is_repeatable: The is_repeatable of this PropertyDefinition.
        :type is_repeatable: bool
        """

        self._is_repeatable = is_repeatable

    @property
    def is_returnable(self):
        """Gets the is_returnable of this PropertyDefinition.

        Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.

        :return: The is_returnable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_returnable

    @is_returnable.setter
    def is_returnable(self, is_returnable):
        """Sets the is_returnable of this PropertyDefinition.

        Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true* here only if the field is needed for search results. Cannot be true for properties whose type is an object.

        :param is_returnable: The is_returnable of this PropertyDefinition.
        :type is_returnable: bool
        """

        self._is_returnable = is_returnable

    @property
    def is_sortable(self):
        """Gets the is_sortable of this PropertyDefinition.

        Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.

        :return: The is_sortable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_sortable

    @is_sortable.setter
    def is_sortable(self, is_sortable):
        """Sets the is_sortable of this PropertyDefinition.

        Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for boolean, date, double, integer, and timestamp properties.

        :param is_sortable: The is_sortable of this PropertyDefinition.
        :type is_sortable: bool
        """

        self._is_sortable = is_sortable

    @property
    def is_suggestable(self):
        """Gets the is_suggestable of this PropertyDefinition.

        Indicates that the property can be used for generating query suggestions.

        :return: The is_suggestable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_suggestable

    @is_suggestable.setter
    def is_suggestable(self, is_suggestable):
        """Sets the is_suggestable of this PropertyDefinition.

        Indicates that the property can be used for generating query suggestions.

        :param is_suggestable: The is_suggestable of this PropertyDefinition.
        :type is_suggestable: bool
        """

        self._is_suggestable = is_suggestable

    @property
    def is_wildcard_searchable(self):
        """Gets the is_wildcard_searchable of this PropertyDefinition.

        Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)

        :return: The is_wildcard_searchable of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_wildcard_searchable

    @is_wildcard_searchable.setter
    def is_wildcard_searchable(self, is_wildcard_searchable):
        """Sets the is_wildcard_searchable of this PropertyDefinition.

        Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum of 5 properties can be marked as is_wildcard_searchable. For more details, see [Define object properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)

        :param is_wildcard_searchable: The is_wildcard_searchable of this PropertyDefinition.
        :type is_wildcard_searchable: bool
        """

        self._is_wildcard_searchable = is_wildcard_searchable

    @property
    def name(self):
        """Gets the name of this PropertyDefinition.

        The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.

        :return: The name of this PropertyDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyDefinition.

        The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.

        :param name: The name of this PropertyDefinition.
        :type name: str
        """

        self._name = name

    @property
    def object_property_options(self):
        """Gets the object_property_options of this PropertyDefinition.


        :return: The object_property_options of this PropertyDefinition.
        :rtype: ObjectPropertyOptions
        """
        return self._object_property_options

    @object_property_options.setter
    def object_property_options(self, object_property_options):
        """Sets the object_property_options of this PropertyDefinition.


        :param object_property_options: The object_property_options of this PropertyDefinition.
        :type object_property_options: ObjectPropertyOptions
        """

        self._object_property_options = object_property_options

    @property
    def text_property_options(self):
        """Gets the text_property_options of this PropertyDefinition.


        :return: The text_property_options of this PropertyDefinition.
        :rtype: TextPropertyOptions
        """
        return self._text_property_options

    @text_property_options.setter
    def text_property_options(self, text_property_options):
        """Sets the text_property_options of this PropertyDefinition.


        :param text_property_options: The text_property_options of this PropertyDefinition.
        :type text_property_options: TextPropertyOptions
        """

        self._text_property_options = text_property_options

    @property
    def timestamp_property_options(self):
        """Gets the timestamp_property_options of this PropertyDefinition.


        :return: The timestamp_property_options of this PropertyDefinition.
        :rtype: TimestampPropertyOptions
        """
        return self._timestamp_property_options

    @timestamp_property_options.setter
    def timestamp_property_options(self, timestamp_property_options):
        """Sets the timestamp_property_options of this PropertyDefinition.


        :param timestamp_property_options: The timestamp_property_options of this PropertyDefinition.
        :type timestamp_property_options: TimestampPropertyOptions
        """

        self._timestamp_property_options = timestamp_property_options
