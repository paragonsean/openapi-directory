# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.integer_faceting_options import IntegerFacetingOptions
from openapi_server.models.integer_operator_options import IntegerOperatorOptions
from openapi_server import util


class IntegerPropertyOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integer_faceting_options: IntegerFacetingOptions=None, maximum_value: str=None, minimum_value: str=None, operator_options: IntegerOperatorOptions=None, ordered_ranking: str=None):
        """IntegerPropertyOptions - a model defined in OpenAPI

        :param integer_faceting_options: The integer_faceting_options of this IntegerPropertyOptions.
        :param maximum_value: The maximum_value of this IntegerPropertyOptions.
        :param minimum_value: The minimum_value of this IntegerPropertyOptions.
        :param operator_options: The operator_options of this IntegerPropertyOptions.
        :param ordered_ranking: The ordered_ranking of this IntegerPropertyOptions.
        """
        self.openapi_types = {
            'integer_faceting_options': IntegerFacetingOptions,
            'maximum_value': str,
            'minimum_value': str,
            'operator_options': IntegerOperatorOptions,
            'ordered_ranking': str
        }

        self.attribute_map = {
            'integer_faceting_options': 'integerFacetingOptions',
            'maximum_value': 'maximumValue',
            'minimum_value': 'minimumValue',
            'operator_options': 'operatorOptions',
            'ordered_ranking': 'orderedRanking'
        }

        self._integer_faceting_options = integer_faceting_options
        self._maximum_value = maximum_value
        self._minimum_value = minimum_value
        self._operator_options = operator_options
        self._ordered_ranking = ordered_ranking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegerPropertyOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegerPropertyOptions of this IntegerPropertyOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integer_faceting_options(self):
        """Gets the integer_faceting_options of this IntegerPropertyOptions.


        :return: The integer_faceting_options of this IntegerPropertyOptions.
        :rtype: IntegerFacetingOptions
        """
        return self._integer_faceting_options

    @integer_faceting_options.setter
    def integer_faceting_options(self, integer_faceting_options):
        """Sets the integer_faceting_options of this IntegerPropertyOptions.


        :param integer_faceting_options: The integer_faceting_options of this IntegerPropertyOptions.
        :type integer_faceting_options: IntegerFacetingOptions
        """

        self._integer_faceting_options = integer_faceting_options

    @property
    def maximum_value(self):
        """Gets the maximum_value of this IntegerPropertyOptions.

        The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.

        :return: The maximum_value of this IntegerPropertyOptions.
        :rtype: str
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """Sets the maximum_value of this IntegerPropertyOptions.

        The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.

        :param maximum_value: The maximum_value of this IntegerPropertyOptions.
        :type maximum_value: str
        """

        self._maximum_value = maximum_value

    @property
    def minimum_value(self):
        """Gets the minimum_value of this IntegerPropertyOptions.

        The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.

        :return: The minimum_value of this IntegerPropertyOptions.
        :rtype: str
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """Sets the minimum_value of this IntegerPropertyOptions.

        The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than the minimum are accepted and ranked with the same weight as items indexed with the minimum value.

        :param minimum_value: The minimum_value of this IntegerPropertyOptions.
        :type minimum_value: str
        """

        self._minimum_value = minimum_value

    @property
    def operator_options(self):
        """Gets the operator_options of this IntegerPropertyOptions.


        :return: The operator_options of this IntegerPropertyOptions.
        :rtype: IntegerOperatorOptions
        """
        return self._operator_options

    @operator_options.setter
    def operator_options(self, operator_options):
        """Sets the operator_options of this IntegerPropertyOptions.


        :param operator_options: The operator_options of this IntegerPropertyOptions.
        :type operator_options: IntegerOperatorOptions
        """

        self._operator_options = operator_options

    @property
    def ordered_ranking(self):
        """Gets the ordered_ranking of this IntegerPropertyOptions.

        Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.

        :return: The ordered_ranking of this IntegerPropertyOptions.
        :rtype: str
        """
        return self._ordered_ranking

    @ordered_ranking.setter
    def ordered_ranking(self, ordered_ranking):
        """Sets the ordered_ranking of this IntegerPropertyOptions.

        Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false.

        :param ordered_ranking: The ordered_ranking of this IntegerPropertyOptions.
        :type ordered_ranking: str
        """
        allowed_values = ["NO_ORDER", "ASCENDING", "DESCENDING"]  # noqa: E501
        if ordered_ranking not in allowed_values:
            raise ValueError(
                "Invalid value for `ordered_ranking` ({0}), must be one of {1}"
                .format(ordered_ranking, allowed_values)
            )

        self._ordered_ranking = ordered_ranking
