# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content import Content
from openapi_server.models.context import Context
from openapi_server import util


class ThirdPartyGenericCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: str=None, category: str=None, content: Content=None, context: Context=None, is_dismissible: bool=None, priority: int=None):
        """ThirdPartyGenericCard - a model defined in OpenAPI

        :param card_id: The card_id of this ThirdPartyGenericCard.
        :param category: The category of this ThirdPartyGenericCard.
        :param content: The content of this ThirdPartyGenericCard.
        :param context: The context of this ThirdPartyGenericCard.
        :param is_dismissible: The is_dismissible of this ThirdPartyGenericCard.
        :param priority: The priority of this ThirdPartyGenericCard.
        """
        self.openapi_types = {
            'card_id': str,
            'category': str,
            'content': Content,
            'context': Context,
            'is_dismissible': bool,
            'priority': int
        }

        self.attribute_map = {
            'card_id': 'cardId',
            'category': 'category',
            'content': 'content',
            'context': 'context',
            'is_dismissible': 'isDismissible',
            'priority': 'priority'
        }

        self._card_id = card_id
        self._category = category
        self._content = content
        self._context = context
        self._is_dismissible = is_dismissible
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyGenericCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyGenericCard of this ThirdPartyGenericCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this ThirdPartyGenericCard.

        Unique identifier for the card.

        :return: The card_id of this ThirdPartyGenericCard.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this ThirdPartyGenericCard.

        Unique identifier for the card.

        :param card_id: The card_id of this ThirdPartyGenericCard.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def category(self):
        """Gets the category of this ThirdPartyGenericCard.

        Category that the card belongs to.

        :return: The category of this ThirdPartyGenericCard.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ThirdPartyGenericCard.

        Category that the card belongs to.

        :param category: The category of this ThirdPartyGenericCard.
        :type category: str
        """

        self._category = category

    @property
    def content(self):
        """Gets the content of this ThirdPartyGenericCard.


        :return: The content of this ThirdPartyGenericCard.
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ThirdPartyGenericCard.


        :param content: The content of this ThirdPartyGenericCard.
        :type content: Content
        """

        self._content = content

    @property
    def context(self):
        """Gets the context of this ThirdPartyGenericCard.


        :return: The context of this ThirdPartyGenericCard.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ThirdPartyGenericCard.


        :param context: The context of this ThirdPartyGenericCard.
        :type context: Context
        """

        self._context = context

    @property
    def is_dismissible(self):
        """Gets the is_dismissible of this ThirdPartyGenericCard.

        Whether the card can be dismissed.

        :return: The is_dismissible of this ThirdPartyGenericCard.
        :rtype: bool
        """
        return self._is_dismissible

    @is_dismissible.setter
    def is_dismissible(self, is_dismissible):
        """Sets the is_dismissible of this ThirdPartyGenericCard.

        Whether the card can be dismissed.

        :param is_dismissible: The is_dismissible of this ThirdPartyGenericCard.
        :type is_dismissible: bool
        """

        self._is_dismissible = is_dismissible

    @property
    def priority(self):
        """Gets the priority of this ThirdPartyGenericCard.

        Priority of the card, where 0 is the highest priority.

        :return: The priority of this ThirdPartyGenericCard.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ThirdPartyGenericCard.

        Priority of the card, where 0 is the highest priority.

        :param priority: The priority of this ThirdPartyGenericCard.
        :type priority: int
        """

        self._priority = priority
