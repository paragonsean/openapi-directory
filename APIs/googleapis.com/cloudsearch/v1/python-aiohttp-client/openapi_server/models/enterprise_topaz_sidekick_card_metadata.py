# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_nlp_metadata import EnterpriseTopazSidekickNlpMetadata
from openapi_server.models.enterprise_topaz_sidekick_ranking_params import EnterpriseTopazSidekickRankingParams
from openapi_server import util


class EnterpriseTopazSidekickCardMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_category: str=None, card_id: str=None, chronology: str=None, debug_info: str=None, nlp_metadata: EnterpriseTopazSidekickNlpMetadata=None, ranking_params: EnterpriseTopazSidekickRankingParams=None, render_mode: str=None):
        """EnterpriseTopazSidekickCardMetadata - a model defined in OpenAPI

        :param card_category: The card_category of this EnterpriseTopazSidekickCardMetadata.
        :param card_id: The card_id of this EnterpriseTopazSidekickCardMetadata.
        :param chronology: The chronology of this EnterpriseTopazSidekickCardMetadata.
        :param debug_info: The debug_info of this EnterpriseTopazSidekickCardMetadata.
        :param nlp_metadata: The nlp_metadata of this EnterpriseTopazSidekickCardMetadata.
        :param ranking_params: The ranking_params of this EnterpriseTopazSidekickCardMetadata.
        :param render_mode: The render_mode of this EnterpriseTopazSidekickCardMetadata.
        """
        self.openapi_types = {
            'card_category': str,
            'card_id': str,
            'chronology': str,
            'debug_info': str,
            'nlp_metadata': EnterpriseTopazSidekickNlpMetadata,
            'ranking_params': EnterpriseTopazSidekickRankingParams,
            'render_mode': str
        }

        self.attribute_map = {
            'card_category': 'cardCategory',
            'card_id': 'cardId',
            'chronology': 'chronology',
            'debug_info': 'debugInfo',
            'nlp_metadata': 'nlpMetadata',
            'ranking_params': 'rankingParams',
            'render_mode': 'renderMode'
        }

        self._card_category = card_category
        self._card_id = card_id
        self._chronology = chronology
        self._debug_info = debug_info
        self._nlp_metadata = nlp_metadata
        self._ranking_params = ranking_params
        self._render_mode = render_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickCardMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickCardMetadata of this EnterpriseTopazSidekickCardMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_category(self):
        """Gets the card_category of this EnterpriseTopazSidekickCardMetadata.

        Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.

        :return: The card_category of this EnterpriseTopazSidekickCardMetadata.
        :rtype: str
        """
        return self._card_category

    @card_category.setter
    def card_category(self, card_category):
        """Sets the card_category of this EnterpriseTopazSidekickCardMetadata.

        Declares a preference for how this card should be packed in MSCR. All cards in a response must correspond to a single category. As a result, cards may be dropped from the response if this field is set. Any card that does not match the category of the card with the highest priority in the response will be dropped.

        :param card_category: The card_category of this EnterpriseTopazSidekickCardMetadata.
        :type card_category: str
        """
        allowed_values = ["DEFAULT", "ANSWER", "KNOWLEDGE", "HOMEPAGE"]  # noqa: E501
        if card_category not in allowed_values:
            raise ValueError(
                "Invalid value for `card_category` ({0}), must be one of {1}"
                .format(card_category, allowed_values)
            )

        self._card_category = card_category

    @property
    def card_id(self):
        """Gets the card_id of this EnterpriseTopazSidekickCardMetadata.

        An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.

        :return: The card_id of this EnterpriseTopazSidekickCardMetadata.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this EnterpriseTopazSidekickCardMetadata.

        An ID to identify the card and match actions to it. Be thoughtful of new card IDs since actions will be associated to that ID. E.g., if two card IDs collide, the system will think that the actions have been applied to the same card. Similarly, if EAS can return multiple cards of the same type (e.g., Meetings), ensure that the card_id identifies a given instance of the card so that, e.g., dismissals only affect the dismissed card as opposed to affecting all meeting cards.

        :param card_id: The card_id of this EnterpriseTopazSidekickCardMetadata.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def chronology(self):
        """Gets the chronology of this EnterpriseTopazSidekickCardMetadata.

        Chronology.

        :return: The chronology of this EnterpriseTopazSidekickCardMetadata.
        :rtype: str
        """
        return self._chronology

    @chronology.setter
    def chronology(self, chronology):
        """Sets the chronology of this EnterpriseTopazSidekickCardMetadata.

        Chronology.

        :param chronology: The chronology of this EnterpriseTopazSidekickCardMetadata.
        :type chronology: str
        """
        allowed_values = ["UNKNOWN", "PAST", "RECENTLY_PAST", "PRESENT", "NEAR_FUTURE", "FUTURE"]  # noqa: E501
        if chronology not in allowed_values:
            raise ValueError(
                "Invalid value for `chronology` ({0}), must be one of {1}"
                .format(chronology, allowed_values)
            )

        self._chronology = chronology

    @property
    def debug_info(self):
        """Gets the debug_info of this EnterpriseTopazSidekickCardMetadata.

        Debug info (only reported if request's debug_level > 0).

        :return: The debug_info of this EnterpriseTopazSidekickCardMetadata.
        :rtype: str
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this EnterpriseTopazSidekickCardMetadata.

        Debug info (only reported if request's debug_level > 0).

        :param debug_info: The debug_info of this EnterpriseTopazSidekickCardMetadata.
        :type debug_info: str
        """

        self._debug_info = debug_info

    @property
    def nlp_metadata(self):
        """Gets the nlp_metadata of this EnterpriseTopazSidekickCardMetadata.


        :return: The nlp_metadata of this EnterpriseTopazSidekickCardMetadata.
        :rtype: EnterpriseTopazSidekickNlpMetadata
        """
        return self._nlp_metadata

    @nlp_metadata.setter
    def nlp_metadata(self, nlp_metadata):
        """Sets the nlp_metadata of this EnterpriseTopazSidekickCardMetadata.


        :param nlp_metadata: The nlp_metadata of this EnterpriseTopazSidekickCardMetadata.
        :type nlp_metadata: EnterpriseTopazSidekickNlpMetadata
        """

        self._nlp_metadata = nlp_metadata

    @property
    def ranking_params(self):
        """Gets the ranking_params of this EnterpriseTopazSidekickCardMetadata.


        :return: The ranking_params of this EnterpriseTopazSidekickCardMetadata.
        :rtype: EnterpriseTopazSidekickRankingParams
        """
        return self._ranking_params

    @ranking_params.setter
    def ranking_params(self, ranking_params):
        """Sets the ranking_params of this EnterpriseTopazSidekickCardMetadata.


        :param ranking_params: The ranking_params of this EnterpriseTopazSidekickCardMetadata.
        :type ranking_params: EnterpriseTopazSidekickRankingParams
        """

        self._ranking_params = ranking_params

    @property
    def render_mode(self):
        """Gets the render_mode of this EnterpriseTopazSidekickCardMetadata.

        Render mode.

        :return: The render_mode of this EnterpriseTopazSidekickCardMetadata.
        :rtype: str
        """
        return self._render_mode

    @render_mode.setter
    def render_mode(self, render_mode):
        """Sets the render_mode of this EnterpriseTopazSidekickCardMetadata.

        Render mode.

        :param render_mode: The render_mode of this EnterpriseTopazSidekickCardMetadata.
        :type render_mode: str
        """
        allowed_values = ["UNKNOWN_RENDER", "COLLAPSED", "EXPANDED"]  # noqa: E501
        if render_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `render_mode` ({0}), must be one of {1}"
                .format(render_mode, allowed_values)
            )

        self._render_mode = render_mode
