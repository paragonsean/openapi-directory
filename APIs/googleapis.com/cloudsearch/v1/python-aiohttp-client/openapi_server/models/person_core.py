# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_frontend_teams_link import EnterpriseTopazFrontendTeamsLink
from openapi_server.models.enterprise_topaz_frontend_teams_person_core_phone_number import EnterpriseTopazFrontendTeamsPersonCorePhoneNumber
from openapi_server.models.map_info import MapInfo
from openapi_server.models.model_date import ModelDate
from openapi_server.models.safe_url_proto import SafeUrlProto
from openapi_server import util


class PersonCore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_me_as: str=None, admin_to: List[PersonCore]=None, admins: List[PersonCore]=None, availability_status: str=None, birthday: ModelDate=None, calendar_url: SafeUrlProto=None, chat_url: SafeUrlProto=None, cost_center: str=None, department: str=None, direct_reports: List[PersonCore]=None, dotted_line_managers: List[PersonCore]=None, dotted_line_reports: List[PersonCore]=None, emails: List[str]=None, employee_id: str=None, fingerprint: str=None, fte_permille: str=None, geo_location: MapInfo=None, gmail_url: str=None, job_title: str=None, keyword_types: List[str]=None, keywords: Dict[str, str]=None, links: List[EnterpriseTopazFrontendTeamsLink]=None, location: str=None, managers: List[PersonCore]=None, mission: str=None, name: str=None, office_location: str=None, person_id: str=None, phone_numbers: List[EnterpriseTopazFrontendTeamsPersonCorePhoneNumber]=None, photo_url: SafeUrlProto=None, postal_address: str=None, total_direct_reports_count: int=None, total_dlr_count: int=None, total_fte_count: str=None, username: str=None, waldo_come_back_time: str=None):
        """PersonCore - a model defined in OpenAPI

        :param address_me_as: The address_me_as of this PersonCore.
        :param admin_to: The admin_to of this PersonCore.
        :param admins: The admins of this PersonCore.
        :param availability_status: The availability_status of this PersonCore.
        :param birthday: The birthday of this PersonCore.
        :param calendar_url: The calendar_url of this PersonCore.
        :param chat_url: The chat_url of this PersonCore.
        :param cost_center: The cost_center of this PersonCore.
        :param department: The department of this PersonCore.
        :param direct_reports: The direct_reports of this PersonCore.
        :param dotted_line_managers: The dotted_line_managers of this PersonCore.
        :param dotted_line_reports: The dotted_line_reports of this PersonCore.
        :param emails: The emails of this PersonCore.
        :param employee_id: The employee_id of this PersonCore.
        :param fingerprint: The fingerprint of this PersonCore.
        :param fte_permille: The fte_permille of this PersonCore.
        :param geo_location: The geo_location of this PersonCore.
        :param gmail_url: The gmail_url of this PersonCore.
        :param job_title: The job_title of this PersonCore.
        :param keyword_types: The keyword_types of this PersonCore.
        :param keywords: The keywords of this PersonCore.
        :param links: The links of this PersonCore.
        :param location: The location of this PersonCore.
        :param managers: The managers of this PersonCore.
        :param mission: The mission of this PersonCore.
        :param name: The name of this PersonCore.
        :param office_location: The office_location of this PersonCore.
        :param person_id: The person_id of this PersonCore.
        :param phone_numbers: The phone_numbers of this PersonCore.
        :param photo_url: The photo_url of this PersonCore.
        :param postal_address: The postal_address of this PersonCore.
        :param total_direct_reports_count: The total_direct_reports_count of this PersonCore.
        :param total_dlr_count: The total_dlr_count of this PersonCore.
        :param total_fte_count: The total_fte_count of this PersonCore.
        :param username: The username of this PersonCore.
        :param waldo_come_back_time: The waldo_come_back_time of this PersonCore.
        """
        self.openapi_types = {
            'address_me_as': str,
            'admin_to': List[PersonCore],
            'admins': List[PersonCore],
            'availability_status': str,
            'birthday': ModelDate,
            'calendar_url': SafeUrlProto,
            'chat_url': SafeUrlProto,
            'cost_center': str,
            'department': str,
            'direct_reports': List[PersonCore],
            'dotted_line_managers': List[PersonCore],
            'dotted_line_reports': List[PersonCore],
            'emails': List[str],
            'employee_id': str,
            'fingerprint': str,
            'fte_permille': str,
            'geo_location': MapInfo,
            'gmail_url': str,
            'job_title': str,
            'keyword_types': List[str],
            'keywords': Dict[str, str],
            'links': List[EnterpriseTopazFrontendTeamsLink],
            'location': str,
            'managers': List[PersonCore],
            'mission': str,
            'name': str,
            'office_location': str,
            'person_id': str,
            'phone_numbers': List[EnterpriseTopazFrontendTeamsPersonCorePhoneNumber],
            'photo_url': SafeUrlProto,
            'postal_address': str,
            'total_direct_reports_count': int,
            'total_dlr_count': int,
            'total_fte_count': str,
            'username': str,
            'waldo_come_back_time': str
        }

        self.attribute_map = {
            'address_me_as': 'addressMeAs',
            'admin_to': 'adminTo',
            'admins': 'admins',
            'availability_status': 'availabilityStatus',
            'birthday': 'birthday',
            'calendar_url': 'calendarUrl',
            'chat_url': 'chatUrl',
            'cost_center': 'costCenter',
            'department': 'department',
            'direct_reports': 'directReports',
            'dotted_line_managers': 'dottedLineManagers',
            'dotted_line_reports': 'dottedLineReports',
            'emails': 'emails',
            'employee_id': 'employeeId',
            'fingerprint': 'fingerprint',
            'fte_permille': 'ftePermille',
            'geo_location': 'geoLocation',
            'gmail_url': 'gmailUrl',
            'job_title': 'jobTitle',
            'keyword_types': 'keywordTypes',
            'keywords': 'keywords',
            'links': 'links',
            'location': 'location',
            'managers': 'managers',
            'mission': 'mission',
            'name': 'name',
            'office_location': 'officeLocation',
            'person_id': 'personId',
            'phone_numbers': 'phoneNumbers',
            'photo_url': 'photoUrl',
            'postal_address': 'postalAddress',
            'total_direct_reports_count': 'totalDirectReportsCount',
            'total_dlr_count': 'totalDlrCount',
            'total_fte_count': 'totalFteCount',
            'username': 'username',
            'waldo_come_back_time': 'waldoComeBackTime'
        }

        self._address_me_as = address_me_as
        self._admin_to = admin_to
        self._admins = admins
        self._availability_status = availability_status
        self._birthday = birthday
        self._calendar_url = calendar_url
        self._chat_url = chat_url
        self._cost_center = cost_center
        self._department = department
        self._direct_reports = direct_reports
        self._dotted_line_managers = dotted_line_managers
        self._dotted_line_reports = dotted_line_reports
        self._emails = emails
        self._employee_id = employee_id
        self._fingerprint = fingerprint
        self._fte_permille = fte_permille
        self._geo_location = geo_location
        self._gmail_url = gmail_url
        self._job_title = job_title
        self._keyword_types = keyword_types
        self._keywords = keywords
        self._links = links
        self._location = location
        self._managers = managers
        self._mission = mission
        self._name = name
        self._office_location = office_location
        self._person_id = person_id
        self._phone_numbers = phone_numbers
        self._photo_url = photo_url
        self._postal_address = postal_address
        self._total_direct_reports_count = total_direct_reports_count
        self._total_dlr_count = total_dlr_count
        self._total_fte_count = total_fte_count
        self._username = username
        self._waldo_come_back_time = waldo_come_back_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonCore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonCore of this PersonCore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_me_as(self):
        """Gets the address_me_as of this PersonCore.

        Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.

        :return: The address_me_as of this PersonCore.
        :rtype: str
        """
        return self._address_me_as

    @address_me_as.setter
    def address_me_as(self, address_me_as):
        """Sets the address_me_as of this PersonCore.

        Instructions for how to address this person (e.g. custom pronouns). For google.com this is a set of pronouns from a defined list of options.

        :param address_me_as: The address_me_as of this PersonCore.
        :type address_me_as: str
        """

        self._address_me_as = address_me_as

    @property
    def admin_to(self):
        """Gets the admin_to of this PersonCore.

        People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The admin_to of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._admin_to

    @admin_to.setter
    def admin_to(self, admin_to):
        """Sets the admin_to of this PersonCore.

        People the profile owner is an admin to. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param admin_to: The admin_to of this PersonCore.
        :type admin_to: List[PersonCore]
        """

        self._admin_to = admin_to

    @property
    def admins(self):
        """Gets the admins of this PersonCore.

        The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The admins of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this PersonCore.

        The profile owner's admins in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param admins: The admins of this PersonCore.
        :type admins: List[PersonCore]
        """

        self._admins = admins

    @property
    def availability_status(self):
        """Gets the availability_status of this PersonCore.


        :return: The availability_status of this PersonCore.
        :rtype: str
        """
        return self._availability_status

    @availability_status.setter
    def availability_status(self, availability_status):
        """Sets the availability_status of this PersonCore.


        :param availability_status: The availability_status of this PersonCore.
        :type availability_status: str
        """
        allowed_values = ["UNKNOWN", "OUT_OF_OFFICE", "OUTSIDE_WORKING_HOURS", "AVAILABLE"]  # noqa: E501
        if availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_status` ({0}), must be one of {1}"
                .format(availability_status, allowed_values)
            )

        self._availability_status = availability_status

    @property
    def birthday(self):
        """Gets the birthday of this PersonCore.


        :return: The birthday of this PersonCore.
        :rtype: ModelDate
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this PersonCore.


        :param birthday: The birthday of this PersonCore.
        :type birthday: ModelDate
        """

        self._birthday = birthday

    @property
    def calendar_url(self):
        """Gets the calendar_url of this PersonCore.


        :return: The calendar_url of this PersonCore.
        :rtype: SafeUrlProto
        """
        return self._calendar_url

    @calendar_url.setter
    def calendar_url(self, calendar_url):
        """Sets the calendar_url of this PersonCore.


        :param calendar_url: The calendar_url of this PersonCore.
        :type calendar_url: SafeUrlProto
        """

        self._calendar_url = calendar_url

    @property
    def chat_url(self):
        """Gets the chat_url of this PersonCore.


        :return: The chat_url of this PersonCore.
        :rtype: SafeUrlProto
        """
        return self._chat_url

    @chat_url.setter
    def chat_url(self, chat_url):
        """Sets the chat_url of this PersonCore.


        :param chat_url: The chat_url of this PersonCore.
        :type chat_url: SafeUrlProto
        """

        self._chat_url = chat_url

    @property
    def cost_center(self):
        """Gets the cost_center of this PersonCore.

        Person's cost center as a string, e.g. \"926: Googler Apps\".

        :return: The cost_center of this PersonCore.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this PersonCore.

        Person's cost center as a string, e.g. \"926: Googler Apps\".

        :param cost_center: The cost_center of this PersonCore.
        :type cost_center: str
        """

        self._cost_center = cost_center

    @property
    def department(self):
        """Gets the department of this PersonCore.

        The person's Organization department, e.g. \"People Operations\". For google.com this is usually called \"area\".

        :return: The department of this PersonCore.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PersonCore.

        The person's Organization department, e.g. \"People Operations\". For google.com this is usually called \"area\".

        :param department: The department of this PersonCore.
        :type department: str
        """

        self._department = department

    @property
    def direct_reports(self):
        """Gets the direct_reports of this PersonCore.

        A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The direct_reports of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._direct_reports

    @direct_reports.setter
    def direct_reports(self, direct_reports):
        """Sets the direct_reports of this PersonCore.

        A subset of the profile owner's direct reports. The number of entities here may be less than total_direct_reports_count, because typically ProfileResponse does not include all the person's reports, if there are too many to retrieve efficiently. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param direct_reports: The direct_reports of this PersonCore.
        :type direct_reports: List[PersonCore]
        """

        self._direct_reports = direct_reports

    @property
    def dotted_line_managers(self):
        """Gets the dotted_line_managers of this PersonCore.

        The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The dotted_line_managers of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._dotted_line_managers

    @dotted_line_managers.setter
    def dotted_line_managers(self, dotted_line_managers):
        """Sets the dotted_line_managers of this PersonCore.

        The profile owner's direct dotted line managers in no particular order. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param dotted_line_managers: The dotted_line_managers of this PersonCore.
        :type dotted_line_managers: List[PersonCore]
        """

        self._dotted_line_managers = dotted_line_managers

    @property
    def dotted_line_reports(self):
        """Gets the dotted_line_reports of this PersonCore.

        A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The dotted_line_reports of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._dotted_line_reports

    @dotted_line_reports.setter
    def dotted_line_reports(self, dotted_line_reports):
        """Sets the dotted_line_reports of this PersonCore.

        A subset of the profile owner's dotted-line reports. The number of entities here may be less than total_dlr_count. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param dotted_line_reports: The dotted_line_reports of this PersonCore.
        :type dotted_line_reports: List[PersonCore]
        """

        self._dotted_line_reports = dotted_line_reports

    @property
    def emails(self):
        """Gets the emails of this PersonCore.

        E-mail addresses of the person. The primary or preferred email should be first.

        :return: The emails of this PersonCore.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this PersonCore.

        E-mail addresses of the person. The primary or preferred email should be first.

        :param emails: The emails of this PersonCore.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def employee_id(self):
        """Gets the employee_id of this PersonCore.

        Person's employee number (external ID of type \"organization\") For google.com this is the badge number (e.g. 2 for Larry Page).

        :return: The employee_id of this PersonCore.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this PersonCore.

        Person's employee number (external ID of type \"organization\") For google.com this is the badge number (e.g. 2 for Larry Page).

        :param employee_id: The employee_id of this PersonCore.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this PersonCore.

        A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.

        :return: The fingerprint of this PersonCore.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this PersonCore.

        A fingerprint used by PAPI to reliably determine if a resource has changed Externally it is used as part of the etag.

        :param fingerprint: The fingerprint of this PersonCore.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def fte_permille(self):
        """Gets the fte_permille of this PersonCore.

        Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).

        :return: The fte_permille of this PersonCore.
        :rtype: str
        """
        return self._fte_permille

    @fte_permille.setter
    def fte_permille(self, fte_permille):
        """Sets the fte_permille of this PersonCore.

        Full-time equivalent (in ‰) (e.g. 800 for a person who's working 80%).

        :param fte_permille: The fte_permille of this PersonCore.
        :type fte_permille: str
        """

        self._fte_permille = fte_permille

    @property
    def geo_location(self):
        """Gets the geo_location of this PersonCore.


        :return: The geo_location of this PersonCore.
        :rtype: MapInfo
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this PersonCore.


        :param geo_location: The geo_location of this PersonCore.
        :type geo_location: MapInfo
        """

        self._geo_location = geo_location

    @property
    def gmail_url(self):
        """Gets the gmail_url of this PersonCore.


        :return: The gmail_url of this PersonCore.
        :rtype: str
        """
        return self._gmail_url

    @gmail_url.setter
    def gmail_url(self, gmail_url):
        """Sets the gmail_url of this PersonCore.


        :param gmail_url: The gmail_url of this PersonCore.
        :type gmail_url: str
        """

        self._gmail_url = gmail_url

    @property
    def job_title(self):
        """Gets the job_title of this PersonCore.

        Profile owner's job title (e.g. \"Software Engineer\"). For google.com this is the Workday preferred job title.

        :return: The job_title of this PersonCore.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this PersonCore.

        Profile owner's job title (e.g. \"Software Engineer\"). For google.com this is the Workday preferred job title.

        :param job_title: The job_title of this PersonCore.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def keyword_types(self):
        """Gets the keyword_types of this PersonCore.

        List of keys to use from the map 'keywords'.

        :return: The keyword_types of this PersonCore.
        :rtype: List[str]
        """
        return self._keyword_types

    @keyword_types.setter
    def keyword_types(self, keyword_types):
        """Sets the keyword_types of this PersonCore.

        List of keys to use from the map 'keywords'.

        :param keyword_types: The keyword_types of this PersonCore.
        :type keyword_types: List[str]
        """

        self._keyword_types = keyword_types

    @property
    def keywords(self):
        """Gets the keywords of this PersonCore.

        Custom keywords the domain admin has added.

        :return: The keywords of this PersonCore.
        :rtype: Dict[str, str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this PersonCore.

        Custom keywords the domain admin has added.

        :param keywords: The keywords of this PersonCore.
        :type keywords: Dict[str, str]
        """

        self._keywords = keywords

    @property
    def links(self):
        """Gets the links of this PersonCore.

        Custom links the profile owner has added.

        :return: The links of this PersonCore.
        :rtype: List[EnterpriseTopazFrontendTeamsLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PersonCore.

        Custom links the profile owner has added.

        :param links: The links of this PersonCore.
        :type links: List[EnterpriseTopazFrontendTeamsLink]
        """

        self._links = links

    @property
    def location(self):
        """Gets the location of this PersonCore.

        Detailed desk location within the company. For google.com this is the desk location code (e.g. \"DE-MUC-ARP-6T2-6T2C0C\") if the person has a desk.

        :return: The location of this PersonCore.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PersonCore.

        Detailed desk location within the company. For google.com this is the desk location code (e.g. \"DE-MUC-ARP-6T2-6T2C0C\") if the person has a desk.

        :param location: The location of this PersonCore.
        :type location: str
        """

        self._location = location

    @property
    def managers(self):
        """Gets the managers of this PersonCore.

        The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :return: The managers of this PersonCore.
        :rtype: List[PersonCore]
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this PersonCore.

        The profile owner's management chain from top to bottom, where managers[0] is the CEO, manager[N-2] is the person's manager's manager and managers[N-1] is the person's direct manager. Note that not all fields of these PersonCores will be set, in particular, relationships will be empty.

        :param managers: The managers of this PersonCore.
        :type managers: List[PersonCore]
        """

        self._managers = managers

    @property
    def mission(self):
        """Gets the mission of this PersonCore.

        Custom mission statement the profile owner has added.

        :return: The mission of this PersonCore.
        :rtype: str
        """
        return self._mission

    @mission.setter
    def mission(self, mission):
        """Sets the mission of this PersonCore.

        Custom mission statement the profile owner has added.

        :param mission: The mission of this PersonCore.
        :type mission: str
        """

        self._mission = mission

    @property
    def name(self):
        """Gets the name of this PersonCore.

        Human-readable Unicode display name.

        :return: The name of this PersonCore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonCore.

        Human-readable Unicode display name.

        :param name: The name of this PersonCore.
        :type name: str
        """

        self._name = name

    @property
    def office_location(self):
        """Gets the office_location of this PersonCore.

        Office/building identifier within the company. For google.com this is the office code (e.g. \"DE-MUC-ARP\").

        :return: The office_location of this PersonCore.
        :rtype: str
        """
        return self._office_location

    @office_location.setter
    def office_location(self, office_location):
        """Sets the office_location of this PersonCore.

        Office/building identifier within the company. For google.com this is the office code (e.g. \"DE-MUC-ARP\").

        :param office_location: The office_location of this PersonCore.
        :type office_location: str
        """

        self._office_location = office_location

    @property
    def person_id(self):
        """Gets the person_id of this PersonCore.

        The person's obfuscated Gaia ID.

        :return: The person_id of this PersonCore.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this PersonCore.

        The person's obfuscated Gaia ID.

        :param person_id: The person_id of this PersonCore.
        :type person_id: str
        """

        self._person_id = person_id

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this PersonCore.


        :return: The phone_numbers of this PersonCore.
        :rtype: List[EnterpriseTopazFrontendTeamsPersonCorePhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this PersonCore.


        :param phone_numbers: The phone_numbers of this PersonCore.
        :type phone_numbers: List[EnterpriseTopazFrontendTeamsPersonCorePhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def photo_url(self):
        """Gets the photo_url of this PersonCore.


        :return: The photo_url of this PersonCore.
        :rtype: SafeUrlProto
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this PersonCore.


        :param photo_url: The photo_url of this PersonCore.
        :type photo_url: SafeUrlProto
        """

        self._photo_url = photo_url

    @property
    def postal_address(self):
        """Gets the postal_address of this PersonCore.

        Postal address of office/building.

        :return: The postal_address of this PersonCore.
        :rtype: str
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this PersonCore.

        Postal address of office/building.

        :param postal_address: The postal_address of this PersonCore.
        :type postal_address: str
        """

        self._postal_address = postal_address

    @property
    def total_direct_reports_count(self):
        """Gets the total_direct_reports_count of this PersonCore.

        Total count of the profile owner's direct reports.

        :return: The total_direct_reports_count of this PersonCore.
        :rtype: int
        """
        return self._total_direct_reports_count

    @total_direct_reports_count.setter
    def total_direct_reports_count(self, total_direct_reports_count):
        """Sets the total_direct_reports_count of this PersonCore.

        Total count of the profile owner's direct reports.

        :param total_direct_reports_count: The total_direct_reports_count of this PersonCore.
        :type total_direct_reports_count: int
        """

        self._total_direct_reports_count = total_direct_reports_count

    @property
    def total_dlr_count(self):
        """Gets the total_dlr_count of this PersonCore.

        Total count of the profile owner's dotted-line reports.

        :return: The total_dlr_count of this PersonCore.
        :rtype: int
        """
        return self._total_dlr_count

    @total_dlr_count.setter
    def total_dlr_count(self, total_dlr_count):
        """Sets the total_dlr_count of this PersonCore.

        Total count of the profile owner's dotted-line reports.

        :param total_dlr_count: The total_dlr_count of this PersonCore.
        :type total_dlr_count: int
        """

        self._total_dlr_count = total_dlr_count

    @property
    def total_fte_count(self):
        """Gets the total_fte_count of this PersonCore.

        The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).

        :return: The total_fte_count of this PersonCore.
        :rtype: str
        """
        return self._total_fte_count

    @total_fte_count.setter
    def total_fte_count(self, total_fte_count):
        """Sets the total_fte_count of this PersonCore.

        The sum of all profile owner's reports and their own full-time-equivalents in ‰ (e.g. 1800 if one report is working 80% and profile owner 100%).

        :param total_fte_count: The total_fte_count of this PersonCore.
        :type total_fte_count: str
        """

        self._total_fte_count = total_fte_count

    @property
    def username(self):
        """Gets the username of this PersonCore.

        External ID of type \"login_id\" for the profile. For google.com this is the username/LDAP.

        :return: The username of this PersonCore.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PersonCore.

        External ID of type \"login_id\" for the profile. For google.com this is the username/LDAP.

        :param username: The username of this PersonCore.
        :type username: str
        """

        self._username = username

    @property
    def waldo_come_back_time(self):
        """Gets the waldo_come_back_time of this PersonCore.


        :return: The waldo_come_back_time of this PersonCore.
        :rtype: str
        """
        return self._waldo_come_back_time

    @waldo_come_back_time.setter
    def waldo_come_back_time(self, waldo_come_back_time):
        """Sets the waldo_come_back_time of this PersonCore.


        :param waldo_come_back_time: The waldo_come_back_time of this PersonCore.
        :type waldo_come_back_time: str
        """

        self._waldo_come_back_time = waldo_come_back_time
