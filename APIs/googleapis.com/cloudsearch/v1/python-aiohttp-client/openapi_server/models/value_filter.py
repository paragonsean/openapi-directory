# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value import Value
from openapi_server import util


class ValueFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator_name: str=None, value: Value=None):
        """ValueFilter - a model defined in OpenAPI

        :param operator_name: The operator_name of this ValueFilter.
        :param value: The value of this ValueFilter.
        """
        self.openapi_types = {
            'operator_name': str,
            'value': Value
        }

        self.attribute_map = {
            'operator_name': 'operatorName',
            'value': 'value'
        }

        self._operator_name = operator_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueFilter of this ValueFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator_name(self):
        """Gets the operator_name of this ValueFilter.

        The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.

        :return: The operator_name of this ValueFilter.
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this ValueFilter.

        The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.

        :param operator_name: The operator_name of this ValueFilter.
        :type operator_name: str
        """

        self._operator_name = operator_name

    @property
    def value(self):
        """Gets the value of this ValueFilter.


        :return: The value of this ValueFilter.
        :rtype: Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueFilter.


        :param value: The value of this ValueFilter.
        :type value: Value
        """

        self._value = value
