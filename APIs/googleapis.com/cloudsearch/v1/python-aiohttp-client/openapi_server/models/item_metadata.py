# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_attribute import ContextAttribute
from openapi_server.models.interaction import Interaction
from openapi_server.models.search_quality_metadata import SearchQualityMetadata
from openapi_server import util


class ItemMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, content_language: str=None, context_attributes: List[ContextAttribute]=None, create_time: str=None, hash: str=None, interactions: List[Interaction]=None, keywords: List[str]=None, mime_type: str=None, object_type: str=None, search_quality_metadata: SearchQualityMetadata=None, source_repository_url: str=None, title: str=None, update_time: str=None):
        """ItemMetadata - a model defined in OpenAPI

        :param container_name: The container_name of this ItemMetadata.
        :param content_language: The content_language of this ItemMetadata.
        :param context_attributes: The context_attributes of this ItemMetadata.
        :param create_time: The create_time of this ItemMetadata.
        :param hash: The hash of this ItemMetadata.
        :param interactions: The interactions of this ItemMetadata.
        :param keywords: The keywords of this ItemMetadata.
        :param mime_type: The mime_type of this ItemMetadata.
        :param object_type: The object_type of this ItemMetadata.
        :param search_quality_metadata: The search_quality_metadata of this ItemMetadata.
        :param source_repository_url: The source_repository_url of this ItemMetadata.
        :param title: The title of this ItemMetadata.
        :param update_time: The update_time of this ItemMetadata.
        """
        self.openapi_types = {
            'container_name': str,
            'content_language': str,
            'context_attributes': List[ContextAttribute],
            'create_time': str,
            'hash': str,
            'interactions': List[Interaction],
            'keywords': List[str],
            'mime_type': str,
            'object_type': str,
            'search_quality_metadata': SearchQualityMetadata,
            'source_repository_url': str,
            'title': str,
            'update_time': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'content_language': 'contentLanguage',
            'context_attributes': 'contextAttributes',
            'create_time': 'createTime',
            'hash': 'hash',
            'interactions': 'interactions',
            'keywords': 'keywords',
            'mime_type': 'mimeType',
            'object_type': 'objectType',
            'search_quality_metadata': 'searchQualityMetadata',
            'source_repository_url': 'sourceRepositoryUrl',
            'title': 'title',
            'update_time': 'updateTime'
        }

        self._container_name = container_name
        self._content_language = content_language
        self._context_attributes = context_attributes
        self._create_time = create_time
        self._hash = hash
        self._interactions = interactions
        self._keywords = keywords
        self._mime_type = mime_type
        self._object_type = object_type
        self._search_quality_metadata = search_quality_metadata
        self._source_repository_url = source_repository_url
        self._title = title
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemMetadata of this ItemMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this ItemMetadata.

        The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.

        :return: The container_name of this ItemMetadata.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ItemMetadata.

        The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.

        :param container_name: The container_name of this ItemMetadata.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def content_language(self):
        """Gets the content_language of this ItemMetadata.

        The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.

        :return: The content_language of this ItemMetadata.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this ItemMetadata.

        The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.

        :param content_language: The content_language of this ItemMetadata.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def context_attributes(self):
        """Gets the context_attributes of this ItemMetadata.

        A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.

        :return: The context_attributes of this ItemMetadata.
        :rtype: List[ContextAttribute]
        """
        return self._context_attributes

    @context_attributes.setter
    def context_attributes(self, context_attributes):
        """Sets the context_attributes of this ItemMetadata.

        A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.

        :param context_attributes: The context_attributes of this ItemMetadata.
        :type context_attributes: List[ContextAttribute]
        """

        self._context_attributes = context_attributes

    @property
    def create_time(self):
        """Gets the create_time of this ItemMetadata.

        The time when the item was created in the source repository.

        :return: The create_time of this ItemMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ItemMetadata.

        The time when the item was created in the source repository.

        :param create_time: The create_time of this ItemMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def hash(self):
        """Gets the hash of this ItemMetadata.

        Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.

        :return: The hash of this ItemMetadata.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ItemMetadata.

        Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.

        :param hash: The hash of this ItemMetadata.
        :type hash: str
        """

        self._hash = hash

    @property
    def interactions(self):
        """Gets the interactions of this ItemMetadata.

        A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.

        :return: The interactions of this ItemMetadata.
        :rtype: List[Interaction]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this ItemMetadata.

        A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.

        :param interactions: The interactions of this ItemMetadata.
        :type interactions: List[Interaction]
        """

        self._interactions = interactions

    @property
    def keywords(self):
        """Gets the keywords of this ItemMetadata.

        Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.

        :return: The keywords of this ItemMetadata.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ItemMetadata.

        Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.

        :param keywords: The keywords of this ItemMetadata.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def mime_type(self):
        """Gets the mime_type of this ItemMetadata.

        The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.

        :return: The mime_type of this ItemMetadata.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ItemMetadata.

        The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.

        :param mime_type: The mime_type of this ItemMetadata.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def object_type(self):
        """Gets the object_type of this ItemMetadata.

        The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.

        :return: The object_type of this ItemMetadata.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ItemMetadata.

        The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.

        :param object_type: The object_type of this ItemMetadata.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def search_quality_metadata(self):
        """Gets the search_quality_metadata of this ItemMetadata.


        :return: The search_quality_metadata of this ItemMetadata.
        :rtype: SearchQualityMetadata
        """
        return self._search_quality_metadata

    @search_quality_metadata.setter
    def search_quality_metadata(self, search_quality_metadata):
        """Sets the search_quality_metadata of this ItemMetadata.


        :param search_quality_metadata: The search_quality_metadata of this ItemMetadata.
        :type search_quality_metadata: SearchQualityMetadata
        """

        self._search_quality_metadata = search_quality_metadata

    @property
    def source_repository_url(self):
        """Gets the source_repository_url of this ItemMetadata.

        Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.

        :return: The source_repository_url of this ItemMetadata.
        :rtype: str
        """
        return self._source_repository_url

    @source_repository_url.setter
    def source_repository_url(self, source_repository_url):
        """Sets the source_repository_url of this ItemMetadata.

        Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.

        :param source_repository_url: The source_repository_url of this ItemMetadata.
        :type source_repository_url: str
        """

        self._source_repository_url = source_repository_url

    @property
    def title(self):
        """Gets the title of this ItemMetadata.

        The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.

        :return: The title of this ItemMetadata.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemMetadata.

        The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.

        :param title: The title of this ItemMetadata.
        :type title: str
        """

        self._title = title

    @property
    def update_time(self):
        """Gets the update_time of this ItemMetadata.

        The time when the item was last modified in the source repository.

        :return: The update_time of this ItemMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ItemMetadata.

        The time when the item was last modified in the source repository.

        :param update_time: The update_time of this ItemMetadata.
        :type update_time: str
        """

        self._update_time = update_time
