# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_operator_options import EnumOperatorOptions
from openapi_server.models.enum_value_pair import EnumValuePair
from openapi_server import util


class EnumPropertyOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator_options: EnumOperatorOptions=None, ordered_ranking: str=None, possible_values: List[EnumValuePair]=None):
        """EnumPropertyOptions - a model defined in OpenAPI

        :param operator_options: The operator_options of this EnumPropertyOptions.
        :param ordered_ranking: The ordered_ranking of this EnumPropertyOptions.
        :param possible_values: The possible_values of this EnumPropertyOptions.
        """
        self.openapi_types = {
            'operator_options': EnumOperatorOptions,
            'ordered_ranking': str,
            'possible_values': List[EnumValuePair]
        }

        self.attribute_map = {
            'operator_options': 'operatorOptions',
            'ordered_ranking': 'orderedRanking',
            'possible_values': 'possibleValues'
        }

        self._operator_options = operator_options
        self._ordered_ranking = ordered_ranking
        self._possible_values = possible_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnumPropertyOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnumPropertyOptions of this EnumPropertyOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator_options(self):
        """Gets the operator_options of this EnumPropertyOptions.


        :return: The operator_options of this EnumPropertyOptions.
        :rtype: EnumOperatorOptions
        """
        return self._operator_options

    @operator_options.setter
    def operator_options(self, operator_options):
        """Sets the operator_options of this EnumPropertyOptions.


        :param operator_options: The operator_options of this EnumPropertyOptions.
        :type operator_options: EnumOperatorOptions
        """

        self._operator_options = operator_options

    @property
    def ordered_ranking(self):
        """Gets the ordered_ranking of this EnumPropertyOptions.

        Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.

        :return: The ordered_ranking of this EnumPropertyOptions.
        :rtype: str
        """
        return self._ordered_ranking

    @ordered_ranking.setter
    def ordered_ranking(self, ordered_ranking):
        """Sets the ordered_ranking of this EnumPropertyOptions.

        Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified, integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.

        :param ordered_ranking: The ordered_ranking of this EnumPropertyOptions.
        :type ordered_ranking: str
        """
        allowed_values = ["NO_ORDER", "ASCENDING", "DESCENDING"]  # noqa: E501
        if ordered_ranking not in allowed_values:
            raise ValueError(
                "Invalid value for `ordered_ranking` ({0}), must be one of {1}"
                .format(ordered_ranking, allowed_values)
            )

        self._ordered_ranking = ordered_ranking

    @property
    def possible_values(self):
        """Gets the possible_values of this EnumPropertyOptions.

        The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.

        :return: The possible_values of this EnumPropertyOptions.
        :rtype: List[EnumValuePair]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """Sets the possible_values of this EnumPropertyOptions.

        The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in between previously registered values. The maximum number of elements is 100.

        :param possible_values: The possible_values of this EnumPropertyOptions.
        :type possible_values: List[EnumValuePair]
        """

        self._possible_values = possible_values
