# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_info import ErrorInfo
from openapi_server.models.facet_result import FacetResult
from openapi_server.models.query_interpretation import QueryInterpretation
from openapi_server.models.response_debug_info import ResponseDebugInfo
from openapi_server.models.result_counts import ResultCounts
from openapi_server.models.search_result import SearchResult
from openapi_server.models.spell_result import SpellResult
from openapi_server.models.structured_result import StructuredResult
from openapi_server import util


class SearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_info: ResponseDebugInfo=None, error_info: ErrorInfo=None, facet_results: List[FacetResult]=None, has_more_results: bool=None, query_interpretation: QueryInterpretation=None, result_count_estimate: str=None, result_count_exact: str=None, result_counts: ResultCounts=None, results: List[SearchResult]=None, spell_results: List[SpellResult]=None, structured_results: List[StructuredResult]=None):
        """SearchResponse - a model defined in OpenAPI

        :param debug_info: The debug_info of this SearchResponse.
        :param error_info: The error_info of this SearchResponse.
        :param facet_results: The facet_results of this SearchResponse.
        :param has_more_results: The has_more_results of this SearchResponse.
        :param query_interpretation: The query_interpretation of this SearchResponse.
        :param result_count_estimate: The result_count_estimate of this SearchResponse.
        :param result_count_exact: The result_count_exact of this SearchResponse.
        :param result_counts: The result_counts of this SearchResponse.
        :param results: The results of this SearchResponse.
        :param spell_results: The spell_results of this SearchResponse.
        :param structured_results: The structured_results of this SearchResponse.
        """
        self.openapi_types = {
            'debug_info': ResponseDebugInfo,
            'error_info': ErrorInfo,
            'facet_results': List[FacetResult],
            'has_more_results': bool,
            'query_interpretation': QueryInterpretation,
            'result_count_estimate': str,
            'result_count_exact': str,
            'result_counts': ResultCounts,
            'results': List[SearchResult],
            'spell_results': List[SpellResult],
            'structured_results': List[StructuredResult]
        }

        self.attribute_map = {
            'debug_info': 'debugInfo',
            'error_info': 'errorInfo',
            'facet_results': 'facetResults',
            'has_more_results': 'hasMoreResults',
            'query_interpretation': 'queryInterpretation',
            'result_count_estimate': 'resultCountEstimate',
            'result_count_exact': 'resultCountExact',
            'result_counts': 'resultCounts',
            'results': 'results',
            'spell_results': 'spellResults',
            'structured_results': 'structuredResults'
        }

        self._debug_info = debug_info
        self._error_info = error_info
        self._facet_results = facet_results
        self._has_more_results = has_more_results
        self._query_interpretation = query_interpretation
        self._result_count_estimate = result_count_estimate
        self._result_count_exact = result_count_exact
        self._result_counts = result_counts
        self._results = results
        self._spell_results = spell_results
        self._structured_results = structured_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResponse of this SearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_info(self):
        """Gets the debug_info of this SearchResponse.


        :return: The debug_info of this SearchResponse.
        :rtype: ResponseDebugInfo
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this SearchResponse.


        :param debug_info: The debug_info of this SearchResponse.
        :type debug_info: ResponseDebugInfo
        """

        self._debug_info = debug_info

    @property
    def error_info(self):
        """Gets the error_info of this SearchResponse.


        :return: The error_info of this SearchResponse.
        :rtype: ErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this SearchResponse.


        :param error_info: The error_info of this SearchResponse.
        :type error_info: ErrorInfo
        """

        self._error_info = error_info

    @property
    def facet_results(self):
        """Gets the facet_results of this SearchResponse.

        Repeated facet results.

        :return: The facet_results of this SearchResponse.
        :rtype: List[FacetResult]
        """
        return self._facet_results

    @facet_results.setter
    def facet_results(self, facet_results):
        """Sets the facet_results of this SearchResponse.

        Repeated facet results.

        :param facet_results: The facet_results of this SearchResponse.
        :type facet_results: List[FacetResult]
        """

        self._facet_results = facet_results

    @property
    def has_more_results(self):
        """Gets the has_more_results of this SearchResponse.

        Whether there are more search results matching the query.

        :return: The has_more_results of this SearchResponse.
        :rtype: bool
        """
        return self._has_more_results

    @has_more_results.setter
    def has_more_results(self, has_more_results):
        """Sets the has_more_results of this SearchResponse.

        Whether there are more search results matching the query.

        :param has_more_results: The has_more_results of this SearchResponse.
        :type has_more_results: bool
        """

        self._has_more_results = has_more_results

    @property
    def query_interpretation(self):
        """Gets the query_interpretation of this SearchResponse.


        :return: The query_interpretation of this SearchResponse.
        :rtype: QueryInterpretation
        """
        return self._query_interpretation

    @query_interpretation.setter
    def query_interpretation(self, query_interpretation):
        """Sets the query_interpretation of this SearchResponse.


        :param query_interpretation: The query_interpretation of this SearchResponse.
        :type query_interpretation: QueryInterpretation
        """

        self._query_interpretation = query_interpretation

    @property
    def result_count_estimate(self):
        """Gets the result_count_estimate of this SearchResponse.

        The estimated result count for this query.

        :return: The result_count_estimate of this SearchResponse.
        :rtype: str
        """
        return self._result_count_estimate

    @result_count_estimate.setter
    def result_count_estimate(self, result_count_estimate):
        """Sets the result_count_estimate of this SearchResponse.

        The estimated result count for this query.

        :param result_count_estimate: The result_count_estimate of this SearchResponse.
        :type result_count_estimate: str
        """

        self._result_count_estimate = result_count_estimate

    @property
    def result_count_exact(self):
        """Gets the result_count_exact of this SearchResponse.

        The exact result count for this query.

        :return: The result_count_exact of this SearchResponse.
        :rtype: str
        """
        return self._result_count_exact

    @result_count_exact.setter
    def result_count_exact(self, result_count_exact):
        """Sets the result_count_exact of this SearchResponse.

        The exact result count for this query.

        :param result_count_exact: The result_count_exact of this SearchResponse.
        :type result_count_exact: str
        """

        self._result_count_exact = result_count_exact

    @property
    def result_counts(self):
        """Gets the result_counts of this SearchResponse.


        :return: The result_counts of this SearchResponse.
        :rtype: ResultCounts
        """
        return self._result_counts

    @result_counts.setter
    def result_counts(self, result_counts):
        """Sets the result_counts of this SearchResponse.


        :param result_counts: The result_counts of this SearchResponse.
        :type result_counts: ResultCounts
        """

        self._result_counts = result_counts

    @property
    def results(self):
        """Gets the results of this SearchResponse.

        Results from a search query.

        :return: The results of this SearchResponse.
        :rtype: List[SearchResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchResponse.

        Results from a search query.

        :param results: The results of this SearchResponse.
        :type results: List[SearchResult]
        """

        self._results = results

    @property
    def spell_results(self):
        """Gets the spell_results of this SearchResponse.

        Suggested spelling for the query.

        :return: The spell_results of this SearchResponse.
        :rtype: List[SpellResult]
        """
        return self._spell_results

    @spell_results.setter
    def spell_results(self, spell_results):
        """Sets the spell_results of this SearchResponse.

        Suggested spelling for the query.

        :param spell_results: The spell_results of this SearchResponse.
        :type spell_results: List[SpellResult]
        """

        self._spell_results = spell_results

    @property
    def structured_results(self):
        """Gets the structured_results of this SearchResponse.

        Structured results for the user query. These results are not counted against the page_size.

        :return: The structured_results of this SearchResponse.
        :rtype: List[StructuredResult]
        """
        return self._structured_results

    @structured_results.setter
    def structured_results(self, structured_results):
        """Sets the structured_results of this SearchResponse.

        Structured results for the user query. These results are not counted against the page_size.

        :param structured_results: The structured_results of this SearchResponse.
        :type structured_results: List[StructuredResult]
        """

        self._structured_results = structured_results
