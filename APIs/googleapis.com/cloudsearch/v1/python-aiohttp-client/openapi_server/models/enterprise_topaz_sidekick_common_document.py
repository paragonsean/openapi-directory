# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_common_debug_info import EnterpriseTopazSidekickCommonDebugInfo
from openapi_server.models.enterprise_topaz_sidekick_common_document_drive_document_metadata import EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
from openapi_server.models.enterprise_topaz_sidekick_common_document_justification import EnterpriseTopazSidekickCommonDocumentJustification
from openapi_server import util


class EnterpriseTopazSidekickCommonDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type: str=None, debug_info: EnterpriseTopazSidekickCommonDebugInfo=None, document_id: str=None, drive_document_metadata: EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata=None, generic_url: str=None, justification: EnterpriseTopazSidekickCommonDocumentJustification=None, mime_type: str=None, provenance: str=None, reason: str=None, snippet: str=None, thumbnail_url: str=None, title: str=None, type: str=None, url: str=None):
        """EnterpriseTopazSidekickCommonDocument - a model defined in OpenAPI

        :param access_type: The access_type of this EnterpriseTopazSidekickCommonDocument.
        :param debug_info: The debug_info of this EnterpriseTopazSidekickCommonDocument.
        :param document_id: The document_id of this EnterpriseTopazSidekickCommonDocument.
        :param drive_document_metadata: The drive_document_metadata of this EnterpriseTopazSidekickCommonDocument.
        :param generic_url: The generic_url of this EnterpriseTopazSidekickCommonDocument.
        :param justification: The justification of this EnterpriseTopazSidekickCommonDocument.
        :param mime_type: The mime_type of this EnterpriseTopazSidekickCommonDocument.
        :param provenance: The provenance of this EnterpriseTopazSidekickCommonDocument.
        :param reason: The reason of this EnterpriseTopazSidekickCommonDocument.
        :param snippet: The snippet of this EnterpriseTopazSidekickCommonDocument.
        :param thumbnail_url: The thumbnail_url of this EnterpriseTopazSidekickCommonDocument.
        :param title: The title of this EnterpriseTopazSidekickCommonDocument.
        :param type: The type of this EnterpriseTopazSidekickCommonDocument.
        :param url: The url of this EnterpriseTopazSidekickCommonDocument.
        """
        self.openapi_types = {
            'access_type': str,
            'debug_info': EnterpriseTopazSidekickCommonDebugInfo,
            'document_id': str,
            'drive_document_metadata': EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata,
            'generic_url': str,
            'justification': EnterpriseTopazSidekickCommonDocumentJustification,
            'mime_type': str,
            'provenance': str,
            'reason': str,
            'snippet': str,
            'thumbnail_url': str,
            'title': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'access_type': 'accessType',
            'debug_info': 'debugInfo',
            'document_id': 'documentId',
            'drive_document_metadata': 'driveDocumentMetadata',
            'generic_url': 'genericUrl',
            'justification': 'justification',
            'mime_type': 'mimeType',
            'provenance': 'provenance',
            'reason': 'reason',
            'snippet': 'snippet',
            'thumbnail_url': 'thumbnailUrl',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._access_type = access_type
        self._debug_info = debug_info
        self._document_id = document_id
        self._drive_document_metadata = drive_document_metadata
        self._generic_url = generic_url
        self._justification = justification
        self._mime_type = mime_type
        self._provenance = provenance
        self._reason = reason
        self._snippet = snippet
        self._thumbnail_url = thumbnail_url
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickCommonDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickCommonDocument of this EnterpriseTopazSidekickCommonDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this EnterpriseTopazSidekickCommonDocument.

        Access type, i.e., whether the user has access to the document or not.

        :return: The access_type of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this EnterpriseTopazSidekickCommonDocument.

        Access type, i.e., whether the user has access to the document or not.

        :param access_type: The access_type of this EnterpriseTopazSidekickCommonDocument.
        :type access_type: str
        """
        allowed_values = ["UNKNOWN_ACCESS", "ALLOWED", "NOT_ALLOWED"]  # noqa: E501
        if access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_type` ({0}), must be one of {1}"
                .format(access_type, allowed_values)
            )

        self._access_type = access_type

    @property
    def debug_info(self):
        """Gets the debug_info of this EnterpriseTopazSidekickCommonDocument.


        :return: The debug_info of this EnterpriseTopazSidekickCommonDocument.
        :rtype: EnterpriseTopazSidekickCommonDebugInfo
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this EnterpriseTopazSidekickCommonDocument.


        :param debug_info: The debug_info of this EnterpriseTopazSidekickCommonDocument.
        :type debug_info: EnterpriseTopazSidekickCommonDebugInfo
        """

        self._debug_info = debug_info

    @property
    def document_id(self):
        """Gets the document_id of this EnterpriseTopazSidekickCommonDocument.

        Document id.

        :return: The document_id of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this EnterpriseTopazSidekickCommonDocument.

        Document id.

        :param document_id: The document_id of this EnterpriseTopazSidekickCommonDocument.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def drive_document_metadata(self):
        """Gets the drive_document_metadata of this EnterpriseTopazSidekickCommonDocument.


        :return: The drive_document_metadata of this EnterpriseTopazSidekickCommonDocument.
        :rtype: EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
        """
        return self._drive_document_metadata

    @drive_document_metadata.setter
    def drive_document_metadata(self, drive_document_metadata):
        """Sets the drive_document_metadata of this EnterpriseTopazSidekickCommonDocument.


        :param drive_document_metadata: The drive_document_metadata of this EnterpriseTopazSidekickCommonDocument.
        :type drive_document_metadata: EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata
        """

        self._drive_document_metadata = drive_document_metadata

    @property
    def generic_url(self):
        """Gets the generic_url of this EnterpriseTopazSidekickCommonDocument.

        Generic Drive-based url in the format of drive.google.com/open to be used for deeplink

        :return: The generic_url of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._generic_url

    @generic_url.setter
    def generic_url(self, generic_url):
        """Sets the generic_url of this EnterpriseTopazSidekickCommonDocument.

        Generic Drive-based url in the format of drive.google.com/open to be used for deeplink

        :param generic_url: The generic_url of this EnterpriseTopazSidekickCommonDocument.
        :type generic_url: str
        """

        self._generic_url = generic_url

    @property
    def justification(self):
        """Gets the justification of this EnterpriseTopazSidekickCommonDocument.


        :return: The justification of this EnterpriseTopazSidekickCommonDocument.
        :rtype: EnterpriseTopazSidekickCommonDocumentJustification
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this EnterpriseTopazSidekickCommonDocument.


        :param justification: The justification of this EnterpriseTopazSidekickCommonDocument.
        :type justification: EnterpriseTopazSidekickCommonDocumentJustification
        """

        self._justification = justification

    @property
    def mime_type(self):
        """Gets the mime_type of this EnterpriseTopazSidekickCommonDocument.

        MIME type

        :return: The mime_type of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this EnterpriseTopazSidekickCommonDocument.

        MIME type

        :param mime_type: The mime_type of this EnterpriseTopazSidekickCommonDocument.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def provenance(self):
        """Gets the provenance of this EnterpriseTopazSidekickCommonDocument.

        Document provenance.

        :return: The provenance of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this EnterpriseTopazSidekickCommonDocument.

        Document provenance.

        :param provenance: The provenance of this EnterpriseTopazSidekickCommonDocument.
        :type provenance: str
        """
        allowed_values = ["UNKNOWN_PROVENANCE", "CALENDAR_DESCRIPTION", "CALENDAR_ATTACHMENT", "MINED", "CALENDAR_ASSIST_ATTACHMENT"]  # noqa: E501
        if provenance not in allowed_values:
            raise ValueError(
                "Invalid value for `provenance` ({0}), must be one of {1}"
                .format(provenance, allowed_values)
            )

        self._provenance = provenance

    @property
    def reason(self):
        """Gets the reason of this EnterpriseTopazSidekickCommonDocument.

        Justification of why this document is being returned.

        :return: The reason of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EnterpriseTopazSidekickCommonDocument.

        Justification of why this document is being returned.

        :param reason: The reason of this EnterpriseTopazSidekickCommonDocument.
        :type reason: str
        """
        allowed_values = ["UNKNOWN", "TRENDING_IN_COLLABORATORS", "TRENDING_IN_DOMAIN", "FREQUENTLY_VIEWED", "FREQUENTLY_EDITED", "NEW_UPDATES", "NEW_COMMENTS", "EVENT_DESCRIPTION", "EVENT_ATTACHMENT", "EVENT_METADATA_ATTACHMENT", "MINED_DOCUMENT", "NEW_MENTIONS", "NEW_SHARES"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def snippet(self):
        """Gets the snippet of this EnterpriseTopazSidekickCommonDocument.

        A sampling of the text from the document.

        :return: The snippet of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this EnterpriseTopazSidekickCommonDocument.

        A sampling of the text from the document.

        :param snippet: The snippet of this EnterpriseTopazSidekickCommonDocument.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this EnterpriseTopazSidekickCommonDocument.

        Thumbnail URL.

        :return: The thumbnail_url of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this EnterpriseTopazSidekickCommonDocument.

        Thumbnail URL.

        :param thumbnail_url: The thumbnail_url of this EnterpriseTopazSidekickCommonDocument.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this EnterpriseTopazSidekickCommonDocument.

        Title of the document.

        :return: The title of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EnterpriseTopazSidekickCommonDocument.

        Title of the document.

        :param title: The title of this EnterpriseTopazSidekickCommonDocument.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this EnterpriseTopazSidekickCommonDocument.

        Type of the document.

        :return: The type of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnterpriseTopazSidekickCommonDocument.

        Type of the document.

        :param type: The type of this EnterpriseTopazSidekickCommonDocument.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "DOCUMENT", "PRESENTATION", "SPREADSHEET", "PDF", "IMAGE", "BINARY_BLOB", "FUSION_TABLE", "FOLDER", "DRAWING", "VIDEO", "FORM", "LINK_URL", "LINK_GO", "LINK_GOO_GL", "LINK_BIT_LY", "LINK_GMAIL", "LINK_MAILTO", "VIDEO_YOUTUBE", "VIDEO_LIVE", "GROUPS", "NEWS", "SITES", "HANGOUT", "AUDIO", "MS_WORD", "MS_POWERPOINT", "MS_EXCEL", "MS_OUTLOOK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this EnterpriseTopazSidekickCommonDocument.

        Absolute URL of the document.

        :return: The url of this EnterpriseTopazSidekickCommonDocument.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EnterpriseTopazSidekickCommonDocument.

        Absolute URL of the document.

        :param url: The url of this EnterpriseTopazSidekickCommonDocument.
        :type url: str
        """

        self._url = url
