# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseTopazSidekickPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_level: str=None, attending_status: str=None, email: str=None, gaia_id: str=None, is_group: bool=None, name: str=None, obfuscated_gaia_id: str=None, photo_url: str=None):
        """EnterpriseTopazSidekickPerson - a model defined in OpenAPI

        :param affinity_level: The affinity_level of this EnterpriseTopazSidekickPerson.
        :param attending_status: The attending_status of this EnterpriseTopazSidekickPerson.
        :param email: The email of this EnterpriseTopazSidekickPerson.
        :param gaia_id: The gaia_id of this EnterpriseTopazSidekickPerson.
        :param is_group: The is_group of this EnterpriseTopazSidekickPerson.
        :param name: The name of this EnterpriseTopazSidekickPerson.
        :param obfuscated_gaia_id: The obfuscated_gaia_id of this EnterpriseTopazSidekickPerson.
        :param photo_url: The photo_url of this EnterpriseTopazSidekickPerson.
        """
        self.openapi_types = {
            'affinity_level': str,
            'attending_status': str,
            'email': str,
            'gaia_id': str,
            'is_group': bool,
            'name': str,
            'obfuscated_gaia_id': str,
            'photo_url': str
        }

        self.attribute_map = {
            'affinity_level': 'affinityLevel',
            'attending_status': 'attendingStatus',
            'email': 'email',
            'gaia_id': 'gaiaId',
            'is_group': 'isGroup',
            'name': 'name',
            'obfuscated_gaia_id': 'obfuscatedGaiaId',
            'photo_url': 'photoUrl'
        }

        self._affinity_level = affinity_level
        self._attending_status = attending_status
        self._email = email
        self._gaia_id = gaia_id
        self._is_group = is_group
        self._name = name
        self._obfuscated_gaia_id = obfuscated_gaia_id
        self._photo_url = photo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickPerson of this EnterpriseTopazSidekickPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_level(self):
        """Gets the affinity_level of this EnterpriseTopazSidekickPerson.

        The level of affinity this person has with the requesting user.

        :return: The affinity_level of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._affinity_level

    @affinity_level.setter
    def affinity_level(self, affinity_level):
        """Sets the affinity_level of this EnterpriseTopazSidekickPerson.

        The level of affinity this person has with the requesting user.

        :param affinity_level: The affinity_level of this EnterpriseTopazSidekickPerson.
        :type affinity_level: str
        """
        allowed_values = ["UNKNOWN", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if affinity_level not in allowed_values:
            raise ValueError(
                "Invalid value for `affinity_level` ({0}), must be one of {1}"
                .format(affinity_level, allowed_values)
            )

        self._affinity_level = affinity_level

    @property
    def attending_status(self):
        """Gets the attending_status of this EnterpriseTopazSidekickPerson.

        Attendance status of the person when included in a meeting event.

        :return: The attending_status of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._attending_status

    @attending_status.setter
    def attending_status(self, attending_status):
        """Sets the attending_status of this EnterpriseTopazSidekickPerson.

        Attendance status of the person when included in a meeting event.

        :param attending_status: The attending_status of this EnterpriseTopazSidekickPerson.
        :type attending_status: str
        """
        allowed_values = ["AWAITING", "true", "false", "MAYBE"]  # noqa: E501
        if attending_status not in allowed_values:
            raise ValueError(
                "Invalid value for `attending_status` ({0}), must be one of {1}"
                .format(attending_status, allowed_values)
            )

        self._attending_status = attending_status

    @property
    def email(self):
        """Gets the email of this EnterpriseTopazSidekickPerson.

        Email.

        :return: The email of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EnterpriseTopazSidekickPerson.

        Email.

        :param email: The email of this EnterpriseTopazSidekickPerson.
        :type email: str
        """

        self._email = email

    @property
    def gaia_id(self):
        """Gets the gaia_id of this EnterpriseTopazSidekickPerson.

        Gaia id.

        :return: The gaia_id of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._gaia_id

    @gaia_id.setter
    def gaia_id(self, gaia_id):
        """Sets the gaia_id of this EnterpriseTopazSidekickPerson.

        Gaia id.

        :param gaia_id: The gaia_id of this EnterpriseTopazSidekickPerson.
        :type gaia_id: str
        """

        self._gaia_id = gaia_id

    @property
    def is_group(self):
        """Gets the is_group of this EnterpriseTopazSidekickPerson.

        Whether the invitee is a group.

        :return: The is_group of this EnterpriseTopazSidekickPerson.
        :rtype: bool
        """
        return self._is_group

    @is_group.setter
    def is_group(self, is_group):
        """Sets the is_group of this EnterpriseTopazSidekickPerson.

        Whether the invitee is a group.

        :param is_group: The is_group of this EnterpriseTopazSidekickPerson.
        :type is_group: bool
        """

        self._is_group = is_group

    @property
    def name(self):
        """Gets the name of this EnterpriseTopazSidekickPerson.

        Name.

        :return: The name of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnterpriseTopazSidekickPerson.

        Name.

        :param name: The name of this EnterpriseTopazSidekickPerson.
        :type name: str
        """

        self._name = name

    @property
    def obfuscated_gaia_id(self):
        """Gets the obfuscated_gaia_id of this EnterpriseTopazSidekickPerson.

        Obfuscated Gaia id.

        :return: The obfuscated_gaia_id of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._obfuscated_gaia_id

    @obfuscated_gaia_id.setter
    def obfuscated_gaia_id(self, obfuscated_gaia_id):
        """Sets the obfuscated_gaia_id of this EnterpriseTopazSidekickPerson.

        Obfuscated Gaia id.

        :param obfuscated_gaia_id: The obfuscated_gaia_id of this EnterpriseTopazSidekickPerson.
        :type obfuscated_gaia_id: str
        """

        self._obfuscated_gaia_id = obfuscated_gaia_id

    @property
    def photo_url(self):
        """Gets the photo_url of this EnterpriseTopazSidekickPerson.

        Absolute URL to the profile photo of the person.

        :return: The photo_url of this EnterpriseTopazSidekickPerson.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this EnterpriseTopazSidekickPerson.

        Absolute URL to the profile photo of the person.

        :param photo_url: The photo_url of this EnterpriseTopazSidekickPerson.
        :type photo_url: str
        """

        self._photo_url = photo_url
