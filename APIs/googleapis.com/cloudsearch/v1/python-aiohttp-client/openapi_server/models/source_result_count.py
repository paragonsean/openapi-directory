# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class SourceResultCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_more_results: bool=None, result_count_estimate: str=None, result_count_exact: str=None, source: Source=None):
        """SourceResultCount - a model defined in OpenAPI

        :param has_more_results: The has_more_results of this SourceResultCount.
        :param result_count_estimate: The result_count_estimate of this SourceResultCount.
        :param result_count_exact: The result_count_exact of this SourceResultCount.
        :param source: The source of this SourceResultCount.
        """
        self.openapi_types = {
            'has_more_results': bool,
            'result_count_estimate': str,
            'result_count_exact': str,
            'source': Source
        }

        self.attribute_map = {
            'has_more_results': 'hasMoreResults',
            'result_count_estimate': 'resultCountEstimate',
            'result_count_exact': 'resultCountExact',
            'source': 'source'
        }

        self._has_more_results = has_more_results
        self._result_count_estimate = result_count_estimate
        self._result_count_exact = result_count_exact
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceResultCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceResultCount of this SourceResultCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_more_results(self):
        """Gets the has_more_results of this SourceResultCount.

        Whether there are more search results for this source.

        :return: The has_more_results of this SourceResultCount.
        :rtype: bool
        """
        return self._has_more_results

    @has_more_results.setter
    def has_more_results(self, has_more_results):
        """Sets the has_more_results of this SourceResultCount.

        Whether there are more search results for this source.

        :param has_more_results: The has_more_results of this SourceResultCount.
        :type has_more_results: bool
        """

        self._has_more_results = has_more_results

    @property
    def result_count_estimate(self):
        """Gets the result_count_estimate of this SourceResultCount.

        The estimated result count for this source.

        :return: The result_count_estimate of this SourceResultCount.
        :rtype: str
        """
        return self._result_count_estimate

    @result_count_estimate.setter
    def result_count_estimate(self, result_count_estimate):
        """Sets the result_count_estimate of this SourceResultCount.

        The estimated result count for this source.

        :param result_count_estimate: The result_count_estimate of this SourceResultCount.
        :type result_count_estimate: str
        """

        self._result_count_estimate = result_count_estimate

    @property
    def result_count_exact(self):
        """Gets the result_count_exact of this SourceResultCount.

        The exact result count for this source.

        :return: The result_count_exact of this SourceResultCount.
        :rtype: str
        """
        return self._result_count_exact

    @result_count_exact.setter
    def result_count_exact(self, result_count_exact):
        """Sets the result_count_exact of this SourceResultCount.

        The exact result count for this source.

        :param result_count_exact: The result_count_exact of this SourceResultCount.
        :type result_count_exact: str
        """

        self._result_count_exact = result_count_exact

    @property
    def source(self):
        """Gets the source of this SourceResultCount.


        :return: The source of this SourceResultCount.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SourceResultCount.


        :param source: The source of this SourceResultCount.
        :type source: Source
        """

        self._source = source
