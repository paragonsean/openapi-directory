# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server.models.value import Value
from openapi_server import util


class FacetBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, filter: Filter=None, percentage: int=None, value: Value=None):
        """FacetBucket - a model defined in OpenAPI

        :param count: The count of this FacetBucket.
        :param filter: The filter of this FacetBucket.
        :param percentage: The percentage of this FacetBucket.
        :param value: The value of this FacetBucket.
        """
        self.openapi_types = {
            'count': int,
            'filter': Filter,
            'percentage': int,
            'value': Value
        }

        self.attribute_map = {
            'count': 'count',
            'filter': 'filter',
            'percentage': 'percentage',
            'value': 'value'
        }

        self._count = count
        self._filter = filter
        self._percentage = percentage
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetBucket of this FacetBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this FacetBucket.

        Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned.

        :return: The count of this FacetBucket.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FacetBucket.

        Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are always returned.

        :param count: The count of this FacetBucket.
        :type count: int
        """

        self._count = count

    @property
    def filter(self):
        """Gets the filter of this FacetBucket.


        :return: The filter of this FacetBucket.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this FacetBucket.


        :param filter: The filter of this FacetBucket.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def percentage(self):
        """Gets the percentage of this FacetBucket.

        Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts.

        :return: The percentage of this FacetBucket.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this FacetBucket.

        Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render percentages instead of counts.

        :param percentage: The percentage of this FacetBucket.
        :type percentage: int
        """

        self._percentage = percentage

    @property
    def value(self):
        """Gets the value of this FacetBucket.


        :return: The value of this FacetBucket.
        :rtype: Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FacetBucket.


        :param value: The value of this FacetBucket.
        :type value: Value
        """

        self._value = value
