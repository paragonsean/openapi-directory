# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_error import RepositoryError
from openapi_server import util


class PushItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_hash: str=None, metadata_hash: str=None, payload: str=None, queue: str=None, repository_error: RepositoryError=None, structured_data_hash: str=None, type: str=None):
        """PushItem - a model defined in OpenAPI

        :param content_hash: The content_hash of this PushItem.
        :param metadata_hash: The metadata_hash of this PushItem.
        :param payload: The payload of this PushItem.
        :param queue: The queue of this PushItem.
        :param repository_error: The repository_error of this PushItem.
        :param structured_data_hash: The structured_data_hash of this PushItem.
        :param type: The type of this PushItem.
        """
        self.openapi_types = {
            'content_hash': str,
            'metadata_hash': str,
            'payload': str,
            'queue': str,
            'repository_error': RepositoryError,
            'structured_data_hash': str,
            'type': str
        }

        self.attribute_map = {
            'content_hash': 'contentHash',
            'metadata_hash': 'metadataHash',
            'payload': 'payload',
            'queue': 'queue',
            'repository_error': 'repositoryError',
            'structured_data_hash': 'structuredDataHash',
            'type': 'type'
        }

        self._content_hash = content_hash
        self._metadata_hash = metadata_hash
        self._payload = payload
        self._queue = queue
        self._repository_error = repository_error
        self._structured_data_hash = structured_data_hash
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushItem of this PushItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_hash(self):
        """Gets the content_hash of this PushItem.

        Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :return: The content_hash of this PushItem.
        :rtype: str
        """
        return self._content_hash

    @content_hash.setter
    def content_hash(self, content_hash):
        """Sets the content_hash of this PushItem.

        Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :param content_hash: The content_hash of this PushItem.
        :type content_hash: str
        """

        self._content_hash = content_hash

    @property
    def metadata_hash(self):
        """Gets the metadata_hash of this PushItem.

        The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :return: The metadata_hash of this PushItem.
        :rtype: str
        """
        return self._metadata_hash

    @metadata_hash.setter
    def metadata_hash(self, metadata_hash):
        """Sets the metadata_hash of this PushItem.

        The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :param metadata_hash: The metadata_hash of this PushItem.
        :type metadata_hash: str
        """

        self._metadata_hash = metadata_hash

    @property
    def payload(self):
        """Gets the payload of this PushItem.

        Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.

        :return: The payload of this PushItem.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this PushItem.

        Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes.

        :param payload: The payload of this PushItem.
        :type payload: str
        """

        self._payload = payload

    @property
    def queue(self):
        """Gets the queue of this PushItem.

        Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.

        :return: The queue of this PushItem.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this PushItem.

        Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters.

        :param queue: The queue of this PushItem.
        :type queue: str
        """

        self._queue = queue

    @property
    def repository_error(self):
        """Gets the repository_error of this PushItem.


        :return: The repository_error of this PushItem.
        :rtype: RepositoryError
        """
        return self._repository_error

    @repository_error.setter
    def repository_error(self, repository_error):
        """Sets the repository_error of this PushItem.


        :param repository_error: The repository_error of this PushItem.
        :type repository_error: RepositoryError
        """

        self._repository_error = repository_error

    @property
    def structured_data_hash(self):
        """Gets the structured_data_hash of this PushItem.

        Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :return: The structured_data_hash of this PushItem.
        :rtype: str
        """
        return self._structured_data_hash

    @structured_data_hash.setter
    def structured_data_hash(self, structured_data_hash):
        """Sets the structured_data_hash of this PushItem.

        Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in argument error. The maximum length is 2048 characters.

        :param structured_data_hash: The structured_data_hash of this PushItem.
        :type structured_data_hash: str
        """

        self._structured_data_hash = structured_data_hash

    @property
    def type(self):
        """Gets the type of this PushItem.

        The type of the push operation that defines the push behavior.

        :return: The type of this PushItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PushItem.

        The type of the push operation that defines the push behavior.

        :param type: The type of this PushItem.
        :type type: str
        """
        allowed_values = ["UNSPECIFIED", "MODIFIED", "NOT_MODIFIED", "REPOSITORY_ERROR", "REQUEUE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
