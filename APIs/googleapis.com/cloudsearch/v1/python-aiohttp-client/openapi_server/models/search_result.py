# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.result_debug_info import ResultDebugInfo
from openapi_server.models.snippet import Snippet
from openapi_server import util


class SearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clustered_results: List[SearchResult]=None, debug_info: ResultDebugInfo=None, metadata: Metadata=None, snippet: Snippet=None, title: str=None, url: str=None):
        """SearchResult - a model defined in OpenAPI

        :param clustered_results: The clustered_results of this SearchResult.
        :param debug_info: The debug_info of this SearchResult.
        :param metadata: The metadata of this SearchResult.
        :param snippet: The snippet of this SearchResult.
        :param title: The title of this SearchResult.
        :param url: The url of this SearchResult.
        """
        self.openapi_types = {
            'clustered_results': List[SearchResult],
            'debug_info': ResultDebugInfo,
            'metadata': Metadata,
            'snippet': Snippet,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'clustered_results': 'clusteredResults',
            'debug_info': 'debugInfo',
            'metadata': 'metadata',
            'snippet': 'snippet',
            'title': 'title',
            'url': 'url'
        }

        self._clustered_results = clustered_results
        self._debug_info = debug_info
        self._metadata = metadata
        self._snippet = snippet
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResult of this SearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clustered_results(self):
        """Gets the clustered_results of this SearchResult.

        If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty.

        :return: The clustered_results of this SearchResult.
        :rtype: List[SearchResult]
        """
        return self._clustered_results

    @clustered_results.setter
    def clustered_results(self, clustered_results):
        """Sets the clustered_results of this SearchResult.

        If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be empty.

        :param clustered_results: The clustered_results of this SearchResult.
        :type clustered_results: List[SearchResult]
        """

        self._clustered_results = clustered_results

    @property
    def debug_info(self):
        """Gets the debug_info of this SearchResult.


        :return: The debug_info of this SearchResult.
        :rtype: ResultDebugInfo
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this SearchResult.


        :param debug_info: The debug_info of this SearchResult.
        :type debug_info: ResultDebugInfo
        """

        self._debug_info = debug_info

    @property
    def metadata(self):
        """Gets the metadata of this SearchResult.


        :return: The metadata of this SearchResult.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SearchResult.


        :param metadata: The metadata of this SearchResult.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def snippet(self):
        """Gets the snippet of this SearchResult.


        :return: The snippet of this SearchResult.
        :rtype: Snippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this SearchResult.


        :param snippet: The snippet of this SearchResult.
        :type snippet: Snippet
        """

        self._snippet = snippet

    @property
    def title(self):
        """Gets the title of this SearchResult.

        Title of the search result.

        :return: The title of this SearchResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchResult.

        Title of the search result.

        :param title: The title of this SearchResult.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this SearchResult.

        The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed.

        :return: The url of this SearchResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchResult.

        The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed.

        :param url: The url of this SearchResult.
        :type url: str
        """

        self._url = url
