# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_topaz_sidekick_agenda_entry import EnterpriseTopazSidekickAgendaEntry
from openapi_server import util


class EnterpriseTopazSidekickMeetingNotesCardError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, event: EnterpriseTopazSidekickAgendaEntry=None, reason: str=None):
        """EnterpriseTopazSidekickMeetingNotesCardError - a model defined in OpenAPI

        :param description: The description of this EnterpriseTopazSidekickMeetingNotesCardError.
        :param event: The event of this EnterpriseTopazSidekickMeetingNotesCardError.
        :param reason: The reason of this EnterpriseTopazSidekickMeetingNotesCardError.
        """
        self.openapi_types = {
            'description': str,
            'event': EnterpriseTopazSidekickAgendaEntry,
            'reason': str
        }

        self.attribute_map = {
            'description': 'description',
            'event': 'event',
            'reason': 'reason'
        }

        self._description = description
        self._event = event
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickMeetingNotesCardError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickMeetingNotesCardError of this EnterpriseTopazSidekickMeetingNotesCardError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EnterpriseTopazSidekickMeetingNotesCardError.

        The description of the reason why create-meeting-notes failed.

        :return: The description of this EnterpriseTopazSidekickMeetingNotesCardError.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EnterpriseTopazSidekickMeetingNotesCardError.

        The description of the reason why create-meeting-notes failed.

        :param description: The description of this EnterpriseTopazSidekickMeetingNotesCardError.
        :type description: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this EnterpriseTopazSidekickMeetingNotesCardError.


        :return: The event of this EnterpriseTopazSidekickMeetingNotesCardError.
        :rtype: EnterpriseTopazSidekickAgendaEntry
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EnterpriseTopazSidekickMeetingNotesCardError.


        :param event: The event of this EnterpriseTopazSidekickMeetingNotesCardError.
        :type event: EnterpriseTopazSidekickAgendaEntry
        """

        self._event = event

    @property
    def reason(self):
        """Gets the reason of this EnterpriseTopazSidekickMeetingNotesCardError.

        The reason why create-meeting-notes failed.

        :return: The reason of this EnterpriseTopazSidekickMeetingNotesCardError.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EnterpriseTopazSidekickMeetingNotesCardError.

        The reason why create-meeting-notes failed.

        :param reason: The reason of this EnterpriseTopazSidekickMeetingNotesCardError.
        :type reason: str
        """
        allowed_values = ["NONE", "NOT_OWNER", "UNKNOWN"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
