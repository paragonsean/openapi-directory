# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.safe_html_proto import SafeHtmlProto
from openapi_server import util


class SpellResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggested_query: str=None, suggested_query_html: SafeHtmlProto=None, suggestion_type: str=None):
        """SpellResult - a model defined in OpenAPI

        :param suggested_query: The suggested_query of this SpellResult.
        :param suggested_query_html: The suggested_query_html of this SpellResult.
        :param suggestion_type: The suggestion_type of this SpellResult.
        """
        self.openapi_types = {
            'suggested_query': str,
            'suggested_query_html': SafeHtmlProto,
            'suggestion_type': str
        }

        self.attribute_map = {
            'suggested_query': 'suggestedQuery',
            'suggested_query_html': 'suggestedQueryHtml',
            'suggestion_type': 'suggestionType'
        }

        self._suggested_query = suggested_query
        self._suggested_query_html = suggested_query_html
        self._suggestion_type = suggestion_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpellResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpellResult of this SpellResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggested_query(self):
        """Gets the suggested_query of this SpellResult.

        The suggested spelling of the query.

        :return: The suggested_query of this SpellResult.
        :rtype: str
        """
        return self._suggested_query

    @suggested_query.setter
    def suggested_query(self, suggested_query):
        """Sets the suggested_query of this SpellResult.

        The suggested spelling of the query.

        :param suggested_query: The suggested_query of this SpellResult.
        :type suggested_query: str
        """

        self._suggested_query = suggested_query

    @property
    def suggested_query_html(self):
        """Gets the suggested_query_html of this SpellResult.


        :return: The suggested_query_html of this SpellResult.
        :rtype: SafeHtmlProto
        """
        return self._suggested_query_html

    @suggested_query_html.setter
    def suggested_query_html(self, suggested_query_html):
        """Sets the suggested_query_html of this SpellResult.


        :param suggested_query_html: The suggested_query_html of this SpellResult.
        :type suggested_query_html: SafeHtmlProto
        """

        self._suggested_query_html = suggested_query_html

    @property
    def suggestion_type(self):
        """Gets the suggestion_type of this SpellResult.

        Suggestion triggered for the current query.

        :return: The suggestion_type of this SpellResult.
        :rtype: str
        """
        return self._suggestion_type

    @suggestion_type.setter
    def suggestion_type(self, suggestion_type):
        """Sets the suggestion_type of this SpellResult.

        Suggestion triggered for the current query.

        :param suggestion_type: The suggestion_type of this SpellResult.
        :type suggestion_type: str
        """
        allowed_values = ["SUGGESTION_TYPE_UNSPECIFIED", "NON_EMPTY_RESULTS_SPELL_SUGGESTION", "ZERO_RESULTS_FULL_PAGE_REPLACEMENT"]  # noqa: E501
        if suggestion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `suggestion_type` ({0}), must be one of {1}"
                .format(suggestion_type, allowed_values)
            )

        self._suggestion_type = suggestion_type
