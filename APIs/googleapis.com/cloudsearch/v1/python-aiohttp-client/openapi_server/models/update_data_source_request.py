# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source import DataSource
from openapi_server.models.debug_options import DebugOptions
from openapi_server import util


class UpdateDataSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_options: DebugOptions=None, source: DataSource=None, update_mask: str=None):
        """UpdateDataSourceRequest - a model defined in OpenAPI

        :param debug_options: The debug_options of this UpdateDataSourceRequest.
        :param source: The source of this UpdateDataSourceRequest.
        :param update_mask: The update_mask of this UpdateDataSourceRequest.
        """
        self.openapi_types = {
            'debug_options': DebugOptions,
            'source': DataSource,
            'update_mask': str
        }

        self.attribute_map = {
            'debug_options': 'debugOptions',
            'source': 'source',
            'update_mask': 'updateMask'
        }

        self._debug_options = debug_options
        self._source = source
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDataSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDataSourceRequest of this UpdateDataSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_options(self):
        """Gets the debug_options of this UpdateDataSourceRequest.


        :return: The debug_options of this UpdateDataSourceRequest.
        :rtype: DebugOptions
        """
        return self._debug_options

    @debug_options.setter
    def debug_options(self, debug_options):
        """Sets the debug_options of this UpdateDataSourceRequest.


        :param debug_options: The debug_options of this UpdateDataSourceRequest.
        :type debug_options: DebugOptions
        """

        self._debug_options = debug_options

    @property
    def source(self):
        """Gets the source of this UpdateDataSourceRequest.


        :return: The source of this UpdateDataSourceRequest.
        :rtype: DataSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdateDataSourceRequest.


        :param source: The source of this UpdateDataSourceRequest.
        :type source: DataSource
        """

        self._source = source

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateDataSourceRequest.

        Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.

        :return: The update_mask of this UpdateDataSourceRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateDataSourceRequest.

        Only applies to [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch). Update mask to control which fields to update. Example field paths: `name`, `displayName`. * If `update_mask` is non-empty, then only the fields specified in the `update_mask` are updated. * If you specify a field in the `update_mask`, but don't specify its value in the source, that field is cleared. * If the `update_mask` is not present or empty or has the value `*`, then all fields are updated.

        :param update_mask: The update_mask of this UpdateDataSourceRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
