# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, http_status_code: int=None, type: str=None):
        """RepositoryError - a model defined in OpenAPI

        :param error_message: The error_message of this RepositoryError.
        :param http_status_code: The http_status_code of this RepositoryError.
        :param type: The type of this RepositoryError.
        """
        self.openapi_types = {
            'error_message': str,
            'http_status_code': int,
            'type': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'http_status_code': 'httpStatusCode',
            'type': 'type'
        }

        self._error_message = error_message
        self._http_status_code = http_status_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositoryError of this RepositoryError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this RepositoryError.

        Message that describes the error. The maximum allowable length of the message is 8192 characters.

        :return: The error_message of this RepositoryError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this RepositoryError.

        Message that describes the error. The maximum allowable length of the message is 8192 characters.

        :param error_message: The error_message of this RepositoryError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def http_status_code(self):
        """Gets the http_status_code of this RepositoryError.

        Error codes. Matches the definition of HTTP status codes.

        :return: The http_status_code of this RepositoryError.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this RepositoryError.

        Error codes. Matches the definition of HTTP status codes.

        :param http_status_code: The http_status_code of this RepositoryError.
        :type http_status_code: int
        """

        self._http_status_code = http_status_code

    @property
    def type(self):
        """Gets the type of this RepositoryError.

        The type of error.

        :return: The type of this RepositoryError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepositoryError.

        The type of error.

        :param type: The type of this RepositoryError.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "NETWORK_ERROR", "DNS_ERROR", "CONNECTION_ERROR", "AUTHENTICATION_ERROR", "AUTHORIZATION_ERROR", "SERVER_ERROR", "QUOTA_EXCEEDED", "SERVICE_UNAVAILABLE", "CLIENT_ERROR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
