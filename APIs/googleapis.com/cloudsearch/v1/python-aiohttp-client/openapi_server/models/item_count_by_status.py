# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemCountByStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, indexed_items_count: str=None, status_code: str=None):
        """ItemCountByStatus - a model defined in OpenAPI

        :param count: The count of this ItemCountByStatus.
        :param indexed_items_count: The indexed_items_count of this ItemCountByStatus.
        :param status_code: The status_code of this ItemCountByStatus.
        """
        self.openapi_types = {
            'count': str,
            'indexed_items_count': str,
            'status_code': str
        }

        self.attribute_map = {
            'count': 'count',
            'indexed_items_count': 'indexedItemsCount',
            'status_code': 'statusCode'
        }

        self._count = count
        self._indexed_items_count = indexed_items_count
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemCountByStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemCountByStatus of this ItemCountByStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ItemCountByStatus.

        Number of items matching the status code.

        :return: The count of this ItemCountByStatus.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ItemCountByStatus.

        Number of items matching the status code.

        :param count: The count of this ItemCountByStatus.
        :type count: str
        """

        self._count = count

    @property
    def indexed_items_count(self):
        """Gets the indexed_items_count of this ItemCountByStatus.

        Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.

        :return: The indexed_items_count of this ItemCountByStatus.
        :rtype: str
        """
        return self._indexed_items_count

    @indexed_items_count.setter
    def indexed_items_count(self, indexed_items_count):
        """Sets the indexed_items_count of this ItemCountByStatus.

        Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.

        :param indexed_items_count: The indexed_items_count of this ItemCountByStatus.
        :type indexed_items_count: str
        """

        self._indexed_items_count = indexed_items_count

    @property
    def status_code(self):
        """Gets the status_code of this ItemCountByStatus.

        Status of the items.

        :return: The status_code of this ItemCountByStatus.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ItemCountByStatus.

        Status of the items.

        :param status_code: The status_code of this ItemCountByStatus.
        :type status_code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "ERROR", "MODIFIED", "NEW_ITEM", "ACCEPTED"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code
