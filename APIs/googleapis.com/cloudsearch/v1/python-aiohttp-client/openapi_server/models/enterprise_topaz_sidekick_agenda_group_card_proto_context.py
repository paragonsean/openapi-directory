# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseTopazSidekickAgendaGroupCardProtoContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, _date: str=None, events_restrict: str=None):
        """EnterpriseTopazSidekickAgendaGroupCardProtoContext - a model defined in OpenAPI

        :param context: The context of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :param _date: The _date of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :param events_restrict: The events_restrict of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        """
        self.openapi_types = {
            'context': str,
            '_date': str,
            'events_restrict': str
        }

        self.attribute_map = {
            'context': 'context',
            '_date': 'date',
            'events_restrict': 'eventsRestrict'
        }

        self._context = context
        self.__date = _date
        self._events_restrict = events_restrict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseTopazSidekickAgendaGroupCardProtoContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseTopazSidekickAgendaGroupCardProtoContext of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        User friendly free text that describes the context of the card (e.g. \"Next meeting with Bob\"). This is largely only applicable when the card is generated from a query.

        :return: The context of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        User friendly free text that describes the context of the card (e.g. \"Next meeting with Bob\"). This is largely only applicable when the card is generated from a query.

        :param context: The context of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :type context: str
        """

        self._context = context

    @property
    def _date(self):
        """Gets the _date of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        Localized free text that describes the dates represented by the card. Currently, the card will only represent a single day.

        :return: The _date of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        Localized free text that describes the dates represented by the card. Currently, the card will only represent a single day.

        :param _date: The _date of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :type _date: str
        """

        self.__date = _date

    @property
    def events_restrict(self):
        """Gets the events_restrict of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        Represents restrictions applied to the events requested in the user's query.

        :return: The events_restrict of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :rtype: str
        """
        return self._events_restrict

    @events_restrict.setter
    def events_restrict(self, events_restrict):
        """Sets the events_restrict of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.

        Represents restrictions applied to the events requested in the user's query.

        :param events_restrict: The events_restrict of this EnterpriseTopazSidekickAgendaGroupCardProtoContext.
        :type events_restrict: str
        """
        allowed_values = ["NONE", "NEXT_MEETING"]  # noqa: E501
        if events_restrict not in allowed_values:
            raise ValueError(
                "Invalid value for `events_restrict` ({0}), must be one of {1}"
                .format(events_restrict, allowed_values)
            )

        self._events_restrict = events_restrict
