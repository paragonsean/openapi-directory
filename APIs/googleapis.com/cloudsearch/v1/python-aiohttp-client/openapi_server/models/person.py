# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_address import EmailAddress
from openapi_server.models.name import Name
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.photo import Photo
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_addresses: List[EmailAddress]=None, name: str=None, obfuscated_id: str=None, person_names: List[Name]=None, phone_numbers: List[PhoneNumber]=None, photos: List[Photo]=None):
        """Person - a model defined in OpenAPI

        :param email_addresses: The email_addresses of this Person.
        :param name: The name of this Person.
        :param obfuscated_id: The obfuscated_id of this Person.
        :param person_names: The person_names of this Person.
        :param phone_numbers: The phone_numbers of this Person.
        :param photos: The photos of this Person.
        """
        self.openapi_types = {
            'email_addresses': List[EmailAddress],
            'name': str,
            'obfuscated_id': str,
            'person_names': List[Name],
            'phone_numbers': List[PhoneNumber],
            'photos': List[Photo]
        }

        self.attribute_map = {
            'email_addresses': 'emailAddresses',
            'name': 'name',
            'obfuscated_id': 'obfuscatedId',
            'person_names': 'personNames',
            'phone_numbers': 'phoneNumbers',
            'photos': 'photos'
        }

        self._email_addresses = email_addresses
        self._name = name
        self._obfuscated_id = obfuscated_id
        self._person_names = person_names
        self._phone_numbers = phone_numbers
        self._photos = photos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Person.

        The person's email addresses

        :return: The email_addresses of this Person.
        :rtype: List[EmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Person.

        The person's email addresses

        :param email_addresses: The email_addresses of this Person.
        :type email_addresses: List[EmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def name(self):
        """Gets the name of this Person.

        The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.

        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API.

        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def obfuscated_id(self):
        """Gets the obfuscated_id of this Person.

        Obfuscated ID of a person.

        :return: The obfuscated_id of this Person.
        :rtype: str
        """
        return self._obfuscated_id

    @obfuscated_id.setter
    def obfuscated_id(self, obfuscated_id):
        """Sets the obfuscated_id of this Person.

        Obfuscated ID of a person.

        :param obfuscated_id: The obfuscated_id of this Person.
        :type obfuscated_id: str
        """

        self._obfuscated_id = obfuscated_id

    @property
    def person_names(self):
        """Gets the person_names of this Person.

        The person's name

        :return: The person_names of this Person.
        :rtype: List[Name]
        """
        return self._person_names

    @person_names.setter
    def person_names(self, person_names):
        """Sets the person_names of this Person.

        The person's name

        :param person_names: The person_names of this Person.
        :type person_names: List[Name]
        """

        self._person_names = person_names

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Person.

        The person's phone numbers

        :return: The phone_numbers of this Person.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Person.

        The person's phone numbers

        :param phone_numbers: The phone_numbers of this Person.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def photos(self):
        """Gets the photos of this Person.

        A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.

        :return: The photos of this Person.
        :rtype: List[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Person.

        A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results.

        :param photos: The photos of this Person.
        :type photos: List[Photo]
        """

        self._photos = photos
