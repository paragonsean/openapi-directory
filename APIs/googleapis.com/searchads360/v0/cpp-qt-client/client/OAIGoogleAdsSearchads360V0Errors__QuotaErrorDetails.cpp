/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::~OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails() {}

void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::initializeModel() {

    m_rate_name_isSet = false;
    m_rate_name_isValid = false;

    m_rate_scope_isSet = false;
    m_rate_scope_isValid = false;

    m_retry_delay_isSet = false;
    m_retry_delay_isValid = false;
}

void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::fromJsonObject(QJsonObject json) {

    m_rate_name_isValid = ::OpenAPI::fromJsonValue(m_rate_name, json[QString("rateName")]);
    m_rate_name_isSet = !json[QString("rateName")].isNull() && m_rate_name_isValid;

    m_rate_scope_isValid = ::OpenAPI::fromJsonValue(m_rate_scope, json[QString("rateScope")]);
    m_rate_scope_isSet = !json[QString("rateScope")].isNull() && m_rate_scope_isValid;

    m_retry_delay_isValid = ::OpenAPI::fromJsonValue(m_retry_delay, json[QString("retryDelay")]);
    m_retry_delay_isSet = !json[QString("retryDelay")].isNull() && m_retry_delay_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_rate_name_isSet) {
        obj.insert(QString("rateName"), ::OpenAPI::toJsonValue(m_rate_name));
    }
    if (m_rate_scope_isSet) {
        obj.insert(QString("rateScope"), ::OpenAPI::toJsonValue(m_rate_scope));
    }
    if (m_retry_delay_isSet) {
        obj.insert(QString("retryDelay"), ::OpenAPI::toJsonValue(m_retry_delay));
    }
    return obj;
}

QString OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::getRateName() const {
    return m_rate_name;
}
void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::setRateName(const QString &rate_name) {
    m_rate_name = rate_name;
    m_rate_name_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_rate_name_Set() const{
    return m_rate_name_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_rate_name_Valid() const{
    return m_rate_name_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::getRateScope() const {
    return m_rate_scope;
}
void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::setRateScope(const QString &rate_scope) {
    m_rate_scope = rate_scope;
    m_rate_scope_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_rate_scope_Set() const{
    return m_rate_scope_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_rate_scope_Valid() const{
    return m_rate_scope_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::getRetryDelay() const {
    return m_retry_delay;
}
void OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::setRetryDelay(const QString &retry_delay) {
    m_retry_delay = retry_delay;
    m_retry_delay_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_retry_delay_Set() const{
    return m_retry_delay_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::is_retry_delay_Valid() const{
    return m_retry_delay_isValid;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_delay_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Errors__QuotaErrorDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
