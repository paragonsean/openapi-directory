/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::~OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset() {}

void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::initializeModel() {

    m_business_profile_locations_isSet = false;
    m_business_profile_locations_isValid = false;

    m_location_ownership_type_isSet = false;
    m_location_ownership_type_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;
}

void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::fromJsonObject(QJsonObject json) {

    m_business_profile_locations_isValid = ::OpenAPI::fromJsonValue(m_business_profile_locations, json[QString("businessProfileLocations")]);
    m_business_profile_locations_isSet = !json[QString("businessProfileLocations")].isNull() && m_business_profile_locations_isValid;

    m_location_ownership_type_isValid = ::OpenAPI::fromJsonValue(m_location_ownership_type, json[QString("locationOwnershipType")]);
    m_location_ownership_type_isSet = !json[QString("locationOwnershipType")].isNull() && m_location_ownership_type_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_business_profile_locations.size() > 0) {
        obj.insert(QString("businessProfileLocations"), ::OpenAPI::toJsonValue(m_business_profile_locations));
    }
    if (m_location_ownership_type_isSet) {
        obj.insert(QString("locationOwnershipType"), ::OpenAPI::toJsonValue(m_location_ownership_type));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    return obj;
}

QList<OAIGoogleAdsSearchads360V0Common__BusinessProfileLocation> OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::getBusinessProfileLocations() const {
    return m_business_profile_locations;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::setBusinessProfileLocations(const QList<OAIGoogleAdsSearchads360V0Common__BusinessProfileLocation> &business_profile_locations) {
    m_business_profile_locations = business_profile_locations;
    m_business_profile_locations_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_business_profile_locations_Set() const{
    return m_business_profile_locations_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_business_profile_locations_Valid() const{
    return m_business_profile_locations_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::getLocationOwnershipType() const {
    return m_location_ownership_type;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::setLocationOwnershipType(const QString &location_ownership_type) {
    m_location_ownership_type = location_ownership_type;
    m_location_ownership_type_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_location_ownership_type_Set() const{
    return m_location_ownership_type_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_location_ownership_type_Valid() const{
    return m_location_ownership_type_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::getPlaceId() const {
    return m_place_id;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::is_place_id_Valid() const{
    return m_place_id_isValid;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_profile_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ownership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedLocationAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
