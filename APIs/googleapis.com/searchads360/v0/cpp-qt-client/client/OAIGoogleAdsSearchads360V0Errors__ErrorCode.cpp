/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Errors__ErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Errors__ErrorCode::OAIGoogleAdsSearchads360V0Errors__ErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Errors__ErrorCode::OAIGoogleAdsSearchads360V0Errors__ErrorCode() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Errors__ErrorCode::~OAIGoogleAdsSearchads360V0Errors__ErrorCode() {}

void OAIGoogleAdsSearchads360V0Errors__ErrorCode::initializeModel() {

    m_authentication_error_isSet = false;
    m_authentication_error_isValid = false;

    m_authorization_error_isSet = false;
    m_authorization_error_isValid = false;

    m_custom_column_error_isSet = false;
    m_custom_column_error_isValid = false;

    m_date_error_isSet = false;
    m_date_error_isValid = false;

    m_date_range_error_isSet = false;
    m_date_range_error_isValid = false;

    m_distinct_error_isSet = false;
    m_distinct_error_isValid = false;

    m_header_error_isSet = false;
    m_header_error_isValid = false;

    m_internal_error_isSet = false;
    m_internal_error_isValid = false;

    m_invalid_parameter_error_isSet = false;
    m_invalid_parameter_error_isValid = false;

    m_query_error_isSet = false;
    m_query_error_isValid = false;

    m_quota_error_isSet = false;
    m_quota_error_isValid = false;

    m_request_error_isSet = false;
    m_request_error_isValid = false;

    m_size_limit_error_isSet = false;
    m_size_limit_error_isValid = false;
}

void OAIGoogleAdsSearchads360V0Errors__ErrorCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Errors__ErrorCode::fromJsonObject(QJsonObject json) {

    m_authentication_error_isValid = ::OpenAPI::fromJsonValue(m_authentication_error, json[QString("authenticationError")]);
    m_authentication_error_isSet = !json[QString("authenticationError")].isNull() && m_authentication_error_isValid;

    m_authorization_error_isValid = ::OpenAPI::fromJsonValue(m_authorization_error, json[QString("authorizationError")]);
    m_authorization_error_isSet = !json[QString("authorizationError")].isNull() && m_authorization_error_isValid;

    m_custom_column_error_isValid = ::OpenAPI::fromJsonValue(m_custom_column_error, json[QString("customColumnError")]);
    m_custom_column_error_isSet = !json[QString("customColumnError")].isNull() && m_custom_column_error_isValid;

    m_date_error_isValid = ::OpenAPI::fromJsonValue(m_date_error, json[QString("dateError")]);
    m_date_error_isSet = !json[QString("dateError")].isNull() && m_date_error_isValid;

    m_date_range_error_isValid = ::OpenAPI::fromJsonValue(m_date_range_error, json[QString("dateRangeError")]);
    m_date_range_error_isSet = !json[QString("dateRangeError")].isNull() && m_date_range_error_isValid;

    m_distinct_error_isValid = ::OpenAPI::fromJsonValue(m_distinct_error, json[QString("distinctError")]);
    m_distinct_error_isSet = !json[QString("distinctError")].isNull() && m_distinct_error_isValid;

    m_header_error_isValid = ::OpenAPI::fromJsonValue(m_header_error, json[QString("headerError")]);
    m_header_error_isSet = !json[QString("headerError")].isNull() && m_header_error_isValid;

    m_internal_error_isValid = ::OpenAPI::fromJsonValue(m_internal_error, json[QString("internalError")]);
    m_internal_error_isSet = !json[QString("internalError")].isNull() && m_internal_error_isValid;

    m_invalid_parameter_error_isValid = ::OpenAPI::fromJsonValue(m_invalid_parameter_error, json[QString("invalidParameterError")]);
    m_invalid_parameter_error_isSet = !json[QString("invalidParameterError")].isNull() && m_invalid_parameter_error_isValid;

    m_query_error_isValid = ::OpenAPI::fromJsonValue(m_query_error, json[QString("queryError")]);
    m_query_error_isSet = !json[QString("queryError")].isNull() && m_query_error_isValid;

    m_quota_error_isValid = ::OpenAPI::fromJsonValue(m_quota_error, json[QString("quotaError")]);
    m_quota_error_isSet = !json[QString("quotaError")].isNull() && m_quota_error_isValid;

    m_request_error_isValid = ::OpenAPI::fromJsonValue(m_request_error, json[QString("requestError")]);
    m_request_error_isSet = !json[QString("requestError")].isNull() && m_request_error_isValid;

    m_size_limit_error_isValid = ::OpenAPI::fromJsonValue(m_size_limit_error, json[QString("sizeLimitError")]);
    m_size_limit_error_isSet = !json[QString("sizeLimitError")].isNull() && m_size_limit_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Errors__ErrorCode::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_error_isSet) {
        obj.insert(QString("authenticationError"), ::OpenAPI::toJsonValue(m_authentication_error));
    }
    if (m_authorization_error_isSet) {
        obj.insert(QString("authorizationError"), ::OpenAPI::toJsonValue(m_authorization_error));
    }
    if (m_custom_column_error_isSet) {
        obj.insert(QString("customColumnError"), ::OpenAPI::toJsonValue(m_custom_column_error));
    }
    if (m_date_error_isSet) {
        obj.insert(QString("dateError"), ::OpenAPI::toJsonValue(m_date_error));
    }
    if (m_date_range_error_isSet) {
        obj.insert(QString("dateRangeError"), ::OpenAPI::toJsonValue(m_date_range_error));
    }
    if (m_distinct_error_isSet) {
        obj.insert(QString("distinctError"), ::OpenAPI::toJsonValue(m_distinct_error));
    }
    if (m_header_error_isSet) {
        obj.insert(QString("headerError"), ::OpenAPI::toJsonValue(m_header_error));
    }
    if (m_internal_error_isSet) {
        obj.insert(QString("internalError"), ::OpenAPI::toJsonValue(m_internal_error));
    }
    if (m_invalid_parameter_error_isSet) {
        obj.insert(QString("invalidParameterError"), ::OpenAPI::toJsonValue(m_invalid_parameter_error));
    }
    if (m_query_error_isSet) {
        obj.insert(QString("queryError"), ::OpenAPI::toJsonValue(m_query_error));
    }
    if (m_quota_error_isSet) {
        obj.insert(QString("quotaError"), ::OpenAPI::toJsonValue(m_quota_error));
    }
    if (m_request_error_isSet) {
        obj.insert(QString("requestError"), ::OpenAPI::toJsonValue(m_request_error));
    }
    if (m_size_limit_error_isSet) {
        obj.insert(QString("sizeLimitError"), ::OpenAPI::toJsonValue(m_size_limit_error));
    }
    return obj;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getAuthenticationError() const {
    return m_authentication_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setAuthenticationError(const QString &authentication_error) {
    m_authentication_error = authentication_error;
    m_authentication_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_authentication_error_Set() const{
    return m_authentication_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_authentication_error_Valid() const{
    return m_authentication_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getAuthorizationError() const {
    return m_authorization_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setAuthorizationError(const QString &authorization_error) {
    m_authorization_error = authorization_error;
    m_authorization_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_authorization_error_Set() const{
    return m_authorization_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_authorization_error_Valid() const{
    return m_authorization_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getCustomColumnError() const {
    return m_custom_column_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setCustomColumnError(const QString &custom_column_error) {
    m_custom_column_error = custom_column_error;
    m_custom_column_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_custom_column_error_Set() const{
    return m_custom_column_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_custom_column_error_Valid() const{
    return m_custom_column_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getDateError() const {
    return m_date_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setDateError(const QString &date_error) {
    m_date_error = date_error;
    m_date_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_date_error_Set() const{
    return m_date_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_date_error_Valid() const{
    return m_date_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getDateRangeError() const {
    return m_date_range_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setDateRangeError(const QString &date_range_error) {
    m_date_range_error = date_range_error;
    m_date_range_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_date_range_error_Set() const{
    return m_date_range_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_date_range_error_Valid() const{
    return m_date_range_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getDistinctError() const {
    return m_distinct_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setDistinctError(const QString &distinct_error) {
    m_distinct_error = distinct_error;
    m_distinct_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_distinct_error_Set() const{
    return m_distinct_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_distinct_error_Valid() const{
    return m_distinct_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getHeaderError() const {
    return m_header_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setHeaderError(const QString &header_error) {
    m_header_error = header_error;
    m_header_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_header_error_Set() const{
    return m_header_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_header_error_Valid() const{
    return m_header_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getInternalError() const {
    return m_internal_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setInternalError(const QString &internal_error) {
    m_internal_error = internal_error;
    m_internal_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_internal_error_Set() const{
    return m_internal_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_internal_error_Valid() const{
    return m_internal_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getInvalidParameterError() const {
    return m_invalid_parameter_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setInvalidParameterError(const QString &invalid_parameter_error) {
    m_invalid_parameter_error = invalid_parameter_error;
    m_invalid_parameter_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_invalid_parameter_error_Set() const{
    return m_invalid_parameter_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_invalid_parameter_error_Valid() const{
    return m_invalid_parameter_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getQueryError() const {
    return m_query_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setQueryError(const QString &query_error) {
    m_query_error = query_error;
    m_query_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_query_error_Set() const{
    return m_query_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_query_error_Valid() const{
    return m_query_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getQuotaError() const {
    return m_quota_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setQuotaError(const QString &quota_error) {
    m_quota_error = quota_error;
    m_quota_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_quota_error_Set() const{
    return m_quota_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_quota_error_Valid() const{
    return m_quota_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getRequestError() const {
    return m_request_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setRequestError(const QString &request_error) {
    m_request_error = request_error;
    m_request_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_request_error_Set() const{
    return m_request_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_request_error_Valid() const{
    return m_request_error_isValid;
}

QString OAIGoogleAdsSearchads360V0Errors__ErrorCode::getSizeLimitError() const {
    return m_size_limit_error;
}
void OAIGoogleAdsSearchads360V0Errors__ErrorCode::setSizeLimitError(const QString &size_limit_error) {
    m_size_limit_error = size_limit_error;
    m_size_limit_error_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_size_limit_error_Set() const{
    return m_size_limit_error_isSet;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::is_size_limit_error_Valid() const{
    return m_size_limit_error_isValid;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_column_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinct_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_parameter_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_limit_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Errors__ErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
