/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Resources__BiddingStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::OAIGoogleAdsSearchads360V0Resources__BiddingStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::OAIGoogleAdsSearchads360V0Resources__BiddingStrategy() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::~OAIGoogleAdsSearchads360V0Resources__BiddingStrategy() {}

void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::initializeModel() {

    m_campaign_count_isSet = false;
    m_campaign_count_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_effective_currency_code_isSet = false;
    m_effective_currency_code_isValid = false;

    m_enhanced_cpc_isSet = false;
    m_enhanced_cpc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_maximize_conversion_value_isSet = false;
    m_maximize_conversion_value_isValid = false;

    m_maximize_conversions_isSet = false;
    m_maximize_conversions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_removed_campaign_count_isSet = false;
    m_non_removed_campaign_count_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_cpa_isSet = false;
    m_target_cpa_isValid = false;

    m_target_impression_share_isSet = false;
    m_target_impression_share_isValid = false;

    m_target_outrank_share_isSet = false;
    m_target_outrank_share_isValid = false;

    m_target_roas_isSet = false;
    m_target_roas_isValid = false;

    m_target_spend_isSet = false;
    m_target_spend_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::fromJsonObject(QJsonObject json) {

    m_campaign_count_isValid = ::OpenAPI::fromJsonValue(m_campaign_count, json[QString("campaignCount")]);
    m_campaign_count_isSet = !json[QString("campaignCount")].isNull() && m_campaign_count_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_effective_currency_code_isValid = ::OpenAPI::fromJsonValue(m_effective_currency_code, json[QString("effectiveCurrencyCode")]);
    m_effective_currency_code_isSet = !json[QString("effectiveCurrencyCode")].isNull() && m_effective_currency_code_isValid;

    m_enhanced_cpc_isValid = ::OpenAPI::fromJsonValue(m_enhanced_cpc, json[QString("enhancedCpc")]);
    m_enhanced_cpc_isSet = !json[QString("enhancedCpc")].isNull() && m_enhanced_cpc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_maximize_conversion_value_isValid = ::OpenAPI::fromJsonValue(m_maximize_conversion_value, json[QString("maximizeConversionValue")]);
    m_maximize_conversion_value_isSet = !json[QString("maximizeConversionValue")].isNull() && m_maximize_conversion_value_isValid;

    m_maximize_conversions_isValid = ::OpenAPI::fromJsonValue(m_maximize_conversions, json[QString("maximizeConversions")]);
    m_maximize_conversions_isSet = !json[QString("maximizeConversions")].isNull() && m_maximize_conversions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_removed_campaign_count_isValid = ::OpenAPI::fromJsonValue(m_non_removed_campaign_count, json[QString("nonRemovedCampaignCount")]);
    m_non_removed_campaign_count_isSet = !json[QString("nonRemovedCampaignCount")].isNull() && m_non_removed_campaign_count_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_cpa_isValid = ::OpenAPI::fromJsonValue(m_target_cpa, json[QString("targetCpa")]);
    m_target_cpa_isSet = !json[QString("targetCpa")].isNull() && m_target_cpa_isValid;

    m_target_impression_share_isValid = ::OpenAPI::fromJsonValue(m_target_impression_share, json[QString("targetImpressionShare")]);
    m_target_impression_share_isSet = !json[QString("targetImpressionShare")].isNull() && m_target_impression_share_isValid;

    m_target_outrank_share_isValid = ::OpenAPI::fromJsonValue(m_target_outrank_share, json[QString("targetOutrankShare")]);
    m_target_outrank_share_isSet = !json[QString("targetOutrankShare")].isNull() && m_target_outrank_share_isValid;

    m_target_roas_isValid = ::OpenAPI::fromJsonValue(m_target_roas, json[QString("targetRoas")]);
    m_target_roas_isSet = !json[QString("targetRoas")].isNull() && m_target_roas_isValid;

    m_target_spend_isValid = ::OpenAPI::fromJsonValue(m_target_spend, json[QString("targetSpend")]);
    m_target_spend_isSet = !json[QString("targetSpend")].isNull() && m_target_spend_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_count_isSet) {
        obj.insert(QString("campaignCount"), ::OpenAPI::toJsonValue(m_campaign_count));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_effective_currency_code_isSet) {
        obj.insert(QString("effectiveCurrencyCode"), ::OpenAPI::toJsonValue(m_effective_currency_code));
    }
    if (m_enhanced_cpc_isSet) {
        obj.insert(QString("enhancedCpc"), ::OpenAPI::toJsonValue(m_enhanced_cpc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_maximize_conversion_value.isSet()) {
        obj.insert(QString("maximizeConversionValue"), ::OpenAPI::toJsonValue(m_maximize_conversion_value));
    }
    if (m_maximize_conversions.isSet()) {
        obj.insert(QString("maximizeConversions"), ::OpenAPI::toJsonValue(m_maximize_conversions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_removed_campaign_count_isSet) {
        obj.insert(QString("nonRemovedCampaignCount"), ::OpenAPI::toJsonValue(m_non_removed_campaign_count));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_cpa.isSet()) {
        obj.insert(QString("targetCpa"), ::OpenAPI::toJsonValue(m_target_cpa));
    }
    if (m_target_impression_share.isSet()) {
        obj.insert(QString("targetImpressionShare"), ::OpenAPI::toJsonValue(m_target_impression_share));
    }
    if (m_target_outrank_share.isSet()) {
        obj.insert(QString("targetOutrankShare"), ::OpenAPI::toJsonValue(m_target_outrank_share));
    }
    if (m_target_roas.isSet()) {
        obj.insert(QString("targetRoas"), ::OpenAPI::toJsonValue(m_target_roas));
    }
    if (m_target_spend.isSet()) {
        obj.insert(QString("targetSpend"), ::OpenAPI::toJsonValue(m_target_spend));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getCampaignCount() const {
    return m_campaign_count;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setCampaignCount(const QString &campaign_count) {
    m_campaign_count = campaign_count;
    m_campaign_count_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_campaign_count_Set() const{
    return m_campaign_count_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_campaign_count_Valid() const{
    return m_campaign_count_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getEffectiveCurrencyCode() const {
    return m_effective_currency_code;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setEffectiveCurrencyCode(const QString &effective_currency_code) {
    m_effective_currency_code = effective_currency_code;
    m_effective_currency_code_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_effective_currency_code_Set() const{
    return m_effective_currency_code_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_effective_currency_code_Valid() const{
    return m_effective_currency_code_isValid;
}

OAIObject OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getEnhancedCpc() const {
    return m_enhanced_cpc;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setEnhancedCpc(const OAIObject &enhanced_cpc) {
    m_enhanced_cpc = enhanced_cpc;
    m_enhanced_cpc_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_enhanced_cpc_Set() const{
    return m_enhanced_cpc_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_enhanced_cpc_Valid() const{
    return m_enhanced_cpc_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getId() const {
    return m_id;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_id_Valid() const{
    return m_id_isValid;
}

OAIGoogleAdsSearchads360V0Common__MaximizeConversionValue OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getMaximizeConversionValue() const {
    return m_maximize_conversion_value;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setMaximizeConversionValue(const OAIGoogleAdsSearchads360V0Common__MaximizeConversionValue &maximize_conversion_value) {
    m_maximize_conversion_value = maximize_conversion_value;
    m_maximize_conversion_value_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_maximize_conversion_value_Set() const{
    return m_maximize_conversion_value_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_maximize_conversion_value_Valid() const{
    return m_maximize_conversion_value_isValid;
}

OAIGoogleAdsSearchads360V0Common__MaximizeConversions OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getMaximizeConversions() const {
    return m_maximize_conversions;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setMaximizeConversions(const OAIGoogleAdsSearchads360V0Common__MaximizeConversions &maximize_conversions) {
    m_maximize_conversions = maximize_conversions;
    m_maximize_conversions_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_maximize_conversions_Set() const{
    return m_maximize_conversions_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_maximize_conversions_Valid() const{
    return m_maximize_conversions_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getName() const {
    return m_name;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getNonRemovedCampaignCount() const {
    return m_non_removed_campaign_count;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setNonRemovedCampaignCount(const QString &non_removed_campaign_count) {
    m_non_removed_campaign_count = non_removed_campaign_count;
    m_non_removed_campaign_count_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_non_removed_campaign_count_Set() const{
    return m_non_removed_campaign_count_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_non_removed_campaign_count_Valid() const{
    return m_non_removed_campaign_count_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getResourceName() const {
    return m_resource_name;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getStatus() const {
    return m_status;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_status_Valid() const{
    return m_status_isValid;
}

OAIGoogleAdsSearchads360V0Common__TargetCpa OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getTargetCpa() const {
    return m_target_cpa;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setTargetCpa(const OAIGoogleAdsSearchads360V0Common__TargetCpa &target_cpa) {
    m_target_cpa = target_cpa;
    m_target_cpa_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_cpa_Set() const{
    return m_target_cpa_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_cpa_Valid() const{
    return m_target_cpa_isValid;
}

OAIGoogleAdsSearchads360V0Common__TargetImpressionShare OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getTargetImpressionShare() const {
    return m_target_impression_share;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setTargetImpressionShare(const OAIGoogleAdsSearchads360V0Common__TargetImpressionShare &target_impression_share) {
    m_target_impression_share = target_impression_share;
    m_target_impression_share_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_impression_share_Set() const{
    return m_target_impression_share_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_impression_share_Valid() const{
    return m_target_impression_share_isValid;
}

OAIGoogleAdsSearchads360V0Common__TargetOutrankShare OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getTargetOutrankShare() const {
    return m_target_outrank_share;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setTargetOutrankShare(const OAIGoogleAdsSearchads360V0Common__TargetOutrankShare &target_outrank_share) {
    m_target_outrank_share = target_outrank_share;
    m_target_outrank_share_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_outrank_share_Set() const{
    return m_target_outrank_share_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_outrank_share_Valid() const{
    return m_target_outrank_share_isValid;
}

OAIGoogleAdsSearchads360V0Common__TargetRoas OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getTargetRoas() const {
    return m_target_roas;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setTargetRoas(const OAIGoogleAdsSearchads360V0Common__TargetRoas &target_roas) {
    m_target_roas = target_roas;
    m_target_roas_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_roas_Set() const{
    return m_target_roas_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_roas_Valid() const{
    return m_target_roas_isValid;
}

OAIGoogleAdsSearchads360V0Common__TargetSpend OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getTargetSpend() const {
    return m_target_spend;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setTargetSpend(const OAIGoogleAdsSearchads360V0Common__TargetSpend &target_spend) {
    m_target_spend = target_spend;
    m_target_spend_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_spend_Set() const{
    return m_target_spend_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_target_spend_Valid() const{
    return m_target_spend_isValid;
}

QString OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::getType() const {
    return m_type;
}
void OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_cpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximize_conversion_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximize_conversions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_removed_campaign_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cpa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_impression_share.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_outrank_share.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_roas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Resources__BiddingStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
