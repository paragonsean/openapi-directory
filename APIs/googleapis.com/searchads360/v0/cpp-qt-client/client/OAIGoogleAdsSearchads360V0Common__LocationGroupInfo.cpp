/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Common__LocationGroupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::OAIGoogleAdsSearchads360V0Common__LocationGroupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::OAIGoogleAdsSearchads360V0Common__LocationGroupInfo() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::~OAIGoogleAdsSearchads360V0Common__LocationGroupInfo() {}

void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::initializeModel() {

    m_feed_item_sets_isSet = false;
    m_feed_item_sets_isValid = false;

    m_geo_target_constants_isSet = false;
    m_geo_target_constants_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_radius_units_isSet = false;
    m_radius_units_isValid = false;
}

void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::fromJsonObject(QJsonObject json) {

    m_feed_item_sets_isValid = ::OpenAPI::fromJsonValue(m_feed_item_sets, json[QString("feedItemSets")]);
    m_feed_item_sets_isSet = !json[QString("feedItemSets")].isNull() && m_feed_item_sets_isValid;

    m_geo_target_constants_isValid = ::OpenAPI::fromJsonValue(m_geo_target_constants, json[QString("geoTargetConstants")]);
    m_geo_target_constants_isSet = !json[QString("geoTargetConstants")].isNull() && m_geo_target_constants_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_radius_units_isValid = ::OpenAPI::fromJsonValue(m_radius_units, json[QString("radiusUnits")]);
    m_radius_units_isSet = !json[QString("radiusUnits")].isNull() && m_radius_units_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_item_sets.size() > 0) {
        obj.insert(QString("feedItemSets"), ::OpenAPI::toJsonValue(m_feed_item_sets));
    }
    if (m_geo_target_constants.size() > 0) {
        obj.insert(QString("geoTargetConstants"), ::OpenAPI::toJsonValue(m_geo_target_constants));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_radius_units_isSet) {
        obj.insert(QString("radiusUnits"), ::OpenAPI::toJsonValue(m_radius_units));
    }
    return obj;
}

QList<QString> OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::getFeedItemSets() const {
    return m_feed_item_sets;
}
void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::setFeedItemSets(const QList<QString> &feed_item_sets) {
    m_feed_item_sets = feed_item_sets;
    m_feed_item_sets_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_feed_item_sets_Set() const{
    return m_feed_item_sets_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_feed_item_sets_Valid() const{
    return m_feed_item_sets_isValid;
}

QList<QString> OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::getGeoTargetConstants() const {
    return m_geo_target_constants;
}
void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::setGeoTargetConstants(const QList<QString> &geo_target_constants) {
    m_geo_target_constants = geo_target_constants;
    m_geo_target_constants_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_geo_target_constants_Set() const{
    return m_geo_target_constants_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_geo_target_constants_Valid() const{
    return m_geo_target_constants_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::getRadius() const {
    return m_radius;
}
void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::setRadius(const QString &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_radius_Valid() const{
    return m_radius_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::getRadiusUnits() const {
    return m_radius_units;
}
void OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::setRadiusUnits(const QString &radius_units) {
    m_radius_units = radius_units;
    m_radius_units_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_radius_units_Set() const{
    return m_radius_units_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::is_radius_units_Valid() const{
    return m_radius_units_isValid;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_item_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_target_constants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Common__LocationGroupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
