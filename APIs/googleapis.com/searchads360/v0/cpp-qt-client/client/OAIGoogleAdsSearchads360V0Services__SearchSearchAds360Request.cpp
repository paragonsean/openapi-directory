/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::~OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request() {}

void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::initializeModel() {

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_return_total_results_count_isSet = false;
    m_return_total_results_count_isValid = false;

    m_summary_row_setting_isSet = false;
    m_summary_row_setting_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::fromJsonObject(QJsonObject json) {

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_return_total_results_count_isValid = ::OpenAPI::fromJsonValue(m_return_total_results_count, json[QString("returnTotalResultsCount")]);
    m_return_total_results_count_isSet = !json[QString("returnTotalResultsCount")].isNull() && m_return_total_results_count_isValid;

    m_summary_row_setting_isValid = ::OpenAPI::fromJsonValue(m_summary_row_setting, json[QString("summaryRowSetting")]);
    m_summary_row_setting_isSet = !json[QString("summaryRowSetting")].isNull() && m_summary_row_setting_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::asJsonObject() const {
    QJsonObject obj;
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_return_total_results_count_isSet) {
        obj.insert(QString("returnTotalResultsCount"), ::OpenAPI::toJsonValue(m_return_total_results_count));
    }
    if (m_summary_row_setting_isSet) {
        obj.insert(QString("summaryRowSetting"), ::OpenAPI::toJsonValue(m_summary_row_setting));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

qint32 OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::getPageSize() const {
    return m_page_size;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::getPageToken() const {
    return m_page_token;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::getQuery() const {
    return m_query;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::isReturnTotalResultsCount() const {
    return m_return_total_results_count;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setReturnTotalResultsCount(const bool &return_total_results_count) {
    m_return_total_results_count = return_total_results_count;
    m_return_total_results_count_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_return_total_results_count_Set() const{
    return m_return_total_results_count_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_return_total_results_count_Valid() const{
    return m_return_total_results_count_isValid;
}

QString OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::getSummaryRowSetting() const {
    return m_summary_row_setting;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setSummaryRowSetting(const QString &summary_row_setting) {
    m_summary_row_setting = summary_row_setting;
    m_summary_row_setting_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_summary_row_setting_Set() const{
    return m_summary_row_setting_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_summary_row_setting_Valid() const{
    return m_summary_row_setting_isValid;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_total_results_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_row_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Services__SearchSearchAds360Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
