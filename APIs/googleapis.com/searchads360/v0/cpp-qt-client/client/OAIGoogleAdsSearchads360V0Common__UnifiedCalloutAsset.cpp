/**
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset() {
    this->initializeModel();
}

OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::~OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset() {}

void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::initializeModel() {

    m_ad_schedule_targets_isSet = false;
    m_ad_schedule_targets_isValid = false;

    m_callout_text_isSet = false;
    m_callout_text_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_use_searcher_time_zone_isSet = false;
    m_use_searcher_time_zone_isValid = false;
}

void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::fromJsonObject(QJsonObject json) {

    m_ad_schedule_targets_isValid = ::OpenAPI::fromJsonValue(m_ad_schedule_targets, json[QString("adScheduleTargets")]);
    m_ad_schedule_targets_isSet = !json[QString("adScheduleTargets")].isNull() && m_ad_schedule_targets_isValid;

    m_callout_text_isValid = ::OpenAPI::fromJsonValue(m_callout_text, json[QString("calloutText")]);
    m_callout_text_isSet = !json[QString("calloutText")].isNull() && m_callout_text_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_use_searcher_time_zone_isValid = ::OpenAPI::fromJsonValue(m_use_searcher_time_zone, json[QString("useSearcherTimeZone")]);
    m_use_searcher_time_zone_isSet = !json[QString("useSearcherTimeZone")].isNull() && m_use_searcher_time_zone_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_schedule_targets.size() > 0) {
        obj.insert(QString("adScheduleTargets"), ::OpenAPI::toJsonValue(m_ad_schedule_targets));
    }
    if (m_callout_text_isSet) {
        obj.insert(QString("calloutText"), ::OpenAPI::toJsonValue(m_callout_text));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_use_searcher_time_zone_isSet) {
        obj.insert(QString("useSearcherTimeZone"), ::OpenAPI::toJsonValue(m_use_searcher_time_zone));
    }
    return obj;
}

QList<OAIGoogleAdsSearchads360V0Common__AdScheduleInfo> OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::getAdScheduleTargets() const {
    return m_ad_schedule_targets;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::setAdScheduleTargets(const QList<OAIGoogleAdsSearchads360V0Common__AdScheduleInfo> &ad_schedule_targets) {
    m_ad_schedule_targets = ad_schedule_targets;
    m_ad_schedule_targets_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_ad_schedule_targets_Set() const{
    return m_ad_schedule_targets_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_ad_schedule_targets_Valid() const{
    return m_ad_schedule_targets_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::getCalloutText() const {
    return m_callout_text;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::setCalloutText(const QString &callout_text) {
    m_callout_text = callout_text;
    m_callout_text_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_callout_text_Set() const{
    return m_callout_text_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_callout_text_Valid() const{
    return m_callout_text_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::getEndDate() const {
    return m_end_date;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::getStartDate() const {
    return m_start_date;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::isUseSearcherTimeZone() const {
    return m_use_searcher_time_zone;
}
void OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::setUseSearcherTimeZone(const bool &use_searcher_time_zone) {
    m_use_searcher_time_zone = use_searcher_time_zone;
    m_use_searcher_time_zone_isSet = true;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_use_searcher_time_zone_Set() const{
    return m_use_searcher_time_zone_isSet;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::is_use_searcher_time_zone_Valid() const{
    return m_use_searcher_time_zone_isValid;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_schedule_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_callout_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_searcher_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAdsSearchads360V0Common__UnifiedCalloutAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
