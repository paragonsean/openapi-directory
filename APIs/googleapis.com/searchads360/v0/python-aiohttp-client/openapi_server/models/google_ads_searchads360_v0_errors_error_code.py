# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0ErrorsErrorCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_error: str=None, authorization_error: str=None, custom_column_error: str=None, date_error: str=None, date_range_error: str=None, distinct_error: str=None, header_error: str=None, internal_error: str=None, invalid_parameter_error: str=None, query_error: str=None, quota_error: str=None, request_error: str=None, size_limit_error: str=None):
        """GoogleAdsSearchads360V0ErrorsErrorCode - a model defined in OpenAPI

        :param authentication_error: The authentication_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param authorization_error: The authorization_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param custom_column_error: The custom_column_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param date_error: The date_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param date_range_error: The date_range_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param distinct_error: The distinct_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param header_error: The header_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param internal_error: The internal_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param invalid_parameter_error: The invalid_parameter_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param query_error: The query_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param quota_error: The quota_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param request_error: The request_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :param size_limit_error: The size_limit_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        """
        self.openapi_types = {
            'authentication_error': str,
            'authorization_error': str,
            'custom_column_error': str,
            'date_error': str,
            'date_range_error': str,
            'distinct_error': str,
            'header_error': str,
            'internal_error': str,
            'invalid_parameter_error': str,
            'query_error': str,
            'quota_error': str,
            'request_error': str,
            'size_limit_error': str
        }

        self.attribute_map = {
            'authentication_error': 'authenticationError',
            'authorization_error': 'authorizationError',
            'custom_column_error': 'customColumnError',
            'date_error': 'dateError',
            'date_range_error': 'dateRangeError',
            'distinct_error': 'distinctError',
            'header_error': 'headerError',
            'internal_error': 'internalError',
            'invalid_parameter_error': 'invalidParameterError',
            'query_error': 'queryError',
            'quota_error': 'quotaError',
            'request_error': 'requestError',
            'size_limit_error': 'sizeLimitError'
        }

        self._authentication_error = authentication_error
        self._authorization_error = authorization_error
        self._custom_column_error = custom_column_error
        self._date_error = date_error
        self._date_range_error = date_range_error
        self._distinct_error = distinct_error
        self._header_error = header_error
        self._internal_error = internal_error
        self._invalid_parameter_error = invalid_parameter_error
        self._query_error = query_error
        self._quota_error = quota_error
        self._request_error = request_error
        self._size_limit_error = size_limit_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0ErrorsErrorCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Errors__ErrorCode of this GoogleAdsSearchads360V0ErrorsErrorCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_error(self):
        """Gets the authentication_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        Indicates failure to properly authenticate user.

        :return: The authentication_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._authentication_error

    @authentication_error.setter
    def authentication_error(self, authentication_error):
        """Sets the authentication_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        Indicates failure to properly authenticate user.

        :param authentication_error: The authentication_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type authentication_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "AUTHENTICATION_ERROR", "CLIENT_CUSTOMER_ID_INVALID", "CUSTOMER_NOT_FOUND", "GOOGLE_ACCOUNT_DELETED", "GOOGLE_ACCOUNT_COOKIE_INVALID", "GOOGLE_ACCOUNT_AUTHENTICATION_FAILED", "GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH", "LOGIN_COOKIE_REQUIRED", "NOT_ADS_USER", "OAUTH_TOKEN_INVALID", "OAUTH_TOKEN_EXPIRED", "OAUTH_TOKEN_DISABLED", "OAUTH_TOKEN_REVOKED", "OAUTH_TOKEN_HEADER_INVALID", "LOGIN_COOKIE_INVALID", "USER_ID_INVALID", "TWO_STEP_VERIFICATION_NOT_ENROLLED", "ADVANCED_PROTECTION_NOT_ENROLLED"]  # noqa: E501
        if authentication_error not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_error` ({0}), must be one of {1}"
                .format(authentication_error, allowed_values)
            )

        self._authentication_error = authentication_error

    @property
    def authorization_error(self):
        """Gets the authorization_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error encountered when trying to authorize a user.

        :return: The authorization_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._authorization_error

    @authorization_error.setter
    def authorization_error(self, authorization_error):
        """Sets the authorization_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error encountered when trying to authorize a user.

        :param authorization_error: The authorization_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type authorization_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "USER_PERMISSION_DENIED", "PROJECT_DISABLED", "AUTHORIZATION_ERROR", "ACTION_NOT_PERMITTED", "INCOMPLETE_SIGNUP", "CUSTOMER_NOT_ENABLED", "MISSING_TOS", "INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION", "SERVICE_ACCESS_DENIED", "ACCESS_DENIED_FOR_ACCOUNT_TYPE", "METRIC_ACCESS_DENIED"]  # noqa: E501
        if authorization_error not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_error` ({0}), must be one of {1}"
                .format(authorization_error, allowed_values)
            )

        self._authorization_error = authorization_error

    @property
    def custom_column_error(self):
        """Gets the custom_column_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the custom column error

        :return: The custom_column_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._custom_column_error

    @custom_column_error.setter
    def custom_column_error(self, custom_column_error):
        """Sets the custom_column_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the custom column error

        :param custom_column_error: The custom_column_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type custom_column_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "CUSTOM_COLUMN_NOT_FOUND", "CUSTOM_COLUMN_NOT_AVAILABLE"]  # noqa: E501
        if custom_column_error not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_column_error` ({0}), must be one of {1}"
                .format(custom_column_error, allowed_values)
            )

        self._custom_column_error = custom_column_error

    @property
    def date_error(self):
        """Gets the date_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the date error

        :return: The date_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._date_error

    @date_error.setter
    def date_error(self, date_error):
        """Sets the date_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the date error

        :param date_error: The date_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type date_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "INVALID_FIELD_VALUES_IN_DATE", "INVALID_FIELD_VALUES_IN_DATE_TIME", "INVALID_STRING_DATE", "INVALID_STRING_DATE_TIME_MICROS", "INVALID_STRING_DATE_TIME_SECONDS", "INVALID_STRING_DATE_TIME_SECONDS_WITH_OFFSET", "EARLIER_THAN_MINIMUM_DATE", "LATER_THAN_MAXIMUM_DATE", "DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE", "DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL"]  # noqa: E501
        if date_error not in allowed_values:
            raise ValueError(
                "Invalid value for `date_error` ({0}), must be one of {1}"
                .format(date_error, allowed_values)
            )

        self._date_error = date_error

    @property
    def date_range_error(self):
        """Gets the date_range_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the date range error

        :return: The date_range_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._date_range_error

    @date_range_error.setter
    def date_range_error(self, date_range_error):
        """Sets the date_range_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the date range error

        :param date_range_error: The date_range_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type date_range_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "INVALID_DATE", "START_DATE_AFTER_END_DATE", "CANNOT_SET_DATE_TO_PAST", "AFTER_MAXIMUM_ALLOWABLE_DATE", "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED"]  # noqa: E501
        if date_range_error not in allowed_values:
            raise ValueError(
                "Invalid value for `date_range_error` ({0}), must be one of {1}"
                .format(date_range_error, allowed_values)
            )

        self._date_range_error = date_range_error

    @property
    def distinct_error(self):
        """Gets the distinct_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the distinct error

        :return: The distinct_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._distinct_error

    @distinct_error.setter
    def distinct_error(self, distinct_error):
        """Sets the distinct_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the distinct error

        :param distinct_error: The distinct_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type distinct_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "DUPLICATE_ELEMENT", "DUPLICATE_TYPE"]  # noqa: E501
        if distinct_error not in allowed_values:
            raise ValueError(
                "Invalid value for `distinct_error` ({0}), must be one of {1}"
                .format(distinct_error, allowed_values)
            )

        self._distinct_error = distinct_error

    @property
    def header_error(self):
        """Gets the header_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the header error.

        :return: The header_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._header_error

    @header_error.setter
    def header_error(self, header_error):
        """Sets the header_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the header error.

        :param header_error: The header_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type header_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "INVALID_USER_SELECTED_CUSTOMER_ID", "INVALID_LOGIN_CUSTOMER_ID"]  # noqa: E501
        if header_error not in allowed_values:
            raise ValueError(
                "Invalid value for `header_error` ({0}), must be one of {1}"
                .format(header_error, allowed_values)
            )

        self._header_error = header_error

    @property
    def internal_error(self):
        """Gets the internal_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An unexpected server-side error.

        :return: The internal_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._internal_error

    @internal_error.setter
    def internal_error(self, internal_error):
        """Sets the internal_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An unexpected server-side error.

        :param internal_error: The internal_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type internal_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "INTERNAL_ERROR", "ERROR_CODE_NOT_PUBLISHED", "TRANSIENT_ERROR", "DEADLINE_EXCEEDED"]  # noqa: E501
        if internal_error not in allowed_values:
            raise ValueError(
                "Invalid value for `internal_error` ({0}), must be one of {1}"
                .format(internal_error, allowed_values)
            )

        self._internal_error = internal_error

    @property
    def invalid_parameter_error(self):
        """Gets the invalid_parameter_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for invalid parameter errors.

        :return: The invalid_parameter_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._invalid_parameter_error

    @invalid_parameter_error.setter
    def invalid_parameter_error(self, invalid_parameter_error):
        """Sets the invalid_parameter_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for invalid parameter errors.

        :param invalid_parameter_error: The invalid_parameter_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type invalid_parameter_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "INVALID_CURRENCY_CODE"]  # noqa: E501
        if invalid_parameter_error not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_parameter_error` ({0}), must be one of {1}"
                .format(invalid_parameter_error, allowed_values)
            )

        self._invalid_parameter_error = invalid_parameter_error

    @property
    def query_error(self):
        """Gets the query_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error with the query

        :return: The query_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._query_error

    @query_error.setter
    def query_error(self, query_error):
        """Sets the query_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error with the query

        :param query_error: The query_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type query_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "QUERY_ERROR", "BAD_ENUM_CONSTANT", "BAD_ESCAPE_SEQUENCE", "BAD_FIELD_NAME", "BAD_LIMIT_VALUE", "BAD_NUMBER", "BAD_OPERATOR", "BAD_PARAMETER_NAME", "BAD_PARAMETER_VALUE", "BAD_RESOURCE_TYPE_IN_FROM_CLAUSE", "BAD_SYMBOL", "BAD_VALUE", "DATE_RANGE_TOO_WIDE", "DATE_RANGE_TOO_NARROW", "EXPECTED_AND", "EXPECTED_BY", "EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE", "EXPECTED_FILTERS_ON_DATE_RANGE", "EXPECTED_FROM", "EXPECTED_LIST", "EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE", "EXPECTED_SELECT", "EXPECTED_SINGLE_VALUE", "EXPECTED_VALUE_WITH_BETWEEN_OPERATOR", "INVALID_DATE_FORMAT", "MISALIGNED_DATE_FOR_FILTER", "INVALID_STRING_VALUE", "INVALID_VALUE_WITH_BETWEEN_OPERATOR", "INVALID_VALUE_WITH_DURING_OPERATOR", "INVALID_VALUE_WITH_LIKE_OPERATOR", "OPERATOR_FIELD_MISMATCH", "PROHIBITED_EMPTY_LIST_IN_CONDITION", "PROHIBITED_ENUM_CONSTANT", "PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE", "PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE", "PROHIBITED_FIELD_IN_SELECT_CLAUSE", "PROHIBITED_FIELD_IN_WHERE_CLAUSE", "PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE", "PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE", "PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE", "PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE", "PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE", "PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE", "LIMIT_VALUE_TOO_LOW", "PROHIBITED_NEWLINE_IN_STRING", "PROHIBITED_VALUE_COMBINATION_IN_LIST", "PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR", "STRING_NOT_TERMINATED", "TOO_MANY_SEGMENTS", "UNEXPECTED_END_OF_QUERY", "UNEXPECTED_FROM_CLAUSE", "UNRECOGNIZED_FIELD", "UNEXPECTED_INPUT", "REQUESTED_METRICS_FOR_MANAGER", "FILTER_HAS_TOO_MANY_VALUES"]  # noqa: E501
        if query_error not in allowed_values:
            raise ValueError(
                "Invalid value for `query_error` ({0}), must be one of {1}"
                .format(query_error, allowed_values)
            )

        self._query_error = query_error

    @property
    def quota_error(self):
        """Gets the quota_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error with the amount of quota remaining.

        :return: The quota_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._quota_error

    @quota_error.setter
    def quota_error(self, quota_error):
        """Sets the quota_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error with the amount of quota remaining.

        :param quota_error: The quota_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type quota_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "RESOURCE_EXHAUSTED", "RESOURCE_TEMPORARILY_EXHAUSTED"]  # noqa: E501
        if quota_error not in allowed_values:
            raise ValueError(
                "Invalid value for `quota_error` ({0}), must be one of {1}"
                .format(quota_error, allowed_values)
            )

        self._quota_error = quota_error

    @property
    def request_error(self):
        """Gets the request_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error caused by the request

        :return: The request_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._request_error

    @request_error.setter
    def request_error(self, request_error):
        """Sets the request_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        An error caused by the request

        :param request_error: The request_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type request_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "RESOURCE_NAME_MISSING", "RESOURCE_NAME_MALFORMED", "BAD_RESOURCE_ID", "INVALID_PRODUCT_NAME", "INVALID_CUSTOMER_ID", "OPERATION_REQUIRED", "RESOURCE_NOT_FOUND", "INVALID_PAGE_TOKEN", "EXPIRED_PAGE_TOKEN", "INVALID_PAGE_SIZE", "REQUIRED_FIELD_MISSING", "IMMUTABLE_FIELD", "TOO_MANY_MUTATE_OPERATIONS", "CANNOT_BE_EXECUTED_BY_MANAGER_ACCOUNT", "CANNOT_MODIFY_FOREIGN_FIELD", "INVALID_ENUM_VALUE", "LOGIN_CUSTOMER_ID_PARAMETER_MISSING", "LOGIN_OR_LINKED_CUSTOMER_ID_PARAMETER_REQUIRED", "VALIDATE_ONLY_REQUEST_HAS_PAGE_TOKEN", "CANNOT_RETURN_SUMMARY_ROW_FOR_REQUEST_WITHOUT_METRICS", "CANNOT_RETURN_SUMMARY_ROW_FOR_VALIDATE_ONLY_REQUESTS", "INCONSISTENT_RETURN_SUMMARY_ROW_VALUE", "TOTAL_RESULTS_COUNT_NOT_ORIGINALLY_REQUESTED", "RPC_DEADLINE_TOO_SHORT", "PRODUCT_NOT_SUPPORTED"]  # noqa: E501
        if request_error not in allowed_values:
            raise ValueError(
                "Invalid value for `request_error` ({0}), must be one of {1}"
                .format(request_error, allowed_values)
            )

        self._request_error = request_error

    @property
    def size_limit_error(self):
        """Gets the size_limit_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the size limit error

        :return: The size_limit_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :rtype: str
        """
        return self._size_limit_error

    @size_limit_error.setter
    def size_limit_error(self, size_limit_error):
        """Sets the size_limit_error of this GoogleAdsSearchads360V0ErrorsErrorCode.

        The reasons for the size limit error

        :param size_limit_error: The size_limit_error of this GoogleAdsSearchads360V0ErrorsErrorCode.
        :type size_limit_error: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "REQUEST_SIZE_LIMIT_EXCEEDED", "RESPONSE_SIZE_LIMIT_EXCEEDED"]  # noqa: E501
        if size_limit_error not in allowed_values:
            raise ValueError(
                "Invalid value for `size_limit_error` ({0}), must be one of {1}"
                .format(size_limit_error, allowed_values)
            )

        self._size_limit_error = size_limit_error
