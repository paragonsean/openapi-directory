# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0CommonTargetRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bid_only: bool=None, targeting_dimension: str=None):
        """GoogleAdsSearchads360V0CommonTargetRestriction - a model defined in OpenAPI

        :param bid_only: The bid_only of this GoogleAdsSearchads360V0CommonTargetRestriction.
        :param targeting_dimension: The targeting_dimension of this GoogleAdsSearchads360V0CommonTargetRestriction.
        """
        self.openapi_types = {
            'bid_only': bool,
            'targeting_dimension': str
        }

        self.attribute_map = {
            'bid_only': 'bidOnly',
            'targeting_dimension': 'targetingDimension'
        }

        self._bid_only = bid_only
        self._targeting_dimension = targeting_dimension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0CommonTargetRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Common__TargetRestriction of this GoogleAdsSearchads360V0CommonTargetRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_only(self):
        """Gets the bid_only of this GoogleAdsSearchads360V0CommonTargetRestriction.

        Indicates whether to restrict your ads to show only for the criteria you have selected for this targeting_dimension, or to target all values for this targeting_dimension and show ads based on your targeting in other TargetingDimensions. A value of `true` means that these criteria will only apply bid modifiers, and not affect targeting. A value of `false` means that these criteria will restrict targeting as well as applying bid modifiers.

        :return: The bid_only of this GoogleAdsSearchads360V0CommonTargetRestriction.
        :rtype: bool
        """
        return self._bid_only

    @bid_only.setter
    def bid_only(self, bid_only):
        """Sets the bid_only of this GoogleAdsSearchads360V0CommonTargetRestriction.

        Indicates whether to restrict your ads to show only for the criteria you have selected for this targeting_dimension, or to target all values for this targeting_dimension and show ads based on your targeting in other TargetingDimensions. A value of `true` means that these criteria will only apply bid modifiers, and not affect targeting. A value of `false` means that these criteria will restrict targeting as well as applying bid modifiers.

        :param bid_only: The bid_only of this GoogleAdsSearchads360V0CommonTargetRestriction.
        :type bid_only: bool
        """

        self._bid_only = bid_only

    @property
    def targeting_dimension(self):
        """Gets the targeting_dimension of this GoogleAdsSearchads360V0CommonTargetRestriction.

        The targeting dimension that these settings apply to.

        :return: The targeting_dimension of this GoogleAdsSearchads360V0CommonTargetRestriction.
        :rtype: str
        """
        return self._targeting_dimension

    @targeting_dimension.setter
    def targeting_dimension(self, targeting_dimension):
        """Sets the targeting_dimension of this GoogleAdsSearchads360V0CommonTargetRestriction.

        The targeting dimension that these settings apply to.

        :param targeting_dimension: The targeting_dimension of this GoogleAdsSearchads360V0CommonTargetRestriction.
        :type targeting_dimension: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "KEYWORD", "AUDIENCE", "TOPIC", "GENDER", "AGE_RANGE", "PLACEMENT", "PARENTAL_STATUS", "INCOME_RANGE"]  # noqa: E501
        if targeting_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `targeting_dimension` ({0}), must be one of {1}"
                .format(targeting_dimension, allowed_values)
            )

        self._targeting_dimension = targeting_dimension
