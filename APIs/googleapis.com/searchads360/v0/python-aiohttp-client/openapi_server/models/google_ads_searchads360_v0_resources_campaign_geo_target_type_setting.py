# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negative_geo_target_type: str=None, positive_geo_target_type: str=None):
        """GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting - a model defined in OpenAPI

        :param negative_geo_target_type: The negative_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        :param positive_geo_target_type: The positive_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        """
        self.openapi_types = {
            'negative_geo_target_type': str,
            'positive_geo_target_type': str
        }

        self.attribute_map = {
            'negative_geo_target_type': 'negativeGeoTargetType',
            'positive_geo_target_type': 'positiveGeoTargetType'
        }

        self._negative_geo_target_type = negative_geo_target_type
        self._positive_geo_target_type = positive_geo_target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Resources_Campaign_GeoTargetTypeSetting of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negative_geo_target_type(self):
        """Gets the negative_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.

        The setting used for negative geotargeting in this particular campaign.

        :return: The negative_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        :rtype: str
        """
        return self._negative_geo_target_type

    @negative_geo_target_type.setter
    def negative_geo_target_type(self, negative_geo_target_type):
        """Sets the negative_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.

        The setting used for negative geotargeting in this particular campaign.

        :param negative_geo_target_type: The negative_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        :type negative_geo_target_type: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "PRESENCE_OR_INTEREST", "PRESENCE"]  # noqa: E501
        if negative_geo_target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `negative_geo_target_type` ({0}), must be one of {1}"
                .format(negative_geo_target_type, allowed_values)
            )

        self._negative_geo_target_type = negative_geo_target_type

    @property
    def positive_geo_target_type(self):
        """Gets the positive_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.

        The setting used for positive geotargeting in this particular campaign.

        :return: The positive_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        :rtype: str
        """
        return self._positive_geo_target_type

    @positive_geo_target_type.setter
    def positive_geo_target_type(self, positive_geo_target_type):
        """Sets the positive_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.

        The setting used for positive geotargeting in this particular campaign.

        :param positive_geo_target_type: The positive_geo_target_type of this GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.
        :type positive_geo_target_type: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "PRESENCE_OR_INTEREST", "SEARCH_INTEREST", "PRESENCE"]  # noqa: E501
        if positive_geo_target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `positive_geo_target_type` ({0}), must be one of {1}"
                .format(positive_geo_target_type, allowed_values)
            )

        self._positive_geo_target_type = positive_geo_target_type
