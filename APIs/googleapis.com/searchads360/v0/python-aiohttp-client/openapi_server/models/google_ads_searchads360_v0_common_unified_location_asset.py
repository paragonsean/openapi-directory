# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_ads_searchads360_v0_common_business_profile_location import GoogleAdsSearchads360V0CommonBusinessProfileLocation
from openapi_server import util


class GoogleAdsSearchads360V0CommonUnifiedLocationAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_profile_locations: List[GoogleAdsSearchads360V0CommonBusinessProfileLocation]=None, location_ownership_type: str=None, place_id: str=None):
        """GoogleAdsSearchads360V0CommonUnifiedLocationAsset - a model defined in OpenAPI

        :param business_profile_locations: The business_profile_locations of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :param location_ownership_type: The location_ownership_type of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :param place_id: The place_id of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        """
        self.openapi_types = {
            'business_profile_locations': List[GoogleAdsSearchads360V0CommonBusinessProfileLocation],
            'location_ownership_type': str,
            'place_id': str
        }

        self.attribute_map = {
            'business_profile_locations': 'businessProfileLocations',
            'location_ownership_type': 'locationOwnershipType',
            'place_id': 'placeId'
        }

        self._business_profile_locations = business_profile_locations
        self._location_ownership_type = location_ownership_type
        self._place_id = place_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0CommonUnifiedLocationAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Common__UnifiedLocationAsset of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_profile_locations(self):
        """Gets the business_profile_locations of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        The list of business locations for the customer. This will only be returned if the Location Asset is syncing from the Business Profile account. It is possible to have multiple Business Profile listings under the same account that point to the same Place ID.

        :return: The business_profile_locations of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :rtype: List[GoogleAdsSearchads360V0CommonBusinessProfileLocation]
        """
        return self._business_profile_locations

    @business_profile_locations.setter
    def business_profile_locations(self, business_profile_locations):
        """Sets the business_profile_locations of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        The list of business locations for the customer. This will only be returned if the Location Asset is syncing from the Business Profile account. It is possible to have multiple Business Profile listings under the same account that point to the same Place ID.

        :param business_profile_locations: The business_profile_locations of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :type business_profile_locations: List[GoogleAdsSearchads360V0CommonBusinessProfileLocation]
        """

        self._business_profile_locations = business_profile_locations

    @property
    def location_ownership_type(self):
        """Gets the location_ownership_type of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        The type of location ownership. If the type is BUSINESS_OWNER, it will be served as a location extension. If the type is AFFILIATE, it will be served as an affiliate location.

        :return: The location_ownership_type of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :rtype: str
        """
        return self._location_ownership_type

    @location_ownership_type.setter
    def location_ownership_type(self, location_ownership_type):
        """Sets the location_ownership_type of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        The type of location ownership. If the type is BUSINESS_OWNER, it will be served as a location extension. If the type is AFFILIATE, it will be served as an affiliate location.

        :param location_ownership_type: The location_ownership_type of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :type location_ownership_type: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "BUSINESS_OWNER", "AFFILIATE"]  # noqa: E501
        if location_ownership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_ownership_type` ({0}), must be one of {1}"
                .format(location_ownership_type, allowed_values)
            )

        self._location_ownership_type = location_ownership_type

    @property
    def place_id(self):
        """Gets the place_id of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        Place IDs uniquely identify a place in the Google Places database and on Google Maps. This field is unique for a given customer ID and asset type. See https://developers.google.com/places/web-service/place-id to learn more about Place ID.

        :return: The place_id of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.

        Place IDs uniquely identify a place in the Google Places database and on Google Maps. This field is unique for a given customer ID and asset type. See https://developers.google.com/places/web-service/place-id to learn more about Place ID.

        :param place_id: The place_id of this GoogleAdsSearchads360V0CommonUnifiedLocationAsset.
        :type place_id: str
        """

        self._place_id = place_id
