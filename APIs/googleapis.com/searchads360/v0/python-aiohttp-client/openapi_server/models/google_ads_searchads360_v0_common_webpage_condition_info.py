# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0CommonWebpageConditionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument: str=None, operand: str=None, operator: str=None):
        """GoogleAdsSearchads360V0CommonWebpageConditionInfo - a model defined in OpenAPI

        :param argument: The argument of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :param operand: The operand of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :param operator: The operator of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        """
        self.openapi_types = {
            'argument': str,
            'operand': str,
            'operator': str
        }

        self.attribute_map = {
            'argument': 'argument',
            'operand': 'operand',
            'operator': 'operator'
        }

        self._argument = argument
        self._operand = operand
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0CommonWebpageConditionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Common__WebpageConditionInfo of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument(self):
        """Gets the argument of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Argument of webpage targeting condition.

        :return: The argument of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :rtype: str
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Argument of webpage targeting condition.

        :param argument: The argument of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :type argument: str
        """

        self._argument = argument

    @property
    def operand(self):
        """Gets the operand of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Operand of webpage targeting condition.

        :return: The operand of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """Sets the operand of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Operand of webpage targeting condition.

        :param operand: The operand of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :type operand: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "URL", "CATEGORY", "PAGE_TITLE", "PAGE_CONTENT", "CUSTOM_LABEL"]  # noqa: E501
        if operand not in allowed_values:
            raise ValueError(
                "Invalid value for `operand` ({0}), must be one of {1}"
                .format(operand, allowed_values)
            )

        self._operand = operand

    @property
    def operator(self):
        """Gets the operator of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Operator of webpage targeting condition.

        :return: The operator of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.

        Operator of webpage targeting condition.

        :param operator: The operator of this GoogleAdsSearchads360V0CommonWebpageConditionInfo.
        :type operator: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "EQUALS", "CONTAINS"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
