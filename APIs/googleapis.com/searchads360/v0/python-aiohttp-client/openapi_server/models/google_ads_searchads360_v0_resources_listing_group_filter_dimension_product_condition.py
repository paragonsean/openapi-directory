# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None):
        """GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition - a model defined in OpenAPI

        :param condition: The condition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.
        """
        self.openapi_types = {
            'condition': str
        }

        self.attribute_map = {
            'condition': 'condition'
        }

        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Resources_ListingGroupFilterDimension_ProductCondition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.

        Value of the condition.

        :return: The condition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.

        Value of the condition.

        :param condition: The condition of this GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.
        :type condition: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "NEW", "REFURBISHED", "USED"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"
                .format(condition, allowed_values)
            )

        self._condition = condition
