# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAdsSearchads360V0CommonLocationGroupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed_item_sets: List[str]=None, geo_target_constants: List[str]=None, radius: str=None, radius_units: str=None):
        """GoogleAdsSearchads360V0CommonLocationGroupInfo - a model defined in OpenAPI

        :param feed_item_sets: The feed_item_sets of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :param geo_target_constants: The geo_target_constants of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :param radius: The radius of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :param radius_units: The radius_units of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        """
        self.openapi_types = {
            'feed_item_sets': List[str],
            'geo_target_constants': List[str],
            'radius': str,
            'radius_units': str
        }

        self.attribute_map = {
            'feed_item_sets': 'feedItemSets',
            'geo_target_constants': 'geoTargetConstants',
            'radius': 'radius',
            'radius_units': 'radiusUnits'
        }

        self._feed_item_sets = feed_item_sets
        self._geo_target_constants = geo_target_constants
        self._radius = radius
        self._radius_units = radius_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAdsSearchads360V0CommonLocationGroupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAdsSearchads360V0Common__LocationGroupInfo of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed_item_sets(self):
        """Gets the feed_item_sets of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        FeedItemSets whose FeedItems are targeted. If multiple IDs are specified, then all items that appear in at least one set are targeted. This field cannot be used with geo_target_constants. This is optional and can only be set in CREATE operations.

        :return: The feed_item_sets of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :rtype: List[str]
        """
        return self._feed_item_sets

    @feed_item_sets.setter
    def feed_item_sets(self, feed_item_sets):
        """Sets the feed_item_sets of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        FeedItemSets whose FeedItems are targeted. If multiple IDs are specified, then all items that appear in at least one set are targeted. This field cannot be used with geo_target_constants. This is optional and can only be set in CREATE operations.

        :param feed_item_sets: The feed_item_sets of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :type feed_item_sets: List[str]
        """

        self._feed_item_sets = feed_item_sets

    @property
    def geo_target_constants(self):
        """Gets the geo_target_constants of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Geo target constant(s) restricting the scope of the geographic area within the feed. Currently only one geo target constant is allowed.

        :return: The geo_target_constants of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :rtype: List[str]
        """
        return self._geo_target_constants

    @geo_target_constants.setter
    def geo_target_constants(self, geo_target_constants):
        """Sets the geo_target_constants of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Geo target constant(s) restricting the scope of the geographic area within the feed. Currently only one geo target constant is allowed.

        :param geo_target_constants: The geo_target_constants of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :type geo_target_constants: List[str]
        """

        self._geo_target_constants = geo_target_constants

    @property
    def radius(self):
        """Gets the radius of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Distance in units specifying the radius around targeted locations. This is required and must be set in CREATE operations.

        :return: The radius of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :rtype: str
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Distance in units specifying the radius around targeted locations. This is required and must be set in CREATE operations.

        :param radius: The radius of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :type radius: str
        """

        self._radius = radius

    @property
    def radius_units(self):
        """Gets the radius_units of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Unit of the radius. Miles and meters are supported for geo target constants. Milli miles and meters are supported for feed item sets. This is required and must be set in CREATE operations.

        :return: The radius_units of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :rtype: str
        """
        return self._radius_units

    @radius_units.setter
    def radius_units(self, radius_units):
        """Sets the radius_units of this GoogleAdsSearchads360V0CommonLocationGroupInfo.

        Unit of the radius. Miles and meters are supported for geo target constants. Milli miles and meters are supported for feed item sets. This is required and must be set in CREATE operations.

        :param radius_units: The radius_units of this GoogleAdsSearchads360V0CommonLocationGroupInfo.
        :type radius_units: str
        """
        allowed_values = ["UNSPECIFIED", "UNKNOWN", "METERS", "MILES", "MILLI_MILES"]  # noqa: E501
        if radius_units not in allowed_values:
            raise ValueError(
                "Invalid value for `radius_units` ({0}), must be one of {1}"
                .format(radius_units, allowed_values)
            )

        self._radius_units = radius_units
