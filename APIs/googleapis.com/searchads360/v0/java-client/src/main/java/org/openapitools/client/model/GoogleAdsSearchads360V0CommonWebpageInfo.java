/*
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAdsSearchads360V0CommonWebpageConditionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a criterion for targeting webpages of an advertiser&#39;s website.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:17.315010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAdsSearchads360V0CommonWebpageInfo {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleAdsSearchads360V0CommonWebpageConditionInfo> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVERAGE_PERCENTAGE = "coveragePercentage";
  @SerializedName(SERIALIZED_NAME_COVERAGE_PERCENTAGE)
  private Double coveragePercentage;

  public static final String SERIALIZED_NAME_CRITERION_NAME = "criterionName";
  @SerializedName(SERIALIZED_NAME_CRITERION_NAME)
  private String criterionName;

  public GoogleAdsSearchads360V0CommonWebpageInfo() {
  }

  public GoogleAdsSearchads360V0CommonWebpageInfo conditions(List<GoogleAdsSearchads360V0CommonWebpageConditionInfo> conditions) {
    this.conditions = conditions;
    return this;
  }

  public GoogleAdsSearchads360V0CommonWebpageInfo addConditionsItem(GoogleAdsSearchads360V0CommonWebpageConditionInfo conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions, or logical expressions, for webpage targeting. The list of webpage targeting conditions are and-ed together when evaluated for targeting. An empty list of conditions indicates all pages of the campaign&#39;s website are targeted. This field is required for CREATE operations and is prohibited on UPDATE operations.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleAdsSearchads360V0CommonWebpageConditionInfo> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleAdsSearchads360V0CommonWebpageConditionInfo> conditions) {
    this.conditions = conditions;
  }


  public GoogleAdsSearchads360V0CommonWebpageInfo coveragePercentage(Double coveragePercentage) {
    this.coveragePercentage = coveragePercentage;
    return this;
  }

  /**
   * Website criteria coverage percentage. This is the computed percentage of website coverage based on the website target, negative website target and negative keywords in the ad group and campaign. For instance, when coverage returns as 1, it indicates it has 100% coverage. This field is read-only.
   * @return coveragePercentage
   */
  @javax.annotation.Nullable
  public Double getCoveragePercentage() {
    return coveragePercentage;
  }

  public void setCoveragePercentage(Double coveragePercentage) {
    this.coveragePercentage = coveragePercentage;
  }


  public GoogleAdsSearchads360V0CommonWebpageInfo criterionName(String criterionName) {
    this.criterionName = criterionName;
    return this;
  }

  /**
   * The name of the criterion that is defined by this parameter. The name value will be used for identifying, sorting and filtering criteria with this type of parameters. This field is required for CREATE operations and is prohibited on UPDATE operations.
   * @return criterionName
   */
  @javax.annotation.Nullable
  public String getCriterionName() {
    return criterionName;
  }

  public void setCriterionName(String criterionName) {
    this.criterionName = criterionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAdsSearchads360V0CommonWebpageInfo googleAdsSearchads360V0CommonWebpageInfo = (GoogleAdsSearchads360V0CommonWebpageInfo) o;
    return Objects.equals(this.conditions, googleAdsSearchads360V0CommonWebpageInfo.conditions) &&
        Objects.equals(this.coveragePercentage, googleAdsSearchads360V0CommonWebpageInfo.coveragePercentage) &&
        Objects.equals(this.criterionName, googleAdsSearchads360V0CommonWebpageInfo.criterionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, coveragePercentage, criterionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAdsSearchads360V0CommonWebpageInfo {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    coveragePercentage: ").append(toIndentedString(coveragePercentage)).append("\n");
    sb.append("    criterionName: ").append(toIndentedString(criterionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("coveragePercentage");
    openapiFields.add("criterionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAdsSearchads360V0CommonWebpageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAdsSearchads360V0CommonWebpageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAdsSearchads360V0CommonWebpageInfo is not found in the empty JSON string", GoogleAdsSearchads360V0CommonWebpageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAdsSearchads360V0CommonWebpageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAdsSearchads360V0CommonWebpageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleAdsSearchads360V0CommonWebpageConditionInfo.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("criterionName") != null && !jsonObj.get("criterionName").isJsonNull()) && !jsonObj.get("criterionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criterionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criterionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAdsSearchads360V0CommonWebpageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAdsSearchads360V0CommonWebpageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAdsSearchads360V0CommonWebpageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAdsSearchads360V0CommonWebpageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAdsSearchads360V0CommonWebpageInfo>() {
           @Override
           public void write(JsonWriter out, GoogleAdsSearchads360V0CommonWebpageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAdsSearchads360V0CommonWebpageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAdsSearchads360V0CommonWebpageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAdsSearchads360V0CommonWebpageInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleAdsSearchads360V0CommonWebpageInfo
   */
  public static GoogleAdsSearchads360V0CommonWebpageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAdsSearchads360V0CommonWebpageInfo.class);
  }

  /**
   * Convert an instance of GoogleAdsSearchads360V0CommonWebpageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

