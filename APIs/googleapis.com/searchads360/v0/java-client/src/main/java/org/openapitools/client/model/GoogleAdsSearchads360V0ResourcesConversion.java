/*
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A conversion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:17.315010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAdsSearchads360V0ResourcesConversion {
  public static final String SERIALIZED_NAME_AD_ID = "adId";
  @SerializedName(SERIALIZED_NAME_AD_ID)
  private String adId;

  public static final String SERIALIZED_NAME_ADVERTISER_CONVERSION_ID = "advertiserConversionId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_CONVERSION_ID)
  private String advertiserConversionId;

  /**
   * Output only. Asset field type of the conversion event.
   */
  @JsonAdapter(AssetFieldTypeEnum.Adapter.class)
  public enum AssetFieldTypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    HEADLINE("HEADLINE"),
    
    DESCRIPTION("DESCRIPTION"),
    
    MANDATORY_AD_TEXT("MANDATORY_AD_TEXT"),
    
    MARKETING_IMAGE("MARKETING_IMAGE"),
    
    MEDIA_BUNDLE("MEDIA_BUNDLE"),
    
    YOUTUBE_VIDEO("YOUTUBE_VIDEO"),
    
    BOOK_ON_GOOGLE("BOOK_ON_GOOGLE"),
    
    LEAD_FORM("LEAD_FORM"),
    
    PROMOTION("PROMOTION"),
    
    CALLOUT("CALLOUT"),
    
    STRUCTURED_SNIPPET("STRUCTURED_SNIPPET"),
    
    SITELINK("SITELINK"),
    
    MOBILE_APP("MOBILE_APP"),
    
    HOTEL_CALLOUT("HOTEL_CALLOUT"),
    
    CALL("CALL"),
    
    PRICE("PRICE"),
    
    LONG_HEADLINE("LONG_HEADLINE"),
    
    BUSINESS_NAME("BUSINESS_NAME"),
    
    SQUARE_MARKETING_IMAGE("SQUARE_MARKETING_IMAGE"),
    
    PORTRAIT_MARKETING_IMAGE("PORTRAIT_MARKETING_IMAGE"),
    
    LOGO("LOGO"),
    
    LANDSCAPE_LOGO("LANDSCAPE_LOGO"),
    
    VIDEO("VIDEO"),
    
    CALL_TO_ACTION_SELECTION("CALL_TO_ACTION_SELECTION"),
    
    AD_IMAGE("AD_IMAGE"),
    
    BUSINESS_LOGO("BUSINESS_LOGO"),
    
    HOTEL_PROPERTY("HOTEL_PROPERTY");

    private String value;

    AssetFieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetFieldTypeEnum fromValue(String value) {
      for (AssetFieldTypeEnum b : AssetFieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetFieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetFieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetFieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetFieldTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetFieldTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_FIELD_TYPE = "assetFieldType";
  @SerializedName(SERIALIZED_NAME_ASSET_FIELD_TYPE)
  private AssetFieldTypeEnum assetFieldType;

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  /**
   * Output only. What the conversion is attributed to: Visit or Keyword+Ad.
   */
  @JsonAdapter(AttributionTypeEnum.Adapter.class)
  public enum AttributionTypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    VISIT("VISIT"),
    
    CRITERION_AD("CRITERION_AD");

    private String value;

    AttributionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributionTypeEnum fromValue(String value) {
      for (AttributionTypeEnum b : AttributionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttributionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTION_TYPE = "attributionType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_TYPE)
  private AttributionTypeEnum attributionType;

  public static final String SERIALIZED_NAME_CLICK_ID = "clickId";
  @SerializedName(SERIALIZED_NAME_CLICK_ID)
  private String clickId;

  public static final String SERIALIZED_NAME_CONVERSION_DATE_TIME = "conversionDateTime";
  @SerializedName(SERIALIZED_NAME_CONVERSION_DATE_TIME)
  private String conversionDateTime;

  public static final String SERIALIZED_NAME_CONVERSION_LAST_MODIFIED_DATE_TIME = "conversionLastModifiedDateTime";
  @SerializedName(SERIALIZED_NAME_CONVERSION_LAST_MODIFIED_DATE_TIME)
  private String conversionLastModifiedDateTime;

  public static final String SERIALIZED_NAME_CONVERSION_QUANTITY = "conversionQuantity";
  @SerializedName(SERIALIZED_NAME_CONVERSION_QUANTITY)
  private String conversionQuantity;

  public static final String SERIALIZED_NAME_CONVERSION_REVENUE_MICROS = "conversionRevenueMicros";
  @SerializedName(SERIALIZED_NAME_CONVERSION_REVENUE_MICROS)
  private String conversionRevenueMicros;

  public static final String SERIALIZED_NAME_CONVERSION_VISIT_DATE_TIME = "conversionVisitDateTime";
  @SerializedName(SERIALIZED_NAME_CONVERSION_VISIT_DATE_TIME)
  private String conversionVisitDateTime;

  public static final String SERIALIZED_NAME_CRITERION_ID = "criterionId";
  @SerializedName(SERIALIZED_NAME_CRITERION_ID)
  private String criterionId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ORDER_ID = "floodlightOrderId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ORDER_ID)
  private String floodlightOrderId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ORIGINAL_REVENUE = "floodlightOriginalRevenue";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ORIGINAL_REVENUE)
  private String floodlightOriginalRevenue;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  /**
   * Output only. The sales channel of the product that was clicked on: Online or Local.
   */
  @JsonAdapter(ProductChannelEnum.Adapter.class)
  public enum ProductChannelEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    ONLINE("ONLINE"),
    
    LOCAL("LOCAL");

    private String value;

    ProductChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductChannelEnum fromValue(String value) {
      for (ProductChannelEnum b : ProductChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_CHANNEL = "productChannel";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CHANNEL)
  private ProductChannelEnum productChannel;

  public static final String SERIALIZED_NAME_PRODUCT_COUNTRY_CODE = "productCountryCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COUNTRY_CODE)
  private String productCountryCode;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_LANGUAGE_CODE = "productLanguageCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LANGUAGE_CODE)
  private String productLanguageCode;

  public static final String SERIALIZED_NAME_PRODUCT_STORE_ID = "productStoreId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_STORE_ID)
  private String productStoreId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  /**
   * Output only. The status of the conversion, either ENABLED or REMOVED..
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    ENABLED("ENABLED"),
    
    REMOVED("REMOVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public GoogleAdsSearchads360V0ResourcesConversion() {
  }

  public GoogleAdsSearchads360V0ResourcesConversion(
     String adId, 
     String advertiserConversionId, 
     AssetFieldTypeEnum assetFieldType, 
     String assetId, 
     AttributionTypeEnum attributionType, 
     String clickId, 
     String conversionDateTime, 
     String conversionLastModifiedDateTime, 
     String conversionQuantity, 
     String conversionRevenueMicros, 
     String conversionVisitDateTime, 
     String criterionId, 
     String floodlightOrderId, 
     String floodlightOriginalRevenue, 
     String id, 
     String merchantId, 
     ProductChannelEnum productChannel, 
     String productCountryCode, 
     String productId, 
     String productLanguageCode, 
     String productStoreId, 
     String resourceName, 
     StatusEnum status, 
     String visitId
  ) {
    this();
    this.adId = adId;
    this.advertiserConversionId = advertiserConversionId;
    this.assetFieldType = assetFieldType;
    this.assetId = assetId;
    this.attributionType = attributionType;
    this.clickId = clickId;
    this.conversionDateTime = conversionDateTime;
    this.conversionLastModifiedDateTime = conversionLastModifiedDateTime;
    this.conversionQuantity = conversionQuantity;
    this.conversionRevenueMicros = conversionRevenueMicros;
    this.conversionVisitDateTime = conversionVisitDateTime;
    this.criterionId = criterionId;
    this.floodlightOrderId = floodlightOrderId;
    this.floodlightOriginalRevenue = floodlightOriginalRevenue;
    this.id = id;
    this.merchantId = merchantId;
    this.productChannel = productChannel;
    this.productCountryCode = productCountryCode;
    this.productId = productId;
    this.productLanguageCode = productLanguageCode;
    this.productStoreId = productStoreId;
    this.resourceName = resourceName;
    this.status = status;
    this.visitId = visitId;
  }

  /**
   * Output only. Ad ID. A value of 0 indicates that the ad is unattributed.
   * @return adId
   */
  @javax.annotation.Nullable
  public String getAdId() {
    return adId;
  }



  /**
   * Output only. For offline conversions, this is an ID provided by advertisers. If an advertiser doesn&#39;t specify such an ID, Search Ads 360 generates one. For online conversions, this is equal to the id column or the floodlight_order_id column depending on the advertiser&#39;s Floodlight instructions.
   * @return advertiserConversionId
   */
  @javax.annotation.Nullable
  public String getAdvertiserConversionId() {
    return advertiserConversionId;
  }



  /**
   * Output only. Asset field type of the conversion event.
   * @return assetFieldType
   */
  @javax.annotation.Nullable
  public AssetFieldTypeEnum getAssetFieldType() {
    return assetFieldType;
  }



  /**
   * Output only. ID of the asset which was interacted with during the conversion event.
   * @return assetId
   */
  @javax.annotation.Nullable
  public String getAssetId() {
    return assetId;
  }



  /**
   * Output only. What the conversion is attributed to: Visit or Keyword+Ad.
   * @return attributionType
   */
  @javax.annotation.Nullable
  public AttributionTypeEnum getAttributionType() {
    return attributionType;
  }



  /**
   * Output only. A unique string, for the visit that the conversion is attributed to, that is passed to the landing page as the click id URL parameter.
   * @return clickId
   */
  @javax.annotation.Nullable
  public String getClickId() {
    return clickId;
  }



  /**
   * Output only. The timestamp of the conversion event.
   * @return conversionDateTime
   */
  @javax.annotation.Nullable
  public String getConversionDateTime() {
    return conversionDateTime;
  }



  /**
   * Output only. The timestamp of the last time the conversion was modified.
   * @return conversionLastModifiedDateTime
   */
  @javax.annotation.Nullable
  public String getConversionLastModifiedDateTime() {
    return conversionLastModifiedDateTime;
  }



  /**
   * Output only. The quantity of items recorded by the conversion, as determined by the qty url parameter. The advertiser is responsible for dynamically populating the parameter (such as number of items sold in the conversion), otherwise it defaults to 1.
   * @return conversionQuantity
   */
  @javax.annotation.Nullable
  public String getConversionQuantity() {
    return conversionQuantity;
  }



  /**
   * Output only. The adjusted revenue in micros for the conversion event. This will always be in the currency of the serving account.
   * @return conversionRevenueMicros
   */
  @javax.annotation.Nullable
  public String getConversionRevenueMicros() {
    return conversionRevenueMicros;
  }



  /**
   * Output only. The timestamp of the visit that the conversion is attributed to.
   * @return conversionVisitDateTime
   */
  @javax.annotation.Nullable
  public String getConversionVisitDateTime() {
    return conversionVisitDateTime;
  }



  /**
   * Output only. Search Ads 360 criterion ID. A value of 0 indicates that the criterion is unattributed.
   * @return criterionId
   */
  @javax.annotation.Nullable
  public String getCriterionId() {
    return criterionId;
  }



  /**
   * Output only. The Floodlight order ID provided by the advertiser for the conversion.
   * @return floodlightOrderId
   */
  @javax.annotation.Nullable
  public String getFloodlightOrderId() {
    return floodlightOrderId;
  }



  /**
   * Output only. The original, unchanged revenue associated with the Floodlight event (in the currency of the current report), before Floodlight currency instruction modifications.
   * @return floodlightOriginalRevenue
   */
  @javax.annotation.Nullable
  public String getFloodlightOriginalRevenue() {
    return floodlightOriginalRevenue;
  }



  /**
   * Output only. The ID of the conversion
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Output only. The SearchAds360 inventory account ID containing the product that was clicked on. SearchAds360 generates this ID when you link an inventory account in SearchAds360.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }



  /**
   * Output only. The sales channel of the product that was clicked on: Online or Local.
   * @return productChannel
   */
  @javax.annotation.Nullable
  public ProductChannelEnum getProductChannel() {
    return productChannel;
  }



  /**
   * Output only. The country (ISO-3166-format) registered for the inventory feed that contains the product clicked on.
   * @return productCountryCode
   */
  @javax.annotation.Nullable
  public String getProductCountryCode() {
    return productCountryCode;
  }



  /**
   * Output only. The ID of the product clicked on.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }



  /**
   * Output only. The language (ISO-639-1) that has been set for the Merchant Center feed containing data about the product.
   * @return productLanguageCode
   */
  @javax.annotation.Nullable
  public String getProductLanguageCode() {
    return productLanguageCode;
  }



  /**
   * Output only. The store in the Local Inventory Ad that was clicked on. This should match the store IDs used in your local products feed.
   * @return productStoreId
   */
  @javax.annotation.Nullable
  public String getProductStoreId() {
    return productStoreId;
  }



  /**
   * Output only. The resource name of the conversion. Conversion resource names have the form: &#x60;customers/{customer_id}/conversions/{ad_group_id}~{criterion_id}~{ds_conversion_id}&#x60;
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }



  /**
   * Output only. The status of the conversion, either ENABLED or REMOVED..
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Output only. The SearchAds360 visit ID that the conversion is attributed to.
   * @return visitId
   */
  @javax.annotation.Nullable
  public String getVisitId() {
    return visitId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAdsSearchads360V0ResourcesConversion googleAdsSearchads360V0ResourcesConversion = (GoogleAdsSearchads360V0ResourcesConversion) o;
    return Objects.equals(this.adId, googleAdsSearchads360V0ResourcesConversion.adId) &&
        Objects.equals(this.advertiserConversionId, googleAdsSearchads360V0ResourcesConversion.advertiserConversionId) &&
        Objects.equals(this.assetFieldType, googleAdsSearchads360V0ResourcesConversion.assetFieldType) &&
        Objects.equals(this.assetId, googleAdsSearchads360V0ResourcesConversion.assetId) &&
        Objects.equals(this.attributionType, googleAdsSearchads360V0ResourcesConversion.attributionType) &&
        Objects.equals(this.clickId, googleAdsSearchads360V0ResourcesConversion.clickId) &&
        Objects.equals(this.conversionDateTime, googleAdsSearchads360V0ResourcesConversion.conversionDateTime) &&
        Objects.equals(this.conversionLastModifiedDateTime, googleAdsSearchads360V0ResourcesConversion.conversionLastModifiedDateTime) &&
        Objects.equals(this.conversionQuantity, googleAdsSearchads360V0ResourcesConversion.conversionQuantity) &&
        Objects.equals(this.conversionRevenueMicros, googleAdsSearchads360V0ResourcesConversion.conversionRevenueMicros) &&
        Objects.equals(this.conversionVisitDateTime, googleAdsSearchads360V0ResourcesConversion.conversionVisitDateTime) &&
        Objects.equals(this.criterionId, googleAdsSearchads360V0ResourcesConversion.criterionId) &&
        Objects.equals(this.floodlightOrderId, googleAdsSearchads360V0ResourcesConversion.floodlightOrderId) &&
        Objects.equals(this.floodlightOriginalRevenue, googleAdsSearchads360V0ResourcesConversion.floodlightOriginalRevenue) &&
        Objects.equals(this.id, googleAdsSearchads360V0ResourcesConversion.id) &&
        Objects.equals(this.merchantId, googleAdsSearchads360V0ResourcesConversion.merchantId) &&
        Objects.equals(this.productChannel, googleAdsSearchads360V0ResourcesConversion.productChannel) &&
        Objects.equals(this.productCountryCode, googleAdsSearchads360V0ResourcesConversion.productCountryCode) &&
        Objects.equals(this.productId, googleAdsSearchads360V0ResourcesConversion.productId) &&
        Objects.equals(this.productLanguageCode, googleAdsSearchads360V0ResourcesConversion.productLanguageCode) &&
        Objects.equals(this.productStoreId, googleAdsSearchads360V0ResourcesConversion.productStoreId) &&
        Objects.equals(this.resourceName, googleAdsSearchads360V0ResourcesConversion.resourceName) &&
        Objects.equals(this.status, googleAdsSearchads360V0ResourcesConversion.status) &&
        Objects.equals(this.visitId, googleAdsSearchads360V0ResourcesConversion.visitId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adId, advertiserConversionId, assetFieldType, assetId, attributionType, clickId, conversionDateTime, conversionLastModifiedDateTime, conversionQuantity, conversionRevenueMicros, conversionVisitDateTime, criterionId, floodlightOrderId, floodlightOriginalRevenue, id, merchantId, productChannel, productCountryCode, productId, productLanguageCode, productStoreId, resourceName, status, visitId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAdsSearchads360V0ResourcesConversion {\n");
    sb.append("    adId: ").append(toIndentedString(adId)).append("\n");
    sb.append("    advertiserConversionId: ").append(toIndentedString(advertiserConversionId)).append("\n");
    sb.append("    assetFieldType: ").append(toIndentedString(assetFieldType)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    attributionType: ").append(toIndentedString(attributionType)).append("\n");
    sb.append("    clickId: ").append(toIndentedString(clickId)).append("\n");
    sb.append("    conversionDateTime: ").append(toIndentedString(conversionDateTime)).append("\n");
    sb.append("    conversionLastModifiedDateTime: ").append(toIndentedString(conversionLastModifiedDateTime)).append("\n");
    sb.append("    conversionQuantity: ").append(toIndentedString(conversionQuantity)).append("\n");
    sb.append("    conversionRevenueMicros: ").append(toIndentedString(conversionRevenueMicros)).append("\n");
    sb.append("    conversionVisitDateTime: ").append(toIndentedString(conversionVisitDateTime)).append("\n");
    sb.append("    criterionId: ").append(toIndentedString(criterionId)).append("\n");
    sb.append("    floodlightOrderId: ").append(toIndentedString(floodlightOrderId)).append("\n");
    sb.append("    floodlightOriginalRevenue: ").append(toIndentedString(floodlightOriginalRevenue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    productChannel: ").append(toIndentedString(productChannel)).append("\n");
    sb.append("    productCountryCode: ").append(toIndentedString(productCountryCode)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productLanguageCode: ").append(toIndentedString(productLanguageCode)).append("\n");
    sb.append("    productStoreId: ").append(toIndentedString(productStoreId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adId");
    openapiFields.add("advertiserConversionId");
    openapiFields.add("assetFieldType");
    openapiFields.add("assetId");
    openapiFields.add("attributionType");
    openapiFields.add("clickId");
    openapiFields.add("conversionDateTime");
    openapiFields.add("conversionLastModifiedDateTime");
    openapiFields.add("conversionQuantity");
    openapiFields.add("conversionRevenueMicros");
    openapiFields.add("conversionVisitDateTime");
    openapiFields.add("criterionId");
    openapiFields.add("floodlightOrderId");
    openapiFields.add("floodlightOriginalRevenue");
    openapiFields.add("id");
    openapiFields.add("merchantId");
    openapiFields.add("productChannel");
    openapiFields.add("productCountryCode");
    openapiFields.add("productId");
    openapiFields.add("productLanguageCode");
    openapiFields.add("productStoreId");
    openapiFields.add("resourceName");
    openapiFields.add("status");
    openapiFields.add("visitId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAdsSearchads360V0ResourcesConversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAdsSearchads360V0ResourcesConversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAdsSearchads360V0ResourcesConversion is not found in the empty JSON string", GoogleAdsSearchads360V0ResourcesConversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAdsSearchads360V0ResourcesConversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAdsSearchads360V0ResourcesConversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adId") != null && !jsonObj.get("adId").isJsonNull()) && !jsonObj.get("adId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adId").toString()));
      }
      if ((jsonObj.get("advertiserConversionId") != null && !jsonObj.get("advertiserConversionId").isJsonNull()) && !jsonObj.get("advertiserConversionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserConversionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserConversionId").toString()));
      }
      if ((jsonObj.get("assetFieldType") != null && !jsonObj.get("assetFieldType").isJsonNull()) && !jsonObj.get("assetFieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetFieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetFieldType").toString()));
      }
      // validate the optional field `assetFieldType`
      if (jsonObj.get("assetFieldType") != null && !jsonObj.get("assetFieldType").isJsonNull()) {
        AssetFieldTypeEnum.validateJsonElement(jsonObj.get("assetFieldType"));
      }
      if ((jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if ((jsonObj.get("attributionType") != null && !jsonObj.get("attributionType").isJsonNull()) && !jsonObj.get("attributionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributionType").toString()));
      }
      // validate the optional field `attributionType`
      if (jsonObj.get("attributionType") != null && !jsonObj.get("attributionType").isJsonNull()) {
        AttributionTypeEnum.validateJsonElement(jsonObj.get("attributionType"));
      }
      if ((jsonObj.get("clickId") != null && !jsonObj.get("clickId").isJsonNull()) && !jsonObj.get("clickId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickId").toString()));
      }
      if ((jsonObj.get("conversionDateTime") != null && !jsonObj.get("conversionDateTime").isJsonNull()) && !jsonObj.get("conversionDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionDateTime").toString()));
      }
      if ((jsonObj.get("conversionLastModifiedDateTime") != null && !jsonObj.get("conversionLastModifiedDateTime").isJsonNull()) && !jsonObj.get("conversionLastModifiedDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionLastModifiedDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionLastModifiedDateTime").toString()));
      }
      if ((jsonObj.get("conversionQuantity") != null && !jsonObj.get("conversionQuantity").isJsonNull()) && !jsonObj.get("conversionQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionQuantity").toString()));
      }
      if ((jsonObj.get("conversionRevenueMicros") != null && !jsonObj.get("conversionRevenueMicros").isJsonNull()) && !jsonObj.get("conversionRevenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionRevenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionRevenueMicros").toString()));
      }
      if ((jsonObj.get("conversionVisitDateTime") != null && !jsonObj.get("conversionVisitDateTime").isJsonNull()) && !jsonObj.get("conversionVisitDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionVisitDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionVisitDateTime").toString()));
      }
      if ((jsonObj.get("criterionId") != null && !jsonObj.get("criterionId").isJsonNull()) && !jsonObj.get("criterionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criterionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criterionId").toString()));
      }
      if ((jsonObj.get("floodlightOrderId") != null && !jsonObj.get("floodlightOrderId").isJsonNull()) && !jsonObj.get("floodlightOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightOrderId").toString()));
      }
      if ((jsonObj.get("floodlightOriginalRevenue") != null && !jsonObj.get("floodlightOriginalRevenue").isJsonNull()) && !jsonObj.get("floodlightOriginalRevenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightOriginalRevenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightOriginalRevenue").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("productChannel") != null && !jsonObj.get("productChannel").isJsonNull()) && !jsonObj.get("productChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productChannel").toString()));
      }
      // validate the optional field `productChannel`
      if (jsonObj.get("productChannel") != null && !jsonObj.get("productChannel").isJsonNull()) {
        ProductChannelEnum.validateJsonElement(jsonObj.get("productChannel"));
      }
      if ((jsonObj.get("productCountryCode") != null && !jsonObj.get("productCountryCode").isJsonNull()) && !jsonObj.get("productCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCountryCode").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productLanguageCode") != null && !jsonObj.get("productLanguageCode").isJsonNull()) && !jsonObj.get("productLanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productLanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productLanguageCode").toString()));
      }
      if ((jsonObj.get("productStoreId") != null && !jsonObj.get("productStoreId").isJsonNull()) && !jsonObj.get("productStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productStoreId").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("visitId") != null && !jsonObj.get("visitId").isJsonNull()) && !jsonObj.get("visitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAdsSearchads360V0ResourcesConversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAdsSearchads360V0ResourcesConversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAdsSearchads360V0ResourcesConversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAdsSearchads360V0ResourcesConversion.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAdsSearchads360V0ResourcesConversion>() {
           @Override
           public void write(JsonWriter out, GoogleAdsSearchads360V0ResourcesConversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAdsSearchads360V0ResourcesConversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAdsSearchads360V0ResourcesConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAdsSearchads360V0ResourcesConversion
   * @throws IOException if the JSON string is invalid with respect to GoogleAdsSearchads360V0ResourcesConversion
   */
  public static GoogleAdsSearchads360V0ResourcesConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAdsSearchads360V0ResourcesConversion.class);
  }

  /**
   * Convert an instance of GoogleAdsSearchads360V0ResourcesConversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

