/*
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAdsSearchads360V0CommonImageDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Image asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:17.315010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAdsSearchads360V0CommonImageAsset {
  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private String fileSize;

  public static final String SERIALIZED_NAME_FULL_SIZE = "fullSize";
  @SerializedName(SERIALIZED_NAME_FULL_SIZE)
  private GoogleAdsSearchads360V0CommonImageDimension fullSize;

  /**
   * MIME type of the image asset.
   */
  @JsonAdapter(MimeTypeEnum.Adapter.class)
  public enum MimeTypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    IMAGE_JPEG("IMAGE_JPEG"),
    
    IMAGE_GIF("IMAGE_GIF"),
    
    IMAGE_PNG("IMAGE_PNG"),
    
    FLASH("FLASH"),
    
    TEXT_HTML("TEXT_HTML"),
    
    PDF("PDF"),
    
    MSWORD("MSWORD"),
    
    MSEXCEL("MSEXCEL"),
    
    RTF("RTF"),
    
    AUDIO_WAV("AUDIO_WAV"),
    
    AUDIO_MP3("AUDIO_MP3"),
    
    HTML5_AD_ZIP("HTML5_AD_ZIP");

    private String value;

    MimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MimeTypeEnum fromValue(String value) {
      for (MimeTypeEnum b : MimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MimeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MimeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private MimeTypeEnum mimeType;

  public GoogleAdsSearchads360V0CommonImageAsset() {
  }

  public GoogleAdsSearchads360V0CommonImageAsset fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * File size of the image asset in bytes.
   * @return fileSize
   */
  @javax.annotation.Nullable
  public String getFileSize() {
    return fileSize;
  }

  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }


  public GoogleAdsSearchads360V0CommonImageAsset fullSize(GoogleAdsSearchads360V0CommonImageDimension fullSize) {
    this.fullSize = fullSize;
    return this;
  }

  /**
   * Get fullSize
   * @return fullSize
   */
  @javax.annotation.Nullable
  public GoogleAdsSearchads360V0CommonImageDimension getFullSize() {
    return fullSize;
  }

  public void setFullSize(GoogleAdsSearchads360V0CommonImageDimension fullSize) {
    this.fullSize = fullSize;
  }


  public GoogleAdsSearchads360V0CommonImageAsset mimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * MIME type of the image asset.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public MimeTypeEnum getMimeType() {
    return mimeType;
  }

  public void setMimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAdsSearchads360V0CommonImageAsset googleAdsSearchads360V0CommonImageAsset = (GoogleAdsSearchads360V0CommonImageAsset) o;
    return Objects.equals(this.fileSize, googleAdsSearchads360V0CommonImageAsset.fileSize) &&
        Objects.equals(this.fullSize, googleAdsSearchads360V0CommonImageAsset.fullSize) &&
        Objects.equals(this.mimeType, googleAdsSearchads360V0CommonImageAsset.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, fullSize, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAdsSearchads360V0CommonImageAsset {\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fullSize: ").append(toIndentedString(fullSize)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileSize");
    openapiFields.add("fullSize");
    openapiFields.add("mimeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAdsSearchads360V0CommonImageAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAdsSearchads360V0CommonImageAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAdsSearchads360V0CommonImageAsset is not found in the empty JSON string", GoogleAdsSearchads360V0CommonImageAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAdsSearchads360V0CommonImageAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAdsSearchads360V0CommonImageAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileSize") != null && !jsonObj.get("fileSize").isJsonNull()) && !jsonObj.get("fileSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSize").toString()));
      }
      // validate the optional field `fullSize`
      if (jsonObj.get("fullSize") != null && !jsonObj.get("fullSize").isJsonNull()) {
        GoogleAdsSearchads360V0CommonImageDimension.validateJsonElement(jsonObj.get("fullSize"));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      // validate the optional field `mimeType`
      if (jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) {
        MimeTypeEnum.validateJsonElement(jsonObj.get("mimeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAdsSearchads360V0CommonImageAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAdsSearchads360V0CommonImageAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAdsSearchads360V0CommonImageAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAdsSearchads360V0CommonImageAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAdsSearchads360V0CommonImageAsset>() {
           @Override
           public void write(JsonWriter out, GoogleAdsSearchads360V0CommonImageAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAdsSearchads360V0CommonImageAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAdsSearchads360V0CommonImageAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAdsSearchads360V0CommonImageAsset
   * @throws IOException if the JSON string is invalid with respect to GoogleAdsSearchads360V0CommonImageAsset
   */
  public static GoogleAdsSearchads360V0CommonImageAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAdsSearchads360V0CommonImageAsset.class);
  }

  /**
   * Convert an instance of GoogleAdsSearchads360V0CommonImageAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

