/*
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAdsSearchads360V0CommonValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:17.315010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAdsSearchads360V0CommonMetrics {
  public static final String SERIALIZED_NAME_ABSOLUTE_TOP_IMPRESSION_PERCENTAGE = "absoluteTopImpressionPercentage";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_TOP_IMPRESSION_PERCENTAGE)
  private Double absoluteTopImpressionPercentage;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS = "allConversions";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS)
  private Double allConversions;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_BY_CONVERSION_DATE = "allConversionsByConversionDate";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_BY_CONVERSION_DATE)
  private Double allConversionsByConversionDate;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_CLICK_TO_CALL = "allConversionsFromClickToCall";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_CLICK_TO_CALL)
  private Double allConversionsFromClickToCall;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_DIRECTIONS = "allConversionsFromDirections";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_DIRECTIONS)
  private Double allConversionsFromDirections;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_INTERACTIONS_RATE = "allConversionsFromInteractionsRate";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_INTERACTIONS_RATE)
  private Double allConversionsFromInteractionsRate;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_INTERACTIONS_VALUE_PER_INTERACTION = "allConversionsFromInteractionsValuePerInteraction";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_INTERACTIONS_VALUE_PER_INTERACTION)
  private Double allConversionsFromInteractionsValuePerInteraction;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_MENU = "allConversionsFromMenu";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_MENU)
  private Double allConversionsFromMenu;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_ORDER = "allConversionsFromOrder";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_ORDER)
  private Double allConversionsFromOrder;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_OTHER_ENGAGEMENT = "allConversionsFromOtherEngagement";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_OTHER_ENGAGEMENT)
  private Double allConversionsFromOtherEngagement;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_STORE_VISIT = "allConversionsFromStoreVisit";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_STORE_VISIT)
  private Double allConversionsFromStoreVisit;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_FROM_STORE_WEBSITE = "allConversionsFromStoreWebsite";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_FROM_STORE_WEBSITE)
  private Double allConversionsFromStoreWebsite;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_VALUE = "allConversionsValue";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_VALUE)
  private Double allConversionsValue;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_VALUE_BY_CONVERSION_DATE = "allConversionsValueByConversionDate";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_VALUE_BY_CONVERSION_DATE)
  private Double allConversionsValueByConversionDate;

  public static final String SERIALIZED_NAME_ALL_CONVERSIONS_VALUE_PER_COST = "allConversionsValuePerCost";
  @SerializedName(SERIALIZED_NAME_ALL_CONVERSIONS_VALUE_PER_COST)
  private Double allConversionsValuePerCost;

  public static final String SERIALIZED_NAME_AVERAGE_COST = "averageCost";
  @SerializedName(SERIALIZED_NAME_AVERAGE_COST)
  private Double averageCost;

  public static final String SERIALIZED_NAME_AVERAGE_CPC = "averageCpc";
  @SerializedName(SERIALIZED_NAME_AVERAGE_CPC)
  private Double averageCpc;

  public static final String SERIALIZED_NAME_AVERAGE_CPM = "averageCpm";
  @SerializedName(SERIALIZED_NAME_AVERAGE_CPM)
  private Double averageCpm;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private String clicks;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CONVERSIONS = "clientAccountConversions";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CONVERSIONS)
  private Double clientAccountConversions;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CONVERSIONS_VALUE = "clientAccountConversionsValue";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CONVERSIONS_VALUE)
  private Double clientAccountConversionsValue;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_COST_OF_GOODS_SOLD_MICROS = "clientAccountCrossSellCostOfGoodsSoldMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_COST_OF_GOODS_SOLD_MICROS)
  private String clientAccountCrossSellCostOfGoodsSoldMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_GROSS_PROFIT_MICROS = "clientAccountCrossSellGrossProfitMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_GROSS_PROFIT_MICROS)
  private String clientAccountCrossSellGrossProfitMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_REVENUE_MICROS = "clientAccountCrossSellRevenueMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_REVENUE_MICROS)
  private String clientAccountCrossSellRevenueMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_UNITS_SOLD = "clientAccountCrossSellUnitsSold";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_CROSS_SELL_UNITS_SOLD)
  private Double clientAccountCrossSellUnitsSold;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_COST_OF_GOODS_SOLD_MICROS = "clientAccountLeadCostOfGoodsSoldMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_COST_OF_GOODS_SOLD_MICROS)
  private String clientAccountLeadCostOfGoodsSoldMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_GROSS_PROFIT_MICROS = "clientAccountLeadGrossProfitMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_GROSS_PROFIT_MICROS)
  private String clientAccountLeadGrossProfitMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_REVENUE_MICROS = "clientAccountLeadRevenueMicros";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_REVENUE_MICROS)
  private String clientAccountLeadRevenueMicros;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_UNITS_SOLD = "clientAccountLeadUnitsSold";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_LEAD_UNITS_SOLD)
  private Double clientAccountLeadUnitsSold;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_VIEW_THROUGH_CONVERSIONS = "clientAccountViewThroughConversions";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_VIEW_THROUGH_CONVERSIONS)
  private String clientAccountViewThroughConversions;

  public static final String SERIALIZED_NAME_CONTENT_BUDGET_LOST_IMPRESSION_SHARE = "contentBudgetLostImpressionShare";
  @SerializedName(SERIALIZED_NAME_CONTENT_BUDGET_LOST_IMPRESSION_SHARE)
  private Double contentBudgetLostImpressionShare;

  public static final String SERIALIZED_NAME_CONTENT_IMPRESSION_SHARE = "contentImpressionShare";
  @SerializedName(SERIALIZED_NAME_CONTENT_IMPRESSION_SHARE)
  private Double contentImpressionShare;

  public static final String SERIALIZED_NAME_CONTENT_RANK_LOST_IMPRESSION_SHARE = "contentRankLostImpressionShare";
  @SerializedName(SERIALIZED_NAME_CONTENT_RANK_LOST_IMPRESSION_SHARE)
  private Double contentRankLostImpressionShare;

  public static final String SERIALIZED_NAME_CONVERSION_CUSTOM_METRICS = "conversionCustomMetrics";
  @SerializedName(SERIALIZED_NAME_CONVERSION_CUSTOM_METRICS)
  private List<GoogleAdsSearchads360V0CommonValue> conversionCustomMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERSIONS = "conversions";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS)
  private Double conversions;

  public static final String SERIALIZED_NAME_CONVERSIONS_BY_CONVERSION_DATE = "conversionsByConversionDate";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_BY_CONVERSION_DATE)
  private Double conversionsByConversionDate;

  public static final String SERIALIZED_NAME_CONVERSIONS_FROM_INTERACTIONS_RATE = "conversionsFromInteractionsRate";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_FROM_INTERACTIONS_RATE)
  private Double conversionsFromInteractionsRate;

  public static final String SERIALIZED_NAME_CONVERSIONS_FROM_INTERACTIONS_VALUE_PER_INTERACTION = "conversionsFromInteractionsValuePerInteraction";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_FROM_INTERACTIONS_VALUE_PER_INTERACTION)
  private Double conversionsFromInteractionsValuePerInteraction;

  public static final String SERIALIZED_NAME_CONVERSIONS_VALUE = "conversionsValue";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_VALUE)
  private Double conversionsValue;

  public static final String SERIALIZED_NAME_CONVERSIONS_VALUE_BY_CONVERSION_DATE = "conversionsValueByConversionDate";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_VALUE_BY_CONVERSION_DATE)
  private Double conversionsValueByConversionDate;

  public static final String SERIALIZED_NAME_CONVERSIONS_VALUE_PER_COST = "conversionsValuePerCost";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS_VALUE_PER_COST)
  private Double conversionsValuePerCost;

  public static final String SERIALIZED_NAME_COST_MICROS = "costMicros";
  @SerializedName(SERIALIZED_NAME_COST_MICROS)
  private String costMicros;

  public static final String SERIALIZED_NAME_COST_PER_ALL_CONVERSIONS = "costPerAllConversions";
  @SerializedName(SERIALIZED_NAME_COST_PER_ALL_CONVERSIONS)
  private Double costPerAllConversions;

  public static final String SERIALIZED_NAME_COST_PER_CONVERSION = "costPerConversion";
  @SerializedName(SERIALIZED_NAME_COST_PER_CONVERSION)
  private Double costPerConversion;

  public static final String SERIALIZED_NAME_COST_PER_CURRENT_MODEL_ATTRIBUTED_CONVERSION = "costPerCurrentModelAttributedConversion";
  @SerializedName(SERIALIZED_NAME_COST_PER_CURRENT_MODEL_ATTRIBUTED_CONVERSION)
  private Double costPerCurrentModelAttributedConversion;

  public static final String SERIALIZED_NAME_CROSS_DEVICE_CONVERSIONS = "crossDeviceConversions";
  @SerializedName(SERIALIZED_NAME_CROSS_DEVICE_CONVERSIONS)
  private Double crossDeviceConversions;

  public static final String SERIALIZED_NAME_CROSS_DEVICE_CONVERSIONS_VALUE = "crossDeviceConversionsValue";
  @SerializedName(SERIALIZED_NAME_CROSS_DEVICE_CONVERSIONS_VALUE)
  private Double crossDeviceConversionsValue;

  public static final String SERIALIZED_NAME_CROSS_SELL_COST_OF_GOODS_SOLD_MICROS = "crossSellCostOfGoodsSoldMicros";
  @SerializedName(SERIALIZED_NAME_CROSS_SELL_COST_OF_GOODS_SOLD_MICROS)
  private String crossSellCostOfGoodsSoldMicros;

  public static final String SERIALIZED_NAME_CROSS_SELL_GROSS_PROFIT_MICROS = "crossSellGrossProfitMicros";
  @SerializedName(SERIALIZED_NAME_CROSS_SELL_GROSS_PROFIT_MICROS)
  private String crossSellGrossProfitMicros;

  public static final String SERIALIZED_NAME_CROSS_SELL_REVENUE_MICROS = "crossSellRevenueMicros";
  @SerializedName(SERIALIZED_NAME_CROSS_SELL_REVENUE_MICROS)
  private String crossSellRevenueMicros;

  public static final String SERIALIZED_NAME_CROSS_SELL_UNITS_SOLD = "crossSellUnitsSold";
  @SerializedName(SERIALIZED_NAME_CROSS_SELL_UNITS_SOLD)
  private Double crossSellUnitsSold;

  public static final String SERIALIZED_NAME_CTR = "ctr";
  @SerializedName(SERIALIZED_NAME_CTR)
  private Double ctr;

  /**
   * The creative historical quality score.
   */
  @JsonAdapter(HistoricalCreativeQualityScoreEnum.Adapter.class)
  public enum HistoricalCreativeQualityScoreEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    BELOW_AVERAGE("BELOW_AVERAGE"),
    
    AVERAGE("AVERAGE"),
    
    ABOVE_AVERAGE("ABOVE_AVERAGE");

    private String value;

    HistoricalCreativeQualityScoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HistoricalCreativeQualityScoreEnum fromValue(String value) {
      for (HistoricalCreativeQualityScoreEnum b : HistoricalCreativeQualityScoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HistoricalCreativeQualityScoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HistoricalCreativeQualityScoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HistoricalCreativeQualityScoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HistoricalCreativeQualityScoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HistoricalCreativeQualityScoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HISTORICAL_CREATIVE_QUALITY_SCORE = "historicalCreativeQualityScore";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_CREATIVE_QUALITY_SCORE)
  private HistoricalCreativeQualityScoreEnum historicalCreativeQualityScore;

  /**
   * The quality of historical landing page experience.
   */
  @JsonAdapter(HistoricalLandingPageQualityScoreEnum.Adapter.class)
  public enum HistoricalLandingPageQualityScoreEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    BELOW_AVERAGE("BELOW_AVERAGE"),
    
    AVERAGE("AVERAGE"),
    
    ABOVE_AVERAGE("ABOVE_AVERAGE");

    private String value;

    HistoricalLandingPageQualityScoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HistoricalLandingPageQualityScoreEnum fromValue(String value) {
      for (HistoricalLandingPageQualityScoreEnum b : HistoricalLandingPageQualityScoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HistoricalLandingPageQualityScoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HistoricalLandingPageQualityScoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HistoricalLandingPageQualityScoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HistoricalLandingPageQualityScoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HistoricalLandingPageQualityScoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HISTORICAL_LANDING_PAGE_QUALITY_SCORE = "historicalLandingPageQualityScore";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_LANDING_PAGE_QUALITY_SCORE)
  private HistoricalLandingPageQualityScoreEnum historicalLandingPageQualityScore;

  public static final String SERIALIZED_NAME_HISTORICAL_QUALITY_SCORE = "historicalQualityScore";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_QUALITY_SCORE)
  private String historicalQualityScore;

  /**
   * The historical search predicted click through rate (CTR).
   */
  @JsonAdapter(HistoricalSearchPredictedCtrEnum.Adapter.class)
  public enum HistoricalSearchPredictedCtrEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    BELOW_AVERAGE("BELOW_AVERAGE"),
    
    AVERAGE("AVERAGE"),
    
    ABOVE_AVERAGE("ABOVE_AVERAGE");

    private String value;

    HistoricalSearchPredictedCtrEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HistoricalSearchPredictedCtrEnum fromValue(String value) {
      for (HistoricalSearchPredictedCtrEnum b : HistoricalSearchPredictedCtrEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HistoricalSearchPredictedCtrEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HistoricalSearchPredictedCtrEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HistoricalSearchPredictedCtrEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HistoricalSearchPredictedCtrEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HistoricalSearchPredictedCtrEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HISTORICAL_SEARCH_PREDICTED_CTR = "historicalSearchPredictedCtr";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_SEARCH_PREDICTED_CTR)
  private HistoricalSearchPredictedCtrEnum historicalSearchPredictedCtr;

  public static final String SERIALIZED_NAME_IMPRESSIONS = "impressions";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS)
  private String impressions;

  /**
   * Gets or Sets interactionEventTypes
   */
  @JsonAdapter(InteractionEventTypesEnum.Adapter.class)
  public enum InteractionEventTypesEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    CLICK("CLICK"),
    
    ENGAGEMENT("ENGAGEMENT"),
    
    VIDEO_VIEW("VIDEO_VIEW"),
    
    NONE("NONE");

    private String value;

    InteractionEventTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InteractionEventTypesEnum fromValue(String value) {
      for (InteractionEventTypesEnum b : InteractionEventTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InteractionEventTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InteractionEventTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InteractionEventTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InteractionEventTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InteractionEventTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERACTION_EVENT_TYPES = "interactionEventTypes";
  @SerializedName(SERIALIZED_NAME_INTERACTION_EVENT_TYPES)
  private List<InteractionEventTypesEnum> interactionEventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERACTION_RATE = "interactionRate";
  @SerializedName(SERIALIZED_NAME_INTERACTION_RATE)
  private Double interactionRate;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private String interactions;

  public static final String SERIALIZED_NAME_INVALID_CLICK_RATE = "invalidClickRate";
  @SerializedName(SERIALIZED_NAME_INVALID_CLICK_RATE)
  private Double invalidClickRate;

  public static final String SERIALIZED_NAME_INVALID_CLICKS = "invalidClicks";
  @SerializedName(SERIALIZED_NAME_INVALID_CLICKS)
  private String invalidClicks;

  public static final String SERIALIZED_NAME_LEAD_COST_OF_GOODS_SOLD_MICROS = "leadCostOfGoodsSoldMicros";
  @SerializedName(SERIALIZED_NAME_LEAD_COST_OF_GOODS_SOLD_MICROS)
  private String leadCostOfGoodsSoldMicros;

  public static final String SERIALIZED_NAME_LEAD_GROSS_PROFIT_MICROS = "leadGrossProfitMicros";
  @SerializedName(SERIALIZED_NAME_LEAD_GROSS_PROFIT_MICROS)
  private String leadGrossProfitMicros;

  public static final String SERIALIZED_NAME_LEAD_REVENUE_MICROS = "leadRevenueMicros";
  @SerializedName(SERIALIZED_NAME_LEAD_REVENUE_MICROS)
  private String leadRevenueMicros;

  public static final String SERIALIZED_NAME_LEAD_UNITS_SOLD = "leadUnitsSold";
  @SerializedName(SERIALIZED_NAME_LEAD_UNITS_SOLD)
  private Double leadUnitsSold;

  public static final String SERIALIZED_NAME_MOBILE_FRIENDLY_CLICKS_PERCENTAGE = "mobileFriendlyClicksPercentage";
  @SerializedName(SERIALIZED_NAME_MOBILE_FRIENDLY_CLICKS_PERCENTAGE)
  private Double mobileFriendlyClicksPercentage;

  public static final String SERIALIZED_NAME_RAW_EVENT_CONVERSION_METRICS = "rawEventConversionMetrics";
  @SerializedName(SERIALIZED_NAME_RAW_EVENT_CONVERSION_METRICS)
  private List<GoogleAdsSearchads360V0CommonValue> rawEventConversionMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_ABSOLUTE_TOP_IMPRESSION_SHARE = "searchAbsoluteTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_ABSOLUTE_TOP_IMPRESSION_SHARE)
  private Double searchAbsoluteTopImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_BUDGET_LOST_ABSOLUTE_TOP_IMPRESSION_SHARE = "searchBudgetLostAbsoluteTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_BUDGET_LOST_ABSOLUTE_TOP_IMPRESSION_SHARE)
  private Double searchBudgetLostAbsoluteTopImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_BUDGET_LOST_IMPRESSION_SHARE = "searchBudgetLostImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_BUDGET_LOST_IMPRESSION_SHARE)
  private Double searchBudgetLostImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_BUDGET_LOST_TOP_IMPRESSION_SHARE = "searchBudgetLostTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_BUDGET_LOST_TOP_IMPRESSION_SHARE)
  private Double searchBudgetLostTopImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_CLICK_SHARE = "searchClickShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_CLICK_SHARE)
  private Double searchClickShare;

  public static final String SERIALIZED_NAME_SEARCH_EXACT_MATCH_IMPRESSION_SHARE = "searchExactMatchImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_EXACT_MATCH_IMPRESSION_SHARE)
  private Double searchExactMatchImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_IMPRESSION_SHARE = "searchImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_IMPRESSION_SHARE)
  private Double searchImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_RANK_LOST_ABSOLUTE_TOP_IMPRESSION_SHARE = "searchRankLostAbsoluteTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_RANK_LOST_ABSOLUTE_TOP_IMPRESSION_SHARE)
  private Double searchRankLostAbsoluteTopImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_RANK_LOST_IMPRESSION_SHARE = "searchRankLostImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_RANK_LOST_IMPRESSION_SHARE)
  private Double searchRankLostImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_RANK_LOST_TOP_IMPRESSION_SHARE = "searchRankLostTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_RANK_LOST_TOP_IMPRESSION_SHARE)
  private Double searchRankLostTopImpressionShare;

  public static final String SERIALIZED_NAME_SEARCH_TOP_IMPRESSION_SHARE = "searchTopImpressionShare";
  @SerializedName(SERIALIZED_NAME_SEARCH_TOP_IMPRESSION_SHARE)
  private Double searchTopImpressionShare;

  public static final String SERIALIZED_NAME_TOP_IMPRESSION_PERCENTAGE = "topImpressionPercentage";
  @SerializedName(SERIALIZED_NAME_TOP_IMPRESSION_PERCENTAGE)
  private Double topImpressionPercentage;

  public static final String SERIALIZED_NAME_VALUE_PER_ALL_CONVERSIONS = "valuePerAllConversions";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_ALL_CONVERSIONS)
  private Double valuePerAllConversions;

  public static final String SERIALIZED_NAME_VALUE_PER_ALL_CONVERSIONS_BY_CONVERSION_DATE = "valuePerAllConversionsByConversionDate";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_ALL_CONVERSIONS_BY_CONVERSION_DATE)
  private Double valuePerAllConversionsByConversionDate;

  public static final String SERIALIZED_NAME_VALUE_PER_CONVERSION = "valuePerConversion";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_CONVERSION)
  private Double valuePerConversion;

  public static final String SERIALIZED_NAME_VALUE_PER_CONVERSIONS_BY_CONVERSION_DATE = "valuePerConversionsByConversionDate";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_CONVERSIONS_BY_CONVERSION_DATE)
  private Double valuePerConversionsByConversionDate;

  public static final String SERIALIZED_NAME_VISITS = "visits";
  @SerializedName(SERIALIZED_NAME_VISITS)
  private Double visits;

  public GoogleAdsSearchads360V0CommonMetrics() {
  }

  public GoogleAdsSearchads360V0CommonMetrics absoluteTopImpressionPercentage(Double absoluteTopImpressionPercentage) {
    this.absoluteTopImpressionPercentage = absoluteTopImpressionPercentage;
    return this;
  }

  /**
   * The percent of your ad impressions that are shown as the very first ad above the organic search results.
   * @return absoluteTopImpressionPercentage
   */
  @javax.annotation.Nullable
  public Double getAbsoluteTopImpressionPercentage() {
    return absoluteTopImpressionPercentage;
  }

  public void setAbsoluteTopImpressionPercentage(Double absoluteTopImpressionPercentage) {
    this.absoluteTopImpressionPercentage = absoluteTopImpressionPercentage;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversions(Double allConversions) {
    this.allConversions = allConversions;
    return this;
  }

  /**
   * The total number of conversions. This includes all conversions regardless of the value of include_in_conversions_metric.
   * @return allConversions
   */
  @javax.annotation.Nullable
  public Double getAllConversions() {
    return allConversions;
  }

  public void setAllConversions(Double allConversions) {
    this.allConversions = allConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsByConversionDate(Double allConversionsByConversionDate) {
    this.allConversionsByConversionDate = allConversionsByConversionDate;
    return this;
  }

  /**
   * The total number of conversions. This includes all conversions regardless of the value of include_in_conversions_metric. When this column is selected with date, the values in date column means the conversion date. Details for the by_conversion_date columns are available at https://support.google.com/sa360/answer/9250611.
   * @return allConversionsByConversionDate
   */
  @javax.annotation.Nullable
  public Double getAllConversionsByConversionDate() {
    return allConversionsByConversionDate;
  }

  public void setAllConversionsByConversionDate(Double allConversionsByConversionDate) {
    this.allConversionsByConversionDate = allConversionsByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromClickToCall(Double allConversionsFromClickToCall) {
    this.allConversionsFromClickToCall = allConversionsFromClickToCall;
    return this;
  }

  /**
   * The number of times people clicked the \&quot;Call\&quot; button to call a store during or after clicking an ad. This number doesn&#39;t include whether or not calls were connected, or the duration of any calls. This metric applies to feed items only.
   * @return allConversionsFromClickToCall
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromClickToCall() {
    return allConversionsFromClickToCall;
  }

  public void setAllConversionsFromClickToCall(Double allConversionsFromClickToCall) {
    this.allConversionsFromClickToCall = allConversionsFromClickToCall;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromDirections(Double allConversionsFromDirections) {
    this.allConversionsFromDirections = allConversionsFromDirections;
    return this;
  }

  /**
   * The number of times people clicked a \&quot;Get directions\&quot; button to navigate to a store after clicking an ad. This metric applies to feed items only.
   * @return allConversionsFromDirections
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromDirections() {
    return allConversionsFromDirections;
  }

  public void setAllConversionsFromDirections(Double allConversionsFromDirections) {
    this.allConversionsFromDirections = allConversionsFromDirections;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromInteractionsRate(Double allConversionsFromInteractionsRate) {
    this.allConversionsFromInteractionsRate = allConversionsFromInteractionsRate;
    return this;
  }

  /**
   * All conversions from interactions (as oppose to view through conversions) divided by the number of ad interactions.
   * @return allConversionsFromInteractionsRate
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromInteractionsRate() {
    return allConversionsFromInteractionsRate;
  }

  public void setAllConversionsFromInteractionsRate(Double allConversionsFromInteractionsRate) {
    this.allConversionsFromInteractionsRate = allConversionsFromInteractionsRate;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromInteractionsValuePerInteraction(Double allConversionsFromInteractionsValuePerInteraction) {
    this.allConversionsFromInteractionsValuePerInteraction = allConversionsFromInteractionsValuePerInteraction;
    return this;
  }

  /**
   * The value of all conversions from interactions divided by the total number of interactions.
   * @return allConversionsFromInteractionsValuePerInteraction
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromInteractionsValuePerInteraction() {
    return allConversionsFromInteractionsValuePerInteraction;
  }

  public void setAllConversionsFromInteractionsValuePerInteraction(Double allConversionsFromInteractionsValuePerInteraction) {
    this.allConversionsFromInteractionsValuePerInteraction = allConversionsFromInteractionsValuePerInteraction;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromMenu(Double allConversionsFromMenu) {
    this.allConversionsFromMenu = allConversionsFromMenu;
    return this;
  }

  /**
   * The number of times people clicked a link to view a store&#39;s menu after clicking an ad. This metric applies to feed items only.
   * @return allConversionsFromMenu
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromMenu() {
    return allConversionsFromMenu;
  }

  public void setAllConversionsFromMenu(Double allConversionsFromMenu) {
    this.allConversionsFromMenu = allConversionsFromMenu;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromOrder(Double allConversionsFromOrder) {
    this.allConversionsFromOrder = allConversionsFromOrder;
    return this;
  }

  /**
   * The number of times people placed an order at a store after clicking an ad. This metric applies to feed items only.
   * @return allConversionsFromOrder
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromOrder() {
    return allConversionsFromOrder;
  }

  public void setAllConversionsFromOrder(Double allConversionsFromOrder) {
    this.allConversionsFromOrder = allConversionsFromOrder;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromOtherEngagement(Double allConversionsFromOtherEngagement) {
    this.allConversionsFromOtherEngagement = allConversionsFromOtherEngagement;
    return this;
  }

  /**
   * The number of other conversions (for example, posting a review or saving a location for a store) that occurred after people clicked an ad. This metric applies to feed items only.
   * @return allConversionsFromOtherEngagement
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromOtherEngagement() {
    return allConversionsFromOtherEngagement;
  }

  public void setAllConversionsFromOtherEngagement(Double allConversionsFromOtherEngagement) {
    this.allConversionsFromOtherEngagement = allConversionsFromOtherEngagement;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromStoreVisit(Double allConversionsFromStoreVisit) {
    this.allConversionsFromStoreVisit = allConversionsFromStoreVisit;
    return this;
  }

  /**
   * Estimated number of times people visited a store after clicking an ad. This metric applies to feed items only.
   * @return allConversionsFromStoreVisit
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromStoreVisit() {
    return allConversionsFromStoreVisit;
  }

  public void setAllConversionsFromStoreVisit(Double allConversionsFromStoreVisit) {
    this.allConversionsFromStoreVisit = allConversionsFromStoreVisit;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsFromStoreWebsite(Double allConversionsFromStoreWebsite) {
    this.allConversionsFromStoreWebsite = allConversionsFromStoreWebsite;
    return this;
  }

  /**
   * The number of times that people were taken to a store&#39;s URL after clicking an ad. This metric applies to feed items only.
   * @return allConversionsFromStoreWebsite
   */
  @javax.annotation.Nullable
  public Double getAllConversionsFromStoreWebsite() {
    return allConversionsFromStoreWebsite;
  }

  public void setAllConversionsFromStoreWebsite(Double allConversionsFromStoreWebsite) {
    this.allConversionsFromStoreWebsite = allConversionsFromStoreWebsite;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsValue(Double allConversionsValue) {
    this.allConversionsValue = allConversionsValue;
    return this;
  }

  /**
   * The value of all conversions.
   * @return allConversionsValue
   */
  @javax.annotation.Nullable
  public Double getAllConversionsValue() {
    return allConversionsValue;
  }

  public void setAllConversionsValue(Double allConversionsValue) {
    this.allConversionsValue = allConversionsValue;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsValueByConversionDate(Double allConversionsValueByConversionDate) {
    this.allConversionsValueByConversionDate = allConversionsValueByConversionDate;
    return this;
  }

  /**
   * The value of all conversions. When this column is selected with date, the values in date column means the conversion date. Details for the by_conversion_date columns are available at https://support.google.com/sa360/answer/9250611.
   * @return allConversionsValueByConversionDate
   */
  @javax.annotation.Nullable
  public Double getAllConversionsValueByConversionDate() {
    return allConversionsValueByConversionDate;
  }

  public void setAllConversionsValueByConversionDate(Double allConversionsValueByConversionDate) {
    this.allConversionsValueByConversionDate = allConversionsValueByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics allConversionsValuePerCost(Double allConversionsValuePerCost) {
    this.allConversionsValuePerCost = allConversionsValuePerCost;
    return this;
  }

  /**
   * The value of all conversions divided by the total cost of ad interactions (such as clicks for text ads or views for video ads).
   * @return allConversionsValuePerCost
   */
  @javax.annotation.Nullable
  public Double getAllConversionsValuePerCost() {
    return allConversionsValuePerCost;
  }

  public void setAllConversionsValuePerCost(Double allConversionsValuePerCost) {
    this.allConversionsValuePerCost = allConversionsValuePerCost;
  }


  public GoogleAdsSearchads360V0CommonMetrics averageCost(Double averageCost) {
    this.averageCost = averageCost;
    return this;
  }

  /**
   * The average amount you pay per interaction. This amount is the total cost of your ads divided by the total number of interactions.
   * @return averageCost
   */
  @javax.annotation.Nullable
  public Double getAverageCost() {
    return averageCost;
  }

  public void setAverageCost(Double averageCost) {
    this.averageCost = averageCost;
  }


  public GoogleAdsSearchads360V0CommonMetrics averageCpc(Double averageCpc) {
    this.averageCpc = averageCpc;
    return this;
  }

  /**
   * The total cost of all clicks divided by the total number of clicks received. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return averageCpc
   */
  @javax.annotation.Nullable
  public Double getAverageCpc() {
    return averageCpc;
  }

  public void setAverageCpc(Double averageCpc) {
    this.averageCpc = averageCpc;
  }


  public GoogleAdsSearchads360V0CommonMetrics averageCpm(Double averageCpm) {
    this.averageCpm = averageCpm;
    return this;
  }

  /**
   * Average cost-per-thousand impressions (CPM). This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return averageCpm
   */
  @javax.annotation.Nullable
  public Double getAverageCpm() {
    return averageCpm;
  }

  public void setAverageCpm(Double averageCpm) {
    this.averageCpm = averageCpm;
  }


  public GoogleAdsSearchads360V0CommonMetrics clicks(String clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * The number of clicks.
   * @return clicks
   */
  @javax.annotation.Nullable
  public String getClicks() {
    return clicks;
  }

  public void setClicks(String clicks) {
    this.clicks = clicks;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountConversions(Double clientAccountConversions) {
    this.clientAccountConversions = clientAccountConversions;
    return this;
  }

  /**
   * The number of client account conversions. This only includes conversion actions which include_in_client_account_conversions_metric attribute is set to true. If you use conversion-based bidding, your bid strategies will optimize for these conversions.
   * @return clientAccountConversions
   */
  @javax.annotation.Nullable
  public Double getClientAccountConversions() {
    return clientAccountConversions;
  }

  public void setClientAccountConversions(Double clientAccountConversions) {
    this.clientAccountConversions = clientAccountConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountConversionsValue(Double clientAccountConversionsValue) {
    this.clientAccountConversionsValue = clientAccountConversionsValue;
    return this;
  }

  /**
   * The value of client account conversions. This only includes conversion actions which include_in_client_account_conversions_metric attribute is set to true. If you use conversion-based bidding, your bid strategies will optimize for these conversions.
   * @return clientAccountConversionsValue
   */
  @javax.annotation.Nullable
  public Double getClientAccountConversionsValue() {
    return clientAccountConversionsValue;
  }

  public void setClientAccountConversionsValue(Double clientAccountConversionsValue) {
    this.clientAccountConversionsValue = clientAccountConversionsValue;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountCrossSellCostOfGoodsSoldMicros(String clientAccountCrossSellCostOfGoodsSoldMicros) {
    this.clientAccountCrossSellCostOfGoodsSoldMicros = clientAccountCrossSellCostOfGoodsSoldMicros;
    return this;
  }

  /**
   * Client account cross-sell cost of goods sold (COGS) is the total cost of products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell cost of goods sold is the total cost of the products sold that weren&#39;t advertised. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat has a cost of goods sold value of $3, the shirt has a cost of goods sold value of $5. The cross-sell cost of goods sold for this order is $5. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountCrossSellCostOfGoodsSoldMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountCrossSellCostOfGoodsSoldMicros() {
    return clientAccountCrossSellCostOfGoodsSoldMicros;
  }

  public void setClientAccountCrossSellCostOfGoodsSoldMicros(String clientAccountCrossSellCostOfGoodsSoldMicros) {
    this.clientAccountCrossSellCostOfGoodsSoldMicros = clientAccountCrossSellCostOfGoodsSoldMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountCrossSellGrossProfitMicros(String clientAccountCrossSellGrossProfitMicros) {
    this.clientAccountCrossSellGrossProfitMicros = clientAccountCrossSellGrossProfitMicros;
    return this;
  }

  /**
   * Client account cross-sell gross profit is the profit you made from products sold as a result of advertising a different product, minus cost of goods sold (COGS). How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the purchase is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell gross profit is the revenue you made from cross-sell attributed to your ads minus the cost of the goods sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The shirt is priced $20 and has a cost of goods sold value of $5. The cross-sell gross profit of this order is $15 &#x3D; $20 - $5. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountCrossSellGrossProfitMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountCrossSellGrossProfitMicros() {
    return clientAccountCrossSellGrossProfitMicros;
  }

  public void setClientAccountCrossSellGrossProfitMicros(String clientAccountCrossSellGrossProfitMicros) {
    this.clientAccountCrossSellGrossProfitMicros = clientAccountCrossSellGrossProfitMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountCrossSellRevenueMicros(String clientAccountCrossSellRevenueMicros) {
    this.clientAccountCrossSellRevenueMicros = clientAccountCrossSellRevenueMicros;
    return this;
  }

  /**
   * Client account cross-sell revenue is the total amount you made from products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell revenue is the total value you made from cross-sell attributed to your ads. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and the shirt is priced $20. The cross-sell revenue of this order is $20. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountCrossSellRevenueMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountCrossSellRevenueMicros() {
    return clientAccountCrossSellRevenueMicros;
  }

  public void setClientAccountCrossSellRevenueMicros(String clientAccountCrossSellRevenueMicros) {
    this.clientAccountCrossSellRevenueMicros = clientAccountCrossSellRevenueMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountCrossSellUnitsSold(Double clientAccountCrossSellUnitsSold) {
    this.clientAccountCrossSellUnitsSold = clientAccountCrossSellUnitsSold;
    return this;
  }

  /**
   * Client account cross-sell units sold is the total number of products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell units sold is the total number of cross-sold products from all orders attributed to your ads. Example: Someone clicked on a Shopping ad for a hat then bought the same hat, a shirt and a jacket. The cross-sell units sold in this order is 2. This metric is only available if you report conversions with cart data.
   * @return clientAccountCrossSellUnitsSold
   */
  @javax.annotation.Nullable
  public Double getClientAccountCrossSellUnitsSold() {
    return clientAccountCrossSellUnitsSold;
  }

  public void setClientAccountCrossSellUnitsSold(Double clientAccountCrossSellUnitsSold) {
    this.clientAccountCrossSellUnitsSold = clientAccountCrossSellUnitsSold;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountLeadCostOfGoodsSoldMicros(String clientAccountLeadCostOfGoodsSoldMicros) {
    this.clientAccountLeadCostOfGoodsSoldMicros = clientAccountLeadCostOfGoodsSoldMicros;
    return this;
  }

  /**
   * Client account lead cost of goods sold (COGS) is the total cost of products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the cost of these goods is counted under lead cost of goods sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat has a cost of goods sold value of $3, the shirt has a cost of goods sold value of $5. The lead cost of goods sold for this order is $3. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountLeadCostOfGoodsSoldMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountLeadCostOfGoodsSoldMicros() {
    return clientAccountLeadCostOfGoodsSoldMicros;
  }

  public void setClientAccountLeadCostOfGoodsSoldMicros(String clientAccountLeadCostOfGoodsSoldMicros) {
    this.clientAccountLeadCostOfGoodsSoldMicros = clientAccountLeadCostOfGoodsSoldMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountLeadGrossProfitMicros(String clientAccountLeadGrossProfitMicros) {
    this.clientAccountLeadGrossProfitMicros = clientAccountLeadGrossProfitMicros;
    return this;
  }

  /**
   * Client account lead gross profit is the profit you made from products sold as a result of advertising the same product, minus cost of goods sold (COGS). How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the revenue you made from these sales minus the cost of goods sold is your lead gross profit. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and has a cost of goods sold value of $3. The lead gross profit of this order is $7 &#x3D; $10 - $3. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountLeadGrossProfitMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountLeadGrossProfitMicros() {
    return clientAccountLeadGrossProfitMicros;
  }

  public void setClientAccountLeadGrossProfitMicros(String clientAccountLeadGrossProfitMicros) {
    this.clientAccountLeadGrossProfitMicros = clientAccountLeadGrossProfitMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountLeadRevenueMicros(String clientAccountLeadRevenueMicros) {
    this.clientAccountLeadRevenueMicros = clientAccountLeadRevenueMicros;
    return this;
  }

  /**
   * Client account lead revenue is the total amount you made from products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the total value you made from the sales of these products is shown under lead revenue. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and the shirt is priced $20. The lead revenue of this order is $10. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return clientAccountLeadRevenueMicros
   */
  @javax.annotation.Nullable
  public String getClientAccountLeadRevenueMicros() {
    return clientAccountLeadRevenueMicros;
  }

  public void setClientAccountLeadRevenueMicros(String clientAccountLeadRevenueMicros) {
    this.clientAccountLeadRevenueMicros = clientAccountLeadRevenueMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountLeadUnitsSold(Double clientAccountLeadUnitsSold) {
    this.clientAccountLeadUnitsSold = clientAccountLeadUnitsSold;
    return this;
  }

  /**
   * Client account lead units sold is the total number of products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the total number of these products sold is shown under lead units sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat, a shirt and a jacket. The lead units sold in this order is 1. This metric is only available if you report conversions with cart data.
   * @return clientAccountLeadUnitsSold
   */
  @javax.annotation.Nullable
  public Double getClientAccountLeadUnitsSold() {
    return clientAccountLeadUnitsSold;
  }

  public void setClientAccountLeadUnitsSold(Double clientAccountLeadUnitsSold) {
    this.clientAccountLeadUnitsSold = clientAccountLeadUnitsSold;
  }


  public GoogleAdsSearchads360V0CommonMetrics clientAccountViewThroughConversions(String clientAccountViewThroughConversions) {
    this.clientAccountViewThroughConversions = clientAccountViewThroughConversions;
    return this;
  }

  /**
   * The total number of view-through conversions. These happen when a customer sees an image or rich media ad, then later completes a conversion on your site without interacting with (for example, clicking on) another ad.
   * @return clientAccountViewThroughConversions
   */
  @javax.annotation.Nullable
  public String getClientAccountViewThroughConversions() {
    return clientAccountViewThroughConversions;
  }

  public void setClientAccountViewThroughConversions(String clientAccountViewThroughConversions) {
    this.clientAccountViewThroughConversions = clientAccountViewThroughConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics contentBudgetLostImpressionShare(Double contentBudgetLostImpressionShare) {
    this.contentBudgetLostImpressionShare = contentBudgetLostImpressionShare;
    return this;
  }

  /**
   * The estimated percent of times that your ad was eligible to show on the Display Network but didn&#39;t because your budget was too low. Note: Content budget lost impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return contentBudgetLostImpressionShare
   */
  @javax.annotation.Nullable
  public Double getContentBudgetLostImpressionShare() {
    return contentBudgetLostImpressionShare;
  }

  public void setContentBudgetLostImpressionShare(Double contentBudgetLostImpressionShare) {
    this.contentBudgetLostImpressionShare = contentBudgetLostImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics contentImpressionShare(Double contentImpressionShare) {
    this.contentImpressionShare = contentImpressionShare;
    return this;
  }

  /**
   * The impressions you&#39;ve received on the Display Network divided by the estimated number of impressions you were eligible to receive. Note: Content impression share is reported in the range of 0.1 to 1. Any value below 0.1 is reported as 0.0999.
   * @return contentImpressionShare
   */
  @javax.annotation.Nullable
  public Double getContentImpressionShare() {
    return contentImpressionShare;
  }

  public void setContentImpressionShare(Double contentImpressionShare) {
    this.contentImpressionShare = contentImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics contentRankLostImpressionShare(Double contentRankLostImpressionShare) {
    this.contentRankLostImpressionShare = contentRankLostImpressionShare;
    return this;
  }

  /**
   * The estimated percentage of impressions on the Display Network that your ads didn&#39;t receive due to poor Ad Rank. Note: Content rank lost impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return contentRankLostImpressionShare
   */
  @javax.annotation.Nullable
  public Double getContentRankLostImpressionShare() {
    return contentRankLostImpressionShare;
  }

  public void setContentRankLostImpressionShare(Double contentRankLostImpressionShare) {
    this.contentRankLostImpressionShare = contentRankLostImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionCustomMetrics(List<GoogleAdsSearchads360V0CommonValue> conversionCustomMetrics) {
    this.conversionCustomMetrics = conversionCustomMetrics;
    return this;
  }

  public GoogleAdsSearchads360V0CommonMetrics addConversionCustomMetricsItem(GoogleAdsSearchads360V0CommonValue conversionCustomMetricsItem) {
    if (this.conversionCustomMetrics == null) {
      this.conversionCustomMetrics = new ArrayList<>();
    }
    this.conversionCustomMetrics.add(conversionCustomMetricsItem);
    return this;
  }

  /**
   * The conversion custom metrics.
   * @return conversionCustomMetrics
   */
  @javax.annotation.Nullable
  public List<GoogleAdsSearchads360V0CommonValue> getConversionCustomMetrics() {
    return conversionCustomMetrics;
  }

  public void setConversionCustomMetrics(List<GoogleAdsSearchads360V0CommonValue> conversionCustomMetrics) {
    this.conversionCustomMetrics = conversionCustomMetrics;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversions(Double conversions) {
    this.conversions = conversions;
    return this;
  }

  /**
   * The number of conversions. This only includes conversion actions which include_in_conversions_metric attribute is set to true. If you use conversion-based bidding, your bid strategies will optimize for these conversions.
   * @return conversions
   */
  @javax.annotation.Nullable
  public Double getConversions() {
    return conversions;
  }

  public void setConversions(Double conversions) {
    this.conversions = conversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsByConversionDate(Double conversionsByConversionDate) {
    this.conversionsByConversionDate = conversionsByConversionDate;
    return this;
  }

  /**
   * The sum of conversions by conversion date for biddable conversion types. Can be fractional due to attribution modeling. When this column is selected with date, the values in date column means the conversion date.
   * @return conversionsByConversionDate
   */
  @javax.annotation.Nullable
  public Double getConversionsByConversionDate() {
    return conversionsByConversionDate;
  }

  public void setConversionsByConversionDate(Double conversionsByConversionDate) {
    this.conversionsByConversionDate = conversionsByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsFromInteractionsRate(Double conversionsFromInteractionsRate) {
    this.conversionsFromInteractionsRate = conversionsFromInteractionsRate;
    return this;
  }

  /**
   * Average biddable conversions (from interaction) per conversion eligible interaction. Shows how often, on average, an ad interaction leads to a biddable conversion.
   * @return conversionsFromInteractionsRate
   */
  @javax.annotation.Nullable
  public Double getConversionsFromInteractionsRate() {
    return conversionsFromInteractionsRate;
  }

  public void setConversionsFromInteractionsRate(Double conversionsFromInteractionsRate) {
    this.conversionsFromInteractionsRate = conversionsFromInteractionsRate;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsFromInteractionsValuePerInteraction(Double conversionsFromInteractionsValuePerInteraction) {
    this.conversionsFromInteractionsValuePerInteraction = conversionsFromInteractionsValuePerInteraction;
    return this;
  }

  /**
   * The value of conversions from interactions divided by the number of ad interactions. This only includes conversion actions which include_in_conversions_metric attribute is set to true. If you use conversion-based bidding, your bid strategies will optimize for these conversions.
   * @return conversionsFromInteractionsValuePerInteraction
   */
  @javax.annotation.Nullable
  public Double getConversionsFromInteractionsValuePerInteraction() {
    return conversionsFromInteractionsValuePerInteraction;
  }

  public void setConversionsFromInteractionsValuePerInteraction(Double conversionsFromInteractionsValuePerInteraction) {
    this.conversionsFromInteractionsValuePerInteraction = conversionsFromInteractionsValuePerInteraction;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsValue(Double conversionsValue) {
    this.conversionsValue = conversionsValue;
    return this;
  }

  /**
   * The sum of conversion values for the conversions included in the \&quot;conversions\&quot; field. This metric is useful only if you entered a value for your conversion actions.
   * @return conversionsValue
   */
  @javax.annotation.Nullable
  public Double getConversionsValue() {
    return conversionsValue;
  }

  public void setConversionsValue(Double conversionsValue) {
    this.conversionsValue = conversionsValue;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsValueByConversionDate(Double conversionsValueByConversionDate) {
    this.conversionsValueByConversionDate = conversionsValueByConversionDate;
    return this;
  }

  /**
   * The sum of biddable conversions value by conversion date. When this column is selected with date, the values in date column means the conversion date.
   * @return conversionsValueByConversionDate
   */
  @javax.annotation.Nullable
  public Double getConversionsValueByConversionDate() {
    return conversionsValueByConversionDate;
  }

  public void setConversionsValueByConversionDate(Double conversionsValueByConversionDate) {
    this.conversionsValueByConversionDate = conversionsValueByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics conversionsValuePerCost(Double conversionsValuePerCost) {
    this.conversionsValuePerCost = conversionsValuePerCost;
    return this;
  }

  /**
   * The value of biddable conversion divided by the total cost of conversion eligible interactions.
   * @return conversionsValuePerCost
   */
  @javax.annotation.Nullable
  public Double getConversionsValuePerCost() {
    return conversionsValuePerCost;
  }

  public void setConversionsValuePerCost(Double conversionsValuePerCost) {
    this.conversionsValuePerCost = conversionsValuePerCost;
  }


  public GoogleAdsSearchads360V0CommonMetrics costMicros(String costMicros) {
    this.costMicros = costMicros;
    return this;
  }

  /**
   * The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return costMicros
   */
  @javax.annotation.Nullable
  public String getCostMicros() {
    return costMicros;
  }

  public void setCostMicros(String costMicros) {
    this.costMicros = costMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics costPerAllConversions(Double costPerAllConversions) {
    this.costPerAllConversions = costPerAllConversions;
    return this;
  }

  /**
   * The cost of ad interactions divided by all conversions.
   * @return costPerAllConversions
   */
  @javax.annotation.Nullable
  public Double getCostPerAllConversions() {
    return costPerAllConversions;
  }

  public void setCostPerAllConversions(Double costPerAllConversions) {
    this.costPerAllConversions = costPerAllConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics costPerConversion(Double costPerConversion) {
    this.costPerConversion = costPerConversion;
    return this;
  }

  /**
   * Average conversion eligible cost per biddable conversion.
   * @return costPerConversion
   */
  @javax.annotation.Nullable
  public Double getCostPerConversion() {
    return costPerConversion;
  }

  public void setCostPerConversion(Double costPerConversion) {
    this.costPerConversion = costPerConversion;
  }


  public GoogleAdsSearchads360V0CommonMetrics costPerCurrentModelAttributedConversion(Double costPerCurrentModelAttributedConversion) {
    this.costPerCurrentModelAttributedConversion = costPerCurrentModelAttributedConversion;
    return this;
  }

  /**
   * The cost of ad interactions divided by current model attributed conversions. This only includes conversion actions which include_in_conversions_metric attribute is set to true. If you use conversion-based bidding, your bid strategies will optimize for these conversions.
   * @return costPerCurrentModelAttributedConversion
   */
  @javax.annotation.Nullable
  public Double getCostPerCurrentModelAttributedConversion() {
    return costPerCurrentModelAttributedConversion;
  }

  public void setCostPerCurrentModelAttributedConversion(Double costPerCurrentModelAttributedConversion) {
    this.costPerCurrentModelAttributedConversion = costPerCurrentModelAttributedConversion;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossDeviceConversions(Double crossDeviceConversions) {
    this.crossDeviceConversions = crossDeviceConversions;
    return this;
  }

  /**
   * Conversions from when a customer clicks on an ad on one device, then converts on a different device or browser. Cross-device conversions are already included in all_conversions.
   * @return crossDeviceConversions
   */
  @javax.annotation.Nullable
  public Double getCrossDeviceConversions() {
    return crossDeviceConversions;
  }

  public void setCrossDeviceConversions(Double crossDeviceConversions) {
    this.crossDeviceConversions = crossDeviceConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossDeviceConversionsValue(Double crossDeviceConversionsValue) {
    this.crossDeviceConversionsValue = crossDeviceConversionsValue;
    return this;
  }

  /**
   * The sum of the value of cross-device conversions.
   * @return crossDeviceConversionsValue
   */
  @javax.annotation.Nullable
  public Double getCrossDeviceConversionsValue() {
    return crossDeviceConversionsValue;
  }

  public void setCrossDeviceConversionsValue(Double crossDeviceConversionsValue) {
    this.crossDeviceConversionsValue = crossDeviceConversionsValue;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossSellCostOfGoodsSoldMicros(String crossSellCostOfGoodsSoldMicros) {
    this.crossSellCostOfGoodsSoldMicros = crossSellCostOfGoodsSoldMicros;
    return this;
  }

  /**
   * Cross-sell cost of goods sold (COGS) is the total cost of products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell cost of goods sold is the total cost of the products sold that weren&#39;t advertised. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat has a cost of goods sold value of $3, the shirt has a cost of goods sold value of $5. The cross-sell cost of goods sold for this order is $5. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return crossSellCostOfGoodsSoldMicros
   */
  @javax.annotation.Nullable
  public String getCrossSellCostOfGoodsSoldMicros() {
    return crossSellCostOfGoodsSoldMicros;
  }

  public void setCrossSellCostOfGoodsSoldMicros(String crossSellCostOfGoodsSoldMicros) {
    this.crossSellCostOfGoodsSoldMicros = crossSellCostOfGoodsSoldMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossSellGrossProfitMicros(String crossSellGrossProfitMicros) {
    this.crossSellGrossProfitMicros = crossSellGrossProfitMicros;
    return this;
  }

  /**
   * Cross-sell gross profit is the profit you made from products sold as a result of advertising a different product, minus cost of goods sold (COGS). How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the purchase is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell gross profit is the revenue you made from cross-sell attributed to your ads minus the cost of the goods sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The shirt is priced $20 and has a cost of goods sold value of $5. The cross-sell gross profit of this order is $15 &#x3D; $20 - $5. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return crossSellGrossProfitMicros
   */
  @javax.annotation.Nullable
  public String getCrossSellGrossProfitMicros() {
    return crossSellGrossProfitMicros;
  }

  public void setCrossSellGrossProfitMicros(String crossSellGrossProfitMicros) {
    this.crossSellGrossProfitMicros = crossSellGrossProfitMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossSellRevenueMicros(String crossSellRevenueMicros) {
    this.crossSellRevenueMicros = crossSellRevenueMicros;
    return this;
  }

  /**
   * Cross-sell revenue is the total amount you made from products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell revenue is the total value you made from cross-sell attributed to your ads. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and the shirt is priced $20. The cross-sell revenue of this order is $20. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return crossSellRevenueMicros
   */
  @javax.annotation.Nullable
  public String getCrossSellRevenueMicros() {
    return crossSellRevenueMicros;
  }

  public void setCrossSellRevenueMicros(String crossSellRevenueMicros) {
    this.crossSellRevenueMicros = crossSellRevenueMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics crossSellUnitsSold(Double crossSellUnitsSold) {
    this.crossSellUnitsSold = crossSellUnitsSold;
    return this;
  }

  /**
   * Cross-sell units sold is the total number of products sold as a result of advertising a different product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If these products don&#39;t match then this is considered cross-sell. Cross-sell units sold is the total number of cross-sold products from all orders attributed to your ads. Example: Someone clicked on a Shopping ad for a hat then bought the same hat, a shirt and a jacket. The cross-sell units sold in this order is 2. This metric is only available if you report conversions with cart data.
   * @return crossSellUnitsSold
   */
  @javax.annotation.Nullable
  public Double getCrossSellUnitsSold() {
    return crossSellUnitsSold;
  }

  public void setCrossSellUnitsSold(Double crossSellUnitsSold) {
    this.crossSellUnitsSold = crossSellUnitsSold;
  }


  public GoogleAdsSearchads360V0CommonMetrics ctr(Double ctr) {
    this.ctr = ctr;
    return this;
  }

  /**
   * The number of clicks your ad receives (Clicks) divided by the number of times your ad is shown (Impressions).
   * @return ctr
   */
  @javax.annotation.Nullable
  public Double getCtr() {
    return ctr;
  }

  public void setCtr(Double ctr) {
    this.ctr = ctr;
  }


  public GoogleAdsSearchads360V0CommonMetrics historicalCreativeQualityScore(HistoricalCreativeQualityScoreEnum historicalCreativeQualityScore) {
    this.historicalCreativeQualityScore = historicalCreativeQualityScore;
    return this;
  }

  /**
   * The creative historical quality score.
   * @return historicalCreativeQualityScore
   */
  @javax.annotation.Nullable
  public HistoricalCreativeQualityScoreEnum getHistoricalCreativeQualityScore() {
    return historicalCreativeQualityScore;
  }

  public void setHistoricalCreativeQualityScore(HistoricalCreativeQualityScoreEnum historicalCreativeQualityScore) {
    this.historicalCreativeQualityScore = historicalCreativeQualityScore;
  }


  public GoogleAdsSearchads360V0CommonMetrics historicalLandingPageQualityScore(HistoricalLandingPageQualityScoreEnum historicalLandingPageQualityScore) {
    this.historicalLandingPageQualityScore = historicalLandingPageQualityScore;
    return this;
  }

  /**
   * The quality of historical landing page experience.
   * @return historicalLandingPageQualityScore
   */
  @javax.annotation.Nullable
  public HistoricalLandingPageQualityScoreEnum getHistoricalLandingPageQualityScore() {
    return historicalLandingPageQualityScore;
  }

  public void setHistoricalLandingPageQualityScore(HistoricalLandingPageQualityScoreEnum historicalLandingPageQualityScore) {
    this.historicalLandingPageQualityScore = historicalLandingPageQualityScore;
  }


  public GoogleAdsSearchads360V0CommonMetrics historicalQualityScore(String historicalQualityScore) {
    this.historicalQualityScore = historicalQualityScore;
    return this;
  }

  /**
   * The historical quality score.
   * @return historicalQualityScore
   */
  @javax.annotation.Nullable
  public String getHistoricalQualityScore() {
    return historicalQualityScore;
  }

  public void setHistoricalQualityScore(String historicalQualityScore) {
    this.historicalQualityScore = historicalQualityScore;
  }


  public GoogleAdsSearchads360V0CommonMetrics historicalSearchPredictedCtr(HistoricalSearchPredictedCtrEnum historicalSearchPredictedCtr) {
    this.historicalSearchPredictedCtr = historicalSearchPredictedCtr;
    return this;
  }

  /**
   * The historical search predicted click through rate (CTR).
   * @return historicalSearchPredictedCtr
   */
  @javax.annotation.Nullable
  public HistoricalSearchPredictedCtrEnum getHistoricalSearchPredictedCtr() {
    return historicalSearchPredictedCtr;
  }

  public void setHistoricalSearchPredictedCtr(HistoricalSearchPredictedCtrEnum historicalSearchPredictedCtr) {
    this.historicalSearchPredictedCtr = historicalSearchPredictedCtr;
  }


  public GoogleAdsSearchads360V0CommonMetrics impressions(String impressions) {
    this.impressions = impressions;
    return this;
  }

  /**
   * Count of how often your ad has appeared on a search results page or website on the Google Network.
   * @return impressions
   */
  @javax.annotation.Nullable
  public String getImpressions() {
    return impressions;
  }

  public void setImpressions(String impressions) {
    this.impressions = impressions;
  }


  public GoogleAdsSearchads360V0CommonMetrics interactionEventTypes(List<InteractionEventTypesEnum> interactionEventTypes) {
    this.interactionEventTypes = interactionEventTypes;
    return this;
  }

  public GoogleAdsSearchads360V0CommonMetrics addInteractionEventTypesItem(InteractionEventTypesEnum interactionEventTypesItem) {
    if (this.interactionEventTypes == null) {
      this.interactionEventTypes = new ArrayList<>();
    }
    this.interactionEventTypes.add(interactionEventTypesItem);
    return this;
  }

  /**
   * The types of payable and free interactions.
   * @return interactionEventTypes
   */
  @javax.annotation.Nullable
  public List<InteractionEventTypesEnum> getInteractionEventTypes() {
    return interactionEventTypes;
  }

  public void setInteractionEventTypes(List<InteractionEventTypesEnum> interactionEventTypes) {
    this.interactionEventTypes = interactionEventTypes;
  }


  public GoogleAdsSearchads360V0CommonMetrics interactionRate(Double interactionRate) {
    this.interactionRate = interactionRate;
    return this;
  }

  /**
   * How often people interact with your ad after it is shown to them. This is the number of interactions divided by the number of times your ad is shown.
   * @return interactionRate
   */
  @javax.annotation.Nullable
  public Double getInteractionRate() {
    return interactionRate;
  }

  public void setInteractionRate(Double interactionRate) {
    this.interactionRate = interactionRate;
  }


  public GoogleAdsSearchads360V0CommonMetrics interactions(String interactions) {
    this.interactions = interactions;
    return this;
  }

  /**
   * The number of interactions. An interaction is the main user action associated with an ad format-clicks for text and shopping ads, views for video ads, and so on.
   * @return interactions
   */
  @javax.annotation.Nullable
  public String getInteractions() {
    return interactions;
  }

  public void setInteractions(String interactions) {
    this.interactions = interactions;
  }


  public GoogleAdsSearchads360V0CommonMetrics invalidClickRate(Double invalidClickRate) {
    this.invalidClickRate = invalidClickRate;
    return this;
  }

  /**
   * The percentage of clicks filtered out of your total number of clicks (filtered + non-filtered clicks) during the reporting period.
   * @return invalidClickRate
   */
  @javax.annotation.Nullable
  public Double getInvalidClickRate() {
    return invalidClickRate;
  }

  public void setInvalidClickRate(Double invalidClickRate) {
    this.invalidClickRate = invalidClickRate;
  }


  public GoogleAdsSearchads360V0CommonMetrics invalidClicks(String invalidClicks) {
    this.invalidClicks = invalidClicks;
    return this;
  }

  /**
   * Number of clicks Google considers illegitimate and doesn&#39;t charge you for.
   * @return invalidClicks
   */
  @javax.annotation.Nullable
  public String getInvalidClicks() {
    return invalidClicks;
  }

  public void setInvalidClicks(String invalidClicks) {
    this.invalidClicks = invalidClicks;
  }


  public GoogleAdsSearchads360V0CommonMetrics leadCostOfGoodsSoldMicros(String leadCostOfGoodsSoldMicros) {
    this.leadCostOfGoodsSoldMicros = leadCostOfGoodsSoldMicros;
    return this;
  }

  /**
   * Lead cost of goods sold (COGS) is the total cost of products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the cost of these goods is counted under lead cost of goods sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat has a cost of goods sold value of $3, the shirt has a cost of goods sold value of $5. The lead cost of goods sold for this order is $3. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return leadCostOfGoodsSoldMicros
   */
  @javax.annotation.Nullable
  public String getLeadCostOfGoodsSoldMicros() {
    return leadCostOfGoodsSoldMicros;
  }

  public void setLeadCostOfGoodsSoldMicros(String leadCostOfGoodsSoldMicros) {
    this.leadCostOfGoodsSoldMicros = leadCostOfGoodsSoldMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics leadGrossProfitMicros(String leadGrossProfitMicros) {
    this.leadGrossProfitMicros = leadGrossProfitMicros;
    return this;
  }

  /**
   * Lead gross profit is the profit you made from products sold as a result of advertising the same product, minus cost of goods sold (COGS). How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the revenue you made from these sales minus the cost of goods sold is your lead gross profit. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and has a cost of goods sold value of $3. The lead gross profit of this order is $7 &#x3D; $10 - $3. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return leadGrossProfitMicros
   */
  @javax.annotation.Nullable
  public String getLeadGrossProfitMicros() {
    return leadGrossProfitMicros;
  }

  public void setLeadGrossProfitMicros(String leadGrossProfitMicros) {
    this.leadGrossProfitMicros = leadGrossProfitMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics leadRevenueMicros(String leadRevenueMicros) {
    this.leadRevenueMicros = leadRevenueMicros;
    return this;
  }

  /**
   * Lead revenue is the total amount you made from products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the total value you made from the sales of these products is shown under lead revenue. Example: Someone clicked on a Shopping ad for a hat then bought the same hat and a shirt. The hat is priced $10 and the shirt is priced $20. The lead revenue of this order is $10. This metric is only available if you report conversions with cart data. This metric is a monetary value and returned in the customer&#39;s currency by default. See the metrics_currency parameter at https://developers.google.com/search-ads/reporting/query/query-structure#parameters_clause
   * @return leadRevenueMicros
   */
  @javax.annotation.Nullable
  public String getLeadRevenueMicros() {
    return leadRevenueMicros;
  }

  public void setLeadRevenueMicros(String leadRevenueMicros) {
    this.leadRevenueMicros = leadRevenueMicros;
  }


  public GoogleAdsSearchads360V0CommonMetrics leadUnitsSold(Double leadUnitsSold) {
    this.leadUnitsSold = leadUnitsSold;
    return this;
  }

  /**
   * Lead units sold is the total number of products sold as a result of advertising the same product. How it works: You report conversions with cart data for completed purchases on your website. If the ad that was interacted with before the purchase has an associated product (see Shopping Ads) then this product is considered the advertised product. Any product included in the order the customer places is a sold product. If the advertised and sold products match, then the total number of these products sold is shown under lead units sold. Example: Someone clicked on a Shopping ad for a hat then bought the same hat, a shirt and a jacket. The lead units sold in this order is 1. This metric is only available if you report conversions with cart data.
   * @return leadUnitsSold
   */
  @javax.annotation.Nullable
  public Double getLeadUnitsSold() {
    return leadUnitsSold;
  }

  public void setLeadUnitsSold(Double leadUnitsSold) {
    this.leadUnitsSold = leadUnitsSold;
  }


  public GoogleAdsSearchads360V0CommonMetrics mobileFriendlyClicksPercentage(Double mobileFriendlyClicksPercentage) {
    this.mobileFriendlyClicksPercentage = mobileFriendlyClicksPercentage;
    return this;
  }

  /**
   * The percentage of mobile clicks that go to a mobile-friendly page.
   * @return mobileFriendlyClicksPercentage
   */
  @javax.annotation.Nullable
  public Double getMobileFriendlyClicksPercentage() {
    return mobileFriendlyClicksPercentage;
  }

  public void setMobileFriendlyClicksPercentage(Double mobileFriendlyClicksPercentage) {
    this.mobileFriendlyClicksPercentage = mobileFriendlyClicksPercentage;
  }


  public GoogleAdsSearchads360V0CommonMetrics rawEventConversionMetrics(List<GoogleAdsSearchads360V0CommonValue> rawEventConversionMetrics) {
    this.rawEventConversionMetrics = rawEventConversionMetrics;
    return this;
  }

  public GoogleAdsSearchads360V0CommonMetrics addRawEventConversionMetricsItem(GoogleAdsSearchads360V0CommonValue rawEventConversionMetricsItem) {
    if (this.rawEventConversionMetrics == null) {
      this.rawEventConversionMetrics = new ArrayList<>();
    }
    this.rawEventConversionMetrics.add(rawEventConversionMetricsItem);
    return this;
  }

  /**
   * The raw event conversion metrics.
   * @return rawEventConversionMetrics
   */
  @javax.annotation.Nullable
  public List<GoogleAdsSearchads360V0CommonValue> getRawEventConversionMetrics() {
    return rawEventConversionMetrics;
  }

  public void setRawEventConversionMetrics(List<GoogleAdsSearchads360V0CommonValue> rawEventConversionMetrics) {
    this.rawEventConversionMetrics = rawEventConversionMetrics;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchAbsoluteTopImpressionShare(Double searchAbsoluteTopImpressionShare) {
    this.searchAbsoluteTopImpressionShare = searchAbsoluteTopImpressionShare;
    return this;
  }

  /**
   * The percentage of the customer&#39;s Shopping or Search ad impressions that are shown in the most prominent Shopping position. See https://support.google.com/sa360/answer/9566729 for details. Any value below 0.1 is reported as 0.0999.
   * @return searchAbsoluteTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchAbsoluteTopImpressionShare() {
    return searchAbsoluteTopImpressionShare;
  }

  public void setSearchAbsoluteTopImpressionShare(Double searchAbsoluteTopImpressionShare) {
    this.searchAbsoluteTopImpressionShare = searchAbsoluteTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchBudgetLostAbsoluteTopImpressionShare(Double searchBudgetLostAbsoluteTopImpressionShare) {
    this.searchBudgetLostAbsoluteTopImpressionShare = searchBudgetLostAbsoluteTopImpressionShare;
    return this;
  }

  /**
   * The number estimating how often your ad wasn&#39;t the very first ad above the organic search results due to a low budget. Note: Search budget lost absolute top impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchBudgetLostAbsoluteTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchBudgetLostAbsoluteTopImpressionShare() {
    return searchBudgetLostAbsoluteTopImpressionShare;
  }

  public void setSearchBudgetLostAbsoluteTopImpressionShare(Double searchBudgetLostAbsoluteTopImpressionShare) {
    this.searchBudgetLostAbsoluteTopImpressionShare = searchBudgetLostAbsoluteTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchBudgetLostImpressionShare(Double searchBudgetLostImpressionShare) {
    this.searchBudgetLostImpressionShare = searchBudgetLostImpressionShare;
    return this;
  }

  /**
   * The estimated percent of times that your ad was eligible to show on the Search Network but didn&#39;t because your budget was too low. Note: Search budget lost impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchBudgetLostImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchBudgetLostImpressionShare() {
    return searchBudgetLostImpressionShare;
  }

  public void setSearchBudgetLostImpressionShare(Double searchBudgetLostImpressionShare) {
    this.searchBudgetLostImpressionShare = searchBudgetLostImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchBudgetLostTopImpressionShare(Double searchBudgetLostTopImpressionShare) {
    this.searchBudgetLostTopImpressionShare = searchBudgetLostTopImpressionShare;
    return this;
  }

  /**
   * The number estimating how often your ad didn&#39;t show anywhere above the organic search results due to a low budget. Note: Search budget lost top impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchBudgetLostTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchBudgetLostTopImpressionShare() {
    return searchBudgetLostTopImpressionShare;
  }

  public void setSearchBudgetLostTopImpressionShare(Double searchBudgetLostTopImpressionShare) {
    this.searchBudgetLostTopImpressionShare = searchBudgetLostTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchClickShare(Double searchClickShare) {
    this.searchClickShare = searchClickShare;
    return this;
  }

  /**
   * The number of clicks you&#39;ve received on the Search Network divided by the estimated number of clicks you were eligible to receive. Note: Search click share is reported in the range of 0.1 to 1. Any value below 0.1 is reported as 0.0999.
   * @return searchClickShare
   */
  @javax.annotation.Nullable
  public Double getSearchClickShare() {
    return searchClickShare;
  }

  public void setSearchClickShare(Double searchClickShare) {
    this.searchClickShare = searchClickShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchExactMatchImpressionShare(Double searchExactMatchImpressionShare) {
    this.searchExactMatchImpressionShare = searchExactMatchImpressionShare;
    return this;
  }

  /**
   * The impressions you&#39;ve received divided by the estimated number of impressions you were eligible to receive on the Search Network for search terms that matched your keywords exactly (or were close variants of your keyword), regardless of your keyword match types. Note: Search exact match impression share is reported in the range of 0.1 to 1. Any value below 0.1 is reported as 0.0999.
   * @return searchExactMatchImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchExactMatchImpressionShare() {
    return searchExactMatchImpressionShare;
  }

  public void setSearchExactMatchImpressionShare(Double searchExactMatchImpressionShare) {
    this.searchExactMatchImpressionShare = searchExactMatchImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchImpressionShare(Double searchImpressionShare) {
    this.searchImpressionShare = searchImpressionShare;
    return this;
  }

  /**
   * The impressions you&#39;ve received on the Search Network divided by the estimated number of impressions you were eligible to receive. Note: Search impression share is reported in the range of 0.1 to 1. Any value below 0.1 is reported as 0.0999.
   * @return searchImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchImpressionShare() {
    return searchImpressionShare;
  }

  public void setSearchImpressionShare(Double searchImpressionShare) {
    this.searchImpressionShare = searchImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchRankLostAbsoluteTopImpressionShare(Double searchRankLostAbsoluteTopImpressionShare) {
    this.searchRankLostAbsoluteTopImpressionShare = searchRankLostAbsoluteTopImpressionShare;
    return this;
  }

  /**
   * The number estimating how often your ad wasn&#39;t the very first ad above the organic search results due to poor Ad Rank. Note: Search rank lost absolute top impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchRankLostAbsoluteTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchRankLostAbsoluteTopImpressionShare() {
    return searchRankLostAbsoluteTopImpressionShare;
  }

  public void setSearchRankLostAbsoluteTopImpressionShare(Double searchRankLostAbsoluteTopImpressionShare) {
    this.searchRankLostAbsoluteTopImpressionShare = searchRankLostAbsoluteTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchRankLostImpressionShare(Double searchRankLostImpressionShare) {
    this.searchRankLostImpressionShare = searchRankLostImpressionShare;
    return this;
  }

  /**
   * The estimated percentage of impressions on the Search Network that your ads didn&#39;t receive due to poor Ad Rank. Note: Search rank lost impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchRankLostImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchRankLostImpressionShare() {
    return searchRankLostImpressionShare;
  }

  public void setSearchRankLostImpressionShare(Double searchRankLostImpressionShare) {
    this.searchRankLostImpressionShare = searchRankLostImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchRankLostTopImpressionShare(Double searchRankLostTopImpressionShare) {
    this.searchRankLostTopImpressionShare = searchRankLostTopImpressionShare;
    return this;
  }

  /**
   * The number estimating how often your ad didn&#39;t show anywhere above the organic search results due to poor Ad Rank. Note: Search rank lost top impression share is reported in the range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
   * @return searchRankLostTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchRankLostTopImpressionShare() {
    return searchRankLostTopImpressionShare;
  }

  public void setSearchRankLostTopImpressionShare(Double searchRankLostTopImpressionShare) {
    this.searchRankLostTopImpressionShare = searchRankLostTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics searchTopImpressionShare(Double searchTopImpressionShare) {
    this.searchTopImpressionShare = searchTopImpressionShare;
    return this;
  }

  /**
   * The impressions you&#39;ve received in the top location (anywhere above the organic search results) compared to the estimated number of impressions you were eligible to receive in the top location. Note: Search top impression share is reported in the range of 0.1 to 1. Any value below 0.1 is reported as 0.0999.
   * @return searchTopImpressionShare
   */
  @javax.annotation.Nullable
  public Double getSearchTopImpressionShare() {
    return searchTopImpressionShare;
  }

  public void setSearchTopImpressionShare(Double searchTopImpressionShare) {
    this.searchTopImpressionShare = searchTopImpressionShare;
  }


  public GoogleAdsSearchads360V0CommonMetrics topImpressionPercentage(Double topImpressionPercentage) {
    this.topImpressionPercentage = topImpressionPercentage;
    return this;
  }

  /**
   * The percent of your ad impressions that are shown anywhere above the organic search results.
   * @return topImpressionPercentage
   */
  @javax.annotation.Nullable
  public Double getTopImpressionPercentage() {
    return topImpressionPercentage;
  }

  public void setTopImpressionPercentage(Double topImpressionPercentage) {
    this.topImpressionPercentage = topImpressionPercentage;
  }


  public GoogleAdsSearchads360V0CommonMetrics valuePerAllConversions(Double valuePerAllConversions) {
    this.valuePerAllConversions = valuePerAllConversions;
    return this;
  }

  /**
   * The value of all conversions divided by the number of all conversions.
   * @return valuePerAllConversions
   */
  @javax.annotation.Nullable
  public Double getValuePerAllConversions() {
    return valuePerAllConversions;
  }

  public void setValuePerAllConversions(Double valuePerAllConversions) {
    this.valuePerAllConversions = valuePerAllConversions;
  }


  public GoogleAdsSearchads360V0CommonMetrics valuePerAllConversionsByConversionDate(Double valuePerAllConversionsByConversionDate) {
    this.valuePerAllConversionsByConversionDate = valuePerAllConversionsByConversionDate;
    return this;
  }

  /**
   * The value of all conversions divided by the number of all conversions. When this column is selected with date, the values in date column means the conversion date. Details for the by_conversion_date columns are available at https://support.google.com/sa360/answer/9250611.
   * @return valuePerAllConversionsByConversionDate
   */
  @javax.annotation.Nullable
  public Double getValuePerAllConversionsByConversionDate() {
    return valuePerAllConversionsByConversionDate;
  }

  public void setValuePerAllConversionsByConversionDate(Double valuePerAllConversionsByConversionDate) {
    this.valuePerAllConversionsByConversionDate = valuePerAllConversionsByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics valuePerConversion(Double valuePerConversion) {
    this.valuePerConversion = valuePerConversion;
    return this;
  }

  /**
   * The value of biddable conversion divided by the number of biddable conversions. Shows how much, on average, each of the biddable conversions is worth.
   * @return valuePerConversion
   */
  @javax.annotation.Nullable
  public Double getValuePerConversion() {
    return valuePerConversion;
  }

  public void setValuePerConversion(Double valuePerConversion) {
    this.valuePerConversion = valuePerConversion;
  }


  public GoogleAdsSearchads360V0CommonMetrics valuePerConversionsByConversionDate(Double valuePerConversionsByConversionDate) {
    this.valuePerConversionsByConversionDate = valuePerConversionsByConversionDate;
    return this;
  }

  /**
   * Biddable conversions value by conversion date divided by biddable conversions by conversion date. Shows how much, on average, each of the biddable conversions is worth (by conversion date). When this column is selected with date, the values in date column means the conversion date.
   * @return valuePerConversionsByConversionDate
   */
  @javax.annotation.Nullable
  public Double getValuePerConversionsByConversionDate() {
    return valuePerConversionsByConversionDate;
  }

  public void setValuePerConversionsByConversionDate(Double valuePerConversionsByConversionDate) {
    this.valuePerConversionsByConversionDate = valuePerConversionsByConversionDate;
  }


  public GoogleAdsSearchads360V0CommonMetrics visits(Double visits) {
    this.visits = visits;
    return this;
  }

  /**
   * Clicks that Search Ads 360 has successfully recorded and forwarded to an advertiser&#39;s landing page.
   * @return visits
   */
  @javax.annotation.Nullable
  public Double getVisits() {
    return visits;
  }

  public void setVisits(Double visits) {
    this.visits = visits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAdsSearchads360V0CommonMetrics googleAdsSearchads360V0CommonMetrics = (GoogleAdsSearchads360V0CommonMetrics) o;
    return Objects.equals(this.absoluteTopImpressionPercentage, googleAdsSearchads360V0CommonMetrics.absoluteTopImpressionPercentage) &&
        Objects.equals(this.allConversions, googleAdsSearchads360V0CommonMetrics.allConversions) &&
        Objects.equals(this.allConversionsByConversionDate, googleAdsSearchads360V0CommonMetrics.allConversionsByConversionDate) &&
        Objects.equals(this.allConversionsFromClickToCall, googleAdsSearchads360V0CommonMetrics.allConversionsFromClickToCall) &&
        Objects.equals(this.allConversionsFromDirections, googleAdsSearchads360V0CommonMetrics.allConversionsFromDirections) &&
        Objects.equals(this.allConversionsFromInteractionsRate, googleAdsSearchads360V0CommonMetrics.allConversionsFromInteractionsRate) &&
        Objects.equals(this.allConversionsFromInteractionsValuePerInteraction, googleAdsSearchads360V0CommonMetrics.allConversionsFromInteractionsValuePerInteraction) &&
        Objects.equals(this.allConversionsFromMenu, googleAdsSearchads360V0CommonMetrics.allConversionsFromMenu) &&
        Objects.equals(this.allConversionsFromOrder, googleAdsSearchads360V0CommonMetrics.allConversionsFromOrder) &&
        Objects.equals(this.allConversionsFromOtherEngagement, googleAdsSearchads360V0CommonMetrics.allConversionsFromOtherEngagement) &&
        Objects.equals(this.allConversionsFromStoreVisit, googleAdsSearchads360V0CommonMetrics.allConversionsFromStoreVisit) &&
        Objects.equals(this.allConversionsFromStoreWebsite, googleAdsSearchads360V0CommonMetrics.allConversionsFromStoreWebsite) &&
        Objects.equals(this.allConversionsValue, googleAdsSearchads360V0CommonMetrics.allConversionsValue) &&
        Objects.equals(this.allConversionsValueByConversionDate, googleAdsSearchads360V0CommonMetrics.allConversionsValueByConversionDate) &&
        Objects.equals(this.allConversionsValuePerCost, googleAdsSearchads360V0CommonMetrics.allConversionsValuePerCost) &&
        Objects.equals(this.averageCost, googleAdsSearchads360V0CommonMetrics.averageCost) &&
        Objects.equals(this.averageCpc, googleAdsSearchads360V0CommonMetrics.averageCpc) &&
        Objects.equals(this.averageCpm, googleAdsSearchads360V0CommonMetrics.averageCpm) &&
        Objects.equals(this.clicks, googleAdsSearchads360V0CommonMetrics.clicks) &&
        Objects.equals(this.clientAccountConversions, googleAdsSearchads360V0CommonMetrics.clientAccountConversions) &&
        Objects.equals(this.clientAccountConversionsValue, googleAdsSearchads360V0CommonMetrics.clientAccountConversionsValue) &&
        Objects.equals(this.clientAccountCrossSellCostOfGoodsSoldMicros, googleAdsSearchads360V0CommonMetrics.clientAccountCrossSellCostOfGoodsSoldMicros) &&
        Objects.equals(this.clientAccountCrossSellGrossProfitMicros, googleAdsSearchads360V0CommonMetrics.clientAccountCrossSellGrossProfitMicros) &&
        Objects.equals(this.clientAccountCrossSellRevenueMicros, googleAdsSearchads360V0CommonMetrics.clientAccountCrossSellRevenueMicros) &&
        Objects.equals(this.clientAccountCrossSellUnitsSold, googleAdsSearchads360V0CommonMetrics.clientAccountCrossSellUnitsSold) &&
        Objects.equals(this.clientAccountLeadCostOfGoodsSoldMicros, googleAdsSearchads360V0CommonMetrics.clientAccountLeadCostOfGoodsSoldMicros) &&
        Objects.equals(this.clientAccountLeadGrossProfitMicros, googleAdsSearchads360V0CommonMetrics.clientAccountLeadGrossProfitMicros) &&
        Objects.equals(this.clientAccountLeadRevenueMicros, googleAdsSearchads360V0CommonMetrics.clientAccountLeadRevenueMicros) &&
        Objects.equals(this.clientAccountLeadUnitsSold, googleAdsSearchads360V0CommonMetrics.clientAccountLeadUnitsSold) &&
        Objects.equals(this.clientAccountViewThroughConversions, googleAdsSearchads360V0CommonMetrics.clientAccountViewThroughConversions) &&
        Objects.equals(this.contentBudgetLostImpressionShare, googleAdsSearchads360V0CommonMetrics.contentBudgetLostImpressionShare) &&
        Objects.equals(this.contentImpressionShare, googleAdsSearchads360V0CommonMetrics.contentImpressionShare) &&
        Objects.equals(this.contentRankLostImpressionShare, googleAdsSearchads360V0CommonMetrics.contentRankLostImpressionShare) &&
        Objects.equals(this.conversionCustomMetrics, googleAdsSearchads360V0CommonMetrics.conversionCustomMetrics) &&
        Objects.equals(this.conversions, googleAdsSearchads360V0CommonMetrics.conversions) &&
        Objects.equals(this.conversionsByConversionDate, googleAdsSearchads360V0CommonMetrics.conversionsByConversionDate) &&
        Objects.equals(this.conversionsFromInteractionsRate, googleAdsSearchads360V0CommonMetrics.conversionsFromInteractionsRate) &&
        Objects.equals(this.conversionsFromInteractionsValuePerInteraction, googleAdsSearchads360V0CommonMetrics.conversionsFromInteractionsValuePerInteraction) &&
        Objects.equals(this.conversionsValue, googleAdsSearchads360V0CommonMetrics.conversionsValue) &&
        Objects.equals(this.conversionsValueByConversionDate, googleAdsSearchads360V0CommonMetrics.conversionsValueByConversionDate) &&
        Objects.equals(this.conversionsValuePerCost, googleAdsSearchads360V0CommonMetrics.conversionsValuePerCost) &&
        Objects.equals(this.costMicros, googleAdsSearchads360V0CommonMetrics.costMicros) &&
        Objects.equals(this.costPerAllConversions, googleAdsSearchads360V0CommonMetrics.costPerAllConversions) &&
        Objects.equals(this.costPerConversion, googleAdsSearchads360V0CommonMetrics.costPerConversion) &&
        Objects.equals(this.costPerCurrentModelAttributedConversion, googleAdsSearchads360V0CommonMetrics.costPerCurrentModelAttributedConversion) &&
        Objects.equals(this.crossDeviceConversions, googleAdsSearchads360V0CommonMetrics.crossDeviceConversions) &&
        Objects.equals(this.crossDeviceConversionsValue, googleAdsSearchads360V0CommonMetrics.crossDeviceConversionsValue) &&
        Objects.equals(this.crossSellCostOfGoodsSoldMicros, googleAdsSearchads360V0CommonMetrics.crossSellCostOfGoodsSoldMicros) &&
        Objects.equals(this.crossSellGrossProfitMicros, googleAdsSearchads360V0CommonMetrics.crossSellGrossProfitMicros) &&
        Objects.equals(this.crossSellRevenueMicros, googleAdsSearchads360V0CommonMetrics.crossSellRevenueMicros) &&
        Objects.equals(this.crossSellUnitsSold, googleAdsSearchads360V0CommonMetrics.crossSellUnitsSold) &&
        Objects.equals(this.ctr, googleAdsSearchads360V0CommonMetrics.ctr) &&
        Objects.equals(this.historicalCreativeQualityScore, googleAdsSearchads360V0CommonMetrics.historicalCreativeQualityScore) &&
        Objects.equals(this.historicalLandingPageQualityScore, googleAdsSearchads360V0CommonMetrics.historicalLandingPageQualityScore) &&
        Objects.equals(this.historicalQualityScore, googleAdsSearchads360V0CommonMetrics.historicalQualityScore) &&
        Objects.equals(this.historicalSearchPredictedCtr, googleAdsSearchads360V0CommonMetrics.historicalSearchPredictedCtr) &&
        Objects.equals(this.impressions, googleAdsSearchads360V0CommonMetrics.impressions) &&
        Objects.equals(this.interactionEventTypes, googleAdsSearchads360V0CommonMetrics.interactionEventTypes) &&
        Objects.equals(this.interactionRate, googleAdsSearchads360V0CommonMetrics.interactionRate) &&
        Objects.equals(this.interactions, googleAdsSearchads360V0CommonMetrics.interactions) &&
        Objects.equals(this.invalidClickRate, googleAdsSearchads360V0CommonMetrics.invalidClickRate) &&
        Objects.equals(this.invalidClicks, googleAdsSearchads360V0CommonMetrics.invalidClicks) &&
        Objects.equals(this.leadCostOfGoodsSoldMicros, googleAdsSearchads360V0CommonMetrics.leadCostOfGoodsSoldMicros) &&
        Objects.equals(this.leadGrossProfitMicros, googleAdsSearchads360V0CommonMetrics.leadGrossProfitMicros) &&
        Objects.equals(this.leadRevenueMicros, googleAdsSearchads360V0CommonMetrics.leadRevenueMicros) &&
        Objects.equals(this.leadUnitsSold, googleAdsSearchads360V0CommonMetrics.leadUnitsSold) &&
        Objects.equals(this.mobileFriendlyClicksPercentage, googleAdsSearchads360V0CommonMetrics.mobileFriendlyClicksPercentage) &&
        Objects.equals(this.rawEventConversionMetrics, googleAdsSearchads360V0CommonMetrics.rawEventConversionMetrics) &&
        Objects.equals(this.searchAbsoluteTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchAbsoluteTopImpressionShare) &&
        Objects.equals(this.searchBudgetLostAbsoluteTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchBudgetLostAbsoluteTopImpressionShare) &&
        Objects.equals(this.searchBudgetLostImpressionShare, googleAdsSearchads360V0CommonMetrics.searchBudgetLostImpressionShare) &&
        Objects.equals(this.searchBudgetLostTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchBudgetLostTopImpressionShare) &&
        Objects.equals(this.searchClickShare, googleAdsSearchads360V0CommonMetrics.searchClickShare) &&
        Objects.equals(this.searchExactMatchImpressionShare, googleAdsSearchads360V0CommonMetrics.searchExactMatchImpressionShare) &&
        Objects.equals(this.searchImpressionShare, googleAdsSearchads360V0CommonMetrics.searchImpressionShare) &&
        Objects.equals(this.searchRankLostAbsoluteTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchRankLostAbsoluteTopImpressionShare) &&
        Objects.equals(this.searchRankLostImpressionShare, googleAdsSearchads360V0CommonMetrics.searchRankLostImpressionShare) &&
        Objects.equals(this.searchRankLostTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchRankLostTopImpressionShare) &&
        Objects.equals(this.searchTopImpressionShare, googleAdsSearchads360V0CommonMetrics.searchTopImpressionShare) &&
        Objects.equals(this.topImpressionPercentage, googleAdsSearchads360V0CommonMetrics.topImpressionPercentage) &&
        Objects.equals(this.valuePerAllConversions, googleAdsSearchads360V0CommonMetrics.valuePerAllConversions) &&
        Objects.equals(this.valuePerAllConversionsByConversionDate, googleAdsSearchads360V0CommonMetrics.valuePerAllConversionsByConversionDate) &&
        Objects.equals(this.valuePerConversion, googleAdsSearchads360V0CommonMetrics.valuePerConversion) &&
        Objects.equals(this.valuePerConversionsByConversionDate, googleAdsSearchads360V0CommonMetrics.valuePerConversionsByConversionDate) &&
        Objects.equals(this.visits, googleAdsSearchads360V0CommonMetrics.visits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteTopImpressionPercentage, allConversions, allConversionsByConversionDate, allConversionsFromClickToCall, allConversionsFromDirections, allConversionsFromInteractionsRate, allConversionsFromInteractionsValuePerInteraction, allConversionsFromMenu, allConversionsFromOrder, allConversionsFromOtherEngagement, allConversionsFromStoreVisit, allConversionsFromStoreWebsite, allConversionsValue, allConversionsValueByConversionDate, allConversionsValuePerCost, averageCost, averageCpc, averageCpm, clicks, clientAccountConversions, clientAccountConversionsValue, clientAccountCrossSellCostOfGoodsSoldMicros, clientAccountCrossSellGrossProfitMicros, clientAccountCrossSellRevenueMicros, clientAccountCrossSellUnitsSold, clientAccountLeadCostOfGoodsSoldMicros, clientAccountLeadGrossProfitMicros, clientAccountLeadRevenueMicros, clientAccountLeadUnitsSold, clientAccountViewThroughConversions, contentBudgetLostImpressionShare, contentImpressionShare, contentRankLostImpressionShare, conversionCustomMetrics, conversions, conversionsByConversionDate, conversionsFromInteractionsRate, conversionsFromInteractionsValuePerInteraction, conversionsValue, conversionsValueByConversionDate, conversionsValuePerCost, costMicros, costPerAllConversions, costPerConversion, costPerCurrentModelAttributedConversion, crossDeviceConversions, crossDeviceConversionsValue, crossSellCostOfGoodsSoldMicros, crossSellGrossProfitMicros, crossSellRevenueMicros, crossSellUnitsSold, ctr, historicalCreativeQualityScore, historicalLandingPageQualityScore, historicalQualityScore, historicalSearchPredictedCtr, impressions, interactionEventTypes, interactionRate, interactions, invalidClickRate, invalidClicks, leadCostOfGoodsSoldMicros, leadGrossProfitMicros, leadRevenueMicros, leadUnitsSold, mobileFriendlyClicksPercentage, rawEventConversionMetrics, searchAbsoluteTopImpressionShare, searchBudgetLostAbsoluteTopImpressionShare, searchBudgetLostImpressionShare, searchBudgetLostTopImpressionShare, searchClickShare, searchExactMatchImpressionShare, searchImpressionShare, searchRankLostAbsoluteTopImpressionShare, searchRankLostImpressionShare, searchRankLostTopImpressionShare, searchTopImpressionShare, topImpressionPercentage, valuePerAllConversions, valuePerAllConversionsByConversionDate, valuePerConversion, valuePerConversionsByConversionDate, visits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAdsSearchads360V0CommonMetrics {\n");
    sb.append("    absoluteTopImpressionPercentage: ").append(toIndentedString(absoluteTopImpressionPercentage)).append("\n");
    sb.append("    allConversions: ").append(toIndentedString(allConversions)).append("\n");
    sb.append("    allConversionsByConversionDate: ").append(toIndentedString(allConversionsByConversionDate)).append("\n");
    sb.append("    allConversionsFromClickToCall: ").append(toIndentedString(allConversionsFromClickToCall)).append("\n");
    sb.append("    allConversionsFromDirections: ").append(toIndentedString(allConversionsFromDirections)).append("\n");
    sb.append("    allConversionsFromInteractionsRate: ").append(toIndentedString(allConversionsFromInteractionsRate)).append("\n");
    sb.append("    allConversionsFromInteractionsValuePerInteraction: ").append(toIndentedString(allConversionsFromInteractionsValuePerInteraction)).append("\n");
    sb.append("    allConversionsFromMenu: ").append(toIndentedString(allConversionsFromMenu)).append("\n");
    sb.append("    allConversionsFromOrder: ").append(toIndentedString(allConversionsFromOrder)).append("\n");
    sb.append("    allConversionsFromOtherEngagement: ").append(toIndentedString(allConversionsFromOtherEngagement)).append("\n");
    sb.append("    allConversionsFromStoreVisit: ").append(toIndentedString(allConversionsFromStoreVisit)).append("\n");
    sb.append("    allConversionsFromStoreWebsite: ").append(toIndentedString(allConversionsFromStoreWebsite)).append("\n");
    sb.append("    allConversionsValue: ").append(toIndentedString(allConversionsValue)).append("\n");
    sb.append("    allConversionsValueByConversionDate: ").append(toIndentedString(allConversionsValueByConversionDate)).append("\n");
    sb.append("    allConversionsValuePerCost: ").append(toIndentedString(allConversionsValuePerCost)).append("\n");
    sb.append("    averageCost: ").append(toIndentedString(averageCost)).append("\n");
    sb.append("    averageCpc: ").append(toIndentedString(averageCpc)).append("\n");
    sb.append("    averageCpm: ").append(toIndentedString(averageCpm)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    clientAccountConversions: ").append(toIndentedString(clientAccountConversions)).append("\n");
    sb.append("    clientAccountConversionsValue: ").append(toIndentedString(clientAccountConversionsValue)).append("\n");
    sb.append("    clientAccountCrossSellCostOfGoodsSoldMicros: ").append(toIndentedString(clientAccountCrossSellCostOfGoodsSoldMicros)).append("\n");
    sb.append("    clientAccountCrossSellGrossProfitMicros: ").append(toIndentedString(clientAccountCrossSellGrossProfitMicros)).append("\n");
    sb.append("    clientAccountCrossSellRevenueMicros: ").append(toIndentedString(clientAccountCrossSellRevenueMicros)).append("\n");
    sb.append("    clientAccountCrossSellUnitsSold: ").append(toIndentedString(clientAccountCrossSellUnitsSold)).append("\n");
    sb.append("    clientAccountLeadCostOfGoodsSoldMicros: ").append(toIndentedString(clientAccountLeadCostOfGoodsSoldMicros)).append("\n");
    sb.append("    clientAccountLeadGrossProfitMicros: ").append(toIndentedString(clientAccountLeadGrossProfitMicros)).append("\n");
    sb.append("    clientAccountLeadRevenueMicros: ").append(toIndentedString(clientAccountLeadRevenueMicros)).append("\n");
    sb.append("    clientAccountLeadUnitsSold: ").append(toIndentedString(clientAccountLeadUnitsSold)).append("\n");
    sb.append("    clientAccountViewThroughConversions: ").append(toIndentedString(clientAccountViewThroughConversions)).append("\n");
    sb.append("    contentBudgetLostImpressionShare: ").append(toIndentedString(contentBudgetLostImpressionShare)).append("\n");
    sb.append("    contentImpressionShare: ").append(toIndentedString(contentImpressionShare)).append("\n");
    sb.append("    contentRankLostImpressionShare: ").append(toIndentedString(contentRankLostImpressionShare)).append("\n");
    sb.append("    conversionCustomMetrics: ").append(toIndentedString(conversionCustomMetrics)).append("\n");
    sb.append("    conversions: ").append(toIndentedString(conversions)).append("\n");
    sb.append("    conversionsByConversionDate: ").append(toIndentedString(conversionsByConversionDate)).append("\n");
    sb.append("    conversionsFromInteractionsRate: ").append(toIndentedString(conversionsFromInteractionsRate)).append("\n");
    sb.append("    conversionsFromInteractionsValuePerInteraction: ").append(toIndentedString(conversionsFromInteractionsValuePerInteraction)).append("\n");
    sb.append("    conversionsValue: ").append(toIndentedString(conversionsValue)).append("\n");
    sb.append("    conversionsValueByConversionDate: ").append(toIndentedString(conversionsValueByConversionDate)).append("\n");
    sb.append("    conversionsValuePerCost: ").append(toIndentedString(conversionsValuePerCost)).append("\n");
    sb.append("    costMicros: ").append(toIndentedString(costMicros)).append("\n");
    sb.append("    costPerAllConversions: ").append(toIndentedString(costPerAllConversions)).append("\n");
    sb.append("    costPerConversion: ").append(toIndentedString(costPerConversion)).append("\n");
    sb.append("    costPerCurrentModelAttributedConversion: ").append(toIndentedString(costPerCurrentModelAttributedConversion)).append("\n");
    sb.append("    crossDeviceConversions: ").append(toIndentedString(crossDeviceConversions)).append("\n");
    sb.append("    crossDeviceConversionsValue: ").append(toIndentedString(crossDeviceConversionsValue)).append("\n");
    sb.append("    crossSellCostOfGoodsSoldMicros: ").append(toIndentedString(crossSellCostOfGoodsSoldMicros)).append("\n");
    sb.append("    crossSellGrossProfitMicros: ").append(toIndentedString(crossSellGrossProfitMicros)).append("\n");
    sb.append("    crossSellRevenueMicros: ").append(toIndentedString(crossSellRevenueMicros)).append("\n");
    sb.append("    crossSellUnitsSold: ").append(toIndentedString(crossSellUnitsSold)).append("\n");
    sb.append("    ctr: ").append(toIndentedString(ctr)).append("\n");
    sb.append("    historicalCreativeQualityScore: ").append(toIndentedString(historicalCreativeQualityScore)).append("\n");
    sb.append("    historicalLandingPageQualityScore: ").append(toIndentedString(historicalLandingPageQualityScore)).append("\n");
    sb.append("    historicalQualityScore: ").append(toIndentedString(historicalQualityScore)).append("\n");
    sb.append("    historicalSearchPredictedCtr: ").append(toIndentedString(historicalSearchPredictedCtr)).append("\n");
    sb.append("    impressions: ").append(toIndentedString(impressions)).append("\n");
    sb.append("    interactionEventTypes: ").append(toIndentedString(interactionEventTypes)).append("\n");
    sb.append("    interactionRate: ").append(toIndentedString(interactionRate)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    invalidClickRate: ").append(toIndentedString(invalidClickRate)).append("\n");
    sb.append("    invalidClicks: ").append(toIndentedString(invalidClicks)).append("\n");
    sb.append("    leadCostOfGoodsSoldMicros: ").append(toIndentedString(leadCostOfGoodsSoldMicros)).append("\n");
    sb.append("    leadGrossProfitMicros: ").append(toIndentedString(leadGrossProfitMicros)).append("\n");
    sb.append("    leadRevenueMicros: ").append(toIndentedString(leadRevenueMicros)).append("\n");
    sb.append("    leadUnitsSold: ").append(toIndentedString(leadUnitsSold)).append("\n");
    sb.append("    mobileFriendlyClicksPercentage: ").append(toIndentedString(mobileFriendlyClicksPercentage)).append("\n");
    sb.append("    rawEventConversionMetrics: ").append(toIndentedString(rawEventConversionMetrics)).append("\n");
    sb.append("    searchAbsoluteTopImpressionShare: ").append(toIndentedString(searchAbsoluteTopImpressionShare)).append("\n");
    sb.append("    searchBudgetLostAbsoluteTopImpressionShare: ").append(toIndentedString(searchBudgetLostAbsoluteTopImpressionShare)).append("\n");
    sb.append("    searchBudgetLostImpressionShare: ").append(toIndentedString(searchBudgetLostImpressionShare)).append("\n");
    sb.append("    searchBudgetLostTopImpressionShare: ").append(toIndentedString(searchBudgetLostTopImpressionShare)).append("\n");
    sb.append("    searchClickShare: ").append(toIndentedString(searchClickShare)).append("\n");
    sb.append("    searchExactMatchImpressionShare: ").append(toIndentedString(searchExactMatchImpressionShare)).append("\n");
    sb.append("    searchImpressionShare: ").append(toIndentedString(searchImpressionShare)).append("\n");
    sb.append("    searchRankLostAbsoluteTopImpressionShare: ").append(toIndentedString(searchRankLostAbsoluteTopImpressionShare)).append("\n");
    sb.append("    searchRankLostImpressionShare: ").append(toIndentedString(searchRankLostImpressionShare)).append("\n");
    sb.append("    searchRankLostTopImpressionShare: ").append(toIndentedString(searchRankLostTopImpressionShare)).append("\n");
    sb.append("    searchTopImpressionShare: ").append(toIndentedString(searchTopImpressionShare)).append("\n");
    sb.append("    topImpressionPercentage: ").append(toIndentedString(topImpressionPercentage)).append("\n");
    sb.append("    valuePerAllConversions: ").append(toIndentedString(valuePerAllConversions)).append("\n");
    sb.append("    valuePerAllConversionsByConversionDate: ").append(toIndentedString(valuePerAllConversionsByConversionDate)).append("\n");
    sb.append("    valuePerConversion: ").append(toIndentedString(valuePerConversion)).append("\n");
    sb.append("    valuePerConversionsByConversionDate: ").append(toIndentedString(valuePerConversionsByConversionDate)).append("\n");
    sb.append("    visits: ").append(toIndentedString(visits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteTopImpressionPercentage");
    openapiFields.add("allConversions");
    openapiFields.add("allConversionsByConversionDate");
    openapiFields.add("allConversionsFromClickToCall");
    openapiFields.add("allConversionsFromDirections");
    openapiFields.add("allConversionsFromInteractionsRate");
    openapiFields.add("allConversionsFromInteractionsValuePerInteraction");
    openapiFields.add("allConversionsFromMenu");
    openapiFields.add("allConversionsFromOrder");
    openapiFields.add("allConversionsFromOtherEngagement");
    openapiFields.add("allConversionsFromStoreVisit");
    openapiFields.add("allConversionsFromStoreWebsite");
    openapiFields.add("allConversionsValue");
    openapiFields.add("allConversionsValueByConversionDate");
    openapiFields.add("allConversionsValuePerCost");
    openapiFields.add("averageCost");
    openapiFields.add("averageCpc");
    openapiFields.add("averageCpm");
    openapiFields.add("clicks");
    openapiFields.add("clientAccountConversions");
    openapiFields.add("clientAccountConversionsValue");
    openapiFields.add("clientAccountCrossSellCostOfGoodsSoldMicros");
    openapiFields.add("clientAccountCrossSellGrossProfitMicros");
    openapiFields.add("clientAccountCrossSellRevenueMicros");
    openapiFields.add("clientAccountCrossSellUnitsSold");
    openapiFields.add("clientAccountLeadCostOfGoodsSoldMicros");
    openapiFields.add("clientAccountLeadGrossProfitMicros");
    openapiFields.add("clientAccountLeadRevenueMicros");
    openapiFields.add("clientAccountLeadUnitsSold");
    openapiFields.add("clientAccountViewThroughConversions");
    openapiFields.add("contentBudgetLostImpressionShare");
    openapiFields.add("contentImpressionShare");
    openapiFields.add("contentRankLostImpressionShare");
    openapiFields.add("conversionCustomMetrics");
    openapiFields.add("conversions");
    openapiFields.add("conversionsByConversionDate");
    openapiFields.add("conversionsFromInteractionsRate");
    openapiFields.add("conversionsFromInteractionsValuePerInteraction");
    openapiFields.add("conversionsValue");
    openapiFields.add("conversionsValueByConversionDate");
    openapiFields.add("conversionsValuePerCost");
    openapiFields.add("costMicros");
    openapiFields.add("costPerAllConversions");
    openapiFields.add("costPerConversion");
    openapiFields.add("costPerCurrentModelAttributedConversion");
    openapiFields.add("crossDeviceConversions");
    openapiFields.add("crossDeviceConversionsValue");
    openapiFields.add("crossSellCostOfGoodsSoldMicros");
    openapiFields.add("crossSellGrossProfitMicros");
    openapiFields.add("crossSellRevenueMicros");
    openapiFields.add("crossSellUnitsSold");
    openapiFields.add("ctr");
    openapiFields.add("historicalCreativeQualityScore");
    openapiFields.add("historicalLandingPageQualityScore");
    openapiFields.add("historicalQualityScore");
    openapiFields.add("historicalSearchPredictedCtr");
    openapiFields.add("impressions");
    openapiFields.add("interactionEventTypes");
    openapiFields.add("interactionRate");
    openapiFields.add("interactions");
    openapiFields.add("invalidClickRate");
    openapiFields.add("invalidClicks");
    openapiFields.add("leadCostOfGoodsSoldMicros");
    openapiFields.add("leadGrossProfitMicros");
    openapiFields.add("leadRevenueMicros");
    openapiFields.add("leadUnitsSold");
    openapiFields.add("mobileFriendlyClicksPercentage");
    openapiFields.add("rawEventConversionMetrics");
    openapiFields.add("searchAbsoluteTopImpressionShare");
    openapiFields.add("searchBudgetLostAbsoluteTopImpressionShare");
    openapiFields.add("searchBudgetLostImpressionShare");
    openapiFields.add("searchBudgetLostTopImpressionShare");
    openapiFields.add("searchClickShare");
    openapiFields.add("searchExactMatchImpressionShare");
    openapiFields.add("searchImpressionShare");
    openapiFields.add("searchRankLostAbsoluteTopImpressionShare");
    openapiFields.add("searchRankLostImpressionShare");
    openapiFields.add("searchRankLostTopImpressionShare");
    openapiFields.add("searchTopImpressionShare");
    openapiFields.add("topImpressionPercentage");
    openapiFields.add("valuePerAllConversions");
    openapiFields.add("valuePerAllConversionsByConversionDate");
    openapiFields.add("valuePerConversion");
    openapiFields.add("valuePerConversionsByConversionDate");
    openapiFields.add("visits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAdsSearchads360V0CommonMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAdsSearchads360V0CommonMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAdsSearchads360V0CommonMetrics is not found in the empty JSON string", GoogleAdsSearchads360V0CommonMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAdsSearchads360V0CommonMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAdsSearchads360V0CommonMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clicks") != null && !jsonObj.get("clicks").isJsonNull()) && !jsonObj.get("clicks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clicks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clicks").toString()));
      }
      if ((jsonObj.get("clientAccountCrossSellCostOfGoodsSoldMicros") != null && !jsonObj.get("clientAccountCrossSellCostOfGoodsSoldMicros").isJsonNull()) && !jsonObj.get("clientAccountCrossSellCostOfGoodsSoldMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountCrossSellCostOfGoodsSoldMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountCrossSellCostOfGoodsSoldMicros").toString()));
      }
      if ((jsonObj.get("clientAccountCrossSellGrossProfitMicros") != null && !jsonObj.get("clientAccountCrossSellGrossProfitMicros").isJsonNull()) && !jsonObj.get("clientAccountCrossSellGrossProfitMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountCrossSellGrossProfitMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountCrossSellGrossProfitMicros").toString()));
      }
      if ((jsonObj.get("clientAccountCrossSellRevenueMicros") != null && !jsonObj.get("clientAccountCrossSellRevenueMicros").isJsonNull()) && !jsonObj.get("clientAccountCrossSellRevenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountCrossSellRevenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountCrossSellRevenueMicros").toString()));
      }
      if ((jsonObj.get("clientAccountLeadCostOfGoodsSoldMicros") != null && !jsonObj.get("clientAccountLeadCostOfGoodsSoldMicros").isJsonNull()) && !jsonObj.get("clientAccountLeadCostOfGoodsSoldMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountLeadCostOfGoodsSoldMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountLeadCostOfGoodsSoldMicros").toString()));
      }
      if ((jsonObj.get("clientAccountLeadGrossProfitMicros") != null && !jsonObj.get("clientAccountLeadGrossProfitMicros").isJsonNull()) && !jsonObj.get("clientAccountLeadGrossProfitMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountLeadGrossProfitMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountLeadGrossProfitMicros").toString()));
      }
      if ((jsonObj.get("clientAccountLeadRevenueMicros") != null && !jsonObj.get("clientAccountLeadRevenueMicros").isJsonNull()) && !jsonObj.get("clientAccountLeadRevenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountLeadRevenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountLeadRevenueMicros").toString()));
      }
      if ((jsonObj.get("clientAccountViewThroughConversions") != null && !jsonObj.get("clientAccountViewThroughConversions").isJsonNull()) && !jsonObj.get("clientAccountViewThroughConversions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountViewThroughConversions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountViewThroughConversions").toString()));
      }
      if (jsonObj.get("conversionCustomMetrics") != null && !jsonObj.get("conversionCustomMetrics").isJsonNull()) {
        JsonArray jsonArrayconversionCustomMetrics = jsonObj.getAsJsonArray("conversionCustomMetrics");
        if (jsonArrayconversionCustomMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversionCustomMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversionCustomMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("conversionCustomMetrics").toString()));
          }

          // validate the optional field `conversionCustomMetrics` (array)
          for (int i = 0; i < jsonArrayconversionCustomMetrics.size(); i++) {
            GoogleAdsSearchads360V0CommonValue.validateJsonElement(jsonArrayconversionCustomMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("costMicros") != null && !jsonObj.get("costMicros").isJsonNull()) && !jsonObj.get("costMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costMicros").toString()));
      }
      if ((jsonObj.get("crossSellCostOfGoodsSoldMicros") != null && !jsonObj.get("crossSellCostOfGoodsSoldMicros").isJsonNull()) && !jsonObj.get("crossSellCostOfGoodsSoldMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossSellCostOfGoodsSoldMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossSellCostOfGoodsSoldMicros").toString()));
      }
      if ((jsonObj.get("crossSellGrossProfitMicros") != null && !jsonObj.get("crossSellGrossProfitMicros").isJsonNull()) && !jsonObj.get("crossSellGrossProfitMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossSellGrossProfitMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossSellGrossProfitMicros").toString()));
      }
      if ((jsonObj.get("crossSellRevenueMicros") != null && !jsonObj.get("crossSellRevenueMicros").isJsonNull()) && !jsonObj.get("crossSellRevenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossSellRevenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossSellRevenueMicros").toString()));
      }
      if ((jsonObj.get("historicalCreativeQualityScore") != null && !jsonObj.get("historicalCreativeQualityScore").isJsonNull()) && !jsonObj.get("historicalCreativeQualityScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historicalCreativeQualityScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historicalCreativeQualityScore").toString()));
      }
      // validate the optional field `historicalCreativeQualityScore`
      if (jsonObj.get("historicalCreativeQualityScore") != null && !jsonObj.get("historicalCreativeQualityScore").isJsonNull()) {
        HistoricalCreativeQualityScoreEnum.validateJsonElement(jsonObj.get("historicalCreativeQualityScore"));
      }
      if ((jsonObj.get("historicalLandingPageQualityScore") != null && !jsonObj.get("historicalLandingPageQualityScore").isJsonNull()) && !jsonObj.get("historicalLandingPageQualityScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historicalLandingPageQualityScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historicalLandingPageQualityScore").toString()));
      }
      // validate the optional field `historicalLandingPageQualityScore`
      if (jsonObj.get("historicalLandingPageQualityScore") != null && !jsonObj.get("historicalLandingPageQualityScore").isJsonNull()) {
        HistoricalLandingPageQualityScoreEnum.validateJsonElement(jsonObj.get("historicalLandingPageQualityScore"));
      }
      if ((jsonObj.get("historicalQualityScore") != null && !jsonObj.get("historicalQualityScore").isJsonNull()) && !jsonObj.get("historicalQualityScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historicalQualityScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historicalQualityScore").toString()));
      }
      if ((jsonObj.get("historicalSearchPredictedCtr") != null && !jsonObj.get("historicalSearchPredictedCtr").isJsonNull()) && !jsonObj.get("historicalSearchPredictedCtr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historicalSearchPredictedCtr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historicalSearchPredictedCtr").toString()));
      }
      // validate the optional field `historicalSearchPredictedCtr`
      if (jsonObj.get("historicalSearchPredictedCtr") != null && !jsonObj.get("historicalSearchPredictedCtr").isJsonNull()) {
        HistoricalSearchPredictedCtrEnum.validateJsonElement(jsonObj.get("historicalSearchPredictedCtr"));
      }
      if ((jsonObj.get("impressions") != null && !jsonObj.get("impressions").isJsonNull()) && !jsonObj.get("impressions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interactionEventTypes") != null && !jsonObj.get("interactionEventTypes").isJsonNull() && !jsonObj.get("interactionEventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionEventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("interactionEventTypes").toString()));
      }
      if ((jsonObj.get("interactions") != null && !jsonObj.get("interactions").isJsonNull()) && !jsonObj.get("interactions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactions").toString()));
      }
      if ((jsonObj.get("invalidClicks") != null && !jsonObj.get("invalidClicks").isJsonNull()) && !jsonObj.get("invalidClicks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidClicks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidClicks").toString()));
      }
      if ((jsonObj.get("leadCostOfGoodsSoldMicros") != null && !jsonObj.get("leadCostOfGoodsSoldMicros").isJsonNull()) && !jsonObj.get("leadCostOfGoodsSoldMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadCostOfGoodsSoldMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadCostOfGoodsSoldMicros").toString()));
      }
      if ((jsonObj.get("leadGrossProfitMicros") != null && !jsonObj.get("leadGrossProfitMicros").isJsonNull()) && !jsonObj.get("leadGrossProfitMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadGrossProfitMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadGrossProfitMicros").toString()));
      }
      if ((jsonObj.get("leadRevenueMicros") != null && !jsonObj.get("leadRevenueMicros").isJsonNull()) && !jsonObj.get("leadRevenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadRevenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadRevenueMicros").toString()));
      }
      if (jsonObj.get("rawEventConversionMetrics") != null && !jsonObj.get("rawEventConversionMetrics").isJsonNull()) {
        JsonArray jsonArrayrawEventConversionMetrics = jsonObj.getAsJsonArray("rawEventConversionMetrics");
        if (jsonArrayrawEventConversionMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rawEventConversionMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rawEventConversionMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("rawEventConversionMetrics").toString()));
          }

          // validate the optional field `rawEventConversionMetrics` (array)
          for (int i = 0; i < jsonArrayrawEventConversionMetrics.size(); i++) {
            GoogleAdsSearchads360V0CommonValue.validateJsonElement(jsonArrayrawEventConversionMetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAdsSearchads360V0CommonMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAdsSearchads360V0CommonMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAdsSearchads360V0CommonMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAdsSearchads360V0CommonMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAdsSearchads360V0CommonMetrics>() {
           @Override
           public void write(JsonWriter out, GoogleAdsSearchads360V0CommonMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAdsSearchads360V0CommonMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAdsSearchads360V0CommonMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAdsSearchads360V0CommonMetrics
   * @throws IOException if the JSON string is invalid with respect to GoogleAdsSearchads360V0CommonMetrics
   */
  public static GoogleAdsSearchads360V0CommonMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAdsSearchads360V0CommonMetrics.class);
  }

  /**
   * Convert an instance of GoogleAdsSearchads360V0CommonMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

