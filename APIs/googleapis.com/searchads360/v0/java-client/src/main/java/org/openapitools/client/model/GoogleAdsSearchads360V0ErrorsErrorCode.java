/*
 * Search Ads 360 Reporting API
 * The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error reason represented by type and enum.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:17.315010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAdsSearchads360V0ErrorsErrorCode {
  /**
   * Indicates failure to properly authenticate user.
   */
  @JsonAdapter(AuthenticationErrorEnum.Adapter.class)
  public enum AuthenticationErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    AUTHENTICATION_ERROR("AUTHENTICATION_ERROR"),
    
    CLIENT_CUSTOMER_ID_INVALID("CLIENT_CUSTOMER_ID_INVALID"),
    
    CUSTOMER_NOT_FOUND("CUSTOMER_NOT_FOUND"),
    
    GOOGLE_ACCOUNT_DELETED("GOOGLE_ACCOUNT_DELETED"),
    
    GOOGLE_ACCOUNT_COOKIE_INVALID("GOOGLE_ACCOUNT_COOKIE_INVALID"),
    
    GOOGLE_ACCOUNT_AUTHENTICATION_FAILED("GOOGLE_ACCOUNT_AUTHENTICATION_FAILED"),
    
    GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH("GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH"),
    
    LOGIN_COOKIE_REQUIRED("LOGIN_COOKIE_REQUIRED"),
    
    NOT_ADS_USER("NOT_ADS_USER"),
    
    OAUTH_TOKEN_INVALID("OAUTH_TOKEN_INVALID"),
    
    OAUTH_TOKEN_EXPIRED("OAUTH_TOKEN_EXPIRED"),
    
    OAUTH_TOKEN_DISABLED("OAUTH_TOKEN_DISABLED"),
    
    OAUTH_TOKEN_REVOKED("OAUTH_TOKEN_REVOKED"),
    
    OAUTH_TOKEN_HEADER_INVALID("OAUTH_TOKEN_HEADER_INVALID"),
    
    LOGIN_COOKIE_INVALID("LOGIN_COOKIE_INVALID"),
    
    USER_ID_INVALID("USER_ID_INVALID"),
    
    TWO_STEP_VERIFICATION_NOT_ENROLLED("TWO_STEP_VERIFICATION_NOT_ENROLLED"),
    
    ADVANCED_PROTECTION_NOT_ENROLLED("ADVANCED_PROTECTION_NOT_ENROLLED");

    private String value;

    AuthenticationErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationErrorEnum fromValue(String value) {
      for (AuthenticationErrorEnum b : AuthenticationErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_ERROR = "authenticationError";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ERROR)
  private AuthenticationErrorEnum authenticationError;

  /**
   * An error encountered when trying to authorize a user.
   */
  @JsonAdapter(AuthorizationErrorEnum.Adapter.class)
  public enum AuthorizationErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    USER_PERMISSION_DENIED("USER_PERMISSION_DENIED"),
    
    PROJECT_DISABLED("PROJECT_DISABLED"),
    
    AUTHORIZATION_ERROR("AUTHORIZATION_ERROR"),
    
    ACTION_NOT_PERMITTED("ACTION_NOT_PERMITTED"),
    
    INCOMPLETE_SIGNUP("INCOMPLETE_SIGNUP"),
    
    CUSTOMER_NOT_ENABLED("CUSTOMER_NOT_ENABLED"),
    
    MISSING_TOS("MISSING_TOS"),
    
    INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION("INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION"),
    
    SERVICE_ACCESS_DENIED("SERVICE_ACCESS_DENIED"),
    
    ACCESS_DENIED_FOR_ACCOUNT_TYPE("ACCESS_DENIED_FOR_ACCOUNT_TYPE"),
    
    METRIC_ACCESS_DENIED("METRIC_ACCESS_DENIED");

    private String value;

    AuthorizationErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationErrorEnum fromValue(String value) {
      for (AuthorizationErrorEnum b : AuthorizationErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_ERROR = "authorizationError";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ERROR)
  private AuthorizationErrorEnum authorizationError;

  /**
   * The reasons for the custom column error
   */
  @JsonAdapter(CustomColumnErrorEnum.Adapter.class)
  public enum CustomColumnErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    CUSTOM_COLUMN_NOT_FOUND("CUSTOM_COLUMN_NOT_FOUND"),
    
    CUSTOM_COLUMN_NOT_AVAILABLE("CUSTOM_COLUMN_NOT_AVAILABLE");

    private String value;

    CustomColumnErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomColumnErrorEnum fromValue(String value) {
      for (CustomColumnErrorEnum b : CustomColumnErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomColumnErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomColumnErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomColumnErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomColumnErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomColumnErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_COLUMN_ERROR = "customColumnError";
  @SerializedName(SERIALIZED_NAME_CUSTOM_COLUMN_ERROR)
  private CustomColumnErrorEnum customColumnError;

  /**
   * The reasons for the date error
   */
  @JsonAdapter(DateErrorEnum.Adapter.class)
  public enum DateErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    INVALID_FIELD_VALUES_IN_DATE("INVALID_FIELD_VALUES_IN_DATE"),
    
    INVALID_FIELD_VALUES_IN_DATE_TIME("INVALID_FIELD_VALUES_IN_DATE_TIME"),
    
    INVALID_STRING_DATE("INVALID_STRING_DATE"),
    
    INVALID_STRING_DATE_TIME_MICROS("INVALID_STRING_DATE_TIME_MICROS"),
    
    INVALID_STRING_DATE_TIME_SECONDS("INVALID_STRING_DATE_TIME_SECONDS"),
    
    INVALID_STRING_DATE_TIME_SECONDS_WITH_OFFSET("INVALID_STRING_DATE_TIME_SECONDS_WITH_OFFSET"),
    
    EARLIER_THAN_MINIMUM_DATE("EARLIER_THAN_MINIMUM_DATE"),
    
    LATER_THAN_MAXIMUM_DATE("LATER_THAN_MAXIMUM_DATE"),
    
    DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE("DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE"),
    
    DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL("DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL");

    private String value;

    DateErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateErrorEnum fromValue(String value) {
      for (DateErrorEnum b : DateErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DateErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATE_ERROR = "dateError";
  @SerializedName(SERIALIZED_NAME_DATE_ERROR)
  private DateErrorEnum dateError;

  /**
   * The reasons for the date range error
   */
  @JsonAdapter(DateRangeErrorEnum.Adapter.class)
  public enum DateRangeErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    INVALID_DATE("INVALID_DATE"),
    
    START_DATE_AFTER_END_DATE("START_DATE_AFTER_END_DATE"),
    
    CANNOT_SET_DATE_TO_PAST("CANNOT_SET_DATE_TO_PAST"),
    
    AFTER_MAXIMUM_ALLOWABLE_DATE("AFTER_MAXIMUM_ALLOWABLE_DATE"),
    
    CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED("CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED");

    private String value;

    DateRangeErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateRangeErrorEnum fromValue(String value) {
      for (DateRangeErrorEnum b : DateRangeErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateRangeErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateRangeErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateRangeErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateRangeErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DateRangeErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATE_RANGE_ERROR = "dateRangeError";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE_ERROR)
  private DateRangeErrorEnum dateRangeError;

  /**
   * The reasons for the distinct error
   */
  @JsonAdapter(DistinctErrorEnum.Adapter.class)
  public enum DistinctErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    DUPLICATE_ELEMENT("DUPLICATE_ELEMENT"),
    
    DUPLICATE_TYPE("DUPLICATE_TYPE");

    private String value;

    DistinctErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DistinctErrorEnum fromValue(String value) {
      for (DistinctErrorEnum b : DistinctErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DistinctErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DistinctErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DistinctErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DistinctErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DistinctErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISTINCT_ERROR = "distinctError";
  @SerializedName(SERIALIZED_NAME_DISTINCT_ERROR)
  private DistinctErrorEnum distinctError;

  /**
   * The reasons for the header error.
   */
  @JsonAdapter(HeaderErrorEnum.Adapter.class)
  public enum HeaderErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    INVALID_USER_SELECTED_CUSTOMER_ID("INVALID_USER_SELECTED_CUSTOMER_ID"),
    
    INVALID_LOGIN_CUSTOMER_ID("INVALID_LOGIN_CUSTOMER_ID");

    private String value;

    HeaderErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HeaderErrorEnum fromValue(String value) {
      for (HeaderErrorEnum b : HeaderErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HeaderErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HeaderErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HeaderErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HeaderErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HeaderErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEADER_ERROR = "headerError";
  @SerializedName(SERIALIZED_NAME_HEADER_ERROR)
  private HeaderErrorEnum headerError;

  /**
   * An unexpected server-side error.
   */
  @JsonAdapter(InternalErrorEnum.Adapter.class)
  public enum InternalErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    ERROR_CODE_NOT_PUBLISHED("ERROR_CODE_NOT_PUBLISHED"),
    
    TRANSIENT_ERROR("TRANSIENT_ERROR"),
    
    DEADLINE_EXCEEDED("DEADLINE_EXCEEDED");

    private String value;

    InternalErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InternalErrorEnum fromValue(String value) {
      for (InternalErrorEnum b : InternalErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InternalErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InternalErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InternalErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InternalErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InternalErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERNAL_ERROR = "internalError";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ERROR)
  private InternalErrorEnum internalError;

  /**
   * The reasons for invalid parameter errors.
   */
  @JsonAdapter(InvalidParameterErrorEnum.Adapter.class)
  public enum InvalidParameterErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    INVALID_CURRENCY_CODE("INVALID_CURRENCY_CODE");

    private String value;

    InvalidParameterErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvalidParameterErrorEnum fromValue(String value) {
      for (InvalidParameterErrorEnum b : InvalidParameterErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvalidParameterErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvalidParameterErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvalidParameterErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvalidParameterErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvalidParameterErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVALID_PARAMETER_ERROR = "invalidParameterError";
  @SerializedName(SERIALIZED_NAME_INVALID_PARAMETER_ERROR)
  private InvalidParameterErrorEnum invalidParameterError;

  /**
   * An error with the query
   */
  @JsonAdapter(QueryErrorEnum.Adapter.class)
  public enum QueryErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    QUERY_ERROR("QUERY_ERROR"),
    
    BAD_ENUM_CONSTANT("BAD_ENUM_CONSTANT"),
    
    BAD_ESCAPE_SEQUENCE("BAD_ESCAPE_SEQUENCE"),
    
    BAD_FIELD_NAME("BAD_FIELD_NAME"),
    
    BAD_LIMIT_VALUE("BAD_LIMIT_VALUE"),
    
    BAD_NUMBER("BAD_NUMBER"),
    
    BAD_OPERATOR("BAD_OPERATOR"),
    
    BAD_PARAMETER_NAME("BAD_PARAMETER_NAME"),
    
    BAD_PARAMETER_VALUE("BAD_PARAMETER_VALUE"),
    
    BAD_RESOURCE_TYPE_IN_FROM_CLAUSE("BAD_RESOURCE_TYPE_IN_FROM_CLAUSE"),
    
    BAD_SYMBOL("BAD_SYMBOL"),
    
    BAD_VALUE("BAD_VALUE"),
    
    DATE_RANGE_TOO_WIDE("DATE_RANGE_TOO_WIDE"),
    
    DATE_RANGE_TOO_NARROW("DATE_RANGE_TOO_NARROW"),
    
    EXPECTED_AND("EXPECTED_AND"),
    
    EXPECTED_BY("EXPECTED_BY"),
    
    EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE("EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE"),
    
    EXPECTED_FILTERS_ON_DATE_RANGE("EXPECTED_FILTERS_ON_DATE_RANGE"),
    
    EXPECTED_FROM("EXPECTED_FROM"),
    
    EXPECTED_LIST("EXPECTED_LIST"),
    
    EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE("EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE"),
    
    EXPECTED_SELECT("EXPECTED_SELECT"),
    
    EXPECTED_SINGLE_VALUE("EXPECTED_SINGLE_VALUE"),
    
    EXPECTED_VALUE_WITH_BETWEEN_OPERATOR("EXPECTED_VALUE_WITH_BETWEEN_OPERATOR"),
    
    INVALID_DATE_FORMAT("INVALID_DATE_FORMAT"),
    
    MISALIGNED_DATE_FOR_FILTER("MISALIGNED_DATE_FOR_FILTER"),
    
    INVALID_STRING_VALUE("INVALID_STRING_VALUE"),
    
    INVALID_VALUE_WITH_BETWEEN_OPERATOR("INVALID_VALUE_WITH_BETWEEN_OPERATOR"),
    
    INVALID_VALUE_WITH_DURING_OPERATOR("INVALID_VALUE_WITH_DURING_OPERATOR"),
    
    INVALID_VALUE_WITH_LIKE_OPERATOR("INVALID_VALUE_WITH_LIKE_OPERATOR"),
    
    OPERATOR_FIELD_MISMATCH("OPERATOR_FIELD_MISMATCH"),
    
    PROHIBITED_EMPTY_LIST_IN_CONDITION("PROHIBITED_EMPTY_LIST_IN_CONDITION"),
    
    PROHIBITED_ENUM_CONSTANT("PROHIBITED_ENUM_CONSTANT"),
    
    PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE("PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE"),
    
    PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE("PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE"),
    
    PROHIBITED_FIELD_IN_SELECT_CLAUSE("PROHIBITED_FIELD_IN_SELECT_CLAUSE"),
    
    PROHIBITED_FIELD_IN_WHERE_CLAUSE("PROHIBITED_FIELD_IN_WHERE_CLAUSE"),
    
    PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE("PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE"),
    
    PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE("PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE"),
    
    PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE("PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE"),
    
    PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE("PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE"),
    
    PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE("PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE"),
    
    PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE("PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE"),
    
    LIMIT_VALUE_TOO_LOW("LIMIT_VALUE_TOO_LOW"),
    
    PROHIBITED_NEWLINE_IN_STRING("PROHIBITED_NEWLINE_IN_STRING"),
    
    PROHIBITED_VALUE_COMBINATION_IN_LIST("PROHIBITED_VALUE_COMBINATION_IN_LIST"),
    
    PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR("PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR"),
    
    STRING_NOT_TERMINATED("STRING_NOT_TERMINATED"),
    
    TOO_MANY_SEGMENTS("TOO_MANY_SEGMENTS"),
    
    UNEXPECTED_END_OF_QUERY("UNEXPECTED_END_OF_QUERY"),
    
    UNEXPECTED_FROM_CLAUSE("UNEXPECTED_FROM_CLAUSE"),
    
    UNRECOGNIZED_FIELD("UNRECOGNIZED_FIELD"),
    
    UNEXPECTED_INPUT("UNEXPECTED_INPUT"),
    
    REQUESTED_METRICS_FOR_MANAGER("REQUESTED_METRICS_FOR_MANAGER"),
    
    FILTER_HAS_TOO_MANY_VALUES("FILTER_HAS_TOO_MANY_VALUES");

    private String value;

    QueryErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryErrorEnum fromValue(String value) {
      for (QueryErrorEnum b : QueryErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_ERROR = "queryError";
  @SerializedName(SERIALIZED_NAME_QUERY_ERROR)
  private QueryErrorEnum queryError;

  /**
   * An error with the amount of quota remaining.
   */
  @JsonAdapter(QuotaErrorEnum.Adapter.class)
  public enum QuotaErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    RESOURCE_EXHAUSTED("RESOURCE_EXHAUSTED"),
    
    RESOURCE_TEMPORARILY_EXHAUSTED("RESOURCE_TEMPORARILY_EXHAUSTED");

    private String value;

    QuotaErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuotaErrorEnum fromValue(String value) {
      for (QuotaErrorEnum b : QuotaErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuotaErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuotaErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuotaErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuotaErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuotaErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUOTA_ERROR = "quotaError";
  @SerializedName(SERIALIZED_NAME_QUOTA_ERROR)
  private QuotaErrorEnum quotaError;

  /**
   * An error caused by the request
   */
  @JsonAdapter(RequestErrorEnum.Adapter.class)
  public enum RequestErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    RESOURCE_NAME_MISSING("RESOURCE_NAME_MISSING"),
    
    RESOURCE_NAME_MALFORMED("RESOURCE_NAME_MALFORMED"),
    
    BAD_RESOURCE_ID("BAD_RESOURCE_ID"),
    
    INVALID_PRODUCT_NAME("INVALID_PRODUCT_NAME"),
    
    INVALID_CUSTOMER_ID("INVALID_CUSTOMER_ID"),
    
    OPERATION_REQUIRED("OPERATION_REQUIRED"),
    
    RESOURCE_NOT_FOUND("RESOURCE_NOT_FOUND"),
    
    INVALID_PAGE_TOKEN("INVALID_PAGE_TOKEN"),
    
    EXPIRED_PAGE_TOKEN("EXPIRED_PAGE_TOKEN"),
    
    INVALID_PAGE_SIZE("INVALID_PAGE_SIZE"),
    
    REQUIRED_FIELD_MISSING("REQUIRED_FIELD_MISSING"),
    
    IMMUTABLE_FIELD("IMMUTABLE_FIELD"),
    
    TOO_MANY_MUTATE_OPERATIONS("TOO_MANY_MUTATE_OPERATIONS"),
    
    CANNOT_BE_EXECUTED_BY_MANAGER_ACCOUNT("CANNOT_BE_EXECUTED_BY_MANAGER_ACCOUNT"),
    
    CANNOT_MODIFY_FOREIGN_FIELD("CANNOT_MODIFY_FOREIGN_FIELD"),
    
    INVALID_ENUM_VALUE("INVALID_ENUM_VALUE"),
    
    LOGIN_CUSTOMER_ID_PARAMETER_MISSING("LOGIN_CUSTOMER_ID_PARAMETER_MISSING"),
    
    LOGIN_OR_LINKED_CUSTOMER_ID_PARAMETER_REQUIRED("LOGIN_OR_LINKED_CUSTOMER_ID_PARAMETER_REQUIRED"),
    
    VALIDATE_ONLY_REQUEST_HAS_PAGE_TOKEN("VALIDATE_ONLY_REQUEST_HAS_PAGE_TOKEN"),
    
    CANNOT_RETURN_SUMMARY_ROW_FOR_REQUEST_WITHOUT_METRICS("CANNOT_RETURN_SUMMARY_ROW_FOR_REQUEST_WITHOUT_METRICS"),
    
    CANNOT_RETURN_SUMMARY_ROW_FOR_VALIDATE_ONLY_REQUESTS("CANNOT_RETURN_SUMMARY_ROW_FOR_VALIDATE_ONLY_REQUESTS"),
    
    INCONSISTENT_RETURN_SUMMARY_ROW_VALUE("INCONSISTENT_RETURN_SUMMARY_ROW_VALUE"),
    
    TOTAL_RESULTS_COUNT_NOT_ORIGINALLY_REQUESTED("TOTAL_RESULTS_COUNT_NOT_ORIGINALLY_REQUESTED"),
    
    RPC_DEADLINE_TOO_SHORT("RPC_DEADLINE_TOO_SHORT"),
    
    PRODUCT_NOT_SUPPORTED("PRODUCT_NOT_SUPPORTED");

    private String value;

    RequestErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestErrorEnum fromValue(String value) {
      for (RequestErrorEnum b : RequestErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_ERROR = "requestError";
  @SerializedName(SERIALIZED_NAME_REQUEST_ERROR)
  private RequestErrorEnum requestError;

  /**
   * The reasons for the size limit error
   */
  @JsonAdapter(SizeLimitErrorEnum.Adapter.class)
  public enum SizeLimitErrorEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNKNOWN("UNKNOWN"),
    
    REQUEST_SIZE_LIMIT_EXCEEDED("REQUEST_SIZE_LIMIT_EXCEEDED"),
    
    RESPONSE_SIZE_LIMIT_EXCEEDED("RESPONSE_SIZE_LIMIT_EXCEEDED");

    private String value;

    SizeLimitErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeLimitErrorEnum fromValue(String value) {
      for (SizeLimitErrorEnum b : SizeLimitErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeLimitErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeLimitErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeLimitErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeLimitErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeLimitErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE_LIMIT_ERROR = "sizeLimitError";
  @SerializedName(SERIALIZED_NAME_SIZE_LIMIT_ERROR)
  private SizeLimitErrorEnum sizeLimitError;

  public GoogleAdsSearchads360V0ErrorsErrorCode() {
  }

  public GoogleAdsSearchads360V0ErrorsErrorCode authenticationError(AuthenticationErrorEnum authenticationError) {
    this.authenticationError = authenticationError;
    return this;
  }

  /**
   * Indicates failure to properly authenticate user.
   * @return authenticationError
   */
  @javax.annotation.Nullable
  public AuthenticationErrorEnum getAuthenticationError() {
    return authenticationError;
  }

  public void setAuthenticationError(AuthenticationErrorEnum authenticationError) {
    this.authenticationError = authenticationError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode authorizationError(AuthorizationErrorEnum authorizationError) {
    this.authorizationError = authorizationError;
    return this;
  }

  /**
   * An error encountered when trying to authorize a user.
   * @return authorizationError
   */
  @javax.annotation.Nullable
  public AuthorizationErrorEnum getAuthorizationError() {
    return authorizationError;
  }

  public void setAuthorizationError(AuthorizationErrorEnum authorizationError) {
    this.authorizationError = authorizationError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode customColumnError(CustomColumnErrorEnum customColumnError) {
    this.customColumnError = customColumnError;
    return this;
  }

  /**
   * The reasons for the custom column error
   * @return customColumnError
   */
  @javax.annotation.Nullable
  public CustomColumnErrorEnum getCustomColumnError() {
    return customColumnError;
  }

  public void setCustomColumnError(CustomColumnErrorEnum customColumnError) {
    this.customColumnError = customColumnError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode dateError(DateErrorEnum dateError) {
    this.dateError = dateError;
    return this;
  }

  /**
   * The reasons for the date error
   * @return dateError
   */
  @javax.annotation.Nullable
  public DateErrorEnum getDateError() {
    return dateError;
  }

  public void setDateError(DateErrorEnum dateError) {
    this.dateError = dateError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode dateRangeError(DateRangeErrorEnum dateRangeError) {
    this.dateRangeError = dateRangeError;
    return this;
  }

  /**
   * The reasons for the date range error
   * @return dateRangeError
   */
  @javax.annotation.Nullable
  public DateRangeErrorEnum getDateRangeError() {
    return dateRangeError;
  }

  public void setDateRangeError(DateRangeErrorEnum dateRangeError) {
    this.dateRangeError = dateRangeError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode distinctError(DistinctErrorEnum distinctError) {
    this.distinctError = distinctError;
    return this;
  }

  /**
   * The reasons for the distinct error
   * @return distinctError
   */
  @javax.annotation.Nullable
  public DistinctErrorEnum getDistinctError() {
    return distinctError;
  }

  public void setDistinctError(DistinctErrorEnum distinctError) {
    this.distinctError = distinctError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode headerError(HeaderErrorEnum headerError) {
    this.headerError = headerError;
    return this;
  }

  /**
   * The reasons for the header error.
   * @return headerError
   */
  @javax.annotation.Nullable
  public HeaderErrorEnum getHeaderError() {
    return headerError;
  }

  public void setHeaderError(HeaderErrorEnum headerError) {
    this.headerError = headerError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode internalError(InternalErrorEnum internalError) {
    this.internalError = internalError;
    return this;
  }

  /**
   * An unexpected server-side error.
   * @return internalError
   */
  @javax.annotation.Nullable
  public InternalErrorEnum getInternalError() {
    return internalError;
  }

  public void setInternalError(InternalErrorEnum internalError) {
    this.internalError = internalError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode invalidParameterError(InvalidParameterErrorEnum invalidParameterError) {
    this.invalidParameterError = invalidParameterError;
    return this;
  }

  /**
   * The reasons for invalid parameter errors.
   * @return invalidParameterError
   */
  @javax.annotation.Nullable
  public InvalidParameterErrorEnum getInvalidParameterError() {
    return invalidParameterError;
  }

  public void setInvalidParameterError(InvalidParameterErrorEnum invalidParameterError) {
    this.invalidParameterError = invalidParameterError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode queryError(QueryErrorEnum queryError) {
    this.queryError = queryError;
    return this;
  }

  /**
   * An error with the query
   * @return queryError
   */
  @javax.annotation.Nullable
  public QueryErrorEnum getQueryError() {
    return queryError;
  }

  public void setQueryError(QueryErrorEnum queryError) {
    this.queryError = queryError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode quotaError(QuotaErrorEnum quotaError) {
    this.quotaError = quotaError;
    return this;
  }

  /**
   * An error with the amount of quota remaining.
   * @return quotaError
   */
  @javax.annotation.Nullable
  public QuotaErrorEnum getQuotaError() {
    return quotaError;
  }

  public void setQuotaError(QuotaErrorEnum quotaError) {
    this.quotaError = quotaError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode requestError(RequestErrorEnum requestError) {
    this.requestError = requestError;
    return this;
  }

  /**
   * An error caused by the request
   * @return requestError
   */
  @javax.annotation.Nullable
  public RequestErrorEnum getRequestError() {
    return requestError;
  }

  public void setRequestError(RequestErrorEnum requestError) {
    this.requestError = requestError;
  }


  public GoogleAdsSearchads360V0ErrorsErrorCode sizeLimitError(SizeLimitErrorEnum sizeLimitError) {
    this.sizeLimitError = sizeLimitError;
    return this;
  }

  /**
   * The reasons for the size limit error
   * @return sizeLimitError
   */
  @javax.annotation.Nullable
  public SizeLimitErrorEnum getSizeLimitError() {
    return sizeLimitError;
  }

  public void setSizeLimitError(SizeLimitErrorEnum sizeLimitError) {
    this.sizeLimitError = sizeLimitError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAdsSearchads360V0ErrorsErrorCode googleAdsSearchads360V0ErrorsErrorCode = (GoogleAdsSearchads360V0ErrorsErrorCode) o;
    return Objects.equals(this.authenticationError, googleAdsSearchads360V0ErrorsErrorCode.authenticationError) &&
        Objects.equals(this.authorizationError, googleAdsSearchads360V0ErrorsErrorCode.authorizationError) &&
        Objects.equals(this.customColumnError, googleAdsSearchads360V0ErrorsErrorCode.customColumnError) &&
        Objects.equals(this.dateError, googleAdsSearchads360V0ErrorsErrorCode.dateError) &&
        Objects.equals(this.dateRangeError, googleAdsSearchads360V0ErrorsErrorCode.dateRangeError) &&
        Objects.equals(this.distinctError, googleAdsSearchads360V0ErrorsErrorCode.distinctError) &&
        Objects.equals(this.headerError, googleAdsSearchads360V0ErrorsErrorCode.headerError) &&
        Objects.equals(this.internalError, googleAdsSearchads360V0ErrorsErrorCode.internalError) &&
        Objects.equals(this.invalidParameterError, googleAdsSearchads360V0ErrorsErrorCode.invalidParameterError) &&
        Objects.equals(this.queryError, googleAdsSearchads360V0ErrorsErrorCode.queryError) &&
        Objects.equals(this.quotaError, googleAdsSearchads360V0ErrorsErrorCode.quotaError) &&
        Objects.equals(this.requestError, googleAdsSearchads360V0ErrorsErrorCode.requestError) &&
        Objects.equals(this.sizeLimitError, googleAdsSearchads360V0ErrorsErrorCode.sizeLimitError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationError, authorizationError, customColumnError, dateError, dateRangeError, distinctError, headerError, internalError, invalidParameterError, queryError, quotaError, requestError, sizeLimitError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAdsSearchads360V0ErrorsErrorCode {\n");
    sb.append("    authenticationError: ").append(toIndentedString(authenticationError)).append("\n");
    sb.append("    authorizationError: ").append(toIndentedString(authorizationError)).append("\n");
    sb.append("    customColumnError: ").append(toIndentedString(customColumnError)).append("\n");
    sb.append("    dateError: ").append(toIndentedString(dateError)).append("\n");
    sb.append("    dateRangeError: ").append(toIndentedString(dateRangeError)).append("\n");
    sb.append("    distinctError: ").append(toIndentedString(distinctError)).append("\n");
    sb.append("    headerError: ").append(toIndentedString(headerError)).append("\n");
    sb.append("    internalError: ").append(toIndentedString(internalError)).append("\n");
    sb.append("    invalidParameterError: ").append(toIndentedString(invalidParameterError)).append("\n");
    sb.append("    queryError: ").append(toIndentedString(queryError)).append("\n");
    sb.append("    quotaError: ").append(toIndentedString(quotaError)).append("\n");
    sb.append("    requestError: ").append(toIndentedString(requestError)).append("\n");
    sb.append("    sizeLimitError: ").append(toIndentedString(sizeLimitError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationError");
    openapiFields.add("authorizationError");
    openapiFields.add("customColumnError");
    openapiFields.add("dateError");
    openapiFields.add("dateRangeError");
    openapiFields.add("distinctError");
    openapiFields.add("headerError");
    openapiFields.add("internalError");
    openapiFields.add("invalidParameterError");
    openapiFields.add("queryError");
    openapiFields.add("quotaError");
    openapiFields.add("requestError");
    openapiFields.add("sizeLimitError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAdsSearchads360V0ErrorsErrorCode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAdsSearchads360V0ErrorsErrorCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAdsSearchads360V0ErrorsErrorCode is not found in the empty JSON string", GoogleAdsSearchads360V0ErrorsErrorCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAdsSearchads360V0ErrorsErrorCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAdsSearchads360V0ErrorsErrorCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationError") != null && !jsonObj.get("authenticationError").isJsonNull()) && !jsonObj.get("authenticationError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationError").toString()));
      }
      // validate the optional field `authenticationError`
      if (jsonObj.get("authenticationError") != null && !jsonObj.get("authenticationError").isJsonNull()) {
        AuthenticationErrorEnum.validateJsonElement(jsonObj.get("authenticationError"));
      }
      if ((jsonObj.get("authorizationError") != null && !jsonObj.get("authorizationError").isJsonNull()) && !jsonObj.get("authorizationError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationError").toString()));
      }
      // validate the optional field `authorizationError`
      if (jsonObj.get("authorizationError") != null && !jsonObj.get("authorizationError").isJsonNull()) {
        AuthorizationErrorEnum.validateJsonElement(jsonObj.get("authorizationError"));
      }
      if ((jsonObj.get("customColumnError") != null && !jsonObj.get("customColumnError").isJsonNull()) && !jsonObj.get("customColumnError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customColumnError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customColumnError").toString()));
      }
      // validate the optional field `customColumnError`
      if (jsonObj.get("customColumnError") != null && !jsonObj.get("customColumnError").isJsonNull()) {
        CustomColumnErrorEnum.validateJsonElement(jsonObj.get("customColumnError"));
      }
      if ((jsonObj.get("dateError") != null && !jsonObj.get("dateError").isJsonNull()) && !jsonObj.get("dateError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateError").toString()));
      }
      // validate the optional field `dateError`
      if (jsonObj.get("dateError") != null && !jsonObj.get("dateError").isJsonNull()) {
        DateErrorEnum.validateJsonElement(jsonObj.get("dateError"));
      }
      if ((jsonObj.get("dateRangeError") != null && !jsonObj.get("dateRangeError").isJsonNull()) && !jsonObj.get("dateRangeError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateRangeError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateRangeError").toString()));
      }
      // validate the optional field `dateRangeError`
      if (jsonObj.get("dateRangeError") != null && !jsonObj.get("dateRangeError").isJsonNull()) {
        DateRangeErrorEnum.validateJsonElement(jsonObj.get("dateRangeError"));
      }
      if ((jsonObj.get("distinctError") != null && !jsonObj.get("distinctError").isJsonNull()) && !jsonObj.get("distinctError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distinctError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distinctError").toString()));
      }
      // validate the optional field `distinctError`
      if (jsonObj.get("distinctError") != null && !jsonObj.get("distinctError").isJsonNull()) {
        DistinctErrorEnum.validateJsonElement(jsonObj.get("distinctError"));
      }
      if ((jsonObj.get("headerError") != null && !jsonObj.get("headerError").isJsonNull()) && !jsonObj.get("headerError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headerError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headerError").toString()));
      }
      // validate the optional field `headerError`
      if (jsonObj.get("headerError") != null && !jsonObj.get("headerError").isJsonNull()) {
        HeaderErrorEnum.validateJsonElement(jsonObj.get("headerError"));
      }
      if ((jsonObj.get("internalError") != null && !jsonObj.get("internalError").isJsonNull()) && !jsonObj.get("internalError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalError").toString()));
      }
      // validate the optional field `internalError`
      if (jsonObj.get("internalError") != null && !jsonObj.get("internalError").isJsonNull()) {
        InternalErrorEnum.validateJsonElement(jsonObj.get("internalError"));
      }
      if ((jsonObj.get("invalidParameterError") != null && !jsonObj.get("invalidParameterError").isJsonNull()) && !jsonObj.get("invalidParameterError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidParameterError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidParameterError").toString()));
      }
      // validate the optional field `invalidParameterError`
      if (jsonObj.get("invalidParameterError") != null && !jsonObj.get("invalidParameterError").isJsonNull()) {
        InvalidParameterErrorEnum.validateJsonElement(jsonObj.get("invalidParameterError"));
      }
      if ((jsonObj.get("queryError") != null && !jsonObj.get("queryError").isJsonNull()) && !jsonObj.get("queryError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryError").toString()));
      }
      // validate the optional field `queryError`
      if (jsonObj.get("queryError") != null && !jsonObj.get("queryError").isJsonNull()) {
        QueryErrorEnum.validateJsonElement(jsonObj.get("queryError"));
      }
      if ((jsonObj.get("quotaError") != null && !jsonObj.get("quotaError").isJsonNull()) && !jsonObj.get("quotaError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaError").toString()));
      }
      // validate the optional field `quotaError`
      if (jsonObj.get("quotaError") != null && !jsonObj.get("quotaError").isJsonNull()) {
        QuotaErrorEnum.validateJsonElement(jsonObj.get("quotaError"));
      }
      if ((jsonObj.get("requestError") != null && !jsonObj.get("requestError").isJsonNull()) && !jsonObj.get("requestError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestError").toString()));
      }
      // validate the optional field `requestError`
      if (jsonObj.get("requestError") != null && !jsonObj.get("requestError").isJsonNull()) {
        RequestErrorEnum.validateJsonElement(jsonObj.get("requestError"));
      }
      if ((jsonObj.get("sizeLimitError") != null && !jsonObj.get("sizeLimitError").isJsonNull()) && !jsonObj.get("sizeLimitError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeLimitError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeLimitError").toString()));
      }
      // validate the optional field `sizeLimitError`
      if (jsonObj.get("sizeLimitError") != null && !jsonObj.get("sizeLimitError").isJsonNull()) {
        SizeLimitErrorEnum.validateJsonElement(jsonObj.get("sizeLimitError"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAdsSearchads360V0ErrorsErrorCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAdsSearchads360V0ErrorsErrorCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAdsSearchads360V0ErrorsErrorCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAdsSearchads360V0ErrorsErrorCode.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAdsSearchads360V0ErrorsErrorCode>() {
           @Override
           public void write(JsonWriter out, GoogleAdsSearchads360V0ErrorsErrorCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAdsSearchads360V0ErrorsErrorCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAdsSearchads360V0ErrorsErrorCode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAdsSearchads360V0ErrorsErrorCode
   * @throws IOException if the JSON string is invalid with respect to GoogleAdsSearchads360V0ErrorsErrorCode
   */
  public static GoogleAdsSearchads360V0ErrorsErrorCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAdsSearchads360V0ErrorsErrorCode.class);
  }

  /**
   * Convert an instance of GoogleAdsSearchads360V0ErrorsErrorCode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

