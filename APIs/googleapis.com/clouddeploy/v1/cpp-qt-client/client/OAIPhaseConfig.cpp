/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhaseConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhaseConfig::OAIPhaseConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhaseConfig::OAIPhaseConfig() {
    this->initializeModel();
}

OAIPhaseConfig::~OAIPhaseConfig() {}

void OAIPhaseConfig::initializeModel() {

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_phase_id_isSet = false;
    m_phase_id_isValid = false;

    m_postdeploy_isSet = false;
    m_postdeploy_isValid = false;

    m_predeploy_isSet = false;
    m_predeploy_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_verify_isSet = false;
    m_verify_isValid = false;
}

void OAIPhaseConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhaseConfig::fromJsonObject(QJsonObject json) {

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_phase_id_isValid = ::OpenAPI::fromJsonValue(m_phase_id, json[QString("phaseId")]);
    m_phase_id_isSet = !json[QString("phaseId")].isNull() && m_phase_id_isValid;

    m_postdeploy_isValid = ::OpenAPI::fromJsonValue(m_postdeploy, json[QString("postdeploy")]);
    m_postdeploy_isSet = !json[QString("postdeploy")].isNull() && m_postdeploy_isValid;

    m_predeploy_isValid = ::OpenAPI::fromJsonValue(m_predeploy, json[QString("predeploy")]);
    m_predeploy_isSet = !json[QString("predeploy")].isNull() && m_predeploy_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_verify_isValid = ::OpenAPI::fromJsonValue(m_verify, json[QString("verify")]);
    m_verify_isSet = !json[QString("verify")].isNull() && m_verify_isValid;
}

QString OAIPhaseConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhaseConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_phase_id_isSet) {
        obj.insert(QString("phaseId"), ::OpenAPI::toJsonValue(m_phase_id));
    }
    if (m_postdeploy.isSet()) {
        obj.insert(QString("postdeploy"), ::OpenAPI::toJsonValue(m_postdeploy));
    }
    if (m_predeploy.isSet()) {
        obj.insert(QString("predeploy"), ::OpenAPI::toJsonValue(m_predeploy));
    }
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_verify_isSet) {
        obj.insert(QString("verify"), ::OpenAPI::toJsonValue(m_verify));
    }
    return obj;
}

qint32 OAIPhaseConfig::getPercentage() const {
    return m_percentage;
}
void OAIPhaseConfig::setPercentage(const qint32 &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIPhaseConfig::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIPhaseConfig::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIPhaseConfig::getPhaseId() const {
    return m_phase_id;
}
void OAIPhaseConfig::setPhaseId(const QString &phase_id) {
    m_phase_id = phase_id;
    m_phase_id_isSet = true;
}

bool OAIPhaseConfig::is_phase_id_Set() const{
    return m_phase_id_isSet;
}

bool OAIPhaseConfig::is_phase_id_Valid() const{
    return m_phase_id_isValid;
}

OAIPostdeploy OAIPhaseConfig::getPostdeploy() const {
    return m_postdeploy;
}
void OAIPhaseConfig::setPostdeploy(const OAIPostdeploy &postdeploy) {
    m_postdeploy = postdeploy;
    m_postdeploy_isSet = true;
}

bool OAIPhaseConfig::is_postdeploy_Set() const{
    return m_postdeploy_isSet;
}

bool OAIPhaseConfig::is_postdeploy_Valid() const{
    return m_postdeploy_isValid;
}

OAIPredeploy OAIPhaseConfig::getPredeploy() const {
    return m_predeploy;
}
void OAIPhaseConfig::setPredeploy(const OAIPredeploy &predeploy) {
    m_predeploy = predeploy;
    m_predeploy_isSet = true;
}

bool OAIPhaseConfig::is_predeploy_Set() const{
    return m_predeploy_isSet;
}

bool OAIPhaseConfig::is_predeploy_Valid() const{
    return m_predeploy_isValid;
}

QList<QString> OAIPhaseConfig::getProfiles() const {
    return m_profiles;
}
void OAIPhaseConfig::setProfiles(const QList<QString> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIPhaseConfig::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIPhaseConfig::is_profiles_Valid() const{
    return m_profiles_isValid;
}

bool OAIPhaseConfig::isVerify() const {
    return m_verify;
}
void OAIPhaseConfig::setVerify(const bool &verify) {
    m_verify = verify;
    m_verify_isSet = true;
}

bool OAIPhaseConfig::is_verify_Set() const{
    return m_verify_isSet;
}

bool OAIPhaseConfig::is_verify_Valid() const{
    return m_verify_isValid;
}

bool OAIPhaseConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postdeploy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predeploy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhaseConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
