/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineCondition::OAIPipelineCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineCondition::OAIPipelineCondition() {
    this->initializeModel();
}

OAIPipelineCondition::~OAIPipelineCondition() {}

void OAIPipelineCondition::initializeModel() {

    m_pipeline_ready_condition_isSet = false;
    m_pipeline_ready_condition_isValid = false;

    m_targets_present_condition_isSet = false;
    m_targets_present_condition_isValid = false;

    m_targets_type_condition_isSet = false;
    m_targets_type_condition_isValid = false;
}

void OAIPipelineCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineCondition::fromJsonObject(QJsonObject json) {

    m_pipeline_ready_condition_isValid = ::OpenAPI::fromJsonValue(m_pipeline_ready_condition, json[QString("pipelineReadyCondition")]);
    m_pipeline_ready_condition_isSet = !json[QString("pipelineReadyCondition")].isNull() && m_pipeline_ready_condition_isValid;

    m_targets_present_condition_isValid = ::OpenAPI::fromJsonValue(m_targets_present_condition, json[QString("targetsPresentCondition")]);
    m_targets_present_condition_isSet = !json[QString("targetsPresentCondition")].isNull() && m_targets_present_condition_isValid;

    m_targets_type_condition_isValid = ::OpenAPI::fromJsonValue(m_targets_type_condition, json[QString("targetsTypeCondition")]);
    m_targets_type_condition_isSet = !json[QString("targetsTypeCondition")].isNull() && m_targets_type_condition_isValid;
}

QString OAIPipelineCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_ready_condition.isSet()) {
        obj.insert(QString("pipelineReadyCondition"), ::OpenAPI::toJsonValue(m_pipeline_ready_condition));
    }
    if (m_targets_present_condition.isSet()) {
        obj.insert(QString("targetsPresentCondition"), ::OpenAPI::toJsonValue(m_targets_present_condition));
    }
    if (m_targets_type_condition.isSet()) {
        obj.insert(QString("targetsTypeCondition"), ::OpenAPI::toJsonValue(m_targets_type_condition));
    }
    return obj;
}

OAIPipelineReadyCondition OAIPipelineCondition::getPipelineReadyCondition() const {
    return m_pipeline_ready_condition;
}
void OAIPipelineCondition::setPipelineReadyCondition(const OAIPipelineReadyCondition &pipeline_ready_condition) {
    m_pipeline_ready_condition = pipeline_ready_condition;
    m_pipeline_ready_condition_isSet = true;
}

bool OAIPipelineCondition::is_pipeline_ready_condition_Set() const{
    return m_pipeline_ready_condition_isSet;
}

bool OAIPipelineCondition::is_pipeline_ready_condition_Valid() const{
    return m_pipeline_ready_condition_isValid;
}

OAITargetsPresentCondition OAIPipelineCondition::getTargetsPresentCondition() const {
    return m_targets_present_condition;
}
void OAIPipelineCondition::setTargetsPresentCondition(const OAITargetsPresentCondition &targets_present_condition) {
    m_targets_present_condition = targets_present_condition;
    m_targets_present_condition_isSet = true;
}

bool OAIPipelineCondition::is_targets_present_condition_Set() const{
    return m_targets_present_condition_isSet;
}

bool OAIPipelineCondition::is_targets_present_condition_Valid() const{
    return m_targets_present_condition_isValid;
}

OAITargetsTypeCondition OAIPipelineCondition::getTargetsTypeCondition() const {
    return m_targets_type_condition;
}
void OAIPipelineCondition::setTargetsTypeCondition(const OAITargetsTypeCondition &targets_type_condition) {
    m_targets_type_condition = targets_type_condition;
    m_targets_type_condition_isSet = true;
}

bool OAIPipelineCondition::is_targets_type_condition_Set() const{
    return m_targets_type_condition_isSet;
}

bool OAIPipelineCondition::is_targets_type_condition_Valid() const{
    return m_targets_type_condition_isValid;
}

bool OAIPipelineCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_ready_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets_present_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets_type_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
