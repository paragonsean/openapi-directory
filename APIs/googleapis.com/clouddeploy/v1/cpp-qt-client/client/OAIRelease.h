/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRelease.h
 *
 * A &#x60;Release&#x60; resource in the Cloud Deploy API. A &#x60;Release&#x60; defines a specific Skaffold configuration instance that can be deployed.
 */

#ifndef OAIRelease_H
#define OAIRelease_H

#include <QJsonObject>

#include "OAIBuildArtifact.h"
#include "OAICustomTargetType.h"
#include "OAIDeliveryPipeline.h"
#include "OAIReleaseCondition.h"
#include "OAITarget.h"
#include "OAITargetArtifact.h"
#include "OAITargetRender.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildArtifact;
class OAIReleaseCondition;
class OAICustomTargetType;
class OAIDeliveryPipeline;
class OAITargetArtifact;
class OAITargetRender;
class OAITarget;

class OAIRelease : public OAIObject {
public:
    OAIRelease();
    OAIRelease(QString json);
    ~OAIRelease() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAbandoned() const;
    void setAbandoned(const bool &abandoned);
    bool is_abandoned_Set() const;
    bool is_abandoned_Valid() const;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QList<OAIBuildArtifact> getBuildArtifacts() const;
    void setBuildArtifacts(const QList<OAIBuildArtifact> &build_artifacts);
    bool is_build_artifacts_Set() const;
    bool is_build_artifacts_Valid() const;

    OAIReleaseCondition getCondition() const;
    void setCondition(const OAIReleaseCondition &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QList<OAICustomTargetType> getCustomTargetTypeSnapshots() const;
    void setCustomTargetTypeSnapshots(const QList<OAICustomTargetType> &custom_target_type_snapshots);
    bool is_custom_target_type_snapshots_Set() const;
    bool is_custom_target_type_snapshots_Valid() const;

    OAIDeliveryPipeline getDeliveryPipelineSnapshot() const;
    void setDeliveryPipelineSnapshot(const OAIDeliveryPipeline &delivery_pipeline_snapshot);
    bool is_delivery_pipeline_snapshot_Set() const;
    bool is_delivery_pipeline_snapshot_Valid() const;

    QMap<QString, QString> getDeployParameters() const;
    void setDeployParameters(const QMap<QString, QString> &deploy_parameters);
    bool is_deploy_parameters_Set() const;
    bool is_deploy_parameters_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRenderEndTime() const;
    void setRenderEndTime(const QString &render_end_time);
    bool is_render_end_time_Set() const;
    bool is_render_end_time_Valid() const;

    QString getRenderStartTime() const;
    void setRenderStartTime(const QString &render_start_time);
    bool is_render_start_time_Set() const;
    bool is_render_start_time_Valid() const;

    QString getRenderState() const;
    void setRenderState(const QString &render_state);
    bool is_render_state_Set() const;
    bool is_render_state_Valid() const;

    QString getSkaffoldConfigPath() const;
    void setSkaffoldConfigPath(const QString &skaffold_config_path);
    bool is_skaffold_config_path_Set() const;
    bool is_skaffold_config_path_Valid() const;

    QString getSkaffoldConfigUri() const;
    void setSkaffoldConfigUri(const QString &skaffold_config_uri);
    bool is_skaffold_config_uri_Set() const;
    bool is_skaffold_config_uri_Valid() const;

    QString getSkaffoldVersion() const;
    void setSkaffoldVersion(const QString &skaffold_version);
    bool is_skaffold_version_Set() const;
    bool is_skaffold_version_Valid() const;

    QMap<QString, OAITargetArtifact> getTargetArtifacts() const;
    void setTargetArtifacts(const QMap<QString, OAITargetArtifact> &target_artifacts);
    bool is_target_artifacts_Set() const;
    bool is_target_artifacts_Valid() const;

    QMap<QString, OAITargetRender> getTargetRenders() const;
    void setTargetRenders(const QMap<QString, OAITargetRender> &target_renders);
    bool is_target_renders_Set() const;
    bool is_target_renders_Valid() const;

    QList<OAITarget> getTargetSnapshots() const;
    void setTargetSnapshots(const QList<OAITarget> &target_snapshots);
    bool is_target_snapshots_Set() const;
    bool is_target_snapshots_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_abandoned;
    bool m_abandoned_isSet;
    bool m_abandoned_isValid;

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QList<OAIBuildArtifact> m_build_artifacts;
    bool m_build_artifacts_isSet;
    bool m_build_artifacts_isValid;

    OAIReleaseCondition m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QList<OAICustomTargetType> m_custom_target_type_snapshots;
    bool m_custom_target_type_snapshots_isSet;
    bool m_custom_target_type_snapshots_isValid;

    OAIDeliveryPipeline m_delivery_pipeline_snapshot;
    bool m_delivery_pipeline_snapshot_isSet;
    bool m_delivery_pipeline_snapshot_isValid;

    QMap<QString, QString> m_deploy_parameters;
    bool m_deploy_parameters_isSet;
    bool m_deploy_parameters_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_render_end_time;
    bool m_render_end_time_isSet;
    bool m_render_end_time_isValid;

    QString m_render_start_time;
    bool m_render_start_time_isSet;
    bool m_render_start_time_isValid;

    QString m_render_state;
    bool m_render_state_isSet;
    bool m_render_state_isValid;

    QString m_skaffold_config_path;
    bool m_skaffold_config_path_isSet;
    bool m_skaffold_config_path_isValid;

    QString m_skaffold_config_uri;
    bool m_skaffold_config_uri_isSet;
    bool m_skaffold_config_uri_isValid;

    QString m_skaffold_version;
    bool m_skaffold_version_isSet;
    bool m_skaffold_version_isValid;

    QMap<QString, OAITargetArtifact> m_target_artifacts;
    bool m_target_artifacts_isSet;
    bool m_target_artifacts_isValid;

    QMap<QString, OAITargetRender> m_target_renders;
    bool m_target_renders_isSet;
    bool m_target_renders_isValid;

    QList<OAITarget> m_target_snapshots;
    bool m_target_snapshots_isSet;
    bool m_target_snapshots_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRelease)

#endif // OAIRelease_H
