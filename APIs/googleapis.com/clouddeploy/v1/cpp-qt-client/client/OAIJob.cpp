/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_advance_child_rollout_job_isSet = false;
    m_advance_child_rollout_job_isValid = false;

    m_create_child_rollout_job_isSet = false;
    m_create_child_rollout_job_isValid = false;

    m_deploy_job_isSet = false;
    m_deploy_job_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_run_isSet = false;
    m_job_run_isValid = false;

    m_postdeploy_job_isSet = false;
    m_postdeploy_job_isValid = false;

    m_predeploy_job_isSet = false;
    m_predeploy_job_isValid = false;

    m_skip_message_isSet = false;
    m_skip_message_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_verify_job_isSet = false;
    m_verify_job_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_advance_child_rollout_job_isValid = ::OpenAPI::fromJsonValue(m_advance_child_rollout_job, json[QString("advanceChildRolloutJob")]);
    m_advance_child_rollout_job_isSet = !json[QString("advanceChildRolloutJob")].isNull() && m_advance_child_rollout_job_isValid;

    m_create_child_rollout_job_isValid = ::OpenAPI::fromJsonValue(m_create_child_rollout_job, json[QString("createChildRolloutJob")]);
    m_create_child_rollout_job_isSet = !json[QString("createChildRolloutJob")].isNull() && m_create_child_rollout_job_isValid;

    m_deploy_job_isValid = ::OpenAPI::fromJsonValue(m_deploy_job, json[QString("deployJob")]);
    m_deploy_job_isSet = !json[QString("deployJob")].isNull() && m_deploy_job_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_run_isValid = ::OpenAPI::fromJsonValue(m_job_run, json[QString("jobRun")]);
    m_job_run_isSet = !json[QString("jobRun")].isNull() && m_job_run_isValid;

    m_postdeploy_job_isValid = ::OpenAPI::fromJsonValue(m_postdeploy_job, json[QString("postdeployJob")]);
    m_postdeploy_job_isSet = !json[QString("postdeployJob")].isNull() && m_postdeploy_job_isValid;

    m_predeploy_job_isValid = ::OpenAPI::fromJsonValue(m_predeploy_job, json[QString("predeployJob")]);
    m_predeploy_job_isSet = !json[QString("predeployJob")].isNull() && m_predeploy_job_isValid;

    m_skip_message_isValid = ::OpenAPI::fromJsonValue(m_skip_message, json[QString("skipMessage")]);
    m_skip_message_isSet = !json[QString("skipMessage")].isNull() && m_skip_message_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_verify_job_isValid = ::OpenAPI::fromJsonValue(m_verify_job, json[QString("verifyJob")]);
    m_verify_job_isSet = !json[QString("verifyJob")].isNull() && m_verify_job_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_child_rollout_job_isSet) {
        obj.insert(QString("advanceChildRolloutJob"), ::OpenAPI::toJsonValue(m_advance_child_rollout_job));
    }
    if (m_create_child_rollout_job_isSet) {
        obj.insert(QString("createChildRolloutJob"), ::OpenAPI::toJsonValue(m_create_child_rollout_job));
    }
    if (m_deploy_job_isSet) {
        obj.insert(QString("deployJob"), ::OpenAPI::toJsonValue(m_deploy_job));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_run_isSet) {
        obj.insert(QString("jobRun"), ::OpenAPI::toJsonValue(m_job_run));
    }
    if (m_postdeploy_job.isSet()) {
        obj.insert(QString("postdeployJob"), ::OpenAPI::toJsonValue(m_postdeploy_job));
    }
    if (m_predeploy_job.isSet()) {
        obj.insert(QString("predeployJob"), ::OpenAPI::toJsonValue(m_predeploy_job));
    }
    if (m_skip_message_isSet) {
        obj.insert(QString("skipMessage"), ::OpenAPI::toJsonValue(m_skip_message));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_verify_job_isSet) {
        obj.insert(QString("verifyJob"), ::OpenAPI::toJsonValue(m_verify_job));
    }
    return obj;
}

OAIObject OAIJob::getAdvanceChildRolloutJob() const {
    return m_advance_child_rollout_job;
}
void OAIJob::setAdvanceChildRolloutJob(const OAIObject &advance_child_rollout_job) {
    m_advance_child_rollout_job = advance_child_rollout_job;
    m_advance_child_rollout_job_isSet = true;
}

bool OAIJob::is_advance_child_rollout_job_Set() const{
    return m_advance_child_rollout_job_isSet;
}

bool OAIJob::is_advance_child_rollout_job_Valid() const{
    return m_advance_child_rollout_job_isValid;
}

OAIObject OAIJob::getCreateChildRolloutJob() const {
    return m_create_child_rollout_job;
}
void OAIJob::setCreateChildRolloutJob(const OAIObject &create_child_rollout_job) {
    m_create_child_rollout_job = create_child_rollout_job;
    m_create_child_rollout_job_isSet = true;
}

bool OAIJob::is_create_child_rollout_job_Set() const{
    return m_create_child_rollout_job_isSet;
}

bool OAIJob::is_create_child_rollout_job_Valid() const{
    return m_create_child_rollout_job_isValid;
}

OAIObject OAIJob::getDeployJob() const {
    return m_deploy_job;
}
void OAIJob::setDeployJob(const OAIObject &deploy_job) {
    m_deploy_job = deploy_job;
    m_deploy_job_isSet = true;
}

bool OAIJob::is_deploy_job_Set() const{
    return m_deploy_job_isSet;
}

bool OAIJob::is_deploy_job_Valid() const{
    return m_deploy_job_isValid;
}

QString OAIJob::getId() const {
    return m_id;
}
void OAIJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJob::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJob::getJobRun() const {
    return m_job_run;
}
void OAIJob::setJobRun(const QString &job_run) {
    m_job_run = job_run;
    m_job_run_isSet = true;
}

bool OAIJob::is_job_run_Set() const{
    return m_job_run_isSet;
}

bool OAIJob::is_job_run_Valid() const{
    return m_job_run_isValid;
}

OAIPostdeployJob OAIJob::getPostdeployJob() const {
    return m_postdeploy_job;
}
void OAIJob::setPostdeployJob(const OAIPostdeployJob &postdeploy_job) {
    m_postdeploy_job = postdeploy_job;
    m_postdeploy_job_isSet = true;
}

bool OAIJob::is_postdeploy_job_Set() const{
    return m_postdeploy_job_isSet;
}

bool OAIJob::is_postdeploy_job_Valid() const{
    return m_postdeploy_job_isValid;
}

OAIPredeployJob OAIJob::getPredeployJob() const {
    return m_predeploy_job;
}
void OAIJob::setPredeployJob(const OAIPredeployJob &predeploy_job) {
    m_predeploy_job = predeploy_job;
    m_predeploy_job_isSet = true;
}

bool OAIJob::is_predeploy_job_Set() const{
    return m_predeploy_job_isSet;
}

bool OAIJob::is_predeploy_job_Valid() const{
    return m_predeploy_job_isValid;
}

QString OAIJob::getSkipMessage() const {
    return m_skip_message;
}
void OAIJob::setSkipMessage(const QString &skip_message) {
    m_skip_message = skip_message;
    m_skip_message_isSet = true;
}

bool OAIJob::is_skip_message_Set() const{
    return m_skip_message_isSet;
}

bool OAIJob::is_skip_message_Valid() const{
    return m_skip_message_isValid;
}

QString OAIJob::getState() const {
    return m_state;
}
void OAIJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJob::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAIJob::getVerifyJob() const {
    return m_verify_job;
}
void OAIJob::setVerifyJob(const OAIObject &verify_job) {
    m_verify_job = verify_job;
    m_verify_job_isSet = true;
}

bool OAIJob::is_verify_job_Set() const{
    return m_verify_job_isSet;
}

bool OAIJob::is_verify_job_Valid() const{
    return m_verify_job_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_child_rollout_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_child_rollout_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postdeploy_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predeploy_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_job_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
