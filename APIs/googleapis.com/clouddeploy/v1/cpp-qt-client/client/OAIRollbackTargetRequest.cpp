/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollbackTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollbackTargetRequest::OAIRollbackTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollbackTargetRequest::OAIRollbackTargetRequest() {
    this->initializeModel();
}

OAIRollbackTargetRequest::~OAIRollbackTargetRequest() {}

void OAIRollbackTargetRequest::initializeModel() {

    m_release_id_isSet = false;
    m_release_id_isValid = false;

    m_rollback_config_isSet = false;
    m_rollback_config_isValid = false;

    m_rollout_id_isSet = false;
    m_rollout_id_isValid = false;

    m_rollout_to_roll_back_isSet = false;
    m_rollout_to_roll_back_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIRollbackTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollbackTargetRequest::fromJsonObject(QJsonObject json) {

    m_release_id_isValid = ::OpenAPI::fromJsonValue(m_release_id, json[QString("releaseId")]);
    m_release_id_isSet = !json[QString("releaseId")].isNull() && m_release_id_isValid;

    m_rollback_config_isValid = ::OpenAPI::fromJsonValue(m_rollback_config, json[QString("rollbackConfig")]);
    m_rollback_config_isSet = !json[QString("rollbackConfig")].isNull() && m_rollback_config_isValid;

    m_rollout_id_isValid = ::OpenAPI::fromJsonValue(m_rollout_id, json[QString("rolloutId")]);
    m_rollout_id_isSet = !json[QString("rolloutId")].isNull() && m_rollout_id_isValid;

    m_rollout_to_roll_back_isValid = ::OpenAPI::fromJsonValue(m_rollout_to_roll_back, json[QString("rolloutToRollBack")]);
    m_rollout_to_roll_back_isSet = !json[QString("rolloutToRollBack")].isNull() && m_rollout_to_roll_back_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIRollbackTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollbackTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_release_id_isSet) {
        obj.insert(QString("releaseId"), ::OpenAPI::toJsonValue(m_release_id));
    }
    if (m_rollback_config.isSet()) {
        obj.insert(QString("rollbackConfig"), ::OpenAPI::toJsonValue(m_rollback_config));
    }
    if (m_rollout_id_isSet) {
        obj.insert(QString("rolloutId"), ::OpenAPI::toJsonValue(m_rollout_id));
    }
    if (m_rollout_to_roll_back_isSet) {
        obj.insert(QString("rolloutToRollBack"), ::OpenAPI::toJsonValue(m_rollout_to_roll_back));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIRollbackTargetRequest::getReleaseId() const {
    return m_release_id;
}
void OAIRollbackTargetRequest::setReleaseId(const QString &release_id) {
    m_release_id = release_id;
    m_release_id_isSet = true;
}

bool OAIRollbackTargetRequest::is_release_id_Set() const{
    return m_release_id_isSet;
}

bool OAIRollbackTargetRequest::is_release_id_Valid() const{
    return m_release_id_isValid;
}

OAIRollbackTargetConfig OAIRollbackTargetRequest::getRollbackConfig() const {
    return m_rollback_config;
}
void OAIRollbackTargetRequest::setRollbackConfig(const OAIRollbackTargetConfig &rollback_config) {
    m_rollback_config = rollback_config;
    m_rollback_config_isSet = true;
}

bool OAIRollbackTargetRequest::is_rollback_config_Set() const{
    return m_rollback_config_isSet;
}

bool OAIRollbackTargetRequest::is_rollback_config_Valid() const{
    return m_rollback_config_isValid;
}

QString OAIRollbackTargetRequest::getRolloutId() const {
    return m_rollout_id;
}
void OAIRollbackTargetRequest::setRolloutId(const QString &rollout_id) {
    m_rollout_id = rollout_id;
    m_rollout_id_isSet = true;
}

bool OAIRollbackTargetRequest::is_rollout_id_Set() const{
    return m_rollout_id_isSet;
}

bool OAIRollbackTargetRequest::is_rollout_id_Valid() const{
    return m_rollout_id_isValid;
}

QString OAIRollbackTargetRequest::getRolloutToRollBack() const {
    return m_rollout_to_roll_back;
}
void OAIRollbackTargetRequest::setRolloutToRollBack(const QString &rollout_to_roll_back) {
    m_rollout_to_roll_back = rollout_to_roll_back;
    m_rollout_to_roll_back_isSet = true;
}

bool OAIRollbackTargetRequest::is_rollout_to_roll_back_Set() const{
    return m_rollout_to_roll_back_isSet;
}

bool OAIRollbackTargetRequest::is_rollout_to_roll_back_Valid() const{
    return m_rollout_to_roll_back_isValid;
}

QString OAIRollbackTargetRequest::getTargetId() const {
    return m_target_id;
}
void OAIRollbackTargetRequest::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIRollbackTargetRequest::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIRollbackTargetRequest::is_target_id_Valid() const{
    return m_target_id_isValid;
}

bool OAIRollbackTargetRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIRollbackTargetRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIRollbackTargetRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIRollbackTargetRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIRollbackTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_release_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_to_roll_back_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollbackTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
