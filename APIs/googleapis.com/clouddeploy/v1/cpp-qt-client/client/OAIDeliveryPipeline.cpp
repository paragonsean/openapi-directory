/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryPipeline::OAIDeliveryPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryPipeline::OAIDeliveryPipeline() {
    this->initializeModel();
}

OAIDeliveryPipeline::~OAIDeliveryPipeline() {}

void OAIDeliveryPipeline::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_serial_pipeline_isSet = false;
    m_serial_pipeline_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIDeliveryPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryPipeline::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_serial_pipeline_isValid = ::OpenAPI::fromJsonValue(m_serial_pipeline, json[QString("serialPipeline")]);
    m_serial_pipeline_isSet = !json[QString("serialPipeline")].isNull() && m_serial_pipeline_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIDeliveryPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_serial_pipeline.isSet()) {
        obj.insert(QString("serialPipeline"), ::OpenAPI::toJsonValue(m_serial_pipeline));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIDeliveryPipeline::getAnnotations() const {
    return m_annotations;
}
void OAIDeliveryPipeline::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIDeliveryPipeline::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIDeliveryPipeline::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIPipelineCondition OAIDeliveryPipeline::getCondition() const {
    return m_condition;
}
void OAIDeliveryPipeline::setCondition(const OAIPipelineCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIDeliveryPipeline::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIDeliveryPipeline::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIDeliveryPipeline::getCreateTime() const {
    return m_create_time;
}
void OAIDeliveryPipeline::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDeliveryPipeline::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDeliveryPipeline::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDeliveryPipeline::getDescription() const {
    return m_description;
}
void OAIDeliveryPipeline::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeliveryPipeline::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeliveryPipeline::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeliveryPipeline::getEtag() const {
    return m_etag;
}
void OAIDeliveryPipeline::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDeliveryPipeline::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDeliveryPipeline::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIDeliveryPipeline::getLabels() const {
    return m_labels;
}
void OAIDeliveryPipeline::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDeliveryPipeline::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDeliveryPipeline::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIDeliveryPipeline::getName() const {
    return m_name;
}
void OAIDeliveryPipeline::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeliveryPipeline::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeliveryPipeline::is_name_Valid() const{
    return m_name_isValid;
}

OAISerialPipeline OAIDeliveryPipeline::getSerialPipeline() const {
    return m_serial_pipeline;
}
void OAIDeliveryPipeline::setSerialPipeline(const OAISerialPipeline &serial_pipeline) {
    m_serial_pipeline = serial_pipeline;
    m_serial_pipeline_isSet = true;
}

bool OAIDeliveryPipeline::is_serial_pipeline_Set() const{
    return m_serial_pipeline_isSet;
}

bool OAIDeliveryPipeline::is_serial_pipeline_Valid() const{
    return m_serial_pipeline_isValid;
}

bool OAIDeliveryPipeline::isSuspended() const {
    return m_suspended;
}
void OAIDeliveryPipeline::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIDeliveryPipeline::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIDeliveryPipeline::is_suspended_Valid() const{
    return m_suspended_isValid;
}

QString OAIDeliveryPipeline::getUid() const {
    return m_uid;
}
void OAIDeliveryPipeline::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIDeliveryPipeline::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIDeliveryPipeline::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIDeliveryPipeline::getUpdateTime() const {
    return m_update_time;
}
void OAIDeliveryPipeline::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDeliveryPipeline::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDeliveryPipeline::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIDeliveryPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
