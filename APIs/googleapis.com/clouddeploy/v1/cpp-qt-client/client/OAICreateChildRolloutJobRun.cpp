/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChildRolloutJobRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChildRolloutJobRun::OAICreateChildRolloutJobRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChildRolloutJobRun::OAICreateChildRolloutJobRun() {
    this->initializeModel();
}

OAICreateChildRolloutJobRun::~OAICreateChildRolloutJobRun() {}

void OAICreateChildRolloutJobRun::initializeModel() {

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_rollout_phase_id_isSet = false;
    m_rollout_phase_id_isValid = false;
}

void OAICreateChildRolloutJobRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChildRolloutJobRun::fromJsonObject(QJsonObject json) {

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_rollout_phase_id_isValid = ::OpenAPI::fromJsonValue(m_rollout_phase_id, json[QString("rolloutPhaseId")]);
    m_rollout_phase_id_isSet = !json[QString("rolloutPhaseId")].isNull() && m_rollout_phase_id_isValid;
}

QString OAICreateChildRolloutJobRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChildRolloutJobRun::asJsonObject() const {
    QJsonObject obj;
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_rollout_phase_id_isSet) {
        obj.insert(QString("rolloutPhaseId"), ::OpenAPI::toJsonValue(m_rollout_phase_id));
    }
    return obj;
}

QString OAICreateChildRolloutJobRun::getRollout() const {
    return m_rollout;
}
void OAICreateChildRolloutJobRun::setRollout(const QString &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAICreateChildRolloutJobRun::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAICreateChildRolloutJobRun::is_rollout_Valid() const{
    return m_rollout_isValid;
}

QString OAICreateChildRolloutJobRun::getRolloutPhaseId() const {
    return m_rollout_phase_id;
}
void OAICreateChildRolloutJobRun::setRolloutPhaseId(const QString &rollout_phase_id) {
    m_rollout_phase_id = rollout_phase_id;
    m_rollout_phase_id_isSet = true;
}

bool OAICreateChildRolloutJobRun::is_rollout_phase_id_Set() const{
    return m_rollout_phase_id_isSet;
}

bool OAICreateChildRolloutJobRun::is_rollout_phase_id_Valid() const{
    return m_rollout_phase_id_isValid;
}

bool OAICreateChildRolloutJobRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_phase_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChildRolloutJobRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
