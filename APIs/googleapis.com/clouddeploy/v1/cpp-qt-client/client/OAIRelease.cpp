/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelease::OAIRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelease::OAIRelease() {
    this->initializeModel();
}

OAIRelease::~OAIRelease() {}

void OAIRelease::initializeModel() {

    m_abandoned_isSet = false;
    m_abandoned_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_build_artifacts_isSet = false;
    m_build_artifacts_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_target_type_snapshots_isSet = false;
    m_custom_target_type_snapshots_isValid = false;

    m_delivery_pipeline_snapshot_isSet = false;
    m_delivery_pipeline_snapshot_isValid = false;

    m_deploy_parameters_isSet = false;
    m_deploy_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_render_end_time_isSet = false;
    m_render_end_time_isValid = false;

    m_render_start_time_isSet = false;
    m_render_start_time_isValid = false;

    m_render_state_isSet = false;
    m_render_state_isValid = false;

    m_skaffold_config_path_isSet = false;
    m_skaffold_config_path_isValid = false;

    m_skaffold_config_uri_isSet = false;
    m_skaffold_config_uri_isValid = false;

    m_skaffold_version_isSet = false;
    m_skaffold_version_isValid = false;

    m_target_artifacts_isSet = false;
    m_target_artifacts_isValid = false;

    m_target_renders_isSet = false;
    m_target_renders_isValid = false;

    m_target_snapshots_isSet = false;
    m_target_snapshots_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelease::fromJsonObject(QJsonObject json) {

    m_abandoned_isValid = ::OpenAPI::fromJsonValue(m_abandoned, json[QString("abandoned")]);
    m_abandoned_isSet = !json[QString("abandoned")].isNull() && m_abandoned_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_build_artifacts_isValid = ::OpenAPI::fromJsonValue(m_build_artifacts, json[QString("buildArtifacts")]);
    m_build_artifacts_isSet = !json[QString("buildArtifacts")].isNull() && m_build_artifacts_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_target_type_snapshots_isValid = ::OpenAPI::fromJsonValue(m_custom_target_type_snapshots, json[QString("customTargetTypeSnapshots")]);
    m_custom_target_type_snapshots_isSet = !json[QString("customTargetTypeSnapshots")].isNull() && m_custom_target_type_snapshots_isValid;

    m_delivery_pipeline_snapshot_isValid = ::OpenAPI::fromJsonValue(m_delivery_pipeline_snapshot, json[QString("deliveryPipelineSnapshot")]);
    m_delivery_pipeline_snapshot_isSet = !json[QString("deliveryPipelineSnapshot")].isNull() && m_delivery_pipeline_snapshot_isValid;

    m_deploy_parameters_isValid = ::OpenAPI::fromJsonValue(m_deploy_parameters, json[QString("deployParameters")]);
    m_deploy_parameters_isSet = !json[QString("deployParameters")].isNull() && m_deploy_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_render_end_time_isValid = ::OpenAPI::fromJsonValue(m_render_end_time, json[QString("renderEndTime")]);
    m_render_end_time_isSet = !json[QString("renderEndTime")].isNull() && m_render_end_time_isValid;

    m_render_start_time_isValid = ::OpenAPI::fromJsonValue(m_render_start_time, json[QString("renderStartTime")]);
    m_render_start_time_isSet = !json[QString("renderStartTime")].isNull() && m_render_start_time_isValid;

    m_render_state_isValid = ::OpenAPI::fromJsonValue(m_render_state, json[QString("renderState")]);
    m_render_state_isSet = !json[QString("renderState")].isNull() && m_render_state_isValid;

    m_skaffold_config_path_isValid = ::OpenAPI::fromJsonValue(m_skaffold_config_path, json[QString("skaffoldConfigPath")]);
    m_skaffold_config_path_isSet = !json[QString("skaffoldConfigPath")].isNull() && m_skaffold_config_path_isValid;

    m_skaffold_config_uri_isValid = ::OpenAPI::fromJsonValue(m_skaffold_config_uri, json[QString("skaffoldConfigUri")]);
    m_skaffold_config_uri_isSet = !json[QString("skaffoldConfigUri")].isNull() && m_skaffold_config_uri_isValid;

    m_skaffold_version_isValid = ::OpenAPI::fromJsonValue(m_skaffold_version, json[QString("skaffoldVersion")]);
    m_skaffold_version_isSet = !json[QString("skaffoldVersion")].isNull() && m_skaffold_version_isValid;

    m_target_artifacts_isValid = ::OpenAPI::fromJsonValue(m_target_artifacts, json[QString("targetArtifacts")]);
    m_target_artifacts_isSet = !json[QString("targetArtifacts")].isNull() && m_target_artifacts_isValid;

    m_target_renders_isValid = ::OpenAPI::fromJsonValue(m_target_renders, json[QString("targetRenders")]);
    m_target_renders_isSet = !json[QString("targetRenders")].isNull() && m_target_renders_isValid;

    m_target_snapshots_isValid = ::OpenAPI::fromJsonValue(m_target_snapshots, json[QString("targetSnapshots")]);
    m_target_snapshots_isSet = !json[QString("targetSnapshots")].isNull() && m_target_snapshots_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_abandoned_isSet) {
        obj.insert(QString("abandoned"), ::OpenAPI::toJsonValue(m_abandoned));
    }
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_build_artifacts.size() > 0) {
        obj.insert(QString("buildArtifacts"), ::OpenAPI::toJsonValue(m_build_artifacts));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_target_type_snapshots.size() > 0) {
        obj.insert(QString("customTargetTypeSnapshots"), ::OpenAPI::toJsonValue(m_custom_target_type_snapshots));
    }
    if (m_delivery_pipeline_snapshot.isSet()) {
        obj.insert(QString("deliveryPipelineSnapshot"), ::OpenAPI::toJsonValue(m_delivery_pipeline_snapshot));
    }
    if (m_deploy_parameters.size() > 0) {
        obj.insert(QString("deployParameters"), ::OpenAPI::toJsonValue(m_deploy_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_render_end_time_isSet) {
        obj.insert(QString("renderEndTime"), ::OpenAPI::toJsonValue(m_render_end_time));
    }
    if (m_render_start_time_isSet) {
        obj.insert(QString("renderStartTime"), ::OpenAPI::toJsonValue(m_render_start_time));
    }
    if (m_render_state_isSet) {
        obj.insert(QString("renderState"), ::OpenAPI::toJsonValue(m_render_state));
    }
    if (m_skaffold_config_path_isSet) {
        obj.insert(QString("skaffoldConfigPath"), ::OpenAPI::toJsonValue(m_skaffold_config_path));
    }
    if (m_skaffold_config_uri_isSet) {
        obj.insert(QString("skaffoldConfigUri"), ::OpenAPI::toJsonValue(m_skaffold_config_uri));
    }
    if (m_skaffold_version_isSet) {
        obj.insert(QString("skaffoldVersion"), ::OpenAPI::toJsonValue(m_skaffold_version));
    }
    if (m_target_artifacts.size() > 0) {
        obj.insert(QString("targetArtifacts"), ::OpenAPI::toJsonValue(m_target_artifacts));
    }
    if (m_target_renders.size() > 0) {
        obj.insert(QString("targetRenders"), ::OpenAPI::toJsonValue(m_target_renders));
    }
    if (m_target_snapshots.size() > 0) {
        obj.insert(QString("targetSnapshots"), ::OpenAPI::toJsonValue(m_target_snapshots));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

bool OAIRelease::isAbandoned() const {
    return m_abandoned;
}
void OAIRelease::setAbandoned(const bool &abandoned) {
    m_abandoned = abandoned;
    m_abandoned_isSet = true;
}

bool OAIRelease::is_abandoned_Set() const{
    return m_abandoned_isSet;
}

bool OAIRelease::is_abandoned_Valid() const{
    return m_abandoned_isValid;
}

QMap<QString, QString> OAIRelease::getAnnotations() const {
    return m_annotations;
}
void OAIRelease::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIRelease::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIRelease::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIBuildArtifact> OAIRelease::getBuildArtifacts() const {
    return m_build_artifacts;
}
void OAIRelease::setBuildArtifacts(const QList<OAIBuildArtifact> &build_artifacts) {
    m_build_artifacts = build_artifacts;
    m_build_artifacts_isSet = true;
}

bool OAIRelease::is_build_artifacts_Set() const{
    return m_build_artifacts_isSet;
}

bool OAIRelease::is_build_artifacts_Valid() const{
    return m_build_artifacts_isValid;
}

OAIReleaseCondition OAIRelease::getCondition() const {
    return m_condition;
}
void OAIRelease::setCondition(const OAIReleaseCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIRelease::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIRelease::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIRelease::getCreateTime() const {
    return m_create_time;
}
void OAIRelease::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRelease::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRelease::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAICustomTargetType> OAIRelease::getCustomTargetTypeSnapshots() const {
    return m_custom_target_type_snapshots;
}
void OAIRelease::setCustomTargetTypeSnapshots(const QList<OAICustomTargetType> &custom_target_type_snapshots) {
    m_custom_target_type_snapshots = custom_target_type_snapshots;
    m_custom_target_type_snapshots_isSet = true;
}

bool OAIRelease::is_custom_target_type_snapshots_Set() const{
    return m_custom_target_type_snapshots_isSet;
}

bool OAIRelease::is_custom_target_type_snapshots_Valid() const{
    return m_custom_target_type_snapshots_isValid;
}

OAIDeliveryPipeline OAIRelease::getDeliveryPipelineSnapshot() const {
    return m_delivery_pipeline_snapshot;
}
void OAIRelease::setDeliveryPipelineSnapshot(const OAIDeliveryPipeline &delivery_pipeline_snapshot) {
    m_delivery_pipeline_snapshot = delivery_pipeline_snapshot;
    m_delivery_pipeline_snapshot_isSet = true;
}

bool OAIRelease::is_delivery_pipeline_snapshot_Set() const{
    return m_delivery_pipeline_snapshot_isSet;
}

bool OAIRelease::is_delivery_pipeline_snapshot_Valid() const{
    return m_delivery_pipeline_snapshot_isValid;
}

QMap<QString, QString> OAIRelease::getDeployParameters() const {
    return m_deploy_parameters;
}
void OAIRelease::setDeployParameters(const QMap<QString, QString> &deploy_parameters) {
    m_deploy_parameters = deploy_parameters;
    m_deploy_parameters_isSet = true;
}

bool OAIRelease::is_deploy_parameters_Set() const{
    return m_deploy_parameters_isSet;
}

bool OAIRelease::is_deploy_parameters_Valid() const{
    return m_deploy_parameters_isValid;
}

QString OAIRelease::getDescription() const {
    return m_description;
}
void OAIRelease::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRelease::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRelease::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRelease::getEtag() const {
    return m_etag;
}
void OAIRelease::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRelease::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRelease::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIRelease::getLabels() const {
    return m_labels;
}
void OAIRelease::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRelease::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRelease::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIRelease::getName() const {
    return m_name;
}
void OAIRelease::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelease::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelease::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRelease::getRenderEndTime() const {
    return m_render_end_time;
}
void OAIRelease::setRenderEndTime(const QString &render_end_time) {
    m_render_end_time = render_end_time;
    m_render_end_time_isSet = true;
}

bool OAIRelease::is_render_end_time_Set() const{
    return m_render_end_time_isSet;
}

bool OAIRelease::is_render_end_time_Valid() const{
    return m_render_end_time_isValid;
}

QString OAIRelease::getRenderStartTime() const {
    return m_render_start_time;
}
void OAIRelease::setRenderStartTime(const QString &render_start_time) {
    m_render_start_time = render_start_time;
    m_render_start_time_isSet = true;
}

bool OAIRelease::is_render_start_time_Set() const{
    return m_render_start_time_isSet;
}

bool OAIRelease::is_render_start_time_Valid() const{
    return m_render_start_time_isValid;
}

QString OAIRelease::getRenderState() const {
    return m_render_state;
}
void OAIRelease::setRenderState(const QString &render_state) {
    m_render_state = render_state;
    m_render_state_isSet = true;
}

bool OAIRelease::is_render_state_Set() const{
    return m_render_state_isSet;
}

bool OAIRelease::is_render_state_Valid() const{
    return m_render_state_isValid;
}

QString OAIRelease::getSkaffoldConfigPath() const {
    return m_skaffold_config_path;
}
void OAIRelease::setSkaffoldConfigPath(const QString &skaffold_config_path) {
    m_skaffold_config_path = skaffold_config_path;
    m_skaffold_config_path_isSet = true;
}

bool OAIRelease::is_skaffold_config_path_Set() const{
    return m_skaffold_config_path_isSet;
}

bool OAIRelease::is_skaffold_config_path_Valid() const{
    return m_skaffold_config_path_isValid;
}

QString OAIRelease::getSkaffoldConfigUri() const {
    return m_skaffold_config_uri;
}
void OAIRelease::setSkaffoldConfigUri(const QString &skaffold_config_uri) {
    m_skaffold_config_uri = skaffold_config_uri;
    m_skaffold_config_uri_isSet = true;
}

bool OAIRelease::is_skaffold_config_uri_Set() const{
    return m_skaffold_config_uri_isSet;
}

bool OAIRelease::is_skaffold_config_uri_Valid() const{
    return m_skaffold_config_uri_isValid;
}

QString OAIRelease::getSkaffoldVersion() const {
    return m_skaffold_version;
}
void OAIRelease::setSkaffoldVersion(const QString &skaffold_version) {
    m_skaffold_version = skaffold_version;
    m_skaffold_version_isSet = true;
}

bool OAIRelease::is_skaffold_version_Set() const{
    return m_skaffold_version_isSet;
}

bool OAIRelease::is_skaffold_version_Valid() const{
    return m_skaffold_version_isValid;
}

QMap<QString, OAITargetArtifact> OAIRelease::getTargetArtifacts() const {
    return m_target_artifacts;
}
void OAIRelease::setTargetArtifacts(const QMap<QString, OAITargetArtifact> &target_artifacts) {
    m_target_artifacts = target_artifacts;
    m_target_artifacts_isSet = true;
}

bool OAIRelease::is_target_artifacts_Set() const{
    return m_target_artifacts_isSet;
}

bool OAIRelease::is_target_artifacts_Valid() const{
    return m_target_artifacts_isValid;
}

QMap<QString, OAITargetRender> OAIRelease::getTargetRenders() const {
    return m_target_renders;
}
void OAIRelease::setTargetRenders(const QMap<QString, OAITargetRender> &target_renders) {
    m_target_renders = target_renders;
    m_target_renders_isSet = true;
}

bool OAIRelease::is_target_renders_Set() const{
    return m_target_renders_isSet;
}

bool OAIRelease::is_target_renders_Valid() const{
    return m_target_renders_isValid;
}

QList<OAITarget> OAIRelease::getTargetSnapshots() const {
    return m_target_snapshots;
}
void OAIRelease::setTargetSnapshots(const QList<OAITarget> &target_snapshots) {
    m_target_snapshots = target_snapshots;
    m_target_snapshots_isSet = true;
}

bool OAIRelease::is_target_snapshots_Set() const{
    return m_target_snapshots_isSet;
}

bool OAIRelease::is_target_snapshots_Valid() const{
    return m_target_snapshots_isValid;
}

QString OAIRelease::getUid() const {
    return m_uid;
}
void OAIRelease::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRelease::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRelease::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abandoned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_target_type_snapshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_pipeline_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skaffold_config_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skaffold_config_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skaffold_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_renders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_snapshots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
