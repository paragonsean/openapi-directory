/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvanceRolloutRequest.h"
#include "OAIApproveRolloutRequest.h"
#include "OAIAutomation.h"
#include "OAICustomTargetType.h"
#include "OAIDeliveryPipeline.h"
#include "OAIIgnoreJobRequest.h"
#include "OAIListAutomationRunsResponse.h"
#include "OAIListAutomationsResponse.h"
#include "OAIListCustomTargetTypesResponse.h"
#include "OAIListDeliveryPipelinesResponse.h"
#include "OAIListJobRunsResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIListOperationsResponse.h"
#include "OAIListReleasesResponse.h"
#include "OAIListRolloutsResponse.h"
#include "OAIListTargetsResponse.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIPolicy.h"
#include "OAIRelease.h"
#include "OAIRetryJobRequest.h"
#include "OAIRollbackTargetRequest.h"
#include "OAIRollbackTargetResponse.h"
#include "OAIRollout.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITarget.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  custom_target_type_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_custom_target_type OAICustomTargetType [optional]
    */
    virtual void clouddeploy_projects_locations_customTargetTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_target_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICustomTargetType> &oai_custom_target_type = ::OpenAPI::OptionalParam<OAICustomTargetType>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_customTargetTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_automationRuns_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  automation_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_automation OAIAutomation [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_automations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &automation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAutomation> &oai_automation = ::OpenAPI::OptionalParam<OAIAutomation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_automations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  delivery_pipeline_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_delivery_pipeline OAIDeliveryPipeline [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delivery_pipeline_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDeliveryPipeline> &oai_delivery_pipeline = ::OpenAPI::OptionalParam<OAIDeliveryPipeline>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_abandon(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  release_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_release OAIRelease [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &release_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIRelease> &oai_release = ::OpenAPI::OptionalParam<OAIRelease>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_advance_rollout_request OAIAdvanceRolloutRequest [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advance(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAdvanceRolloutRequest> &oai_advance_rollout_request = ::OpenAPI::OptionalParam<OAIAdvanceRolloutRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_approve_rollout_request OAIApproveRolloutRequest [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approve(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApproveRolloutRequest> &oai_approve_rollout_request = ::OpenAPI::OptionalParam<OAIApproveRolloutRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  rollout_id QString [optional]
    * @param[in]  starting_phase_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_rollout OAIRollout [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rollout_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &starting_phase_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIRollout> &oai_rollout = ::OpenAPI::OptionalParam<OAIRollout>());

    /**
    * @param[in]  rollout QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_ignore_job_request OAIIgnoreJobRequest [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJob(const QString &rollout, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIgnoreJobRequest> &oai_ignore_job_request = ::OpenAPI::OptionalParam<OAIIgnoreJobRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rollout QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_retry_job_request OAIRetryJobRequest [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJob(const QString &rollout, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRetryJobRequest> &oai_retry_job_request = ::OpenAPI::OptionalParam<OAIRetryJobRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_rollback_target_request OAIRollbackTargetRequest [optional]
    */
    virtual void clouddeploy_projects_locations_deliveryPipelines_rollbackTarget(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackTargetRequest> &oai_rollback_target_request = ::OpenAPI::OptionalParam<OAIRollbackTargetRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void clouddeploy_projects_locations_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  target_id QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_target OAITarget [optional]
    */
    virtual void clouddeploy_projects_locations_targets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITarget> &oai_target = ::OpenAPI::OptionalParam<OAITarget>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  etag QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  validate_only bool [optional]
    */
    virtual void clouddeploy_projects_locations_targets_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &etag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void clouddeploy_projects_locations_targets_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void clouddeploy_projects_locations_targets_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void clouddeploy_projects_locations_targets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_target OAITarget [optional]
    */
    virtual void clouddeploy_projects_locations_targets_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITarget> &oai_target = ::OpenAPI::OptionalParam<OAITarget>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void clouddeploy_projects_locations_targets_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void clouddeploy_projects_locations_targets_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clouddeploy_projects_locations_customTargetTypes_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_customTargetTypes_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_automations_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_automations_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_operations_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_createCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_deleteCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_getCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_listCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_patchCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void clouddeploy_projects_locations_targets_testIamPermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clouddeploy_projects_locations_customTargetTypes_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_customTargetTypes_listSignal(OAIListCustomTargetTypesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignal(OAIListAutomationRunsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignal(OAIListAutomationsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_listSignal(OAIListDeliveryPipelinesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignal(OAIListReleasesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignal(OAIListJobRunsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignal(OAIListRolloutsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignal(OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignal(OAIRollbackTargetResponse summary);
    void clouddeploy_projects_locations_listSignal(OAIListLocationsResponse summary);
    void clouddeploy_projects_locations_operations_cancelSignal(OAIObject summary);
    void clouddeploy_projects_locations_operations_listSignal(OAIListOperationsResponse summary);
    void clouddeploy_projects_locations_targets_createSignal(OAIOperation summary);
    void clouddeploy_projects_locations_targets_deleteSignal(OAIOperation summary);
    void clouddeploy_projects_locations_targets_getSignal(OAITarget summary);
    void clouddeploy_projects_locations_targets_getIamPolicySignal(OAIPolicy summary);
    void clouddeploy_projects_locations_targets_listSignal(OAIListTargetsResponse summary);
    void clouddeploy_projects_locations_targets_patchSignal(OAIOperation summary);
    void clouddeploy_projects_locations_targets_setIamPolicySignal(OAIPolicy summary);
    void clouddeploy_projects_locations_targets_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);


    void clouddeploy_projects_locations_customTargetTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_customTargetTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIListCustomTargetTypesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalFull(OAIHttpRequestWorker *worker, OAIListAutomationRunsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignalFull(OAIHttpRequestWorker *worker, OAIListAutomationsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_listSignalFull(OAIHttpRequestWorker *worker, OAIListDeliveryPipelinesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignalFull(OAIHttpRequestWorker *worker, OAIListReleasesResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalFull(OAIHttpRequestWorker *worker, OAIListJobRunsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalFull(OAIHttpRequestWorker *worker, OAIListRolloutsResponse summary);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalFull(OAIHttpRequestWorker *worker, OAIRollbackTargetResponse summary);
    void clouddeploy_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void clouddeploy_projects_locations_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clouddeploy_projects_locations_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void clouddeploy_projects_locations_targets_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_targets_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_targets_getSignalFull(OAIHttpRequestWorker *worker, OAITarget summary);
    void clouddeploy_projects_locations_targets_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void clouddeploy_projects_locations_targets_listSignalFull(OAIHttpRequestWorker *worker, OAIListTargetsResponse summary);
    void clouddeploy_projects_locations_targets_patchSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void clouddeploy_projects_locations_targets_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void clouddeploy_projects_locations_targets_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);

    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_customTargetTypes_createSignalError() instead")
    void clouddeploy_projects_locations_customTargetTypes_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_customTargetTypes_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_customTargetTypes_listSignalError() instead")
    void clouddeploy_projects_locations_customTargetTypes_listSignalE(OAIListCustomTargetTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_customTargetTypes_listSignalError(OAIListCustomTargetTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalE(OAIListAutomationRunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalError(OAIListAutomationRunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automations_createSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automations_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignalE(OAIListAutomationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignalError(OAIListAutomationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_createSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_listSignalE(OAIListDeliveryPipelinesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_listSignalError(OAIListDeliveryPipelinesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_createSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignalE(OAIListReleasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignalError(OAIListReleasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalE(OAIListJobRunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalError(OAIListJobRunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalE(OAIListRolloutsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalError(OAIListRolloutsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalError() instead")
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalE(OAIRollbackTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalError(OAIRollbackTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_listSignalError() instead")
    void clouddeploy_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_operations_cancelSignalError() instead")
    void clouddeploy_projects_locations_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_operations_listSignalError() instead")
    void clouddeploy_projects_locations_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_createSignalError() instead")
    void clouddeploy_projects_locations_targets_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_deleteSignalError() instead")
    void clouddeploy_projects_locations_targets_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_getSignalError() instead")
    void clouddeploy_projects_locations_targets_getSignalE(OAITarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_getSignalError(OAITarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_getIamPolicySignalError() instead")
    void clouddeploy_projects_locations_targets_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_listSignalError() instead")
    void clouddeploy_projects_locations_targets_listSignalE(OAIListTargetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_listSignalError(OAIListTargetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_patchSignalError() instead")
    void clouddeploy_projects_locations_targets_patchSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_patchSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_setIamPolicySignalError() instead")
    void clouddeploy_projects_locations_targets_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_testIamPermissionsSignalError() instead")
    void clouddeploy_projects_locations_targets_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_customTargetTypes_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_customTargetTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_customTargetTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_customTargetTypes_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_customTargetTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_customTargetTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automationRuns_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automations_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_automations_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_automations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_abandonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_advanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_approveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_ignoreJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_jobRuns_terminateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_releases_rollouts_retryJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalErrorFull() instead")
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_deliveryPipelines_rollbackTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_operations_cancelSignalErrorFull() instead")
    void clouddeploy_projects_locations_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_operations_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_createSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_deleteSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_getSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_getIamPolicySignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_listSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_patchSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_setIamPolicySignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clouddeploy_projects_locations_targets_testIamPermissionsSignalErrorFull() instead")
    void clouddeploy_projects_locations_targets_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clouddeploy_projects_locations_targets_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
