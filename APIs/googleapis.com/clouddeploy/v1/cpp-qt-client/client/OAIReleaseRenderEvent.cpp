/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseRenderEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseRenderEvent::OAIReleaseRenderEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseRenderEvent::OAIReleaseRenderEvent() {
    this->initializeModel();
}

OAIReleaseRenderEvent::~OAIReleaseRenderEvent() {}

void OAIReleaseRenderEvent::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_pipeline_uid_isSet = false;
    m_pipeline_uid_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_release_render_state_isSet = false;
    m_release_render_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReleaseRenderEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseRenderEvent::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_pipeline_uid_isValid = ::OpenAPI::fromJsonValue(m_pipeline_uid, json[QString("pipelineUid")]);
    m_pipeline_uid_isSet = !json[QString("pipelineUid")].isNull() && m_pipeline_uid_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_release_render_state_isValid = ::OpenAPI::fromJsonValue(m_release_render_state, json[QString("releaseRenderState")]);
    m_release_render_state_isSet = !json[QString("releaseRenderState")].isNull() && m_release_render_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReleaseRenderEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseRenderEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_pipeline_uid_isSet) {
        obj.insert(QString("pipelineUid"), ::OpenAPI::toJsonValue(m_pipeline_uid));
    }
    if (m_release_isSet) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_release_render_state_isSet) {
        obj.insert(QString("releaseRenderState"), ::OpenAPI::toJsonValue(m_release_render_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIReleaseRenderEvent::getMessage() const {
    return m_message;
}
void OAIReleaseRenderEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIReleaseRenderEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIReleaseRenderEvent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIReleaseRenderEvent::getPipelineUid() const {
    return m_pipeline_uid;
}
void OAIReleaseRenderEvent::setPipelineUid(const QString &pipeline_uid) {
    m_pipeline_uid = pipeline_uid;
    m_pipeline_uid_isSet = true;
}

bool OAIReleaseRenderEvent::is_pipeline_uid_Set() const{
    return m_pipeline_uid_isSet;
}

bool OAIReleaseRenderEvent::is_pipeline_uid_Valid() const{
    return m_pipeline_uid_isValid;
}

QString OAIReleaseRenderEvent::getRelease() const {
    return m_release;
}
void OAIReleaseRenderEvent::setRelease(const QString &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIReleaseRenderEvent::is_release_Set() const{
    return m_release_isSet;
}

bool OAIReleaseRenderEvent::is_release_Valid() const{
    return m_release_isValid;
}

QString OAIReleaseRenderEvent::getReleaseRenderState() const {
    return m_release_render_state;
}
void OAIReleaseRenderEvent::setReleaseRenderState(const QString &release_render_state) {
    m_release_render_state = release_render_state;
    m_release_render_state_isSet = true;
}

bool OAIReleaseRenderEvent::is_release_render_state_Set() const{
    return m_release_render_state_isSet;
}

bool OAIReleaseRenderEvent::is_release_render_state_Valid() const{
    return m_release_render_state_isValid;
}

QString OAIReleaseRenderEvent::getType() const {
    return m_type;
}
void OAIReleaseRenderEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReleaseRenderEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReleaseRenderEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReleaseRenderEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_render_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseRenderEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
