/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetRender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetRender::OAITargetRender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetRender::OAITargetRender() {
    this->initializeModel();
}

OAITargetRender::~OAITargetRender() {}

void OAITargetRender::initializeModel() {

    m_failure_cause_isSet = false;
    m_failure_cause_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_rendering_build_isSet = false;
    m_rendering_build_isValid = false;

    m_rendering_state_isSet = false;
    m_rendering_state_isValid = false;
}

void OAITargetRender::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetRender::fromJsonObject(QJsonObject json) {

    m_failure_cause_isValid = ::OpenAPI::fromJsonValue(m_failure_cause, json[QString("failureCause")]);
    m_failure_cause_isSet = !json[QString("failureCause")].isNull() && m_failure_cause_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_rendering_build_isValid = ::OpenAPI::fromJsonValue(m_rendering_build, json[QString("renderingBuild")]);
    m_rendering_build_isSet = !json[QString("renderingBuild")].isNull() && m_rendering_build_isValid;

    m_rendering_state_isValid = ::OpenAPI::fromJsonValue(m_rendering_state, json[QString("renderingState")]);
    m_rendering_state_isSet = !json[QString("renderingState")].isNull() && m_rendering_state_isValid;
}

QString OAITargetRender::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetRender::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_cause_isSet) {
        obj.insert(QString("failureCause"), ::OpenAPI::toJsonValue(m_failure_cause));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_rendering_build_isSet) {
        obj.insert(QString("renderingBuild"), ::OpenAPI::toJsonValue(m_rendering_build));
    }
    if (m_rendering_state_isSet) {
        obj.insert(QString("renderingState"), ::OpenAPI::toJsonValue(m_rendering_state));
    }
    return obj;
}

QString OAITargetRender::getFailureCause() const {
    return m_failure_cause;
}
void OAITargetRender::setFailureCause(const QString &failure_cause) {
    m_failure_cause = failure_cause;
    m_failure_cause_isSet = true;
}

bool OAITargetRender::is_failure_cause_Set() const{
    return m_failure_cause_isSet;
}

bool OAITargetRender::is_failure_cause_Valid() const{
    return m_failure_cause_isValid;
}

QString OAITargetRender::getFailureMessage() const {
    return m_failure_message;
}
void OAITargetRender::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAITargetRender::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAITargetRender::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

OAIRenderMetadata OAITargetRender::getMetadata() const {
    return m_metadata;
}
void OAITargetRender::setMetadata(const OAIRenderMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITargetRender::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITargetRender::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITargetRender::getRenderingBuild() const {
    return m_rendering_build;
}
void OAITargetRender::setRenderingBuild(const QString &rendering_build) {
    m_rendering_build = rendering_build;
    m_rendering_build_isSet = true;
}

bool OAITargetRender::is_rendering_build_Set() const{
    return m_rendering_build_isSet;
}

bool OAITargetRender::is_rendering_build_Valid() const{
    return m_rendering_build_isValid;
}

QString OAITargetRender::getRenderingState() const {
    return m_rendering_state;
}
void OAITargetRender::setRenderingState(const QString &rendering_state) {
    m_rendering_state = rendering_state;
    m_rendering_state_isSet = true;
}

bool OAITargetRender::is_rendering_state_Set() const{
    return m_rendering_state_isSet;
}

bool OAITargetRender::is_rendering_state_Valid() const{
    return m_rendering_state_isValid;
}

bool OAITargetRender::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetRender::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
