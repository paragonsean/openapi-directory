/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationRunEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationRunEvent::OAIAutomationRunEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationRunEvent::OAIAutomationRunEvent() {
    this->initializeModel();
}

OAIAutomationRunEvent::~OAIAutomationRunEvent() {}

void OAIAutomationRunEvent::initializeModel() {

    m_automation_id_isSet = false;
    m_automation_id_isValid = false;

    m_automation_run_isSet = false;
    m_automation_run_isValid = false;

    m_destination_target_id_isSet = false;
    m_destination_target_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_pipeline_uid_isSet = false;
    m_pipeline_uid_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAutomationRunEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationRunEvent::fromJsonObject(QJsonObject json) {

    m_automation_id_isValid = ::OpenAPI::fromJsonValue(m_automation_id, json[QString("automationId")]);
    m_automation_id_isSet = !json[QString("automationId")].isNull() && m_automation_id_isValid;

    m_automation_run_isValid = ::OpenAPI::fromJsonValue(m_automation_run, json[QString("automationRun")]);
    m_automation_run_isSet = !json[QString("automationRun")].isNull() && m_automation_run_isValid;

    m_destination_target_id_isValid = ::OpenAPI::fromJsonValue(m_destination_target_id, json[QString("destinationTargetId")]);
    m_destination_target_id_isSet = !json[QString("destinationTargetId")].isNull() && m_destination_target_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_pipeline_uid_isValid = ::OpenAPI::fromJsonValue(m_pipeline_uid, json[QString("pipelineUid")]);
    m_pipeline_uid_isSet = !json[QString("pipelineUid")].isNull() && m_pipeline_uid_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAutomationRunEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationRunEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_id_isSet) {
        obj.insert(QString("automationId"), ::OpenAPI::toJsonValue(m_automation_id));
    }
    if (m_automation_run_isSet) {
        obj.insert(QString("automationRun"), ::OpenAPI::toJsonValue(m_automation_run));
    }
    if (m_destination_target_id_isSet) {
        obj.insert(QString("destinationTargetId"), ::OpenAPI::toJsonValue(m_destination_target_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_pipeline_uid_isSet) {
        obj.insert(QString("pipelineUid"), ::OpenAPI::toJsonValue(m_pipeline_uid));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAutomationRunEvent::getAutomationId() const {
    return m_automation_id;
}
void OAIAutomationRunEvent::setAutomationId(const QString &automation_id) {
    m_automation_id = automation_id;
    m_automation_id_isSet = true;
}

bool OAIAutomationRunEvent::is_automation_id_Set() const{
    return m_automation_id_isSet;
}

bool OAIAutomationRunEvent::is_automation_id_Valid() const{
    return m_automation_id_isValid;
}

QString OAIAutomationRunEvent::getAutomationRun() const {
    return m_automation_run;
}
void OAIAutomationRunEvent::setAutomationRun(const QString &automation_run) {
    m_automation_run = automation_run;
    m_automation_run_isSet = true;
}

bool OAIAutomationRunEvent::is_automation_run_Set() const{
    return m_automation_run_isSet;
}

bool OAIAutomationRunEvent::is_automation_run_Valid() const{
    return m_automation_run_isValid;
}

QString OAIAutomationRunEvent::getDestinationTargetId() const {
    return m_destination_target_id;
}
void OAIAutomationRunEvent::setDestinationTargetId(const QString &destination_target_id) {
    m_destination_target_id = destination_target_id;
    m_destination_target_id_isSet = true;
}

bool OAIAutomationRunEvent::is_destination_target_id_Set() const{
    return m_destination_target_id_isSet;
}

bool OAIAutomationRunEvent::is_destination_target_id_Valid() const{
    return m_destination_target_id_isValid;
}

QString OAIAutomationRunEvent::getMessage() const {
    return m_message;
}
void OAIAutomationRunEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAutomationRunEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAutomationRunEvent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAutomationRunEvent::getPipelineUid() const {
    return m_pipeline_uid;
}
void OAIAutomationRunEvent::setPipelineUid(const QString &pipeline_uid) {
    m_pipeline_uid = pipeline_uid;
    m_pipeline_uid_isSet = true;
}

bool OAIAutomationRunEvent::is_pipeline_uid_Set() const{
    return m_pipeline_uid_isSet;
}

bool OAIAutomationRunEvent::is_pipeline_uid_Valid() const{
    return m_pipeline_uid_isValid;
}

QString OAIAutomationRunEvent::getRuleId() const {
    return m_rule_id;
}
void OAIAutomationRunEvent::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIAutomationRunEvent::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIAutomationRunEvent::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIAutomationRunEvent::getType() const {
    return m_type;
}
void OAIAutomationRunEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAutomationRunEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAutomationRunEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAutomationRunEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automation_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationRunEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
