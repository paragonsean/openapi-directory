/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionConfig::OAIExecutionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionConfig::OAIExecutionConfig() {
    this->initializeModel();
}

OAIExecutionConfig::~OAIExecutionConfig() {}

void OAIExecutionConfig::initializeModel() {

    m_artifact_storage_isSet = false;
    m_artifact_storage_isValid = false;

    m_default_pool_isSet = false;
    m_default_pool_isValid = false;

    m_execution_timeout_isSet = false;
    m_execution_timeout_isValid = false;

    m_private_pool_isSet = false;
    m_private_pool_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_usages_isSet = false;
    m_usages_isValid = false;

    m_worker_pool_isSet = false;
    m_worker_pool_isValid = false;
}

void OAIExecutionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionConfig::fromJsonObject(QJsonObject json) {

    m_artifact_storage_isValid = ::OpenAPI::fromJsonValue(m_artifact_storage, json[QString("artifactStorage")]);
    m_artifact_storage_isSet = !json[QString("artifactStorage")].isNull() && m_artifact_storage_isValid;

    m_default_pool_isValid = ::OpenAPI::fromJsonValue(m_default_pool, json[QString("defaultPool")]);
    m_default_pool_isSet = !json[QString("defaultPool")].isNull() && m_default_pool_isValid;

    m_execution_timeout_isValid = ::OpenAPI::fromJsonValue(m_execution_timeout, json[QString("executionTimeout")]);
    m_execution_timeout_isSet = !json[QString("executionTimeout")].isNull() && m_execution_timeout_isValid;

    m_private_pool_isValid = ::OpenAPI::fromJsonValue(m_private_pool, json[QString("privatePool")]);
    m_private_pool_isSet = !json[QString("privatePool")].isNull() && m_private_pool_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_usages_isValid = ::OpenAPI::fromJsonValue(m_usages, json[QString("usages")]);
    m_usages_isSet = !json[QString("usages")].isNull() && m_usages_isValid;

    m_worker_pool_isValid = ::OpenAPI::fromJsonValue(m_worker_pool, json[QString("workerPool")]);
    m_worker_pool_isSet = !json[QString("workerPool")].isNull() && m_worker_pool_isValid;
}

QString OAIExecutionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_storage_isSet) {
        obj.insert(QString("artifactStorage"), ::OpenAPI::toJsonValue(m_artifact_storage));
    }
    if (m_default_pool.isSet()) {
        obj.insert(QString("defaultPool"), ::OpenAPI::toJsonValue(m_default_pool));
    }
    if (m_execution_timeout_isSet) {
        obj.insert(QString("executionTimeout"), ::OpenAPI::toJsonValue(m_execution_timeout));
    }
    if (m_private_pool.isSet()) {
        obj.insert(QString("privatePool"), ::OpenAPI::toJsonValue(m_private_pool));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_usages.size() > 0) {
        obj.insert(QString("usages"), ::OpenAPI::toJsonValue(m_usages));
    }
    if (m_worker_pool_isSet) {
        obj.insert(QString("workerPool"), ::OpenAPI::toJsonValue(m_worker_pool));
    }
    return obj;
}

QString OAIExecutionConfig::getArtifactStorage() const {
    return m_artifact_storage;
}
void OAIExecutionConfig::setArtifactStorage(const QString &artifact_storage) {
    m_artifact_storage = artifact_storage;
    m_artifact_storage_isSet = true;
}

bool OAIExecutionConfig::is_artifact_storage_Set() const{
    return m_artifact_storage_isSet;
}

bool OAIExecutionConfig::is_artifact_storage_Valid() const{
    return m_artifact_storage_isValid;
}

OAIDefaultPool OAIExecutionConfig::getDefaultPool() const {
    return m_default_pool;
}
void OAIExecutionConfig::setDefaultPool(const OAIDefaultPool &default_pool) {
    m_default_pool = default_pool;
    m_default_pool_isSet = true;
}

bool OAIExecutionConfig::is_default_pool_Set() const{
    return m_default_pool_isSet;
}

bool OAIExecutionConfig::is_default_pool_Valid() const{
    return m_default_pool_isValid;
}

QString OAIExecutionConfig::getExecutionTimeout() const {
    return m_execution_timeout;
}
void OAIExecutionConfig::setExecutionTimeout(const QString &execution_timeout) {
    m_execution_timeout = execution_timeout;
    m_execution_timeout_isSet = true;
}

bool OAIExecutionConfig::is_execution_timeout_Set() const{
    return m_execution_timeout_isSet;
}

bool OAIExecutionConfig::is_execution_timeout_Valid() const{
    return m_execution_timeout_isValid;
}

OAIPrivatePool OAIExecutionConfig::getPrivatePool() const {
    return m_private_pool;
}
void OAIExecutionConfig::setPrivatePool(const OAIPrivatePool &private_pool) {
    m_private_pool = private_pool;
    m_private_pool_isSet = true;
}

bool OAIExecutionConfig::is_private_pool_Set() const{
    return m_private_pool_isSet;
}

bool OAIExecutionConfig::is_private_pool_Valid() const{
    return m_private_pool_isValid;
}

QString OAIExecutionConfig::getServiceAccount() const {
    return m_service_account;
}
void OAIExecutionConfig::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIExecutionConfig::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIExecutionConfig::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QList<QString> OAIExecutionConfig::getUsages() const {
    return m_usages;
}
void OAIExecutionConfig::setUsages(const QList<QString> &usages) {
    m_usages = usages;
    m_usages_isSet = true;
}

bool OAIExecutionConfig::is_usages_Set() const{
    return m_usages_isSet;
}

bool OAIExecutionConfig::is_usages_Valid() const{
    return m_usages_isValid;
}

QString OAIExecutionConfig::getWorkerPool() const {
    return m_worker_pool;
}
void OAIExecutionConfig::setWorkerPool(const QString &worker_pool) {
    m_worker_pool = worker_pool;
    m_worker_pool_isSet = true;
}

bool OAIExecutionConfig::is_worker_pool_Set() const{
    return m_worker_pool_isSet;
}

bool OAIExecutionConfig::is_worker_pool_Valid() const{
    return m_worker_pool_isValid;
}

bool OAIExecutionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
