/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAutomationRunsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAutomationRunsResponse::OAIListAutomationRunsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAutomationRunsResponse::OAIListAutomationRunsResponse() {
    this->initializeModel();
}

OAIListAutomationRunsResponse::~OAIListAutomationRunsResponse() {}

void OAIListAutomationRunsResponse::initializeModel() {

    m_automation_runs_isSet = false;
    m_automation_runs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIListAutomationRunsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAutomationRunsResponse::fromJsonObject(QJsonObject json) {

    m_automation_runs_isValid = ::OpenAPI::fromJsonValue(m_automation_runs, json[QString("automationRuns")]);
    m_automation_runs_isSet = !json[QString("automationRuns")].isNull() && m_automation_runs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIListAutomationRunsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAutomationRunsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_runs.size() > 0) {
        obj.insert(QString("automationRuns"), ::OpenAPI::toJsonValue(m_automation_runs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<OAIAutomationRun> OAIListAutomationRunsResponse::getAutomationRuns() const {
    return m_automation_runs;
}
void OAIListAutomationRunsResponse::setAutomationRuns(const QList<OAIAutomationRun> &automation_runs) {
    m_automation_runs = automation_runs;
    m_automation_runs_isSet = true;
}

bool OAIListAutomationRunsResponse::is_automation_runs_Set() const{
    return m_automation_runs_isSet;
}

bool OAIListAutomationRunsResponse::is_automation_runs_Valid() const{
    return m_automation_runs_isValid;
}

QString OAIListAutomationRunsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListAutomationRunsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListAutomationRunsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListAutomationRunsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QString> OAIListAutomationRunsResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIListAutomationRunsResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIListAutomationRunsResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIListAutomationRunsResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIListAutomationRunsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAutomationRunsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
