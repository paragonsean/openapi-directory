/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationRun::OAIAutomationRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationRun::OAIAutomationRun() {
    this->initializeModel();
}

OAIAutomationRun::~OAIAutomationRun() {}

void OAIAutomationRun::initializeModel() {

    m_advance_rollout_operation_isSet = false;
    m_advance_rollout_operation_isValid = false;

    m_automation_id_isSet = false;
    m_automation_id_isValid = false;

    m_automation_snapshot_isSet = false;
    m_automation_snapshot_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_promote_release_operation_isSet = false;
    m_promote_release_operation_isValid = false;

    m_repair_rollout_operation_isSet = false;
    m_repair_rollout_operation_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_description_isSet = false;
    m_state_description_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_wait_until_time_isSet = false;
    m_wait_until_time_isValid = false;
}

void OAIAutomationRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationRun::fromJsonObject(QJsonObject json) {

    m_advance_rollout_operation_isValid = ::OpenAPI::fromJsonValue(m_advance_rollout_operation, json[QString("advanceRolloutOperation")]);
    m_advance_rollout_operation_isSet = !json[QString("advanceRolloutOperation")].isNull() && m_advance_rollout_operation_isValid;

    m_automation_id_isValid = ::OpenAPI::fromJsonValue(m_automation_id, json[QString("automationId")]);
    m_automation_id_isSet = !json[QString("automationId")].isNull() && m_automation_id_isValid;

    m_automation_snapshot_isValid = ::OpenAPI::fromJsonValue(m_automation_snapshot, json[QString("automationSnapshot")]);
    m_automation_snapshot_isSet = !json[QString("automationSnapshot")].isNull() && m_automation_snapshot_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_promote_release_operation_isValid = ::OpenAPI::fromJsonValue(m_promote_release_operation, json[QString("promoteReleaseOperation")]);
    m_promote_release_operation_isSet = !json[QString("promoteReleaseOperation")].isNull() && m_promote_release_operation_isValid;

    m_repair_rollout_operation_isValid = ::OpenAPI::fromJsonValue(m_repair_rollout_operation, json[QString("repairRolloutOperation")]);
    m_repair_rollout_operation_isSet = !json[QString("repairRolloutOperation")].isNull() && m_repair_rollout_operation_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_description_isValid = ::OpenAPI::fromJsonValue(m_state_description, json[QString("stateDescription")]);
    m_state_description_isSet = !json[QString("stateDescription")].isNull() && m_state_description_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_wait_until_time_isValid = ::OpenAPI::fromJsonValue(m_wait_until_time, json[QString("waitUntilTime")]);
    m_wait_until_time_isSet = !json[QString("waitUntilTime")].isNull() && m_wait_until_time_isValid;
}

QString OAIAutomationRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationRun::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_rollout_operation.isSet()) {
        obj.insert(QString("advanceRolloutOperation"), ::OpenAPI::toJsonValue(m_advance_rollout_operation));
    }
    if (m_automation_id_isSet) {
        obj.insert(QString("automationId"), ::OpenAPI::toJsonValue(m_automation_id));
    }
    if (m_automation_snapshot.isSet()) {
        obj.insert(QString("automationSnapshot"), ::OpenAPI::toJsonValue(m_automation_snapshot));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_promote_release_operation.isSet()) {
        obj.insert(QString("promoteReleaseOperation"), ::OpenAPI::toJsonValue(m_promote_release_operation));
    }
    if (m_repair_rollout_operation.isSet()) {
        obj.insert(QString("repairRolloutOperation"), ::OpenAPI::toJsonValue(m_repair_rollout_operation));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_description_isSet) {
        obj.insert(QString("stateDescription"), ::OpenAPI::toJsonValue(m_state_description));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_wait_until_time_isSet) {
        obj.insert(QString("waitUntilTime"), ::OpenAPI::toJsonValue(m_wait_until_time));
    }
    return obj;
}

OAIAdvanceRolloutOperation OAIAutomationRun::getAdvanceRolloutOperation() const {
    return m_advance_rollout_operation;
}
void OAIAutomationRun::setAdvanceRolloutOperation(const OAIAdvanceRolloutOperation &advance_rollout_operation) {
    m_advance_rollout_operation = advance_rollout_operation;
    m_advance_rollout_operation_isSet = true;
}

bool OAIAutomationRun::is_advance_rollout_operation_Set() const{
    return m_advance_rollout_operation_isSet;
}

bool OAIAutomationRun::is_advance_rollout_operation_Valid() const{
    return m_advance_rollout_operation_isValid;
}

QString OAIAutomationRun::getAutomationId() const {
    return m_automation_id;
}
void OAIAutomationRun::setAutomationId(const QString &automation_id) {
    m_automation_id = automation_id;
    m_automation_id_isSet = true;
}

bool OAIAutomationRun::is_automation_id_Set() const{
    return m_automation_id_isSet;
}

bool OAIAutomationRun::is_automation_id_Valid() const{
    return m_automation_id_isValid;
}

OAIAutomation OAIAutomationRun::getAutomationSnapshot() const {
    return m_automation_snapshot;
}
void OAIAutomationRun::setAutomationSnapshot(const OAIAutomation &automation_snapshot) {
    m_automation_snapshot = automation_snapshot;
    m_automation_snapshot_isSet = true;
}

bool OAIAutomationRun::is_automation_snapshot_Set() const{
    return m_automation_snapshot_isSet;
}

bool OAIAutomationRun::is_automation_snapshot_Valid() const{
    return m_automation_snapshot_isValid;
}

QString OAIAutomationRun::getCreateTime() const {
    return m_create_time;
}
void OAIAutomationRun::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAutomationRun::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAutomationRun::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAutomationRun::getEtag() const {
    return m_etag;
}
void OAIAutomationRun::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIAutomationRun::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIAutomationRun::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIAutomationRun::getExpireTime() const {
    return m_expire_time;
}
void OAIAutomationRun::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIAutomationRun::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIAutomationRun::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIAutomationRun::getName() const {
    return m_name;
}
void OAIAutomationRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutomationRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutomationRun::is_name_Valid() const{
    return m_name_isValid;
}

OAIPromoteReleaseOperation OAIAutomationRun::getPromoteReleaseOperation() const {
    return m_promote_release_operation;
}
void OAIAutomationRun::setPromoteReleaseOperation(const OAIPromoteReleaseOperation &promote_release_operation) {
    m_promote_release_operation = promote_release_operation;
    m_promote_release_operation_isSet = true;
}

bool OAIAutomationRun::is_promote_release_operation_Set() const{
    return m_promote_release_operation_isSet;
}

bool OAIAutomationRun::is_promote_release_operation_Valid() const{
    return m_promote_release_operation_isValid;
}

OAIRepairRolloutOperation OAIAutomationRun::getRepairRolloutOperation() const {
    return m_repair_rollout_operation;
}
void OAIAutomationRun::setRepairRolloutOperation(const OAIRepairRolloutOperation &repair_rollout_operation) {
    m_repair_rollout_operation = repair_rollout_operation;
    m_repair_rollout_operation_isSet = true;
}

bool OAIAutomationRun::is_repair_rollout_operation_Set() const{
    return m_repair_rollout_operation_isSet;
}

bool OAIAutomationRun::is_repair_rollout_operation_Valid() const{
    return m_repair_rollout_operation_isValid;
}

QString OAIAutomationRun::getRuleId() const {
    return m_rule_id;
}
void OAIAutomationRun::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIAutomationRun::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIAutomationRun::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIAutomationRun::getServiceAccount() const {
    return m_service_account;
}
void OAIAutomationRun::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIAutomationRun::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIAutomationRun::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIAutomationRun::getState() const {
    return m_state;
}
void OAIAutomationRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAutomationRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAutomationRun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAutomationRun::getStateDescription() const {
    return m_state_description;
}
void OAIAutomationRun::setStateDescription(const QString &state_description) {
    m_state_description = state_description;
    m_state_description_isSet = true;
}

bool OAIAutomationRun::is_state_description_Set() const{
    return m_state_description_isSet;
}

bool OAIAutomationRun::is_state_description_Valid() const{
    return m_state_description_isValid;
}

QString OAIAutomationRun::getTargetId() const {
    return m_target_id;
}
void OAIAutomationRun::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIAutomationRun::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIAutomationRun::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIAutomationRun::getUpdateTime() const {
    return m_update_time;
}
void OAIAutomationRun::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAutomationRun::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAutomationRun::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIAutomationRun::getWaitUntilTime() const {
    return m_wait_until_time;
}
void OAIAutomationRun::setWaitUntilTime(const QString &wait_until_time) {
    m_wait_until_time = wait_until_time;
    m_wait_until_time_isSet = true;
}

bool OAIAutomationRun::is_wait_until_time_Set() const{
    return m_wait_until_time_isSet;
}

bool OAIAutomationRun::is_wait_until_time_Valid() const{
    return m_wait_until_time_isValid;
}

bool OAIAutomationRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_rollout_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_automation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automation_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promote_release_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_rollout_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_until_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
