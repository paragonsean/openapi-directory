/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredeployJobRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredeployJobRun::OAIPredeployJobRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredeployJobRun::OAIPredeployJobRun() {
    this->initializeModel();
}

OAIPredeployJobRun::~OAIPredeployJobRun() {}

void OAIPredeployJobRun::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_failure_cause_isSet = false;
    m_failure_cause_isValid = false;

    m_failure_message_isSet = false;
    m_failure_message_isValid = false;
}

void OAIPredeployJobRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredeployJobRun::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_failure_cause_isValid = ::OpenAPI::fromJsonValue(m_failure_cause, json[QString("failureCause")]);
    m_failure_cause_isSet = !json[QString("failureCause")].isNull() && m_failure_cause_isValid;

    m_failure_message_isValid = ::OpenAPI::fromJsonValue(m_failure_message, json[QString("failureMessage")]);
    m_failure_message_isSet = !json[QString("failureMessage")].isNull() && m_failure_message_isValid;
}

QString OAIPredeployJobRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredeployJobRun::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_failure_cause_isSet) {
        obj.insert(QString("failureCause"), ::OpenAPI::toJsonValue(m_failure_cause));
    }
    if (m_failure_message_isSet) {
        obj.insert(QString("failureMessage"), ::OpenAPI::toJsonValue(m_failure_message));
    }
    return obj;
}

QString OAIPredeployJobRun::getBuild() const {
    return m_build;
}
void OAIPredeployJobRun::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIPredeployJobRun::is_build_Set() const{
    return m_build_isSet;
}

bool OAIPredeployJobRun::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIPredeployJobRun::getFailureCause() const {
    return m_failure_cause;
}
void OAIPredeployJobRun::setFailureCause(const QString &failure_cause) {
    m_failure_cause = failure_cause;
    m_failure_cause_isSet = true;
}

bool OAIPredeployJobRun::is_failure_cause_Set() const{
    return m_failure_cause_isSet;
}

bool OAIPredeployJobRun::is_failure_cause_Valid() const{
    return m_failure_cause_isValid;
}

QString OAIPredeployJobRun::getFailureMessage() const {
    return m_failure_message;
}
void OAIPredeployJobRun::setFailureMessage(const QString &failure_message) {
    m_failure_message = failure_message;
    m_failure_message_isSet = true;
}

bool OAIPredeployJobRun::is_failure_message_Set() const{
    return m_failure_message_isSet;
}

bool OAIPredeployJobRun::is_failure_message_Valid() const{
    return m_failure_message_isValid;
}

bool OAIPredeployJobRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredeployJobRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
