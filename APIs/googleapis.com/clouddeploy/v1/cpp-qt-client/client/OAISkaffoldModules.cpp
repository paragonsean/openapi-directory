/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkaffoldModules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkaffoldModules::OAISkaffoldModules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkaffoldModules::OAISkaffoldModules() {
    this->initializeModel();
}

OAISkaffoldModules::~OAISkaffoldModules() {}

void OAISkaffoldModules::initializeModel() {

    m_configs_isSet = false;
    m_configs_isValid = false;

    m_git_isSet = false;
    m_git_isValid = false;

    m_google_cloud_storage_isSet = false;
    m_google_cloud_storage_isValid = false;
}

void OAISkaffoldModules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkaffoldModules::fromJsonObject(QJsonObject json) {

    m_configs_isValid = ::OpenAPI::fromJsonValue(m_configs, json[QString("configs")]);
    m_configs_isSet = !json[QString("configs")].isNull() && m_configs_isValid;

    m_git_isValid = ::OpenAPI::fromJsonValue(m_git, json[QString("git")]);
    m_git_isSet = !json[QString("git")].isNull() && m_git_isValid;

    m_google_cloud_storage_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage, json[QString("googleCloudStorage")]);
    m_google_cloud_storage_isSet = !json[QString("googleCloudStorage")].isNull() && m_google_cloud_storage_isValid;
}

QString OAISkaffoldModules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkaffoldModules::asJsonObject() const {
    QJsonObject obj;
    if (m_configs.size() > 0) {
        obj.insert(QString("configs"), ::OpenAPI::toJsonValue(m_configs));
    }
    if (m_git.isSet()) {
        obj.insert(QString("git"), ::OpenAPI::toJsonValue(m_git));
    }
    if (m_google_cloud_storage.isSet()) {
        obj.insert(QString("googleCloudStorage"), ::OpenAPI::toJsonValue(m_google_cloud_storage));
    }
    return obj;
}

QList<QString> OAISkaffoldModules::getConfigs() const {
    return m_configs;
}
void OAISkaffoldModules::setConfigs(const QList<QString> &configs) {
    m_configs = configs;
    m_configs_isSet = true;
}

bool OAISkaffoldModules::is_configs_Set() const{
    return m_configs_isSet;
}

bool OAISkaffoldModules::is_configs_Valid() const{
    return m_configs_isValid;
}

OAISkaffoldGitSource OAISkaffoldModules::getGit() const {
    return m_git;
}
void OAISkaffoldModules::setGit(const OAISkaffoldGitSource &git) {
    m_git = git;
    m_git_isSet = true;
}

bool OAISkaffoldModules::is_git_Set() const{
    return m_git_isSet;
}

bool OAISkaffoldModules::is_git_Valid() const{
    return m_git_isValid;
}

OAISkaffoldGCSSource OAISkaffoldModules::getGoogleCloudStorage() const {
    return m_google_cloud_storage;
}
void OAISkaffoldModules::setGoogleCloudStorage(const OAISkaffoldGCSSource &google_cloud_storage) {
    m_google_cloud_storage = google_cloud_storage;
    m_google_cloud_storage_isSet = true;
}

bool OAISkaffoldModules::is_google_cloud_storage_Set() const{
    return m_google_cloud_storage_isSet;
}

bool OAISkaffoldModules::is_google_cloud_storage_Valid() const{
    return m_google_cloud_storage_isValid;
}

bool OAISkaffoldModules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_git.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cloud_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkaffoldModules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
