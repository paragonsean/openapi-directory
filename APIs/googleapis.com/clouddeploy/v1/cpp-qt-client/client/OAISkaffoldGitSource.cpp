/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkaffoldGitSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkaffoldGitSource::OAISkaffoldGitSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkaffoldGitSource::OAISkaffoldGitSource() {
    this->initializeModel();
}

OAISkaffoldGitSource::~OAISkaffoldGitSource() {}

void OAISkaffoldGitSource::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;
}

void OAISkaffoldGitSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkaffoldGitSource::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;
}

QString OAISkaffoldGitSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkaffoldGitSource::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    return obj;
}

QString OAISkaffoldGitSource::getPath() const {
    return m_path;
}
void OAISkaffoldGitSource::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISkaffoldGitSource::is_path_Set() const{
    return m_path_isSet;
}

bool OAISkaffoldGitSource::is_path_Valid() const{
    return m_path_isValid;
}

QString OAISkaffoldGitSource::getRef() const {
    return m_ref;
}
void OAISkaffoldGitSource::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAISkaffoldGitSource::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAISkaffoldGitSource::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAISkaffoldGitSource::getRepo() const {
    return m_repo;
}
void OAISkaffoldGitSource::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAISkaffoldGitSource::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAISkaffoldGitSource::is_repo_Valid() const{
    return m_repo_isValid;
}

bool OAISkaffoldGitSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkaffoldGitSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
