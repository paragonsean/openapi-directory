/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairRolloutOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairRolloutOperation::OAIRepairRolloutOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairRolloutOperation::OAIRepairRolloutOperation() {
    this->initializeModel();
}

OAIRepairRolloutOperation::~OAIRepairRolloutOperation() {}

void OAIRepairRolloutOperation::initializeModel() {

    m_current_repair_mode_index_isSet = false;
    m_current_repair_mode_index_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_phase_id_isSet = false;
    m_phase_id_isValid = false;

    m_repair_phases_isSet = false;
    m_repair_phases_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;
}

void OAIRepairRolloutOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairRolloutOperation::fromJsonObject(QJsonObject json) {

    m_current_repair_mode_index_isValid = ::OpenAPI::fromJsonValue(m_current_repair_mode_index, json[QString("currentRepairModeIndex")]);
    m_current_repair_mode_index_isSet = !json[QString("currentRepairModeIndex")].isNull() && m_current_repair_mode_index_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_phase_id_isValid = ::OpenAPI::fromJsonValue(m_phase_id, json[QString("phaseId")]);
    m_phase_id_isSet = !json[QString("phaseId")].isNull() && m_phase_id_isValid;

    m_repair_phases_isValid = ::OpenAPI::fromJsonValue(m_repair_phases, json[QString("repairPhases")]);
    m_repair_phases_isSet = !json[QString("repairPhases")].isNull() && m_repair_phases_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;
}

QString OAIRepairRolloutOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairRolloutOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_current_repair_mode_index_isSet) {
        obj.insert(QString("currentRepairModeIndex"), ::OpenAPI::toJsonValue(m_current_repair_mode_index));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_phase_id_isSet) {
        obj.insert(QString("phaseId"), ::OpenAPI::toJsonValue(m_phase_id));
    }
    if (m_repair_phases.size() > 0) {
        obj.insert(QString("repairPhases"), ::OpenAPI::toJsonValue(m_repair_phases));
    }
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    return obj;
}

QString OAIRepairRolloutOperation::getCurrentRepairModeIndex() const {
    return m_current_repair_mode_index;
}
void OAIRepairRolloutOperation::setCurrentRepairModeIndex(const QString &current_repair_mode_index) {
    m_current_repair_mode_index = current_repair_mode_index;
    m_current_repair_mode_index_isSet = true;
}

bool OAIRepairRolloutOperation::is_current_repair_mode_index_Set() const{
    return m_current_repair_mode_index_isSet;
}

bool OAIRepairRolloutOperation::is_current_repair_mode_index_Valid() const{
    return m_current_repair_mode_index_isValid;
}

QString OAIRepairRolloutOperation::getJobId() const {
    return m_job_id;
}
void OAIRepairRolloutOperation::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIRepairRolloutOperation::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIRepairRolloutOperation::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIRepairRolloutOperation::getPhaseId() const {
    return m_phase_id;
}
void OAIRepairRolloutOperation::setPhaseId(const QString &phase_id) {
    m_phase_id = phase_id;
    m_phase_id_isSet = true;
}

bool OAIRepairRolloutOperation::is_phase_id_Set() const{
    return m_phase_id_isSet;
}

bool OAIRepairRolloutOperation::is_phase_id_Valid() const{
    return m_phase_id_isValid;
}

QList<OAIRepairPhase> OAIRepairRolloutOperation::getRepairPhases() const {
    return m_repair_phases;
}
void OAIRepairRolloutOperation::setRepairPhases(const QList<OAIRepairPhase> &repair_phases) {
    m_repair_phases = repair_phases;
    m_repair_phases_isSet = true;
}

bool OAIRepairRolloutOperation::is_repair_phases_Set() const{
    return m_repair_phases_isSet;
}

bool OAIRepairRolloutOperation::is_repair_phases_Valid() const{
    return m_repair_phases_isValid;
}

QString OAIRepairRolloutOperation::getRollout() const {
    return m_rollout;
}
void OAIRepairRolloutOperation::setRollout(const QString &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAIRepairRolloutOperation::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAIRepairRolloutOperation::is_rollout_Valid() const{
    return m_rollout_isValid;
}

bool OAIRepairRolloutOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_repair_mode_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_phases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairRolloutOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
