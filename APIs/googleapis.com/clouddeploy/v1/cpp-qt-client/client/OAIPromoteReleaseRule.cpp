/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoteReleaseRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoteReleaseRule::OAIPromoteReleaseRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoteReleaseRule::OAIPromoteReleaseRule() {
    this->initializeModel();
}

OAIPromoteReleaseRule::~OAIPromoteReleaseRule() {}

void OAIPromoteReleaseRule::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_destination_phase_isSet = false;
    m_destination_phase_isValid = false;

    m_destination_target_id_isSet = false;
    m_destination_target_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_wait_isSet = false;
    m_wait_isValid = false;
}

void OAIPromoteReleaseRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromoteReleaseRule::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_destination_phase_isValid = ::OpenAPI::fromJsonValue(m_destination_phase, json[QString("destinationPhase")]);
    m_destination_phase_isSet = !json[QString("destinationPhase")].isNull() && m_destination_phase_isValid;

    m_destination_target_id_isValid = ::OpenAPI::fromJsonValue(m_destination_target_id, json[QString("destinationTargetId")]);
    m_destination_target_id_isSet = !json[QString("destinationTargetId")].isNull() && m_destination_target_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_wait_isValid = ::OpenAPI::fromJsonValue(m_wait, json[QString("wait")]);
    m_wait_isSet = !json[QString("wait")].isNull() && m_wait_isValid;
}

QString OAIPromoteReleaseRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromoteReleaseRule::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_destination_phase_isSet) {
        obj.insert(QString("destinationPhase"), ::OpenAPI::toJsonValue(m_destination_phase));
    }
    if (m_destination_target_id_isSet) {
        obj.insert(QString("destinationTargetId"), ::OpenAPI::toJsonValue(m_destination_target_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_wait_isSet) {
        obj.insert(QString("wait"), ::OpenAPI::toJsonValue(m_wait));
    }
    return obj;
}

OAIAutomationRuleCondition OAIPromoteReleaseRule::getCondition() const {
    return m_condition;
}
void OAIPromoteReleaseRule::setCondition(const OAIAutomationRuleCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPromoteReleaseRule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPromoteReleaseRule::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIPromoteReleaseRule::getDestinationPhase() const {
    return m_destination_phase;
}
void OAIPromoteReleaseRule::setDestinationPhase(const QString &destination_phase) {
    m_destination_phase = destination_phase;
    m_destination_phase_isSet = true;
}

bool OAIPromoteReleaseRule::is_destination_phase_Set() const{
    return m_destination_phase_isSet;
}

bool OAIPromoteReleaseRule::is_destination_phase_Valid() const{
    return m_destination_phase_isValid;
}

QString OAIPromoteReleaseRule::getDestinationTargetId() const {
    return m_destination_target_id;
}
void OAIPromoteReleaseRule::setDestinationTargetId(const QString &destination_target_id) {
    m_destination_target_id = destination_target_id;
    m_destination_target_id_isSet = true;
}

bool OAIPromoteReleaseRule::is_destination_target_id_Set() const{
    return m_destination_target_id_isSet;
}

bool OAIPromoteReleaseRule::is_destination_target_id_Valid() const{
    return m_destination_target_id_isValid;
}

QString OAIPromoteReleaseRule::getId() const {
    return m_id;
}
void OAIPromoteReleaseRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPromoteReleaseRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPromoteReleaseRule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPromoteReleaseRule::getWait() const {
    return m_wait;
}
void OAIPromoteReleaseRule::setWait(const QString &wait) {
    m_wait = wait;
    m_wait_isSet = true;
}

bool OAIPromoteReleaseRule::is_wait_Set() const{
    return m_wait_isSet;
}

bool OAIPromoteReleaseRule::is_wait_Valid() const{
    return m_wait_isValid;
}

bool OAIPromoteReleaseRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromoteReleaseRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
