/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairRolloutRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairRolloutRule::OAIRepairRolloutRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairRolloutRule::OAIRepairRolloutRule() {
    this->initializeModel();
}

OAIRepairRolloutRule::~OAIRepairRolloutRule() {}

void OAIRepairRolloutRule::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_repair_modes_isSet = false;
    m_repair_modes_isValid = false;

    m_source_phases_isSet = false;
    m_source_phases_isValid = false;
}

void OAIRepairRolloutRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairRolloutRule::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_repair_modes_isValid = ::OpenAPI::fromJsonValue(m_repair_modes, json[QString("repairModes")]);
    m_repair_modes_isSet = !json[QString("repairModes")].isNull() && m_repair_modes_isValid;

    m_source_phases_isValid = ::OpenAPI::fromJsonValue(m_source_phases, json[QString("sourcePhases")]);
    m_source_phases_isSet = !json[QString("sourcePhases")].isNull() && m_source_phases_isValid;
}

QString OAIRepairRolloutRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairRolloutRule::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_repair_modes.size() > 0) {
        obj.insert(QString("repairModes"), ::OpenAPI::toJsonValue(m_repair_modes));
    }
    if (m_source_phases.size() > 0) {
        obj.insert(QString("sourcePhases"), ::OpenAPI::toJsonValue(m_source_phases));
    }
    return obj;
}

OAIAutomationRuleCondition OAIRepairRolloutRule::getCondition() const {
    return m_condition;
}
void OAIRepairRolloutRule::setCondition(const OAIAutomationRuleCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIRepairRolloutRule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIRepairRolloutRule::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIRepairRolloutRule::getId() const {
    return m_id;
}
void OAIRepairRolloutRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepairRolloutRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepairRolloutRule::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIRepairRolloutRule::getJobs() const {
    return m_jobs;
}
void OAIRepairRolloutRule::setJobs(const QList<QString> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIRepairRolloutRule::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIRepairRolloutRule::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QList<OAIRepairMode> OAIRepairRolloutRule::getRepairModes() const {
    return m_repair_modes;
}
void OAIRepairRolloutRule::setRepairModes(const QList<OAIRepairMode> &repair_modes) {
    m_repair_modes = repair_modes;
    m_repair_modes_isSet = true;
}

bool OAIRepairRolloutRule::is_repair_modes_Set() const{
    return m_repair_modes_isSet;
}

bool OAIRepairRolloutRule::is_repair_modes_Valid() const{
    return m_repair_modes_isValid;
}

QList<QString> OAIRepairRolloutRule::getSourcePhases() const {
    return m_source_phases;
}
void OAIRepairRolloutRule::setSourcePhases(const QList<QString> &source_phases) {
    m_source_phases = source_phases;
    m_source_phases_isSet = true;
}

bool OAIRepairRolloutRule::is_source_phases_Set() const{
    return m_source_phases_isSet;
}

bool OAIRepairRolloutRule::is_source_phases_Valid() const{
    return m_source_phases_isValid;
}

bool OAIRepairRolloutRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_phases.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairRolloutRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
