/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollbackAttempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollbackAttempt::OAIRollbackAttempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollbackAttempt::OAIRollbackAttempt() {
    this->initializeModel();
}

OAIRollbackAttempt::~OAIRollbackAttempt() {}

void OAIRollbackAttempt::initializeModel() {

    m_destination_phase_isSet = false;
    m_destination_phase_isValid = false;

    m_rollout_id_isSet = false;
    m_rollout_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_desc_isSet = false;
    m_state_desc_isValid = false;
}

void OAIRollbackAttempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollbackAttempt::fromJsonObject(QJsonObject json) {

    m_destination_phase_isValid = ::OpenAPI::fromJsonValue(m_destination_phase, json[QString("destinationPhase")]);
    m_destination_phase_isSet = !json[QString("destinationPhase")].isNull() && m_destination_phase_isValid;

    m_rollout_id_isValid = ::OpenAPI::fromJsonValue(m_rollout_id, json[QString("rolloutId")]);
    m_rollout_id_isSet = !json[QString("rolloutId")].isNull() && m_rollout_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_desc_isValid = ::OpenAPI::fromJsonValue(m_state_desc, json[QString("stateDesc")]);
    m_state_desc_isSet = !json[QString("stateDesc")].isNull() && m_state_desc_isValid;
}

QString OAIRollbackAttempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollbackAttempt::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_phase_isSet) {
        obj.insert(QString("destinationPhase"), ::OpenAPI::toJsonValue(m_destination_phase));
    }
    if (m_rollout_id_isSet) {
        obj.insert(QString("rolloutId"), ::OpenAPI::toJsonValue(m_rollout_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_desc_isSet) {
        obj.insert(QString("stateDesc"), ::OpenAPI::toJsonValue(m_state_desc));
    }
    return obj;
}

QString OAIRollbackAttempt::getDestinationPhase() const {
    return m_destination_phase;
}
void OAIRollbackAttempt::setDestinationPhase(const QString &destination_phase) {
    m_destination_phase = destination_phase;
    m_destination_phase_isSet = true;
}

bool OAIRollbackAttempt::is_destination_phase_Set() const{
    return m_destination_phase_isSet;
}

bool OAIRollbackAttempt::is_destination_phase_Valid() const{
    return m_destination_phase_isValid;
}

QString OAIRollbackAttempt::getRolloutId() const {
    return m_rollout_id;
}
void OAIRollbackAttempt::setRolloutId(const QString &rollout_id) {
    m_rollout_id = rollout_id;
    m_rollout_id_isSet = true;
}

bool OAIRollbackAttempt::is_rollout_id_Set() const{
    return m_rollout_id_isSet;
}

bool OAIRollbackAttempt::is_rollout_id_Valid() const{
    return m_rollout_id_isValid;
}

QString OAIRollbackAttempt::getState() const {
    return m_state;
}
void OAIRollbackAttempt::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRollbackAttempt::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRollbackAttempt::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRollbackAttempt::getStateDesc() const {
    return m_state_desc;
}
void OAIRollbackAttempt::setStateDesc(const QString &state_desc) {
    m_state_desc = state_desc;
    m_state_desc_isSet = true;
}

bool OAIRollbackAttempt::is_state_desc_Set() const{
    return m_state_desc_isSet;
}

bool OAIRollbackAttempt::is_state_desc_Valid() const{
    return m_state_desc_isValid;
}

bool OAIRollbackAttempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_desc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollbackAttempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
