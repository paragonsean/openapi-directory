/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryPhase::OAIRetryPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryPhase::OAIRetryPhase() {
    this->initializeModel();
}

OAIRetryPhase::~OAIRetryPhase() {}

void OAIRetryPhase::initializeModel() {

    m_attempts_isSet = false;
    m_attempts_isValid = false;

    m_backoff_mode_isSet = false;
    m_backoff_mode_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_phase_id_isSet = false;
    m_phase_id_isValid = false;

    m_total_attempts_isSet = false;
    m_total_attempts_isValid = false;
}

void OAIRetryPhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryPhase::fromJsonObject(QJsonObject json) {

    m_attempts_isValid = ::OpenAPI::fromJsonValue(m_attempts, json[QString("attempts")]);
    m_attempts_isSet = !json[QString("attempts")].isNull() && m_attempts_isValid;

    m_backoff_mode_isValid = ::OpenAPI::fromJsonValue(m_backoff_mode, json[QString("backoffMode")]);
    m_backoff_mode_isSet = !json[QString("backoffMode")].isNull() && m_backoff_mode_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_phase_id_isValid = ::OpenAPI::fromJsonValue(m_phase_id, json[QString("phaseId")]);
    m_phase_id_isSet = !json[QString("phaseId")].isNull() && m_phase_id_isValid;

    m_total_attempts_isValid = ::OpenAPI::fromJsonValue(m_total_attempts, json[QString("totalAttempts")]);
    m_total_attempts_isSet = !json[QString("totalAttempts")].isNull() && m_total_attempts_isValid;
}

QString OAIRetryPhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryPhase::asJsonObject() const {
    QJsonObject obj;
    if (m_attempts.size() > 0) {
        obj.insert(QString("attempts"), ::OpenAPI::toJsonValue(m_attempts));
    }
    if (m_backoff_mode_isSet) {
        obj.insert(QString("backoffMode"), ::OpenAPI::toJsonValue(m_backoff_mode));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_phase_id_isSet) {
        obj.insert(QString("phaseId"), ::OpenAPI::toJsonValue(m_phase_id));
    }
    if (m_total_attempts_isSet) {
        obj.insert(QString("totalAttempts"), ::OpenAPI::toJsonValue(m_total_attempts));
    }
    return obj;
}

QList<OAIRetryAttempt> OAIRetryPhase::getAttempts() const {
    return m_attempts;
}
void OAIRetryPhase::setAttempts(const QList<OAIRetryAttempt> &attempts) {
    m_attempts = attempts;
    m_attempts_isSet = true;
}

bool OAIRetryPhase::is_attempts_Set() const{
    return m_attempts_isSet;
}

bool OAIRetryPhase::is_attempts_Valid() const{
    return m_attempts_isValid;
}

QString OAIRetryPhase::getBackoffMode() const {
    return m_backoff_mode;
}
void OAIRetryPhase::setBackoffMode(const QString &backoff_mode) {
    m_backoff_mode = backoff_mode;
    m_backoff_mode_isSet = true;
}

bool OAIRetryPhase::is_backoff_mode_Set() const{
    return m_backoff_mode_isSet;
}

bool OAIRetryPhase::is_backoff_mode_Valid() const{
    return m_backoff_mode_isValid;
}

QString OAIRetryPhase::getJobId() const {
    return m_job_id;
}
void OAIRetryPhase::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIRetryPhase::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIRetryPhase::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIRetryPhase::getPhaseId() const {
    return m_phase_id;
}
void OAIRetryPhase::setPhaseId(const QString &phase_id) {
    m_phase_id = phase_id;
    m_phase_id_isSet = true;
}

bool OAIRetryPhase::is_phase_id_Set() const{
    return m_phase_id_isSet;
}

bool OAIRetryPhase::is_phase_id_Valid() const{
    return m_phase_id_isValid;
}

QString OAIRetryPhase::getTotalAttempts() const {
    return m_total_attempts;
}
void OAIRetryPhase::setTotalAttempts(const QString &total_attempts) {
    m_total_attempts = total_attempts;
    m_total_attempts_isSet = true;
}

bool OAIRetryPhase::is_total_attempts_Set() const{
    return m_total_attempts_isSet;
}

bool OAIRetryPhase::is_total_attempts_Valid() const{
    return m_total_attempts_isValid;
}

bool OAIRetryPhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backoff_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
