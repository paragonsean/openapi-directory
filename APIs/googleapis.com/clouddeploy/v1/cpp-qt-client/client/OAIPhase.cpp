/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhase::OAIPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhase::OAIPhase() {
    this->initializeModel();
}

OAIPhase::~OAIPhase() {}

void OAIPhase::initializeModel() {

    m_child_rollout_jobs_isSet = false;
    m_child_rollout_jobs_isValid = false;

    m_deployment_jobs_isSet = false;
    m_deployment_jobs_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_skip_message_isSet = false;
    m_skip_message_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhase::fromJsonObject(QJsonObject json) {

    m_child_rollout_jobs_isValid = ::OpenAPI::fromJsonValue(m_child_rollout_jobs, json[QString("childRolloutJobs")]);
    m_child_rollout_jobs_isSet = !json[QString("childRolloutJobs")].isNull() && m_child_rollout_jobs_isValid;

    m_deployment_jobs_isValid = ::OpenAPI::fromJsonValue(m_deployment_jobs, json[QString("deploymentJobs")]);
    m_deployment_jobs_isSet = !json[QString("deploymentJobs")].isNull() && m_deployment_jobs_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_skip_message_isValid = ::OpenAPI::fromJsonValue(m_skip_message, json[QString("skipMessage")]);
    m_skip_message_isSet = !json[QString("skipMessage")].isNull() && m_skip_message_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhase::asJsonObject() const {
    QJsonObject obj;
    if (m_child_rollout_jobs.isSet()) {
        obj.insert(QString("childRolloutJobs"), ::OpenAPI::toJsonValue(m_child_rollout_jobs));
    }
    if (m_deployment_jobs.isSet()) {
        obj.insert(QString("deploymentJobs"), ::OpenAPI::toJsonValue(m_deployment_jobs));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_skip_message_isSet) {
        obj.insert(QString("skipMessage"), ::OpenAPI::toJsonValue(m_skip_message));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIChildRolloutJobs OAIPhase::getChildRolloutJobs() const {
    return m_child_rollout_jobs;
}
void OAIPhase::setChildRolloutJobs(const OAIChildRolloutJobs &child_rollout_jobs) {
    m_child_rollout_jobs = child_rollout_jobs;
    m_child_rollout_jobs_isSet = true;
}

bool OAIPhase::is_child_rollout_jobs_Set() const{
    return m_child_rollout_jobs_isSet;
}

bool OAIPhase::is_child_rollout_jobs_Valid() const{
    return m_child_rollout_jobs_isValid;
}

OAIDeploymentJobs OAIPhase::getDeploymentJobs() const {
    return m_deployment_jobs;
}
void OAIPhase::setDeploymentJobs(const OAIDeploymentJobs &deployment_jobs) {
    m_deployment_jobs = deployment_jobs;
    m_deployment_jobs_isSet = true;
}

bool OAIPhase::is_deployment_jobs_Set() const{
    return m_deployment_jobs_isSet;
}

bool OAIPhase::is_deployment_jobs_Valid() const{
    return m_deployment_jobs_isValid;
}

QString OAIPhase::getId() const {
    return m_id;
}
void OAIPhase::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPhase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPhase::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPhase::getSkipMessage() const {
    return m_skip_message;
}
void OAIPhase::setSkipMessage(const QString &skip_message) {
    m_skip_message = skip_message;
    m_skip_message_isSet = true;
}

bool OAIPhase::is_skip_message_Set() const{
    return m_skip_message_isSet;
}

bool OAIPhase::is_skip_message_Valid() const{
    return m_skip_message_isValid;
}

QString OAIPhase::getState() const {
    return m_state;
}
void OAIPhase::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPhase::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPhase::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_rollout_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
