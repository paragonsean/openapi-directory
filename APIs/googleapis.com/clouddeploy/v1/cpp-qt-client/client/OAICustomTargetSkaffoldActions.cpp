/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomTargetSkaffoldActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomTargetSkaffoldActions::OAICustomTargetSkaffoldActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomTargetSkaffoldActions::OAICustomTargetSkaffoldActions() {
    this->initializeModel();
}

OAICustomTargetSkaffoldActions::~OAICustomTargetSkaffoldActions() {}

void OAICustomTargetSkaffoldActions::initializeModel() {

    m_deploy_action_isSet = false;
    m_deploy_action_isValid = false;

    m_include_skaffold_modules_isSet = false;
    m_include_skaffold_modules_isValid = false;

    m_render_action_isSet = false;
    m_render_action_isValid = false;
}

void OAICustomTargetSkaffoldActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomTargetSkaffoldActions::fromJsonObject(QJsonObject json) {

    m_deploy_action_isValid = ::OpenAPI::fromJsonValue(m_deploy_action, json[QString("deployAction")]);
    m_deploy_action_isSet = !json[QString("deployAction")].isNull() && m_deploy_action_isValid;

    m_include_skaffold_modules_isValid = ::OpenAPI::fromJsonValue(m_include_skaffold_modules, json[QString("includeSkaffoldModules")]);
    m_include_skaffold_modules_isSet = !json[QString("includeSkaffoldModules")].isNull() && m_include_skaffold_modules_isValid;

    m_render_action_isValid = ::OpenAPI::fromJsonValue(m_render_action, json[QString("renderAction")]);
    m_render_action_isSet = !json[QString("renderAction")].isNull() && m_render_action_isValid;
}

QString OAICustomTargetSkaffoldActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomTargetSkaffoldActions::asJsonObject() const {
    QJsonObject obj;
    if (m_deploy_action_isSet) {
        obj.insert(QString("deployAction"), ::OpenAPI::toJsonValue(m_deploy_action));
    }
    if (m_include_skaffold_modules.size() > 0) {
        obj.insert(QString("includeSkaffoldModules"), ::OpenAPI::toJsonValue(m_include_skaffold_modules));
    }
    if (m_render_action_isSet) {
        obj.insert(QString("renderAction"), ::OpenAPI::toJsonValue(m_render_action));
    }
    return obj;
}

QString OAICustomTargetSkaffoldActions::getDeployAction() const {
    return m_deploy_action;
}
void OAICustomTargetSkaffoldActions::setDeployAction(const QString &deploy_action) {
    m_deploy_action = deploy_action;
    m_deploy_action_isSet = true;
}

bool OAICustomTargetSkaffoldActions::is_deploy_action_Set() const{
    return m_deploy_action_isSet;
}

bool OAICustomTargetSkaffoldActions::is_deploy_action_Valid() const{
    return m_deploy_action_isValid;
}

QList<OAISkaffoldModules> OAICustomTargetSkaffoldActions::getIncludeSkaffoldModules() const {
    return m_include_skaffold_modules;
}
void OAICustomTargetSkaffoldActions::setIncludeSkaffoldModules(const QList<OAISkaffoldModules> &include_skaffold_modules) {
    m_include_skaffold_modules = include_skaffold_modules;
    m_include_skaffold_modules_isSet = true;
}

bool OAICustomTargetSkaffoldActions::is_include_skaffold_modules_Set() const{
    return m_include_skaffold_modules_isSet;
}

bool OAICustomTargetSkaffoldActions::is_include_skaffold_modules_Valid() const{
    return m_include_skaffold_modules_isValid;
}

QString OAICustomTargetSkaffoldActions::getRenderAction() const {
    return m_render_action;
}
void OAICustomTargetSkaffoldActions::setRenderAction(const QString &render_action) {
    m_render_action = render_action;
    m_render_action_isSet = true;
}

bool OAICustomTargetSkaffoldActions::is_render_action_Set() const{
    return m_render_action_isSet;
}

bool OAICustomTargetSkaffoldActions::is_render_action_Valid() const{
    return m_render_action_isValid;
}

bool OAICustomTargetSkaffoldActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deploy_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_skaffold_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomTargetSkaffoldActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
