/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkaffoldSupportedCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkaffoldSupportedCondition::OAISkaffoldSupportedCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkaffoldSupportedCondition::OAISkaffoldSupportedCondition() {
    this->initializeModel();
}

OAISkaffoldSupportedCondition::~OAISkaffoldSupportedCondition() {}

void OAISkaffoldSupportedCondition::initializeModel() {

    m_maintenance_mode_time_isSet = false;
    m_maintenance_mode_time_isValid = false;

    m_skaffold_support_state_isSet = false;
    m_skaffold_support_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_support_expiration_time_isSet = false;
    m_support_expiration_time_isValid = false;
}

void OAISkaffoldSupportedCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkaffoldSupportedCondition::fromJsonObject(QJsonObject json) {

    m_maintenance_mode_time_isValid = ::OpenAPI::fromJsonValue(m_maintenance_mode_time, json[QString("maintenanceModeTime")]);
    m_maintenance_mode_time_isSet = !json[QString("maintenanceModeTime")].isNull() && m_maintenance_mode_time_isValid;

    m_skaffold_support_state_isValid = ::OpenAPI::fromJsonValue(m_skaffold_support_state, json[QString("skaffoldSupportState")]);
    m_skaffold_support_state_isSet = !json[QString("skaffoldSupportState")].isNull() && m_skaffold_support_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_support_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_support_expiration_time, json[QString("supportExpirationTime")]);
    m_support_expiration_time_isSet = !json[QString("supportExpirationTime")].isNull() && m_support_expiration_time_isValid;
}

QString OAISkaffoldSupportedCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkaffoldSupportedCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_maintenance_mode_time_isSet) {
        obj.insert(QString("maintenanceModeTime"), ::OpenAPI::toJsonValue(m_maintenance_mode_time));
    }
    if (m_skaffold_support_state_isSet) {
        obj.insert(QString("skaffoldSupportState"), ::OpenAPI::toJsonValue(m_skaffold_support_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_support_expiration_time_isSet) {
        obj.insert(QString("supportExpirationTime"), ::OpenAPI::toJsonValue(m_support_expiration_time));
    }
    return obj;
}

QString OAISkaffoldSupportedCondition::getMaintenanceModeTime() const {
    return m_maintenance_mode_time;
}
void OAISkaffoldSupportedCondition::setMaintenanceModeTime(const QString &maintenance_mode_time) {
    m_maintenance_mode_time = maintenance_mode_time;
    m_maintenance_mode_time_isSet = true;
}

bool OAISkaffoldSupportedCondition::is_maintenance_mode_time_Set() const{
    return m_maintenance_mode_time_isSet;
}

bool OAISkaffoldSupportedCondition::is_maintenance_mode_time_Valid() const{
    return m_maintenance_mode_time_isValid;
}

QString OAISkaffoldSupportedCondition::getSkaffoldSupportState() const {
    return m_skaffold_support_state;
}
void OAISkaffoldSupportedCondition::setSkaffoldSupportState(const QString &skaffold_support_state) {
    m_skaffold_support_state = skaffold_support_state;
    m_skaffold_support_state_isSet = true;
}

bool OAISkaffoldSupportedCondition::is_skaffold_support_state_Set() const{
    return m_skaffold_support_state_isSet;
}

bool OAISkaffoldSupportedCondition::is_skaffold_support_state_Valid() const{
    return m_skaffold_support_state_isValid;
}

bool OAISkaffoldSupportedCondition::isStatus() const {
    return m_status;
}
void OAISkaffoldSupportedCondition::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISkaffoldSupportedCondition::is_status_Set() const{
    return m_status_isSet;
}

bool OAISkaffoldSupportedCondition::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISkaffoldSupportedCondition::getSupportExpirationTime() const {
    return m_support_expiration_time;
}
void OAISkaffoldSupportedCondition::setSupportExpirationTime(const QString &support_expiration_time) {
    m_support_expiration_time = support_expiration_time;
    m_support_expiration_time_isSet = true;
}

bool OAISkaffoldSupportedCondition::is_support_expiration_time_Set() const{
    return m_support_expiration_time_isSet;
}

bool OAISkaffoldSupportedCondition::is_support_expiration_time_Valid() const{
    return m_support_expiration_time_isValid;
}

bool OAISkaffoldSupportedCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maintenance_mode_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skaffold_support_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkaffoldSupportedCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
