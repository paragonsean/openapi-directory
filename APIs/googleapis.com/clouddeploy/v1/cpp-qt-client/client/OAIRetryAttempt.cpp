/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryAttempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryAttempt::OAIRetryAttempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryAttempt::OAIRetryAttempt() {
    this->initializeModel();
}

OAIRetryAttempt::~OAIRetryAttempt() {}

void OAIRetryAttempt::initializeModel() {

    m_attempt_isSet = false;
    m_attempt_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_desc_isSet = false;
    m_state_desc_isValid = false;

    m_wait_isSet = false;
    m_wait_isValid = false;
}

void OAIRetryAttempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryAttempt::fromJsonObject(QJsonObject json) {

    m_attempt_isValid = ::OpenAPI::fromJsonValue(m_attempt, json[QString("attempt")]);
    m_attempt_isSet = !json[QString("attempt")].isNull() && m_attempt_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_desc_isValid = ::OpenAPI::fromJsonValue(m_state_desc, json[QString("stateDesc")]);
    m_state_desc_isSet = !json[QString("stateDesc")].isNull() && m_state_desc_isValid;

    m_wait_isValid = ::OpenAPI::fromJsonValue(m_wait, json[QString("wait")]);
    m_wait_isSet = !json[QString("wait")].isNull() && m_wait_isValid;
}

QString OAIRetryAttempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryAttempt::asJsonObject() const {
    QJsonObject obj;
    if (m_attempt_isSet) {
        obj.insert(QString("attempt"), ::OpenAPI::toJsonValue(m_attempt));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_desc_isSet) {
        obj.insert(QString("stateDesc"), ::OpenAPI::toJsonValue(m_state_desc));
    }
    if (m_wait_isSet) {
        obj.insert(QString("wait"), ::OpenAPI::toJsonValue(m_wait));
    }
    return obj;
}

QString OAIRetryAttempt::getAttempt() const {
    return m_attempt;
}
void OAIRetryAttempt::setAttempt(const QString &attempt) {
    m_attempt = attempt;
    m_attempt_isSet = true;
}

bool OAIRetryAttempt::is_attempt_Set() const{
    return m_attempt_isSet;
}

bool OAIRetryAttempt::is_attempt_Valid() const{
    return m_attempt_isValid;
}

QString OAIRetryAttempt::getState() const {
    return m_state;
}
void OAIRetryAttempt::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRetryAttempt::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRetryAttempt::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRetryAttempt::getStateDesc() const {
    return m_state_desc;
}
void OAIRetryAttempt::setStateDesc(const QString &state_desc) {
    m_state_desc = state_desc;
    m_state_desc_isSet = true;
}

bool OAIRetryAttempt::is_state_desc_Set() const{
    return m_state_desc_isSet;
}

bool OAIRetryAttempt::is_state_desc_Valid() const{
    return m_state_desc_isValid;
}

QString OAIRetryAttempt::getWait() const {
    return m_wait;
}
void OAIRetryAttempt::setWait(const QString &wait) {
    m_wait = wait;
    m_wait_isSet = true;
}

bool OAIRetryAttempt::is_wait_Set() const{
    return m_wait_isSet;
}

bool OAIRetryAttempt::is_wait_Valid() const{
    return m_wait_isValid;
}

bool OAIRetryAttempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryAttempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
