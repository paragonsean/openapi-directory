/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget::OAITarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget::OAITarget() {
    this->initializeModel();
}

OAITarget::~OAITarget() {}

void OAITarget::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_anthos_cluster_isSet = false;
    m_anthos_cluster_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_target_isSet = false;
    m_custom_target_isValid = false;

    m_deploy_parameters_isSet = false;
    m_deploy_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_execution_configs_isSet = false;
    m_execution_configs_isValid = false;

    m_gke_isSet = false;
    m_gke_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_multi_target_isSet = false;
    m_multi_target_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_require_approval_isSet = false;
    m_require_approval_isValid = false;

    m_run_isSet = false;
    m_run_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAITarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_anthos_cluster_isValid = ::OpenAPI::fromJsonValue(m_anthos_cluster, json[QString("anthosCluster")]);
    m_anthos_cluster_isSet = !json[QString("anthosCluster")].isNull() && m_anthos_cluster_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_target_isValid = ::OpenAPI::fromJsonValue(m_custom_target, json[QString("customTarget")]);
    m_custom_target_isSet = !json[QString("customTarget")].isNull() && m_custom_target_isValid;

    m_deploy_parameters_isValid = ::OpenAPI::fromJsonValue(m_deploy_parameters, json[QString("deployParameters")]);
    m_deploy_parameters_isSet = !json[QString("deployParameters")].isNull() && m_deploy_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_execution_configs_isValid = ::OpenAPI::fromJsonValue(m_execution_configs, json[QString("executionConfigs")]);
    m_execution_configs_isSet = !json[QString("executionConfigs")].isNull() && m_execution_configs_isValid;

    m_gke_isValid = ::OpenAPI::fromJsonValue(m_gke, json[QString("gke")]);
    m_gke_isSet = !json[QString("gke")].isNull() && m_gke_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_multi_target_isValid = ::OpenAPI::fromJsonValue(m_multi_target, json[QString("multiTarget")]);
    m_multi_target_isSet = !json[QString("multiTarget")].isNull() && m_multi_target_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_require_approval_isValid = ::OpenAPI::fromJsonValue(m_require_approval, json[QString("requireApproval")]);
    m_require_approval_isSet = !json[QString("requireApproval")].isNull() && m_require_approval_isValid;

    m_run_isValid = ::OpenAPI::fromJsonValue(m_run, json[QString("run")]);
    m_run_isSet = !json[QString("run")].isNull() && m_run_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAITarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_anthos_cluster.isSet()) {
        obj.insert(QString("anthosCluster"), ::OpenAPI::toJsonValue(m_anthos_cluster));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_target.isSet()) {
        obj.insert(QString("customTarget"), ::OpenAPI::toJsonValue(m_custom_target));
    }
    if (m_deploy_parameters.size() > 0) {
        obj.insert(QString("deployParameters"), ::OpenAPI::toJsonValue(m_deploy_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_execution_configs.size() > 0) {
        obj.insert(QString("executionConfigs"), ::OpenAPI::toJsonValue(m_execution_configs));
    }
    if (m_gke.isSet()) {
        obj.insert(QString("gke"), ::OpenAPI::toJsonValue(m_gke));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_multi_target.isSet()) {
        obj.insert(QString("multiTarget"), ::OpenAPI::toJsonValue(m_multi_target));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_require_approval_isSet) {
        obj.insert(QString("requireApproval"), ::OpenAPI::toJsonValue(m_require_approval));
    }
    if (m_run.isSet()) {
        obj.insert(QString("run"), ::OpenAPI::toJsonValue(m_run));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAITarget::getAnnotations() const {
    return m_annotations;
}
void OAITarget::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAITarget::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAITarget::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIAnthosCluster OAITarget::getAnthosCluster() const {
    return m_anthos_cluster;
}
void OAITarget::setAnthosCluster(const OAIAnthosCluster &anthos_cluster) {
    m_anthos_cluster = anthos_cluster;
    m_anthos_cluster_isSet = true;
}

bool OAITarget::is_anthos_cluster_Set() const{
    return m_anthos_cluster_isSet;
}

bool OAITarget::is_anthos_cluster_Valid() const{
    return m_anthos_cluster_isValid;
}

QString OAITarget::getCreateTime() const {
    return m_create_time;
}
void OAITarget::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITarget::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITarget::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAICustomTarget OAITarget::getCustomTarget() const {
    return m_custom_target;
}
void OAITarget::setCustomTarget(const OAICustomTarget &custom_target) {
    m_custom_target = custom_target;
    m_custom_target_isSet = true;
}

bool OAITarget::is_custom_target_Set() const{
    return m_custom_target_isSet;
}

bool OAITarget::is_custom_target_Valid() const{
    return m_custom_target_isValid;
}

QMap<QString, QString> OAITarget::getDeployParameters() const {
    return m_deploy_parameters;
}
void OAITarget::setDeployParameters(const QMap<QString, QString> &deploy_parameters) {
    m_deploy_parameters = deploy_parameters;
    m_deploy_parameters_isSet = true;
}

bool OAITarget::is_deploy_parameters_Set() const{
    return m_deploy_parameters_isSet;
}

bool OAITarget::is_deploy_parameters_Valid() const{
    return m_deploy_parameters_isValid;
}

QString OAITarget::getDescription() const {
    return m_description;
}
void OAITarget::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITarget::is_description_Set() const{
    return m_description_isSet;
}

bool OAITarget::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITarget::getEtag() const {
    return m_etag;
}
void OAITarget::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAITarget::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAITarget::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIExecutionConfig> OAITarget::getExecutionConfigs() const {
    return m_execution_configs;
}
void OAITarget::setExecutionConfigs(const QList<OAIExecutionConfig> &execution_configs) {
    m_execution_configs = execution_configs;
    m_execution_configs_isSet = true;
}

bool OAITarget::is_execution_configs_Set() const{
    return m_execution_configs_isSet;
}

bool OAITarget::is_execution_configs_Valid() const{
    return m_execution_configs_isValid;
}

OAIGkeCluster OAITarget::getGke() const {
    return m_gke;
}
void OAITarget::setGke(const OAIGkeCluster &gke) {
    m_gke = gke;
    m_gke_isSet = true;
}

bool OAITarget::is_gke_Set() const{
    return m_gke_isSet;
}

bool OAITarget::is_gke_Valid() const{
    return m_gke_isValid;
}

QMap<QString, QString> OAITarget::getLabels() const {
    return m_labels;
}
void OAITarget::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITarget::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITarget::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMultiTarget OAITarget::getMultiTarget() const {
    return m_multi_target;
}
void OAITarget::setMultiTarget(const OAIMultiTarget &multi_target) {
    m_multi_target = multi_target;
    m_multi_target_isSet = true;
}

bool OAITarget::is_multi_target_Set() const{
    return m_multi_target_isSet;
}

bool OAITarget::is_multi_target_Valid() const{
    return m_multi_target_isValid;
}

QString OAITarget::getName() const {
    return m_name;
}
void OAITarget::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITarget::is_name_Set() const{
    return m_name_isSet;
}

bool OAITarget::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITarget::isRequireApproval() const {
    return m_require_approval;
}
void OAITarget::setRequireApproval(const bool &require_approval) {
    m_require_approval = require_approval;
    m_require_approval_isSet = true;
}

bool OAITarget::is_require_approval_Set() const{
    return m_require_approval_isSet;
}

bool OAITarget::is_require_approval_Valid() const{
    return m_require_approval_isValid;
}

OAICloudRunLocation OAITarget::getRun() const {
    return m_run;
}
void OAITarget::setRun(const OAICloudRunLocation &run) {
    m_run = run;
    m_run_isSet = true;
}

bool OAITarget::is_run_Set() const{
    return m_run_isSet;
}

bool OAITarget::is_run_Valid() const{
    return m_run_isValid;
}

QString OAITarget::getTargetId() const {
    return m_target_id;
}
void OAITarget::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAITarget::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAITarget::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAITarget::getUid() const {
    return m_uid;
}
void OAITarget::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAITarget::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAITarget::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAITarget::getUpdateTime() const {
    return m_update_time;
}
void OAITarget::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAITarget::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAITarget::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAITarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_anthos_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
