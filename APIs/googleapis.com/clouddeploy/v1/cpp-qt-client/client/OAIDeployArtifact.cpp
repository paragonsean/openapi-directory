/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployArtifact::OAIDeployArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployArtifact::OAIDeployArtifact() {
    this->initializeModel();
}

OAIDeployArtifact::~OAIDeployArtifact() {}

void OAIDeployArtifact::initializeModel() {

    m_artifact_uri_isSet = false;
    m_artifact_uri_isValid = false;

    m_manifest_paths_isSet = false;
    m_manifest_paths_isValid = false;
}

void OAIDeployArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployArtifact::fromJsonObject(QJsonObject json) {

    m_artifact_uri_isValid = ::OpenAPI::fromJsonValue(m_artifact_uri, json[QString("artifactUri")]);
    m_artifact_uri_isSet = !json[QString("artifactUri")].isNull() && m_artifact_uri_isValid;

    m_manifest_paths_isValid = ::OpenAPI::fromJsonValue(m_manifest_paths, json[QString("manifestPaths")]);
    m_manifest_paths_isSet = !json[QString("manifestPaths")].isNull() && m_manifest_paths_isValid;
}

QString OAIDeployArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_uri_isSet) {
        obj.insert(QString("artifactUri"), ::OpenAPI::toJsonValue(m_artifact_uri));
    }
    if (m_manifest_paths.size() > 0) {
        obj.insert(QString("manifestPaths"), ::OpenAPI::toJsonValue(m_manifest_paths));
    }
    return obj;
}

QString OAIDeployArtifact::getArtifactUri() const {
    return m_artifact_uri;
}
void OAIDeployArtifact::setArtifactUri(const QString &artifact_uri) {
    m_artifact_uri = artifact_uri;
    m_artifact_uri_isSet = true;
}

bool OAIDeployArtifact::is_artifact_uri_Set() const{
    return m_artifact_uri_isSet;
}

bool OAIDeployArtifact::is_artifact_uri_Valid() const{
    return m_artifact_uri_isValid;
}

QList<QString> OAIDeployArtifact::getManifestPaths() const {
    return m_manifest_paths;
}
void OAIDeployArtifact::setManifestPaths(const QList<QString> &manifest_paths) {
    m_manifest_paths = manifest_paths;
    m_manifest_paths_isSet = true;
}

bool OAIDeployArtifact::is_manifest_paths_Set() const{
    return m_manifest_paths_isSet;
}

bool OAIDeployArtifact::is_manifest_paths_Valid() const{
    return m_manifest_paths_isValid;
}

bool OAIDeployArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
