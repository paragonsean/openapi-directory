/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollout::OAIRollout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollout::OAIRollout() {
    this->initializeModel();
}

OAIRollout::~OAIRollout() {}

void OAIRollout::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_approval_state_isSet = false;
    m_approval_state_isValid = false;

    m_approve_time_isSet = false;
    m_approve_time_isValid = false;

    m_controller_rollout_isSet = false;
    m_controller_rollout_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deploy_end_time_isSet = false;
    m_deploy_end_time_isValid = false;

    m_deploy_failure_cause_isSet = false;
    m_deploy_failure_cause_isValid = false;

    m_deploy_start_time_isSet = false;
    m_deploy_start_time_isValid = false;

    m_deploying_build_isSet = false;
    m_deploying_build_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enqueue_time_isSet = false;
    m_enqueue_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m_rollback_of_rollout_isSet = false;
    m_rollback_of_rollout_isValid = false;

    m_rolled_back_by_rollouts_isSet = false;
    m_rolled_back_by_rollouts_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIRollout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollout::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_approval_state_isValid = ::OpenAPI::fromJsonValue(m_approval_state, json[QString("approvalState")]);
    m_approval_state_isSet = !json[QString("approvalState")].isNull() && m_approval_state_isValid;

    m_approve_time_isValid = ::OpenAPI::fromJsonValue(m_approve_time, json[QString("approveTime")]);
    m_approve_time_isSet = !json[QString("approveTime")].isNull() && m_approve_time_isValid;

    m_controller_rollout_isValid = ::OpenAPI::fromJsonValue(m_controller_rollout, json[QString("controllerRollout")]);
    m_controller_rollout_isSet = !json[QString("controllerRollout")].isNull() && m_controller_rollout_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deploy_end_time_isValid = ::OpenAPI::fromJsonValue(m_deploy_end_time, json[QString("deployEndTime")]);
    m_deploy_end_time_isSet = !json[QString("deployEndTime")].isNull() && m_deploy_end_time_isValid;

    m_deploy_failure_cause_isValid = ::OpenAPI::fromJsonValue(m_deploy_failure_cause, json[QString("deployFailureCause")]);
    m_deploy_failure_cause_isSet = !json[QString("deployFailureCause")].isNull() && m_deploy_failure_cause_isValid;

    m_deploy_start_time_isValid = ::OpenAPI::fromJsonValue(m_deploy_start_time, json[QString("deployStartTime")]);
    m_deploy_start_time_isSet = !json[QString("deployStartTime")].isNull() && m_deploy_start_time_isValid;

    m_deploying_build_isValid = ::OpenAPI::fromJsonValue(m_deploying_build, json[QString("deployingBuild")]);
    m_deploying_build_isSet = !json[QString("deployingBuild")].isNull() && m_deploying_build_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enqueue_time_isValid = ::OpenAPI::fromJsonValue(m_enqueue_time, json[QString("enqueueTime")]);
    m_enqueue_time_isSet = !json[QString("enqueueTime")].isNull() && m_enqueue_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(m_phases, json[QString("phases")]);
    m_phases_isSet = !json[QString("phases")].isNull() && m_phases_isValid;

    m_rollback_of_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollback_of_rollout, json[QString("rollbackOfRollout")]);
    m_rollback_of_rollout_isSet = !json[QString("rollbackOfRollout")].isNull() && m_rollback_of_rollout_isValid;

    m_rolled_back_by_rollouts_isValid = ::OpenAPI::fromJsonValue(m_rolled_back_by_rollouts, json[QString("rolledBackByRollouts")]);
    m_rolled_back_by_rollouts_isSet = !json[QString("rolledBackByRollouts")].isNull() && m_rolled_back_by_rollouts_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIRollout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollout::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_approval_state_isSet) {
        obj.insert(QString("approvalState"), ::OpenAPI::toJsonValue(m_approval_state));
    }
    if (m_approve_time_isSet) {
        obj.insert(QString("approveTime"), ::OpenAPI::toJsonValue(m_approve_time));
    }
    if (m_controller_rollout_isSet) {
        obj.insert(QString("controllerRollout"), ::OpenAPI::toJsonValue(m_controller_rollout));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deploy_end_time_isSet) {
        obj.insert(QString("deployEndTime"), ::OpenAPI::toJsonValue(m_deploy_end_time));
    }
    if (m_deploy_failure_cause_isSet) {
        obj.insert(QString("deployFailureCause"), ::OpenAPI::toJsonValue(m_deploy_failure_cause));
    }
    if (m_deploy_start_time_isSet) {
        obj.insert(QString("deployStartTime"), ::OpenAPI::toJsonValue(m_deploy_start_time));
    }
    if (m_deploying_build_isSet) {
        obj.insert(QString("deployingBuild"), ::OpenAPI::toJsonValue(m_deploying_build));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enqueue_time_isSet) {
        obj.insert(QString("enqueueTime"), ::OpenAPI::toJsonValue(m_enqueue_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phases.size() > 0) {
        obj.insert(QString("phases"), ::OpenAPI::toJsonValue(m_phases));
    }
    if (m_rollback_of_rollout_isSet) {
        obj.insert(QString("rollbackOfRollout"), ::OpenAPI::toJsonValue(m_rollback_of_rollout));
    }
    if (m_rolled_back_by_rollouts.size() > 0) {
        obj.insert(QString("rolledBackByRollouts"), ::OpenAPI::toJsonValue(m_rolled_back_by_rollouts));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QMap<QString, QString> OAIRollout::getAnnotations() const {
    return m_annotations;
}
void OAIRollout::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIRollout::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIRollout::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIRollout::getApprovalState() const {
    return m_approval_state;
}
void OAIRollout::setApprovalState(const QString &approval_state) {
    m_approval_state = approval_state;
    m_approval_state_isSet = true;
}

bool OAIRollout::is_approval_state_Set() const{
    return m_approval_state_isSet;
}

bool OAIRollout::is_approval_state_Valid() const{
    return m_approval_state_isValid;
}

QString OAIRollout::getApproveTime() const {
    return m_approve_time;
}
void OAIRollout::setApproveTime(const QString &approve_time) {
    m_approve_time = approve_time;
    m_approve_time_isSet = true;
}

bool OAIRollout::is_approve_time_Set() const{
    return m_approve_time_isSet;
}

bool OAIRollout::is_approve_time_Valid() const{
    return m_approve_time_isValid;
}

QString OAIRollout::getControllerRollout() const {
    return m_controller_rollout;
}
void OAIRollout::setControllerRollout(const QString &controller_rollout) {
    m_controller_rollout = controller_rollout;
    m_controller_rollout_isSet = true;
}

bool OAIRollout::is_controller_rollout_Set() const{
    return m_controller_rollout_isSet;
}

bool OAIRollout::is_controller_rollout_Valid() const{
    return m_controller_rollout_isValid;
}

QString OAIRollout::getCreateTime() const {
    return m_create_time;
}
void OAIRollout::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRollout::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRollout::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRollout::getDeployEndTime() const {
    return m_deploy_end_time;
}
void OAIRollout::setDeployEndTime(const QString &deploy_end_time) {
    m_deploy_end_time = deploy_end_time;
    m_deploy_end_time_isSet = true;
}

bool OAIRollout::is_deploy_end_time_Set() const{
    return m_deploy_end_time_isSet;
}

bool OAIRollout::is_deploy_end_time_Valid() const{
    return m_deploy_end_time_isValid;
}

QString OAIRollout::getDeployFailureCause() const {
    return m_deploy_failure_cause;
}
void OAIRollout::setDeployFailureCause(const QString &deploy_failure_cause) {
    m_deploy_failure_cause = deploy_failure_cause;
    m_deploy_failure_cause_isSet = true;
}

bool OAIRollout::is_deploy_failure_cause_Set() const{
    return m_deploy_failure_cause_isSet;
}

bool OAIRollout::is_deploy_failure_cause_Valid() const{
    return m_deploy_failure_cause_isValid;
}

QString OAIRollout::getDeployStartTime() const {
    return m_deploy_start_time;
}
void OAIRollout::setDeployStartTime(const QString &deploy_start_time) {
    m_deploy_start_time = deploy_start_time;
    m_deploy_start_time_isSet = true;
}

bool OAIRollout::is_deploy_start_time_Set() const{
    return m_deploy_start_time_isSet;
}

bool OAIRollout::is_deploy_start_time_Valid() const{
    return m_deploy_start_time_isValid;
}

QString OAIRollout::getDeployingBuild() const {
    return m_deploying_build;
}
void OAIRollout::setDeployingBuild(const QString &deploying_build) {
    m_deploying_build = deploying_build;
    m_deploying_build_isSet = true;
}

bool OAIRollout::is_deploying_build_Set() const{
    return m_deploying_build_isSet;
}

bool OAIRollout::is_deploying_build_Valid() const{
    return m_deploying_build_isValid;
}

QString OAIRollout::getDescription() const {
    return m_description;
}
void OAIRollout::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRollout::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRollout::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRollout::getEnqueueTime() const {
    return m_enqueue_time;
}
void OAIRollout::setEnqueueTime(const QString &enqueue_time) {
    m_enqueue_time = enqueue_time;
    m_enqueue_time_isSet = true;
}

bool OAIRollout::is_enqueue_time_Set() const{
    return m_enqueue_time_isSet;
}

bool OAIRollout::is_enqueue_time_Valid() const{
    return m_enqueue_time_isValid;
}

QString OAIRollout::getEtag() const {
    return m_etag;
}
void OAIRollout::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRollout::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRollout::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIRollout::getFailureReason() const {
    return m_failure_reason;
}
void OAIRollout::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIRollout::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIRollout::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QMap<QString, QString> OAIRollout::getLabels() const {
    return m_labels;
}
void OAIRollout::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRollout::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRollout::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMetadata OAIRollout::getMetadata() const {
    return m_metadata;
}
void OAIRollout::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRollout::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRollout::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIRollout::getName() const {
    return m_name;
}
void OAIRollout::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRollout::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRollout::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPhase> OAIRollout::getPhases() const {
    return m_phases;
}
void OAIRollout::setPhases(const QList<OAIPhase> &phases) {
    m_phases = phases;
    m_phases_isSet = true;
}

bool OAIRollout::is_phases_Set() const{
    return m_phases_isSet;
}

bool OAIRollout::is_phases_Valid() const{
    return m_phases_isValid;
}

QString OAIRollout::getRollbackOfRollout() const {
    return m_rollback_of_rollout;
}
void OAIRollout::setRollbackOfRollout(const QString &rollback_of_rollout) {
    m_rollback_of_rollout = rollback_of_rollout;
    m_rollback_of_rollout_isSet = true;
}

bool OAIRollout::is_rollback_of_rollout_Set() const{
    return m_rollback_of_rollout_isSet;
}

bool OAIRollout::is_rollback_of_rollout_Valid() const{
    return m_rollback_of_rollout_isValid;
}

QList<QString> OAIRollout::getRolledBackByRollouts() const {
    return m_rolled_back_by_rollouts;
}
void OAIRollout::setRolledBackByRollouts(const QList<QString> &rolled_back_by_rollouts) {
    m_rolled_back_by_rollouts = rolled_back_by_rollouts;
    m_rolled_back_by_rollouts_isSet = true;
}

bool OAIRollout::is_rolled_back_by_rollouts_Set() const{
    return m_rolled_back_by_rollouts_isSet;
}

bool OAIRollout::is_rolled_back_by_rollouts_Valid() const{
    return m_rolled_back_by_rollouts_isValid;
}

QString OAIRollout::getState() const {
    return m_state;
}
void OAIRollout::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRollout::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRollout::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRollout::getTargetId() const {
    return m_target_id;
}
void OAIRollout::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIRollout::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIRollout::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIRollout::getUid() const {
    return m_uid;
}
void OAIRollout::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRollout::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRollout::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIRollout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approve_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_failure_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploying_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_of_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolled_back_by_rollouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
