/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRun::OAIJobRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRun::OAIJobRun() {
    this->initializeModel();
}

OAIJobRun::~OAIJobRun() {}

void OAIJobRun::initializeModel() {

    m_advance_child_rollout_job_run_isSet = false;
    m_advance_child_rollout_job_run_isValid = false;

    m_create_child_rollout_job_run_isSet = false;
    m_create_child_rollout_job_run_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deploy_job_run_isSet = false;
    m_deploy_job_run_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_id_isSet = false;
    m_phase_id_isValid = false;

    m_postdeploy_job_run_isSet = false;
    m_postdeploy_job_run_isValid = false;

    m_predeploy_job_run_isSet = false;
    m_predeploy_job_run_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_verify_job_run_isSet = false;
    m_verify_job_run_isValid = false;
}

void OAIJobRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobRun::fromJsonObject(QJsonObject json) {

    m_advance_child_rollout_job_run_isValid = ::OpenAPI::fromJsonValue(m_advance_child_rollout_job_run, json[QString("advanceChildRolloutJobRun")]);
    m_advance_child_rollout_job_run_isSet = !json[QString("advanceChildRolloutJobRun")].isNull() && m_advance_child_rollout_job_run_isValid;

    m_create_child_rollout_job_run_isValid = ::OpenAPI::fromJsonValue(m_create_child_rollout_job_run, json[QString("createChildRolloutJobRun")]);
    m_create_child_rollout_job_run_isSet = !json[QString("createChildRolloutJobRun")].isNull() && m_create_child_rollout_job_run_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deploy_job_run_isValid = ::OpenAPI::fromJsonValue(m_deploy_job_run, json[QString("deployJobRun")]);
    m_deploy_job_run_isSet = !json[QString("deployJobRun")].isNull() && m_deploy_job_run_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_id_isValid = ::OpenAPI::fromJsonValue(m_phase_id, json[QString("phaseId")]);
    m_phase_id_isSet = !json[QString("phaseId")].isNull() && m_phase_id_isValid;

    m_postdeploy_job_run_isValid = ::OpenAPI::fromJsonValue(m_postdeploy_job_run, json[QString("postdeployJobRun")]);
    m_postdeploy_job_run_isSet = !json[QString("postdeployJobRun")].isNull() && m_postdeploy_job_run_isValid;

    m_predeploy_job_run_isValid = ::OpenAPI::fromJsonValue(m_predeploy_job_run, json[QString("predeployJobRun")]);
    m_predeploy_job_run_isSet = !json[QString("predeployJobRun")].isNull() && m_predeploy_job_run_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_verify_job_run_isValid = ::OpenAPI::fromJsonValue(m_verify_job_run, json[QString("verifyJobRun")]);
    m_verify_job_run_isSet = !json[QString("verifyJobRun")].isNull() && m_verify_job_run_isValid;
}

QString OAIJobRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobRun::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_child_rollout_job_run.isSet()) {
        obj.insert(QString("advanceChildRolloutJobRun"), ::OpenAPI::toJsonValue(m_advance_child_rollout_job_run));
    }
    if (m_create_child_rollout_job_run.isSet()) {
        obj.insert(QString("createChildRolloutJobRun"), ::OpenAPI::toJsonValue(m_create_child_rollout_job_run));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deploy_job_run.isSet()) {
        obj.insert(QString("deployJobRun"), ::OpenAPI::toJsonValue(m_deploy_job_run));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase_id_isSet) {
        obj.insert(QString("phaseId"), ::OpenAPI::toJsonValue(m_phase_id));
    }
    if (m_postdeploy_job_run.isSet()) {
        obj.insert(QString("postdeployJobRun"), ::OpenAPI::toJsonValue(m_postdeploy_job_run));
    }
    if (m_predeploy_job_run.isSet()) {
        obj.insert(QString("predeployJobRun"), ::OpenAPI::toJsonValue(m_predeploy_job_run));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_verify_job_run.isSet()) {
        obj.insert(QString("verifyJobRun"), ::OpenAPI::toJsonValue(m_verify_job_run));
    }
    return obj;
}

OAIAdvanceChildRolloutJobRun OAIJobRun::getAdvanceChildRolloutJobRun() const {
    return m_advance_child_rollout_job_run;
}
void OAIJobRun::setAdvanceChildRolloutJobRun(const OAIAdvanceChildRolloutJobRun &advance_child_rollout_job_run) {
    m_advance_child_rollout_job_run = advance_child_rollout_job_run;
    m_advance_child_rollout_job_run_isSet = true;
}

bool OAIJobRun::is_advance_child_rollout_job_run_Set() const{
    return m_advance_child_rollout_job_run_isSet;
}

bool OAIJobRun::is_advance_child_rollout_job_run_Valid() const{
    return m_advance_child_rollout_job_run_isValid;
}

OAICreateChildRolloutJobRun OAIJobRun::getCreateChildRolloutJobRun() const {
    return m_create_child_rollout_job_run;
}
void OAIJobRun::setCreateChildRolloutJobRun(const OAICreateChildRolloutJobRun &create_child_rollout_job_run) {
    m_create_child_rollout_job_run = create_child_rollout_job_run;
    m_create_child_rollout_job_run_isSet = true;
}

bool OAIJobRun::is_create_child_rollout_job_run_Set() const{
    return m_create_child_rollout_job_run_isSet;
}

bool OAIJobRun::is_create_child_rollout_job_run_Valid() const{
    return m_create_child_rollout_job_run_isValid;
}

QString OAIJobRun::getCreateTime() const {
    return m_create_time;
}
void OAIJobRun::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJobRun::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJobRun::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDeployJobRun OAIJobRun::getDeployJobRun() const {
    return m_deploy_job_run;
}
void OAIJobRun::setDeployJobRun(const OAIDeployJobRun &deploy_job_run) {
    m_deploy_job_run = deploy_job_run;
    m_deploy_job_run_isSet = true;
}

bool OAIJobRun::is_deploy_job_run_Set() const{
    return m_deploy_job_run_isSet;
}

bool OAIJobRun::is_deploy_job_run_Valid() const{
    return m_deploy_job_run_isValid;
}

QString OAIJobRun::getEndTime() const {
    return m_end_time;
}
void OAIJobRun::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobRun::getEtag() const {
    return m_etag;
}
void OAIJobRun::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIJobRun::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIJobRun::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIJobRun::getJobId() const {
    return m_job_id;
}
void OAIJobRun::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobRun::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobRun::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobRun::getName() const {
    return m_name;
}
void OAIJobRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobRun::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJobRun::getPhaseId() const {
    return m_phase_id;
}
void OAIJobRun::setPhaseId(const QString &phase_id) {
    m_phase_id = phase_id;
    m_phase_id_isSet = true;
}

bool OAIJobRun::is_phase_id_Set() const{
    return m_phase_id_isSet;
}

bool OAIJobRun::is_phase_id_Valid() const{
    return m_phase_id_isValid;
}

OAIPostdeployJobRun OAIJobRun::getPostdeployJobRun() const {
    return m_postdeploy_job_run;
}
void OAIJobRun::setPostdeployJobRun(const OAIPostdeployJobRun &postdeploy_job_run) {
    m_postdeploy_job_run = postdeploy_job_run;
    m_postdeploy_job_run_isSet = true;
}

bool OAIJobRun::is_postdeploy_job_run_Set() const{
    return m_postdeploy_job_run_isSet;
}

bool OAIJobRun::is_postdeploy_job_run_Valid() const{
    return m_postdeploy_job_run_isValid;
}

OAIPredeployJobRun OAIJobRun::getPredeployJobRun() const {
    return m_predeploy_job_run;
}
void OAIJobRun::setPredeployJobRun(const OAIPredeployJobRun &predeploy_job_run) {
    m_predeploy_job_run = predeploy_job_run;
    m_predeploy_job_run_isSet = true;
}

bool OAIJobRun::is_predeploy_job_run_Set() const{
    return m_predeploy_job_run_isSet;
}

bool OAIJobRun::is_predeploy_job_run_Valid() const{
    return m_predeploy_job_run_isValid;
}

QString OAIJobRun::getStartTime() const {
    return m_start_time;
}
void OAIJobRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobRun::getState() const {
    return m_state;
}
void OAIJobRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobRun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJobRun::getUid() const {
    return m_uid;
}
void OAIJobRun::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIJobRun::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIJobRun::is_uid_Valid() const{
    return m_uid_isValid;
}

OAIVerifyJobRun OAIJobRun::getVerifyJobRun() const {
    return m_verify_job_run;
}
void OAIJobRun::setVerifyJobRun(const OAIVerifyJobRun &verify_job_run) {
    m_verify_job_run = verify_job_run;
    m_verify_job_run_isSet = true;
}

bool OAIJobRun::is_verify_job_run_Set() const{
    return m_verify_job_run_isSet;
}

bool OAIJobRun::is_verify_job_run_Valid() const{
    return m_verify_job_run_isValid;
}

bool OAIJobRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_child_rollout_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_child_rollout_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postdeploy_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predeploy_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_job_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
