/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultPool::OAIDefaultPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultPool::OAIDefaultPool() {
    this->initializeModel();
}

OAIDefaultPool::~OAIDefaultPool() {}

void OAIDefaultPool::initializeModel() {

    m_artifact_storage_isSet = false;
    m_artifact_storage_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;
}

void OAIDefaultPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultPool::fromJsonObject(QJsonObject json) {

    m_artifact_storage_isValid = ::OpenAPI::fromJsonValue(m_artifact_storage, json[QString("artifactStorage")]);
    m_artifact_storage_isSet = !json[QString("artifactStorage")].isNull() && m_artifact_storage_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;
}

QString OAIDefaultPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultPool::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_storage_isSet) {
        obj.insert(QString("artifactStorage"), ::OpenAPI::toJsonValue(m_artifact_storage));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    return obj;
}

QString OAIDefaultPool::getArtifactStorage() const {
    return m_artifact_storage;
}
void OAIDefaultPool::setArtifactStorage(const QString &artifact_storage) {
    m_artifact_storage = artifact_storage;
    m_artifact_storage_isSet = true;
}

bool OAIDefaultPool::is_artifact_storage_Set() const{
    return m_artifact_storage_isSet;
}

bool OAIDefaultPool::is_artifact_storage_Valid() const{
    return m_artifact_storage_isValid;
}

QString OAIDefaultPool::getServiceAccount() const {
    return m_service_account;
}
void OAIDefaultPool::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIDefaultPool::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIDefaultPool::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIDefaultPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
