/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairMode::OAIRepairMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairMode::OAIRepairMode() {
    this->initializeModel();
}

OAIRepairMode::~OAIRepairMode() {}

void OAIRepairMode::initializeModel() {

    m_retry_isSet = false;
    m_retry_isValid = false;

    m_rollback_isSet = false;
    m_rollback_isValid = false;
}

void OAIRepairMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairMode::fromJsonObject(QJsonObject json) {

    m_retry_isValid = ::OpenAPI::fromJsonValue(m_retry, json[QString("retry")]);
    m_retry_isSet = !json[QString("retry")].isNull() && m_retry_isValid;

    m_rollback_isValid = ::OpenAPI::fromJsonValue(m_rollback, json[QString("rollback")]);
    m_rollback_isSet = !json[QString("rollback")].isNull() && m_rollback_isValid;
}

QString OAIRepairMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairMode::asJsonObject() const {
    QJsonObject obj;
    if (m_retry.isSet()) {
        obj.insert(QString("retry"), ::OpenAPI::toJsonValue(m_retry));
    }
    if (m_rollback.isSet()) {
        obj.insert(QString("rollback"), ::OpenAPI::toJsonValue(m_rollback));
    }
    return obj;
}

OAIRetry OAIRepairMode::getRetry() const {
    return m_retry;
}
void OAIRepairMode::setRetry(const OAIRetry &retry) {
    m_retry = retry;
    m_retry_isSet = true;
}

bool OAIRepairMode::is_retry_Set() const{
    return m_retry_isSet;
}

bool OAIRepairMode::is_retry_Valid() const{
    return m_retry_isValid;
}

OAIRollback OAIRepairMode::getRollback() const {
    return m_rollback;
}
void OAIRepairMode::setRollback(const OAIRollback &rollback) {
    m_rollback = rollback;
    m_rollback_isSet = true;
}

bool OAIRepairMode::is_rollback_Set() const{
    return m_rollback_isSet;
}

bool OAIRepairMode::is_rollback_Valid() const{
    return m_rollback_isValid;
}

bool OAIRepairMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
