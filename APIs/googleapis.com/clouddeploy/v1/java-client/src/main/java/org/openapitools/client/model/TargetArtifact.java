/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PhaseArtifact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The artifacts produced by a target render operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetArtifact {
  public static final String SERIALIZED_NAME_ARTIFACT_URI = "artifactUri";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_URI)
  private String artifactUri;

  public static final String SERIALIZED_NAME_MANIFEST_PATH = "manifestPath";
  @SerializedName(SERIALIZED_NAME_MANIFEST_PATH)
  private String manifestPath;

  public static final String SERIALIZED_NAME_PHASE_ARTIFACTS = "phaseArtifacts";
  @SerializedName(SERIALIZED_NAME_PHASE_ARTIFACTS)
  private Map<String, PhaseArtifact> phaseArtifacts = new HashMap<>();

  public static final String SERIALIZED_NAME_SKAFFOLD_CONFIG_PATH = "skaffoldConfigPath";
  @SerializedName(SERIALIZED_NAME_SKAFFOLD_CONFIG_PATH)
  private String skaffoldConfigPath;

  public TargetArtifact() {
  }

  public TargetArtifact(
     String artifactUri, 
     String manifestPath, 
     Map<String, PhaseArtifact> phaseArtifacts, 
     String skaffoldConfigPath
  ) {
    this();
    this.artifactUri = artifactUri;
    this.manifestPath = manifestPath;
    this.phaseArtifacts = phaseArtifacts;
    this.skaffoldConfigPath = skaffoldConfigPath;
  }

  /**
   * Output only. URI of a directory containing the artifacts. This contains deployment configuration used by Skaffold during a rollout, and all paths are relative to this location.
   * @return artifactUri
   */
  @javax.annotation.Nullable
  public String getArtifactUri() {
    return artifactUri;
  }



  /**
   * Output only. File path of the rendered manifest relative to the URI.
   * @return manifestPath
   */
  @javax.annotation.Nullable
  public String getManifestPath() {
    return manifestPath;
  }



  /**
   * Output only. Map from the phase ID to the phase artifacts for the &#x60;Target&#x60;.
   * @return phaseArtifacts
   */
  @javax.annotation.Nullable
  public Map<String, PhaseArtifact> getPhaseArtifacts() {
    return phaseArtifacts;
  }



  /**
   * Output only. File path of the resolved Skaffold configuration relative to the URI.
   * @return skaffoldConfigPath
   */
  @javax.annotation.Nullable
  public String getSkaffoldConfigPath() {
    return skaffoldConfigPath;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetArtifact targetArtifact = (TargetArtifact) o;
    return Objects.equals(this.artifactUri, targetArtifact.artifactUri) &&
        Objects.equals(this.manifestPath, targetArtifact.manifestPath) &&
        Objects.equals(this.phaseArtifacts, targetArtifact.phaseArtifacts) &&
        Objects.equals(this.skaffoldConfigPath, targetArtifact.skaffoldConfigPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactUri, manifestPath, phaseArtifacts, skaffoldConfigPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetArtifact {\n");
    sb.append("    artifactUri: ").append(toIndentedString(artifactUri)).append("\n");
    sb.append("    manifestPath: ").append(toIndentedString(manifestPath)).append("\n");
    sb.append("    phaseArtifacts: ").append(toIndentedString(phaseArtifacts)).append("\n");
    sb.append("    skaffoldConfigPath: ").append(toIndentedString(skaffoldConfigPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactUri");
    openapiFields.add("manifestPath");
    openapiFields.add("phaseArtifacts");
    openapiFields.add("skaffoldConfigPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetArtifact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetArtifact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetArtifact is not found in the empty JSON string", TargetArtifact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetArtifact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetArtifact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactUri") != null && !jsonObj.get("artifactUri").isJsonNull()) && !jsonObj.get("artifactUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactUri").toString()));
      }
      if ((jsonObj.get("manifestPath") != null && !jsonObj.get("manifestPath").isJsonNull()) && !jsonObj.get("manifestPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestPath").toString()));
      }
      if ((jsonObj.get("skaffoldConfigPath") != null && !jsonObj.get("skaffoldConfigPath").isJsonNull()) && !jsonObj.get("skaffoldConfigPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skaffoldConfigPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skaffoldConfigPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetArtifact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetArtifact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetArtifact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetArtifact.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetArtifact>() {
           @Override
           public void write(JsonWriter out, TargetArtifact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetArtifact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetArtifact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetArtifact
   * @throws IOException if the JSON string is invalid with respect to TargetArtifact
   */
  public static TargetArtifact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetArtifact.class);
  }

  /**
   * Convert an instance of TargetArtifact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

