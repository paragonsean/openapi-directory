/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a supported Skaffold version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkaffoldVersion {
  public static final String SERIALIZED_NAME_MAINTENANCE_MODE_TIME = "maintenanceModeTime";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_MODE_TIME)
  private String maintenanceModeTime;

  public static final String SERIALIZED_NAME_SUPPORT_END_DATE = "supportEndDate";
  @SerializedName(SERIALIZED_NAME_SUPPORT_END_DATE)
  private Date supportEndDate;

  public static final String SERIALIZED_NAME_SUPPORT_EXPIRATION_TIME = "supportExpirationTime";
  @SerializedName(SERIALIZED_NAME_SUPPORT_EXPIRATION_TIME)
  private String supportExpirationTime;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public SkaffoldVersion() {
  }

  public SkaffoldVersion maintenanceModeTime(String maintenanceModeTime) {
    this.maintenanceModeTime = maintenanceModeTime;
    return this;
  }

  /**
   * The time at which this version of Skaffold will enter maintenance mode.
   * @return maintenanceModeTime
   */
  @javax.annotation.Nullable
  public String getMaintenanceModeTime() {
    return maintenanceModeTime;
  }

  public void setMaintenanceModeTime(String maintenanceModeTime) {
    this.maintenanceModeTime = maintenanceModeTime;
  }


  public SkaffoldVersion supportEndDate(Date supportEndDate) {
    this.supportEndDate = supportEndDate;
    return this;
  }

  /**
   * Get supportEndDate
   * @return supportEndDate
   */
  @javax.annotation.Nullable
  public Date getSupportEndDate() {
    return supportEndDate;
  }

  public void setSupportEndDate(Date supportEndDate) {
    this.supportEndDate = supportEndDate;
  }


  public SkaffoldVersion supportExpirationTime(String supportExpirationTime) {
    this.supportExpirationTime = supportExpirationTime;
    return this;
  }

  /**
   * The time at which this version of Skaffold will no longer be supported.
   * @return supportExpirationTime
   */
  @javax.annotation.Nullable
  public String getSupportExpirationTime() {
    return supportExpirationTime;
  }

  public void setSupportExpirationTime(String supportExpirationTime) {
    this.supportExpirationTime = supportExpirationTime;
  }


  public SkaffoldVersion version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Release version number. For example, \&quot;1.20.3\&quot;.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkaffoldVersion skaffoldVersion = (SkaffoldVersion) o;
    return Objects.equals(this.maintenanceModeTime, skaffoldVersion.maintenanceModeTime) &&
        Objects.equals(this.supportEndDate, skaffoldVersion.supportEndDate) &&
        Objects.equals(this.supportExpirationTime, skaffoldVersion.supportExpirationTime) &&
        Objects.equals(this.version, skaffoldVersion.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maintenanceModeTime, supportEndDate, supportExpirationTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkaffoldVersion {\n");
    sb.append("    maintenanceModeTime: ").append(toIndentedString(maintenanceModeTime)).append("\n");
    sb.append("    supportEndDate: ").append(toIndentedString(supportEndDate)).append("\n");
    sb.append("    supportExpirationTime: ").append(toIndentedString(supportExpirationTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maintenanceModeTime");
    openapiFields.add("supportEndDate");
    openapiFields.add("supportExpirationTime");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkaffoldVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkaffoldVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkaffoldVersion is not found in the empty JSON string", SkaffoldVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkaffoldVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkaffoldVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maintenanceModeTime") != null && !jsonObj.get("maintenanceModeTime").isJsonNull()) && !jsonObj.get("maintenanceModeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenanceModeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintenanceModeTime").toString()));
      }
      // validate the optional field `supportEndDate`
      if (jsonObj.get("supportEndDate") != null && !jsonObj.get("supportEndDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("supportEndDate"));
      }
      if ((jsonObj.get("supportExpirationTime") != null && !jsonObj.get("supportExpirationTime").isJsonNull()) && !jsonObj.get("supportExpirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportExpirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportExpirationTime").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkaffoldVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkaffoldVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkaffoldVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkaffoldVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<SkaffoldVersion>() {
           @Override
           public void write(JsonWriter out, SkaffoldVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkaffoldVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkaffoldVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkaffoldVersion
   * @throws IOException if the JSON string is invalid with respect to SkaffoldVersion
   */
  public static SkaffoldVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkaffoldVersion.class);
  }

  /**
   * Convert an instance of SkaffoldVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

