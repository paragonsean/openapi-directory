/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Postdeploy;
import org.openapitools.client.model.Predeploy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standard represents the standard deployment strategy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standard {
  public static final String SERIALIZED_NAME_POSTDEPLOY = "postdeploy";
  @SerializedName(SERIALIZED_NAME_POSTDEPLOY)
  private Postdeploy postdeploy;

  public static final String SERIALIZED_NAME_PREDEPLOY = "predeploy";
  @SerializedName(SERIALIZED_NAME_PREDEPLOY)
  private Predeploy predeploy;

  public static final String SERIALIZED_NAME_VERIFY = "verify";
  @SerializedName(SERIALIZED_NAME_VERIFY)
  private Boolean verify;

  public Standard() {
  }

  public Standard postdeploy(Postdeploy postdeploy) {
    this.postdeploy = postdeploy;
    return this;
  }

  /**
   * Get postdeploy
   * @return postdeploy
   */
  @javax.annotation.Nullable
  public Postdeploy getPostdeploy() {
    return postdeploy;
  }

  public void setPostdeploy(Postdeploy postdeploy) {
    this.postdeploy = postdeploy;
  }


  public Standard predeploy(Predeploy predeploy) {
    this.predeploy = predeploy;
    return this;
  }

  /**
   * Get predeploy
   * @return predeploy
   */
  @javax.annotation.Nullable
  public Predeploy getPredeploy() {
    return predeploy;
  }

  public void setPredeploy(Predeploy predeploy) {
    this.predeploy = predeploy;
  }


  public Standard verify(Boolean verify) {
    this.verify = verify;
    return this;
  }

  /**
   * Whether to verify a deployment.
   * @return verify
   */
  @javax.annotation.Nullable
  public Boolean getVerify() {
    return verify;
  }

  public void setVerify(Boolean verify) {
    this.verify = verify;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standard standard = (Standard) o;
    return Objects.equals(this.postdeploy, standard.postdeploy) &&
        Objects.equals(this.predeploy, standard.predeploy) &&
        Objects.equals(this.verify, standard.verify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postdeploy, predeploy, verify);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standard {\n");
    sb.append("    postdeploy: ").append(toIndentedString(postdeploy)).append("\n");
    sb.append("    predeploy: ").append(toIndentedString(predeploy)).append("\n");
    sb.append("    verify: ").append(toIndentedString(verify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postdeploy");
    openapiFields.add("predeploy");
    openapiFields.add("verify");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standard is not found in the empty JSON string", Standard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `postdeploy`
      if (jsonObj.get("postdeploy") != null && !jsonObj.get("postdeploy").isJsonNull()) {
        Postdeploy.validateJsonElement(jsonObj.get("postdeploy"));
      }
      // validate the optional field `predeploy`
      if (jsonObj.get("predeploy") != null && !jsonObj.get("predeploy").isJsonNull()) {
        Predeploy.validateJsonElement(jsonObj.get("predeploy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standard.class));

       return (TypeAdapter<T>) new TypeAdapter<Standard>() {
           @Override
           public void write(JsonWriter out, Standard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standard
   * @throws IOException if the JSON string is invalid with respect to Standard
   */
  public static Standard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standard.class);
  }

  /**
   * Convert an instance of Standard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

