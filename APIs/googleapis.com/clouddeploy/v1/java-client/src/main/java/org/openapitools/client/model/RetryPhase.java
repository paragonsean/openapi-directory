/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RetryAttempt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetryPhase contains the retry attempts and the metadata for initiating a new attempt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetryPhase {
  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private List<RetryAttempt> attempts = new ArrayList<>();

  /**
   * Output only. The pattern of how the wait time of the retry attempt is calculated.
   */
  @JsonAdapter(BackoffModeEnum.Adapter.class)
  public enum BackoffModeEnum {
    UNSPECIFIED("BACKOFF_MODE_UNSPECIFIED"),
    
    LINEAR("BACKOFF_MODE_LINEAR"),
    
    EXPONENTIAL("BACKOFF_MODE_EXPONENTIAL");

    private String value;

    BackoffModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackoffModeEnum fromValue(String value) {
      for (BackoffModeEnum b : BackoffModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackoffModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackoffModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackoffModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackoffModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackoffModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKOFF_MODE = "backoffMode";
  @SerializedName(SERIALIZED_NAME_BACKOFF_MODE)
  private BackoffModeEnum backoffMode;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PHASE_ID = "phaseId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PHASE_ID)
  private String phaseId;

  public static final String SERIALIZED_NAME_TOTAL_ATTEMPTS = "totalAttempts";
  @SerializedName(SERIALIZED_NAME_TOTAL_ATTEMPTS)
  private String totalAttempts;

  public RetryPhase() {
  }

  public RetryPhase(
     List<RetryAttempt> attempts, 
     BackoffModeEnum backoffMode, 
     String jobId, 
     String phaseId, 
     String totalAttempts
  ) {
    this();
    this.attempts = attempts;
    this.backoffMode = backoffMode;
    this.jobId = jobId;
    this.phaseId = phaseId;
    this.totalAttempts = totalAttempts;
  }

  /**
   * Output only. Detail of a retry action.
   * @return attempts
   */
  @javax.annotation.Nullable
  public List<RetryAttempt> getAttempts() {
    return attempts;
  }



  /**
   * Output only. The pattern of how the wait time of the retry attempt is calculated.
   * @return backoffMode
   */
  @javax.annotation.Nullable
  public BackoffModeEnum getBackoffMode() {
    return backoffMode;
  }



  /**
   * Output only. The job ID for the Job to retry.
   * @return jobId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }



  /**
   * Output only. The phase ID of the phase that includes the job being retried.
   * @return phaseId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPhaseId() {
    return phaseId;
  }



  /**
   * Output only. The number of attempts that have been made.
   * @return totalAttempts
   */
  @javax.annotation.Nullable
  public String getTotalAttempts() {
    return totalAttempts;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetryPhase retryPhase = (RetryPhase) o;
    return Objects.equals(this.attempts, retryPhase.attempts) &&
        Objects.equals(this.backoffMode, retryPhase.backoffMode) &&
        Objects.equals(this.jobId, retryPhase.jobId) &&
        Objects.equals(this.phaseId, retryPhase.phaseId) &&
        Objects.equals(this.totalAttempts, retryPhase.totalAttempts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attempts, backoffMode, jobId, phaseId, totalAttempts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetryPhase {\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    backoffMode: ").append(toIndentedString(backoffMode)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    phaseId: ").append(toIndentedString(phaseId)).append("\n");
    sb.append("    totalAttempts: ").append(toIndentedString(totalAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attempts");
    openapiFields.add("backoffMode");
    openapiFields.add("jobId");
    openapiFields.add("phaseId");
    openapiFields.add("totalAttempts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetryPhase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetryPhase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetryPhase is not found in the empty JSON string", RetryPhase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetryPhase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetryPhase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attempts") != null && !jsonObj.get("attempts").isJsonNull()) {
        JsonArray jsonArrayattempts = jsonObj.getAsJsonArray("attempts");
        if (jsonArrayattempts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attempts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attempts` to be an array in the JSON string but got `%s`", jsonObj.get("attempts").toString()));
          }

          // validate the optional field `attempts` (array)
          for (int i = 0; i < jsonArrayattempts.size(); i++) {
            RetryAttempt.validateJsonElement(jsonArrayattempts.get(i));
          };
        }
      }
      if ((jsonObj.get("backoffMode") != null && !jsonObj.get("backoffMode").isJsonNull()) && !jsonObj.get("backoffMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backoffMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backoffMode").toString()));
      }
      // validate the optional field `backoffMode`
      if (jsonObj.get("backoffMode") != null && !jsonObj.get("backoffMode").isJsonNull()) {
        BackoffModeEnum.validateJsonElement(jsonObj.get("backoffMode"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("phaseId") != null && !jsonObj.get("phaseId").isJsonNull()) && !jsonObj.get("phaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phaseId").toString()));
      }
      if ((jsonObj.get("totalAttempts") != null && !jsonObj.get("totalAttempts").isJsonNull()) && !jsonObj.get("totalAttempts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAttempts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAttempts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetryPhase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetryPhase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetryPhase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetryPhase.class));

       return (TypeAdapter<T>) new TypeAdapter<RetryPhase>() {
           @Override
           public void write(JsonWriter out, RetryPhase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetryPhase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetryPhase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetryPhase
   * @throws IOException if the JSON string is invalid with respect to RetryPhase
   */
  public static RetryPhase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetryPhase.class);
  }

  /**
   * Convert an instance of RetryPhase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

