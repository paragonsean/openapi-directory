/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutomationRuleCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &#x60;AdvanceRollout&#x60; automation rule will automatically advance a successful Rollout to the next phase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvanceRolloutRule {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private AutomationRuleCondition condition;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SOURCE_PHASES = "sourcePhases";
  @SerializedName(SERIALIZED_NAME_SOURCE_PHASES)
  private List<String> sourcePhases = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private String wait;

  public AdvanceRolloutRule() {
  }

  public AdvanceRolloutRule condition(AutomationRuleCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public AutomationRuleCondition getCondition() {
    return condition;
  }

  public void setCondition(AutomationRuleCondition condition) {
    this.condition = condition;
  }


  public AdvanceRolloutRule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. ID of the rule. This id must be unique in the &#x60;Automation&#x60; resource to which this rule belongs. The format is &#x60;a-z{0,62}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AdvanceRolloutRule sourcePhases(List<String> sourcePhases) {
    this.sourcePhases = sourcePhases;
    return this;
  }

  public AdvanceRolloutRule addSourcePhasesItem(String sourcePhasesItem) {
    if (this.sourcePhases == null) {
      this.sourcePhases = new ArrayList<>();
    }
    this.sourcePhases.add(sourcePhasesItem);
    return this;
  }

  /**
   * Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: &#x60;^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$&#x60;.
   * @return sourcePhases
   */
  @javax.annotation.Nullable
  public List<String> getSourcePhases() {
    return sourcePhases;
  }

  public void setSourcePhases(List<String> sourcePhases) {
    this.sourcePhases = sourcePhases;
  }


  public AdvanceRolloutRule wait(String wait) {
    this.wait = wait;
    return this;
  }

  /**
   * Optional. How long to wait after a rollout is finished.
   * @return wait
   */
  @javax.annotation.Nullable
  public String getWait() {
    return wait;
  }

  public void setWait(String wait) {
    this.wait = wait;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvanceRolloutRule advanceRolloutRule = (AdvanceRolloutRule) o;
    return Objects.equals(this.condition, advanceRolloutRule.condition) &&
        Objects.equals(this.id, advanceRolloutRule.id) &&
        Objects.equals(this.sourcePhases, advanceRolloutRule.sourcePhases) &&
        Objects.equals(this.wait, advanceRolloutRule.wait);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, id, sourcePhases, wait);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvanceRolloutRule {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourcePhases: ").append(toIndentedString(sourcePhases)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("id");
    openapiFields.add("sourcePhases");
    openapiFields.add("wait");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvanceRolloutRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvanceRolloutRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvanceRolloutRule is not found in the empty JSON string", AdvanceRolloutRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvanceRolloutRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvanceRolloutRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        AutomationRuleCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourcePhases") != null && !jsonObj.get("sourcePhases").isJsonNull() && !jsonObj.get("sourcePhases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePhases` to be an array in the JSON string but got `%s`", jsonObj.get("sourcePhases").toString()));
      }
      if ((jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) && !jsonObj.get("wait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvanceRolloutRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvanceRolloutRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvanceRolloutRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvanceRolloutRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvanceRolloutRule>() {
           @Override
           public void write(JsonWriter out, AdvanceRolloutRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvanceRolloutRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvanceRolloutRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvanceRolloutRule
   * @throws IOException if the JSON string is invalid with respect to AdvanceRolloutRule
   */
  public static AdvanceRolloutRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvanceRolloutRule.class);
  }

  /**
   * Convert an instance of AdvanceRolloutRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

