/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Execution using a private Cloud Build pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivatePool {
  public static final String SERIALIZED_NAME_ARTIFACT_STORAGE = "artifactStorage";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_STORAGE)
  private String artifactStorage;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_WORKER_POOL = "workerPool";
  @SerializedName(SERIALIZED_NAME_WORKER_POOL)
  private String workerPool;

  public PrivatePool() {
  }

  public PrivatePool artifactStorage(String artifactStorage) {
    this.artifactStorage = artifactStorage;
    return this;
  }

  /**
   * Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket (\&quot;gs://my-bucket\&quot;) or a path within a bucket (\&quot;gs://my-bucket/my-dir\&quot;). If unspecified, a default bucket located in the same region will be used.
   * @return artifactStorage
   */
  @javax.annotation.Nullable
  public String getArtifactStorage() {
    return artifactStorage;
  }

  public void setArtifactStorage(String artifactStorage) {
    this.artifactStorage = artifactStorage;
  }


  public PrivatePool serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public PrivatePool workerPool(String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  /**
   * Required. Resource name of the Cloud Build worker pool to use. The format is &#x60;projects/{project}/locations/{location}/workerPools/{pool}&#x60;.
   * @return workerPool
   */
  @javax.annotation.Nullable
  public String getWorkerPool() {
    return workerPool;
  }

  public void setWorkerPool(String workerPool) {
    this.workerPool = workerPool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivatePool privatePool = (PrivatePool) o;
    return Objects.equals(this.artifactStorage, privatePool.artifactStorage) &&
        Objects.equals(this.serviceAccount, privatePool.serviceAccount) &&
        Objects.equals(this.workerPool, privatePool.workerPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactStorage, serviceAccount, workerPool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivatePool {\n");
    sb.append("    artifactStorage: ").append(toIndentedString(artifactStorage)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    workerPool: ").append(toIndentedString(workerPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactStorage");
    openapiFields.add("serviceAccount");
    openapiFields.add("workerPool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivatePool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivatePool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivatePool is not found in the empty JSON string", PrivatePool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivatePool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivatePool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactStorage") != null && !jsonObj.get("artifactStorage").isJsonNull()) && !jsonObj.get("artifactStorage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactStorage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactStorage").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("workerPool") != null && !jsonObj.get("workerPool").isJsonNull()) && !jsonObj.get("workerPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerPool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivatePool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivatePool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivatePool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivatePool.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivatePool>() {
           @Override
           public void write(JsonWriter out, PrivatePool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivatePool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivatePool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivatePool
   * @throws IOException if the JSON string is invalid with respect to PrivatePool
   */
  public static PrivatePool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivatePool.class);
  }

  /**
   * Convert an instance of PrivatePool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

