/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdvanceRolloutOperation;
import org.openapitools.client.model.Automation;
import org.openapitools.client.model.PromoteReleaseOperation;
import org.openapitools.client.model.RepairRolloutOperation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An &#x60;AutomationRun&#x60; resource in the Cloud Deploy API. An &#x60;AutomationRun&#x60; represents an execution instance of an automation rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationRun {
  public static final String SERIALIZED_NAME_ADVANCE_ROLLOUT_OPERATION = "advanceRolloutOperation";
  @SerializedName(SERIALIZED_NAME_ADVANCE_ROLLOUT_OPERATION)
  private AdvanceRolloutOperation advanceRolloutOperation;

  public static final String SERIALIZED_NAME_AUTOMATION_ID = "automationId";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_ID)
  private String automationId;

  public static final String SERIALIZED_NAME_AUTOMATION_SNAPSHOT = "automationSnapshot";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_SNAPSHOT)
  private Automation automationSnapshot;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROMOTE_RELEASE_OPERATION = "promoteReleaseOperation";
  @SerializedName(SERIALIZED_NAME_PROMOTE_RELEASE_OPERATION)
  private PromoteReleaseOperation promoteReleaseOperation;

  public static final String SERIALIZED_NAME_REPAIR_ROLLOUT_OPERATION = "repairRolloutOperation";
  @SerializedName(SERIALIZED_NAME_REPAIR_ROLLOUT_OPERATION)
  private RepairRolloutOperation repairRolloutOperation;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  /**
   * Output only. Current state of the &#x60;AutomationRun&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    PENDING("PENDING"),
    
    ABORTED("ABORTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_DESCRIPTION = "stateDescription";
  @SerializedName(SERIALIZED_NAME_STATE_DESCRIPTION)
  private String stateDescription;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WAIT_UNTIL_TIME = "waitUntilTime";
  @SerializedName(SERIALIZED_NAME_WAIT_UNTIL_TIME)
  private String waitUntilTime;

  public AutomationRun() {
  }

  public AutomationRun(
     String automationId, 
     String createTime, 
     String etag, 
     String expireTime, 
     String name, 
     String ruleId, 
     String serviceAccount, 
     StateEnum state, 
     String stateDescription, 
     String targetId, 
     String updateTime, 
     String waitUntilTime
  ) {
    this();
    this.automationId = automationId;
    this.createTime = createTime;
    this.etag = etag;
    this.expireTime = expireTime;
    this.name = name;
    this.ruleId = ruleId;
    this.serviceAccount = serviceAccount;
    this.state = state;
    this.stateDescription = stateDescription;
    this.targetId = targetId;
    this.updateTime = updateTime;
    this.waitUntilTime = waitUntilTime;
  }

  public AutomationRun advanceRolloutOperation(AdvanceRolloutOperation advanceRolloutOperation) {
    this.advanceRolloutOperation = advanceRolloutOperation;
    return this;
  }

  /**
   * Get advanceRolloutOperation
   * @return advanceRolloutOperation
   */
  @javax.annotation.Nullable
  public AdvanceRolloutOperation getAdvanceRolloutOperation() {
    return advanceRolloutOperation;
  }

  public void setAdvanceRolloutOperation(AdvanceRolloutOperation advanceRolloutOperation) {
    this.advanceRolloutOperation = advanceRolloutOperation;
  }


  /**
   * Output only. The ID of the automation that initiated the operation.
   * @return automationId
   */
  @javax.annotation.Nullable
  public String getAutomationId() {
    return automationId;
  }



  public AutomationRun automationSnapshot(Automation automationSnapshot) {
    this.automationSnapshot = automationSnapshot;
    return this;
  }

  /**
   * Get automationSnapshot
   * @return automationSnapshot
   */
  @javax.annotation.Nullable
  public Automation getAutomationSnapshot() {
    return automationSnapshot;
  }

  public void setAutomationSnapshot(Automation automationSnapshot) {
    this.automationSnapshot = automationSnapshot;
  }


  /**
   * Output only. Time at which the &#x60;AutomationRun&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The weak etag of the &#x60;AutomationRun&#x60; resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. Time the &#x60;AutomationRun&#x60; expires. An &#x60;AutomationRun&#x60; expires after 14 days from its creation date.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. Name of the &#x60;AutomationRun&#x60;. Format is &#x60;projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public AutomationRun promoteReleaseOperation(PromoteReleaseOperation promoteReleaseOperation) {
    this.promoteReleaseOperation = promoteReleaseOperation;
    return this;
  }

  /**
   * Get promoteReleaseOperation
   * @return promoteReleaseOperation
   */
  @javax.annotation.Nullable
  public PromoteReleaseOperation getPromoteReleaseOperation() {
    return promoteReleaseOperation;
  }

  public void setPromoteReleaseOperation(PromoteReleaseOperation promoteReleaseOperation) {
    this.promoteReleaseOperation = promoteReleaseOperation;
  }


  public AutomationRun repairRolloutOperation(RepairRolloutOperation repairRolloutOperation) {
    this.repairRolloutOperation = repairRolloutOperation;
    return this;
  }

  /**
   * Get repairRolloutOperation
   * @return repairRolloutOperation
   */
  @javax.annotation.Nullable
  public RepairRolloutOperation getRepairRolloutOperation() {
    return repairRolloutOperation;
  }

  public void setRepairRolloutOperation(RepairRolloutOperation repairRolloutOperation) {
    this.repairRolloutOperation = repairRolloutOperation;
  }


  /**
   * Output only. The ID of the automation rule that initiated the operation.
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }



  /**
   * Output only. Email address of the user-managed IAM service account that performs the operations against Cloud Deploy resources.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }



  /**
   * Output only. Current state of the &#x60;AutomationRun&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Explains the current state of the &#x60;AutomationRun&#x60;. Present only when an explanation is needed.
   * @return stateDescription
   */
  @javax.annotation.Nullable
  public String getStateDescription() {
    return stateDescription;
  }



  /**
   * Output only. The ID of the target that represents the promotion stage that initiates the &#x60;AutomationRun&#x60;. The value of this field is the last segment of a target name.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }



  /**
   * Output only. Time at which the automationRun was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. Earliest time the &#x60;AutomationRun&#x60; will attempt to resume. Wait-time is configured by &#x60;wait&#x60; in automation rule.
   * @return waitUntilTime
   */
  @javax.annotation.Nullable
  public String getWaitUntilTime() {
    return waitUntilTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationRun automationRun = (AutomationRun) o;
    return Objects.equals(this.advanceRolloutOperation, automationRun.advanceRolloutOperation) &&
        Objects.equals(this.automationId, automationRun.automationId) &&
        Objects.equals(this.automationSnapshot, automationRun.automationSnapshot) &&
        Objects.equals(this.createTime, automationRun.createTime) &&
        Objects.equals(this.etag, automationRun.etag) &&
        Objects.equals(this.expireTime, automationRun.expireTime) &&
        Objects.equals(this.name, automationRun.name) &&
        Objects.equals(this.promoteReleaseOperation, automationRun.promoteReleaseOperation) &&
        Objects.equals(this.repairRolloutOperation, automationRun.repairRolloutOperation) &&
        Objects.equals(this.ruleId, automationRun.ruleId) &&
        Objects.equals(this.serviceAccount, automationRun.serviceAccount) &&
        Objects.equals(this.state, automationRun.state) &&
        Objects.equals(this.stateDescription, automationRun.stateDescription) &&
        Objects.equals(this.targetId, automationRun.targetId) &&
        Objects.equals(this.updateTime, automationRun.updateTime) &&
        Objects.equals(this.waitUntilTime, automationRun.waitUntilTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceRolloutOperation, automationId, automationSnapshot, createTime, etag, expireTime, name, promoteReleaseOperation, repairRolloutOperation, ruleId, serviceAccount, state, stateDescription, targetId, updateTime, waitUntilTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationRun {\n");
    sb.append("    advanceRolloutOperation: ").append(toIndentedString(advanceRolloutOperation)).append("\n");
    sb.append("    automationId: ").append(toIndentedString(automationId)).append("\n");
    sb.append("    automationSnapshot: ").append(toIndentedString(automationSnapshot)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    promoteReleaseOperation: ").append(toIndentedString(promoteReleaseOperation)).append("\n");
    sb.append("    repairRolloutOperation: ").append(toIndentedString(repairRolloutOperation)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDescription: ").append(toIndentedString(stateDescription)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    waitUntilTime: ").append(toIndentedString(waitUntilTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanceRolloutOperation");
    openapiFields.add("automationId");
    openapiFields.add("automationSnapshot");
    openapiFields.add("createTime");
    openapiFields.add("etag");
    openapiFields.add("expireTime");
    openapiFields.add("name");
    openapiFields.add("promoteReleaseOperation");
    openapiFields.add("repairRolloutOperation");
    openapiFields.add("ruleId");
    openapiFields.add("serviceAccount");
    openapiFields.add("state");
    openapiFields.add("stateDescription");
    openapiFields.add("targetId");
    openapiFields.add("updateTime");
    openapiFields.add("waitUntilTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationRun is not found in the empty JSON string", AutomationRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advanceRolloutOperation`
      if (jsonObj.get("advanceRolloutOperation") != null && !jsonObj.get("advanceRolloutOperation").isJsonNull()) {
        AdvanceRolloutOperation.validateJsonElement(jsonObj.get("advanceRolloutOperation"));
      }
      if ((jsonObj.get("automationId") != null && !jsonObj.get("automationId").isJsonNull()) && !jsonObj.get("automationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automationId").toString()));
      }
      // validate the optional field `automationSnapshot`
      if (jsonObj.get("automationSnapshot") != null && !jsonObj.get("automationSnapshot").isJsonNull()) {
        Automation.validateJsonElement(jsonObj.get("automationSnapshot"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `promoteReleaseOperation`
      if (jsonObj.get("promoteReleaseOperation") != null && !jsonObj.get("promoteReleaseOperation").isJsonNull()) {
        PromoteReleaseOperation.validateJsonElement(jsonObj.get("promoteReleaseOperation"));
      }
      // validate the optional field `repairRolloutOperation`
      if (jsonObj.get("repairRolloutOperation") != null && !jsonObj.get("repairRolloutOperation").isJsonNull()) {
        RepairRolloutOperation.validateJsonElement(jsonObj.get("repairRolloutOperation"));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateDescription") != null && !jsonObj.get("stateDescription").isJsonNull()) && !jsonObj.get("stateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateDescription").toString()));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("waitUntilTime") != null && !jsonObj.get("waitUntilTime").isJsonNull()) && !jsonObj.get("waitUntilTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waitUntilTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waitUntilTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationRun.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationRun>() {
           @Override
           public void write(JsonWriter out, AutomationRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationRun
   * @throws IOException if the JSON string is invalid with respect to AutomationRun
   */
  public static AutomationRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationRun.class);
  }

  /**
   * Convert an instance of AutomationRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

