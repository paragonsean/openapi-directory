/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the Kubernetes Service networking configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceNetworking {
  public static final String SERIALIZED_NAME_DEPLOYMENT = "deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private String deployment;

  public static final String SERIALIZED_NAME_DISABLE_POD_OVERPROVISIONING = "disablePodOverprovisioning";
  @SerializedName(SERIALIZED_NAME_DISABLE_POD_OVERPROVISIONING)
  private Boolean disablePodOverprovisioning;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public ServiceNetworking() {
  }

  public ServiceNetworking deployment(String deployment) {
    this.deployment = deployment;
    return this;
  }

  /**
   * Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
   * @return deployment
   */
  @javax.annotation.Nullable
  public String getDeployment() {
    return deployment;
  }

  public void setDeployment(String deployment) {
    this.deployment = deployment;
  }


  public ServiceNetworking disablePodOverprovisioning(Boolean disablePodOverprovisioning) {
    this.disablePodOverprovisioning = disablePodOverprovisioning;
    return this;
  }

  /**
   * Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
   * @return disablePodOverprovisioning
   */
  @javax.annotation.Nullable
  public Boolean getDisablePodOverprovisioning() {
    return disablePodOverprovisioning;
  }

  public void setDisablePodOverprovisioning(Boolean disablePodOverprovisioning) {
    this.disablePodOverprovisioning = disablePodOverprovisioning;
  }


  public ServiceNetworking service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Required. Name of the Kubernetes Service.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceNetworking serviceNetworking = (ServiceNetworking) o;
    return Objects.equals(this.deployment, serviceNetworking.deployment) &&
        Objects.equals(this.disablePodOverprovisioning, serviceNetworking.disablePodOverprovisioning) &&
        Objects.equals(this.service, serviceNetworking.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployment, disablePodOverprovisioning, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceNetworking {\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    disablePodOverprovisioning: ").append(toIndentedString(disablePodOverprovisioning)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployment");
    openapiFields.add("disablePodOverprovisioning");
    openapiFields.add("service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceNetworking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceNetworking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceNetworking is not found in the empty JSON string", ServiceNetworking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceNetworking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceNetworking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deployment") != null && !jsonObj.get("deployment").isJsonNull()) && !jsonObj.get("deployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployment").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceNetworking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceNetworking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceNetworking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceNetworking.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceNetworking>() {
           @Override
           public void write(JsonWriter out, ServiceNetworking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceNetworking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceNetworking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceNetworking
   * @throws IOException if the JSON string is invalid with respect to ServiceNetworking
   */
  public static ServiceNetworking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceNetworking.class);
  }

  /**
   * Convert an instance of ServiceNetworking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

