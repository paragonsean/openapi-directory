/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Retries the failed job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Retry {
  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private String attempts;

  /**
   * Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if &#x60;wait&#x60; is 0.
   */
  @JsonAdapter(BackoffModeEnum.Adapter.class)
  public enum BackoffModeEnum {
    UNSPECIFIED("BACKOFF_MODE_UNSPECIFIED"),
    
    LINEAR("BACKOFF_MODE_LINEAR"),
    
    EXPONENTIAL("BACKOFF_MODE_EXPONENTIAL");

    private String value;

    BackoffModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackoffModeEnum fromValue(String value) {
      for (BackoffModeEnum b : BackoffModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackoffModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackoffModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackoffModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackoffModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackoffModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKOFF_MODE = "backoffMode";
  @SerializedName(SERIALIZED_NAME_BACKOFF_MODE)
  private BackoffModeEnum backoffMode;

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private String wait;

  public Retry() {
  }

  public Retry attempts(String attempts) {
    this.attempts = attempts;
    return this;
  }

  /**
   * Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
   * @return attempts
   */
  @javax.annotation.Nullable
  public String getAttempts() {
    return attempts;
  }

  public void setAttempts(String attempts) {
    this.attempts = attempts;
  }


  public Retry backoffMode(BackoffModeEnum backoffMode) {
    this.backoffMode = backoffMode;
    return this;
  }

  /**
   * Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if &#x60;wait&#x60; is 0.
   * @return backoffMode
   */
  @javax.annotation.Nullable
  public BackoffModeEnum getBackoffMode() {
    return backoffMode;
  }

  public void setBackoffMode(BackoffModeEnum backoffMode) {
    this.backoffMode = backoffMode;
  }


  public Retry wait(String wait) {
    this.wait = wait;
    return this;
  }

  /**
   * Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
   * @return wait
   */
  @javax.annotation.Nullable
  public String getWait() {
    return wait;
  }

  public void setWait(String wait) {
    this.wait = wait;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Retry retry = (Retry) o;
    return Objects.equals(this.attempts, retry.attempts) &&
        Objects.equals(this.backoffMode, retry.backoffMode) &&
        Objects.equals(this.wait, retry.wait);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attempts, backoffMode, wait);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Retry {\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    backoffMode: ").append(toIndentedString(backoffMode)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attempts");
    openapiFields.add("backoffMode");
    openapiFields.add("wait");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Retry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Retry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Retry is not found in the empty JSON string", Retry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Retry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Retry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attempts") != null && !jsonObj.get("attempts").isJsonNull()) && !jsonObj.get("attempts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attempts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attempts").toString()));
      }
      if ((jsonObj.get("backoffMode") != null && !jsonObj.get("backoffMode").isJsonNull()) && !jsonObj.get("backoffMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backoffMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backoffMode").toString()));
      }
      // validate the optional field `backoffMode`
      if (jsonObj.get("backoffMode") != null && !jsonObj.get("backoffMode").isJsonNull()) {
        BackoffModeEnum.validateJsonElement(jsonObj.get("backoffMode"));
      }
      if ((jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) && !jsonObj.get("wait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Retry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Retry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Retry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Retry.class));

       return (TypeAdapter<T>) new TypeAdapter<Retry>() {
           @Override
           public void write(JsonWriter out, Retry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Retry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Retry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Retry
   * @throws IOException if the JSON string is invalid with respect to Retry
   */
  public static Retry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Retry.class);
  }

  /**
   * Convert an instance of Retry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

