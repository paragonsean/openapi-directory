/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BuildArtifact;
import org.openapitools.client.model.CustomTargetType;
import org.openapitools.client.model.DeliveryPipeline;
import org.openapitools.client.model.ReleaseCondition;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.TargetArtifact;
import org.openapitools.client.model.TargetRender;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Release&#x60; resource in the Cloud Deploy API. A &#x60;Release&#x60; defines a specific Skaffold configuration instance that can be deployed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Release {
  public static final String SERIALIZED_NAME_ABANDONED = "abandoned";
  @SerializedName(SERIALIZED_NAME_ABANDONED)
  private Boolean abandoned;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_BUILD_ARTIFACTS = "buildArtifacts";
  @SerializedName(SERIALIZED_NAME_BUILD_ARTIFACTS)
  private List<BuildArtifact> buildArtifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ReleaseCondition condition;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_TARGET_TYPE_SNAPSHOTS = "customTargetTypeSnapshots";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TARGET_TYPE_SNAPSHOTS)
  private List<CustomTargetType> customTargetTypeSnapshots = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY_PIPELINE_SNAPSHOT = "deliveryPipelineSnapshot";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PIPELINE_SNAPSHOT)
  private DeliveryPipeline deliveryPipelineSnapshot;

  public static final String SERIALIZED_NAME_DEPLOY_PARAMETERS = "deployParameters";
  @SerializedName(SERIALIZED_NAME_DEPLOY_PARAMETERS)
  private Map<String, String> deployParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RENDER_END_TIME = "renderEndTime";
  @SerializedName(SERIALIZED_NAME_RENDER_END_TIME)
  private String renderEndTime;

  public static final String SERIALIZED_NAME_RENDER_START_TIME = "renderStartTime";
  @SerializedName(SERIALIZED_NAME_RENDER_START_TIME)
  private String renderStartTime;

  /**
   * Output only. Current state of the render operation.
   */
  @JsonAdapter(RenderStateEnum.Adapter.class)
  public enum RenderStateEnum {
    RENDER_STATE_UNSPECIFIED("RENDER_STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS");

    private String value;

    RenderStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderStateEnum fromValue(String value) {
      for (RenderStateEnum b : RenderStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenderStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenderStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RenderStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENDER_STATE = "renderState";
  @SerializedName(SERIALIZED_NAME_RENDER_STATE)
  private RenderStateEnum renderState;

  public static final String SERIALIZED_NAME_SKAFFOLD_CONFIG_PATH = "skaffoldConfigPath";
  @SerializedName(SERIALIZED_NAME_SKAFFOLD_CONFIG_PATH)
  private String skaffoldConfigPath;

  public static final String SERIALIZED_NAME_SKAFFOLD_CONFIG_URI = "skaffoldConfigUri";
  @SerializedName(SERIALIZED_NAME_SKAFFOLD_CONFIG_URI)
  private String skaffoldConfigUri;

  public static final String SERIALIZED_NAME_SKAFFOLD_VERSION = "skaffoldVersion";
  @SerializedName(SERIALIZED_NAME_SKAFFOLD_VERSION)
  private String skaffoldVersion;

  public static final String SERIALIZED_NAME_TARGET_ARTIFACTS = "targetArtifacts";
  @SerializedName(SERIALIZED_NAME_TARGET_ARTIFACTS)
  private Map<String, TargetArtifact> targetArtifacts = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_RENDERS = "targetRenders";
  @SerializedName(SERIALIZED_NAME_TARGET_RENDERS)
  private Map<String, TargetRender> targetRenders = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_SNAPSHOTS = "targetSnapshots";
  @SerializedName(SERIALIZED_NAME_TARGET_SNAPSHOTS)
  private List<Target> targetSnapshots = new ArrayList<>();

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public Release() {
  }

  public Release(
     Boolean abandoned, 
     String createTime, 
     List<CustomTargetType> customTargetTypeSnapshots, 
     String renderEndTime, 
     String renderStartTime, 
     RenderStateEnum renderState, 
     Map<String, TargetArtifact> targetArtifacts, 
     Map<String, TargetRender> targetRenders, 
     List<Target> targetSnapshots, 
     String uid
  ) {
    this();
    this.abandoned = abandoned;
    this.createTime = createTime;
    this.customTargetTypeSnapshots = customTargetTypeSnapshots;
    this.renderEndTime = renderEndTime;
    this.renderStartTime = renderStartTime;
    this.renderState = renderState;
    this.targetArtifacts = targetArtifacts;
    this.targetRenders = targetRenders;
    this.targetSnapshots = targetSnapshots;
    this.uid = uid;
  }

  /**
   * Output only. Indicates whether this is an abandoned release.
   * @return abandoned
   */
  @javax.annotation.Nullable
  public Boolean getAbandoned() {
    return abandoned;
  }



  public Release annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Release putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public Release buildArtifacts(List<BuildArtifact> buildArtifacts) {
    this.buildArtifacts = buildArtifacts;
    return this;
  }

  public Release addBuildArtifactsItem(BuildArtifact buildArtifactsItem) {
    if (this.buildArtifacts == null) {
      this.buildArtifacts = new ArrayList<>();
    }
    this.buildArtifacts.add(buildArtifactsItem);
    return this;
  }

  /**
   * List of artifacts to pass through to Skaffold command.
   * @return buildArtifacts
   */
  @javax.annotation.Nullable
  public List<BuildArtifact> getBuildArtifacts() {
    return buildArtifacts;
  }

  public void setBuildArtifacts(List<BuildArtifact> buildArtifacts) {
    this.buildArtifacts = buildArtifacts;
  }


  public Release condition(ReleaseCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public ReleaseCondition getCondition() {
    return condition;
  }

  public void setCondition(ReleaseCondition condition) {
    this.condition = condition;
  }


  /**
   * Output only. Time at which the &#x60;Release&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Snapshot of the custom target types referenced by the targets taken at release creation time.
   * @return customTargetTypeSnapshots
   */
  @javax.annotation.Nullable
  public List<CustomTargetType> getCustomTargetTypeSnapshots() {
    return customTargetTypeSnapshots;
  }



  public Release deliveryPipelineSnapshot(DeliveryPipeline deliveryPipelineSnapshot) {
    this.deliveryPipelineSnapshot = deliveryPipelineSnapshot;
    return this;
  }

  /**
   * Get deliveryPipelineSnapshot
   * @return deliveryPipelineSnapshot
   */
  @javax.annotation.Nullable
  public DeliveryPipeline getDeliveryPipelineSnapshot() {
    return deliveryPipelineSnapshot;
  }

  public void setDeliveryPipelineSnapshot(DeliveryPipeline deliveryPipelineSnapshot) {
    this.deliveryPipelineSnapshot = deliveryPipelineSnapshot;
  }


  public Release deployParameters(Map<String, String> deployParameters) {
    this.deployParameters = deployParameters;
    return this;
  }

  public Release putDeployParametersItem(String key, String deployParametersItem) {
    if (this.deployParameters == null) {
      this.deployParameters = new HashMap<>();
    }
    this.deployParameters.put(key, deployParametersItem);
    return this;
  }

  /**
   * Optional. The deploy parameters to use for all targets in this release.
   * @return deployParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getDeployParameters() {
    return deployParameters;
  }

  public void setDeployParameters(Map<String, String> deployParameters) {
    this.deployParameters = deployParameters;
  }


  public Release description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the &#x60;Release&#x60;. Max length is 255 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Release etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Release labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Release putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;&#x3D; 128 bytes.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Release name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Name of the &#x60;Release&#x60;. Format is &#x60;projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Time at which the render completed.
   * @return renderEndTime
   */
  @javax.annotation.Nullable
  public String getRenderEndTime() {
    return renderEndTime;
  }



  /**
   * Output only. Time at which the render began.
   * @return renderStartTime
   */
  @javax.annotation.Nullable
  public String getRenderStartTime() {
    return renderStartTime;
  }



  /**
   * Output only. Current state of the render operation.
   * @return renderState
   */
  @javax.annotation.Nullable
  public RenderStateEnum getRenderState() {
    return renderState;
  }



  public Release skaffoldConfigPath(String skaffoldConfigPath) {
    this.skaffoldConfigPath = skaffoldConfigPath;
    return this;
  }

  /**
   * Filepath of the Skaffold config inside of the config URI.
   * @return skaffoldConfigPath
   */
  @javax.annotation.Nullable
  public String getSkaffoldConfigPath() {
    return skaffoldConfigPath;
  }

  public void setSkaffoldConfigPath(String skaffoldConfigPath) {
    this.skaffoldConfigPath = skaffoldConfigPath;
  }


  public Release skaffoldConfigUri(String skaffoldConfigUri) {
    this.skaffoldConfigUri = skaffoldConfigUri;
    return this;
  }

  /**
   * Cloud Storage URI of tar.gz archive containing Skaffold configuration.
   * @return skaffoldConfigUri
   */
  @javax.annotation.Nullable
  public String getSkaffoldConfigUri() {
    return skaffoldConfigUri;
  }

  public void setSkaffoldConfigUri(String skaffoldConfigUri) {
    this.skaffoldConfigUri = skaffoldConfigUri;
  }


  public Release skaffoldVersion(String skaffoldVersion) {
    this.skaffoldVersion = skaffoldVersion;
    return this;
  }

  /**
   * The Skaffold version to use when operating on this release, such as \&quot;1.20.0\&quot;. Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
   * @return skaffoldVersion
   */
  @javax.annotation.Nullable
  public String getSkaffoldVersion() {
    return skaffoldVersion;
  }

  public void setSkaffoldVersion(String skaffoldVersion) {
    this.skaffoldVersion = skaffoldVersion;
  }


  /**
   * Output only. Map from target ID to the target artifacts created during the render operation.
   * @return targetArtifacts
   */
  @javax.annotation.Nullable
  public Map<String, TargetArtifact> getTargetArtifacts() {
    return targetArtifacts;
  }



  /**
   * Output only. Map from target ID to details of the render operation for that target.
   * @return targetRenders
   */
  @javax.annotation.Nullable
  public Map<String, TargetRender> getTargetRenders() {
    return targetRenders;
  }



  /**
   * Output only. Snapshot of the targets taken at release creation time.
   * @return targetSnapshots
   */
  @javax.annotation.Nullable
  public List<Target> getTargetSnapshots() {
    return targetSnapshots;
  }



  /**
   * Output only. Unique identifier of the &#x60;Release&#x60;.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Release release = (Release) o;
    return Objects.equals(this.abandoned, release.abandoned) &&
        Objects.equals(this.annotations, release.annotations) &&
        Objects.equals(this.buildArtifacts, release.buildArtifacts) &&
        Objects.equals(this.condition, release.condition) &&
        Objects.equals(this.createTime, release.createTime) &&
        Objects.equals(this.customTargetTypeSnapshots, release.customTargetTypeSnapshots) &&
        Objects.equals(this.deliveryPipelineSnapshot, release.deliveryPipelineSnapshot) &&
        Objects.equals(this.deployParameters, release.deployParameters) &&
        Objects.equals(this.description, release.description) &&
        Objects.equals(this.etag, release.etag) &&
        Objects.equals(this.labels, release.labels) &&
        Objects.equals(this.name, release.name) &&
        Objects.equals(this.renderEndTime, release.renderEndTime) &&
        Objects.equals(this.renderStartTime, release.renderStartTime) &&
        Objects.equals(this.renderState, release.renderState) &&
        Objects.equals(this.skaffoldConfigPath, release.skaffoldConfigPath) &&
        Objects.equals(this.skaffoldConfigUri, release.skaffoldConfigUri) &&
        Objects.equals(this.skaffoldVersion, release.skaffoldVersion) &&
        Objects.equals(this.targetArtifacts, release.targetArtifacts) &&
        Objects.equals(this.targetRenders, release.targetRenders) &&
        Objects.equals(this.targetSnapshots, release.targetSnapshots) &&
        Objects.equals(this.uid, release.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abandoned, annotations, buildArtifacts, condition, createTime, customTargetTypeSnapshots, deliveryPipelineSnapshot, deployParameters, description, etag, labels, name, renderEndTime, renderStartTime, renderState, skaffoldConfigPath, skaffoldConfigUri, skaffoldVersion, targetArtifacts, targetRenders, targetSnapshots, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Release {\n");
    sb.append("    abandoned: ").append(toIndentedString(abandoned)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    buildArtifacts: ").append(toIndentedString(buildArtifacts)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customTargetTypeSnapshots: ").append(toIndentedString(customTargetTypeSnapshots)).append("\n");
    sb.append("    deliveryPipelineSnapshot: ").append(toIndentedString(deliveryPipelineSnapshot)).append("\n");
    sb.append("    deployParameters: ").append(toIndentedString(deployParameters)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    renderEndTime: ").append(toIndentedString(renderEndTime)).append("\n");
    sb.append("    renderStartTime: ").append(toIndentedString(renderStartTime)).append("\n");
    sb.append("    renderState: ").append(toIndentedString(renderState)).append("\n");
    sb.append("    skaffoldConfigPath: ").append(toIndentedString(skaffoldConfigPath)).append("\n");
    sb.append("    skaffoldConfigUri: ").append(toIndentedString(skaffoldConfigUri)).append("\n");
    sb.append("    skaffoldVersion: ").append(toIndentedString(skaffoldVersion)).append("\n");
    sb.append("    targetArtifacts: ").append(toIndentedString(targetArtifacts)).append("\n");
    sb.append("    targetRenders: ").append(toIndentedString(targetRenders)).append("\n");
    sb.append("    targetSnapshots: ").append(toIndentedString(targetSnapshots)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abandoned");
    openapiFields.add("annotations");
    openapiFields.add("buildArtifacts");
    openapiFields.add("condition");
    openapiFields.add("createTime");
    openapiFields.add("customTargetTypeSnapshots");
    openapiFields.add("deliveryPipelineSnapshot");
    openapiFields.add("deployParameters");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("renderEndTime");
    openapiFields.add("renderStartTime");
    openapiFields.add("renderState");
    openapiFields.add("skaffoldConfigPath");
    openapiFields.add("skaffoldConfigUri");
    openapiFields.add("skaffoldVersion");
    openapiFields.add("targetArtifacts");
    openapiFields.add("targetRenders");
    openapiFields.add("targetSnapshots");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Release
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Release.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Release is not found in the empty JSON string", Release.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Release.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Release` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("buildArtifacts") != null && !jsonObj.get("buildArtifacts").isJsonNull()) {
        JsonArray jsonArraybuildArtifacts = jsonObj.getAsJsonArray("buildArtifacts");
        if (jsonArraybuildArtifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buildArtifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buildArtifacts` to be an array in the JSON string but got `%s`", jsonObj.get("buildArtifacts").toString()));
          }

          // validate the optional field `buildArtifacts` (array)
          for (int i = 0; i < jsonArraybuildArtifacts.size(); i++) {
            BuildArtifact.validateJsonElement(jsonArraybuildArtifacts.get(i));
          };
        }
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ReleaseCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("customTargetTypeSnapshots") != null && !jsonObj.get("customTargetTypeSnapshots").isJsonNull()) {
        JsonArray jsonArraycustomTargetTypeSnapshots = jsonObj.getAsJsonArray("customTargetTypeSnapshots");
        if (jsonArraycustomTargetTypeSnapshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customTargetTypeSnapshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customTargetTypeSnapshots` to be an array in the JSON string but got `%s`", jsonObj.get("customTargetTypeSnapshots").toString()));
          }

          // validate the optional field `customTargetTypeSnapshots` (array)
          for (int i = 0; i < jsonArraycustomTargetTypeSnapshots.size(); i++) {
            CustomTargetType.validateJsonElement(jsonArraycustomTargetTypeSnapshots.get(i));
          };
        }
      }
      // validate the optional field `deliveryPipelineSnapshot`
      if (jsonObj.get("deliveryPipelineSnapshot") != null && !jsonObj.get("deliveryPipelineSnapshot").isJsonNull()) {
        DeliveryPipeline.validateJsonElement(jsonObj.get("deliveryPipelineSnapshot"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("renderEndTime") != null && !jsonObj.get("renderEndTime").isJsonNull()) && !jsonObj.get("renderEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderEndTime").toString()));
      }
      if ((jsonObj.get("renderStartTime") != null && !jsonObj.get("renderStartTime").isJsonNull()) && !jsonObj.get("renderStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderStartTime").toString()));
      }
      if ((jsonObj.get("renderState") != null && !jsonObj.get("renderState").isJsonNull()) && !jsonObj.get("renderState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderState").toString()));
      }
      // validate the optional field `renderState`
      if (jsonObj.get("renderState") != null && !jsonObj.get("renderState").isJsonNull()) {
        RenderStateEnum.validateJsonElement(jsonObj.get("renderState"));
      }
      if ((jsonObj.get("skaffoldConfigPath") != null && !jsonObj.get("skaffoldConfigPath").isJsonNull()) && !jsonObj.get("skaffoldConfigPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skaffoldConfigPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skaffoldConfigPath").toString()));
      }
      if ((jsonObj.get("skaffoldConfigUri") != null && !jsonObj.get("skaffoldConfigUri").isJsonNull()) && !jsonObj.get("skaffoldConfigUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skaffoldConfigUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skaffoldConfigUri").toString()));
      }
      if ((jsonObj.get("skaffoldVersion") != null && !jsonObj.get("skaffoldVersion").isJsonNull()) && !jsonObj.get("skaffoldVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skaffoldVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skaffoldVersion").toString()));
      }
      if (jsonObj.get("targetSnapshots") != null && !jsonObj.get("targetSnapshots").isJsonNull()) {
        JsonArray jsonArraytargetSnapshots = jsonObj.getAsJsonArray("targetSnapshots");
        if (jsonArraytargetSnapshots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetSnapshots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetSnapshots` to be an array in the JSON string but got `%s`", jsonObj.get("targetSnapshots").toString()));
          }

          // validate the optional field `targetSnapshots` (array)
          for (int i = 0; i < jsonArraytargetSnapshots.size(); i++) {
            Target.validateJsonElement(jsonArraytargetSnapshots.get(i));
          };
        }
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Release.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Release' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Release> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Release.class));

       return (TypeAdapter<T>) new TypeAdapter<Release>() {
           @Override
           public void write(JsonWriter out, Release value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Release read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Release given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Release
   * @throws IOException if the JSON string is invalid with respect to Release
   */
  public static Release fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Release.class);
  }

  /**
   * Convert an instance of Release to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

