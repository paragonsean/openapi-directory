/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SkaffoldModules;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomTargetSkaffoldActions represents the &#x60;CustomTargetType&#x60; configuration using Skaffold custom actions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomTargetSkaffoldActions {
  public static final String SERIALIZED_NAME_DEPLOY_ACTION = "deployAction";
  @SerializedName(SERIALIZED_NAME_DEPLOY_ACTION)
  private String deployAction;

  public static final String SERIALIZED_NAME_INCLUDE_SKAFFOLD_MODULES = "includeSkaffoldModules";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SKAFFOLD_MODULES)
  private List<SkaffoldModules> includeSkaffoldModules = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENDER_ACTION = "renderAction";
  @SerializedName(SERIALIZED_NAME_RENDER_ACTION)
  private String renderAction;

  public CustomTargetSkaffoldActions() {
  }

  public CustomTargetSkaffoldActions deployAction(String deployAction) {
    this.deployAction = deployAction;
    return this;
  }

  /**
   * Required. The Skaffold custom action responsible for deploy operations.
   * @return deployAction
   */
  @javax.annotation.Nullable
  public String getDeployAction() {
    return deployAction;
  }

  public void setDeployAction(String deployAction) {
    this.deployAction = deployAction;
  }


  public CustomTargetSkaffoldActions includeSkaffoldModules(List<SkaffoldModules> includeSkaffoldModules) {
    this.includeSkaffoldModules = includeSkaffoldModules;
    return this;
  }

  public CustomTargetSkaffoldActions addIncludeSkaffoldModulesItem(SkaffoldModules includeSkaffoldModulesItem) {
    if (this.includeSkaffoldModules == null) {
      this.includeSkaffoldModules = new ArrayList<>();
    }
    this.includeSkaffoldModules.add(includeSkaffoldModulesItem);
    return this;
  }

  /**
   * Optional. List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.
   * @return includeSkaffoldModules
   */
  @javax.annotation.Nullable
  public List<SkaffoldModules> getIncludeSkaffoldModules() {
    return includeSkaffoldModules;
  }

  public void setIncludeSkaffoldModules(List<SkaffoldModules> includeSkaffoldModules) {
    this.includeSkaffoldModules = includeSkaffoldModules;
  }


  public CustomTargetSkaffoldActions renderAction(String renderAction) {
    this.renderAction = renderAction;
    return this;
  }

  /**
   * Optional. The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via &#x60;skaffold render&#x60;.
   * @return renderAction
   */
  @javax.annotation.Nullable
  public String getRenderAction() {
    return renderAction;
  }

  public void setRenderAction(String renderAction) {
    this.renderAction = renderAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTargetSkaffoldActions customTargetSkaffoldActions = (CustomTargetSkaffoldActions) o;
    return Objects.equals(this.deployAction, customTargetSkaffoldActions.deployAction) &&
        Objects.equals(this.includeSkaffoldModules, customTargetSkaffoldActions.includeSkaffoldModules) &&
        Objects.equals(this.renderAction, customTargetSkaffoldActions.renderAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployAction, includeSkaffoldModules, renderAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTargetSkaffoldActions {\n");
    sb.append("    deployAction: ").append(toIndentedString(deployAction)).append("\n");
    sb.append("    includeSkaffoldModules: ").append(toIndentedString(includeSkaffoldModules)).append("\n");
    sb.append("    renderAction: ").append(toIndentedString(renderAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployAction");
    openapiFields.add("includeSkaffoldModules");
    openapiFields.add("renderAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomTargetSkaffoldActions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomTargetSkaffoldActions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomTargetSkaffoldActions is not found in the empty JSON string", CustomTargetSkaffoldActions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomTargetSkaffoldActions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomTargetSkaffoldActions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deployAction") != null && !jsonObj.get("deployAction").isJsonNull()) && !jsonObj.get("deployAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployAction").toString()));
      }
      if (jsonObj.get("includeSkaffoldModules") != null && !jsonObj.get("includeSkaffoldModules").isJsonNull()) {
        JsonArray jsonArrayincludeSkaffoldModules = jsonObj.getAsJsonArray("includeSkaffoldModules");
        if (jsonArrayincludeSkaffoldModules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includeSkaffoldModules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includeSkaffoldModules` to be an array in the JSON string but got `%s`", jsonObj.get("includeSkaffoldModules").toString()));
          }

          // validate the optional field `includeSkaffoldModules` (array)
          for (int i = 0; i < jsonArrayincludeSkaffoldModules.size(); i++) {
            SkaffoldModules.validateJsonElement(jsonArrayincludeSkaffoldModules.get(i));
          };
        }
      }
      if ((jsonObj.get("renderAction") != null && !jsonObj.get("renderAction").isJsonNull()) && !jsonObj.get("renderAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderAction").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomTargetSkaffoldActions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomTargetSkaffoldActions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomTargetSkaffoldActions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomTargetSkaffoldActions.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomTargetSkaffoldActions>() {
           @Override
           public void write(JsonWriter out, CustomTargetSkaffoldActions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomTargetSkaffoldActions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomTargetSkaffoldActions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomTargetSkaffoldActions
   * @throws IOException if the JSON string is invalid with respect to CustomTargetSkaffoldActions
   */
  public static CustomTargetSkaffoldActions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomTargetSkaffoldActions.class);
  }

  /**
   * Convert an instance of CustomTargetSkaffoldActions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

