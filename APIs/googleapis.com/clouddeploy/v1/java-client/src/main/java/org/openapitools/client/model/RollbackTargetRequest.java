/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RollbackTargetConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request object for &#x60;RollbackTarget&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollbackTargetRequest {
  public static final String SERIALIZED_NAME_RELEASE_ID = "releaseId";
  @SerializedName(SERIALIZED_NAME_RELEASE_ID)
  private String releaseId;

  public static final String SERIALIZED_NAME_ROLLBACK_CONFIG = "rollbackConfig";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_CONFIG)
  private RollbackTargetConfig rollbackConfig;

  public static final String SERIALIZED_NAME_ROLLOUT_ID = "rolloutId";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_ID)
  private String rolloutId;

  public static final String SERIALIZED_NAME_ROLLOUT_TO_ROLL_BACK = "rolloutToRollBack";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_TO_ROLL_BACK)
  private String rolloutToRollBack;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public RollbackTargetRequest() {
  }

  public RollbackTargetRequest releaseId(String releaseId) {
    this.releaseId = releaseId;
    return this;
  }

  /**
   * Optional. ID of the &#x60;Release&#x60; to roll back to. If this isn&#39;t specified, the previous successful &#x60;Rollout&#x60; to the specified target will be used to determine the &#x60;Release&#x60;.
   * @return releaseId
   */
  @javax.annotation.Nullable
  public String getReleaseId() {
    return releaseId;
  }

  public void setReleaseId(String releaseId) {
    this.releaseId = releaseId;
  }


  public RollbackTargetRequest rollbackConfig(RollbackTargetConfig rollbackConfig) {
    this.rollbackConfig = rollbackConfig;
    return this;
  }

  /**
   * Get rollbackConfig
   * @return rollbackConfig
   */
  @javax.annotation.Nullable
  public RollbackTargetConfig getRollbackConfig() {
    return rollbackConfig;
  }

  public void setRollbackConfig(RollbackTargetConfig rollbackConfig) {
    this.rollbackConfig = rollbackConfig;
  }


  public RollbackTargetRequest rolloutId(String rolloutId) {
    this.rolloutId = rolloutId;
    return this;
  }

  /**
   * Required. ID of the rollback &#x60;Rollout&#x60; to create.
   * @return rolloutId
   */
  @javax.annotation.Nullable
  public String getRolloutId() {
    return rolloutId;
  }

  public void setRolloutId(String rolloutId) {
    this.rolloutId = rolloutId;
  }


  public RollbackTargetRequest rolloutToRollBack(String rolloutToRollBack) {
    this.rolloutToRollBack = rolloutToRollBack;
    return this;
  }

  /**
   * Optional. If provided, this must be the latest &#x60;Rollout&#x60; that is on the &#x60;Target&#x60;.
   * @return rolloutToRollBack
   */
  @javax.annotation.Nullable
  public String getRolloutToRollBack() {
    return rolloutToRollBack;
  }

  public void setRolloutToRollBack(String rolloutToRollBack) {
    this.rolloutToRollBack = rolloutToRollBack;
  }


  public RollbackTargetRequest targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Required. ID of the &#x60;Target&#x60; that is being rolled back.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public RollbackTargetRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Optional. If set to true, the request is validated and the user is provided with a &#x60;RollbackTargetResponse&#x60;.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollbackTargetRequest rollbackTargetRequest = (RollbackTargetRequest) o;
    return Objects.equals(this.releaseId, rollbackTargetRequest.releaseId) &&
        Objects.equals(this.rollbackConfig, rollbackTargetRequest.rollbackConfig) &&
        Objects.equals(this.rolloutId, rollbackTargetRequest.rolloutId) &&
        Objects.equals(this.rolloutToRollBack, rollbackTargetRequest.rolloutToRollBack) &&
        Objects.equals(this.targetId, rollbackTargetRequest.targetId) &&
        Objects.equals(this.validateOnly, rollbackTargetRequest.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(releaseId, rollbackConfig, rolloutId, rolloutToRollBack, targetId, validateOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollbackTargetRequest {\n");
    sb.append("    releaseId: ").append(toIndentedString(releaseId)).append("\n");
    sb.append("    rollbackConfig: ").append(toIndentedString(rollbackConfig)).append("\n");
    sb.append("    rolloutId: ").append(toIndentedString(rolloutId)).append("\n");
    sb.append("    rolloutToRollBack: ").append(toIndentedString(rolloutToRollBack)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("releaseId");
    openapiFields.add("rollbackConfig");
    openapiFields.add("rolloutId");
    openapiFields.add("rolloutToRollBack");
    openapiFields.add("targetId");
    openapiFields.add("validateOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollbackTargetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollbackTargetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollbackTargetRequest is not found in the empty JSON string", RollbackTargetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollbackTargetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollbackTargetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("releaseId") != null && !jsonObj.get("releaseId").isJsonNull()) && !jsonObj.get("releaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseId").toString()));
      }
      // validate the optional field `rollbackConfig`
      if (jsonObj.get("rollbackConfig") != null && !jsonObj.get("rollbackConfig").isJsonNull()) {
        RollbackTargetConfig.validateJsonElement(jsonObj.get("rollbackConfig"));
      }
      if ((jsonObj.get("rolloutId") != null && !jsonObj.get("rolloutId").isJsonNull()) && !jsonObj.get("rolloutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolloutId").toString()));
      }
      if ((jsonObj.get("rolloutToRollBack") != null && !jsonObj.get("rolloutToRollBack").isJsonNull()) && !jsonObj.get("rolloutToRollBack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutToRollBack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolloutToRollBack").toString()));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollbackTargetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollbackTargetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollbackTargetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollbackTargetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RollbackTargetRequest>() {
           @Override
           public void write(JsonWriter out, RollbackTargetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollbackTargetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollbackTargetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollbackTargetRequest
   * @throws IOException if the JSON string is invalid with respect to RollbackTargetRequest
   */
  public static RollbackTargetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollbackTargetRequest.class);
  }

  /**
   * Convert an instance of RollbackTargetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

