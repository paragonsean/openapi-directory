/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload proto for \&quot;clouddeploy.googleapis.com/automation_run\&quot; Platform Log event that describes the AutomationRun related events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationRunEvent {
  public static final String SERIALIZED_NAME_AUTOMATION_ID = "automationId";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_ID)
  private String automationId;

  public static final String SERIALIZED_NAME_AUTOMATION_RUN = "automationRun";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_RUN)
  private String automationRun;

  public static final String SERIALIZED_NAME_DESTINATION_TARGET_ID = "destinationTargetId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TARGET_ID)
  private String destinationTargetId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PIPELINE_UID = "pipelineUid";
  @SerializedName(SERIALIZED_NAME_PIPELINE_UID)
  private String pipelineUid;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  /**
   * Type of this notification, e.g. for a Pub/Sub failure.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    PUBSUB_NOTIFICATION_FAILURE("TYPE_PUBSUB_NOTIFICATION_FAILURE"),
    
    RESOURCE_STATE_CHANGE("TYPE_RESOURCE_STATE_CHANGE"),
    
    PROCESS_ABORTED("TYPE_PROCESS_ABORTED"),
    
    RESTRICTION_VIOLATED("TYPE_RESTRICTION_VIOLATED"),
    
    RESOURCE_DELETED("TYPE_RESOURCE_DELETED"),
    
    ROLLOUT_UPDATE("TYPE_ROLLOUT_UPDATE"),
    
    DEPLOY_POLICY_EVALUATION("TYPE_DEPLOY_POLICY_EVALUATION"),
    
    RENDER_STATUES_CHANGE("TYPE_RENDER_STATUES_CHANGE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AutomationRunEvent() {
  }

  public AutomationRunEvent automationId(String automationId) {
    this.automationId = automationId;
    return this;
  }

  /**
   * Identifier of the &#x60;Automation&#x60;.
   * @return automationId
   */
  @javax.annotation.Nullable
  public String getAutomationId() {
    return automationId;
  }

  public void setAutomationId(String automationId) {
    this.automationId = automationId;
  }


  public AutomationRunEvent automationRun(String automationRun) {
    this.automationRun = automationRun;
    return this;
  }

  /**
   * The name of the &#x60;AutomationRun&#x60;.
   * @return automationRun
   */
  @javax.annotation.Nullable
  public String getAutomationRun() {
    return automationRun;
  }

  public void setAutomationRun(String automationRun) {
    this.automationRun = automationRun;
  }


  public AutomationRunEvent destinationTargetId(String destinationTargetId) {
    this.destinationTargetId = destinationTargetId;
    return this;
  }

  /**
   * ID of the &#x60;Target&#x60; to which the &#x60;AutomationRun&#x60; is created.
   * @return destinationTargetId
   */
  @javax.annotation.Nullable
  public String getDestinationTargetId() {
    return destinationTargetId;
  }

  public void setDestinationTargetId(String destinationTargetId) {
    this.destinationTargetId = destinationTargetId;
  }


  public AutomationRunEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public AutomationRunEvent pipelineUid(String pipelineUid) {
    this.pipelineUid = pipelineUid;
    return this;
  }

  /**
   * Unique identifier of the &#x60;DeliveryPipeline&#x60;.
   * @return pipelineUid
   */
  @javax.annotation.Nullable
  public String getPipelineUid() {
    return pipelineUid;
  }

  public void setPipelineUid(String pipelineUid) {
    this.pipelineUid = pipelineUid;
  }


  public AutomationRunEvent ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Identifier of the &#x60;Automation&#x60; rule.
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public AutomationRunEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this notification, e.g. for a Pub/Sub failure.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationRunEvent automationRunEvent = (AutomationRunEvent) o;
    return Objects.equals(this.automationId, automationRunEvent.automationId) &&
        Objects.equals(this.automationRun, automationRunEvent.automationRun) &&
        Objects.equals(this.destinationTargetId, automationRunEvent.destinationTargetId) &&
        Objects.equals(this.message, automationRunEvent.message) &&
        Objects.equals(this.pipelineUid, automationRunEvent.pipelineUid) &&
        Objects.equals(this.ruleId, automationRunEvent.ruleId) &&
        Objects.equals(this.type, automationRunEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automationId, automationRun, destinationTargetId, message, pipelineUid, ruleId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationRunEvent {\n");
    sb.append("    automationId: ").append(toIndentedString(automationId)).append("\n");
    sb.append("    automationRun: ").append(toIndentedString(automationRun)).append("\n");
    sb.append("    destinationTargetId: ").append(toIndentedString(destinationTargetId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pipelineUid: ").append(toIndentedString(pipelineUid)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automationId");
    openapiFields.add("automationRun");
    openapiFields.add("destinationTargetId");
    openapiFields.add("message");
    openapiFields.add("pipelineUid");
    openapiFields.add("ruleId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationRunEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationRunEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationRunEvent is not found in the empty JSON string", AutomationRunEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationRunEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationRunEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("automationId") != null && !jsonObj.get("automationId").isJsonNull()) && !jsonObj.get("automationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automationId").toString()));
      }
      if ((jsonObj.get("automationRun") != null && !jsonObj.get("automationRun").isJsonNull()) && !jsonObj.get("automationRun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automationRun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automationRun").toString()));
      }
      if ((jsonObj.get("destinationTargetId") != null && !jsonObj.get("destinationTargetId").isJsonNull()) && !jsonObj.get("destinationTargetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationTargetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationTargetId").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("pipelineUid") != null && !jsonObj.get("pipelineUid").isJsonNull()) && !jsonObj.get("pipelineUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipelineUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipelineUid").toString()));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationRunEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationRunEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationRunEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationRunEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationRunEvent>() {
           @Override
           public void write(JsonWriter out, AutomationRunEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationRunEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationRunEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationRunEvent
   * @throws IOException if the JSON string is invalid with respect to AutomationRunEvent
   */
  public static AutomationRunEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationRunEvent.class);
  }

  /**
   * Convert an instance of AutomationRunEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

