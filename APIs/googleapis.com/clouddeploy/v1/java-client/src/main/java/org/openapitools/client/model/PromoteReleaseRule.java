/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutomationRuleCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;PromoteRelease&#x60; rule will automatically promote a release from the current target to a specified target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromoteReleaseRule {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private AutomationRuleCondition condition;

  public static final String SERIALIZED_NAME_DESTINATION_PHASE = "destinationPhase";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PHASE)
  private String destinationPhase;

  public static final String SERIALIZED_NAME_DESTINATION_TARGET_ID = "destinationTargetId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TARGET_ID)
  private String destinationTargetId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private String wait;

  public PromoteReleaseRule() {
  }

  public PromoteReleaseRule condition(AutomationRuleCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public AutomationRuleCondition getCondition() {
    return condition;
  }

  public void setCondition(AutomationRuleCondition condition) {
    this.condition = condition;
  }


  public PromoteReleaseRule destinationPhase(String destinationPhase) {
    this.destinationPhase = destinationPhase;
    return this;
  }

  /**
   * Optional. The starting phase of the rollout created by this operation. Default to the first phase.
   * @return destinationPhase
   */
  @javax.annotation.Nullable
  public String getDestinationPhase() {
    return destinationPhase;
  }

  public void setDestinationPhase(String destinationPhase) {
    this.destinationPhase = destinationPhase;
  }


  public PromoteReleaseRule destinationTargetId(String destinationTargetId) {
    this.destinationTargetId = destinationTargetId;
    return this;
  }

  /**
   * Optional. The ID of the stage in the pipeline to which this &#x60;Release&#x60; is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * \&quot;@next\&quot;, the next target in the promotion sequence.
   * @return destinationTargetId
   */
  @javax.annotation.Nullable
  public String getDestinationTargetId() {
    return destinationTargetId;
  }

  public void setDestinationTargetId(String destinationTargetId) {
    this.destinationTargetId = destinationTargetId;
  }


  public PromoteReleaseRule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. ID of the rule. This id must be unique in the &#x60;Automation&#x60; resource to which this rule belongs. The format is &#x60;a-z{0,62}&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PromoteReleaseRule wait(String wait) {
    this.wait = wait;
    return this;
  }

  /**
   * Optional. How long the release need to be paused until being promoted to the next target.
   * @return wait
   */
  @javax.annotation.Nullable
  public String getWait() {
    return wait;
  }

  public void setWait(String wait) {
    this.wait = wait;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromoteReleaseRule promoteReleaseRule = (PromoteReleaseRule) o;
    return Objects.equals(this.condition, promoteReleaseRule.condition) &&
        Objects.equals(this.destinationPhase, promoteReleaseRule.destinationPhase) &&
        Objects.equals(this.destinationTargetId, promoteReleaseRule.destinationTargetId) &&
        Objects.equals(this.id, promoteReleaseRule.id) &&
        Objects.equals(this.wait, promoteReleaseRule.wait);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, destinationPhase, destinationTargetId, id, wait);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromoteReleaseRule {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    destinationPhase: ").append(toIndentedString(destinationPhase)).append("\n");
    sb.append("    destinationTargetId: ").append(toIndentedString(destinationTargetId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("destinationPhase");
    openapiFields.add("destinationTargetId");
    openapiFields.add("id");
    openapiFields.add("wait");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromoteReleaseRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromoteReleaseRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromoteReleaseRule is not found in the empty JSON string", PromoteReleaseRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromoteReleaseRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromoteReleaseRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        AutomationRuleCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("destinationPhase") != null && !jsonObj.get("destinationPhase").isJsonNull()) && !jsonObj.get("destinationPhase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPhase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationPhase").toString()));
      }
      if ((jsonObj.get("destinationTargetId") != null && !jsonObj.get("destinationTargetId").isJsonNull()) && !jsonObj.get("destinationTargetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationTargetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationTargetId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) && !jsonObj.get("wait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromoteReleaseRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromoteReleaseRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromoteReleaseRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromoteReleaseRule.class));

       return (TypeAdapter<T>) new TypeAdapter<PromoteReleaseRule>() {
           @Override
           public void write(JsonWriter out, PromoteReleaseRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromoteReleaseRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromoteReleaseRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromoteReleaseRule
   * @throws IOException if the JSON string is invalid with respect to PromoteReleaseRule
   */
  public static PromoteReleaseRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromoteReleaseRule.class);
  }

  /**
   * Convert an instance of PromoteReleaseRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

