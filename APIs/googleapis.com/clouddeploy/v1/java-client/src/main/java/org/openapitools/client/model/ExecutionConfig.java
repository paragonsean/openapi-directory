/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DefaultPool;
import org.openapitools.client.model.PrivatePool;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration of the environment to use when calling Skaffold.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionConfig {
  public static final String SERIALIZED_NAME_ARTIFACT_STORAGE = "artifactStorage";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_STORAGE)
  private String artifactStorage;

  public static final String SERIALIZED_NAME_DEFAULT_POOL = "defaultPool";
  @SerializedName(SERIALIZED_NAME_DEFAULT_POOL)
  private DefaultPool defaultPool;

  public static final String SERIALIZED_NAME_EXECUTION_TIMEOUT = "executionTimeout";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIMEOUT)
  private String executionTimeout;

  public static final String SERIALIZED_NAME_PRIVATE_POOL = "privatePool";
  @SerializedName(SERIALIZED_NAME_PRIVATE_POOL)
  private PrivatePool privatePool;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  /**
   * Gets or Sets usages
   */
  @JsonAdapter(UsagesEnum.Adapter.class)
  public enum UsagesEnum {
    EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED("EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED"),
    
    RENDER("RENDER"),
    
    DEPLOY("DEPLOY"),
    
    VERIFY("VERIFY"),
    
    PREDEPLOY("PREDEPLOY"),
    
    POSTDEPLOY("POSTDEPLOY");

    private String value;

    UsagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsagesEnum fromValue(String value) {
      for (UsagesEnum b : UsagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsagesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsagesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGES = "usages";
  @SerializedName(SERIALIZED_NAME_USAGES)
  private List<UsagesEnum> usages = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKER_POOL = "workerPool";
  @SerializedName(SERIALIZED_NAME_WORKER_POOL)
  private String workerPool;

  public ExecutionConfig() {
  }

  public ExecutionConfig artifactStorage(String artifactStorage) {
    this.artifactStorage = artifactStorage;
    return this;
  }

  /**
   * Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket (\&quot;gs://my-bucket\&quot;) or a path within a bucket (\&quot;gs://my-bucket/my-dir\&quot;). If unspecified, a default bucket located in the same region will be used.
   * @return artifactStorage
   */
  @javax.annotation.Nullable
  public String getArtifactStorage() {
    return artifactStorage;
  }

  public void setArtifactStorage(String artifactStorage) {
    this.artifactStorage = artifactStorage;
  }


  public ExecutionConfig defaultPool(DefaultPool defaultPool) {
    this.defaultPool = defaultPool;
    return this;
  }

  /**
   * Get defaultPool
   * @return defaultPool
   */
  @javax.annotation.Nullable
  public DefaultPool getDefaultPool() {
    return defaultPool;
  }

  public void setDefaultPool(DefaultPool defaultPool) {
    this.defaultPool = defaultPool;
  }


  public ExecutionConfig executionTimeout(String executionTimeout) {
    this.executionTimeout = executionTimeout;
    return this;
  }

  /**
   * Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
   * @return executionTimeout
   */
  @javax.annotation.Nullable
  public String getExecutionTimeout() {
    return executionTimeout;
  }

  public void setExecutionTimeout(String executionTimeout) {
    this.executionTimeout = executionTimeout;
  }


  public ExecutionConfig privatePool(PrivatePool privatePool) {
    this.privatePool = privatePool;
    return this;
  }

  /**
   * Get privatePool
   * @return privatePool
   */
  @javax.annotation.Nullable
  public PrivatePool getPrivatePool() {
    return privatePool;
  }

  public void setPrivatePool(PrivatePool privatePool) {
    this.privatePool = privatePool;
  }


  public ExecutionConfig serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public ExecutionConfig usages(List<UsagesEnum> usages) {
    this.usages = usages;
    return this;
  }

  public ExecutionConfig addUsagesItem(UsagesEnum usagesItem) {
    if (this.usages == null) {
      this.usages = new ArrayList<>();
    }
    this.usages.add(usagesItem);
    return this;
  }

  /**
   * Required. Usages when this configuration should be applied.
   * @return usages
   */
  @javax.annotation.Nullable
  public List<UsagesEnum> getUsages() {
    return usages;
  }

  public void setUsages(List<UsagesEnum> usages) {
    this.usages = usages;
  }


  public ExecutionConfig workerPool(String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  /**
   * Optional. The resource name of the &#x60;WorkerPool&#x60;, with the format &#x60;projects/{project}/locations/{location}/workerPools/{worker_pool}&#x60;. If this optional field is unspecified, the default Cloud Build pool will be used.
   * @return workerPool
   */
  @javax.annotation.Nullable
  public String getWorkerPool() {
    return workerPool;
  }

  public void setWorkerPool(String workerPool) {
    this.workerPool = workerPool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionConfig executionConfig = (ExecutionConfig) o;
    return Objects.equals(this.artifactStorage, executionConfig.artifactStorage) &&
        Objects.equals(this.defaultPool, executionConfig.defaultPool) &&
        Objects.equals(this.executionTimeout, executionConfig.executionTimeout) &&
        Objects.equals(this.privatePool, executionConfig.privatePool) &&
        Objects.equals(this.serviceAccount, executionConfig.serviceAccount) &&
        Objects.equals(this.usages, executionConfig.usages) &&
        Objects.equals(this.workerPool, executionConfig.workerPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactStorage, defaultPool, executionTimeout, privatePool, serviceAccount, usages, workerPool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionConfig {\n");
    sb.append("    artifactStorage: ").append(toIndentedString(artifactStorage)).append("\n");
    sb.append("    defaultPool: ").append(toIndentedString(defaultPool)).append("\n");
    sb.append("    executionTimeout: ").append(toIndentedString(executionTimeout)).append("\n");
    sb.append("    privatePool: ").append(toIndentedString(privatePool)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    usages: ").append(toIndentedString(usages)).append("\n");
    sb.append("    workerPool: ").append(toIndentedString(workerPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactStorage");
    openapiFields.add("defaultPool");
    openapiFields.add("executionTimeout");
    openapiFields.add("privatePool");
    openapiFields.add("serviceAccount");
    openapiFields.add("usages");
    openapiFields.add("workerPool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionConfig is not found in the empty JSON string", ExecutionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artifactStorage") != null && !jsonObj.get("artifactStorage").isJsonNull()) && !jsonObj.get("artifactStorage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactStorage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactStorage").toString()));
      }
      // validate the optional field `defaultPool`
      if (jsonObj.get("defaultPool") != null && !jsonObj.get("defaultPool").isJsonNull()) {
        DefaultPool.validateJsonElement(jsonObj.get("defaultPool"));
      }
      if ((jsonObj.get("executionTimeout") != null && !jsonObj.get("executionTimeout").isJsonNull()) && !jsonObj.get("executionTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionTimeout").toString()));
      }
      // validate the optional field `privatePool`
      if (jsonObj.get("privatePool") != null && !jsonObj.get("privatePool").isJsonNull()) {
        PrivatePool.validateJsonElement(jsonObj.get("privatePool"));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usages") != null && !jsonObj.get("usages").isJsonNull() && !jsonObj.get("usages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usages` to be an array in the JSON string but got `%s`", jsonObj.get("usages").toString()));
      }
      if ((jsonObj.get("workerPool") != null && !jsonObj.get("workerPool").isJsonNull()) && !jsonObj.get("workerPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerPool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionConfig>() {
           @Override
           public void write(JsonWriter out, ExecutionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionConfig
   * @throws IOException if the JSON string is invalid with respect to ExecutionConfig
   */
  public static ExecutionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionConfig.class);
  }

  /**
   * Convert an instance of ExecutionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

