/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdvanceChildRolloutJobRun;
import org.openapitools.client.model.CreateChildRolloutJobRun;
import org.openapitools.client.model.DeployJobRun;
import org.openapitools.client.model.PostdeployJobRun;
import org.openapitools.client.model.PredeployJobRun;
import org.openapitools.client.model.VerifyJobRun;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;JobRun&#x60; resource in the Cloud Deploy API. A &#x60;JobRun&#x60; contains information of a single &#x60;Rollout&#x60; job evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobRun {
  public static final String SERIALIZED_NAME_ADVANCE_CHILD_ROLLOUT_JOB_RUN = "advanceChildRolloutJobRun";
  @SerializedName(SERIALIZED_NAME_ADVANCE_CHILD_ROLLOUT_JOB_RUN)
  private AdvanceChildRolloutJobRun advanceChildRolloutJobRun;

  public static final String SERIALIZED_NAME_CREATE_CHILD_ROLLOUT_JOB_RUN = "createChildRolloutJobRun";
  @SerializedName(SERIALIZED_NAME_CREATE_CHILD_ROLLOUT_JOB_RUN)
  private CreateChildRolloutJobRun createChildRolloutJobRun;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEPLOY_JOB_RUN = "deployJobRun";
  @SerializedName(SERIALIZED_NAME_DEPLOY_JOB_RUN)
  private DeployJobRun deployJobRun;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASE_ID = "phaseId";
  @SerializedName(SERIALIZED_NAME_PHASE_ID)
  private String phaseId;

  public static final String SERIALIZED_NAME_POSTDEPLOY_JOB_RUN = "postdeployJobRun";
  @SerializedName(SERIALIZED_NAME_POSTDEPLOY_JOB_RUN)
  private PostdeployJobRun postdeployJobRun;

  public static final String SERIALIZED_NAME_PREDEPLOY_JOB_RUN = "predeployJobRun";
  @SerializedName(SERIALIZED_NAME_PREDEPLOY_JOB_RUN)
  private PredeployJobRun predeployJobRun;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. The current state of the &#x60;JobRun&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    TERMINATING("TERMINATING"),
    
    TERMINATED("TERMINATED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_VERIFY_JOB_RUN = "verifyJobRun";
  @SerializedName(SERIALIZED_NAME_VERIFY_JOB_RUN)
  private VerifyJobRun verifyJobRun;

  public JobRun() {
  }

  public JobRun(
     String createTime, 
     String endTime, 
     String etag, 
     String jobId, 
     String phaseId, 
     String startTime, 
     StateEnum state, 
     String uid
  ) {
    this();
    this.createTime = createTime;
    this.endTime = endTime;
    this.etag = etag;
    this.jobId = jobId;
    this.phaseId = phaseId;
    this.startTime = startTime;
    this.state = state;
    this.uid = uid;
  }

  public JobRun advanceChildRolloutJobRun(AdvanceChildRolloutJobRun advanceChildRolloutJobRun) {
    this.advanceChildRolloutJobRun = advanceChildRolloutJobRun;
    return this;
  }

  /**
   * Get advanceChildRolloutJobRun
   * @return advanceChildRolloutJobRun
   */
  @javax.annotation.Nullable
  public AdvanceChildRolloutJobRun getAdvanceChildRolloutJobRun() {
    return advanceChildRolloutJobRun;
  }

  public void setAdvanceChildRolloutJobRun(AdvanceChildRolloutJobRun advanceChildRolloutJobRun) {
    this.advanceChildRolloutJobRun = advanceChildRolloutJobRun;
  }


  public JobRun createChildRolloutJobRun(CreateChildRolloutJobRun createChildRolloutJobRun) {
    this.createChildRolloutJobRun = createChildRolloutJobRun;
    return this;
  }

  /**
   * Get createChildRolloutJobRun
   * @return createChildRolloutJobRun
   */
  @javax.annotation.Nullable
  public CreateChildRolloutJobRun getCreateChildRolloutJobRun() {
    return createChildRolloutJobRun;
  }

  public void setCreateChildRolloutJobRun(CreateChildRolloutJobRun createChildRolloutJobRun) {
    this.createChildRolloutJobRun = createChildRolloutJobRun;
  }


  /**
   * Output only. Time at which the &#x60;JobRun&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public JobRun deployJobRun(DeployJobRun deployJobRun) {
    this.deployJobRun = deployJobRun;
    return this;
  }

  /**
   * Get deployJobRun
   * @return deployJobRun
   */
  @javax.annotation.Nullable
  public DeployJobRun getDeployJobRun() {
    return deployJobRun;
  }

  public void setDeployJobRun(DeployJobRun deployJobRun) {
    this.deployJobRun = deployJobRun;
  }


  /**
   * Output only. Time at which the &#x60;JobRun&#x60; ended.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. ID of the &#x60;Rollout&#x60; job this &#x60;JobRun&#x60; corresponds to.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }



  public JobRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Name of the &#x60;JobRun&#x60;. Format is &#x60;projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. ID of the &#x60;Rollout&#x60; phase this &#x60;JobRun&#x60; belongs in.
   * @return phaseId
   */
  @javax.annotation.Nullable
  public String getPhaseId() {
    return phaseId;
  }



  public JobRun postdeployJobRun(PostdeployJobRun postdeployJobRun) {
    this.postdeployJobRun = postdeployJobRun;
    return this;
  }

  /**
   * Get postdeployJobRun
   * @return postdeployJobRun
   */
  @javax.annotation.Nullable
  public PostdeployJobRun getPostdeployJobRun() {
    return postdeployJobRun;
  }

  public void setPostdeployJobRun(PostdeployJobRun postdeployJobRun) {
    this.postdeployJobRun = postdeployJobRun;
  }


  public JobRun predeployJobRun(PredeployJobRun predeployJobRun) {
    this.predeployJobRun = predeployJobRun;
    return this;
  }

  /**
   * Get predeployJobRun
   * @return predeployJobRun
   */
  @javax.annotation.Nullable
  public PredeployJobRun getPredeployJobRun() {
    return predeployJobRun;
  }

  public void setPredeployJobRun(PredeployJobRun predeployJobRun) {
    this.predeployJobRun = predeployJobRun;
  }


  /**
   * Output only. Time at which the &#x60;JobRun&#x60; was started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. The current state of the &#x60;JobRun&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Unique identifier of the &#x60;JobRun&#x60;.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  public JobRun verifyJobRun(VerifyJobRun verifyJobRun) {
    this.verifyJobRun = verifyJobRun;
    return this;
  }

  /**
   * Get verifyJobRun
   * @return verifyJobRun
   */
  @javax.annotation.Nullable
  public VerifyJobRun getVerifyJobRun() {
    return verifyJobRun;
  }

  public void setVerifyJobRun(VerifyJobRun verifyJobRun) {
    this.verifyJobRun = verifyJobRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobRun jobRun = (JobRun) o;
    return Objects.equals(this.advanceChildRolloutJobRun, jobRun.advanceChildRolloutJobRun) &&
        Objects.equals(this.createChildRolloutJobRun, jobRun.createChildRolloutJobRun) &&
        Objects.equals(this.createTime, jobRun.createTime) &&
        Objects.equals(this.deployJobRun, jobRun.deployJobRun) &&
        Objects.equals(this.endTime, jobRun.endTime) &&
        Objects.equals(this.etag, jobRun.etag) &&
        Objects.equals(this.jobId, jobRun.jobId) &&
        Objects.equals(this.name, jobRun.name) &&
        Objects.equals(this.phaseId, jobRun.phaseId) &&
        Objects.equals(this.postdeployJobRun, jobRun.postdeployJobRun) &&
        Objects.equals(this.predeployJobRun, jobRun.predeployJobRun) &&
        Objects.equals(this.startTime, jobRun.startTime) &&
        Objects.equals(this.state, jobRun.state) &&
        Objects.equals(this.uid, jobRun.uid) &&
        Objects.equals(this.verifyJobRun, jobRun.verifyJobRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceChildRolloutJobRun, createChildRolloutJobRun, createTime, deployJobRun, endTime, etag, jobId, name, phaseId, postdeployJobRun, predeployJobRun, startTime, state, uid, verifyJobRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobRun {\n");
    sb.append("    advanceChildRolloutJobRun: ").append(toIndentedString(advanceChildRolloutJobRun)).append("\n");
    sb.append("    createChildRolloutJobRun: ").append(toIndentedString(createChildRolloutJobRun)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deployJobRun: ").append(toIndentedString(deployJobRun)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phaseId: ").append(toIndentedString(phaseId)).append("\n");
    sb.append("    postdeployJobRun: ").append(toIndentedString(postdeployJobRun)).append("\n");
    sb.append("    predeployJobRun: ").append(toIndentedString(predeployJobRun)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    verifyJobRun: ").append(toIndentedString(verifyJobRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanceChildRolloutJobRun");
    openapiFields.add("createChildRolloutJobRun");
    openapiFields.add("createTime");
    openapiFields.add("deployJobRun");
    openapiFields.add("endTime");
    openapiFields.add("etag");
    openapiFields.add("jobId");
    openapiFields.add("name");
    openapiFields.add("phaseId");
    openapiFields.add("postdeployJobRun");
    openapiFields.add("predeployJobRun");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("uid");
    openapiFields.add("verifyJobRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobRun is not found in the empty JSON string", JobRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advanceChildRolloutJobRun`
      if (jsonObj.get("advanceChildRolloutJobRun") != null && !jsonObj.get("advanceChildRolloutJobRun").isJsonNull()) {
        AdvanceChildRolloutJobRun.validateJsonElement(jsonObj.get("advanceChildRolloutJobRun"));
      }
      // validate the optional field `createChildRolloutJobRun`
      if (jsonObj.get("createChildRolloutJobRun") != null && !jsonObj.get("createChildRolloutJobRun").isJsonNull()) {
        CreateChildRolloutJobRun.validateJsonElement(jsonObj.get("createChildRolloutJobRun"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `deployJobRun`
      if (jsonObj.get("deployJobRun") != null && !jsonObj.get("deployJobRun").isJsonNull()) {
        DeployJobRun.validateJsonElement(jsonObj.get("deployJobRun"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phaseId") != null && !jsonObj.get("phaseId").isJsonNull()) && !jsonObj.get("phaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phaseId").toString()));
      }
      // validate the optional field `postdeployJobRun`
      if (jsonObj.get("postdeployJobRun") != null && !jsonObj.get("postdeployJobRun").isJsonNull()) {
        PostdeployJobRun.validateJsonElement(jsonObj.get("postdeployJobRun"));
      }
      // validate the optional field `predeployJobRun`
      if (jsonObj.get("predeployJobRun") != null && !jsonObj.get("predeployJobRun").isJsonNull()) {
        PredeployJobRun.validateJsonElement(jsonObj.get("predeployJobRun"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `verifyJobRun`
      if (jsonObj.get("verifyJobRun") != null && !jsonObj.get("verifyJobRun").isJsonNull()) {
        VerifyJobRun.validateJsonElement(jsonObj.get("verifyJobRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobRun.class));

       return (TypeAdapter<T>) new TypeAdapter<JobRun>() {
           @Override
           public void write(JsonWriter out, JobRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobRun
   * @throws IOException if the JSON string is invalid with respect to JobRun
   */
  public static JobRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobRun.class);
  }

  /**
   * Convert an instance of JobRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

