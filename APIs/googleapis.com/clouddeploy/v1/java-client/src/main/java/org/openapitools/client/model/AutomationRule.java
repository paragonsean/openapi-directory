/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdvanceRolloutRule;
import org.openapitools.client.model.PromoteReleaseRule;
import org.openapitools.client.model.RepairRolloutRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;AutomationRule&#x60; defines the automation activities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationRule {
  public static final String SERIALIZED_NAME_ADVANCE_ROLLOUT_RULE = "advanceRolloutRule";
  @SerializedName(SERIALIZED_NAME_ADVANCE_ROLLOUT_RULE)
  private AdvanceRolloutRule advanceRolloutRule;

  public static final String SERIALIZED_NAME_PROMOTE_RELEASE_RULE = "promoteReleaseRule";
  @SerializedName(SERIALIZED_NAME_PROMOTE_RELEASE_RULE)
  private PromoteReleaseRule promoteReleaseRule;

  public static final String SERIALIZED_NAME_REPAIR_ROLLOUT_RULE = "repairRolloutRule";
  @SerializedName(SERIALIZED_NAME_REPAIR_ROLLOUT_RULE)
  private RepairRolloutRule repairRolloutRule;

  public AutomationRule() {
  }

  public AutomationRule advanceRolloutRule(AdvanceRolloutRule advanceRolloutRule) {
    this.advanceRolloutRule = advanceRolloutRule;
    return this;
  }

  /**
   * Get advanceRolloutRule
   * @return advanceRolloutRule
   */
  @javax.annotation.Nullable
  public AdvanceRolloutRule getAdvanceRolloutRule() {
    return advanceRolloutRule;
  }

  public void setAdvanceRolloutRule(AdvanceRolloutRule advanceRolloutRule) {
    this.advanceRolloutRule = advanceRolloutRule;
  }


  public AutomationRule promoteReleaseRule(PromoteReleaseRule promoteReleaseRule) {
    this.promoteReleaseRule = promoteReleaseRule;
    return this;
  }

  /**
   * Get promoteReleaseRule
   * @return promoteReleaseRule
   */
  @javax.annotation.Nullable
  public PromoteReleaseRule getPromoteReleaseRule() {
    return promoteReleaseRule;
  }

  public void setPromoteReleaseRule(PromoteReleaseRule promoteReleaseRule) {
    this.promoteReleaseRule = promoteReleaseRule;
  }


  public AutomationRule repairRolloutRule(RepairRolloutRule repairRolloutRule) {
    this.repairRolloutRule = repairRolloutRule;
    return this;
  }

  /**
   * Get repairRolloutRule
   * @return repairRolloutRule
   */
  @javax.annotation.Nullable
  public RepairRolloutRule getRepairRolloutRule() {
    return repairRolloutRule;
  }

  public void setRepairRolloutRule(RepairRolloutRule repairRolloutRule) {
    this.repairRolloutRule = repairRolloutRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationRule automationRule = (AutomationRule) o;
    return Objects.equals(this.advanceRolloutRule, automationRule.advanceRolloutRule) &&
        Objects.equals(this.promoteReleaseRule, automationRule.promoteReleaseRule) &&
        Objects.equals(this.repairRolloutRule, automationRule.repairRolloutRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceRolloutRule, promoteReleaseRule, repairRolloutRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationRule {\n");
    sb.append("    advanceRolloutRule: ").append(toIndentedString(advanceRolloutRule)).append("\n");
    sb.append("    promoteReleaseRule: ").append(toIndentedString(promoteReleaseRule)).append("\n");
    sb.append("    repairRolloutRule: ").append(toIndentedString(repairRolloutRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanceRolloutRule");
    openapiFields.add("promoteReleaseRule");
    openapiFields.add("repairRolloutRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationRule is not found in the empty JSON string", AutomationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advanceRolloutRule`
      if (jsonObj.get("advanceRolloutRule") != null && !jsonObj.get("advanceRolloutRule").isJsonNull()) {
        AdvanceRolloutRule.validateJsonElement(jsonObj.get("advanceRolloutRule"));
      }
      // validate the optional field `promoteReleaseRule`
      if (jsonObj.get("promoteReleaseRule") != null && !jsonObj.get("promoteReleaseRule").isJsonNull()) {
        PromoteReleaseRule.validateJsonElement(jsonObj.get("promoteReleaseRule"));
      }
      // validate the optional field `repairRolloutRule`
      if (jsonObj.get("repairRolloutRule") != null && !jsonObj.get("repairRolloutRule").isJsonNull()) {
        RepairRolloutRule.validateJsonElement(jsonObj.get("repairRolloutRule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationRule>() {
           @Override
           public void write(JsonWriter out, AutomationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationRule
   * @throws IOException if the JSON string is invalid with respect to AutomationRule
   */
  public static AutomationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationRule.class);
  }

  /**
   * Convert an instance of AutomationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

