/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Postdeploy;
import org.openapitools.client.model.Predeploy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhaseConfig represents the configuration for a phase in the custom canary deployment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhaseConfig {
  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Integer percentage;

  public static final String SERIALIZED_NAME_PHASE_ID = "phaseId";
  @SerializedName(SERIALIZED_NAME_PHASE_ID)
  private String phaseId;

  public static final String SERIALIZED_NAME_POSTDEPLOY = "postdeploy";
  @SerializedName(SERIALIZED_NAME_POSTDEPLOY)
  private Postdeploy postdeploy;

  public static final String SERIALIZED_NAME_PREDEPLOY = "predeploy";
  @SerializedName(SERIALIZED_NAME_PREDEPLOY)
  private Predeploy predeploy;

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<String> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFY = "verify";
  @SerializedName(SERIALIZED_NAME_VERIFY)
  private Boolean verify;

  public PhaseConfig() {
  }

  public PhaseConfig percentage(Integer percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Required. Percentage deployment for the phase.
   * @return percentage
   */
  @javax.annotation.Nullable
  public Integer getPercentage() {
    return percentage;
  }

  public void setPercentage(Integer percentage) {
    this.percentage = percentage;
  }


  public PhaseConfig phaseId(String phaseId) {
    this.phaseId = phaseId;
    return this;
  }

  /**
   * Required. The ID to assign to the &#x60;Rollout&#x60; phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: &#x60;^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$&#x60;.
   * @return phaseId
   */
  @javax.annotation.Nullable
  public String getPhaseId() {
    return phaseId;
  }

  public void setPhaseId(String phaseId) {
    this.phaseId = phaseId;
  }


  public PhaseConfig postdeploy(Postdeploy postdeploy) {
    this.postdeploy = postdeploy;
    return this;
  }

  /**
   * Get postdeploy
   * @return postdeploy
   */
  @javax.annotation.Nullable
  public Postdeploy getPostdeploy() {
    return postdeploy;
  }

  public void setPostdeploy(Postdeploy postdeploy) {
    this.postdeploy = postdeploy;
  }


  public PhaseConfig predeploy(Predeploy predeploy) {
    this.predeploy = predeploy;
    return this;
  }

  /**
   * Get predeploy
   * @return predeploy
   */
  @javax.annotation.Nullable
  public Predeploy getPredeploy() {
    return predeploy;
  }

  public void setPredeploy(Predeploy predeploy) {
    this.predeploy = predeploy;
  }


  public PhaseConfig profiles(List<String> profiles) {
    this.profiles = profiles;
    return this;
  }

  public PhaseConfig addProfilesItem(String profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the &#x60;DeliveryPipeline&#x60; stage.
   * @return profiles
   */
  @javax.annotation.Nullable
  public List<String> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<String> profiles) {
    this.profiles = profiles;
  }


  public PhaseConfig verify(Boolean verify) {
    this.verify = verify;
    return this;
  }

  /**
   * Whether to run verify tests after the deployment.
   * @return verify
   */
  @javax.annotation.Nullable
  public Boolean getVerify() {
    return verify;
  }

  public void setVerify(Boolean verify) {
    this.verify = verify;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhaseConfig phaseConfig = (PhaseConfig) o;
    return Objects.equals(this.percentage, phaseConfig.percentage) &&
        Objects.equals(this.phaseId, phaseConfig.phaseId) &&
        Objects.equals(this.postdeploy, phaseConfig.postdeploy) &&
        Objects.equals(this.predeploy, phaseConfig.predeploy) &&
        Objects.equals(this.profiles, phaseConfig.profiles) &&
        Objects.equals(this.verify, phaseConfig.verify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentage, phaseId, postdeploy, predeploy, profiles, verify);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhaseConfig {\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    phaseId: ").append(toIndentedString(phaseId)).append("\n");
    sb.append("    postdeploy: ").append(toIndentedString(postdeploy)).append("\n");
    sb.append("    predeploy: ").append(toIndentedString(predeploy)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    verify: ").append(toIndentedString(verify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentage");
    openapiFields.add("phaseId");
    openapiFields.add("postdeploy");
    openapiFields.add("predeploy");
    openapiFields.add("profiles");
    openapiFields.add("verify");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhaseConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhaseConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhaseConfig is not found in the empty JSON string", PhaseConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhaseConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhaseConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("phaseId") != null && !jsonObj.get("phaseId").isJsonNull()) && !jsonObj.get("phaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phaseId").toString()));
      }
      // validate the optional field `postdeploy`
      if (jsonObj.get("postdeploy") != null && !jsonObj.get("postdeploy").isJsonNull()) {
        Postdeploy.validateJsonElement(jsonObj.get("postdeploy"));
      }
      // validate the optional field `predeploy`
      if (jsonObj.get("predeploy") != null && !jsonObj.get("predeploy").isJsonNull()) {
        Predeploy.validateJsonElement(jsonObj.get("predeploy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("profiles") != null && !jsonObj.get("profiles").isJsonNull() && !jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhaseConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhaseConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhaseConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhaseConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PhaseConfig>() {
           @Override
           public void write(JsonWriter out, PhaseConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhaseConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhaseConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhaseConfig
   * @throws IOException if the JSON string is invalid with respect to PhaseConfig
   */
  public static PhaseConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhaseConfig.class);
  }

  /**
   * Convert an instance of PhaseConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

