/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.Phase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Rollout&#x60; resource in the Cloud Deploy API. A &#x60;Rollout&#x60; contains information around a specific deployment to a &#x60;Target&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rollout {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  /**
   * Output only. Approval state of the &#x60;Rollout&#x60;.
   */
  @JsonAdapter(ApprovalStateEnum.Adapter.class)
  public enum ApprovalStateEnum {
    APPROVAL_STATE_UNSPECIFIED("APPROVAL_STATE_UNSPECIFIED"),
    
    NEEDS_APPROVAL("NEEDS_APPROVAL"),
    
    DOES_NOT_NEED_APPROVAL("DOES_NOT_NEED_APPROVAL"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    ApprovalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalStateEnum fromValue(String value) {
      for (ApprovalStateEnum b : ApprovalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApprovalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_STATE = "approvalState";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATE)
  private ApprovalStateEnum approvalState;

  public static final String SERIALIZED_NAME_APPROVE_TIME = "approveTime";
  @SerializedName(SERIALIZED_NAME_APPROVE_TIME)
  private String approveTime;

  public static final String SERIALIZED_NAME_CONTROLLER_ROLLOUT = "controllerRollout";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_ROLLOUT)
  private String controllerRollout;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEPLOY_END_TIME = "deployEndTime";
  @SerializedName(SERIALIZED_NAME_DEPLOY_END_TIME)
  private String deployEndTime;

  /**
   * Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.
   */
  @JsonAdapter(DeployFailureCauseEnum.Adapter.class)
  public enum DeployFailureCauseEnum {
    FAILURE_CAUSE_UNSPECIFIED("FAILURE_CAUSE_UNSPECIFIED"),
    
    CLOUD_BUILD_UNAVAILABLE("CLOUD_BUILD_UNAVAILABLE"),
    
    EXECUTION_FAILED("EXECUTION_FAILED"),
    
    DEADLINE_EXCEEDED("DEADLINE_EXCEEDED"),
    
    RELEASE_FAILED("RELEASE_FAILED"),
    
    RELEASE_ABANDONED("RELEASE_ABANDONED"),
    
    VERIFICATION_CONFIG_NOT_FOUND("VERIFICATION_CONFIG_NOT_FOUND"),
    
    CLOUD_BUILD_REQUEST_FAILED("CLOUD_BUILD_REQUEST_FAILED"),
    
    OPERATION_FEATURE_NOT_SUPPORTED("OPERATION_FEATURE_NOT_SUPPORTED");

    private String value;

    DeployFailureCauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeployFailureCauseEnum fromValue(String value) {
      for (DeployFailureCauseEnum b : DeployFailureCauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeployFailureCauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeployFailureCauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeployFailureCauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeployFailureCauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeployFailureCauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOY_FAILURE_CAUSE = "deployFailureCause";
  @SerializedName(SERIALIZED_NAME_DEPLOY_FAILURE_CAUSE)
  private DeployFailureCauseEnum deployFailureCause;

  public static final String SERIALIZED_NAME_DEPLOY_START_TIME = "deployStartTime";
  @SerializedName(SERIALIZED_NAME_DEPLOY_START_TIME)
  private String deployStartTime;

  public static final String SERIALIZED_NAME_DEPLOYING_BUILD = "deployingBuild";
  @SerializedName(SERIALIZED_NAME_DEPLOYING_BUILD)
  private String deployingBuild;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENQUEUE_TIME = "enqueueTime";
  @SerializedName(SERIALIZED_NAME_ENQUEUE_TIME)
  private String enqueueTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<Phase> phases = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLLBACK_OF_ROLLOUT = "rollbackOfRollout";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_OF_ROLLOUT)
  private String rollbackOfRollout;

  public static final String SERIALIZED_NAME_ROLLED_BACK_BY_ROLLOUTS = "rolledBackByRollouts";
  @SerializedName(SERIALIZED_NAME_ROLLED_BACK_BY_ROLLOUTS)
  private List<String> rolledBackByRollouts = new ArrayList<>();

  /**
   * Output only. Current state of the &#x60;Rollout&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    PENDING_APPROVAL("PENDING_APPROVAL"),
    
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    
    PENDING("PENDING"),
    
    PENDING_RELEASE("PENDING_RELEASE"),
    
    CANCELLING("CANCELLING"),
    
    CANCELLED("CANCELLED"),
    
    HALTED("HALTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public Rollout() {
  }

  public Rollout(
     ApprovalStateEnum approvalState, 
     String approveTime, 
     String controllerRollout, 
     String createTime, 
     String deployEndTime, 
     DeployFailureCauseEnum deployFailureCause, 
     String deployStartTime, 
     String deployingBuild, 
     String enqueueTime, 
     String failureReason, 
     List<Phase> phases, 
     String rollbackOfRollout, 
     List<String> rolledBackByRollouts, 
     StateEnum state, 
     String uid
  ) {
    this();
    this.approvalState = approvalState;
    this.approveTime = approveTime;
    this.controllerRollout = controllerRollout;
    this.createTime = createTime;
    this.deployEndTime = deployEndTime;
    this.deployFailureCause = deployFailureCause;
    this.deployStartTime = deployStartTime;
    this.deployingBuild = deployingBuild;
    this.enqueueTime = enqueueTime;
    this.failureReason = failureReason;
    this.phases = phases;
    this.rollbackOfRollout = rollbackOfRollout;
    this.rolledBackByRollouts = rolledBackByRollouts;
    this.state = state;
    this.uid = uid;
  }

  public Rollout annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Rollout putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  /**
   * Output only. Approval state of the &#x60;Rollout&#x60;.
   * @return approvalState
   */
  @javax.annotation.Nullable
  public ApprovalStateEnum getApprovalState() {
    return approvalState;
  }



  /**
   * Output only. Time at which the &#x60;Rollout&#x60; was approved.
   * @return approveTime
   */
  @javax.annotation.Nullable
  public String getApproveTime() {
    return approveTime;
  }



  /**
   * Output only. Name of the &#x60;ControllerRollout&#x60;. Format is &#x60;projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}&#x60;.
   * @return controllerRollout
   */
  @javax.annotation.Nullable
  public String getControllerRollout() {
    return controllerRollout;
  }



  /**
   * Output only. Time at which the &#x60;Rollout&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Time at which the &#x60;Rollout&#x60; finished deploying.
   * @return deployEndTime
   */
  @javax.annotation.Nullable
  public String getDeployEndTime() {
    return deployEndTime;
  }



  /**
   * Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.
   * @return deployFailureCause
   */
  @javax.annotation.Nullable
  public DeployFailureCauseEnum getDeployFailureCause() {
    return deployFailureCause;
  }



  /**
   * Output only. Time at which the &#x60;Rollout&#x60; started deploying.
   * @return deployStartTime
   */
  @javax.annotation.Nullable
  public String getDeployStartTime() {
    return deployStartTime;
  }



  /**
   * Output only. The resource name of the Cloud Build &#x60;Build&#x60; object that is used to deploy the Rollout. Format is &#x60;projects/{project}/locations/{location}/builds/{build}&#x60;.
   * @return deployingBuild
   */
  @javax.annotation.Nullable
  public String getDeployingBuild() {
    return deployingBuild;
  }



  public Rollout description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the &#x60;Rollout&#x60; for user purposes. Max length is 255 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. Time at which the &#x60;Rollout&#x60; was enqueued.
   * @return enqueueTime
   */
  @javax.annotation.Nullable
  public String getEnqueueTime() {
    return enqueueTime;
  }



  public Rollout etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. Additional information about the rollout failure, if available.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }



  public Rollout labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Rollout putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;&#x3D; 128 bytes.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Rollout metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public Rollout name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Name of the &#x60;Rollout&#x60;. Format is &#x60;projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The phases that represent the workflows of this &#x60;Rollout&#x60;.
   * @return phases
   */
  @javax.annotation.Nullable
  public List<Phase> getPhases() {
    return phases;
  }



  /**
   * Output only. Name of the &#x60;Rollout&#x60; that is rolled back by this &#x60;Rollout&#x60;. Empty if this &#x60;Rollout&#x60; wasn&#39;t created as a rollback.
   * @return rollbackOfRollout
   */
  @javax.annotation.Nullable
  public String getRollbackOfRollout() {
    return rollbackOfRollout;
  }



  /**
   * Output only. Names of &#x60;Rollouts&#x60; that rolled back this &#x60;Rollout&#x60;.
   * @return rolledBackByRollouts
   */
  @javax.annotation.Nullable
  public List<String> getRolledBackByRollouts() {
    return rolledBackByRollouts;
  }



  /**
   * Output only. Current state of the &#x60;Rollout&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Rollout targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Required. The ID of Target to which this &#x60;Rollout&#x60; is deploying.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  /**
   * Output only. Unique identifier of the &#x60;Rollout&#x60;.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rollout rollout = (Rollout) o;
    return Objects.equals(this.annotations, rollout.annotations) &&
        Objects.equals(this.approvalState, rollout.approvalState) &&
        Objects.equals(this.approveTime, rollout.approveTime) &&
        Objects.equals(this.controllerRollout, rollout.controllerRollout) &&
        Objects.equals(this.createTime, rollout.createTime) &&
        Objects.equals(this.deployEndTime, rollout.deployEndTime) &&
        Objects.equals(this.deployFailureCause, rollout.deployFailureCause) &&
        Objects.equals(this.deployStartTime, rollout.deployStartTime) &&
        Objects.equals(this.deployingBuild, rollout.deployingBuild) &&
        Objects.equals(this.description, rollout.description) &&
        Objects.equals(this.enqueueTime, rollout.enqueueTime) &&
        Objects.equals(this.etag, rollout.etag) &&
        Objects.equals(this.failureReason, rollout.failureReason) &&
        Objects.equals(this.labels, rollout.labels) &&
        Objects.equals(this.metadata, rollout.metadata) &&
        Objects.equals(this.name, rollout.name) &&
        Objects.equals(this.phases, rollout.phases) &&
        Objects.equals(this.rollbackOfRollout, rollout.rollbackOfRollout) &&
        Objects.equals(this.rolledBackByRollouts, rollout.rolledBackByRollouts) &&
        Objects.equals(this.state, rollout.state) &&
        Objects.equals(this.targetId, rollout.targetId) &&
        Objects.equals(this.uid, rollout.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, approvalState, approveTime, controllerRollout, createTime, deployEndTime, deployFailureCause, deployStartTime, deployingBuild, description, enqueueTime, etag, failureReason, labels, metadata, name, phases, rollbackOfRollout, rolledBackByRollouts, state, targetId, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rollout {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    approvalState: ").append(toIndentedString(approvalState)).append("\n");
    sb.append("    approveTime: ").append(toIndentedString(approveTime)).append("\n");
    sb.append("    controllerRollout: ").append(toIndentedString(controllerRollout)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deployEndTime: ").append(toIndentedString(deployEndTime)).append("\n");
    sb.append("    deployFailureCause: ").append(toIndentedString(deployFailureCause)).append("\n");
    sb.append("    deployStartTime: ").append(toIndentedString(deployStartTime)).append("\n");
    sb.append("    deployingBuild: ").append(toIndentedString(deployingBuild)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enqueueTime: ").append(toIndentedString(enqueueTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    rollbackOfRollout: ").append(toIndentedString(rollbackOfRollout)).append("\n");
    sb.append("    rolledBackByRollouts: ").append(toIndentedString(rolledBackByRollouts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("approvalState");
    openapiFields.add("approveTime");
    openapiFields.add("controllerRollout");
    openapiFields.add("createTime");
    openapiFields.add("deployEndTime");
    openapiFields.add("deployFailureCause");
    openapiFields.add("deployStartTime");
    openapiFields.add("deployingBuild");
    openapiFields.add("description");
    openapiFields.add("enqueueTime");
    openapiFields.add("etag");
    openapiFields.add("failureReason");
    openapiFields.add("labels");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("phases");
    openapiFields.add("rollbackOfRollout");
    openapiFields.add("rolledBackByRollouts");
    openapiFields.add("state");
    openapiFields.add("targetId");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rollout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rollout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rollout is not found in the empty JSON string", Rollout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rollout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rollout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("approvalState") != null && !jsonObj.get("approvalState").isJsonNull()) && !jsonObj.get("approvalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalState").toString()));
      }
      // validate the optional field `approvalState`
      if (jsonObj.get("approvalState") != null && !jsonObj.get("approvalState").isJsonNull()) {
        ApprovalStateEnum.validateJsonElement(jsonObj.get("approvalState"));
      }
      if ((jsonObj.get("approveTime") != null && !jsonObj.get("approveTime").isJsonNull()) && !jsonObj.get("approveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approveTime").toString()));
      }
      if ((jsonObj.get("controllerRollout") != null && !jsonObj.get("controllerRollout").isJsonNull()) && !jsonObj.get("controllerRollout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllerRollout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllerRollout").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deployEndTime") != null && !jsonObj.get("deployEndTime").isJsonNull()) && !jsonObj.get("deployEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployEndTime").toString()));
      }
      if ((jsonObj.get("deployFailureCause") != null && !jsonObj.get("deployFailureCause").isJsonNull()) && !jsonObj.get("deployFailureCause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployFailureCause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployFailureCause").toString()));
      }
      // validate the optional field `deployFailureCause`
      if (jsonObj.get("deployFailureCause") != null && !jsonObj.get("deployFailureCause").isJsonNull()) {
        DeployFailureCauseEnum.validateJsonElement(jsonObj.get("deployFailureCause"));
      }
      if ((jsonObj.get("deployStartTime") != null && !jsonObj.get("deployStartTime").isJsonNull()) && !jsonObj.get("deployStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployStartTime").toString()));
      }
      if ((jsonObj.get("deployingBuild") != null && !jsonObj.get("deployingBuild").isJsonNull()) && !jsonObj.get("deployingBuild").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployingBuild` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployingBuild").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("enqueueTime") != null && !jsonObj.get("enqueueTime").isJsonNull()) && !jsonObj.get("enqueueTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enqueueTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enqueueTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            Phase.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
      if ((jsonObj.get("rollbackOfRollout") != null && !jsonObj.get("rollbackOfRollout").isJsonNull()) && !jsonObj.get("rollbackOfRollout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollbackOfRollout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollbackOfRollout").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rolledBackByRollouts") != null && !jsonObj.get("rolledBackByRollouts").isJsonNull() && !jsonObj.get("rolledBackByRollouts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolledBackByRollouts` to be an array in the JSON string but got `%s`", jsonObj.get("rolledBackByRollouts").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rollout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rollout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rollout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rollout.class));

       return (TypeAdapter<T>) new TypeAdapter<Rollout>() {
           @Override
           public void write(JsonWriter out, Rollout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rollout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rollout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rollout
   * @throws IOException if the JSON string is invalid with respect to Rollout
   */
  public static Rollout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rollout.class);
  }

  /**
   * Convert an instance of Rollout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

