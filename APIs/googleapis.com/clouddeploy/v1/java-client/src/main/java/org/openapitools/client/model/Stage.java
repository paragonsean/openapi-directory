/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeployParameters;
import org.openapitools.client.model.Strategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stage specifies a location to which to deploy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Stage {
  public static final String SERIALIZED_NAME_DEPLOY_PARAMETERS = "deployParameters";
  @SerializedName(SERIALIZED_NAME_DEPLOY_PARAMETERS)
  private List<DeployParameters> deployParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<String> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private Strategy strategy;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public Stage() {
  }

  public Stage deployParameters(List<DeployParameters> deployParameters) {
    this.deployParameters = deployParameters;
    return this;
  }

  public Stage addDeployParametersItem(DeployParameters deployParametersItem) {
    if (this.deployParameters == null) {
      this.deployParameters = new ArrayList<>();
    }
    this.deployParameters.add(deployParametersItem);
    return this;
  }

  /**
   * Optional. The deploy parameters to use for the target in this stage.
   * @return deployParameters
   */
  @javax.annotation.Nullable
  public List<DeployParameters> getDeployParameters() {
    return deployParameters;
  }

  public void setDeployParameters(List<DeployParameters> deployParameters) {
    this.deployParameters = deployParameters;
  }


  public Stage profiles(List<String> profiles) {
    this.profiles = profiles;
    return this;
  }

  public Stage addProfilesItem(String profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * Skaffold profiles to use when rendering the manifest for this stage&#39;s &#x60;Target&#x60;.
   * @return profiles
   */
  @javax.annotation.Nullable
  public List<String> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<String> profiles) {
    this.profiles = profiles;
  }


  public Stage strategy(Strategy strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * Get strategy
   * @return strategy
   */
  @javax.annotation.Nullable
  public Strategy getStrategy() {
    return strategy;
  }

  public void setStrategy(Strategy strategy) {
    this.strategy = strategy;
  }


  public Stage targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be &#x60;my-target&#x60; (rather than &#x60;projects/project/locations/location/targets/my-target&#x60;). The location of the &#x60;Target&#x60; is inferred to be the same as the location of the &#x60;DeliveryPipeline&#x60; that contains this &#x60;Stage&#x60;.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stage stage = (Stage) o;
    return Objects.equals(this.deployParameters, stage.deployParameters) &&
        Objects.equals(this.profiles, stage.profiles) &&
        Objects.equals(this.strategy, stage.strategy) &&
        Objects.equals(this.targetId, stage.targetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployParameters, profiles, strategy, targetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stage {\n");
    sb.append("    deployParameters: ").append(toIndentedString(deployParameters)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployParameters");
    openapiFields.add("profiles");
    openapiFields.add("strategy");
    openapiFields.add("targetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stage is not found in the empty JSON string", Stage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deployParameters") != null && !jsonObj.get("deployParameters").isJsonNull()) {
        JsonArray jsonArraydeployParameters = jsonObj.getAsJsonArray("deployParameters");
        if (jsonArraydeployParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deployParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deployParameters` to be an array in the JSON string but got `%s`", jsonObj.get("deployParameters").toString()));
          }

          // validate the optional field `deployParameters` (array)
          for (int i = 0; i < jsonArraydeployParameters.size(); i++) {
            DeployParameters.validateJsonElement(jsonArraydeployParameters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("profiles") != null && !jsonObj.get("profiles").isJsonNull() && !jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }
      // validate the optional field `strategy`
      if (jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) {
        Strategy.validateJsonElement(jsonObj.get("strategy"));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stage.class));

       return (TypeAdapter<T>) new TypeAdapter<Stage>() {
           @Override
           public void write(JsonWriter out, Stage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stage
   * @throws IOException if the JSON string is invalid with respect to Stage
   */
  public static Stage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stage.class);
  }

  /**
   * Convert an instance of Stage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

