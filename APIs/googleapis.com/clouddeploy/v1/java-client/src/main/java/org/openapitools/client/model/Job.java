/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PostdeployJob;
import org.openapitools.client.model.PredeployJob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job represents an operation for a &#x60;Rollout&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_ADVANCE_CHILD_ROLLOUT_JOB = "advanceChildRolloutJob";
  @SerializedName(SERIALIZED_NAME_ADVANCE_CHILD_ROLLOUT_JOB)
  private Object advanceChildRolloutJob;

  public static final String SERIALIZED_NAME_CREATE_CHILD_ROLLOUT_JOB = "createChildRolloutJob";
  @SerializedName(SERIALIZED_NAME_CREATE_CHILD_ROLLOUT_JOB)
  private Object createChildRolloutJob;

  public static final String SERIALIZED_NAME_DEPLOY_JOB = "deployJob";
  @SerializedName(SERIALIZED_NAME_DEPLOY_JOB)
  private Object deployJob;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_RUN = "jobRun";
  @SerializedName(SERIALIZED_NAME_JOB_RUN)
  private String jobRun;

  public static final String SERIALIZED_NAME_POSTDEPLOY_JOB = "postdeployJob";
  @SerializedName(SERIALIZED_NAME_POSTDEPLOY_JOB)
  private PostdeployJob postdeployJob;

  public static final String SERIALIZED_NAME_PREDEPLOY_JOB = "predeployJob";
  @SerializedName(SERIALIZED_NAME_PREDEPLOY_JOB)
  private PredeployJob predeployJob;

  public static final String SERIALIZED_NAME_SKIP_MESSAGE = "skipMessage";
  @SerializedName(SERIALIZED_NAME_SKIP_MESSAGE)
  private String skipMessage;

  /**
   * Output only. The current state of the Job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    DISABLED("DISABLED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    ABORTED("ABORTED"),
    
    SKIPPED("SKIPPED"),
    
    IGNORED("IGNORED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VERIFY_JOB = "verifyJob";
  @SerializedName(SERIALIZED_NAME_VERIFY_JOB)
  private Object verifyJob;

  public Job() {
  }

  public Job(
     String id, 
     String jobRun, 
     String skipMessage, 
     StateEnum state
  ) {
    this();
    this.id = id;
    this.jobRun = jobRun;
    this.skipMessage = skipMessage;
    this.state = state;
  }

  public Job advanceChildRolloutJob(Object advanceChildRolloutJob) {
    this.advanceChildRolloutJob = advanceChildRolloutJob;
    return this;
  }

  /**
   * An advanceChildRollout Job.
   * @return advanceChildRolloutJob
   */
  @javax.annotation.Nullable
  public Object getAdvanceChildRolloutJob() {
    return advanceChildRolloutJob;
  }

  public void setAdvanceChildRolloutJob(Object advanceChildRolloutJob) {
    this.advanceChildRolloutJob = advanceChildRolloutJob;
  }


  public Job createChildRolloutJob(Object createChildRolloutJob) {
    this.createChildRolloutJob = createChildRolloutJob;
    return this;
  }

  /**
   * A createChildRollout Job.
   * @return createChildRolloutJob
   */
  @javax.annotation.Nullable
  public Object getCreateChildRolloutJob() {
    return createChildRolloutJob;
  }

  public void setCreateChildRolloutJob(Object createChildRolloutJob) {
    this.createChildRolloutJob = createChildRolloutJob;
  }


  public Job deployJob(Object deployJob) {
    this.deployJob = deployJob;
    return this;
  }

  /**
   * A deploy Job.
   * @return deployJob
   */
  @javax.annotation.Nullable
  public Object getDeployJob() {
    return deployJob;
  }

  public void setDeployJob(Object deployJob) {
    this.deployJob = deployJob;
  }


  /**
   * Output only. The ID of the Job.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Output only. The name of the &#x60;JobRun&#x60; responsible for the most recent invocation of this Job.
   * @return jobRun
   */
  @javax.annotation.Nullable
  public String getJobRun() {
    return jobRun;
  }



  public Job postdeployJob(PostdeployJob postdeployJob) {
    this.postdeployJob = postdeployJob;
    return this;
  }

  /**
   * Get postdeployJob
   * @return postdeployJob
   */
  @javax.annotation.Nullable
  public PostdeployJob getPostdeployJob() {
    return postdeployJob;
  }

  public void setPostdeployJob(PostdeployJob postdeployJob) {
    this.postdeployJob = postdeployJob;
  }


  public Job predeployJob(PredeployJob predeployJob) {
    this.predeployJob = predeployJob;
    return this;
  }

  /**
   * Get predeployJob
   * @return predeployJob
   */
  @javax.annotation.Nullable
  public PredeployJob getPredeployJob() {
    return predeployJob;
  }

  public void setPredeployJob(PredeployJob predeployJob) {
    this.predeployJob = predeployJob;
  }


  /**
   * Output only. Additional information on why the Job was skipped, if available.
   * @return skipMessage
   */
  @javax.annotation.Nullable
  public String getSkipMessage() {
    return skipMessage;
  }



  /**
   * Output only. The current state of the Job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Job verifyJob(Object verifyJob) {
    this.verifyJob = verifyJob;
    return this;
  }

  /**
   * A verify Job.
   * @return verifyJob
   */
  @javax.annotation.Nullable
  public Object getVerifyJob() {
    return verifyJob;
  }

  public void setVerifyJob(Object verifyJob) {
    this.verifyJob = verifyJob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.advanceChildRolloutJob, job.advanceChildRolloutJob) &&
        Objects.equals(this.createChildRolloutJob, job.createChildRolloutJob) &&
        Objects.equals(this.deployJob, job.deployJob) &&
        Objects.equals(this.id, job.id) &&
        Objects.equals(this.jobRun, job.jobRun) &&
        Objects.equals(this.postdeployJob, job.postdeployJob) &&
        Objects.equals(this.predeployJob, job.predeployJob) &&
        Objects.equals(this.skipMessage, job.skipMessage) &&
        Objects.equals(this.state, job.state) &&
        Objects.equals(this.verifyJob, job.verifyJob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceChildRolloutJob, createChildRolloutJob, deployJob, id, jobRun, postdeployJob, predeployJob, skipMessage, state, verifyJob);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    advanceChildRolloutJob: ").append(toIndentedString(advanceChildRolloutJob)).append("\n");
    sb.append("    createChildRolloutJob: ").append(toIndentedString(createChildRolloutJob)).append("\n");
    sb.append("    deployJob: ").append(toIndentedString(deployJob)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobRun: ").append(toIndentedString(jobRun)).append("\n");
    sb.append("    postdeployJob: ").append(toIndentedString(postdeployJob)).append("\n");
    sb.append("    predeployJob: ").append(toIndentedString(predeployJob)).append("\n");
    sb.append("    skipMessage: ").append(toIndentedString(skipMessage)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    verifyJob: ").append(toIndentedString(verifyJob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanceChildRolloutJob");
    openapiFields.add("createChildRolloutJob");
    openapiFields.add("deployJob");
    openapiFields.add("id");
    openapiFields.add("jobRun");
    openapiFields.add("postdeployJob");
    openapiFields.add("predeployJob");
    openapiFields.add("skipMessage");
    openapiFields.add("state");
    openapiFields.add("verifyJob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("jobRun") != null && !jsonObj.get("jobRun").isJsonNull()) && !jsonObj.get("jobRun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobRun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobRun").toString()));
      }
      // validate the optional field `postdeployJob`
      if (jsonObj.get("postdeployJob") != null && !jsonObj.get("postdeployJob").isJsonNull()) {
        PostdeployJob.validateJsonElement(jsonObj.get("postdeployJob"));
      }
      // validate the optional field `predeployJob`
      if (jsonObj.get("predeployJob") != null && !jsonObj.get("predeployJob").isJsonNull()) {
        PredeployJob.validateJsonElement(jsonObj.get("predeployJob"));
      }
      if ((jsonObj.get("skipMessage") != null && !jsonObj.get("skipMessage").isJsonNull()) && !jsonObj.get("skipMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipMessage").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

