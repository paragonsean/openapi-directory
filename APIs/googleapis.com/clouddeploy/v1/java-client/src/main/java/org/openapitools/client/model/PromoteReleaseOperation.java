/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the information of an automated promote-release operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromoteReleaseOperation {
  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private String rollout;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private String wait;

  public PromoteReleaseOperation() {
  }

  public PromoteReleaseOperation(
     String phase, 
     String rollout, 
     String targetId, 
     String wait
  ) {
    this();
    this.phase = phase;
    this.rollout = rollout;
    this.targetId = targetId;
    this.wait = wait;
  }

  /**
   * Output only. The starting phase of the rollout created by this operation.
   * @return phase
   */
  @javax.annotation.Nullable
  public String getPhase() {
    return phase;
  }



  /**
   * Output only. The name of the rollout that initiates the &#x60;AutomationRun&#x60;.
   * @return rollout
   */
  @javax.annotation.Nullable
  public String getRollout() {
    return rollout;
  }



  /**
   * Output only. The ID of the target that represents the promotion stage to which the release will be promoted. The value of this field is the last segment of a target name.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }



  /**
   * Output only. How long the operation will be paused.
   * @return wait
   */
  @javax.annotation.Nullable
  public String getWait() {
    return wait;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromoteReleaseOperation promoteReleaseOperation = (PromoteReleaseOperation) o;
    return Objects.equals(this.phase, promoteReleaseOperation.phase) &&
        Objects.equals(this.rollout, promoteReleaseOperation.rollout) &&
        Objects.equals(this.targetId, promoteReleaseOperation.targetId) &&
        Objects.equals(this.wait, promoteReleaseOperation.wait);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phase, rollout, targetId, wait);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromoteReleaseOperation {\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phase");
    openapiFields.add("rollout");
    openapiFields.add("targetId");
    openapiFields.add("wait");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromoteReleaseOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromoteReleaseOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromoteReleaseOperation is not found in the empty JSON string", PromoteReleaseOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromoteReleaseOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromoteReleaseOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      if ((jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) && !jsonObj.get("rollout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollout").toString()));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("wait") != null && !jsonObj.get("wait").isJsonNull()) && !jsonObj.get("wait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromoteReleaseOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromoteReleaseOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromoteReleaseOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromoteReleaseOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<PromoteReleaseOperation>() {
           @Override
           public void write(JsonWriter out, PromoteReleaseOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromoteReleaseOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromoteReleaseOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromoteReleaseOperation
   * @throws IOException if the JSON string is invalid with respect to PromoteReleaseOperation
   */
  public static PromoteReleaseOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromoteReleaseOperation.class);
  }

  /**
   * Convert an instance of PromoteReleaseOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

