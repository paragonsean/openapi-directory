/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutomationRolloutMetadata contains Automation-related actions that were performed on a rollout.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationRolloutMetadata {
  public static final String SERIALIZED_NAME_ADVANCE_AUTOMATION_RUNS = "advanceAutomationRuns";
  @SerializedName(SERIALIZED_NAME_ADVANCE_AUTOMATION_RUNS)
  private List<String> advanceAutomationRuns = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_REPAIR_AUTOMATION_RUN = "currentRepairAutomationRun";
  @SerializedName(SERIALIZED_NAME_CURRENT_REPAIR_AUTOMATION_RUN)
  private String currentRepairAutomationRun;

  public static final String SERIALIZED_NAME_PROMOTE_AUTOMATION_RUN = "promoteAutomationRun";
  @SerializedName(SERIALIZED_NAME_PROMOTE_AUTOMATION_RUN)
  private String promoteAutomationRun;

  public static final String SERIALIZED_NAME_REPAIR_AUTOMATION_RUNS = "repairAutomationRuns";
  @SerializedName(SERIALIZED_NAME_REPAIR_AUTOMATION_RUNS)
  private List<String> repairAutomationRuns = new ArrayList<>();

  public AutomationRolloutMetadata() {
  }

  public AutomationRolloutMetadata(
     List<String> advanceAutomationRuns, 
     String currentRepairAutomationRun, 
     String promoteAutomationRun, 
     List<String> repairAutomationRuns
  ) {
    this();
    this.advanceAutomationRuns = advanceAutomationRuns;
    this.currentRepairAutomationRun = currentRepairAutomationRun;
    this.promoteAutomationRun = promoteAutomationRun;
    this.repairAutomationRuns = repairAutomationRuns;
  }

  /**
   * Output only. The IDs of the AutomationRuns initiated by an advance rollout rule.
   * @return advanceAutomationRuns
   */
  @javax.annotation.Nullable
  public List<String> getAdvanceAutomationRuns() {
    return advanceAutomationRuns;
  }



  /**
   * Output only. The current AutomationRun repairing the rollout.
   * @return currentRepairAutomationRun
   */
  @javax.annotation.Nullable
  public String getCurrentRepairAutomationRun() {
    return currentRepairAutomationRun;
  }



  /**
   * Output only. The ID of the AutomationRun initiated by a promote release rule.
   * @return promoteAutomationRun
   */
  @javax.annotation.Nullable
  public String getPromoteAutomationRun() {
    return promoteAutomationRun;
  }



  /**
   * Output only. The IDs of the AutomationRuns initiated by a repair rollout rule.
   * @return repairAutomationRuns
   */
  @javax.annotation.Nullable
  public List<String> getRepairAutomationRuns() {
    return repairAutomationRuns;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationRolloutMetadata automationRolloutMetadata = (AutomationRolloutMetadata) o;
    return Objects.equals(this.advanceAutomationRuns, automationRolloutMetadata.advanceAutomationRuns) &&
        Objects.equals(this.currentRepairAutomationRun, automationRolloutMetadata.currentRepairAutomationRun) &&
        Objects.equals(this.promoteAutomationRun, automationRolloutMetadata.promoteAutomationRun) &&
        Objects.equals(this.repairAutomationRuns, automationRolloutMetadata.repairAutomationRuns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceAutomationRuns, currentRepairAutomationRun, promoteAutomationRun, repairAutomationRuns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationRolloutMetadata {\n");
    sb.append("    advanceAutomationRuns: ").append(toIndentedString(advanceAutomationRuns)).append("\n");
    sb.append("    currentRepairAutomationRun: ").append(toIndentedString(currentRepairAutomationRun)).append("\n");
    sb.append("    promoteAutomationRun: ").append(toIndentedString(promoteAutomationRun)).append("\n");
    sb.append("    repairAutomationRuns: ").append(toIndentedString(repairAutomationRuns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanceAutomationRuns");
    openapiFields.add("currentRepairAutomationRun");
    openapiFields.add("promoteAutomationRun");
    openapiFields.add("repairAutomationRuns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationRolloutMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationRolloutMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationRolloutMetadata is not found in the empty JSON string", AutomationRolloutMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationRolloutMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationRolloutMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("advanceAutomationRuns") != null && !jsonObj.get("advanceAutomationRuns").isJsonNull() && !jsonObj.get("advanceAutomationRuns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advanceAutomationRuns` to be an array in the JSON string but got `%s`", jsonObj.get("advanceAutomationRuns").toString()));
      }
      if ((jsonObj.get("currentRepairAutomationRun") != null && !jsonObj.get("currentRepairAutomationRun").isJsonNull()) && !jsonObj.get("currentRepairAutomationRun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRepairAutomationRun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRepairAutomationRun").toString()));
      }
      if ((jsonObj.get("promoteAutomationRun") != null && !jsonObj.get("promoteAutomationRun").isJsonNull()) && !jsonObj.get("promoteAutomationRun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promoteAutomationRun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promoteAutomationRun").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("repairAutomationRuns") != null && !jsonObj.get("repairAutomationRuns").isJsonNull() && !jsonObj.get("repairAutomationRuns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `repairAutomationRuns` to be an array in the JSON string but got `%s`", jsonObj.get("repairAutomationRuns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationRolloutMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationRolloutMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationRolloutMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationRolloutMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationRolloutMetadata>() {
           @Override
           public void write(JsonWriter out, AutomationRolloutMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationRolloutMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationRolloutMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationRolloutMetadata
   * @throws IOException if the JSON string is invalid with respect to AutomationRolloutMetadata
   */
  public static AutomationRolloutMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationRolloutMetadata.class);
  }

  /**
   * Convert an instance of AutomationRolloutMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

