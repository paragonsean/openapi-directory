/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RenderMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of rendering for a single target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetRender {
  /**
   * Output only. Reason this render failed. This will always be unspecified while the render in progress.
   */
  @JsonAdapter(FailureCauseEnum.Adapter.class)
  public enum FailureCauseEnum {
    FAILURE_CAUSE_UNSPECIFIED("FAILURE_CAUSE_UNSPECIFIED"),
    
    CLOUD_BUILD_UNAVAILABLE("CLOUD_BUILD_UNAVAILABLE"),
    
    EXECUTION_FAILED("EXECUTION_FAILED"),
    
    CLOUD_BUILD_REQUEST_FAILED("CLOUD_BUILD_REQUEST_FAILED"),
    
    VERIFICATION_CONFIG_NOT_FOUND("VERIFICATION_CONFIG_NOT_FOUND"),
    
    CUSTOM_ACTION_NOT_FOUND("CUSTOM_ACTION_NOT_FOUND"),
    
    DEPLOYMENT_STRATEGY_NOT_SUPPORTED("DEPLOYMENT_STRATEGY_NOT_SUPPORTED"),
    
    RENDER_FEATURE_NOT_SUPPORTED("RENDER_FEATURE_NOT_SUPPORTED");

    private String value;

    FailureCauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureCauseEnum fromValue(String value) {
      for (FailureCauseEnum b : FailureCauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureCauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureCauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureCauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureCauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureCauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_CAUSE = "failureCause";
  @SerializedName(SERIALIZED_NAME_FAILURE_CAUSE)
  private FailureCauseEnum failureCause;

  public static final String SERIALIZED_NAME_FAILURE_MESSAGE = "failureMessage";
  @SerializedName(SERIALIZED_NAME_FAILURE_MESSAGE)
  private String failureMessage;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private RenderMetadata metadata;

  public static final String SERIALIZED_NAME_RENDERING_BUILD = "renderingBuild";
  @SerializedName(SERIALIZED_NAME_RENDERING_BUILD)
  private String renderingBuild;

  /**
   * Output only. Current state of the render operation for this Target.
   */
  @JsonAdapter(RenderingStateEnum.Adapter.class)
  public enum RenderingStateEnum {
    TARGET_RENDER_STATE_UNSPECIFIED("TARGET_RENDER_STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS");

    private String value;

    RenderingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderingStateEnum fromValue(String value) {
      for (RenderingStateEnum b : RenderingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RenderingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RenderingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RenderingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENDERING_STATE = "renderingState";
  @SerializedName(SERIALIZED_NAME_RENDERING_STATE)
  private RenderingStateEnum renderingState;

  public TargetRender() {
  }

  public TargetRender(
     FailureCauseEnum failureCause, 
     String failureMessage, 
     String renderingBuild, 
     RenderingStateEnum renderingState
  ) {
    this();
    this.failureCause = failureCause;
    this.failureMessage = failureMessage;
    this.renderingBuild = renderingBuild;
    this.renderingState = renderingState;
  }

  /**
   * Output only. Reason this render failed. This will always be unspecified while the render in progress.
   * @return failureCause
   */
  @javax.annotation.Nullable
  public FailureCauseEnum getFailureCause() {
    return failureCause;
  }



  /**
   * Output only. Additional information about the render failure, if available.
   * @return failureMessage
   */
  @javax.annotation.Nullable
  public String getFailureMessage() {
    return failureMessage;
  }



  public TargetRender metadata(RenderMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public RenderMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(RenderMetadata metadata) {
    this.metadata = metadata;
  }


  /**
   * Output only. The resource name of the Cloud Build &#x60;Build&#x60; object that is used to render the manifest for this target. Format is &#x60;projects/{project}/locations/{location}/builds/{build}&#x60;.
   * @return renderingBuild
   */
  @javax.annotation.Nullable
  public String getRenderingBuild() {
    return renderingBuild;
  }



  /**
   * Output only. Current state of the render operation for this Target.
   * @return renderingState
   */
  @javax.annotation.Nullable
  public RenderingStateEnum getRenderingState() {
    return renderingState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetRender targetRender = (TargetRender) o;
    return Objects.equals(this.failureCause, targetRender.failureCause) &&
        Objects.equals(this.failureMessage, targetRender.failureMessage) &&
        Objects.equals(this.metadata, targetRender.metadata) &&
        Objects.equals(this.renderingBuild, targetRender.renderingBuild) &&
        Objects.equals(this.renderingState, targetRender.renderingState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureCause, failureMessage, metadata, renderingBuild, renderingState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetRender {\n");
    sb.append("    failureCause: ").append(toIndentedString(failureCause)).append("\n");
    sb.append("    failureMessage: ").append(toIndentedString(failureMessage)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    renderingBuild: ").append(toIndentedString(renderingBuild)).append("\n");
    sb.append("    renderingState: ").append(toIndentedString(renderingState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failureCause");
    openapiFields.add("failureMessage");
    openapiFields.add("metadata");
    openapiFields.add("renderingBuild");
    openapiFields.add("renderingState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetRender
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetRender.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetRender is not found in the empty JSON string", TargetRender.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetRender.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetRender` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failureCause") != null && !jsonObj.get("failureCause").isJsonNull()) && !jsonObj.get("failureCause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureCause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureCause").toString()));
      }
      // validate the optional field `failureCause`
      if (jsonObj.get("failureCause") != null && !jsonObj.get("failureCause").isJsonNull()) {
        FailureCauseEnum.validateJsonElement(jsonObj.get("failureCause"));
      }
      if ((jsonObj.get("failureMessage") != null && !jsonObj.get("failureMessage").isJsonNull()) && !jsonObj.get("failureMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureMessage").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        RenderMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("renderingBuild") != null && !jsonObj.get("renderingBuild").isJsonNull()) && !jsonObj.get("renderingBuild").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderingBuild` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderingBuild").toString()));
      }
      if ((jsonObj.get("renderingState") != null && !jsonObj.get("renderingState").isJsonNull()) && !jsonObj.get("renderingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderingState").toString()));
      }
      // validate the optional field `renderingState`
      if (jsonObj.get("renderingState") != null && !jsonObj.get("renderingState").isJsonNull()) {
        RenderingStateEnum.validateJsonElement(jsonObj.get("renderingState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetRender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetRender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetRender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetRender.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetRender>() {
           @Override
           public void write(JsonWriter out, TargetRender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetRender read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetRender given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetRender
   * @throws IOException if the JSON string is invalid with respect to TargetRender
   */
  public static TargetRender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetRender.class);
  }

  /**
   * Convert an instance of TargetRender to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

