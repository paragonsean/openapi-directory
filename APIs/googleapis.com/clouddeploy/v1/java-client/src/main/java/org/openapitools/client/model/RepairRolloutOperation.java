/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RepairPhase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the information for an automated &#x60;repair rollout&#x60; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:08.046775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairRolloutOperation {
  public static final String SERIALIZED_NAME_CURRENT_REPAIR_MODE_INDEX = "currentRepairModeIndex";
  @SerializedName(SERIALIZED_NAME_CURRENT_REPAIR_MODE_INDEX)
  private String currentRepairModeIndex;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PHASE_ID = "phaseId";
  @SerializedName(SERIALIZED_NAME_PHASE_ID)
  private String phaseId;

  public static final String SERIALIZED_NAME_REPAIR_PHASES = "repairPhases";
  @SerializedName(SERIALIZED_NAME_REPAIR_PHASES)
  private List<RepairPhase> repairPhases = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private String rollout;

  public RepairRolloutOperation() {
  }

  public RepairRolloutOperation(
     String currentRepairModeIndex, 
     String jobId, 
     String phaseId, 
     List<RepairPhase> repairPhases, 
     String rollout
  ) {
    this();
    this.currentRepairModeIndex = currentRepairModeIndex;
    this.jobId = jobId;
    this.phaseId = phaseId;
    this.repairPhases = repairPhases;
    this.rollout = rollout;
  }

  /**
   * Output only. The index of the current repair action in the repair sequence.
   * @return currentRepairModeIndex
   */
  @javax.annotation.Nullable
  public String getCurrentRepairModeIndex() {
    return currentRepairModeIndex;
  }



  /**
   * Output only. The job ID for the Job to repair.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }



  /**
   * Output only. The phase ID of the phase that includes the job being repaired.
   * @return phaseId
   */
  @javax.annotation.Nullable
  public String getPhaseId() {
    return phaseId;
  }



  /**
   * Output only. Records of the repair attempts. Each repair phase may have multiple retry attempts or single rollback attempt.
   * @return repairPhases
   */
  @javax.annotation.Nullable
  public List<RepairPhase> getRepairPhases() {
    return repairPhases;
  }



  /**
   * Output only. The name of the rollout that initiates the &#x60;AutomationRun&#x60;.
   * @return rollout
   */
  @javax.annotation.Nullable
  public String getRollout() {
    return rollout;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairRolloutOperation repairRolloutOperation = (RepairRolloutOperation) o;
    return Objects.equals(this.currentRepairModeIndex, repairRolloutOperation.currentRepairModeIndex) &&
        Objects.equals(this.jobId, repairRolloutOperation.jobId) &&
        Objects.equals(this.phaseId, repairRolloutOperation.phaseId) &&
        Objects.equals(this.repairPhases, repairRolloutOperation.repairPhases) &&
        Objects.equals(this.rollout, repairRolloutOperation.rollout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentRepairModeIndex, jobId, phaseId, repairPhases, rollout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairRolloutOperation {\n");
    sb.append("    currentRepairModeIndex: ").append(toIndentedString(currentRepairModeIndex)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    phaseId: ").append(toIndentedString(phaseId)).append("\n");
    sb.append("    repairPhases: ").append(toIndentedString(repairPhases)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentRepairModeIndex");
    openapiFields.add("jobId");
    openapiFields.add("phaseId");
    openapiFields.add("repairPhases");
    openapiFields.add("rollout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairRolloutOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairRolloutOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairRolloutOperation is not found in the empty JSON string", RepairRolloutOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairRolloutOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairRolloutOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentRepairModeIndex") != null && !jsonObj.get("currentRepairModeIndex").isJsonNull()) && !jsonObj.get("currentRepairModeIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRepairModeIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRepairModeIndex").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("phaseId") != null && !jsonObj.get("phaseId").isJsonNull()) && !jsonObj.get("phaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phaseId").toString()));
      }
      if (jsonObj.get("repairPhases") != null && !jsonObj.get("repairPhases").isJsonNull()) {
        JsonArray jsonArrayrepairPhases = jsonObj.getAsJsonArray("repairPhases");
        if (jsonArrayrepairPhases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repairPhases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repairPhases` to be an array in the JSON string but got `%s`", jsonObj.get("repairPhases").toString()));
          }

          // validate the optional field `repairPhases` (array)
          for (int i = 0; i < jsonArrayrepairPhases.size(); i++) {
            RepairPhase.validateJsonElement(jsonArrayrepairPhases.get(i));
          };
        }
      }
      if ((jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) && !jsonObj.get("rollout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairRolloutOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairRolloutOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairRolloutOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairRolloutOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairRolloutOperation>() {
           @Override
           public void write(JsonWriter out, RepairRolloutOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairRolloutOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairRolloutOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairRolloutOperation
   * @throws IOException if the JSON string is invalid with respect to RepairRolloutOperation
   */
  public static RepairRolloutOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairRolloutOperation.class);
  }

  /**
   * Convert an instance of RepairRolloutOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

