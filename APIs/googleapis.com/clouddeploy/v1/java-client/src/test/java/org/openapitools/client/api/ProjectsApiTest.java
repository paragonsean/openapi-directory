/*
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdvanceRolloutRequest;
import org.openapitools.client.model.ApproveRolloutRequest;
import org.openapitools.client.model.Automation;
import org.openapitools.client.model.CustomTargetType;
import org.openapitools.client.model.DeliveryPipeline;
import org.openapitools.client.model.IgnoreJobRequest;
import org.openapitools.client.model.ListAutomationRunsResponse;
import org.openapitools.client.model.ListAutomationsResponse;
import org.openapitools.client.model.ListCustomTargetTypesResponse;
import org.openapitools.client.model.ListDeliveryPipelinesResponse;
import org.openapitools.client.model.ListJobRunsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListReleasesResponse;
import org.openapitools.client.model.ListRolloutsResponse;
import org.openapitools.client.model.ListTargetsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.RetryJobRequest;
import org.openapitools.client.model.RollbackTargetRequest;
import org.openapitools.client.model.RollbackTargetResponse;
import org.openapitools.client.model.Rollout;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new CustomTargetType in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsCustomTargetTypesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customTargetTypeId = null;
        String requestId = null;
        Boolean validateOnly = null;
        CustomTargetType customTargetType = null;
        Operation response = api.clouddeployProjectsLocationsCustomTargetTypesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customTargetTypeId, requestId, validateOnly, customTargetType);
        // TODO: test validations
    }

    /**
     * Lists CustomTargetTypes in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsCustomTargetTypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCustomTargetTypesResponse response = api.clouddeployProjectsLocationsCustomTargetTypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists AutomationRuns in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesAutomationRunsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAutomationRunsResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesAutomationRunsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Automation in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesAutomationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String automationId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Automation automation = null;
        Operation response = api.clouddeployProjectsLocationsDeliveryPipelinesAutomationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, automationId, requestId, validateOnly, automation);
        // TODO: test validations
    }

    /**
     * Lists Automations in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesAutomationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAutomationsResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesAutomationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new DeliveryPipeline in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String deliveryPipelineId = null;
        String requestId = null;
        Boolean validateOnly = null;
        DeliveryPipeline deliveryPipeline = null;
        Operation response = api.clouddeployProjectsLocationsDeliveryPipelinesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deliveryPipelineId, requestId, validateOnly, deliveryPipeline);
        // TODO: test validations
    }

    /**
     * Lists DeliveryPipelines in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDeliveryPipelinesResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Abandons a Release in the Delivery Pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesAbandon(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new Release in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String releaseId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Release release = null;
        Operation response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, releaseId, requestId, validateOnly, release);
        // TODO: test validations
    }

    /**
     * Lists Releases in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReleasesResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Advances a Rollout in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AdvanceRolloutRequest advanceRolloutRequest = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvance(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advanceRolloutRequest);
        // TODO: test validations
    }

    /**
     * Approves a Rollout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApproveRolloutRequest approveRolloutRequest = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApprove(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, approveRolloutRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Rollout in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String rolloutId = null;
        String startingPhaseId = null;
        Boolean validateOnly = null;
        Rollout rollout = null;
        Operation response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, rolloutId, startingPhaseId, validateOnly, rollout);
        // TODO: test validations
    }

    /**
     * Ignores the specified Job in a Rollout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobTest() throws ApiException {
        String rollout = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        IgnoreJobRequest ignoreJobRequest = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJob(rollout, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ignoreJobRequest);
        // TODO: test validations
    }

    /**
     * Lists JobRuns in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListJobRunsResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Terminates a Job Run in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists Rollouts in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRolloutsResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Retries the specified Job in a Rollout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobTest() throws ApiException {
        String rollout = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RetryJobRequest retryJobRequest = null;
        Object response = api.clouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJob(rollout, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, retryJobRequest);
        // TODO: test validations
    }

    /**
     * Creates a &#x60;Rollout&#x60; to roll back the specified target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsDeliveryPipelinesRollbackTargetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackTargetRequest rollbackTargetRequest = null;
        RollbackTargetResponse response = api.clouddeployProjectsLocationsDeliveryPipelinesRollbackTarget(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackTargetRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.clouddeployProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.clouddeployProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.clouddeployProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Target in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String targetId = null;
        Boolean validateOnly = null;
        Target target = null;
        Operation response = api.clouddeployProjectsLocationsTargetsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, targetId, validateOnly, target);
        // TODO: test validations
    }

    /**
     * Deletes a single Target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String etag = null;
        String requestId = null;
        Boolean validateOnly = null;
        Operation response = api.clouddeployProjectsLocationsTargetsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, etag, requestId, validateOnly);
        // TODO: test validations
    }

    /**
     * Gets details of a single Target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Target response = api.clouddeployProjectsLocationsTargetsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.clouddeployProjectsLocationsTargetsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists Targets in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTargetsResponse response = api.clouddeployProjectsLocationsTargetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single Target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        Target target = null;
        Operation response = api.clouddeployProjectsLocationsTargetsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, requestId, updateMask, validateOnly, target);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.clouddeployProjectsLocationsTargetsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clouddeployProjectsLocationsTargetsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.clouddeployProjectsLocationsTargetsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
