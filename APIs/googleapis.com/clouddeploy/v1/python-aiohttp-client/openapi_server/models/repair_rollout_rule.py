# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_rule_condition import AutomationRuleCondition
from openapi_server.models.repair_mode import RepairMode
from openapi_server import util


class RepairRolloutRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: AutomationRuleCondition=None, id: str=None, jobs: List[str]=None, repair_modes: List[RepairMode]=None, source_phases: List[str]=None):
        """RepairRolloutRule - a model defined in OpenAPI

        :param condition: The condition of this RepairRolloutRule.
        :param id: The id of this RepairRolloutRule.
        :param jobs: The jobs of this RepairRolloutRule.
        :param repair_modes: The repair_modes of this RepairRolloutRule.
        :param source_phases: The source_phases of this RepairRolloutRule.
        """
        self.openapi_types = {
            'condition': AutomationRuleCondition,
            'id': str,
            'jobs': List[str],
            'repair_modes': List[RepairMode],
            'source_phases': List[str]
        }

        self.attribute_map = {
            'condition': 'condition',
            'id': 'id',
            'jobs': 'jobs',
            'repair_modes': 'repairModes',
            'source_phases': 'sourcePhases'
        }

        self._condition = condition
        self._id = id
        self._jobs = jobs
        self._repair_modes = repair_modes
        self._source_phases = source_phases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepairRolloutRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepairRolloutRule of this RepairRolloutRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this RepairRolloutRule.


        :return: The condition of this RepairRolloutRule.
        :rtype: AutomationRuleCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this RepairRolloutRule.


        :param condition: The condition of this RepairRolloutRule.
        :type condition: AutomationRuleCondition
        """

        self._condition = condition

    @property
    def id(self):
        """Gets the id of this RepairRolloutRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :return: The id of this RepairRolloutRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepairRolloutRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :param id: The id of this RepairRolloutRule.
        :type id: str
        """

        self._id = id

    @property
    def jobs(self):
        """Gets the jobs of this RepairRolloutRule.

        Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :return: The jobs of this RepairRolloutRule.
        :rtype: List[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this RepairRolloutRule.

        Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :param jobs: The jobs of this RepairRolloutRule.
        :type jobs: List[str]
        """

        self._jobs = jobs

    @property
    def repair_modes(self):
        """Gets the repair_modes of this RepairRolloutRule.

        Required. Defines the types of automatic repair actions for failed jobs.

        :return: The repair_modes of this RepairRolloutRule.
        :rtype: List[RepairMode]
        """
        return self._repair_modes

    @repair_modes.setter
    def repair_modes(self, repair_modes):
        """Sets the repair_modes of this RepairRolloutRule.

        Required. Defines the types of automatic repair actions for failed jobs.

        :param repair_modes: The repair_modes of this RepairRolloutRule.
        :type repair_modes: List[RepairMode]
        """

        self._repair_modes = repair_modes

    @property
    def source_phases(self):
        """Gets the source_phases of this RepairRolloutRule.

        Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :return: The source_phases of this RepairRolloutRule.
        :rtype: List[str]
        """
        return self._source_phases

    @source_phases.setter
    def source_phases(self, source_phases):
        """Sets the source_phases of this RepairRolloutRule.

        Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :param source_phases: The source_phases of this RepairRolloutRule.
        :type source_phases: List[str]
        """

        self._source_phases = source_phases
