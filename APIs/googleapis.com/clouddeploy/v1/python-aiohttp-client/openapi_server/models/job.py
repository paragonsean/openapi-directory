# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postdeploy_job import PostdeployJob
from openapi_server.models.predeploy_job import PredeployJob
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_child_rollout_job: object=None, create_child_rollout_job: object=None, deploy_job: object=None, id: str=None, job_run: str=None, postdeploy_job: PostdeployJob=None, predeploy_job: PredeployJob=None, skip_message: str=None, state: str=None, verify_job: object=None):
        """Job - a model defined in OpenAPI

        :param advance_child_rollout_job: The advance_child_rollout_job of this Job.
        :param create_child_rollout_job: The create_child_rollout_job of this Job.
        :param deploy_job: The deploy_job of this Job.
        :param id: The id of this Job.
        :param job_run: The job_run of this Job.
        :param postdeploy_job: The postdeploy_job of this Job.
        :param predeploy_job: The predeploy_job of this Job.
        :param skip_message: The skip_message of this Job.
        :param state: The state of this Job.
        :param verify_job: The verify_job of this Job.
        """
        self.openapi_types = {
            'advance_child_rollout_job': object,
            'create_child_rollout_job': object,
            'deploy_job': object,
            'id': str,
            'job_run': str,
            'postdeploy_job': PostdeployJob,
            'predeploy_job': PredeployJob,
            'skip_message': str,
            'state': str,
            'verify_job': object
        }

        self.attribute_map = {
            'advance_child_rollout_job': 'advanceChildRolloutJob',
            'create_child_rollout_job': 'createChildRolloutJob',
            'deploy_job': 'deployJob',
            'id': 'id',
            'job_run': 'jobRun',
            'postdeploy_job': 'postdeployJob',
            'predeploy_job': 'predeployJob',
            'skip_message': 'skipMessage',
            'state': 'state',
            'verify_job': 'verifyJob'
        }

        self._advance_child_rollout_job = advance_child_rollout_job
        self._create_child_rollout_job = create_child_rollout_job
        self._deploy_job = deploy_job
        self._id = id
        self._job_run = job_run
        self._postdeploy_job = postdeploy_job
        self._predeploy_job = predeploy_job
        self._skip_message = skip_message
        self._state = state
        self._verify_job = verify_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_child_rollout_job(self):
        """Gets the advance_child_rollout_job of this Job.

        An advanceChildRollout Job.

        :return: The advance_child_rollout_job of this Job.
        :rtype: object
        """
        return self._advance_child_rollout_job

    @advance_child_rollout_job.setter
    def advance_child_rollout_job(self, advance_child_rollout_job):
        """Sets the advance_child_rollout_job of this Job.

        An advanceChildRollout Job.

        :param advance_child_rollout_job: The advance_child_rollout_job of this Job.
        :type advance_child_rollout_job: object
        """

        self._advance_child_rollout_job = advance_child_rollout_job

    @property
    def create_child_rollout_job(self):
        """Gets the create_child_rollout_job of this Job.

        A createChildRollout Job.

        :return: The create_child_rollout_job of this Job.
        :rtype: object
        """
        return self._create_child_rollout_job

    @create_child_rollout_job.setter
    def create_child_rollout_job(self, create_child_rollout_job):
        """Sets the create_child_rollout_job of this Job.

        A createChildRollout Job.

        :param create_child_rollout_job: The create_child_rollout_job of this Job.
        :type create_child_rollout_job: object
        """

        self._create_child_rollout_job = create_child_rollout_job

    @property
    def deploy_job(self):
        """Gets the deploy_job of this Job.

        A deploy Job.

        :return: The deploy_job of this Job.
        :rtype: object
        """
        return self._deploy_job

    @deploy_job.setter
    def deploy_job(self, deploy_job):
        """Sets the deploy_job of this Job.

        A deploy Job.

        :param deploy_job: The deploy_job of this Job.
        :type deploy_job: object
        """

        self._deploy_job = deploy_job

    @property
    def id(self):
        """Gets the id of this Job.

        Output only. The ID of the Job.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        Output only. The ID of the Job.

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_run(self):
        """Gets the job_run of this Job.

        Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.

        :return: The job_run of this Job.
        :rtype: str
        """
        return self._job_run

    @job_run.setter
    def job_run(self, job_run):
        """Sets the job_run of this Job.

        Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.

        :param job_run: The job_run of this Job.
        :type job_run: str
        """

        self._job_run = job_run

    @property
    def postdeploy_job(self):
        """Gets the postdeploy_job of this Job.


        :return: The postdeploy_job of this Job.
        :rtype: PostdeployJob
        """
        return self._postdeploy_job

    @postdeploy_job.setter
    def postdeploy_job(self, postdeploy_job):
        """Sets the postdeploy_job of this Job.


        :param postdeploy_job: The postdeploy_job of this Job.
        :type postdeploy_job: PostdeployJob
        """

        self._postdeploy_job = postdeploy_job

    @property
    def predeploy_job(self):
        """Gets the predeploy_job of this Job.


        :return: The predeploy_job of this Job.
        :rtype: PredeployJob
        """
        return self._predeploy_job

    @predeploy_job.setter
    def predeploy_job(self, predeploy_job):
        """Sets the predeploy_job of this Job.


        :param predeploy_job: The predeploy_job of this Job.
        :type predeploy_job: PredeployJob
        """

        self._predeploy_job = predeploy_job

    @property
    def skip_message(self):
        """Gets the skip_message of this Job.

        Output only. Additional information on why the Job was skipped, if available.

        :return: The skip_message of this Job.
        :rtype: str
        """
        return self._skip_message

    @skip_message.setter
    def skip_message(self, skip_message):
        """Sets the skip_message of this Job.

        Output only. Additional information on why the Job was skipped, if available.

        :param skip_message: The skip_message of this Job.
        :type skip_message: str
        """

        self._skip_message = skip_message

    @property
    def state(self):
        """Gets the state of this Job.

        Output only. The current state of the Job.

        :return: The state of this Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.

        Output only. The current state of the Job.

        :param state: The state of this Job.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "DISABLED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "ABORTED", "SKIPPED", "IGNORED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def verify_job(self):
        """Gets the verify_job of this Job.

        A verify Job.

        :return: The verify_job of this Job.
        :rtype: object
        """
        return self._verify_job

    @verify_job.setter
    def verify_job(self, verify_job):
        """Sets the verify_job of this Job.

        A verify Job.

        :param verify_job: The verify_job of this Job.
        :type verify_job: object
        """

        self._verify_job = verify_job
