# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationRolloutMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_automation_runs: List[str]=None, current_repair_automation_run: str=None, promote_automation_run: str=None, repair_automation_runs: List[str]=None):
        """AutomationRolloutMetadata - a model defined in OpenAPI

        :param advance_automation_runs: The advance_automation_runs of this AutomationRolloutMetadata.
        :param current_repair_automation_run: The current_repair_automation_run of this AutomationRolloutMetadata.
        :param promote_automation_run: The promote_automation_run of this AutomationRolloutMetadata.
        :param repair_automation_runs: The repair_automation_runs of this AutomationRolloutMetadata.
        """
        self.openapi_types = {
            'advance_automation_runs': List[str],
            'current_repair_automation_run': str,
            'promote_automation_run': str,
            'repair_automation_runs': List[str]
        }

        self.attribute_map = {
            'advance_automation_runs': 'advanceAutomationRuns',
            'current_repair_automation_run': 'currentRepairAutomationRun',
            'promote_automation_run': 'promoteAutomationRun',
            'repair_automation_runs': 'repairAutomationRuns'
        }

        self._advance_automation_runs = advance_automation_runs
        self._current_repair_automation_run = current_repair_automation_run
        self._promote_automation_run = promote_automation_run
        self._repair_automation_runs = repair_automation_runs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationRolloutMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationRolloutMetadata of this AutomationRolloutMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_automation_runs(self):
        """Gets the advance_automation_runs of this AutomationRolloutMetadata.

        Output only. The IDs of the AutomationRuns initiated by an advance rollout rule.

        :return: The advance_automation_runs of this AutomationRolloutMetadata.
        :rtype: List[str]
        """
        return self._advance_automation_runs

    @advance_automation_runs.setter
    def advance_automation_runs(self, advance_automation_runs):
        """Sets the advance_automation_runs of this AutomationRolloutMetadata.

        Output only. The IDs of the AutomationRuns initiated by an advance rollout rule.

        :param advance_automation_runs: The advance_automation_runs of this AutomationRolloutMetadata.
        :type advance_automation_runs: List[str]
        """

        self._advance_automation_runs = advance_automation_runs

    @property
    def current_repair_automation_run(self):
        """Gets the current_repair_automation_run of this AutomationRolloutMetadata.

        Output only. The current AutomationRun repairing the rollout.

        :return: The current_repair_automation_run of this AutomationRolloutMetadata.
        :rtype: str
        """
        return self._current_repair_automation_run

    @current_repair_automation_run.setter
    def current_repair_automation_run(self, current_repair_automation_run):
        """Sets the current_repair_automation_run of this AutomationRolloutMetadata.

        Output only. The current AutomationRun repairing the rollout.

        :param current_repair_automation_run: The current_repair_automation_run of this AutomationRolloutMetadata.
        :type current_repair_automation_run: str
        """

        self._current_repair_automation_run = current_repair_automation_run

    @property
    def promote_automation_run(self):
        """Gets the promote_automation_run of this AutomationRolloutMetadata.

        Output only. The ID of the AutomationRun initiated by a promote release rule.

        :return: The promote_automation_run of this AutomationRolloutMetadata.
        :rtype: str
        """
        return self._promote_automation_run

    @promote_automation_run.setter
    def promote_automation_run(self, promote_automation_run):
        """Sets the promote_automation_run of this AutomationRolloutMetadata.

        Output only. The ID of the AutomationRun initiated by a promote release rule.

        :param promote_automation_run: The promote_automation_run of this AutomationRolloutMetadata.
        :type promote_automation_run: str
        """

        self._promote_automation_run = promote_automation_run

    @property
    def repair_automation_runs(self):
        """Gets the repair_automation_runs of this AutomationRolloutMetadata.

        Output only. The IDs of the AutomationRuns initiated by a repair rollout rule.

        :return: The repair_automation_runs of this AutomationRolloutMetadata.
        :rtype: List[str]
        """
        return self._repair_automation_runs

    @repair_automation_runs.setter
    def repair_automation_runs(self, repair_automation_runs):
        """Sets the repair_automation_runs of this AutomationRolloutMetadata.

        Output only. The IDs of the AutomationRuns initiated by a repair rollout rule.

        :param repair_automation_runs: The repair_automation_runs of this AutomationRolloutMetadata.
        :type repair_automation_runs: List[str]
        """

        self._repair_automation_runs = repair_automation_runs
