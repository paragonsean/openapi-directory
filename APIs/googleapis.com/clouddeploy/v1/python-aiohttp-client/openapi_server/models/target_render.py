# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.render_metadata import RenderMetadata
from openapi_server import util


class TargetRender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_cause: str=None, failure_message: str=None, metadata: RenderMetadata=None, rendering_build: str=None, rendering_state: str=None):
        """TargetRender - a model defined in OpenAPI

        :param failure_cause: The failure_cause of this TargetRender.
        :param failure_message: The failure_message of this TargetRender.
        :param metadata: The metadata of this TargetRender.
        :param rendering_build: The rendering_build of this TargetRender.
        :param rendering_state: The rendering_state of this TargetRender.
        """
        self.openapi_types = {
            'failure_cause': str,
            'failure_message': str,
            'metadata': RenderMetadata,
            'rendering_build': str,
            'rendering_state': str
        }

        self.attribute_map = {
            'failure_cause': 'failureCause',
            'failure_message': 'failureMessage',
            'metadata': 'metadata',
            'rendering_build': 'renderingBuild',
            'rendering_state': 'renderingState'
        }

        self._failure_cause = failure_cause
        self._failure_message = failure_message
        self._metadata = metadata
        self._rendering_build = rendering_build
        self._rendering_state = rendering_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetRender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetRender of this TargetRender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_cause(self):
        """Gets the failure_cause of this TargetRender.

        Output only. Reason this render failed. This will always be unspecified while the render in progress.

        :return: The failure_cause of this TargetRender.
        :rtype: str
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this TargetRender.

        Output only. Reason this render failed. This will always be unspecified while the render in progress.

        :param failure_cause: The failure_cause of this TargetRender.
        :type failure_cause: str
        """
        allowed_values = ["FAILURE_CAUSE_UNSPECIFIED", "CLOUD_BUILD_UNAVAILABLE", "EXECUTION_FAILED", "CLOUD_BUILD_REQUEST_FAILED", "VERIFICATION_CONFIG_NOT_FOUND", "CUSTOM_ACTION_NOT_FOUND", "DEPLOYMENT_STRATEGY_NOT_SUPPORTED", "RENDER_FEATURE_NOT_SUPPORTED"]  # noqa: E501
        if failure_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_cause` ({0}), must be one of {1}"
                .format(failure_cause, allowed_values)
            )

        self._failure_cause = failure_cause

    @property
    def failure_message(self):
        """Gets the failure_message of this TargetRender.

        Output only. Additional information about the render failure, if available.

        :return: The failure_message of this TargetRender.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this TargetRender.

        Output only. Additional information about the render failure, if available.

        :param failure_message: The failure_message of this TargetRender.
        :type failure_message: str
        """

        self._failure_message = failure_message

    @property
    def metadata(self):
        """Gets the metadata of this TargetRender.


        :return: The metadata of this TargetRender.
        :rtype: RenderMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TargetRender.


        :param metadata: The metadata of this TargetRender.
        :type metadata: RenderMetadata
        """

        self._metadata = metadata

    @property
    def rendering_build(self):
        """Gets the rendering_build of this TargetRender.

        Output only. The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :return: The rendering_build of this TargetRender.
        :rtype: str
        """
        return self._rendering_build

    @rendering_build.setter
    def rendering_build(self, rendering_build):
        """Sets the rendering_build of this TargetRender.

        Output only. The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :param rendering_build: The rendering_build of this TargetRender.
        :type rendering_build: str
        """

        self._rendering_build = rendering_build

    @property
    def rendering_state(self):
        """Gets the rendering_state of this TargetRender.

        Output only. Current state of the render operation for this Target.

        :return: The rendering_state of this TargetRender.
        :rtype: str
        """
        return self._rendering_state

    @rendering_state.setter
    def rendering_state(self, rendering_state):
        """Sets the rendering_state of this TargetRender.

        Output only. Current state of the render operation for this Target.

        :param rendering_state: The rendering_state of this TargetRender.
        :type rendering_state: str
        """
        allowed_values = ["TARGET_RENDER_STATE_UNSPECIFIED", "SUCCEEDED", "FAILED", "IN_PROGRESS"]  # noqa: E501
        if rendering_state not in allowed_values:
            raise ValueError(
                "Invalid value for `rendering_state` ({0}), must be one of {1}"
                .format(rendering_state, allowed_values)
            )

        self._rendering_state = rendering_state
