# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleaseNotificationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, pipeline_uid: str=None, release: str=None, release_uid: str=None, type: str=None):
        """ReleaseNotificationEvent - a model defined in OpenAPI

        :param message: The message of this ReleaseNotificationEvent.
        :param pipeline_uid: The pipeline_uid of this ReleaseNotificationEvent.
        :param release: The release of this ReleaseNotificationEvent.
        :param release_uid: The release_uid of this ReleaseNotificationEvent.
        :param type: The type of this ReleaseNotificationEvent.
        """
        self.openapi_types = {
            'message': str,
            'pipeline_uid': str,
            'release': str,
            'release_uid': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'pipeline_uid': 'pipelineUid',
            'release': 'release',
            'release_uid': 'releaseUid',
            'type': 'type'
        }

        self._message = message
        self._pipeline_uid = pipeline_uid
        self._release = release
        self._release_uid = release_uid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseNotificationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseNotificationEvent of this ReleaseNotificationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ReleaseNotificationEvent.

        Debug message for when a notification fails to send.

        :return: The message of this ReleaseNotificationEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReleaseNotificationEvent.

        Debug message for when a notification fails to send.

        :param message: The message of this ReleaseNotificationEvent.
        :type message: str
        """

        self._message = message

    @property
    def pipeline_uid(self):
        """Gets the pipeline_uid of this ReleaseNotificationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :return: The pipeline_uid of this ReleaseNotificationEvent.
        :rtype: str
        """
        return self._pipeline_uid

    @pipeline_uid.setter
    def pipeline_uid(self, pipeline_uid):
        """Sets the pipeline_uid of this ReleaseNotificationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :param pipeline_uid: The pipeline_uid of this ReleaseNotificationEvent.
        :type pipeline_uid: str
        """

        self._pipeline_uid = pipeline_uid

    @property
    def release(self):
        """Gets the release of this ReleaseNotificationEvent.

        The name of the `Release`.

        :return: The release of this ReleaseNotificationEvent.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this ReleaseNotificationEvent.

        The name of the `Release`.

        :param release: The release of this ReleaseNotificationEvent.
        :type release: str
        """

        self._release = release

    @property
    def release_uid(self):
        """Gets the release_uid of this ReleaseNotificationEvent.

        Unique identifier of the `Release`.

        :return: The release_uid of this ReleaseNotificationEvent.
        :rtype: str
        """
        return self._release_uid

    @release_uid.setter
    def release_uid(self, release_uid):
        """Sets the release_uid of this ReleaseNotificationEvent.

        Unique identifier of the `Release`.

        :param release_uid: The release_uid of this ReleaseNotificationEvent.
        :type release_uid: str
        """

        self._release_uid = release_uid

    @property
    def type(self):
        """Gets the type of this ReleaseNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :return: The type of this ReleaseNotificationEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReleaseNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :param type: The type of this ReleaseNotificationEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
