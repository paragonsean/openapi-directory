# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.phase import Phase
from openapi_server import util


class Rollout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, approval_state: str=None, approve_time: str=None, controller_rollout: str=None, create_time: str=None, deploy_end_time: str=None, deploy_failure_cause: str=None, deploy_start_time: str=None, deploying_build: str=None, description: str=None, enqueue_time: str=None, etag: str=None, failure_reason: str=None, labels: Dict[str, str]=None, metadata: Metadata=None, name: str=None, phases: List[Phase]=None, rollback_of_rollout: str=None, rolled_back_by_rollouts: List[str]=None, state: str=None, target_id: str=None, uid: str=None):
        """Rollout - a model defined in OpenAPI

        :param annotations: The annotations of this Rollout.
        :param approval_state: The approval_state of this Rollout.
        :param approve_time: The approve_time of this Rollout.
        :param controller_rollout: The controller_rollout of this Rollout.
        :param create_time: The create_time of this Rollout.
        :param deploy_end_time: The deploy_end_time of this Rollout.
        :param deploy_failure_cause: The deploy_failure_cause of this Rollout.
        :param deploy_start_time: The deploy_start_time of this Rollout.
        :param deploying_build: The deploying_build of this Rollout.
        :param description: The description of this Rollout.
        :param enqueue_time: The enqueue_time of this Rollout.
        :param etag: The etag of this Rollout.
        :param failure_reason: The failure_reason of this Rollout.
        :param labels: The labels of this Rollout.
        :param metadata: The metadata of this Rollout.
        :param name: The name of this Rollout.
        :param phases: The phases of this Rollout.
        :param rollback_of_rollout: The rollback_of_rollout of this Rollout.
        :param rolled_back_by_rollouts: The rolled_back_by_rollouts of this Rollout.
        :param state: The state of this Rollout.
        :param target_id: The target_id of this Rollout.
        :param uid: The uid of this Rollout.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'approval_state': str,
            'approve_time': str,
            'controller_rollout': str,
            'create_time': str,
            'deploy_end_time': str,
            'deploy_failure_cause': str,
            'deploy_start_time': str,
            'deploying_build': str,
            'description': str,
            'enqueue_time': str,
            'etag': str,
            'failure_reason': str,
            'labels': Dict[str, str],
            'metadata': Metadata,
            'name': str,
            'phases': List[Phase],
            'rollback_of_rollout': str,
            'rolled_back_by_rollouts': List[str],
            'state': str,
            'target_id': str,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'approval_state': 'approvalState',
            'approve_time': 'approveTime',
            'controller_rollout': 'controllerRollout',
            'create_time': 'createTime',
            'deploy_end_time': 'deployEndTime',
            'deploy_failure_cause': 'deployFailureCause',
            'deploy_start_time': 'deployStartTime',
            'deploying_build': 'deployingBuild',
            'description': 'description',
            'enqueue_time': 'enqueueTime',
            'etag': 'etag',
            'failure_reason': 'failureReason',
            'labels': 'labels',
            'metadata': 'metadata',
            'name': 'name',
            'phases': 'phases',
            'rollback_of_rollout': 'rollbackOfRollout',
            'rolled_back_by_rollouts': 'rolledBackByRollouts',
            'state': 'state',
            'target_id': 'targetId',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._approval_state = approval_state
        self._approve_time = approve_time
        self._controller_rollout = controller_rollout
        self._create_time = create_time
        self._deploy_end_time = deploy_end_time
        self._deploy_failure_cause = deploy_failure_cause
        self._deploy_start_time = deploy_start_time
        self._deploying_build = deploying_build
        self._description = description
        self._enqueue_time = enqueue_time
        self._etag = etag
        self._failure_reason = failure_reason
        self._labels = labels
        self._metadata = metadata
        self._name = name
        self._phases = phases
        self._rollback_of_rollout = rollback_of_rollout
        self._rolled_back_by_rollouts = rolled_back_by_rollouts
        self._state = state
        self._target_id = target_id
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rollout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rollout of this Rollout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Rollout.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :return: The annotations of this Rollout.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Rollout.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :param annotations: The annotations of this Rollout.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def approval_state(self):
        """Gets the approval_state of this Rollout.

        Output only. Approval state of the `Rollout`.

        :return: The approval_state of this Rollout.
        :rtype: str
        """
        return self._approval_state

    @approval_state.setter
    def approval_state(self, approval_state):
        """Sets the approval_state of this Rollout.

        Output only. Approval state of the `Rollout`.

        :param approval_state: The approval_state of this Rollout.
        :type approval_state: str
        """
        allowed_values = ["APPROVAL_STATE_UNSPECIFIED", "NEEDS_APPROVAL", "DOES_NOT_NEED_APPROVAL", "APPROVED", "REJECTED"]  # noqa: E501
        if approval_state not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_state` ({0}), must be one of {1}"
                .format(approval_state, allowed_values)
            )

        self._approval_state = approval_state

    @property
    def approve_time(self):
        """Gets the approve_time of this Rollout.

        Output only. Time at which the `Rollout` was approved.

        :return: The approve_time of this Rollout.
        :rtype: str
        """
        return self._approve_time

    @approve_time.setter
    def approve_time(self, approve_time):
        """Sets the approve_time of this Rollout.

        Output only. Time at which the `Rollout` was approved.

        :param approve_time: The approve_time of this Rollout.
        :type approve_time: str
        """

        self._approve_time = approve_time

    @property
    def controller_rollout(self):
        """Gets the controller_rollout of this Rollout.

        Output only. Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.

        :return: The controller_rollout of this Rollout.
        :rtype: str
        """
        return self._controller_rollout

    @controller_rollout.setter
    def controller_rollout(self, controller_rollout):
        """Sets the controller_rollout of this Rollout.

        Output only. Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.

        :param controller_rollout: The controller_rollout of this Rollout.
        :type controller_rollout: str
        """

        self._controller_rollout = controller_rollout

    @property
    def create_time(self):
        """Gets the create_time of this Rollout.

        Output only. Time at which the `Rollout` was created.

        :return: The create_time of this Rollout.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Rollout.

        Output only. Time at which the `Rollout` was created.

        :param create_time: The create_time of this Rollout.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deploy_end_time(self):
        """Gets the deploy_end_time of this Rollout.

        Output only. Time at which the `Rollout` finished deploying.

        :return: The deploy_end_time of this Rollout.
        :rtype: str
        """
        return self._deploy_end_time

    @deploy_end_time.setter
    def deploy_end_time(self, deploy_end_time):
        """Sets the deploy_end_time of this Rollout.

        Output only. Time at which the `Rollout` finished deploying.

        :param deploy_end_time: The deploy_end_time of this Rollout.
        :type deploy_end_time: str
        """

        self._deploy_end_time = deploy_end_time

    @property
    def deploy_failure_cause(self):
        """Gets the deploy_failure_cause of this Rollout.

        Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.

        :return: The deploy_failure_cause of this Rollout.
        :rtype: str
        """
        return self._deploy_failure_cause

    @deploy_failure_cause.setter
    def deploy_failure_cause(self, deploy_failure_cause):
        """Sets the deploy_failure_cause of this Rollout.

        Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.

        :param deploy_failure_cause: The deploy_failure_cause of this Rollout.
        :type deploy_failure_cause: str
        """
        allowed_values = ["FAILURE_CAUSE_UNSPECIFIED", "CLOUD_BUILD_UNAVAILABLE", "EXECUTION_FAILED", "DEADLINE_EXCEEDED", "RELEASE_FAILED", "RELEASE_ABANDONED", "VERIFICATION_CONFIG_NOT_FOUND", "CLOUD_BUILD_REQUEST_FAILED", "OPERATION_FEATURE_NOT_SUPPORTED"]  # noqa: E501
        if deploy_failure_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `deploy_failure_cause` ({0}), must be one of {1}"
                .format(deploy_failure_cause, allowed_values)
            )

        self._deploy_failure_cause = deploy_failure_cause

    @property
    def deploy_start_time(self):
        """Gets the deploy_start_time of this Rollout.

        Output only. Time at which the `Rollout` started deploying.

        :return: The deploy_start_time of this Rollout.
        :rtype: str
        """
        return self._deploy_start_time

    @deploy_start_time.setter
    def deploy_start_time(self, deploy_start_time):
        """Sets the deploy_start_time of this Rollout.

        Output only. Time at which the `Rollout` started deploying.

        :param deploy_start_time: The deploy_start_time of this Rollout.
        :type deploy_start_time: str
        """

        self._deploy_start_time = deploy_start_time

    @property
    def deploying_build(self):
        """Gets the deploying_build of this Rollout.

        Output only. The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :return: The deploying_build of this Rollout.
        :rtype: str
        """
        return self._deploying_build

    @deploying_build.setter
    def deploying_build(self, deploying_build):
        """Sets the deploying_build of this Rollout.

        Output only. The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :param deploying_build: The deploying_build of this Rollout.
        :type deploying_build: str
        """

        self._deploying_build = deploying_build

    @property
    def description(self):
        """Gets the description of this Rollout.

        Description of the `Rollout` for user purposes. Max length is 255 characters.

        :return: The description of this Rollout.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rollout.

        Description of the `Rollout` for user purposes. Max length is 255 characters.

        :param description: The description of this Rollout.
        :type description: str
        """

        self._description = description

    @property
    def enqueue_time(self):
        """Gets the enqueue_time of this Rollout.

        Output only. Time at which the `Rollout` was enqueued.

        :return: The enqueue_time of this Rollout.
        :rtype: str
        """
        return self._enqueue_time

    @enqueue_time.setter
    def enqueue_time(self, enqueue_time):
        """Sets the enqueue_time of this Rollout.

        Output only. Time at which the `Rollout` was enqueued.

        :param enqueue_time: The enqueue_time of this Rollout.
        :type enqueue_time: str
        """

        self._enqueue_time = enqueue_time

    @property
    def etag(self):
        """Gets the etag of this Rollout.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Rollout.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Rollout.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Rollout.
        :type etag: str
        """

        self._etag = etag

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Rollout.

        Output only. Additional information about the rollout failure, if available.

        :return: The failure_reason of this Rollout.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Rollout.

        Output only. Additional information about the rollout failure, if available.

        :param failure_reason: The failure_reason of this Rollout.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def labels(self):
        """Gets the labels of this Rollout.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :return: The labels of this Rollout.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Rollout.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :param labels: The labels of this Rollout.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this Rollout.


        :return: The metadata of this Rollout.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Rollout.


        :param metadata: The metadata of this Rollout.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Rollout.

        Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.

        :return: The name of this Rollout.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rollout.

        Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.

        :param name: The name of this Rollout.
        :type name: str
        """

        self._name = name

    @property
    def phases(self):
        """Gets the phases of this Rollout.

        Output only. The phases that represent the workflows of this `Rollout`.

        :return: The phases of this Rollout.
        :rtype: List[Phase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this Rollout.

        Output only. The phases that represent the workflows of this `Rollout`.

        :param phases: The phases of this Rollout.
        :type phases: List[Phase]
        """

        self._phases = phases

    @property
    def rollback_of_rollout(self):
        """Gets the rollback_of_rollout of this Rollout.

        Output only. Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.

        :return: The rollback_of_rollout of this Rollout.
        :rtype: str
        """
        return self._rollback_of_rollout

    @rollback_of_rollout.setter
    def rollback_of_rollout(self, rollback_of_rollout):
        """Sets the rollback_of_rollout of this Rollout.

        Output only. Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.

        :param rollback_of_rollout: The rollback_of_rollout of this Rollout.
        :type rollback_of_rollout: str
        """

        self._rollback_of_rollout = rollback_of_rollout

    @property
    def rolled_back_by_rollouts(self):
        """Gets the rolled_back_by_rollouts of this Rollout.

        Output only. Names of `Rollouts` that rolled back this `Rollout`.

        :return: The rolled_back_by_rollouts of this Rollout.
        :rtype: List[str]
        """
        return self._rolled_back_by_rollouts

    @rolled_back_by_rollouts.setter
    def rolled_back_by_rollouts(self, rolled_back_by_rollouts):
        """Sets the rolled_back_by_rollouts of this Rollout.

        Output only. Names of `Rollouts` that rolled back this `Rollout`.

        :param rolled_back_by_rollouts: The rolled_back_by_rollouts of this Rollout.
        :type rolled_back_by_rollouts: List[str]
        """

        self._rolled_back_by_rollouts = rolled_back_by_rollouts

    @property
    def state(self):
        """Gets the state of this Rollout.

        Output only. Current state of the `Rollout`.

        :return: The state of this Rollout.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Rollout.

        Output only. Current state of the `Rollout`.

        :param state: The state of this Rollout.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SUCCEEDED", "FAILED", "IN_PROGRESS", "PENDING_APPROVAL", "APPROVAL_REJECTED", "PENDING", "PENDING_RELEASE", "CANCELLING", "CANCELLED", "HALTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target_id(self):
        """Gets the target_id of this Rollout.

        Required. The ID of Target to which this `Rollout` is deploying.

        :return: The target_id of this Rollout.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Rollout.

        Required. The ID of Target to which this `Rollout` is deploying.

        :param target_id: The target_id of this Rollout.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def uid(self):
        """Gets the uid of this Rollout.

        Output only. Unique identifier of the `Rollout`.

        :return: The uid of this Rollout.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Rollout.

        Output only. Unique identifier of the `Rollout`.

        :param uid: The uid of this Rollout.
        :type uid: str
        """

        self._uid = uid
