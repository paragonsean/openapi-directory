# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postdeploy import Postdeploy
from openapi_server.models.predeploy import Predeploy
from openapi_server import util


class CanaryDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentages: List[int]=None, postdeploy: Postdeploy=None, predeploy: Predeploy=None, verify: bool=None):
        """CanaryDeployment - a model defined in OpenAPI

        :param percentages: The percentages of this CanaryDeployment.
        :param postdeploy: The postdeploy of this CanaryDeployment.
        :param predeploy: The predeploy of this CanaryDeployment.
        :param verify: The verify of this CanaryDeployment.
        """
        self.openapi_types = {
            'percentages': List[int],
            'postdeploy': Postdeploy,
            'predeploy': Predeploy,
            'verify': bool
        }

        self.attribute_map = {
            'percentages': 'percentages',
            'postdeploy': 'postdeploy',
            'predeploy': 'predeploy',
            'verify': 'verify'
        }

        self._percentages = percentages
        self._postdeploy = postdeploy
        self._predeploy = predeploy
        self._verify = verify

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CanaryDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CanaryDeployment of this CanaryDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentages(self):
        """Gets the percentages of this CanaryDeployment.

        Required. The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.

        :return: The percentages of this CanaryDeployment.
        :rtype: List[int]
        """
        return self._percentages

    @percentages.setter
    def percentages(self, percentages):
        """Sets the percentages of this CanaryDeployment.

        Required. The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.

        :param percentages: The percentages of this CanaryDeployment.
        :type percentages: List[int]
        """

        self._percentages = percentages

    @property
    def postdeploy(self):
        """Gets the postdeploy of this CanaryDeployment.


        :return: The postdeploy of this CanaryDeployment.
        :rtype: Postdeploy
        """
        return self._postdeploy

    @postdeploy.setter
    def postdeploy(self, postdeploy):
        """Sets the postdeploy of this CanaryDeployment.


        :param postdeploy: The postdeploy of this CanaryDeployment.
        :type postdeploy: Postdeploy
        """

        self._postdeploy = postdeploy

    @property
    def predeploy(self):
        """Gets the predeploy of this CanaryDeployment.


        :return: The predeploy of this CanaryDeployment.
        :rtype: Predeploy
        """
        return self._predeploy

    @predeploy.setter
    def predeploy(self, predeploy):
        """Sets the predeploy of this CanaryDeployment.


        :param predeploy: The predeploy of this CanaryDeployment.
        :type predeploy: Predeploy
        """

        self._predeploy = predeploy

    @property
    def verify(self):
        """Gets the verify of this CanaryDeployment.

        Whether to run verify tests after each percentage deployment.

        :return: The verify of this CanaryDeployment.
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this CanaryDeployment.

        Whether to run verify tests after each percentage deployment.

        :param verify: The verify of this CanaryDeployment.
        :type verify: bool
        """

        self._verify = verify
