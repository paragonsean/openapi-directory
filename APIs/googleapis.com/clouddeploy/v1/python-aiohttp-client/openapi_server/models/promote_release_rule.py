# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_rule_condition import AutomationRuleCondition
from openapi_server import util


class PromoteReleaseRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: AutomationRuleCondition=None, destination_phase: str=None, destination_target_id: str=None, id: str=None, wait: str=None):
        """PromoteReleaseRule - a model defined in OpenAPI

        :param condition: The condition of this PromoteReleaseRule.
        :param destination_phase: The destination_phase of this PromoteReleaseRule.
        :param destination_target_id: The destination_target_id of this PromoteReleaseRule.
        :param id: The id of this PromoteReleaseRule.
        :param wait: The wait of this PromoteReleaseRule.
        """
        self.openapi_types = {
            'condition': AutomationRuleCondition,
            'destination_phase': str,
            'destination_target_id': str,
            'id': str,
            'wait': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'destination_phase': 'destinationPhase',
            'destination_target_id': 'destinationTargetId',
            'id': 'id',
            'wait': 'wait'
        }

        self._condition = condition
        self._destination_phase = destination_phase
        self._destination_target_id = destination_target_id
        self._id = id
        self._wait = wait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromoteReleaseRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromoteReleaseRule of this PromoteReleaseRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this PromoteReleaseRule.


        :return: The condition of this PromoteReleaseRule.
        :rtype: AutomationRuleCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PromoteReleaseRule.


        :param condition: The condition of this PromoteReleaseRule.
        :type condition: AutomationRuleCondition
        """

        self._condition = condition

    @property
    def destination_phase(self):
        """Gets the destination_phase of this PromoteReleaseRule.

        Optional. The starting phase of the rollout created by this operation. Default to the first phase.

        :return: The destination_phase of this PromoteReleaseRule.
        :rtype: str
        """
        return self._destination_phase

    @destination_phase.setter
    def destination_phase(self, destination_phase):
        """Sets the destination_phase of this PromoteReleaseRule.

        Optional. The starting phase of the rollout created by this operation. Default to the first phase.

        :param destination_phase: The destination_phase of this PromoteReleaseRule.
        :type destination_phase: str
        """

        self._destination_phase = destination_phase

    @property
    def destination_target_id(self):
        """Gets the destination_target_id of this PromoteReleaseRule.

        Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * \"@next\", the next target in the promotion sequence.

        :return: The destination_target_id of this PromoteReleaseRule.
        :rtype: str
        """
        return self._destination_target_id

    @destination_target_id.setter
    def destination_target_id(self, destination_target_id):
        """Sets the destination_target_id of this PromoteReleaseRule.

        Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * \"@next\", the next target in the promotion sequence.

        :param destination_target_id: The destination_target_id of this PromoteReleaseRule.
        :type destination_target_id: str
        """

        self._destination_target_id = destination_target_id

    @property
    def id(self):
        """Gets the id of this PromoteReleaseRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :return: The id of this PromoteReleaseRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromoteReleaseRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :param id: The id of this PromoteReleaseRule.
        :type id: str
        """

        self._id = id

    @property
    def wait(self):
        """Gets the wait of this PromoteReleaseRule.

        Optional. How long the release need to be paused until being promoted to the next target.

        :return: The wait of this PromoteReleaseRule.
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this PromoteReleaseRule.

        Optional. How long the release need to be paused until being promoted to the next target.

        :param wait: The wait of this PromoteReleaseRule.
        :type wait: str
        """

        self._wait = wait
