# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_target_skaffold_actions import CustomTargetSkaffoldActions
from openapi_server import util


class CustomTargetType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: str=None, custom_actions: CustomTargetSkaffoldActions=None, custom_target_type_id: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, uid: str=None, update_time: str=None):
        """CustomTargetType - a model defined in OpenAPI

        :param annotations: The annotations of this CustomTargetType.
        :param create_time: The create_time of this CustomTargetType.
        :param custom_actions: The custom_actions of this CustomTargetType.
        :param custom_target_type_id: The custom_target_type_id of this CustomTargetType.
        :param description: The description of this CustomTargetType.
        :param etag: The etag of this CustomTargetType.
        :param labels: The labels of this CustomTargetType.
        :param name: The name of this CustomTargetType.
        :param uid: The uid of this CustomTargetType.
        :param update_time: The update_time of this CustomTargetType.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': str,
            'custom_actions': CustomTargetSkaffoldActions,
            'custom_target_type_id': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'custom_actions': 'customActions',
            'custom_target_type_id': 'customTargetTypeId',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._custom_actions = custom_actions
        self._custom_target_type_id = custom_target_type_id
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomTargetType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomTargetType of this CustomTargetType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this CustomTargetType.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :return: The annotations of this CustomTargetType.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this CustomTargetType.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :param annotations: The annotations of this CustomTargetType.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this CustomTargetType.

        Output only. Time at which the `CustomTargetType` was created.

        :return: The create_time of this CustomTargetType.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CustomTargetType.

        Output only. Time at which the `CustomTargetType` was created.

        :param create_time: The create_time of this CustomTargetType.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_actions(self):
        """Gets the custom_actions of this CustomTargetType.


        :return: The custom_actions of this CustomTargetType.
        :rtype: CustomTargetSkaffoldActions
        """
        return self._custom_actions

    @custom_actions.setter
    def custom_actions(self, custom_actions):
        """Sets the custom_actions of this CustomTargetType.


        :param custom_actions: The custom_actions of this CustomTargetType.
        :type custom_actions: CustomTargetSkaffoldActions
        """

        self._custom_actions = custom_actions

    @property
    def custom_target_type_id(self):
        """Gets the custom_target_type_id of this CustomTargetType.

        Output only. Resource id of the `CustomTargetType`.

        :return: The custom_target_type_id of this CustomTargetType.
        :rtype: str
        """
        return self._custom_target_type_id

    @custom_target_type_id.setter
    def custom_target_type_id(self, custom_target_type_id):
        """Sets the custom_target_type_id of this CustomTargetType.

        Output only. Resource id of the `CustomTargetType`.

        :param custom_target_type_id: The custom_target_type_id of this CustomTargetType.
        :type custom_target_type_id: str
        """

        self._custom_target_type_id = custom_target_type_id

    @property
    def description(self):
        """Gets the description of this CustomTargetType.

        Optional. Description of the `CustomTargetType`. Max length is 255 characters.

        :return: The description of this CustomTargetType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomTargetType.

        Optional. Description of the `CustomTargetType`. Max length is 255 characters.

        :param description: The description of this CustomTargetType.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this CustomTargetType.

        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this CustomTargetType.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomTargetType.

        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this CustomTargetType.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this CustomTargetType.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :return: The labels of this CustomTargetType.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CustomTargetType.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :param labels: The labels of this CustomTargetType.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CustomTargetType.

        Optional. Name of the `CustomTargetType`. Format is `projects/{project}/locations/{location}/customTargetTypes/a-z{0,62}`.

        :return: The name of this CustomTargetType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomTargetType.

        Optional. Name of the `CustomTargetType`. Format is `projects/{project}/locations/{location}/customTargetTypes/a-z{0,62}`.

        :param name: The name of this CustomTargetType.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this CustomTargetType.

        Output only. Unique identifier of the `CustomTargetType`.

        :return: The uid of this CustomTargetType.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomTargetType.

        Output only. Unique identifier of the `CustomTargetType`.

        :param uid: The uid of this CustomTargetType.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this CustomTargetType.

        Output only. Most recent time at which the `CustomTargetType` was updated.

        :return: The update_time of this CustomTargetType.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CustomTargetType.

        Output only. Most recent time at which the `CustomTargetType` was updated.

        :param update_time: The update_time of this CustomTargetType.
        :type update_time: str
        """

        self._update_time = update_time
