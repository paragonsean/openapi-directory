# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_rule_condition import AutomationRuleCondition
from openapi_server import util


class AdvanceRolloutRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: AutomationRuleCondition=None, id: str=None, source_phases: List[str]=None, wait: str=None):
        """AdvanceRolloutRule - a model defined in OpenAPI

        :param condition: The condition of this AdvanceRolloutRule.
        :param id: The id of this AdvanceRolloutRule.
        :param source_phases: The source_phases of this AdvanceRolloutRule.
        :param wait: The wait of this AdvanceRolloutRule.
        """
        self.openapi_types = {
            'condition': AutomationRuleCondition,
            'id': str,
            'source_phases': List[str],
            'wait': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'id': 'id',
            'source_phases': 'sourcePhases',
            'wait': 'wait'
        }

        self._condition = condition
        self._id = id
        self._source_phases = source_phases
        self._wait = wait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvanceRolloutRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvanceRolloutRule of this AdvanceRolloutRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this AdvanceRolloutRule.


        :return: The condition of this AdvanceRolloutRule.
        :rtype: AutomationRuleCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AdvanceRolloutRule.


        :param condition: The condition of this AdvanceRolloutRule.
        :type condition: AutomationRuleCondition
        """

        self._condition = condition

    @property
    def id(self):
        """Gets the id of this AdvanceRolloutRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :return: The id of this AdvanceRolloutRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdvanceRolloutRule.

        Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.

        :param id: The id of this AdvanceRolloutRule.
        :type id: str
        """

        self._id = id

    @property
    def source_phases(self):
        """Gets the source_phases of this AdvanceRolloutRule.

        Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :return: The source_phases of this AdvanceRolloutRule.
        :rtype: List[str]
        """
        return self._source_phases

    @source_phases.setter
    def source_phases(self, source_phases):
        """Sets the source_phases of this AdvanceRolloutRule.

        Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :param source_phases: The source_phases of this AdvanceRolloutRule.
        :type source_phases: List[str]
        """

        self._source_phases = source_phases

    @property
    def wait(self):
        """Gets the wait of this AdvanceRolloutRule.

        Optional. How long to wait after a rollout is finished.

        :return: The wait of this AdvanceRolloutRule.
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this AdvanceRolloutRule.

        Optional. How long to wait after a rollout is finished.

        :param wait: The wait of this AdvanceRolloutRule.
        :type wait: str
        """

        self._wait = wait
