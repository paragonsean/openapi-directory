# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationRunEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation_id: str=None, automation_run: str=None, destination_target_id: str=None, message: str=None, pipeline_uid: str=None, rule_id: str=None, type: str=None):
        """AutomationRunEvent - a model defined in OpenAPI

        :param automation_id: The automation_id of this AutomationRunEvent.
        :param automation_run: The automation_run of this AutomationRunEvent.
        :param destination_target_id: The destination_target_id of this AutomationRunEvent.
        :param message: The message of this AutomationRunEvent.
        :param pipeline_uid: The pipeline_uid of this AutomationRunEvent.
        :param rule_id: The rule_id of this AutomationRunEvent.
        :param type: The type of this AutomationRunEvent.
        """
        self.openapi_types = {
            'automation_id': str,
            'automation_run': str,
            'destination_target_id': str,
            'message': str,
            'pipeline_uid': str,
            'rule_id': str,
            'type': str
        }

        self.attribute_map = {
            'automation_id': 'automationId',
            'automation_run': 'automationRun',
            'destination_target_id': 'destinationTargetId',
            'message': 'message',
            'pipeline_uid': 'pipelineUid',
            'rule_id': 'ruleId',
            'type': 'type'
        }

        self._automation_id = automation_id
        self._automation_run = automation_run
        self._destination_target_id = destination_target_id
        self._message = message
        self._pipeline_uid = pipeline_uid
        self._rule_id = rule_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationRunEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationRunEvent of this AutomationRunEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation_id(self):
        """Gets the automation_id of this AutomationRunEvent.

        Identifier of the `Automation`.

        :return: The automation_id of this AutomationRunEvent.
        :rtype: str
        """
        return self._automation_id

    @automation_id.setter
    def automation_id(self, automation_id):
        """Sets the automation_id of this AutomationRunEvent.

        Identifier of the `Automation`.

        :param automation_id: The automation_id of this AutomationRunEvent.
        :type automation_id: str
        """

        self._automation_id = automation_id

    @property
    def automation_run(self):
        """Gets the automation_run of this AutomationRunEvent.

        The name of the `AutomationRun`.

        :return: The automation_run of this AutomationRunEvent.
        :rtype: str
        """
        return self._automation_run

    @automation_run.setter
    def automation_run(self, automation_run):
        """Sets the automation_run of this AutomationRunEvent.

        The name of the `AutomationRun`.

        :param automation_run: The automation_run of this AutomationRunEvent.
        :type automation_run: str
        """

        self._automation_run = automation_run

    @property
    def destination_target_id(self):
        """Gets the destination_target_id of this AutomationRunEvent.

        ID of the `Target` to which the `AutomationRun` is created.

        :return: The destination_target_id of this AutomationRunEvent.
        :rtype: str
        """
        return self._destination_target_id

    @destination_target_id.setter
    def destination_target_id(self, destination_target_id):
        """Sets the destination_target_id of this AutomationRunEvent.

        ID of the `Target` to which the `AutomationRun` is created.

        :param destination_target_id: The destination_target_id of this AutomationRunEvent.
        :type destination_target_id: str
        """

        self._destination_target_id = destination_target_id

    @property
    def message(self):
        """Gets the message of this AutomationRunEvent.

        Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.

        :return: The message of this AutomationRunEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AutomationRunEvent.

        Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.

        :param message: The message of this AutomationRunEvent.
        :type message: str
        """

        self._message = message

    @property
    def pipeline_uid(self):
        """Gets the pipeline_uid of this AutomationRunEvent.

        Unique identifier of the `DeliveryPipeline`.

        :return: The pipeline_uid of this AutomationRunEvent.
        :rtype: str
        """
        return self._pipeline_uid

    @pipeline_uid.setter
    def pipeline_uid(self, pipeline_uid):
        """Sets the pipeline_uid of this AutomationRunEvent.

        Unique identifier of the `DeliveryPipeline`.

        :param pipeline_uid: The pipeline_uid of this AutomationRunEvent.
        :type pipeline_uid: str
        """

        self._pipeline_uid = pipeline_uid

    @property
    def rule_id(self):
        """Gets the rule_id of this AutomationRunEvent.

        Identifier of the `Automation` rule.

        :return: The rule_id of this AutomationRunEvent.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AutomationRunEvent.

        Identifier of the `Automation` rule.

        :param rule_id: The rule_id of this AutomationRunEvent.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def type(self):
        """Gets the type of this AutomationRunEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :return: The type of this AutomationRunEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationRunEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :param type: The type of this AutomationRunEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
