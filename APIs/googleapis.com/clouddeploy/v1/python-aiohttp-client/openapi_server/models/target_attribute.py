# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, labels: Dict[str, str]=None):
        """TargetAttribute - a model defined in OpenAPI

        :param id: The id of this TargetAttribute.
        :param labels: The labels of this TargetAttribute.
        """
        self.openapi_types = {
            'id': str,
            'labels': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'labels': 'labels'
        }

        self._id = id
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetAttribute of this TargetAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TargetAttribute.

        ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * \"*\", all targets in a location.

        :return: The id of this TargetAttribute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetAttribute.

        ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * \"*\", all targets in a location.

        :param id: The id of this TargetAttribute.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this TargetAttribute.

        Target labels.

        :return: The labels of this TargetAttribute.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TargetAttribute.

        Target labels.

        :param labels: The labels of this TargetAttribute.
        :type labels: Dict[str, str]
        """

        self._labels = labels
