# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkaffoldSupportedCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maintenance_mode_time: str=None, skaffold_support_state: str=None, status: bool=None, support_expiration_time: str=None):
        """SkaffoldSupportedCondition - a model defined in OpenAPI

        :param maintenance_mode_time: The maintenance_mode_time of this SkaffoldSupportedCondition.
        :param skaffold_support_state: The skaffold_support_state of this SkaffoldSupportedCondition.
        :param status: The status of this SkaffoldSupportedCondition.
        :param support_expiration_time: The support_expiration_time of this SkaffoldSupportedCondition.
        """
        self.openapi_types = {
            'maintenance_mode_time': str,
            'skaffold_support_state': str,
            'status': bool,
            'support_expiration_time': str
        }

        self.attribute_map = {
            'maintenance_mode_time': 'maintenanceModeTime',
            'skaffold_support_state': 'skaffoldSupportState',
            'status': 'status',
            'support_expiration_time': 'supportExpirationTime'
        }

        self._maintenance_mode_time = maintenance_mode_time
        self._skaffold_support_state = skaffold_support_state
        self._status = status
        self._support_expiration_time = support_expiration_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkaffoldSupportedCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkaffoldSupportedCondition of this SkaffoldSupportedCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maintenance_mode_time(self):
        """Gets the maintenance_mode_time of this SkaffoldSupportedCondition.

        The time at which this release's version of Skaffold will enter maintenance mode.

        :return: The maintenance_mode_time of this SkaffoldSupportedCondition.
        :rtype: str
        """
        return self._maintenance_mode_time

    @maintenance_mode_time.setter
    def maintenance_mode_time(self, maintenance_mode_time):
        """Sets the maintenance_mode_time of this SkaffoldSupportedCondition.

        The time at which this release's version of Skaffold will enter maintenance mode.

        :param maintenance_mode_time: The maintenance_mode_time of this SkaffoldSupportedCondition.
        :type maintenance_mode_time: str
        """

        self._maintenance_mode_time = maintenance_mode_time

    @property
    def skaffold_support_state(self):
        """Gets the skaffold_support_state of this SkaffoldSupportedCondition.

        The Skaffold support state for this release's version of Skaffold.

        :return: The skaffold_support_state of this SkaffoldSupportedCondition.
        :rtype: str
        """
        return self._skaffold_support_state

    @skaffold_support_state.setter
    def skaffold_support_state(self, skaffold_support_state):
        """Sets the skaffold_support_state of this SkaffoldSupportedCondition.

        The Skaffold support state for this release's version of Skaffold.

        :param skaffold_support_state: The skaffold_support_state of this SkaffoldSupportedCondition.
        :type skaffold_support_state: str
        """
        allowed_values = ["SKAFFOLD_SUPPORT_STATE_UNSPECIFIED", "SKAFFOLD_SUPPORT_STATE_SUPPORTED", "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE", "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED"]  # noqa: E501
        if skaffold_support_state not in allowed_values:
            raise ValueError(
                "Invalid value for `skaffold_support_state` ({0}), must be one of {1}"
                .format(skaffold_support_state, allowed_values)
            )

        self._skaffold_support_state = skaffold_support_state

    @property
    def status(self):
        """Gets the status of this SkaffoldSupportedCondition.

        True if the version of Skaffold used by this release is supported.

        :return: The status of this SkaffoldSupportedCondition.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SkaffoldSupportedCondition.

        True if the version of Skaffold used by this release is supported.

        :param status: The status of this SkaffoldSupportedCondition.
        :type status: bool
        """

        self._status = status

    @property
    def support_expiration_time(self):
        """Gets the support_expiration_time of this SkaffoldSupportedCondition.

        The time at which this release's version of Skaffold will no longer be supported.

        :return: The support_expiration_time of this SkaffoldSupportedCondition.
        :rtype: str
        """
        return self._support_expiration_time

    @support_expiration_time.setter
    def support_expiration_time(self, support_expiration_time):
        """Sets the support_expiration_time of this SkaffoldSupportedCondition.

        The time at which this release's version of Skaffold will no longer be supported.

        :param support_expiration_time: The support_expiration_time of this SkaffoldSupportedCondition.
        :type support_expiration_time: str
        """

        self._support_expiration_time = support_expiration_time
