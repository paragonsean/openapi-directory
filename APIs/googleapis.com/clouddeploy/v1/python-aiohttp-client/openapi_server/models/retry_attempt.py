# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryAttempt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt: str=None, state: str=None, state_desc: str=None, wait: str=None):
        """RetryAttempt - a model defined in OpenAPI

        :param attempt: The attempt of this RetryAttempt.
        :param state: The state of this RetryAttempt.
        :param state_desc: The state_desc of this RetryAttempt.
        :param wait: The wait of this RetryAttempt.
        """
        self.openapi_types = {
            'attempt': str,
            'state': str,
            'state_desc': str,
            'wait': str
        }

        self.attribute_map = {
            'attempt': 'attempt',
            'state': 'state',
            'state_desc': 'stateDesc',
            'wait': 'wait'
        }

        self._attempt = attempt
        self._state = state
        self._state_desc = state_desc
        self._wait = wait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryAttempt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryAttempt of this RetryAttempt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt(self):
        """Gets the attempt of this RetryAttempt.

        Output only. The index of this retry attempt.

        :return: The attempt of this RetryAttempt.
        :rtype: str
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this RetryAttempt.

        Output only. The index of this retry attempt.

        :param attempt: The attempt of this RetryAttempt.
        :type attempt: str
        """

        self._attempt = attempt

    @property
    def state(self):
        """Gets the state of this RetryAttempt.

        Output only. Valid state of this retry action.

        :return: The state of this RetryAttempt.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RetryAttempt.

        Output only. Valid state of this retry action.

        :param state: The state of this RetryAttempt.
        :type state: str
        """
        allowed_values = ["REPAIR_STATE_UNSPECIFIED", "REPAIR_STATE_SUCCEEDED", "REPAIR_STATE_CANCELLED", "REPAIR_STATE_FAILED", "REPAIR_STATE_IN_PROGRESS", "REPAIR_STATE_PENDING", "REPAIR_STATE_SKIPPED", "REPAIR_STATE_ABORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_desc(self):
        """Gets the state_desc of this RetryAttempt.

        Output only. Description of the state of the Retry.

        :return: The state_desc of this RetryAttempt.
        :rtype: str
        """
        return self._state_desc

    @state_desc.setter
    def state_desc(self, state_desc):
        """Sets the state_desc of this RetryAttempt.

        Output only. Description of the state of the Retry.

        :param state_desc: The state_desc of this RetryAttempt.
        :type state_desc: str
        """

        self._state_desc = state_desc

    @property
    def wait(self):
        """Gets the wait of this RetryAttempt.

        Output only. How long the operation will be paused.

        :return: The wait of this RetryAttempt.
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this RetryAttempt.

        Output only. How long the operation will be paused.

        :param wait: The wait of this RetryAttempt.
        :type wait: str
        """

        self._wait = wait
