# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayServiceMesh(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment: str=None, http_route: str=None, route_update_wait_time: str=None, service: str=None, stable_cutback_duration: str=None):
        """GatewayServiceMesh - a model defined in OpenAPI

        :param deployment: The deployment of this GatewayServiceMesh.
        :param http_route: The http_route of this GatewayServiceMesh.
        :param route_update_wait_time: The route_update_wait_time of this GatewayServiceMesh.
        :param service: The service of this GatewayServiceMesh.
        :param stable_cutback_duration: The stable_cutback_duration of this GatewayServiceMesh.
        """
        self.openapi_types = {
            'deployment': str,
            'http_route': str,
            'route_update_wait_time': str,
            'service': str,
            'stable_cutback_duration': str
        }

        self.attribute_map = {
            'deployment': 'deployment',
            'http_route': 'httpRoute',
            'route_update_wait_time': 'routeUpdateWaitTime',
            'service': 'service',
            'stable_cutback_duration': 'stableCutbackDuration'
        }

        self._deployment = deployment
        self._http_route = http_route
        self._route_update_wait_time = route_update_wait_time
        self._service = service
        self._stable_cutback_duration = stable_cutback_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayServiceMesh':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayServiceMesh of this GatewayServiceMesh.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment(self):
        """Gets the deployment of this GatewayServiceMesh.

        Required. Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.

        :return: The deployment of this GatewayServiceMesh.
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this GatewayServiceMesh.

        Required. Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.

        :param deployment: The deployment of this GatewayServiceMesh.
        :type deployment: str
        """

        self._deployment = deployment

    @property
    def http_route(self):
        """Gets the http_route of this GatewayServiceMesh.

        Required. Name of the Gateway API HTTPRoute.

        :return: The http_route of this GatewayServiceMesh.
        :rtype: str
        """
        return self._http_route

    @http_route.setter
    def http_route(self, http_route):
        """Sets the http_route of this GatewayServiceMesh.

        Required. Name of the Gateway API HTTPRoute.

        :param http_route: The http_route of this GatewayServiceMesh.
        :type http_route: str
        """

        self._http_route = http_route

    @property
    def route_update_wait_time(self):
        """Gets the route_update_wait_time of this GatewayServiceMesh.

        Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.

        :return: The route_update_wait_time of this GatewayServiceMesh.
        :rtype: str
        """
        return self._route_update_wait_time

    @route_update_wait_time.setter
    def route_update_wait_time(self, route_update_wait_time):
        """Sets the route_update_wait_time of this GatewayServiceMesh.

        Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.

        :param route_update_wait_time: The route_update_wait_time of this GatewayServiceMesh.
        :type route_update_wait_time: str
        """

        self._route_update_wait_time = route_update_wait_time

    @property
    def service(self):
        """Gets the service of this GatewayServiceMesh.

        Required. Name of the Kubernetes Service.

        :return: The service of this GatewayServiceMesh.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GatewayServiceMesh.

        Required. Name of the Kubernetes Service.

        :param service: The service of this GatewayServiceMesh.
        :type service: str
        """

        self._service = service

    @property
    def stable_cutback_duration(self):
        """Gets the stable_cutback_duration of this GatewayServiceMesh.

        Optional. The amount of time to migrate traffic back from the canary Service to the original Service during the stable phase deployment. If specified, must be between 15s and 3600s. If unspecified, there is no cutback time.

        :return: The stable_cutback_duration of this GatewayServiceMesh.
        :rtype: str
        """
        return self._stable_cutback_duration

    @stable_cutback_duration.setter
    def stable_cutback_duration(self, stable_cutback_duration):
        """Sets the stable_cutback_duration of this GatewayServiceMesh.

        Optional. The amount of time to migrate traffic back from the canary Service to the original Service during the stable phase deployment. If specified, must be between 15s and 3600s. If unspecified, there is no cutback time.

        :param stable_cutback_duration: The stable_cutback_duration of this GatewayServiceMesh.
        :type stable_cutback_duration: str
        """

        self._stable_cutback_duration = stable_cutback_duration
