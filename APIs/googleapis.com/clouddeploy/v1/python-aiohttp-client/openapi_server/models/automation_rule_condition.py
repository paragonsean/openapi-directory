# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.targets_present_condition import TargetsPresentCondition
from openapi_server import util


class AutomationRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targets_present_condition: TargetsPresentCondition=None):
        """AutomationRuleCondition - a model defined in OpenAPI

        :param targets_present_condition: The targets_present_condition of this AutomationRuleCondition.
        """
        self.openapi_types = {
            'targets_present_condition': TargetsPresentCondition
        }

        self.attribute_map = {
            'targets_present_condition': 'targetsPresentCondition'
        }

        self._targets_present_condition = targets_present_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationRuleCondition of this AutomationRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targets_present_condition(self):
        """Gets the targets_present_condition of this AutomationRuleCondition.


        :return: The targets_present_condition of this AutomationRuleCondition.
        :rtype: TargetsPresentCondition
        """
        return self._targets_present_condition

    @targets_present_condition.setter
    def targets_present_condition(self, targets_present_condition):
        """Sets the targets_present_condition of this AutomationRuleCondition.


        :param targets_present_condition: The targets_present_condition of this AutomationRuleCondition.
        :type targets_present_condition: TargetsPresentCondition
        """

        self._targets_present_condition = targets_present_condition
