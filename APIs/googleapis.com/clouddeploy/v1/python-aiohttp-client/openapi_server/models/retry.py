# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Retry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempts: str=None, backoff_mode: str=None, wait: str=None):
        """Retry - a model defined in OpenAPI

        :param attempts: The attempts of this Retry.
        :param backoff_mode: The backoff_mode of this Retry.
        :param wait: The wait of this Retry.
        """
        self.openapi_types = {
            'attempts': str,
            'backoff_mode': str,
            'wait': str
        }

        self.attribute_map = {
            'attempts': 'attempts',
            'backoff_mode': 'backoffMode',
            'wait': 'wait'
        }

        self._attempts = attempts
        self._backoff_mode = backoff_mode
        self._wait = wait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Retry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Retry of this Retry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempts(self):
        """Gets the attempts of this Retry.

        Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.

        :return: The attempts of this Retry.
        :rtype: str
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this Retry.

        Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.

        :param attempts: The attempts of this Retry.
        :type attempts: str
        """

        self._attempts = attempts

    @property
    def backoff_mode(self):
        """Gets the backoff_mode of this Retry.

        Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.

        :return: The backoff_mode of this Retry.
        :rtype: str
        """
        return self._backoff_mode

    @backoff_mode.setter
    def backoff_mode(self, backoff_mode):
        """Sets the backoff_mode of this Retry.

        Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.

        :param backoff_mode: The backoff_mode of this Retry.
        :type backoff_mode: str
        """
        allowed_values = ["BACKOFF_MODE_UNSPECIFIED", "BACKOFF_MODE_LINEAR", "BACKOFF_MODE_EXPONENTIAL"]  # noqa: E501
        if backoff_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `backoff_mode` ({0}), must be one of {1}"
                .format(backoff_mode, allowed_values)
            )

        self._backoff_mode = backoff_mode

    @property
    def wait(self):
        """Gets the wait of this Retry.

        Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.

        :return: The wait of this Retry.
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this Retry.

        Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.

        :param wait: The wait of this Retry.
        :type wait: str
        """

        self._wait = wait
