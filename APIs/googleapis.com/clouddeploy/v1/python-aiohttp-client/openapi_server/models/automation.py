# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_resource_selector import AutomationResourceSelector
from openapi_server.models.automation_rule import AutomationRule
from openapi_server import util


class Automation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, rules: List[AutomationRule]=None, selector: AutomationResourceSelector=None, service_account: str=None, suspended: bool=None, uid: str=None, update_time: str=None):
        """Automation - a model defined in OpenAPI

        :param annotations: The annotations of this Automation.
        :param create_time: The create_time of this Automation.
        :param description: The description of this Automation.
        :param etag: The etag of this Automation.
        :param labels: The labels of this Automation.
        :param name: The name of this Automation.
        :param rules: The rules of this Automation.
        :param selector: The selector of this Automation.
        :param service_account: The service_account of this Automation.
        :param suspended: The suspended of this Automation.
        :param uid: The uid of this Automation.
        :param update_time: The update_time of this Automation.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'rules': List[AutomationRule],
            'selector': AutomationResourceSelector,
            'service_account': str,
            'suspended': bool,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'rules': 'rules',
            'selector': 'selector',
            'service_account': 'serviceAccount',
            'suspended': 'suspended',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._rules = rules
        self._selector = selector
        self._service_account = service_account
        self._suspended = suspended
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Automation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Automation of this Automation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Automation.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.

        :return: The annotations of this Automation.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Automation.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.

        :param annotations: The annotations of this Automation.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this Automation.

        Output only. Time at which the automation was created.

        :return: The create_time of this Automation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Automation.

        Output only. Time at which the automation was created.

        :param create_time: The create_time of this Automation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Automation.

        Optional. Description of the `Automation`. Max length is 255 characters.

        :return: The description of this Automation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Automation.

        Optional. Description of the `Automation`. Max length is 255 characters.

        :param description: The description of this Automation.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Automation.

        Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Automation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Automation.

        Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Automation.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Automation.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.

        :return: The labels of this Automation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Automation.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.

        :param labels: The labels of this Automation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Automation.

        Output only. Name of the `Automation`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.

        :return: The name of this Automation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Automation.

        Output only. Name of the `Automation`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.

        :param name: The name of this Automation.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this Automation.

        Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.

        :return: The rules of this Automation.
        :rtype: List[AutomationRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Automation.

        Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.

        :param rules: The rules of this Automation.
        :type rules: List[AutomationRule]
        """

        self._rules = rules

    @property
    def selector(self):
        """Gets the selector of this Automation.


        :return: The selector of this Automation.
        :rtype: AutomationResourceSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this Automation.


        :param selector: The selector of this Automation.
        :type selector: AutomationResourceSelector
        """

        self._selector = selector

    @property
    def service_account(self):
        """Gets the service_account of this Automation.

        Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.

        :return: The service_account of this Automation.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Automation.

        Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.

        :param service_account: The service_account of this Automation.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def suspended(self):
        """Gets the suspended of this Automation.

        Optional. When Suspended, automation is deactivated from execution.

        :return: The suspended of this Automation.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this Automation.

        Optional. When Suspended, automation is deactivated from execution.

        :param suspended: The suspended of this Automation.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def uid(self):
        """Gets the uid of this Automation.

        Output only. Unique identifier of the `Automation`.

        :return: The uid of this Automation.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Automation.

        Output only. Unique identifier of the `Automation`.

        :param uid: The uid of this Automation.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Automation.

        Output only. Time at which the automation was updated.

        :return: The update_time of this Automation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Automation.

        Output only. Time at which the automation was updated.

        :param update_time: The update_time of this Automation.
        :type update_time: str
        """

        self._update_time = update_time
