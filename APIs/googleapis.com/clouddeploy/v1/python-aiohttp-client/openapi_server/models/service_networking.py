# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceNetworking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment: str=None, disable_pod_overprovisioning: bool=None, service: str=None):
        """ServiceNetworking - a model defined in OpenAPI

        :param deployment: The deployment of this ServiceNetworking.
        :param disable_pod_overprovisioning: The disable_pod_overprovisioning of this ServiceNetworking.
        :param service: The service of this ServiceNetworking.
        """
        self.openapi_types = {
            'deployment': str,
            'disable_pod_overprovisioning': bool,
            'service': str
        }

        self.attribute_map = {
            'deployment': 'deployment',
            'disable_pod_overprovisioning': 'disablePodOverprovisioning',
            'service': 'service'
        }

        self._deployment = deployment
        self._disable_pod_overprovisioning = disable_pod_overprovisioning
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceNetworking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceNetworking of this ServiceNetworking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment(self):
        """Gets the deployment of this ServiceNetworking.

        Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.

        :return: The deployment of this ServiceNetworking.
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this ServiceNetworking.

        Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.

        :param deployment: The deployment of this ServiceNetworking.
        :type deployment: str
        """

        self._deployment = deployment

    @property
    def disable_pod_overprovisioning(self):
        """Gets the disable_pod_overprovisioning of this ServiceNetworking.

        Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.

        :return: The disable_pod_overprovisioning of this ServiceNetworking.
        :rtype: bool
        """
        return self._disable_pod_overprovisioning

    @disable_pod_overprovisioning.setter
    def disable_pod_overprovisioning(self, disable_pod_overprovisioning):
        """Sets the disable_pod_overprovisioning of this ServiceNetworking.

        Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.

        :param disable_pod_overprovisioning: The disable_pod_overprovisioning of this ServiceNetworking.
        :type disable_pod_overprovisioning: bool
        """

        self._disable_pod_overprovisioning = disable_pod_overprovisioning

    @property
    def service(self):
        """Gets the service of this ServiceNetworking.

        Required. Name of the Kubernetes Service.

        :return: The service of this ServiceNetworking.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServiceNetworking.

        Required. Name of the Kubernetes Service.

        :param service: The service of this ServiceNetworking.
        :type service: str
        """

        self._service = service
