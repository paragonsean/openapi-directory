# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repair_phase import RepairPhase
from openapi_server import util


class RepairRolloutOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_repair_mode_index: str=None, job_id: str=None, phase_id: str=None, repair_phases: List[RepairPhase]=None, rollout: str=None):
        """RepairRolloutOperation - a model defined in OpenAPI

        :param current_repair_mode_index: The current_repair_mode_index of this RepairRolloutOperation.
        :param job_id: The job_id of this RepairRolloutOperation.
        :param phase_id: The phase_id of this RepairRolloutOperation.
        :param repair_phases: The repair_phases of this RepairRolloutOperation.
        :param rollout: The rollout of this RepairRolloutOperation.
        """
        self.openapi_types = {
            'current_repair_mode_index': str,
            'job_id': str,
            'phase_id': str,
            'repair_phases': List[RepairPhase],
            'rollout': str
        }

        self.attribute_map = {
            'current_repair_mode_index': 'currentRepairModeIndex',
            'job_id': 'jobId',
            'phase_id': 'phaseId',
            'repair_phases': 'repairPhases',
            'rollout': 'rollout'
        }

        self._current_repair_mode_index = current_repair_mode_index
        self._job_id = job_id
        self._phase_id = phase_id
        self._repair_phases = repair_phases
        self._rollout = rollout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepairRolloutOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepairRolloutOperation of this RepairRolloutOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_repair_mode_index(self):
        """Gets the current_repair_mode_index of this RepairRolloutOperation.

        Output only. The index of the current repair action in the repair sequence.

        :return: The current_repair_mode_index of this RepairRolloutOperation.
        :rtype: str
        """
        return self._current_repair_mode_index

    @current_repair_mode_index.setter
    def current_repair_mode_index(self, current_repair_mode_index):
        """Sets the current_repair_mode_index of this RepairRolloutOperation.

        Output only. The index of the current repair action in the repair sequence.

        :param current_repair_mode_index: The current_repair_mode_index of this RepairRolloutOperation.
        :type current_repair_mode_index: str
        """

        self._current_repair_mode_index = current_repair_mode_index

    @property
    def job_id(self):
        """Gets the job_id of this RepairRolloutOperation.

        Output only. The job ID for the Job to repair.

        :return: The job_id of this RepairRolloutOperation.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this RepairRolloutOperation.

        Output only. The job ID for the Job to repair.

        :param job_id: The job_id of this RepairRolloutOperation.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def phase_id(self):
        """Gets the phase_id of this RepairRolloutOperation.

        Output only. The phase ID of the phase that includes the job being repaired.

        :return: The phase_id of this RepairRolloutOperation.
        :rtype: str
        """
        return self._phase_id

    @phase_id.setter
    def phase_id(self, phase_id):
        """Sets the phase_id of this RepairRolloutOperation.

        Output only. The phase ID of the phase that includes the job being repaired.

        :param phase_id: The phase_id of this RepairRolloutOperation.
        :type phase_id: str
        """

        self._phase_id = phase_id

    @property
    def repair_phases(self):
        """Gets the repair_phases of this RepairRolloutOperation.

        Output only. Records of the repair attempts. Each repair phase may have multiple retry attempts or single rollback attempt.

        :return: The repair_phases of this RepairRolloutOperation.
        :rtype: List[RepairPhase]
        """
        return self._repair_phases

    @repair_phases.setter
    def repair_phases(self, repair_phases):
        """Sets the repair_phases of this RepairRolloutOperation.

        Output only. Records of the repair attempts. Each repair phase may have multiple retry attempts or single rollback attempt.

        :param repair_phases: The repair_phases of this RepairRolloutOperation.
        :type repair_phases: List[RepairPhase]
        """

        self._repair_phases = repair_phases

    @property
    def rollout(self):
        """Gets the rollout of this RepairRolloutOperation.

        Output only. The name of the rollout that initiates the `AutomationRun`.

        :return: The rollout of this RepairRolloutOperation.
        :rtype: str
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this RepairRolloutOperation.

        Output only. The name of the rollout that initiates the `AutomationRun`.

        :param rollout: The rollout of this RepairRolloutOperation.
        :type rollout: str
        """

        self._rollout = rollout
