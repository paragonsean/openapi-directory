# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.default_pool import DefaultPool
from openapi_server.models.private_pool import PrivatePool
from openapi_server import util


class ExecutionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_storage: str=None, default_pool: DefaultPool=None, execution_timeout: str=None, private_pool: PrivatePool=None, service_account: str=None, usages: List[str]=None, worker_pool: str=None):
        """ExecutionConfig - a model defined in OpenAPI

        :param artifact_storage: The artifact_storage of this ExecutionConfig.
        :param default_pool: The default_pool of this ExecutionConfig.
        :param execution_timeout: The execution_timeout of this ExecutionConfig.
        :param private_pool: The private_pool of this ExecutionConfig.
        :param service_account: The service_account of this ExecutionConfig.
        :param usages: The usages of this ExecutionConfig.
        :param worker_pool: The worker_pool of this ExecutionConfig.
        """
        self.openapi_types = {
            'artifact_storage': str,
            'default_pool': DefaultPool,
            'execution_timeout': str,
            'private_pool': PrivatePool,
            'service_account': str,
            'usages': List[str],
            'worker_pool': str
        }

        self.attribute_map = {
            'artifact_storage': 'artifactStorage',
            'default_pool': 'defaultPool',
            'execution_timeout': 'executionTimeout',
            'private_pool': 'privatePool',
            'service_account': 'serviceAccount',
            'usages': 'usages',
            'worker_pool': 'workerPool'
        }

        self._artifact_storage = artifact_storage
        self._default_pool = default_pool
        self._execution_timeout = execution_timeout
        self._private_pool = private_pool
        self._service_account = service_account
        self._usages = usages
        self._worker_pool = worker_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionConfig of this ExecutionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_storage(self):
        """Gets the artifact_storage of this ExecutionConfig.

        Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket (\"gs://my-bucket\") or a path within a bucket (\"gs://my-bucket/my-dir\"). If unspecified, a default bucket located in the same region will be used.

        :return: The artifact_storage of this ExecutionConfig.
        :rtype: str
        """
        return self._artifact_storage

    @artifact_storage.setter
    def artifact_storage(self, artifact_storage):
        """Sets the artifact_storage of this ExecutionConfig.

        Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket (\"gs://my-bucket\") or a path within a bucket (\"gs://my-bucket/my-dir\"). If unspecified, a default bucket located in the same region will be used.

        :param artifact_storage: The artifact_storage of this ExecutionConfig.
        :type artifact_storage: str
        """

        self._artifact_storage = artifact_storage

    @property
    def default_pool(self):
        """Gets the default_pool of this ExecutionConfig.


        :return: The default_pool of this ExecutionConfig.
        :rtype: DefaultPool
        """
        return self._default_pool

    @default_pool.setter
    def default_pool(self, default_pool):
        """Sets the default_pool of this ExecutionConfig.


        :param default_pool: The default_pool of this ExecutionConfig.
        :type default_pool: DefaultPool
        """

        self._default_pool = default_pool

    @property
    def execution_timeout(self):
        """Gets the execution_timeout of this ExecutionConfig.

        Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.

        :return: The execution_timeout of this ExecutionConfig.
        :rtype: str
        """
        return self._execution_timeout

    @execution_timeout.setter
    def execution_timeout(self, execution_timeout):
        """Sets the execution_timeout of this ExecutionConfig.

        Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.

        :param execution_timeout: The execution_timeout of this ExecutionConfig.
        :type execution_timeout: str
        """

        self._execution_timeout = execution_timeout

    @property
    def private_pool(self):
        """Gets the private_pool of this ExecutionConfig.


        :return: The private_pool of this ExecutionConfig.
        :rtype: PrivatePool
        """
        return self._private_pool

    @private_pool.setter
    def private_pool(self, private_pool):
        """Sets the private_pool of this ExecutionConfig.


        :param private_pool: The private_pool of this ExecutionConfig.
        :type private_pool: PrivatePool
        """

        self._private_pool = private_pool

    @property
    def service_account(self):
        """Gets the service_account of this ExecutionConfig.

        Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.

        :return: The service_account of this ExecutionConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this ExecutionConfig.

        Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.

        :param service_account: The service_account of this ExecutionConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def usages(self):
        """Gets the usages of this ExecutionConfig.

        Required. Usages when this configuration should be applied.

        :return: The usages of this ExecutionConfig.
        :rtype: List[str]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this ExecutionConfig.

        Required. Usages when this configuration should be applied.

        :param usages: The usages of this ExecutionConfig.
        :type usages: List[str]
        """
        allowed_values = ["EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED", "RENDER", "DEPLOY", "VERIFY", "PREDEPLOY", "POSTDEPLOY"]  # noqa: E501
        if not set(usages).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `usages` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(usages) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._usages = usages

    @property
    def worker_pool(self):
        """Gets the worker_pool of this ExecutionConfig.

        Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.

        :return: The worker_pool of this ExecutionConfig.
        :rtype: str
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this ExecutionConfig.

        Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.

        :param worker_pool: The worker_pool of this ExecutionConfig.
        :type worker_pool: str
        """

        self._worker_pool = worker_pool
