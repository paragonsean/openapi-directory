# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation: str=None, message: str=None, pipeline_uid: str=None, type: str=None):
        """AutomationEvent - a model defined in OpenAPI

        :param automation: The automation of this AutomationEvent.
        :param message: The message of this AutomationEvent.
        :param pipeline_uid: The pipeline_uid of this AutomationEvent.
        :param type: The type of this AutomationEvent.
        """
        self.openapi_types = {
            'automation': str,
            'message': str,
            'pipeline_uid': str,
            'type': str
        }

        self.attribute_map = {
            'automation': 'automation',
            'message': 'message',
            'pipeline_uid': 'pipelineUid',
            'type': 'type'
        }

        self._automation = automation
        self._message = message
        self._pipeline_uid = pipeline_uid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationEvent of this AutomationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation(self):
        """Gets the automation of this AutomationEvent.

        The name of the `AutomationRun`.

        :return: The automation of this AutomationEvent.
        :rtype: str
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this AutomationEvent.

        The name of the `AutomationRun`.

        :param automation: The automation of this AutomationEvent.
        :type automation: str
        """

        self._automation = automation

    @property
    def message(self):
        """Gets the message of this AutomationEvent.

        Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.

        :return: The message of this AutomationEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AutomationEvent.

        Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.

        :param message: The message of this AutomationEvent.
        :type message: str
        """

        self._message = message

    @property
    def pipeline_uid(self):
        """Gets the pipeline_uid of this AutomationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :return: The pipeline_uid of this AutomationEvent.
        :rtype: str
        """
        return self._pipeline_uid

    @pipeline_uid.setter
    def pipeline_uid(self, pipeline_uid):
        """Sets the pipeline_uid of this AutomationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :param pipeline_uid: The pipeline_uid of this AutomationEvent.
        :type pipeline_uid: str
        """

        self._pipeline_uid = pipeline_uid

    @property
    def type(self):
        """Gets the type of this AutomationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :return: The type of this AutomationEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :param type: The type of this AutomationEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
