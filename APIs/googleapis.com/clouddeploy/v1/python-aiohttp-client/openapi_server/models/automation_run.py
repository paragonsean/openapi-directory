# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advance_rollout_operation import AdvanceRolloutOperation
from openapi_server.models.automation import Automation
from openapi_server.models.promote_release_operation import PromoteReleaseOperation
from openapi_server.models.repair_rollout_operation import RepairRolloutOperation
from openapi_server import util


class AutomationRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_rollout_operation: AdvanceRolloutOperation=None, automation_id: str=None, automation_snapshot: Automation=None, create_time: str=None, etag: str=None, expire_time: str=None, name: str=None, promote_release_operation: PromoteReleaseOperation=None, repair_rollout_operation: RepairRolloutOperation=None, rule_id: str=None, service_account: str=None, state: str=None, state_description: str=None, target_id: str=None, update_time: str=None, wait_until_time: str=None):
        """AutomationRun - a model defined in OpenAPI

        :param advance_rollout_operation: The advance_rollout_operation of this AutomationRun.
        :param automation_id: The automation_id of this AutomationRun.
        :param automation_snapshot: The automation_snapshot of this AutomationRun.
        :param create_time: The create_time of this AutomationRun.
        :param etag: The etag of this AutomationRun.
        :param expire_time: The expire_time of this AutomationRun.
        :param name: The name of this AutomationRun.
        :param promote_release_operation: The promote_release_operation of this AutomationRun.
        :param repair_rollout_operation: The repair_rollout_operation of this AutomationRun.
        :param rule_id: The rule_id of this AutomationRun.
        :param service_account: The service_account of this AutomationRun.
        :param state: The state of this AutomationRun.
        :param state_description: The state_description of this AutomationRun.
        :param target_id: The target_id of this AutomationRun.
        :param update_time: The update_time of this AutomationRun.
        :param wait_until_time: The wait_until_time of this AutomationRun.
        """
        self.openapi_types = {
            'advance_rollout_operation': AdvanceRolloutOperation,
            'automation_id': str,
            'automation_snapshot': Automation,
            'create_time': str,
            'etag': str,
            'expire_time': str,
            'name': str,
            'promote_release_operation': PromoteReleaseOperation,
            'repair_rollout_operation': RepairRolloutOperation,
            'rule_id': str,
            'service_account': str,
            'state': str,
            'state_description': str,
            'target_id': str,
            'update_time': str,
            'wait_until_time': str
        }

        self.attribute_map = {
            'advance_rollout_operation': 'advanceRolloutOperation',
            'automation_id': 'automationId',
            'automation_snapshot': 'automationSnapshot',
            'create_time': 'createTime',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'name': 'name',
            'promote_release_operation': 'promoteReleaseOperation',
            'repair_rollout_operation': 'repairRolloutOperation',
            'rule_id': 'ruleId',
            'service_account': 'serviceAccount',
            'state': 'state',
            'state_description': 'stateDescription',
            'target_id': 'targetId',
            'update_time': 'updateTime',
            'wait_until_time': 'waitUntilTime'
        }

        self._advance_rollout_operation = advance_rollout_operation
        self._automation_id = automation_id
        self._automation_snapshot = automation_snapshot
        self._create_time = create_time
        self._etag = etag
        self._expire_time = expire_time
        self._name = name
        self._promote_release_operation = promote_release_operation
        self._repair_rollout_operation = repair_rollout_operation
        self._rule_id = rule_id
        self._service_account = service_account
        self._state = state
        self._state_description = state_description
        self._target_id = target_id
        self._update_time = update_time
        self._wait_until_time = wait_until_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationRun of this AutomationRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_rollout_operation(self):
        """Gets the advance_rollout_operation of this AutomationRun.


        :return: The advance_rollout_operation of this AutomationRun.
        :rtype: AdvanceRolloutOperation
        """
        return self._advance_rollout_operation

    @advance_rollout_operation.setter
    def advance_rollout_operation(self, advance_rollout_operation):
        """Sets the advance_rollout_operation of this AutomationRun.


        :param advance_rollout_operation: The advance_rollout_operation of this AutomationRun.
        :type advance_rollout_operation: AdvanceRolloutOperation
        """

        self._advance_rollout_operation = advance_rollout_operation

    @property
    def automation_id(self):
        """Gets the automation_id of this AutomationRun.

        Output only. The ID of the automation that initiated the operation.

        :return: The automation_id of this AutomationRun.
        :rtype: str
        """
        return self._automation_id

    @automation_id.setter
    def automation_id(self, automation_id):
        """Sets the automation_id of this AutomationRun.

        Output only. The ID of the automation that initiated the operation.

        :param automation_id: The automation_id of this AutomationRun.
        :type automation_id: str
        """

        self._automation_id = automation_id

    @property
    def automation_snapshot(self):
        """Gets the automation_snapshot of this AutomationRun.


        :return: The automation_snapshot of this AutomationRun.
        :rtype: Automation
        """
        return self._automation_snapshot

    @automation_snapshot.setter
    def automation_snapshot(self, automation_snapshot):
        """Sets the automation_snapshot of this AutomationRun.


        :param automation_snapshot: The automation_snapshot of this AutomationRun.
        :type automation_snapshot: Automation
        """

        self._automation_snapshot = automation_snapshot

    @property
    def create_time(self):
        """Gets the create_time of this AutomationRun.

        Output only. Time at which the `AutomationRun` was created.

        :return: The create_time of this AutomationRun.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AutomationRun.

        Output only. Time at which the `AutomationRun` was created.

        :param create_time: The create_time of this AutomationRun.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def etag(self):
        """Gets the etag of this AutomationRun.

        Output only. The weak etag of the `AutomationRun` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this AutomationRun.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AutomationRun.

        Output only. The weak etag of the `AutomationRun` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this AutomationRun.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this AutomationRun.

        Output only. Time the `AutomationRun` expires. An `AutomationRun` expires after 14 days from its creation date.

        :return: The expire_time of this AutomationRun.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this AutomationRun.

        Output only. Time the `AutomationRun` expires. An `AutomationRun` expires after 14 days from its creation date.

        :param expire_time: The expire_time of this AutomationRun.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this AutomationRun.

        Output only. Name of the `AutomationRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.

        :return: The name of this AutomationRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationRun.

        Output only. Name of the `AutomationRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.

        :param name: The name of this AutomationRun.
        :type name: str
        """

        self._name = name

    @property
    def promote_release_operation(self):
        """Gets the promote_release_operation of this AutomationRun.


        :return: The promote_release_operation of this AutomationRun.
        :rtype: PromoteReleaseOperation
        """
        return self._promote_release_operation

    @promote_release_operation.setter
    def promote_release_operation(self, promote_release_operation):
        """Sets the promote_release_operation of this AutomationRun.


        :param promote_release_operation: The promote_release_operation of this AutomationRun.
        :type promote_release_operation: PromoteReleaseOperation
        """

        self._promote_release_operation = promote_release_operation

    @property
    def repair_rollout_operation(self):
        """Gets the repair_rollout_operation of this AutomationRun.


        :return: The repair_rollout_operation of this AutomationRun.
        :rtype: RepairRolloutOperation
        """
        return self._repair_rollout_operation

    @repair_rollout_operation.setter
    def repair_rollout_operation(self, repair_rollout_operation):
        """Sets the repair_rollout_operation of this AutomationRun.


        :param repair_rollout_operation: The repair_rollout_operation of this AutomationRun.
        :type repair_rollout_operation: RepairRolloutOperation
        """

        self._repair_rollout_operation = repair_rollout_operation

    @property
    def rule_id(self):
        """Gets the rule_id of this AutomationRun.

        Output only. The ID of the automation rule that initiated the operation.

        :return: The rule_id of this AutomationRun.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AutomationRun.

        Output only. The ID of the automation rule that initiated the operation.

        :param rule_id: The rule_id of this AutomationRun.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def service_account(self):
        """Gets the service_account of this AutomationRun.

        Output only. Email address of the user-managed IAM service account that performs the operations against Cloud Deploy resources.

        :return: The service_account of this AutomationRun.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this AutomationRun.

        Output only. Email address of the user-managed IAM service account that performs the operations against Cloud Deploy resources.

        :param service_account: The service_account of this AutomationRun.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def state(self):
        """Gets the state of this AutomationRun.

        Output only. Current state of the `AutomationRun`.

        :return: The state of this AutomationRun.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AutomationRun.

        Output only. Current state of the `AutomationRun`.

        :param state: The state of this AutomationRun.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SUCCEEDED", "CANCELLED", "FAILED", "IN_PROGRESS", "PENDING", "ABORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this AutomationRun.

        Output only. Explains the current state of the `AutomationRun`. Present only when an explanation is needed.

        :return: The state_description of this AutomationRun.
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this AutomationRun.

        Output only. Explains the current state of the `AutomationRun`. Present only when an explanation is needed.

        :param state_description: The state_description of this AutomationRun.
        :type state_description: str
        """

        self._state_description = state_description

    @property
    def target_id(self):
        """Gets the target_id of this AutomationRun.

        Output only. The ID of the target that represents the promotion stage that initiates the `AutomationRun`. The value of this field is the last segment of a target name.

        :return: The target_id of this AutomationRun.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this AutomationRun.

        Output only. The ID of the target that represents the promotion stage that initiates the `AutomationRun`. The value of this field is the last segment of a target name.

        :param target_id: The target_id of this AutomationRun.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def update_time(self):
        """Gets the update_time of this AutomationRun.

        Output only. Time at which the automationRun was updated.

        :return: The update_time of this AutomationRun.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AutomationRun.

        Output only. Time at which the automationRun was updated.

        :param update_time: The update_time of this AutomationRun.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def wait_until_time(self):
        """Gets the wait_until_time of this AutomationRun.

        Output only. Earliest time the `AutomationRun` will attempt to resume. Wait-time is configured by `wait` in automation rule.

        :return: The wait_until_time of this AutomationRun.
        :rtype: str
        """
        return self._wait_until_time

    @wait_until_time.setter
    def wait_until_time(self, wait_until_time):
        """Sets the wait_until_time of this AutomationRun.

        Output only. Earliest time the `AutomationRun` will attempt to resume. Wait-time is configured by `wait` in automation rule.

        :param wait_until_time: The wait_until_time of this AutomationRun.
        :type wait_until_time: str
        """

        self._wait_until_time = wait_until_time
