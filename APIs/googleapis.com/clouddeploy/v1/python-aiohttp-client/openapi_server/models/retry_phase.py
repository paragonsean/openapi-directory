# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retry_attempt import RetryAttempt
from openapi_server import util


class RetryPhase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempts: List[RetryAttempt]=None, backoff_mode: str=None, job_id: str=None, phase_id: str=None, total_attempts: str=None):
        """RetryPhase - a model defined in OpenAPI

        :param attempts: The attempts of this RetryPhase.
        :param backoff_mode: The backoff_mode of this RetryPhase.
        :param job_id: The job_id of this RetryPhase.
        :param phase_id: The phase_id of this RetryPhase.
        :param total_attempts: The total_attempts of this RetryPhase.
        """
        self.openapi_types = {
            'attempts': List[RetryAttempt],
            'backoff_mode': str,
            'job_id': str,
            'phase_id': str,
            'total_attempts': str
        }

        self.attribute_map = {
            'attempts': 'attempts',
            'backoff_mode': 'backoffMode',
            'job_id': 'jobId',
            'phase_id': 'phaseId',
            'total_attempts': 'totalAttempts'
        }

        self._attempts = attempts
        self._backoff_mode = backoff_mode
        self._job_id = job_id
        self._phase_id = phase_id
        self._total_attempts = total_attempts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryPhase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryPhase of this RetryPhase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempts(self):
        """Gets the attempts of this RetryPhase.

        Output only. Detail of a retry action.

        :return: The attempts of this RetryPhase.
        :rtype: List[RetryAttempt]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this RetryPhase.

        Output only. Detail of a retry action.

        :param attempts: The attempts of this RetryPhase.
        :type attempts: List[RetryAttempt]
        """

        self._attempts = attempts

    @property
    def backoff_mode(self):
        """Gets the backoff_mode of this RetryPhase.

        Output only. The pattern of how the wait time of the retry attempt is calculated.

        :return: The backoff_mode of this RetryPhase.
        :rtype: str
        """
        return self._backoff_mode

    @backoff_mode.setter
    def backoff_mode(self, backoff_mode):
        """Sets the backoff_mode of this RetryPhase.

        Output only. The pattern of how the wait time of the retry attempt is calculated.

        :param backoff_mode: The backoff_mode of this RetryPhase.
        :type backoff_mode: str
        """
        allowed_values = ["BACKOFF_MODE_UNSPECIFIED", "BACKOFF_MODE_LINEAR", "BACKOFF_MODE_EXPONENTIAL"]  # noqa: E501
        if backoff_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `backoff_mode` ({0}), must be one of {1}"
                .format(backoff_mode, allowed_values)
            )

        self._backoff_mode = backoff_mode

    @property
    def job_id(self):
        """Gets the job_id of this RetryPhase.

        Output only. The job ID for the Job to retry.

        :return: The job_id of this RetryPhase.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this RetryPhase.

        Output only. The job ID for the Job to retry.

        :param job_id: The job_id of this RetryPhase.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def phase_id(self):
        """Gets the phase_id of this RetryPhase.

        Output only. The phase ID of the phase that includes the job being retried.

        :return: The phase_id of this RetryPhase.
        :rtype: str
        """
        return self._phase_id

    @phase_id.setter
    def phase_id(self, phase_id):
        """Sets the phase_id of this RetryPhase.

        Output only. The phase ID of the phase that includes the job being retried.

        :param phase_id: The phase_id of this RetryPhase.
        :type phase_id: str
        """

        self._phase_id = phase_id

    @property
    def total_attempts(self):
        """Gets the total_attempts of this RetryPhase.

        Output only. The number of attempts that have been made.

        :return: The total_attempts of this RetryPhase.
        :rtype: str
        """
        return self._total_attempts

    @total_attempts.setter
    def total_attempts(self, total_attempts):
        """Sets the total_attempts of this RetryPhase.

        Output only. The number of attempts that have been made.

        :param total_attempts: The total_attempts of this RetryPhase.
        :type total_attempts: str
        """

        self._total_attempts = total_attempts
