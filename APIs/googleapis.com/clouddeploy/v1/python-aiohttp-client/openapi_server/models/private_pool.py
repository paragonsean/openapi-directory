# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivatePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_storage: str=None, service_account: str=None, worker_pool: str=None):
        """PrivatePool - a model defined in OpenAPI

        :param artifact_storage: The artifact_storage of this PrivatePool.
        :param service_account: The service_account of this PrivatePool.
        :param worker_pool: The worker_pool of this PrivatePool.
        """
        self.openapi_types = {
            'artifact_storage': str,
            'service_account': str,
            'worker_pool': str
        }

        self.attribute_map = {
            'artifact_storage': 'artifactStorage',
            'service_account': 'serviceAccount',
            'worker_pool': 'workerPool'
        }

        self._artifact_storage = artifact_storage
        self._service_account = service_account
        self._worker_pool = worker_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivatePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivatePool of this PrivatePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_storage(self):
        """Gets the artifact_storage of this PrivatePool.

        Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket (\"gs://my-bucket\") or a path within a bucket (\"gs://my-bucket/my-dir\"). If unspecified, a default bucket located in the same region will be used.

        :return: The artifact_storage of this PrivatePool.
        :rtype: str
        """
        return self._artifact_storage

    @artifact_storage.setter
    def artifact_storage(self, artifact_storage):
        """Sets the artifact_storage of this PrivatePool.

        Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket (\"gs://my-bucket\") or a path within a bucket (\"gs://my-bucket/my-dir\"). If unspecified, a default bucket located in the same region will be used.

        :param artifact_storage: The artifact_storage of this PrivatePool.
        :type artifact_storage: str
        """

        self._artifact_storage = artifact_storage

    @property
    def service_account(self):
        """Gets the service_account of this PrivatePool.

        Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.

        :return: The service_account of this PrivatePool.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this PrivatePool.

        Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.

        :param service_account: The service_account of this PrivatePool.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def worker_pool(self):
        """Gets the worker_pool of this PrivatePool.

        Required. Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.

        :return: The worker_pool of this PrivatePool.
        :rtype: str
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this PrivatePool.

        Required. Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.

        :param worker_pool: The worker_pool of this PrivatePool.
        :type worker_pool: str
        """

        self._worker_pool = worker_pool
