# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryPipelineNotificationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_pipeline: str=None, message: str=None, pipeline_uid: str=None, type: str=None):
        """DeliveryPipelineNotificationEvent - a model defined in OpenAPI

        :param delivery_pipeline: The delivery_pipeline of this DeliveryPipelineNotificationEvent.
        :param message: The message of this DeliveryPipelineNotificationEvent.
        :param pipeline_uid: The pipeline_uid of this DeliveryPipelineNotificationEvent.
        :param type: The type of this DeliveryPipelineNotificationEvent.
        """
        self.openapi_types = {
            'delivery_pipeline': str,
            'message': str,
            'pipeline_uid': str,
            'type': str
        }

        self.attribute_map = {
            'delivery_pipeline': 'deliveryPipeline',
            'message': 'message',
            'pipeline_uid': 'pipelineUid',
            'type': 'type'
        }

        self._delivery_pipeline = delivery_pipeline
        self._message = message
        self._pipeline_uid = pipeline_uid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryPipelineNotificationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryPipelineNotificationEvent of this DeliveryPipelineNotificationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_pipeline(self):
        """Gets the delivery_pipeline of this DeliveryPipelineNotificationEvent.

        The name of the `Delivery Pipeline`.

        :return: The delivery_pipeline of this DeliveryPipelineNotificationEvent.
        :rtype: str
        """
        return self._delivery_pipeline

    @delivery_pipeline.setter
    def delivery_pipeline(self, delivery_pipeline):
        """Sets the delivery_pipeline of this DeliveryPipelineNotificationEvent.

        The name of the `Delivery Pipeline`.

        :param delivery_pipeline: The delivery_pipeline of this DeliveryPipelineNotificationEvent.
        :type delivery_pipeline: str
        """

        self._delivery_pipeline = delivery_pipeline

    @property
    def message(self):
        """Gets the message of this DeliveryPipelineNotificationEvent.

        Debug message for when a notification fails to send.

        :return: The message of this DeliveryPipelineNotificationEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeliveryPipelineNotificationEvent.

        Debug message for when a notification fails to send.

        :param message: The message of this DeliveryPipelineNotificationEvent.
        :type message: str
        """

        self._message = message

    @property
    def pipeline_uid(self):
        """Gets the pipeline_uid of this DeliveryPipelineNotificationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :return: The pipeline_uid of this DeliveryPipelineNotificationEvent.
        :rtype: str
        """
        return self._pipeline_uid

    @pipeline_uid.setter
    def pipeline_uid(self, pipeline_uid):
        """Sets the pipeline_uid of this DeliveryPipelineNotificationEvent.

        Unique identifier of the `DeliveryPipeline`.

        :param pipeline_uid: The pipeline_uid of this DeliveryPipelineNotificationEvent.
        :type pipeline_uid: str
        """

        self._pipeline_uid = pipeline_uid

    @property
    def type(self):
        """Gets the type of this DeliveryPipelineNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :return: The type of this DeliveryPipelineNotificationEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeliveryPipelineNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :param type: The type of this DeliveryPipelineNotificationEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
