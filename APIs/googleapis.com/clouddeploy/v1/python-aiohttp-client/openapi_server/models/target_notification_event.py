# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetNotificationEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, target: str=None, type: str=None):
        """TargetNotificationEvent - a model defined in OpenAPI

        :param message: The message of this TargetNotificationEvent.
        :param target: The target of this TargetNotificationEvent.
        :param type: The type of this TargetNotificationEvent.
        """
        self.openapi_types = {
            'message': str,
            'target': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'target': 'target',
            'type': 'type'
        }

        self._message = message
        self._target = target
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetNotificationEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetNotificationEvent of this TargetNotificationEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TargetNotificationEvent.

        Debug message for when a notification fails to send.

        :return: The message of this TargetNotificationEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TargetNotificationEvent.

        Debug message for when a notification fails to send.

        :param message: The message of this TargetNotificationEvent.
        :type message: str
        """

        self._message = message

    @property
    def target(self):
        """Gets the target of this TargetNotificationEvent.

        The name of the `Target`.

        :return: The target of this TargetNotificationEvent.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this TargetNotificationEvent.

        The name of the `Target`.

        :param target: The target of this TargetNotificationEvent.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this TargetNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :return: The type of this TargetNotificationEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TargetNotificationEvent.

        Type of this notification, e.g. for a Pub/Sub failure.

        :param type: The type of this TargetNotificationEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
