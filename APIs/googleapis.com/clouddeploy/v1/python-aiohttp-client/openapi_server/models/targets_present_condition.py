# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetsPresentCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, missing_targets: List[str]=None, status: bool=None, update_time: str=None):
        """TargetsPresentCondition - a model defined in OpenAPI

        :param missing_targets: The missing_targets of this TargetsPresentCondition.
        :param status: The status of this TargetsPresentCondition.
        :param update_time: The update_time of this TargetsPresentCondition.
        """
        self.openapi_types = {
            'missing_targets': List[str],
            'status': bool,
            'update_time': str
        }

        self.attribute_map = {
            'missing_targets': 'missingTargets',
            'status': 'status',
            'update_time': 'updateTime'
        }

        self._missing_targets = missing_targets
        self._status = status
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetsPresentCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetsPresentCondition of this TargetsPresentCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def missing_targets(self):
        """Gets the missing_targets of this TargetsPresentCondition.

        The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.

        :return: The missing_targets of this TargetsPresentCondition.
        :rtype: List[str]
        """
        return self._missing_targets

    @missing_targets.setter
    def missing_targets(self, missing_targets):
        """Sets the missing_targets of this TargetsPresentCondition.

        The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.

        :param missing_targets: The missing_targets of this TargetsPresentCondition.
        :type missing_targets: List[str]
        """

        self._missing_targets = missing_targets

    @property
    def status(self):
        """Gets the status of this TargetsPresentCondition.

        True if there aren't any missing Targets.

        :return: The status of this TargetsPresentCondition.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TargetsPresentCondition.

        True if there aren't any missing Targets.

        :param status: The status of this TargetsPresentCondition.
        :type status: bool
        """

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this TargetsPresentCondition.

        Last time the condition was updated.

        :return: The update_time of this TargetsPresentCondition.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TargetsPresentCondition.

        Last time the condition was updated.

        :param update_time: The update_time of this TargetsPresentCondition.
        :type update_time: str
        """

        self._update_time = update_time
