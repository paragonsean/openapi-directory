# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advance_child_rollout_job_run import AdvanceChildRolloutJobRun
from openapi_server.models.create_child_rollout_job_run import CreateChildRolloutJobRun
from openapi_server.models.deploy_job_run import DeployJobRun
from openapi_server.models.postdeploy_job_run import PostdeployJobRun
from openapi_server.models.predeploy_job_run import PredeployJobRun
from openapi_server.models.verify_job_run import VerifyJobRun
from openapi_server import util


class JobRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_child_rollout_job_run: AdvanceChildRolloutJobRun=None, create_child_rollout_job_run: CreateChildRolloutJobRun=None, create_time: str=None, deploy_job_run: DeployJobRun=None, end_time: str=None, etag: str=None, job_id: str=None, name: str=None, phase_id: str=None, postdeploy_job_run: PostdeployJobRun=None, predeploy_job_run: PredeployJobRun=None, start_time: str=None, state: str=None, uid: str=None, verify_job_run: VerifyJobRun=None):
        """JobRun - a model defined in OpenAPI

        :param advance_child_rollout_job_run: The advance_child_rollout_job_run of this JobRun.
        :param create_child_rollout_job_run: The create_child_rollout_job_run of this JobRun.
        :param create_time: The create_time of this JobRun.
        :param deploy_job_run: The deploy_job_run of this JobRun.
        :param end_time: The end_time of this JobRun.
        :param etag: The etag of this JobRun.
        :param job_id: The job_id of this JobRun.
        :param name: The name of this JobRun.
        :param phase_id: The phase_id of this JobRun.
        :param postdeploy_job_run: The postdeploy_job_run of this JobRun.
        :param predeploy_job_run: The predeploy_job_run of this JobRun.
        :param start_time: The start_time of this JobRun.
        :param state: The state of this JobRun.
        :param uid: The uid of this JobRun.
        :param verify_job_run: The verify_job_run of this JobRun.
        """
        self.openapi_types = {
            'advance_child_rollout_job_run': AdvanceChildRolloutJobRun,
            'create_child_rollout_job_run': CreateChildRolloutJobRun,
            'create_time': str,
            'deploy_job_run': DeployJobRun,
            'end_time': str,
            'etag': str,
            'job_id': str,
            'name': str,
            'phase_id': str,
            'postdeploy_job_run': PostdeployJobRun,
            'predeploy_job_run': PredeployJobRun,
            'start_time': str,
            'state': str,
            'uid': str,
            'verify_job_run': VerifyJobRun
        }

        self.attribute_map = {
            'advance_child_rollout_job_run': 'advanceChildRolloutJobRun',
            'create_child_rollout_job_run': 'createChildRolloutJobRun',
            'create_time': 'createTime',
            'deploy_job_run': 'deployJobRun',
            'end_time': 'endTime',
            'etag': 'etag',
            'job_id': 'jobId',
            'name': 'name',
            'phase_id': 'phaseId',
            'postdeploy_job_run': 'postdeployJobRun',
            'predeploy_job_run': 'predeployJobRun',
            'start_time': 'startTime',
            'state': 'state',
            'uid': 'uid',
            'verify_job_run': 'verifyJobRun'
        }

        self._advance_child_rollout_job_run = advance_child_rollout_job_run
        self._create_child_rollout_job_run = create_child_rollout_job_run
        self._create_time = create_time
        self._deploy_job_run = deploy_job_run
        self._end_time = end_time
        self._etag = etag
        self._job_id = job_id
        self._name = name
        self._phase_id = phase_id
        self._postdeploy_job_run = postdeploy_job_run
        self._predeploy_job_run = predeploy_job_run
        self._start_time = start_time
        self._state = state
        self._uid = uid
        self._verify_job_run = verify_job_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRun of this JobRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_child_rollout_job_run(self):
        """Gets the advance_child_rollout_job_run of this JobRun.


        :return: The advance_child_rollout_job_run of this JobRun.
        :rtype: AdvanceChildRolloutJobRun
        """
        return self._advance_child_rollout_job_run

    @advance_child_rollout_job_run.setter
    def advance_child_rollout_job_run(self, advance_child_rollout_job_run):
        """Sets the advance_child_rollout_job_run of this JobRun.


        :param advance_child_rollout_job_run: The advance_child_rollout_job_run of this JobRun.
        :type advance_child_rollout_job_run: AdvanceChildRolloutJobRun
        """

        self._advance_child_rollout_job_run = advance_child_rollout_job_run

    @property
    def create_child_rollout_job_run(self):
        """Gets the create_child_rollout_job_run of this JobRun.


        :return: The create_child_rollout_job_run of this JobRun.
        :rtype: CreateChildRolloutJobRun
        """
        return self._create_child_rollout_job_run

    @create_child_rollout_job_run.setter
    def create_child_rollout_job_run(self, create_child_rollout_job_run):
        """Sets the create_child_rollout_job_run of this JobRun.


        :param create_child_rollout_job_run: The create_child_rollout_job_run of this JobRun.
        :type create_child_rollout_job_run: CreateChildRolloutJobRun
        """

        self._create_child_rollout_job_run = create_child_rollout_job_run

    @property
    def create_time(self):
        """Gets the create_time of this JobRun.

        Output only. Time at which the `JobRun` was created.

        :return: The create_time of this JobRun.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this JobRun.

        Output only. Time at which the `JobRun` was created.

        :param create_time: The create_time of this JobRun.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deploy_job_run(self):
        """Gets the deploy_job_run of this JobRun.


        :return: The deploy_job_run of this JobRun.
        :rtype: DeployJobRun
        """
        return self._deploy_job_run

    @deploy_job_run.setter
    def deploy_job_run(self, deploy_job_run):
        """Sets the deploy_job_run of this JobRun.


        :param deploy_job_run: The deploy_job_run of this JobRun.
        :type deploy_job_run: DeployJobRun
        """

        self._deploy_job_run = deploy_job_run

    @property
    def end_time(self):
        """Gets the end_time of this JobRun.

        Output only. Time at which the `JobRun` ended.

        :return: The end_time of this JobRun.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobRun.

        Output only. Time at which the `JobRun` ended.

        :param end_time: The end_time of this JobRun.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def etag(self):
        """Gets the etag of this JobRun.

        Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this JobRun.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this JobRun.

        Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this JobRun.
        :type etag: str
        """

        self._etag = etag

    @property
    def job_id(self):
        """Gets the job_id of this JobRun.

        Output only. ID of the `Rollout` job this `JobRun` corresponds to.

        :return: The job_id of this JobRun.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobRun.

        Output only. ID of the `Rollout` job this `JobRun` corresponds to.

        :param job_id: The job_id of this JobRun.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this JobRun.

        Optional. Name of the `JobRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}`.

        :return: The name of this JobRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobRun.

        Optional. Name of the `JobRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}`.

        :param name: The name of this JobRun.
        :type name: str
        """

        self._name = name

    @property
    def phase_id(self):
        """Gets the phase_id of this JobRun.

        Output only. ID of the `Rollout` phase this `JobRun` belongs in.

        :return: The phase_id of this JobRun.
        :rtype: str
        """
        return self._phase_id

    @phase_id.setter
    def phase_id(self, phase_id):
        """Sets the phase_id of this JobRun.

        Output only. ID of the `Rollout` phase this `JobRun` belongs in.

        :param phase_id: The phase_id of this JobRun.
        :type phase_id: str
        """

        self._phase_id = phase_id

    @property
    def postdeploy_job_run(self):
        """Gets the postdeploy_job_run of this JobRun.


        :return: The postdeploy_job_run of this JobRun.
        :rtype: PostdeployJobRun
        """
        return self._postdeploy_job_run

    @postdeploy_job_run.setter
    def postdeploy_job_run(self, postdeploy_job_run):
        """Sets the postdeploy_job_run of this JobRun.


        :param postdeploy_job_run: The postdeploy_job_run of this JobRun.
        :type postdeploy_job_run: PostdeployJobRun
        """

        self._postdeploy_job_run = postdeploy_job_run

    @property
    def predeploy_job_run(self):
        """Gets the predeploy_job_run of this JobRun.


        :return: The predeploy_job_run of this JobRun.
        :rtype: PredeployJobRun
        """
        return self._predeploy_job_run

    @predeploy_job_run.setter
    def predeploy_job_run(self, predeploy_job_run):
        """Sets the predeploy_job_run of this JobRun.


        :param predeploy_job_run: The predeploy_job_run of this JobRun.
        :type predeploy_job_run: PredeployJobRun
        """

        self._predeploy_job_run = predeploy_job_run

    @property
    def start_time(self):
        """Gets the start_time of this JobRun.

        Output only. Time at which the `JobRun` was started.

        :return: The start_time of this JobRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobRun.

        Output only. Time at which the `JobRun` was started.

        :param start_time: The start_time of this JobRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this JobRun.

        Output only. The current state of the `JobRun`.

        :return: The state of this JobRun.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobRun.

        Output only. The current state of the `JobRun`.

        :param state: The state of this JobRun.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "IN_PROGRESS", "SUCCEEDED", "FAILED", "TERMINATING", "TERMINATED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this JobRun.

        Output only. Unique identifier of the `JobRun`.

        :return: The uid of this JobRun.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this JobRun.

        Output only. Unique identifier of the `JobRun`.

        :param uid: The uid of this JobRun.
        :type uid: str
        """

        self._uid = uid

    @property
    def verify_job_run(self):
        """Gets the verify_job_run of this JobRun.


        :return: The verify_job_run of this JobRun.
        :rtype: VerifyJobRun
        """
        return self._verify_job_run

    @verify_job_run.setter
    def verify_job_run(self, verify_job_run):
        """Sets the verify_job_run of this JobRun.


        :param verify_job_run: The verify_job_run of this JobRun.
        :type verify_job_run: VerifyJobRun
        """

        self._verify_job_run = verify_job_run
