# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rollback_target_config import RollbackTargetConfig
from openapi_server import util


class RollbackTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, release_id: str=None, rollback_config: RollbackTargetConfig=None, rollout_id: str=None, rollout_to_roll_back: str=None, target_id: str=None, validate_only: bool=None):
        """RollbackTargetRequest - a model defined in OpenAPI

        :param release_id: The release_id of this RollbackTargetRequest.
        :param rollback_config: The rollback_config of this RollbackTargetRequest.
        :param rollout_id: The rollout_id of this RollbackTargetRequest.
        :param rollout_to_roll_back: The rollout_to_roll_back of this RollbackTargetRequest.
        :param target_id: The target_id of this RollbackTargetRequest.
        :param validate_only: The validate_only of this RollbackTargetRequest.
        """
        self.openapi_types = {
            'release_id': str,
            'rollback_config': RollbackTargetConfig,
            'rollout_id': str,
            'rollout_to_roll_back': str,
            'target_id': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'release_id': 'releaseId',
            'rollback_config': 'rollbackConfig',
            'rollout_id': 'rolloutId',
            'rollout_to_roll_back': 'rolloutToRollBack',
            'target_id': 'targetId',
            'validate_only': 'validateOnly'
        }

        self._release_id = release_id
        self._rollback_config = rollback_config
        self._rollout_id = rollout_id
        self._rollout_to_roll_back = rollout_to_roll_back
        self._target_id = target_id
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollbackTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollbackTargetRequest of this RollbackTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release_id(self):
        """Gets the release_id of this RollbackTargetRequest.

        Optional. ID of the `Release` to roll back to. If this isn't specified, the previous successful `Rollout` to the specified target will be used to determine the `Release`.

        :return: The release_id of this RollbackTargetRequest.
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this RollbackTargetRequest.

        Optional. ID of the `Release` to roll back to. If this isn't specified, the previous successful `Rollout` to the specified target will be used to determine the `Release`.

        :param release_id: The release_id of this RollbackTargetRequest.
        :type release_id: str
        """

        self._release_id = release_id

    @property
    def rollback_config(self):
        """Gets the rollback_config of this RollbackTargetRequest.


        :return: The rollback_config of this RollbackTargetRequest.
        :rtype: RollbackTargetConfig
        """
        return self._rollback_config

    @rollback_config.setter
    def rollback_config(self, rollback_config):
        """Sets the rollback_config of this RollbackTargetRequest.


        :param rollback_config: The rollback_config of this RollbackTargetRequest.
        :type rollback_config: RollbackTargetConfig
        """

        self._rollback_config = rollback_config

    @property
    def rollout_id(self):
        """Gets the rollout_id of this RollbackTargetRequest.

        Required. ID of the rollback `Rollout` to create.

        :return: The rollout_id of this RollbackTargetRequest.
        :rtype: str
        """
        return self._rollout_id

    @rollout_id.setter
    def rollout_id(self, rollout_id):
        """Sets the rollout_id of this RollbackTargetRequest.

        Required. ID of the rollback `Rollout` to create.

        :param rollout_id: The rollout_id of this RollbackTargetRequest.
        :type rollout_id: str
        """

        self._rollout_id = rollout_id

    @property
    def rollout_to_roll_back(self):
        """Gets the rollout_to_roll_back of this RollbackTargetRequest.

        Optional. If provided, this must be the latest `Rollout` that is on the `Target`.

        :return: The rollout_to_roll_back of this RollbackTargetRequest.
        :rtype: str
        """
        return self._rollout_to_roll_back

    @rollout_to_roll_back.setter
    def rollout_to_roll_back(self, rollout_to_roll_back):
        """Sets the rollout_to_roll_back of this RollbackTargetRequest.

        Optional. If provided, this must be the latest `Rollout` that is on the `Target`.

        :param rollout_to_roll_back: The rollout_to_roll_back of this RollbackTargetRequest.
        :type rollout_to_roll_back: str
        """

        self._rollout_to_roll_back = rollout_to_roll_back

    @property
    def target_id(self):
        """Gets the target_id of this RollbackTargetRequest.

        Required. ID of the `Target` that is being rolled back.

        :return: The target_id of this RollbackTargetRequest.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this RollbackTargetRequest.

        Required. ID of the `Target` that is being rolled back.

        :param target_id: The target_id of this RollbackTargetRequest.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def validate_only(self):
        """Gets the validate_only of this RollbackTargetRequest.

        Optional. If set to true, the request is validated and the user is provided with a `RollbackTargetResponse`.

        :return: The validate_only of this RollbackTargetRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this RollbackTargetRequest.

        Optional. If set to true, the request is validated and the user is provided with a `RollbackTargetResponse`.

        :param validate_only: The validate_only of this RollbackTargetRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
