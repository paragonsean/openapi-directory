# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postdeploy import Postdeploy
from openapi_server.models.predeploy import Predeploy
from openapi_server import util


class PhaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: int=None, phase_id: str=None, postdeploy: Postdeploy=None, predeploy: Predeploy=None, profiles: List[str]=None, verify: bool=None):
        """PhaseConfig - a model defined in OpenAPI

        :param percentage: The percentage of this PhaseConfig.
        :param phase_id: The phase_id of this PhaseConfig.
        :param postdeploy: The postdeploy of this PhaseConfig.
        :param predeploy: The predeploy of this PhaseConfig.
        :param profiles: The profiles of this PhaseConfig.
        :param verify: The verify of this PhaseConfig.
        """
        self.openapi_types = {
            'percentage': int,
            'phase_id': str,
            'postdeploy': Postdeploy,
            'predeploy': Predeploy,
            'profiles': List[str],
            'verify': bool
        }

        self.attribute_map = {
            'percentage': 'percentage',
            'phase_id': 'phaseId',
            'postdeploy': 'postdeploy',
            'predeploy': 'predeploy',
            'profiles': 'profiles',
            'verify': 'verify'
        }

        self._percentage = percentage
        self._phase_id = phase_id
        self._postdeploy = postdeploy
        self._predeploy = predeploy
        self._profiles = profiles
        self._verify = verify

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhaseConfig of this PhaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this PhaseConfig.

        Required. Percentage deployment for the phase.

        :return: The percentage of this PhaseConfig.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PhaseConfig.

        Required. Percentage deployment for the phase.

        :param percentage: The percentage of this PhaseConfig.
        :type percentage: int
        """

        self._percentage = percentage

    @property
    def phase_id(self):
        """Gets the phase_id of this PhaseConfig.

        Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :return: The phase_id of this PhaseConfig.
        :rtype: str
        """
        return self._phase_id

    @phase_id.setter
    def phase_id(self, phase_id):
        """Sets the phase_id of this PhaseConfig.

        Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.

        :param phase_id: The phase_id of this PhaseConfig.
        :type phase_id: str
        """

        self._phase_id = phase_id

    @property
    def postdeploy(self):
        """Gets the postdeploy of this PhaseConfig.


        :return: The postdeploy of this PhaseConfig.
        :rtype: Postdeploy
        """
        return self._postdeploy

    @postdeploy.setter
    def postdeploy(self, postdeploy):
        """Sets the postdeploy of this PhaseConfig.


        :param postdeploy: The postdeploy of this PhaseConfig.
        :type postdeploy: Postdeploy
        """

        self._postdeploy = postdeploy

    @property
    def predeploy(self):
        """Gets the predeploy of this PhaseConfig.


        :return: The predeploy of this PhaseConfig.
        :rtype: Predeploy
        """
        return self._predeploy

    @predeploy.setter
    def predeploy(self, predeploy):
        """Sets the predeploy of this PhaseConfig.


        :param predeploy: The predeploy of this PhaseConfig.
        :type predeploy: Predeploy
        """

        self._predeploy = predeploy

    @property
    def profiles(self):
        """Gets the profiles of this PhaseConfig.

        Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.

        :return: The profiles of this PhaseConfig.
        :rtype: List[str]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this PhaseConfig.

        Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.

        :param profiles: The profiles of this PhaseConfig.
        :type profiles: List[str]
        """

        self._profiles = profiles

    @property
    def verify(self):
        """Gets the verify of this PhaseConfig.

        Whether to run verify tests after the deployment.

        :return: The verify of this PhaseConfig.
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this PhaseConfig.

        Whether to run verify tests after the deployment.

        :param verify: The verify of this PhaseConfig.
        :type verify: bool
        """

        self._verify = verify
