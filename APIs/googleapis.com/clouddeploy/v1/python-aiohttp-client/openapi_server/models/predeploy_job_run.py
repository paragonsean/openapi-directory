# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredeployJobRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: str=None, failure_cause: str=None, failure_message: str=None):
        """PredeployJobRun - a model defined in OpenAPI

        :param build: The build of this PredeployJobRun.
        :param failure_cause: The failure_cause of this PredeployJobRun.
        :param failure_message: The failure_message of this PredeployJobRun.
        """
        self.openapi_types = {
            'build': str,
            'failure_cause': str,
            'failure_message': str
        }

        self.attribute_map = {
            'build': 'build',
            'failure_cause': 'failureCause',
            'failure_message': 'failureMessage'
        }

        self._build = build
        self._failure_cause = failure_cause
        self._failure_message = failure_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredeployJobRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredeployJobRun of this PredeployJobRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this PredeployJobRun.

        Output only. The resource name of the Cloud Build `Build` object that is used to execute the custom actions associated with the predeploy Job. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :return: The build of this PredeployJobRun.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this PredeployJobRun.

        Output only. The resource name of the Cloud Build `Build` object that is used to execute the custom actions associated with the predeploy Job. Format is `projects/{project}/locations/{location}/builds/{build}`.

        :param build: The build of this PredeployJobRun.
        :type build: str
        """

        self._build = build

    @property
    def failure_cause(self):
        """Gets the failure_cause of this PredeployJobRun.

        Output only. The reason the predeploy failed. This will always be unspecified while the predeploy is in progress or if it succeeded.

        :return: The failure_cause of this PredeployJobRun.
        :rtype: str
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this PredeployJobRun.

        Output only. The reason the predeploy failed. This will always be unspecified while the predeploy is in progress or if it succeeded.

        :param failure_cause: The failure_cause of this PredeployJobRun.
        :type failure_cause: str
        """
        allowed_values = ["FAILURE_CAUSE_UNSPECIFIED", "CLOUD_BUILD_UNAVAILABLE", "EXECUTION_FAILED", "DEADLINE_EXCEEDED", "CLOUD_BUILD_REQUEST_FAILED"]  # noqa: E501
        if failure_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_cause` ({0}), must be one of {1}"
                .format(failure_cause, allowed_values)
            )

        self._failure_cause = failure_cause

    @property
    def failure_message(self):
        """Gets the failure_message of this PredeployJobRun.

        Output only. Additional information about the predeploy failure, if available.

        :return: The failure_message of this PredeployJobRun.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this PredeployJobRun.

        Output only. Additional information about the predeploy failure, if available.

        :param failure_message: The failure_message of this PredeployJobRun.
        :type failure_message: str
        """

        self._failure_message = failure_message
