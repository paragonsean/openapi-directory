# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anthos_cluster import AnthosCluster
from openapi_server.models.cloud_run_location import CloudRunLocation
from openapi_server.models.custom_target import CustomTarget
from openapi_server.models.execution_config import ExecutionConfig
from openapi_server.models.gke_cluster import GkeCluster
from openapi_server.models.multi_target import MultiTarget
from openapi_server import util


class Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, anthos_cluster: AnthosCluster=None, create_time: str=None, custom_target: CustomTarget=None, deploy_parameters: Dict[str, str]=None, description: str=None, etag: str=None, execution_configs: List[ExecutionConfig]=None, gke: GkeCluster=None, labels: Dict[str, str]=None, multi_target: MultiTarget=None, name: str=None, require_approval: bool=None, run: CloudRunLocation=None, target_id: str=None, uid: str=None, update_time: str=None):
        """Target - a model defined in OpenAPI

        :param annotations: The annotations of this Target.
        :param anthos_cluster: The anthos_cluster of this Target.
        :param create_time: The create_time of this Target.
        :param custom_target: The custom_target of this Target.
        :param deploy_parameters: The deploy_parameters of this Target.
        :param description: The description of this Target.
        :param etag: The etag of this Target.
        :param execution_configs: The execution_configs of this Target.
        :param gke: The gke of this Target.
        :param labels: The labels of this Target.
        :param multi_target: The multi_target of this Target.
        :param name: The name of this Target.
        :param require_approval: The require_approval of this Target.
        :param run: The run of this Target.
        :param target_id: The target_id of this Target.
        :param uid: The uid of this Target.
        :param update_time: The update_time of this Target.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'anthos_cluster': AnthosCluster,
            'create_time': str,
            'custom_target': CustomTarget,
            'deploy_parameters': Dict[str, str],
            'description': str,
            'etag': str,
            'execution_configs': List[ExecutionConfig],
            'gke': GkeCluster,
            'labels': Dict[str, str],
            'multi_target': MultiTarget,
            'name': str,
            'require_approval': bool,
            'run': CloudRunLocation,
            'target_id': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'anthos_cluster': 'anthosCluster',
            'create_time': 'createTime',
            'custom_target': 'customTarget',
            'deploy_parameters': 'deployParameters',
            'description': 'description',
            'etag': 'etag',
            'execution_configs': 'executionConfigs',
            'gke': 'gke',
            'labels': 'labels',
            'multi_target': 'multiTarget',
            'name': 'name',
            'require_approval': 'requireApproval',
            'run': 'run',
            'target_id': 'targetId',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._anthos_cluster = anthos_cluster
        self._create_time = create_time
        self._custom_target = custom_target
        self._deploy_parameters = deploy_parameters
        self._description = description
        self._etag = etag
        self._execution_configs = execution_configs
        self._gke = gke
        self._labels = labels
        self._multi_target = multi_target
        self._name = name
        self._require_approval = require_approval
        self._run = run
        self._target_id = target_id
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target of this Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Target.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :return: The annotations of this Target.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Target.

        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :param annotations: The annotations of this Target.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def anthos_cluster(self):
        """Gets the anthos_cluster of this Target.


        :return: The anthos_cluster of this Target.
        :rtype: AnthosCluster
        """
        return self._anthos_cluster

    @anthos_cluster.setter
    def anthos_cluster(self, anthos_cluster):
        """Sets the anthos_cluster of this Target.


        :param anthos_cluster: The anthos_cluster of this Target.
        :type anthos_cluster: AnthosCluster
        """

        self._anthos_cluster = anthos_cluster

    @property
    def create_time(self):
        """Gets the create_time of this Target.

        Output only. Time at which the `Target` was created.

        :return: The create_time of this Target.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Target.

        Output only. Time at which the `Target` was created.

        :param create_time: The create_time of this Target.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_target(self):
        """Gets the custom_target of this Target.


        :return: The custom_target of this Target.
        :rtype: CustomTarget
        """
        return self._custom_target

    @custom_target.setter
    def custom_target(self, custom_target):
        """Sets the custom_target of this Target.


        :param custom_target: The custom_target of this Target.
        :type custom_target: CustomTarget
        """

        self._custom_target = custom_target

    @property
    def deploy_parameters(self):
        """Gets the deploy_parameters of this Target.

        Optional. The deploy parameters to use for this target.

        :return: The deploy_parameters of this Target.
        :rtype: Dict[str, str]
        """
        return self._deploy_parameters

    @deploy_parameters.setter
    def deploy_parameters(self, deploy_parameters):
        """Sets the deploy_parameters of this Target.

        Optional. The deploy parameters to use for this target.

        :param deploy_parameters: The deploy_parameters of this Target.
        :type deploy_parameters: Dict[str, str]
        """

        self._deploy_parameters = deploy_parameters

    @property
    def description(self):
        """Gets the description of this Target.

        Optional. Description of the `Target`. Max length is 255 characters.

        :return: The description of this Target.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Target.

        Optional. Description of the `Target`. Max length is 255 characters.

        :param description: The description of this Target.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Target.

        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Target.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Target.

        Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Target.
        :type etag: str
        """

        self._etag = etag

    @property
    def execution_configs(self):
        """Gets the execution_configs of this Target.

        Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.

        :return: The execution_configs of this Target.
        :rtype: List[ExecutionConfig]
        """
        return self._execution_configs

    @execution_configs.setter
    def execution_configs(self, execution_configs):
        """Sets the execution_configs of this Target.

        Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.

        :param execution_configs: The execution_configs of this Target.
        :type execution_configs: List[ExecutionConfig]
        """

        self._execution_configs = execution_configs

    @property
    def gke(self):
        """Gets the gke of this Target.


        :return: The gke of this Target.
        :rtype: GkeCluster
        """
        return self._gke

    @gke.setter
    def gke(self, gke):
        """Sets the gke of this Target.


        :param gke: The gke of this Target.
        :type gke: GkeCluster
        """

        self._gke = gke

    @property
    def labels(self):
        """Gets the labels of this Target.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :return: The labels of this Target.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Target.

        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :param labels: The labels of this Target.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def multi_target(self):
        """Gets the multi_target of this Target.


        :return: The multi_target of this Target.
        :rtype: MultiTarget
        """
        return self._multi_target

    @multi_target.setter
    def multi_target(self, multi_target):
        """Sets the multi_target of this Target.


        :param multi_target: The multi_target of this Target.
        :type multi_target: MultiTarget
        """

        self._multi_target = multi_target

    @property
    def name(self):
        """Gets the name of this Target.

        Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.

        :return: The name of this Target.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Target.

        Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.

        :param name: The name of this Target.
        :type name: str
        """

        self._name = name

    @property
    def require_approval(self):
        """Gets the require_approval of this Target.

        Optional. Whether or not the `Target` requires approval.

        :return: The require_approval of this Target.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval):
        """Sets the require_approval of this Target.

        Optional. Whether or not the `Target` requires approval.

        :param require_approval: The require_approval of this Target.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def run(self):
        """Gets the run of this Target.


        :return: The run of this Target.
        :rtype: CloudRunLocation
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this Target.


        :param run: The run of this Target.
        :type run: CloudRunLocation
        """

        self._run = run

    @property
    def target_id(self):
        """Gets the target_id of this Target.

        Output only. Resource id of the `Target`.

        :return: The target_id of this Target.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Target.

        Output only. Resource id of the `Target`.

        :param target_id: The target_id of this Target.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def uid(self):
        """Gets the uid of this Target.

        Output only. Unique identifier of the `Target`.

        :return: The uid of this Target.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Target.

        Output only. Unique identifier of the `Target`.

        :param uid: The uid of this Target.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Target.

        Output only. Most recent time at which the `Target` was updated.

        :return: The update_time of this Target.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Target.

        Output only. Most recent time at which the `Target` was updated.

        :param update_time: The update_time of this Target.
        :type update_time: str
        """

        self._update_time = update_time
