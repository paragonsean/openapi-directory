# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RolloutUpdateEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, pipeline_uid: str=None, release: str=None, release_uid: str=None, rollout: str=None, rollout_update_type: str=None, target_id: str=None, type: str=None):
        """RolloutUpdateEvent - a model defined in OpenAPI

        :param message: The message of this RolloutUpdateEvent.
        :param pipeline_uid: The pipeline_uid of this RolloutUpdateEvent.
        :param release: The release of this RolloutUpdateEvent.
        :param release_uid: The release_uid of this RolloutUpdateEvent.
        :param rollout: The rollout of this RolloutUpdateEvent.
        :param rollout_update_type: The rollout_update_type of this RolloutUpdateEvent.
        :param target_id: The target_id of this RolloutUpdateEvent.
        :param type: The type of this RolloutUpdateEvent.
        """
        self.openapi_types = {
            'message': str,
            'pipeline_uid': str,
            'release': str,
            'release_uid': str,
            'rollout': str,
            'rollout_update_type': str,
            'target_id': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'pipeline_uid': 'pipelineUid',
            'release': 'release',
            'release_uid': 'releaseUid',
            'rollout': 'rollout',
            'rollout_update_type': 'rolloutUpdateType',
            'target_id': 'targetId',
            'type': 'type'
        }

        self._message = message
        self._pipeline_uid = pipeline_uid
        self._release = release
        self._release_uid = release_uid
        self._rollout = rollout
        self._rollout_update_type = rollout_update_type
        self._target_id = target_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RolloutUpdateEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RolloutUpdateEvent of this RolloutUpdateEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this RolloutUpdateEvent.

        Debug message for when a rollout update event occurs.

        :return: The message of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RolloutUpdateEvent.

        Debug message for when a rollout update event occurs.

        :param message: The message of this RolloutUpdateEvent.
        :type message: str
        """

        self._message = message

    @property
    def pipeline_uid(self):
        """Gets the pipeline_uid of this RolloutUpdateEvent.

        Unique identifier of the pipeline.

        :return: The pipeline_uid of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._pipeline_uid

    @pipeline_uid.setter
    def pipeline_uid(self, pipeline_uid):
        """Sets the pipeline_uid of this RolloutUpdateEvent.

        Unique identifier of the pipeline.

        :param pipeline_uid: The pipeline_uid of this RolloutUpdateEvent.
        :type pipeline_uid: str
        """

        self._pipeline_uid = pipeline_uid

    @property
    def release(self):
        """Gets the release of this RolloutUpdateEvent.

        The name of the `Release`.

        :return: The release of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this RolloutUpdateEvent.

        The name of the `Release`.

        :param release: The release of this RolloutUpdateEvent.
        :type release: str
        """

        self._release = release

    @property
    def release_uid(self):
        """Gets the release_uid of this RolloutUpdateEvent.

        Unique identifier of the release.

        :return: The release_uid of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._release_uid

    @release_uid.setter
    def release_uid(self, release_uid):
        """Sets the release_uid of this RolloutUpdateEvent.

        Unique identifier of the release.

        :param release_uid: The release_uid of this RolloutUpdateEvent.
        :type release_uid: str
        """

        self._release_uid = release_uid

    @property
    def rollout(self):
        """Gets the rollout of this RolloutUpdateEvent.

        The name of the rollout. rollout_uid is not in this log message because we write some of these log messages at rollout creation time, before we've generated the uid.

        :return: The rollout of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this RolloutUpdateEvent.

        The name of the rollout. rollout_uid is not in this log message because we write some of these log messages at rollout creation time, before we've generated the uid.

        :param rollout: The rollout of this RolloutUpdateEvent.
        :type rollout: str
        """

        self._rollout = rollout

    @property
    def rollout_update_type(self):
        """Gets the rollout_update_type of this RolloutUpdateEvent.

        The type of the rollout update.

        :return: The rollout_update_type of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._rollout_update_type

    @rollout_update_type.setter
    def rollout_update_type(self, rollout_update_type):
        """Sets the rollout_update_type of this RolloutUpdateEvent.

        The type of the rollout update.

        :param rollout_update_type: The rollout_update_type of this RolloutUpdateEvent.
        :type rollout_update_type: str
        """
        allowed_values = ["ROLLOUT_UPDATE_TYPE_UNSPECIFIED", "PENDING", "PENDING_RELEASE", "IN_PROGRESS", "CANCELLING", "CANCELLED", "HALTED", "SUCCEEDED", "FAILED", "APPROVAL_REQUIRED", "APPROVED", "REJECTED", "ADVANCE_REQUIRED", "ADVANCED"]  # noqa: E501
        if rollout_update_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rollout_update_type` ({0}), must be one of {1}"
                .format(rollout_update_type, allowed_values)
            )

        self._rollout_update_type = rollout_update_type

    @property
    def target_id(self):
        """Gets the target_id of this RolloutUpdateEvent.

        ID of the target.

        :return: The target_id of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this RolloutUpdateEvent.

        ID of the target.

        :param target_id: The target_id of this RolloutUpdateEvent.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def type(self):
        """Gets the type of this RolloutUpdateEvent.

        Type of this notification, e.g. for a rollout update event.

        :return: The type of this RolloutUpdateEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RolloutUpdateEvent.

        Type of this notification, e.g. for a rollout update event.

        :param type: The type of this RolloutUpdateEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PUBSUB_NOTIFICATION_FAILURE", "TYPE_RESOURCE_STATE_CHANGE", "TYPE_PROCESS_ABORTED", "TYPE_RESTRICTION_VIOLATED", "TYPE_RESOURCE_DELETED", "TYPE_ROLLOUT_UPDATE", "TYPE_DEPLOY_POLICY_EVALUATION", "TYPE_RENDER_STATUES_CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
