# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_condition import PipelineCondition
from openapi_server.models.serial_pipeline import SerialPipeline
from openapi_server import util


class DeliveryPipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, condition: PipelineCondition=None, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, serial_pipeline: SerialPipeline=None, suspended: bool=None, uid: str=None, update_time: str=None):
        """DeliveryPipeline - a model defined in OpenAPI

        :param annotations: The annotations of this DeliveryPipeline.
        :param condition: The condition of this DeliveryPipeline.
        :param create_time: The create_time of this DeliveryPipeline.
        :param description: The description of this DeliveryPipeline.
        :param etag: The etag of this DeliveryPipeline.
        :param labels: The labels of this DeliveryPipeline.
        :param name: The name of this DeliveryPipeline.
        :param serial_pipeline: The serial_pipeline of this DeliveryPipeline.
        :param suspended: The suspended of this DeliveryPipeline.
        :param uid: The uid of this DeliveryPipeline.
        :param update_time: The update_time of this DeliveryPipeline.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'condition': PipelineCondition,
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'serial_pipeline': SerialPipeline,
            'suspended': bool,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'condition': 'condition',
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'serial_pipeline': 'serialPipeline',
            'suspended': 'suspended',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._condition = condition
        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._serial_pipeline = serial_pipeline
        self._suspended = suspended
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryPipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryPipeline of this DeliveryPipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this DeliveryPipeline.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.

        :return: The annotations of this DeliveryPipeline.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this DeliveryPipeline.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.

        :param annotations: The annotations of this DeliveryPipeline.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def condition(self):
        """Gets the condition of this DeliveryPipeline.


        :return: The condition of this DeliveryPipeline.
        :rtype: PipelineCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this DeliveryPipeline.


        :param condition: The condition of this DeliveryPipeline.
        :type condition: PipelineCondition
        """

        self._condition = condition

    @property
    def create_time(self):
        """Gets the create_time of this DeliveryPipeline.

        Output only. Time at which the pipeline was created.

        :return: The create_time of this DeliveryPipeline.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DeliveryPipeline.

        Output only. Time at which the pipeline was created.

        :param create_time: The create_time of this DeliveryPipeline.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this DeliveryPipeline.

        Description of the `DeliveryPipeline`. Max length is 255 characters.

        :return: The description of this DeliveryPipeline.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeliveryPipeline.

        Description of the `DeliveryPipeline`. Max length is 255 characters.

        :param description: The description of this DeliveryPipeline.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this DeliveryPipeline.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this DeliveryPipeline.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DeliveryPipeline.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this DeliveryPipeline.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this DeliveryPipeline.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :return: The labels of this DeliveryPipeline.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DeliveryPipeline.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :param labels: The labels of this DeliveryPipeline.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this DeliveryPipeline.

        Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.

        :return: The name of this DeliveryPipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeliveryPipeline.

        Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.

        :param name: The name of this DeliveryPipeline.
        :type name: str
        """

        self._name = name

    @property
    def serial_pipeline(self):
        """Gets the serial_pipeline of this DeliveryPipeline.


        :return: The serial_pipeline of this DeliveryPipeline.
        :rtype: SerialPipeline
        """
        return self._serial_pipeline

    @serial_pipeline.setter
    def serial_pipeline(self, serial_pipeline):
        """Sets the serial_pipeline of this DeliveryPipeline.


        :param serial_pipeline: The serial_pipeline of this DeliveryPipeline.
        :type serial_pipeline: SerialPipeline
        """

        self._serial_pipeline = serial_pipeline

    @property
    def suspended(self):
        """Gets the suspended of this DeliveryPipeline.

        When suspended, no new releases or rollouts can be created, but in-progress ones will complete.

        :return: The suspended of this DeliveryPipeline.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this DeliveryPipeline.

        When suspended, no new releases or rollouts can be created, but in-progress ones will complete.

        :param suspended: The suspended of this DeliveryPipeline.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def uid(self):
        """Gets the uid of this DeliveryPipeline.

        Output only. Unique identifier of the `DeliveryPipeline`.

        :return: The uid of this DeliveryPipeline.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DeliveryPipeline.

        Output only. Unique identifier of the `DeliveryPipeline`.

        :param uid: The uid of this DeliveryPipeline.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this DeliveryPipeline.

        Output only. Most recent time at which the pipeline was updated.

        :return: The update_time of this DeliveryPipeline.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DeliveryPipeline.

        Output only. Most recent time at which the pipeline was updated.

        :param update_time: The update_time of this DeliveryPipeline.
        :type update_time: str
        """

        self._update_time = update_time
