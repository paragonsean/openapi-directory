# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_rollout_jobs import ChildRolloutJobs
from openapi_server.models.deployment_jobs import DeploymentJobs
from openapi_server import util


class Phase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_rollout_jobs: ChildRolloutJobs=None, deployment_jobs: DeploymentJobs=None, id: str=None, skip_message: str=None, state: str=None):
        """Phase - a model defined in OpenAPI

        :param child_rollout_jobs: The child_rollout_jobs of this Phase.
        :param deployment_jobs: The deployment_jobs of this Phase.
        :param id: The id of this Phase.
        :param skip_message: The skip_message of this Phase.
        :param state: The state of this Phase.
        """
        self.openapi_types = {
            'child_rollout_jobs': ChildRolloutJobs,
            'deployment_jobs': DeploymentJobs,
            'id': str,
            'skip_message': str,
            'state': str
        }

        self.attribute_map = {
            'child_rollout_jobs': 'childRolloutJobs',
            'deployment_jobs': 'deploymentJobs',
            'id': 'id',
            'skip_message': 'skipMessage',
            'state': 'state'
        }

        self._child_rollout_jobs = child_rollout_jobs
        self._deployment_jobs = deployment_jobs
        self._id = id
        self._skip_message = skip_message
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phase of this Phase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_rollout_jobs(self):
        """Gets the child_rollout_jobs of this Phase.


        :return: The child_rollout_jobs of this Phase.
        :rtype: ChildRolloutJobs
        """
        return self._child_rollout_jobs

    @child_rollout_jobs.setter
    def child_rollout_jobs(self, child_rollout_jobs):
        """Sets the child_rollout_jobs of this Phase.


        :param child_rollout_jobs: The child_rollout_jobs of this Phase.
        :type child_rollout_jobs: ChildRolloutJobs
        """

        self._child_rollout_jobs = child_rollout_jobs

    @property
    def deployment_jobs(self):
        """Gets the deployment_jobs of this Phase.


        :return: The deployment_jobs of this Phase.
        :rtype: DeploymentJobs
        """
        return self._deployment_jobs

    @deployment_jobs.setter
    def deployment_jobs(self, deployment_jobs):
        """Sets the deployment_jobs of this Phase.


        :param deployment_jobs: The deployment_jobs of this Phase.
        :type deployment_jobs: DeploymentJobs
        """

        self._deployment_jobs = deployment_jobs

    @property
    def id(self):
        """Gets the id of this Phase.

        Output only. The ID of the Phase.

        :return: The id of this Phase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Phase.

        Output only. The ID of the Phase.

        :param id: The id of this Phase.
        :type id: str
        """

        self._id = id

    @property
    def skip_message(self):
        """Gets the skip_message of this Phase.

        Output only. Additional information on why the Phase was skipped, if available.

        :return: The skip_message of this Phase.
        :rtype: str
        """
        return self._skip_message

    @skip_message.setter
    def skip_message(self, skip_message):
        """Sets the skip_message of this Phase.

        Output only. Additional information on why the Phase was skipped, if available.

        :param skip_message: The skip_message of this Phase.
        :type skip_message: str
        """

        self._skip_message = skip_message

    @property
    def state(self):
        """Gets the state of this Phase.

        Output only. Current state of the Phase.

        :return: The state of this Phase.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Phase.

        Output only. Current state of the Phase.

        :param state: The state of this Phase.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "IN_PROGRESS", "SUCCEEDED", "FAILED", "ABORTED", "SKIPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
