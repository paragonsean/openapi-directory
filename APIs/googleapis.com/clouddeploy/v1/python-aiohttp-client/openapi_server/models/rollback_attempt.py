# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RollbackAttempt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_phase: str=None, rollout_id: str=None, state: str=None, state_desc: str=None):
        """RollbackAttempt - a model defined in OpenAPI

        :param destination_phase: The destination_phase of this RollbackAttempt.
        :param rollout_id: The rollout_id of this RollbackAttempt.
        :param state: The state of this RollbackAttempt.
        :param state_desc: The state_desc of this RollbackAttempt.
        """
        self.openapi_types = {
            'destination_phase': str,
            'rollout_id': str,
            'state': str,
            'state_desc': str
        }

        self.attribute_map = {
            'destination_phase': 'destinationPhase',
            'rollout_id': 'rolloutId',
            'state': 'state',
            'state_desc': 'stateDesc'
        }

        self._destination_phase = destination_phase
        self._rollout_id = rollout_id
        self._state = state
        self._state_desc = state_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollbackAttempt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollbackAttempt of this RollbackAttempt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_phase(self):
        """Gets the destination_phase of this RollbackAttempt.

        Output only. The phase to which the rollout will be rolled back to.

        :return: The destination_phase of this RollbackAttempt.
        :rtype: str
        """
        return self._destination_phase

    @destination_phase.setter
    def destination_phase(self, destination_phase):
        """Sets the destination_phase of this RollbackAttempt.

        Output only. The phase to which the rollout will be rolled back to.

        :param destination_phase: The destination_phase of this RollbackAttempt.
        :type destination_phase: str
        """

        self._destination_phase = destination_phase

    @property
    def rollout_id(self):
        """Gets the rollout_id of this RollbackAttempt.

        Output only. ID of the rollback `Rollout` to create.

        :return: The rollout_id of this RollbackAttempt.
        :rtype: str
        """
        return self._rollout_id

    @rollout_id.setter
    def rollout_id(self, rollout_id):
        """Sets the rollout_id of this RollbackAttempt.

        Output only. ID of the rollback `Rollout` to create.

        :param rollout_id: The rollout_id of this RollbackAttempt.
        :type rollout_id: str
        """

        self._rollout_id = rollout_id

    @property
    def state(self):
        """Gets the state of this RollbackAttempt.

        Output only. Valid state of this rollback action.

        :return: The state of this RollbackAttempt.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RollbackAttempt.

        Output only. Valid state of this rollback action.

        :param state: The state of this RollbackAttempt.
        :type state: str
        """
        allowed_values = ["REPAIR_STATE_UNSPECIFIED", "REPAIR_STATE_SUCCEEDED", "REPAIR_STATE_CANCELLED", "REPAIR_STATE_FAILED", "REPAIR_STATE_IN_PROGRESS", "REPAIR_STATE_PENDING", "REPAIR_STATE_SKIPPED", "REPAIR_STATE_ABORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_desc(self):
        """Gets the state_desc of this RollbackAttempt.

        Output only. Description of the state of the Rollback.

        :return: The state_desc of this RollbackAttempt.
        :rtype: str
        """
        return self._state_desc

    @state_desc.setter
    def state_desc(self, state_desc):
        """Sets the state_desc of this RollbackAttempt.

        Output only. Description of the state of the Rollback.

        :param state_desc: The state_desc of this RollbackAttempt.
        :type state_desc: str
        """

        self._state_desc = state_desc
