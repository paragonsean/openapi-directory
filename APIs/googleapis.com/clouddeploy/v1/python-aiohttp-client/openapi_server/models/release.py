# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_artifact import BuildArtifact
from openapi_server.models.custom_target_type import CustomTargetType
from openapi_server.models.delivery_pipeline import DeliveryPipeline
from openapi_server.models.release_condition import ReleaseCondition
from openapi_server.models.target import Target
from openapi_server.models.target_artifact import TargetArtifact
from openapi_server.models.target_render import TargetRender
from openapi_server import util


class Release(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abandoned: bool=None, annotations: Dict[str, str]=None, build_artifacts: List[BuildArtifact]=None, condition: ReleaseCondition=None, create_time: str=None, custom_target_type_snapshots: List[CustomTargetType]=None, delivery_pipeline_snapshot: DeliveryPipeline=None, deploy_parameters: Dict[str, str]=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, render_end_time: str=None, render_start_time: str=None, render_state: str=None, skaffold_config_path: str=None, skaffold_config_uri: str=None, skaffold_version: str=None, target_artifacts: Dict[str, TargetArtifact]=None, target_renders: Dict[str, TargetRender]=None, target_snapshots: List[Target]=None, uid: str=None):
        """Release - a model defined in OpenAPI

        :param abandoned: The abandoned of this Release.
        :param annotations: The annotations of this Release.
        :param build_artifacts: The build_artifacts of this Release.
        :param condition: The condition of this Release.
        :param create_time: The create_time of this Release.
        :param custom_target_type_snapshots: The custom_target_type_snapshots of this Release.
        :param delivery_pipeline_snapshot: The delivery_pipeline_snapshot of this Release.
        :param deploy_parameters: The deploy_parameters of this Release.
        :param description: The description of this Release.
        :param etag: The etag of this Release.
        :param labels: The labels of this Release.
        :param name: The name of this Release.
        :param render_end_time: The render_end_time of this Release.
        :param render_start_time: The render_start_time of this Release.
        :param render_state: The render_state of this Release.
        :param skaffold_config_path: The skaffold_config_path of this Release.
        :param skaffold_config_uri: The skaffold_config_uri of this Release.
        :param skaffold_version: The skaffold_version of this Release.
        :param target_artifacts: The target_artifacts of this Release.
        :param target_renders: The target_renders of this Release.
        :param target_snapshots: The target_snapshots of this Release.
        :param uid: The uid of this Release.
        """
        self.openapi_types = {
            'abandoned': bool,
            'annotations': Dict[str, str],
            'build_artifacts': List[BuildArtifact],
            'condition': ReleaseCondition,
            'create_time': str,
            'custom_target_type_snapshots': List[CustomTargetType],
            'delivery_pipeline_snapshot': DeliveryPipeline,
            'deploy_parameters': Dict[str, str],
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'render_end_time': str,
            'render_start_time': str,
            'render_state': str,
            'skaffold_config_path': str,
            'skaffold_config_uri': str,
            'skaffold_version': str,
            'target_artifacts': Dict[str, TargetArtifact],
            'target_renders': Dict[str, TargetRender],
            'target_snapshots': List[Target],
            'uid': str
        }

        self.attribute_map = {
            'abandoned': 'abandoned',
            'annotations': 'annotations',
            'build_artifacts': 'buildArtifacts',
            'condition': 'condition',
            'create_time': 'createTime',
            'custom_target_type_snapshots': 'customTargetTypeSnapshots',
            'delivery_pipeline_snapshot': 'deliveryPipelineSnapshot',
            'deploy_parameters': 'deployParameters',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'render_end_time': 'renderEndTime',
            'render_start_time': 'renderStartTime',
            'render_state': 'renderState',
            'skaffold_config_path': 'skaffoldConfigPath',
            'skaffold_config_uri': 'skaffoldConfigUri',
            'skaffold_version': 'skaffoldVersion',
            'target_artifacts': 'targetArtifacts',
            'target_renders': 'targetRenders',
            'target_snapshots': 'targetSnapshots',
            'uid': 'uid'
        }

        self._abandoned = abandoned
        self._annotations = annotations
        self._build_artifacts = build_artifacts
        self._condition = condition
        self._create_time = create_time
        self._custom_target_type_snapshots = custom_target_type_snapshots
        self._delivery_pipeline_snapshot = delivery_pipeline_snapshot
        self._deploy_parameters = deploy_parameters
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._render_end_time = render_end_time
        self._render_start_time = render_start_time
        self._render_state = render_state
        self._skaffold_config_path = skaffold_config_path
        self._skaffold_config_uri = skaffold_config_uri
        self._skaffold_version = skaffold_version
        self._target_artifacts = target_artifacts
        self._target_renders = target_renders
        self._target_snapshots = target_snapshots
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Release':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Release of this Release.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abandoned(self):
        """Gets the abandoned of this Release.

        Output only. Indicates whether this is an abandoned release.

        :return: The abandoned of this Release.
        :rtype: bool
        """
        return self._abandoned

    @abandoned.setter
    def abandoned(self, abandoned):
        """Sets the abandoned of this Release.

        Output only. Indicates whether this is an abandoned release.

        :param abandoned: The abandoned of this Release.
        :type abandoned: bool
        """

        self._abandoned = abandoned

    @property
    def annotations(self):
        """Gets the annotations of this Release.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :return: The annotations of this Release.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Release.

        User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.

        :param annotations: The annotations of this Release.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def build_artifacts(self):
        """Gets the build_artifacts of this Release.

        List of artifacts to pass through to Skaffold command.

        :return: The build_artifacts of this Release.
        :rtype: List[BuildArtifact]
        """
        return self._build_artifacts

    @build_artifacts.setter
    def build_artifacts(self, build_artifacts):
        """Sets the build_artifacts of this Release.

        List of artifacts to pass through to Skaffold command.

        :param build_artifacts: The build_artifacts of this Release.
        :type build_artifacts: List[BuildArtifact]
        """

        self._build_artifacts = build_artifacts

    @property
    def condition(self):
        """Gets the condition of this Release.


        :return: The condition of this Release.
        :rtype: ReleaseCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Release.


        :param condition: The condition of this Release.
        :type condition: ReleaseCondition
        """

        self._condition = condition

    @property
    def create_time(self):
        """Gets the create_time of this Release.

        Output only. Time at which the `Release` was created.

        :return: The create_time of this Release.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Release.

        Output only. Time at which the `Release` was created.

        :param create_time: The create_time of this Release.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_target_type_snapshots(self):
        """Gets the custom_target_type_snapshots of this Release.

        Output only. Snapshot of the custom target types referenced by the targets taken at release creation time.

        :return: The custom_target_type_snapshots of this Release.
        :rtype: List[CustomTargetType]
        """
        return self._custom_target_type_snapshots

    @custom_target_type_snapshots.setter
    def custom_target_type_snapshots(self, custom_target_type_snapshots):
        """Sets the custom_target_type_snapshots of this Release.

        Output only. Snapshot of the custom target types referenced by the targets taken at release creation time.

        :param custom_target_type_snapshots: The custom_target_type_snapshots of this Release.
        :type custom_target_type_snapshots: List[CustomTargetType]
        """

        self._custom_target_type_snapshots = custom_target_type_snapshots

    @property
    def delivery_pipeline_snapshot(self):
        """Gets the delivery_pipeline_snapshot of this Release.


        :return: The delivery_pipeline_snapshot of this Release.
        :rtype: DeliveryPipeline
        """
        return self._delivery_pipeline_snapshot

    @delivery_pipeline_snapshot.setter
    def delivery_pipeline_snapshot(self, delivery_pipeline_snapshot):
        """Sets the delivery_pipeline_snapshot of this Release.


        :param delivery_pipeline_snapshot: The delivery_pipeline_snapshot of this Release.
        :type delivery_pipeline_snapshot: DeliveryPipeline
        """

        self._delivery_pipeline_snapshot = delivery_pipeline_snapshot

    @property
    def deploy_parameters(self):
        """Gets the deploy_parameters of this Release.

        Optional. The deploy parameters to use for all targets in this release.

        :return: The deploy_parameters of this Release.
        :rtype: Dict[str, str]
        """
        return self._deploy_parameters

    @deploy_parameters.setter
    def deploy_parameters(self, deploy_parameters):
        """Sets the deploy_parameters of this Release.

        Optional. The deploy parameters to use for all targets in this release.

        :param deploy_parameters: The deploy_parameters of this Release.
        :type deploy_parameters: Dict[str, str]
        """

        self._deploy_parameters = deploy_parameters

    @property
    def description(self):
        """Gets the description of this Release.

        Description of the `Release`. Max length is 255 characters.

        :return: The description of this Release.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Release.

        Description of the `Release`. Max length is 255 characters.

        :param description: The description of this Release.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Release.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Release.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Release.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Release.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Release.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :return: The labels of this Release.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Release.

        Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.

        :param labels: The labels of this Release.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Release.

        Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.

        :return: The name of this Release.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Release.

        Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.

        :param name: The name of this Release.
        :type name: str
        """

        self._name = name

    @property
    def render_end_time(self):
        """Gets the render_end_time of this Release.

        Output only. Time at which the render completed.

        :return: The render_end_time of this Release.
        :rtype: str
        """
        return self._render_end_time

    @render_end_time.setter
    def render_end_time(self, render_end_time):
        """Sets the render_end_time of this Release.

        Output only. Time at which the render completed.

        :param render_end_time: The render_end_time of this Release.
        :type render_end_time: str
        """

        self._render_end_time = render_end_time

    @property
    def render_start_time(self):
        """Gets the render_start_time of this Release.

        Output only. Time at which the render began.

        :return: The render_start_time of this Release.
        :rtype: str
        """
        return self._render_start_time

    @render_start_time.setter
    def render_start_time(self, render_start_time):
        """Sets the render_start_time of this Release.

        Output only. Time at which the render began.

        :param render_start_time: The render_start_time of this Release.
        :type render_start_time: str
        """

        self._render_start_time = render_start_time

    @property
    def render_state(self):
        """Gets the render_state of this Release.

        Output only. Current state of the render operation.

        :return: The render_state of this Release.
        :rtype: str
        """
        return self._render_state

    @render_state.setter
    def render_state(self, render_state):
        """Sets the render_state of this Release.

        Output only. Current state of the render operation.

        :param render_state: The render_state of this Release.
        :type render_state: str
        """
        allowed_values = ["RENDER_STATE_UNSPECIFIED", "SUCCEEDED", "FAILED", "IN_PROGRESS"]  # noqa: E501
        if render_state not in allowed_values:
            raise ValueError(
                "Invalid value for `render_state` ({0}), must be one of {1}"
                .format(render_state, allowed_values)
            )

        self._render_state = render_state

    @property
    def skaffold_config_path(self):
        """Gets the skaffold_config_path of this Release.

        Filepath of the Skaffold config inside of the config URI.

        :return: The skaffold_config_path of this Release.
        :rtype: str
        """
        return self._skaffold_config_path

    @skaffold_config_path.setter
    def skaffold_config_path(self, skaffold_config_path):
        """Sets the skaffold_config_path of this Release.

        Filepath of the Skaffold config inside of the config URI.

        :param skaffold_config_path: The skaffold_config_path of this Release.
        :type skaffold_config_path: str
        """

        self._skaffold_config_path = skaffold_config_path

    @property
    def skaffold_config_uri(self):
        """Gets the skaffold_config_uri of this Release.

        Cloud Storage URI of tar.gz archive containing Skaffold configuration.

        :return: The skaffold_config_uri of this Release.
        :rtype: str
        """
        return self._skaffold_config_uri

    @skaffold_config_uri.setter
    def skaffold_config_uri(self, skaffold_config_uri):
        """Sets the skaffold_config_uri of this Release.

        Cloud Storage URI of tar.gz archive containing Skaffold configuration.

        :param skaffold_config_uri: The skaffold_config_uri of this Release.
        :type skaffold_config_uri: str
        """

        self._skaffold_config_uri = skaffold_config_uri

    @property
    def skaffold_version(self):
        """Gets the skaffold_version of this Release.

        The Skaffold version to use when operating on this release, such as \"1.20.0\". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.

        :return: The skaffold_version of this Release.
        :rtype: str
        """
        return self._skaffold_version

    @skaffold_version.setter
    def skaffold_version(self, skaffold_version):
        """Sets the skaffold_version of this Release.

        The Skaffold version to use when operating on this release, such as \"1.20.0\". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.

        :param skaffold_version: The skaffold_version of this Release.
        :type skaffold_version: str
        """

        self._skaffold_version = skaffold_version

    @property
    def target_artifacts(self):
        """Gets the target_artifacts of this Release.

        Output only. Map from target ID to the target artifacts created during the render operation.

        :return: The target_artifacts of this Release.
        :rtype: Dict[str, TargetArtifact]
        """
        return self._target_artifacts

    @target_artifacts.setter
    def target_artifacts(self, target_artifacts):
        """Sets the target_artifacts of this Release.

        Output only. Map from target ID to the target artifacts created during the render operation.

        :param target_artifacts: The target_artifacts of this Release.
        :type target_artifacts: Dict[str, TargetArtifact]
        """

        self._target_artifacts = target_artifacts

    @property
    def target_renders(self):
        """Gets the target_renders of this Release.

        Output only. Map from target ID to details of the render operation for that target.

        :return: The target_renders of this Release.
        :rtype: Dict[str, TargetRender]
        """
        return self._target_renders

    @target_renders.setter
    def target_renders(self, target_renders):
        """Sets the target_renders of this Release.

        Output only. Map from target ID to details of the render operation for that target.

        :param target_renders: The target_renders of this Release.
        :type target_renders: Dict[str, TargetRender]
        """

        self._target_renders = target_renders

    @property
    def target_snapshots(self):
        """Gets the target_snapshots of this Release.

        Output only. Snapshot of the targets taken at release creation time.

        :return: The target_snapshots of this Release.
        :rtype: List[Target]
        """
        return self._target_snapshots

    @target_snapshots.setter
    def target_snapshots(self, target_snapshots):
        """Sets the target_snapshots of this Release.

        Output only. Snapshot of the targets taken at release creation time.

        :param target_snapshots: The target_snapshots of this Release.
        :type target_snapshots: List[Target]
        """

        self._target_snapshots = target_snapshots

    @property
    def uid(self):
        """Gets the uid of this Release.

        Output only. Unique identifier of the `Release`.

        :return: The uid of this Release.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Release.

        Output only. Unique identifier of the `Release`.

        :param uid: The uid of this Release.
        :type uid: str
        """

        self._uid = uid
