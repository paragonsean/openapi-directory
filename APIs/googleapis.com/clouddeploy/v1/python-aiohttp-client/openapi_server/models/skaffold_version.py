# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class SkaffoldVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maintenance_mode_time: str=None, support_end_date: ModelDate=None, support_expiration_time: str=None, version: str=None):
        """SkaffoldVersion - a model defined in OpenAPI

        :param maintenance_mode_time: The maintenance_mode_time of this SkaffoldVersion.
        :param support_end_date: The support_end_date of this SkaffoldVersion.
        :param support_expiration_time: The support_expiration_time of this SkaffoldVersion.
        :param version: The version of this SkaffoldVersion.
        """
        self.openapi_types = {
            'maintenance_mode_time': str,
            'support_end_date': ModelDate,
            'support_expiration_time': str,
            'version': str
        }

        self.attribute_map = {
            'maintenance_mode_time': 'maintenanceModeTime',
            'support_end_date': 'supportEndDate',
            'support_expiration_time': 'supportExpirationTime',
            'version': 'version'
        }

        self._maintenance_mode_time = maintenance_mode_time
        self._support_end_date = support_end_date
        self._support_expiration_time = support_expiration_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkaffoldVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkaffoldVersion of this SkaffoldVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maintenance_mode_time(self):
        """Gets the maintenance_mode_time of this SkaffoldVersion.

        The time at which this version of Skaffold will enter maintenance mode.

        :return: The maintenance_mode_time of this SkaffoldVersion.
        :rtype: str
        """
        return self._maintenance_mode_time

    @maintenance_mode_time.setter
    def maintenance_mode_time(self, maintenance_mode_time):
        """Sets the maintenance_mode_time of this SkaffoldVersion.

        The time at which this version of Skaffold will enter maintenance mode.

        :param maintenance_mode_time: The maintenance_mode_time of this SkaffoldVersion.
        :type maintenance_mode_time: str
        """

        self._maintenance_mode_time = maintenance_mode_time

    @property
    def support_end_date(self):
        """Gets the support_end_date of this SkaffoldVersion.


        :return: The support_end_date of this SkaffoldVersion.
        :rtype: ModelDate
        """
        return self._support_end_date

    @support_end_date.setter
    def support_end_date(self, support_end_date):
        """Sets the support_end_date of this SkaffoldVersion.


        :param support_end_date: The support_end_date of this SkaffoldVersion.
        :type support_end_date: ModelDate
        """

        self._support_end_date = support_end_date

    @property
    def support_expiration_time(self):
        """Gets the support_expiration_time of this SkaffoldVersion.

        The time at which this version of Skaffold will no longer be supported.

        :return: The support_expiration_time of this SkaffoldVersion.
        :rtype: str
        """
        return self._support_expiration_time

    @support_expiration_time.setter
    def support_expiration_time(self, support_expiration_time):
        """Sets the support_expiration_time of this SkaffoldVersion.

        The time at which this version of Skaffold will no longer be supported.

        :param support_expiration_time: The support_expiration_time of this SkaffoldVersion.
        :type support_expiration_time: str
        """

        self._support_expiration_time = support_expiration_time

    @property
    def version(self):
        """Gets the version of this SkaffoldVersion.

        Release version number. For example, \"1.20.3\".

        :return: The version of this SkaffoldVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SkaffoldVersion.

        Release version number. For example, \"1.20.3\".

        :param version: The version of this SkaffoldVersion.
        :type version: str
        """

        self._version = version
