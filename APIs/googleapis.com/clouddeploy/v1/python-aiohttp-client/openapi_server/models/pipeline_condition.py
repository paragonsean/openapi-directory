# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_ready_condition import PipelineReadyCondition
from openapi_server.models.targets_present_condition import TargetsPresentCondition
from openapi_server.models.targets_type_condition import TargetsTypeCondition
from openapi_server import util


class PipelineCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_ready_condition: PipelineReadyCondition=None, targets_present_condition: TargetsPresentCondition=None, targets_type_condition: TargetsTypeCondition=None):
        """PipelineCondition - a model defined in OpenAPI

        :param pipeline_ready_condition: The pipeline_ready_condition of this PipelineCondition.
        :param targets_present_condition: The targets_present_condition of this PipelineCondition.
        :param targets_type_condition: The targets_type_condition of this PipelineCondition.
        """
        self.openapi_types = {
            'pipeline_ready_condition': PipelineReadyCondition,
            'targets_present_condition': TargetsPresentCondition,
            'targets_type_condition': TargetsTypeCondition
        }

        self.attribute_map = {
            'pipeline_ready_condition': 'pipelineReadyCondition',
            'targets_present_condition': 'targetsPresentCondition',
            'targets_type_condition': 'targetsTypeCondition'
        }

        self._pipeline_ready_condition = pipeline_ready_condition
        self._targets_present_condition = targets_present_condition
        self._targets_type_condition = targets_type_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineCondition of this PipelineCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_ready_condition(self):
        """Gets the pipeline_ready_condition of this PipelineCondition.


        :return: The pipeline_ready_condition of this PipelineCondition.
        :rtype: PipelineReadyCondition
        """
        return self._pipeline_ready_condition

    @pipeline_ready_condition.setter
    def pipeline_ready_condition(self, pipeline_ready_condition):
        """Sets the pipeline_ready_condition of this PipelineCondition.


        :param pipeline_ready_condition: The pipeline_ready_condition of this PipelineCondition.
        :type pipeline_ready_condition: PipelineReadyCondition
        """

        self._pipeline_ready_condition = pipeline_ready_condition

    @property
    def targets_present_condition(self):
        """Gets the targets_present_condition of this PipelineCondition.


        :return: The targets_present_condition of this PipelineCondition.
        :rtype: TargetsPresentCondition
        """
        return self._targets_present_condition

    @targets_present_condition.setter
    def targets_present_condition(self, targets_present_condition):
        """Sets the targets_present_condition of this PipelineCondition.


        :param targets_present_condition: The targets_present_condition of this PipelineCondition.
        :type targets_present_condition: TargetsPresentCondition
        """

        self._targets_present_condition = targets_present_condition

    @property
    def targets_type_condition(self):
        """Gets the targets_type_condition of this PipelineCondition.


        :return: The targets_type_condition of this PipelineCondition.
        :rtype: TargetsTypeCondition
        """
        return self._targets_type_condition

    @targets_type_condition.setter
    def targets_type_condition(self, targets_type_condition):
        """Sets the targets_type_condition of this PipelineCondition.


        :param targets_type_condition: The targets_type_condition of this PipelineCondition.
        :type targets_type_condition: TargetsTypeCondition
        """

        self._targets_type_condition = targets_type_condition
