# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release_ready_condition import ReleaseReadyCondition
from openapi_server.models.skaffold_supported_condition import SkaffoldSupportedCondition
from openapi_server import util


class ReleaseCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, release_ready_condition: ReleaseReadyCondition=None, skaffold_supported_condition: SkaffoldSupportedCondition=None):
        """ReleaseCondition - a model defined in OpenAPI

        :param release_ready_condition: The release_ready_condition of this ReleaseCondition.
        :param skaffold_supported_condition: The skaffold_supported_condition of this ReleaseCondition.
        """
        self.openapi_types = {
            'release_ready_condition': ReleaseReadyCondition,
            'skaffold_supported_condition': SkaffoldSupportedCondition
        }

        self.attribute_map = {
            'release_ready_condition': 'releaseReadyCondition',
            'skaffold_supported_condition': 'skaffoldSupportedCondition'
        }

        self._release_ready_condition = release_ready_condition
        self._skaffold_supported_condition = skaffold_supported_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseCondition of this ReleaseCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release_ready_condition(self):
        """Gets the release_ready_condition of this ReleaseCondition.


        :return: The release_ready_condition of this ReleaseCondition.
        :rtype: ReleaseReadyCondition
        """
        return self._release_ready_condition

    @release_ready_condition.setter
    def release_ready_condition(self, release_ready_condition):
        """Sets the release_ready_condition of this ReleaseCondition.


        :param release_ready_condition: The release_ready_condition of this ReleaseCondition.
        :type release_ready_condition: ReleaseReadyCondition
        """

        self._release_ready_condition = release_ready_condition

    @property
    def skaffold_supported_condition(self):
        """Gets the skaffold_supported_condition of this ReleaseCondition.


        :return: The skaffold_supported_condition of this ReleaseCondition.
        :rtype: SkaffoldSupportedCondition
        """
        return self._skaffold_supported_condition

    @skaffold_supported_condition.setter
    def skaffold_supported_condition(self, skaffold_supported_condition):
        """Sets the skaffold_supported_condition of this ReleaseCondition.


        :param skaffold_supported_condition: The skaffold_supported_condition of this ReleaseCondition.
        :type skaffold_supported_condition: SkaffoldSupportedCondition
        """

        self._skaffold_supported_condition = skaffold_supported_condition
