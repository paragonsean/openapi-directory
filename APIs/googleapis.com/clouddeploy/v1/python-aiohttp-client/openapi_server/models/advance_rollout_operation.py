# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvanceRolloutOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_phase: str=None, rollout: str=None, source_phase: str=None, wait: str=None):
        """AdvanceRolloutOperation - a model defined in OpenAPI

        :param destination_phase: The destination_phase of this AdvanceRolloutOperation.
        :param rollout: The rollout of this AdvanceRolloutOperation.
        :param source_phase: The source_phase of this AdvanceRolloutOperation.
        :param wait: The wait of this AdvanceRolloutOperation.
        """
        self.openapi_types = {
            'destination_phase': str,
            'rollout': str,
            'source_phase': str,
            'wait': str
        }

        self.attribute_map = {
            'destination_phase': 'destinationPhase',
            'rollout': 'rollout',
            'source_phase': 'sourcePhase',
            'wait': 'wait'
        }

        self._destination_phase = destination_phase
        self._rollout = rollout
        self._source_phase = source_phase
        self._wait = wait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvanceRolloutOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvanceRolloutOperation of this AdvanceRolloutOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_phase(self):
        """Gets the destination_phase of this AdvanceRolloutOperation.

        Output only. The phase the rollout will be advanced to.

        :return: The destination_phase of this AdvanceRolloutOperation.
        :rtype: str
        """
        return self._destination_phase

    @destination_phase.setter
    def destination_phase(self, destination_phase):
        """Sets the destination_phase of this AdvanceRolloutOperation.

        Output only. The phase the rollout will be advanced to.

        :param destination_phase: The destination_phase of this AdvanceRolloutOperation.
        :type destination_phase: str
        """

        self._destination_phase = destination_phase

    @property
    def rollout(self):
        """Gets the rollout of this AdvanceRolloutOperation.

        Output only. The name of the rollout that initiates the `AutomationRun`.

        :return: The rollout of this AdvanceRolloutOperation.
        :rtype: str
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this AdvanceRolloutOperation.

        Output only. The name of the rollout that initiates the `AutomationRun`.

        :param rollout: The rollout of this AdvanceRolloutOperation.
        :type rollout: str
        """

        self._rollout = rollout

    @property
    def source_phase(self):
        """Gets the source_phase of this AdvanceRolloutOperation.

        Output only. The phase of a deployment that initiated the operation.

        :return: The source_phase of this AdvanceRolloutOperation.
        :rtype: str
        """
        return self._source_phase

    @source_phase.setter
    def source_phase(self, source_phase):
        """Sets the source_phase of this AdvanceRolloutOperation.

        Output only. The phase of a deployment that initiated the operation.

        :param source_phase: The source_phase of this AdvanceRolloutOperation.
        :type source_phase: str
        """

        self._source_phase = source_phase

    @property
    def wait(self):
        """Gets the wait of this AdvanceRolloutOperation.

        Output only. How long the operation will be paused.

        :return: The wait of this AdvanceRolloutOperation.
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this AdvanceRolloutOperation.

        Output only. How long the operation will be paused.

        :param wait: The wait of this AdvanceRolloutOperation.
        :type wait: str
        """

        self._wait = wait
