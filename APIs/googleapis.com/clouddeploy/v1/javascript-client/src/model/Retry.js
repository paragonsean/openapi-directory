/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Retry model module.
 * @module model/Retry
 * @version v1
 */
class Retry {
    /**
     * Constructs a new <code>Retry</code>.
     * Retries the failed job.
     * @alias module:model/Retry
     */
    constructor() { 
        
        Retry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Retry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Retry} obj Optional instance to populate.
     * @return {module:model/Retry} The populated <code>Retry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Retry();

            if (data.hasOwnProperty('attempts')) {
                obj['attempts'] = ApiClient.convertToType(data['attempts'], 'String');
            }
            if (data.hasOwnProperty('backoffMode')) {
                obj['backoffMode'] = ApiClient.convertToType(data['backoffMode'], 'String');
            }
            if (data.hasOwnProperty('wait')) {
                obj['wait'] = ApiClient.convertToType(data['wait'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Retry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Retry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attempts'] && !(typeof data['attempts'] === 'string' || data['attempts'] instanceof String)) {
            throw new Error("Expected the field `attempts` to be a primitive type in the JSON string but got " + data['attempts']);
        }
        // ensure the json data is a string
        if (data['backoffMode'] && !(typeof data['backoffMode'] === 'string' || data['backoffMode'] instanceof String)) {
            throw new Error("Expected the field `backoffMode` to be a primitive type in the JSON string but got " + data['backoffMode']);
        }
        // ensure the json data is a string
        if (data['wait'] && !(typeof data['wait'] === 'string' || data['wait'] instanceof String)) {
            throw new Error("Expected the field `wait` to be a primitive type in the JSON string but got " + data['wait']);
        }

        return true;
    }


}



/**
 * Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.
 * @member {String} attempts
 */
Retry.prototype['attempts'] = undefined;

/**
 * Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
 * @member {module:model/Retry.BackoffModeEnum} backoffMode
 */
Retry.prototype['backoffMode'] = undefined;

/**
 * Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
 * @member {String} wait
 */
Retry.prototype['wait'] = undefined;





/**
 * Allowed values for the <code>backoffMode</code> property.
 * @enum {String}
 * @readonly
 */
Retry['BackoffModeEnum'] = {

    /**
     * value: "BACKOFF_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BACKOFF_MODE_UNSPECIFIED",

    /**
     * value: "BACKOFF_MODE_LINEAR"
     * @const
     */
    "LINEAR": "BACKOFF_MODE_LINEAR",

    /**
     * value: "BACKOFF_MODE_EXPONENTIAL"
     * @const
     */
    "EXPONENTIAL": "BACKOFF_MODE_EXPONENTIAL"
};



export default Retry;

