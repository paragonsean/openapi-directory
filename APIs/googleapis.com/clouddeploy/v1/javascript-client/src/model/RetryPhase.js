/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RetryAttempt from './RetryAttempt';

/**
 * The RetryPhase model module.
 * @module model/RetryPhase
 * @version v1
 */
class RetryPhase {
    /**
     * Constructs a new <code>RetryPhase</code>.
     * RetryPhase contains the retry attempts and the metadata for initiating a new attempt.
     * @alias module:model/RetryPhase
     */
    constructor() { 
        
        RetryPhase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetryPhase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetryPhase} obj Optional instance to populate.
     * @return {module:model/RetryPhase} The populated <code>RetryPhase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetryPhase();

            if (data.hasOwnProperty('attempts')) {
                obj['attempts'] = ApiClient.convertToType(data['attempts'], [RetryAttempt]);
            }
            if (data.hasOwnProperty('backoffMode')) {
                obj['backoffMode'] = ApiClient.convertToType(data['backoffMode'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('phaseId')) {
                obj['phaseId'] = ApiClient.convertToType(data['phaseId'], 'String');
            }
            if (data.hasOwnProperty('totalAttempts')) {
                obj['totalAttempts'] = ApiClient.convertToType(data['totalAttempts'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetryPhase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetryPhase</code>.
     */
    static validateJSON(data) {
        if (data['attempts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attempts'])) {
                throw new Error("Expected the field `attempts` to be an array in the JSON data but got " + data['attempts']);
            }
            // validate the optional field `attempts` (array)
            for (const item of data['attempts']) {
                RetryAttempt.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['backoffMode'] && !(typeof data['backoffMode'] === 'string' || data['backoffMode'] instanceof String)) {
            throw new Error("Expected the field `backoffMode` to be a primitive type in the JSON string but got " + data['backoffMode']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['phaseId'] && !(typeof data['phaseId'] === 'string' || data['phaseId'] instanceof String)) {
            throw new Error("Expected the field `phaseId` to be a primitive type in the JSON string but got " + data['phaseId']);
        }
        // ensure the json data is a string
        if (data['totalAttempts'] && !(typeof data['totalAttempts'] === 'string' || data['totalAttempts'] instanceof String)) {
            throw new Error("Expected the field `totalAttempts` to be a primitive type in the JSON string but got " + data['totalAttempts']);
        }

        return true;
    }


}



/**
 * Output only. Detail of a retry action.
 * @member {Array.<module:model/RetryAttempt>} attempts
 */
RetryPhase.prototype['attempts'] = undefined;

/**
 * Output only. The pattern of how the wait time of the retry attempt is calculated.
 * @member {module:model/RetryPhase.BackoffModeEnum} backoffMode
 */
RetryPhase.prototype['backoffMode'] = undefined;

/**
 * Output only. The job ID for the Job to retry.
 * @member {String} jobId
 */
RetryPhase.prototype['jobId'] = undefined;

/**
 * Output only. The phase ID of the phase that includes the job being retried.
 * @member {String} phaseId
 */
RetryPhase.prototype['phaseId'] = undefined;

/**
 * Output only. The number of attempts that have been made.
 * @member {String} totalAttempts
 */
RetryPhase.prototype['totalAttempts'] = undefined;





/**
 * Allowed values for the <code>backoffMode</code> property.
 * @enum {String}
 * @readonly
 */
RetryPhase['BackoffModeEnum'] = {

    /**
     * value: "BACKOFF_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BACKOFF_MODE_UNSPECIFIED",

    /**
     * value: "BACKOFF_MODE_LINEAR"
     * @const
     */
    "LINEAR": "BACKOFF_MODE_LINEAR",

    /**
     * value: "BACKOFF_MODE_EXPONENTIAL"
     * @const
     */
    "EXPONENTIAL": "BACKOFF_MODE_EXPONENTIAL"
};



export default RetryPhase;

