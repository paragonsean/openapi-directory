/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomationRuleCondition from './AutomationRuleCondition';
import RepairMode from './RepairMode';

/**
 * The RepairRolloutRule model module.
 * @module model/RepairRolloutRule
 * @version v1
 */
class RepairRolloutRule {
    /**
     * Constructs a new <code>RepairRolloutRule</code>.
     * The &#x60;RepairRolloutRule&#x60; automation rule will automatically repair a failed &#x60;Rollout&#x60;.
     * @alias module:model/RepairRolloutRule
     */
    constructor() { 
        
        RepairRolloutRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepairRolloutRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepairRolloutRule} obj Optional instance to populate.
     * @return {module:model/RepairRolloutRule} The populated <code>RepairRolloutRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepairRolloutRule();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = AutomationRuleCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jobs')) {
                obj['jobs'] = ApiClient.convertToType(data['jobs'], ['String']);
            }
            if (data.hasOwnProperty('repairModes')) {
                obj['repairModes'] = ApiClient.convertToType(data['repairModes'], [RepairMode]);
            }
            if (data.hasOwnProperty('sourcePhases')) {
                obj['sourcePhases'] = ApiClient.convertToType(data['sourcePhases'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepairRolloutRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepairRolloutRule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          AutomationRuleCondition.validateJSON(data['condition']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jobs'])) {
            throw new Error("Expected the field `jobs` to be an array in the JSON data but got " + data['jobs']);
        }
        if (data['repairModes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['repairModes'])) {
                throw new Error("Expected the field `repairModes` to be an array in the JSON data but got " + data['repairModes']);
            }
            // validate the optional field `repairModes` (array)
            for (const item of data['repairModes']) {
                RepairMode.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sourcePhases'])) {
            throw new Error("Expected the field `sourcePhases` to be an array in the JSON data but got " + data['sourcePhases']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutomationRuleCondition} condition
 */
RepairRolloutRule.prototype['condition'] = undefined;

/**
 * Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
 * @member {String} id
 */
RepairRolloutRule.prototype['id'] = undefined;

/**
 * Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 * @member {Array.<String>} jobs
 */
RepairRolloutRule.prototype['jobs'] = undefined;

/**
 * Required. Defines the types of automatic repair actions for failed jobs.
 * @member {Array.<module:model/RepairMode>} repairModes
 */
RepairRolloutRule.prototype['repairModes'] = undefined;

/**
 * Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 * @member {Array.<String>} sourcePhases
 */
RepairRolloutRule.prototype['sourcePhases'] = undefined;






export default RepairRolloutRule;

