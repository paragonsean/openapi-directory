/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Stage from './Stage';

/**
 * The SerialPipeline model module.
 * @module model/SerialPipeline
 * @version v1
 */
class SerialPipeline {
    /**
     * Constructs a new <code>SerialPipeline</code>.
     * SerialPipeline defines a sequential set of stages for a &#x60;DeliveryPipeline&#x60;.
     * @alias module:model/SerialPipeline
     */
    constructor() { 
        
        SerialPipeline.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SerialPipeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SerialPipeline} obj Optional instance to populate.
     * @return {module:model/SerialPipeline} The populated <code>SerialPipeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SerialPipeline();

            if (data.hasOwnProperty('stages')) {
                obj['stages'] = ApiClient.convertToType(data['stages'], [Stage]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SerialPipeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SerialPipeline</code>.
     */
    static validateJSON(data) {
        if (data['stages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stages'])) {
                throw new Error("Expected the field `stages` to be an array in the JSON data but got " + data['stages']);
            }
            // validate the optional field `stages` (array)
            for (const item of data['stages']) {
                Stage.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
 * @member {Array.<module:model/Stage>} stages
 */
SerialPipeline.prototype['stages'] = undefined;






export default SerialPipeline;

