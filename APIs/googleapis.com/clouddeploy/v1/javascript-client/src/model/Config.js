/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkaffoldVersion from './SkaffoldVersion';

/**
 * The Config model module.
 * @module model/Config
 * @version v1
 */
class Config {
    /**
     * Constructs a new <code>Config</code>.
     * Service-wide configuration.
     * @alias module:model/Config
     */
    constructor() { 
        
        Config.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Config} obj Optional instance to populate.
     * @return {module:model/Config} The populated <code>Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Config();

            if (data.hasOwnProperty('defaultSkaffoldVersion')) {
                obj['defaultSkaffoldVersion'] = ApiClient.convertToType(data['defaultSkaffoldVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('supportedVersions')) {
                obj['supportedVersions'] = ApiClient.convertToType(data['supportedVersions'], [SkaffoldVersion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Config</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultSkaffoldVersion'] && !(typeof data['defaultSkaffoldVersion'] === 'string' || data['defaultSkaffoldVersion'] instanceof String)) {
            throw new Error("Expected the field `defaultSkaffoldVersion` to be a primitive type in the JSON string but got " + data['defaultSkaffoldVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['supportedVersions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedVersions'])) {
                throw new Error("Expected the field `supportedVersions` to be an array in the JSON data but got " + data['supportedVersions']);
            }
            // validate the optional field `supportedVersions` (array)
            for (const item of data['supportedVersions']) {
                SkaffoldVersion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Default Skaffold version that is assigned when a Release is created without specifying a Skaffold version.
 * @member {String} defaultSkaffoldVersion
 */
Config.prototype['defaultSkaffoldVersion'] = undefined;

/**
 * Name of the configuration.
 * @member {String} name
 */
Config.prototype['name'] = undefined;

/**
 * All supported versions of Skaffold.
 * @member {Array.<module:model/SkaffoldVersion>} supportedVersions
 */
Config.prototype['supportedVersions'] = undefined;






export default Config;

