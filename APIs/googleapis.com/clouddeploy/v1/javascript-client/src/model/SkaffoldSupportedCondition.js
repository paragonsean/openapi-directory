/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SkaffoldSupportedCondition model module.
 * @module model/SkaffoldSupportedCondition
 * @version v1
 */
class SkaffoldSupportedCondition {
    /**
     * Constructs a new <code>SkaffoldSupportedCondition</code>.
     * SkaffoldSupportedCondition contains information about when support for the release&#39;s version of Skaffold ends.
     * @alias module:model/SkaffoldSupportedCondition
     */
    constructor() { 
        
        SkaffoldSupportedCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SkaffoldSupportedCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkaffoldSupportedCondition} obj Optional instance to populate.
     * @return {module:model/SkaffoldSupportedCondition} The populated <code>SkaffoldSupportedCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkaffoldSupportedCondition();

            if (data.hasOwnProperty('maintenanceModeTime')) {
                obj['maintenanceModeTime'] = ApiClient.convertToType(data['maintenanceModeTime'], 'String');
            }
            if (data.hasOwnProperty('skaffoldSupportState')) {
                obj['skaffoldSupportState'] = ApiClient.convertToType(data['skaffoldSupportState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Boolean');
            }
            if (data.hasOwnProperty('supportExpirationTime')) {
                obj['supportExpirationTime'] = ApiClient.convertToType(data['supportExpirationTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkaffoldSupportedCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkaffoldSupportedCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maintenanceModeTime'] && !(typeof data['maintenanceModeTime'] === 'string' || data['maintenanceModeTime'] instanceof String)) {
            throw new Error("Expected the field `maintenanceModeTime` to be a primitive type in the JSON string but got " + data['maintenanceModeTime']);
        }
        // ensure the json data is a string
        if (data['skaffoldSupportState'] && !(typeof data['skaffoldSupportState'] === 'string' || data['skaffoldSupportState'] instanceof String)) {
            throw new Error("Expected the field `skaffoldSupportState` to be a primitive type in the JSON string but got " + data['skaffoldSupportState']);
        }
        // ensure the json data is a string
        if (data['supportExpirationTime'] && !(typeof data['supportExpirationTime'] === 'string' || data['supportExpirationTime'] instanceof String)) {
            throw new Error("Expected the field `supportExpirationTime` to be a primitive type in the JSON string but got " + data['supportExpirationTime']);
        }

        return true;
    }


}



/**
 * The time at which this release's version of Skaffold will enter maintenance mode.
 * @member {String} maintenanceModeTime
 */
SkaffoldSupportedCondition.prototype['maintenanceModeTime'] = undefined;

/**
 * The Skaffold support state for this release's version of Skaffold.
 * @member {module:model/SkaffoldSupportedCondition.SkaffoldSupportStateEnum} skaffoldSupportState
 */
SkaffoldSupportedCondition.prototype['skaffoldSupportState'] = undefined;

/**
 * True if the version of Skaffold used by this release is supported.
 * @member {Boolean} status
 */
SkaffoldSupportedCondition.prototype['status'] = undefined;

/**
 * The time at which this release's version of Skaffold will no longer be supported.
 * @member {String} supportExpirationTime
 */
SkaffoldSupportedCondition.prototype['supportExpirationTime'] = undefined;





/**
 * Allowed values for the <code>skaffoldSupportState</code> property.
 * @enum {String}
 * @readonly
 */
SkaffoldSupportedCondition['SkaffoldSupportStateEnum'] = {

    /**
     * value: "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED",

    /**
     * value: "SKAFFOLD_SUPPORT_STATE_SUPPORTED"
     * @const
     */
    "SUPPORTED": "SKAFFOLD_SUPPORT_STATE_SUPPORTED",

    /**
     * value: "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE"
     * @const
     */
    "MAINTENANCE_MODE": "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE",

    /**
     * value: "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED"
     * @const
     */
    "UNSUPPORTED": "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED"
};



export default SkaffoldSupportedCondition;

