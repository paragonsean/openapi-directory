/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PhaseArtifact model module.
 * @module model/PhaseArtifact
 * @version v1
 */
class PhaseArtifact {
    /**
     * Constructs a new <code>PhaseArtifact</code>.
     * Contains the paths to the artifacts, relative to the URI, for a phase.
     * @alias module:model/PhaseArtifact
     */
    constructor() { 
        
        PhaseArtifact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PhaseArtifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhaseArtifact} obj Optional instance to populate.
     * @return {module:model/PhaseArtifact} The populated <code>PhaseArtifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhaseArtifact();

            if (data.hasOwnProperty('jobManifestsPath')) {
                obj['jobManifestsPath'] = ApiClient.convertToType(data['jobManifestsPath'], 'String');
            }
            if (data.hasOwnProperty('manifestPath')) {
                obj['manifestPath'] = ApiClient.convertToType(data['manifestPath'], 'String');
            }
            if (data.hasOwnProperty('skaffoldConfigPath')) {
                obj['skaffoldConfigPath'] = ApiClient.convertToType(data['skaffoldConfigPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhaseArtifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhaseArtifact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['jobManifestsPath'] && !(typeof data['jobManifestsPath'] === 'string' || data['jobManifestsPath'] instanceof String)) {
            throw new Error("Expected the field `jobManifestsPath` to be a primitive type in the JSON string but got " + data['jobManifestsPath']);
        }
        // ensure the json data is a string
        if (data['manifestPath'] && !(typeof data['manifestPath'] === 'string' || data['manifestPath'] instanceof String)) {
            throw new Error("Expected the field `manifestPath` to be a primitive type in the JSON string but got " + data['manifestPath']);
        }
        // ensure the json data is a string
        if (data['skaffoldConfigPath'] && !(typeof data['skaffoldConfigPath'] === 'string' || data['skaffoldConfigPath'] instanceof String)) {
            throw new Error("Expected the field `skaffoldConfigPath` to be a primitive type in the JSON string but got " + data['skaffoldConfigPath']);
        }

        return true;
    }


}



/**
 * Output only. File path of the directory of rendered job manifests relative to the URI. This is only set if it is applicable.
 * @member {String} jobManifestsPath
 */
PhaseArtifact.prototype['jobManifestsPath'] = undefined;

/**
 * Output only. File path of the rendered manifest relative to the URI.
 * @member {String} manifestPath
 */
PhaseArtifact.prototype['manifestPath'] = undefined;

/**
 * Output only. File path of the resolved Skaffold configuration relative to the URI.
 * @member {String} skaffoldConfigPath
 */
PhaseArtifact.prototype['skaffoldConfigPath'] = undefined;






export default PhaseArtifact;

