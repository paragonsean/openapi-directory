/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildArtifact from './BuildArtifact';
import CustomTargetType from './CustomTargetType';
import DeliveryPipeline from './DeliveryPipeline';
import ReleaseCondition from './ReleaseCondition';
import Target from './Target';
import TargetArtifact from './TargetArtifact';
import TargetRender from './TargetRender';

/**
 * The Release model module.
 * @module model/Release
 * @version v1
 */
class Release {
    /**
     * Constructs a new <code>Release</code>.
     * A &#x60;Release&#x60; resource in the Cloud Deploy API. A &#x60;Release&#x60; defines a specific Skaffold configuration instance that can be deployed.
     * @alias module:model/Release
     */
    constructor() { 
        
        Release.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Release</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Release} obj Optional instance to populate.
     * @return {module:model/Release} The populated <code>Release</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Release();

            if (data.hasOwnProperty('abandoned')) {
                obj['abandoned'] = ApiClient.convertToType(data['abandoned'], 'Boolean');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('buildArtifacts')) {
                obj['buildArtifacts'] = ApiClient.convertToType(data['buildArtifacts'], [BuildArtifact]);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ReleaseCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customTargetTypeSnapshots')) {
                obj['customTargetTypeSnapshots'] = ApiClient.convertToType(data['customTargetTypeSnapshots'], [CustomTargetType]);
            }
            if (data.hasOwnProperty('deliveryPipelineSnapshot')) {
                obj['deliveryPipelineSnapshot'] = DeliveryPipeline.constructFromObject(data['deliveryPipelineSnapshot']);
            }
            if (data.hasOwnProperty('deployParameters')) {
                obj['deployParameters'] = ApiClient.convertToType(data['deployParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('renderEndTime')) {
                obj['renderEndTime'] = ApiClient.convertToType(data['renderEndTime'], 'String');
            }
            if (data.hasOwnProperty('renderStartTime')) {
                obj['renderStartTime'] = ApiClient.convertToType(data['renderStartTime'], 'String');
            }
            if (data.hasOwnProperty('renderState')) {
                obj['renderState'] = ApiClient.convertToType(data['renderState'], 'String');
            }
            if (data.hasOwnProperty('skaffoldConfigPath')) {
                obj['skaffoldConfigPath'] = ApiClient.convertToType(data['skaffoldConfigPath'], 'String');
            }
            if (data.hasOwnProperty('skaffoldConfigUri')) {
                obj['skaffoldConfigUri'] = ApiClient.convertToType(data['skaffoldConfigUri'], 'String');
            }
            if (data.hasOwnProperty('skaffoldVersion')) {
                obj['skaffoldVersion'] = ApiClient.convertToType(data['skaffoldVersion'], 'String');
            }
            if (data.hasOwnProperty('targetArtifacts')) {
                obj['targetArtifacts'] = ApiClient.convertToType(data['targetArtifacts'], {'String': TargetArtifact});
            }
            if (data.hasOwnProperty('targetRenders')) {
                obj['targetRenders'] = ApiClient.convertToType(data['targetRenders'], {'String': TargetRender});
            }
            if (data.hasOwnProperty('targetSnapshots')) {
                obj['targetSnapshots'] = ApiClient.convertToType(data['targetSnapshots'], [Target]);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Release</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Release</code>.
     */
    static validateJSON(data) {
        if (data['buildArtifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buildArtifacts'])) {
                throw new Error("Expected the field `buildArtifacts` to be an array in the JSON data but got " + data['buildArtifacts']);
            }
            // validate the optional field `buildArtifacts` (array)
            for (const item of data['buildArtifacts']) {
                BuildArtifact.validateJSON(item);
            };
        }
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          ReleaseCondition.validateJSON(data['condition']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        if (data['customTargetTypeSnapshots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customTargetTypeSnapshots'])) {
                throw new Error("Expected the field `customTargetTypeSnapshots` to be an array in the JSON data but got " + data['customTargetTypeSnapshots']);
            }
            // validate the optional field `customTargetTypeSnapshots` (array)
            for (const item of data['customTargetTypeSnapshots']) {
                CustomTargetType.validateJSON(item);
            };
        }
        // validate the optional field `deliveryPipelineSnapshot`
        if (data['deliveryPipelineSnapshot']) { // data not null
          DeliveryPipeline.validateJSON(data['deliveryPipelineSnapshot']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['renderEndTime'] && !(typeof data['renderEndTime'] === 'string' || data['renderEndTime'] instanceof String)) {
            throw new Error("Expected the field `renderEndTime` to be a primitive type in the JSON string but got " + data['renderEndTime']);
        }
        // ensure the json data is a string
        if (data['renderStartTime'] && !(typeof data['renderStartTime'] === 'string' || data['renderStartTime'] instanceof String)) {
            throw new Error("Expected the field `renderStartTime` to be a primitive type in the JSON string but got " + data['renderStartTime']);
        }
        // ensure the json data is a string
        if (data['renderState'] && !(typeof data['renderState'] === 'string' || data['renderState'] instanceof String)) {
            throw new Error("Expected the field `renderState` to be a primitive type in the JSON string but got " + data['renderState']);
        }
        // ensure the json data is a string
        if (data['skaffoldConfigPath'] && !(typeof data['skaffoldConfigPath'] === 'string' || data['skaffoldConfigPath'] instanceof String)) {
            throw new Error("Expected the field `skaffoldConfigPath` to be a primitive type in the JSON string but got " + data['skaffoldConfigPath']);
        }
        // ensure the json data is a string
        if (data['skaffoldConfigUri'] && !(typeof data['skaffoldConfigUri'] === 'string' || data['skaffoldConfigUri'] instanceof String)) {
            throw new Error("Expected the field `skaffoldConfigUri` to be a primitive type in the JSON string but got " + data['skaffoldConfigUri']);
        }
        // ensure the json data is a string
        if (data['skaffoldVersion'] && !(typeof data['skaffoldVersion'] === 'string' || data['skaffoldVersion'] instanceof String)) {
            throw new Error("Expected the field `skaffoldVersion` to be a primitive type in the JSON string but got " + data['skaffoldVersion']);
        }
        if (data['targetSnapshots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targetSnapshots'])) {
                throw new Error("Expected the field `targetSnapshots` to be an array in the JSON data but got " + data['targetSnapshots']);
            }
            // validate the optional field `targetSnapshots` (array)
            for (const item of data['targetSnapshots']) {
                Target.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Output only. Indicates whether this is an abandoned release.
 * @member {Boolean} abandoned
 */
Release.prototype['abandoned'] = undefined;

/**
 * User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
 * @member {Object.<String, String>} annotations
 */
Release.prototype['annotations'] = undefined;

/**
 * List of artifacts to pass through to Skaffold command.
 * @member {Array.<module:model/BuildArtifact>} buildArtifacts
 */
Release.prototype['buildArtifacts'] = undefined;

/**
 * @member {module:model/ReleaseCondition} condition
 */
Release.prototype['condition'] = undefined;

/**
 * Output only. Time at which the `Release` was created.
 * @member {String} createTime
 */
Release.prototype['createTime'] = undefined;

/**
 * Output only. Snapshot of the custom target types referenced by the targets taken at release creation time.
 * @member {Array.<module:model/CustomTargetType>} customTargetTypeSnapshots
 */
Release.prototype['customTargetTypeSnapshots'] = undefined;

/**
 * @member {module:model/DeliveryPipeline} deliveryPipelineSnapshot
 */
Release.prototype['deliveryPipelineSnapshot'] = undefined;

/**
 * Optional. The deploy parameters to use for all targets in this release.
 * @member {Object.<String, String>} deployParameters
 */
Release.prototype['deployParameters'] = undefined;

/**
 * Description of the `Release`. Max length is 255 characters.
 * @member {String} description
 */
Release.prototype['description'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
Release.prototype['etag'] = undefined;

/**
 * Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
 * @member {Object.<String, String>} labels
 */
Release.prototype['labels'] = undefined;

/**
 * Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
 * @member {String} name
 */
Release.prototype['name'] = undefined;

/**
 * Output only. Time at which the render completed.
 * @member {String} renderEndTime
 */
Release.prototype['renderEndTime'] = undefined;

/**
 * Output only. Time at which the render began.
 * @member {String} renderStartTime
 */
Release.prototype['renderStartTime'] = undefined;

/**
 * Output only. Current state of the render operation.
 * @member {module:model/Release.RenderStateEnum} renderState
 */
Release.prototype['renderState'] = undefined;

/**
 * Filepath of the Skaffold config inside of the config URI.
 * @member {String} skaffoldConfigPath
 */
Release.prototype['skaffoldConfigPath'] = undefined;

/**
 * Cloud Storage URI of tar.gz archive containing Skaffold configuration.
 * @member {String} skaffoldConfigUri
 */
Release.prototype['skaffoldConfigUri'] = undefined;

/**
 * The Skaffold version to use when operating on this release, such as \"1.20.0\". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
 * @member {String} skaffoldVersion
 */
Release.prototype['skaffoldVersion'] = undefined;

/**
 * Output only. Map from target ID to the target artifacts created during the render operation.
 * @member {Object.<String, module:model/TargetArtifact>} targetArtifacts
 */
Release.prototype['targetArtifacts'] = undefined;

/**
 * Output only. Map from target ID to details of the render operation for that target.
 * @member {Object.<String, module:model/TargetRender>} targetRenders
 */
Release.prototype['targetRenders'] = undefined;

/**
 * Output only. Snapshot of the targets taken at release creation time.
 * @member {Array.<module:model/Target>} targetSnapshots
 */
Release.prototype['targetSnapshots'] = undefined;

/**
 * Output only. Unique identifier of the `Release`.
 * @member {String} uid
 */
Release.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>renderState</code> property.
 * @enum {String}
 * @readonly
 */
Release['RenderStateEnum'] = {

    /**
     * value: "RENDER_STATE_UNSPECIFIED"
     * @const
     */
    "RENDER_STATE_UNSPECIFIED": "RENDER_STATE_UNSPECIFIED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS"
};



export default Release;

