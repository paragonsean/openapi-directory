/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnthosCluster from './AnthosCluster';
import CloudRunLocation from './CloudRunLocation';
import CustomTarget from './CustomTarget';
import ExecutionConfig from './ExecutionConfig';
import GkeCluster from './GkeCluster';
import MultiTarget from './MultiTarget';

/**
 * The Target model module.
 * @module model/Target
 * @version v1
 */
class Target {
    /**
     * Constructs a new <code>Target</code>.
     * A &#x60;Target&#x60; resource in the Cloud Deploy API. A &#x60;Target&#x60; defines a location to which a Skaffold configuration can be deployed.
     * @alias module:model/Target
     */
    constructor() { 
        
        Target.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Target</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Target} obj Optional instance to populate.
     * @return {module:model/Target} The populated <code>Target</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Target();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('anthosCluster')) {
                obj['anthosCluster'] = AnthosCluster.constructFromObject(data['anthosCluster']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customTarget')) {
                obj['customTarget'] = CustomTarget.constructFromObject(data['customTarget']);
            }
            if (data.hasOwnProperty('deployParameters')) {
                obj['deployParameters'] = ApiClient.convertToType(data['deployParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('executionConfigs')) {
                obj['executionConfigs'] = ApiClient.convertToType(data['executionConfigs'], [ExecutionConfig]);
            }
            if (data.hasOwnProperty('gke')) {
                obj['gke'] = GkeCluster.constructFromObject(data['gke']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('multiTarget')) {
                obj['multiTarget'] = MultiTarget.constructFromObject(data['multiTarget']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requireApproval')) {
                obj['requireApproval'] = ApiClient.convertToType(data['requireApproval'], 'Boolean');
            }
            if (data.hasOwnProperty('run')) {
                obj['run'] = CloudRunLocation.constructFromObject(data['run']);
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Target</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Target</code>.
     */
    static validateJSON(data) {
        // validate the optional field `anthosCluster`
        if (data['anthosCluster']) { // data not null
          AnthosCluster.validateJSON(data['anthosCluster']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `customTarget`
        if (data['customTarget']) { // data not null
          CustomTarget.validateJSON(data['customTarget']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['executionConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['executionConfigs'])) {
                throw new Error("Expected the field `executionConfigs` to be an array in the JSON data but got " + data['executionConfigs']);
            }
            // validate the optional field `executionConfigs` (array)
            for (const item of data['executionConfigs']) {
                ExecutionConfig.validateJSON(item);
            };
        }
        // validate the optional field `gke`
        if (data['gke']) { // data not null
          GkeCluster.validateJSON(data['gke']);
        }
        // validate the optional field `multiTarget`
        if (data['multiTarget']) { // data not null
          MultiTarget.validateJSON(data['multiTarget']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `run`
        if (data['run']) { // data not null
          CloudRunLocation.validateJSON(data['run']);
        }
        // ensure the json data is a string
        if (data['targetId'] && !(typeof data['targetId'] === 'string' || data['targetId'] instanceof String)) {
            throw new Error("Expected the field `targetId` to be a primitive type in the JSON string but got " + data['targetId']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
 * @member {Object.<String, String>} annotations
 */
Target.prototype['annotations'] = undefined;

/**
 * @member {module:model/AnthosCluster} anthosCluster
 */
Target.prototype['anthosCluster'] = undefined;

/**
 * Output only. Time at which the `Target` was created.
 * @member {String} createTime
 */
Target.prototype['createTime'] = undefined;

/**
 * @member {module:model/CustomTarget} customTarget
 */
Target.prototype['customTarget'] = undefined;

/**
 * Optional. The deploy parameters to use for this target.
 * @member {Object.<String, String>} deployParameters
 */
Target.prototype['deployParameters'] = undefined;

/**
 * Optional. Description of the `Target`. Max length is 255 characters.
 * @member {String} description
 */
Target.prototype['description'] = undefined;

/**
 * Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
Target.prototype['etag'] = undefined;

/**
 * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
 * @member {Array.<module:model/ExecutionConfig>} executionConfigs
 */
Target.prototype['executionConfigs'] = undefined;

/**
 * @member {module:model/GkeCluster} gke
 */
Target.prototype['gke'] = undefined;

/**
 * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
 * @member {Object.<String, String>} labels
 */
Target.prototype['labels'] = undefined;

/**
 * @member {module:model/MultiTarget} multiTarget
 */
Target.prototype['multiTarget'] = undefined;

/**
 * Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.
 * @member {String} name
 */
Target.prototype['name'] = undefined;

/**
 * Optional. Whether or not the `Target` requires approval.
 * @member {Boolean} requireApproval
 */
Target.prototype['requireApproval'] = undefined;

/**
 * @member {module:model/CloudRunLocation} run
 */
Target.prototype['run'] = undefined;

/**
 * Output only. Resource id of the `Target`.
 * @member {String} targetId
 */
Target.prototype['targetId'] = undefined;

/**
 * Output only. Unique identifier of the `Target`.
 * @member {String} uid
 */
Target.prototype['uid'] = undefined;

/**
 * Output only. Most recent time at which the `Target` was updated.
 * @member {String} updateTime
 */
Target.prototype['updateTime'] = undefined;






export default Target;

