/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetryAttempt model module.
 * @module model/RetryAttempt
 * @version v1
 */
class RetryAttempt {
    /**
     * Constructs a new <code>RetryAttempt</code>.
     * RetryAttempt represents an action of retrying the failed Cloud Deploy job.
     * @alias module:model/RetryAttempt
     */
    constructor() { 
        
        RetryAttempt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetryAttempt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetryAttempt} obj Optional instance to populate.
     * @return {module:model/RetryAttempt} The populated <code>RetryAttempt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetryAttempt();

            if (data.hasOwnProperty('attempt')) {
                obj['attempt'] = ApiClient.convertToType(data['attempt'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateDesc')) {
                obj['stateDesc'] = ApiClient.convertToType(data['stateDesc'], 'String');
            }
            if (data.hasOwnProperty('wait')) {
                obj['wait'] = ApiClient.convertToType(data['wait'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetryAttempt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetryAttempt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attempt'] && !(typeof data['attempt'] === 'string' || data['attempt'] instanceof String)) {
            throw new Error("Expected the field `attempt` to be a primitive type in the JSON string but got " + data['attempt']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateDesc'] && !(typeof data['stateDesc'] === 'string' || data['stateDesc'] instanceof String)) {
            throw new Error("Expected the field `stateDesc` to be a primitive type in the JSON string but got " + data['stateDesc']);
        }
        // ensure the json data is a string
        if (data['wait'] && !(typeof data['wait'] === 'string' || data['wait'] instanceof String)) {
            throw new Error("Expected the field `wait` to be a primitive type in the JSON string but got " + data['wait']);
        }

        return true;
    }


}



/**
 * Output only. The index of this retry attempt.
 * @member {String} attempt
 */
RetryAttempt.prototype['attempt'] = undefined;

/**
 * Output only. Valid state of this retry action.
 * @member {module:model/RetryAttempt.StateEnum} state
 */
RetryAttempt.prototype['state'] = undefined;

/**
 * Output only. Description of the state of the Retry.
 * @member {String} stateDesc
 */
RetryAttempt.prototype['stateDesc'] = undefined;

/**
 * Output only. How long the operation will be paused.
 * @member {String} wait
 */
RetryAttempt.prototype['wait'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RetryAttempt['StateEnum'] = {

    /**
     * value: "REPAIR_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "REPAIR_STATE_UNSPECIFIED",

    /**
     * value: "REPAIR_STATE_SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "REPAIR_STATE_SUCCEEDED",

    /**
     * value: "REPAIR_STATE_CANCELLED"
     * @const
     */
    "CANCELLED": "REPAIR_STATE_CANCELLED",

    /**
     * value: "REPAIR_STATE_FAILED"
     * @const
     */
    "FAILED": "REPAIR_STATE_FAILED",

    /**
     * value: "REPAIR_STATE_IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "REPAIR_STATE_IN_PROGRESS",

    /**
     * value: "REPAIR_STATE_PENDING"
     * @const
     */
    "PENDING": "REPAIR_STATE_PENDING",

    /**
     * value: "REPAIR_STATE_SKIPPED"
     * @const
     */
    "SKIPPED": "REPAIR_STATE_SKIPPED",

    /**
     * value: "REPAIR_STATE_ABORTED"
     * @const
     */
    "ABORTED": "REPAIR_STATE_ABORTED"
};



export default RetryAttempt;

