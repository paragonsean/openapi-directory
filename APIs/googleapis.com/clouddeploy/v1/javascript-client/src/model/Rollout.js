/**
 * Cloud Deploy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import Phase from './Phase';

/**
 * The Rollout model module.
 * @module model/Rollout
 * @version v1
 */
class Rollout {
    /**
     * Constructs a new <code>Rollout</code>.
     * A &#x60;Rollout&#x60; resource in the Cloud Deploy API. A &#x60;Rollout&#x60; contains information around a specific deployment to a &#x60;Target&#x60;.
     * @alias module:model/Rollout
     */
    constructor() { 
        
        Rollout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rollout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rollout} obj Optional instance to populate.
     * @return {module:model/Rollout} The populated <code>Rollout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rollout();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('approvalState')) {
                obj['approvalState'] = ApiClient.convertToType(data['approvalState'], 'String');
            }
            if (data.hasOwnProperty('approveTime')) {
                obj['approveTime'] = ApiClient.convertToType(data['approveTime'], 'String');
            }
            if (data.hasOwnProperty('controllerRollout')) {
                obj['controllerRollout'] = ApiClient.convertToType(data['controllerRollout'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployEndTime')) {
                obj['deployEndTime'] = ApiClient.convertToType(data['deployEndTime'], 'String');
            }
            if (data.hasOwnProperty('deployFailureCause')) {
                obj['deployFailureCause'] = ApiClient.convertToType(data['deployFailureCause'], 'String');
            }
            if (data.hasOwnProperty('deployStartTime')) {
                obj['deployStartTime'] = ApiClient.convertToType(data['deployStartTime'], 'String');
            }
            if (data.hasOwnProperty('deployingBuild')) {
                obj['deployingBuild'] = ApiClient.convertToType(data['deployingBuild'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enqueueTime')) {
                obj['enqueueTime'] = ApiClient.convertToType(data['enqueueTime'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phases')) {
                obj['phases'] = ApiClient.convertToType(data['phases'], [Phase]);
            }
            if (data.hasOwnProperty('rollbackOfRollout')) {
                obj['rollbackOfRollout'] = ApiClient.convertToType(data['rollbackOfRollout'], 'String');
            }
            if (data.hasOwnProperty('rolledBackByRollouts')) {
                obj['rolledBackByRollouts'] = ApiClient.convertToType(data['rolledBackByRollouts'], ['String']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rollout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rollout</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['approvalState'] && !(typeof data['approvalState'] === 'string' || data['approvalState'] instanceof String)) {
            throw new Error("Expected the field `approvalState` to be a primitive type in the JSON string but got " + data['approvalState']);
        }
        // ensure the json data is a string
        if (data['approveTime'] && !(typeof data['approveTime'] === 'string' || data['approveTime'] instanceof String)) {
            throw new Error("Expected the field `approveTime` to be a primitive type in the JSON string but got " + data['approveTime']);
        }
        // ensure the json data is a string
        if (data['controllerRollout'] && !(typeof data['controllerRollout'] === 'string' || data['controllerRollout'] instanceof String)) {
            throw new Error("Expected the field `controllerRollout` to be a primitive type in the JSON string but got " + data['controllerRollout']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deployEndTime'] && !(typeof data['deployEndTime'] === 'string' || data['deployEndTime'] instanceof String)) {
            throw new Error("Expected the field `deployEndTime` to be a primitive type in the JSON string but got " + data['deployEndTime']);
        }
        // ensure the json data is a string
        if (data['deployFailureCause'] && !(typeof data['deployFailureCause'] === 'string' || data['deployFailureCause'] instanceof String)) {
            throw new Error("Expected the field `deployFailureCause` to be a primitive type in the JSON string but got " + data['deployFailureCause']);
        }
        // ensure the json data is a string
        if (data['deployStartTime'] && !(typeof data['deployStartTime'] === 'string' || data['deployStartTime'] instanceof String)) {
            throw new Error("Expected the field `deployStartTime` to be a primitive type in the JSON string but got " + data['deployStartTime']);
        }
        // ensure the json data is a string
        if (data['deployingBuild'] && !(typeof data['deployingBuild'] === 'string' || data['deployingBuild'] instanceof String)) {
            throw new Error("Expected the field `deployingBuild` to be a primitive type in the JSON string but got " + data['deployingBuild']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enqueueTime'] && !(typeof data['enqueueTime'] === 'string' || data['enqueueTime'] instanceof String)) {
            throw new Error("Expected the field `enqueueTime` to be a primitive type in the JSON string but got " + data['enqueueTime']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['phases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phases'])) {
                throw new Error("Expected the field `phases` to be an array in the JSON data but got " + data['phases']);
            }
            // validate the optional field `phases` (array)
            for (const item of data['phases']) {
                Phase.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rollbackOfRollout'] && !(typeof data['rollbackOfRollout'] === 'string' || data['rollbackOfRollout'] instanceof String)) {
            throw new Error("Expected the field `rollbackOfRollout` to be a primitive type in the JSON string but got " + data['rollbackOfRollout']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rolledBackByRollouts'])) {
            throw new Error("Expected the field `rolledBackByRollouts` to be an array in the JSON data but got " + data['rolledBackByRollouts']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['targetId'] && !(typeof data['targetId'] === 'string' || data['targetId'] instanceof String)) {
            throw new Error("Expected the field `targetId` to be a primitive type in the JSON string but got " + data['targetId']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
 * @member {Object.<String, String>} annotations
 */
Rollout.prototype['annotations'] = undefined;

/**
 * Output only. Approval state of the `Rollout`.
 * @member {module:model/Rollout.ApprovalStateEnum} approvalState
 */
Rollout.prototype['approvalState'] = undefined;

/**
 * Output only. Time at which the `Rollout` was approved.
 * @member {String} approveTime
 */
Rollout.prototype['approveTime'] = undefined;

/**
 * Output only. Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 * @member {String} controllerRollout
 */
Rollout.prototype['controllerRollout'] = undefined;

/**
 * Output only. Time at which the `Rollout` was created.
 * @member {String} createTime
 */
Rollout.prototype['createTime'] = undefined;

/**
 * Output only. Time at which the `Rollout` finished deploying.
 * @member {String} deployEndTime
 */
Rollout.prototype['deployEndTime'] = undefined;

/**
 * Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.
 * @member {module:model/Rollout.DeployFailureCauseEnum} deployFailureCause
 */
Rollout.prototype['deployFailureCause'] = undefined;

/**
 * Output only. Time at which the `Rollout` started deploying.
 * @member {String} deployStartTime
 */
Rollout.prototype['deployStartTime'] = undefined;

/**
 * Output only. The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
 * @member {String} deployingBuild
 */
Rollout.prototype['deployingBuild'] = undefined;

/**
 * Description of the `Rollout` for user purposes. Max length is 255 characters.
 * @member {String} description
 */
Rollout.prototype['description'] = undefined;

/**
 * Output only. Time at which the `Rollout` was enqueued.
 * @member {String} enqueueTime
 */
Rollout.prototype['enqueueTime'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
Rollout.prototype['etag'] = undefined;

/**
 * Output only. Additional information about the rollout failure, if available.
 * @member {String} failureReason
 */
Rollout.prototype['failureReason'] = undefined;

/**
 * Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
 * @member {Object.<String, String>} labels
 */
Rollout.prototype['labels'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
Rollout.prototype['metadata'] = undefined;

/**
 * Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 * @member {String} name
 */
Rollout.prototype['name'] = undefined;

/**
 * Output only. The phases that represent the workflows of this `Rollout`.
 * @member {Array.<module:model/Phase>} phases
 */
Rollout.prototype['phases'] = undefined;

/**
 * Output only. Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.
 * @member {String} rollbackOfRollout
 */
Rollout.prototype['rollbackOfRollout'] = undefined;

/**
 * Output only. Names of `Rollouts` that rolled back this `Rollout`.
 * @member {Array.<String>} rolledBackByRollouts
 */
Rollout.prototype['rolledBackByRollouts'] = undefined;

/**
 * Output only. Current state of the `Rollout`.
 * @member {module:model/Rollout.StateEnum} state
 */
Rollout.prototype['state'] = undefined;

/**
 * Required. The ID of Target to which this `Rollout` is deploying.
 * @member {String} targetId
 */
Rollout.prototype['targetId'] = undefined;

/**
 * Output only. Unique identifier of the `Rollout`.
 * @member {String} uid
 */
Rollout.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>approvalState</code> property.
 * @enum {String}
 * @readonly
 */
Rollout['ApprovalStateEnum'] = {

    /**
     * value: "APPROVAL_STATE_UNSPECIFIED"
     * @const
     */
    "APPROVAL_STATE_UNSPECIFIED": "APPROVAL_STATE_UNSPECIFIED",

    /**
     * value: "NEEDS_APPROVAL"
     * @const
     */
    "NEEDS_APPROVAL": "NEEDS_APPROVAL",

    /**
     * value: "DOES_NOT_NEED_APPROVAL"
     * @const
     */
    "DOES_NOT_NEED_APPROVAL": "DOES_NOT_NEED_APPROVAL",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};


/**
 * Allowed values for the <code>deployFailureCause</code> property.
 * @enum {String}
 * @readonly
 */
Rollout['DeployFailureCauseEnum'] = {

    /**
     * value: "FAILURE_CAUSE_UNSPECIFIED"
     * @const
     */
    "FAILURE_CAUSE_UNSPECIFIED": "FAILURE_CAUSE_UNSPECIFIED",

    /**
     * value: "CLOUD_BUILD_UNAVAILABLE"
     * @const
     */
    "CLOUD_BUILD_UNAVAILABLE": "CLOUD_BUILD_UNAVAILABLE",

    /**
     * value: "EXECUTION_FAILED"
     * @const
     */
    "EXECUTION_FAILED": "EXECUTION_FAILED",

    /**
     * value: "DEADLINE_EXCEEDED"
     * @const
     */
    "DEADLINE_EXCEEDED": "DEADLINE_EXCEEDED",

    /**
     * value: "RELEASE_FAILED"
     * @const
     */
    "RELEASE_FAILED": "RELEASE_FAILED",

    /**
     * value: "RELEASE_ABANDONED"
     * @const
     */
    "RELEASE_ABANDONED": "RELEASE_ABANDONED",

    /**
     * value: "VERIFICATION_CONFIG_NOT_FOUND"
     * @const
     */
    "VERIFICATION_CONFIG_NOT_FOUND": "VERIFICATION_CONFIG_NOT_FOUND",

    /**
     * value: "CLOUD_BUILD_REQUEST_FAILED"
     * @const
     */
    "CLOUD_BUILD_REQUEST_FAILED": "CLOUD_BUILD_REQUEST_FAILED",

    /**
     * value: "OPERATION_FEATURE_NOT_SUPPORTED"
     * @const
     */
    "OPERATION_FEATURE_NOT_SUPPORTED": "OPERATION_FEATURE_NOT_SUPPORTED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Rollout['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "PENDING_APPROVAL"
     * @const
     */
    "PENDING_APPROVAL": "PENDING_APPROVAL",

    /**
     * value: "APPROVAL_REJECTED"
     * @const
     */
    "APPROVAL_REJECTED": "APPROVAL_REJECTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "PENDING_RELEASE"
     * @const
     */
    "PENDING_RELEASE": "PENDING_RELEASE",

    /**
     * value: "CANCELLING"
     * @const
     */
    "CANCELLING": "CANCELLING",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "HALTED"
     * @const
     */
    "HALTED": "HALTED"
};



export default Rollout;

