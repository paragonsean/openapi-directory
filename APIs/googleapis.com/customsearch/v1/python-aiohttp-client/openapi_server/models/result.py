# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result_image import ResultImage
from openapi_server.models.result_labels_inner import ResultLabelsInner
from openapi_server import util


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_id: str=None, display_link: str=None, file_format: str=None, formatted_url: str=None, html_formatted_url: str=None, html_snippet: str=None, html_title: str=None, image: ResultImage=None, kind: str=None, labels: List[ResultLabelsInner]=None, link: str=None, mime: str=None, pagemap: Dict[str, object]=None, snippet: str=None, title: str=None):
        """Result - a model defined in OpenAPI

        :param cache_id: The cache_id of this Result.
        :param display_link: The display_link of this Result.
        :param file_format: The file_format of this Result.
        :param formatted_url: The formatted_url of this Result.
        :param html_formatted_url: The html_formatted_url of this Result.
        :param html_snippet: The html_snippet of this Result.
        :param html_title: The html_title of this Result.
        :param image: The image of this Result.
        :param kind: The kind of this Result.
        :param labels: The labels of this Result.
        :param link: The link of this Result.
        :param mime: The mime of this Result.
        :param pagemap: The pagemap of this Result.
        :param snippet: The snippet of this Result.
        :param title: The title of this Result.
        """
        self.openapi_types = {
            'cache_id': str,
            'display_link': str,
            'file_format': str,
            'formatted_url': str,
            'html_formatted_url': str,
            'html_snippet': str,
            'html_title': str,
            'image': ResultImage,
            'kind': str,
            'labels': List[ResultLabelsInner],
            'link': str,
            'mime': str,
            'pagemap': Dict[str, object],
            'snippet': str,
            'title': str
        }

        self.attribute_map = {
            'cache_id': 'cacheId',
            'display_link': 'displayLink',
            'file_format': 'fileFormat',
            'formatted_url': 'formattedUrl',
            'html_formatted_url': 'htmlFormattedUrl',
            'html_snippet': 'htmlSnippet',
            'html_title': 'htmlTitle',
            'image': 'image',
            'kind': 'kind',
            'labels': 'labels',
            'link': 'link',
            'mime': 'mime',
            'pagemap': 'pagemap',
            'snippet': 'snippet',
            'title': 'title'
        }

        self._cache_id = cache_id
        self._display_link = display_link
        self._file_format = file_format
        self._formatted_url = formatted_url
        self._html_formatted_url = html_formatted_url
        self._html_snippet = html_snippet
        self._html_title = html_title
        self._image = image
        self._kind = kind
        self._labels = labels
        self._link = link
        self._mime = mime
        self._pagemap = pagemap
        self._snippet = snippet
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Result of this Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_id(self):
        """Gets the cache_id of this Result.

        Indicates the ID of Google's cached version of the search result.

        :return: The cache_id of this Result.
        :rtype: str
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this Result.

        Indicates the ID of Google's cached version of the search result.

        :param cache_id: The cache_id of this Result.
        :type cache_id: str
        """

        self._cache_id = cache_id

    @property
    def display_link(self):
        """Gets the display_link of this Result.

        An abridged version of this search result’s URL, e.g. www.example.com.

        :return: The display_link of this Result.
        :rtype: str
        """
        return self._display_link

    @display_link.setter
    def display_link(self, display_link):
        """Sets the display_link of this Result.

        An abridged version of this search result’s URL, e.g. www.example.com.

        :param display_link: The display_link of this Result.
        :type display_link: str
        """

        self._display_link = display_link

    @property
    def file_format(self):
        """Gets the file_format of this Result.

        The file format of the search result.

        :return: The file_format of this Result.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this Result.

        The file format of the search result.

        :param file_format: The file_format of this Result.
        :type file_format: str
        """

        self._file_format = file_format

    @property
    def formatted_url(self):
        """Gets the formatted_url of this Result.

        The URL displayed after the snippet for each search result.

        :return: The formatted_url of this Result.
        :rtype: str
        """
        return self._formatted_url

    @formatted_url.setter
    def formatted_url(self, formatted_url):
        """Sets the formatted_url of this Result.

        The URL displayed after the snippet for each search result.

        :param formatted_url: The formatted_url of this Result.
        :type formatted_url: str
        """

        self._formatted_url = formatted_url

    @property
    def html_formatted_url(self):
        """Gets the html_formatted_url of this Result.

        The HTML-formatted URL displayed after the snippet for each search result.

        :return: The html_formatted_url of this Result.
        :rtype: str
        """
        return self._html_formatted_url

    @html_formatted_url.setter
    def html_formatted_url(self, html_formatted_url):
        """Sets the html_formatted_url of this Result.

        The HTML-formatted URL displayed after the snippet for each search result.

        :param html_formatted_url: The html_formatted_url of this Result.
        :type html_formatted_url: str
        """

        self._html_formatted_url = html_formatted_url

    @property
    def html_snippet(self):
        """Gets the html_snippet of this Result.

        The snippet of the search result, in HTML.

        :return: The html_snippet of this Result.
        :rtype: str
        """
        return self._html_snippet

    @html_snippet.setter
    def html_snippet(self, html_snippet):
        """Sets the html_snippet of this Result.

        The snippet of the search result, in HTML.

        :param html_snippet: The html_snippet of this Result.
        :type html_snippet: str
        """

        self._html_snippet = html_snippet

    @property
    def html_title(self):
        """Gets the html_title of this Result.

        The title of the search result, in HTML.

        :return: The html_title of this Result.
        :rtype: str
        """
        return self._html_title

    @html_title.setter
    def html_title(self, html_title):
        """Sets the html_title of this Result.

        The title of the search result, in HTML.

        :param html_title: The html_title of this Result.
        :type html_title: str
        """

        self._html_title = html_title

    @property
    def image(self):
        """Gets the image of this Result.


        :return: The image of this Result.
        :rtype: ResultImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Result.


        :param image: The image of this Result.
        :type image: ResultImage
        """

        self._image = image

    @property
    def kind(self):
        """Gets the kind of this Result.

        A unique identifier for the type of current object. For this API, it is `customsearch#result.`

        :return: The kind of this Result.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Result.

        A unique identifier for the type of current object. For this API, it is `customsearch#result.`

        :param kind: The kind of this Result.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Result.

        Encapsulates all information about refinement labels.

        :return: The labels of this Result.
        :rtype: List[ResultLabelsInner]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Result.

        Encapsulates all information about refinement labels.

        :param labels: The labels of this Result.
        :type labels: List[ResultLabelsInner]
        """

        self._labels = labels

    @property
    def link(self):
        """Gets the link of this Result.

        The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar.

        :return: The link of this Result.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Result.

        The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar.

        :param link: The link of this Result.
        :type link: str
        """

        self._link = link

    @property
    def mime(self):
        """Gets the mime of this Result.

        The MIME type of the search result.

        :return: The mime of this Result.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this Result.

        The MIME type of the search result.

        :param mime: The mime of this Result.
        :type mime: str
        """

        self._mime = mime

    @property
    def pagemap(self):
        """Gets the pagemap of this Result.

        Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result.

        :return: The pagemap of this Result.
        :rtype: Dict[str, object]
        """
        return self._pagemap

    @pagemap.setter
    def pagemap(self, pagemap):
        """Sets the pagemap of this Result.

        Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result.

        :param pagemap: The pagemap of this Result.
        :type pagemap: Dict[str, object]
        """

        self._pagemap = pagemap

    @property
    def snippet(self):
        """Gets the snippet of this Result.

        The snippet of the search result, in plain text.

        :return: The snippet of this Result.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Result.

        The snippet of the search result, in plain text.

        :param snippet: The snippet of this Result.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def title(self):
        """Gets the title of this Result.

        The title of the search result, in plain text.

        :return: The title of this Result.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Result.

        The title of the search result, in plain text.

        :param title: The title of this Result.
        :type title: str
        """

        self._title = title
