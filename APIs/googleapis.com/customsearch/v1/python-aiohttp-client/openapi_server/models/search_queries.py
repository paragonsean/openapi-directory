# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_queries_next_page_inner import SearchQueriesNextPageInner
from openapi_server import util


class SearchQueries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page: List[SearchQueriesNextPageInner]=None, previous_page: List[SearchQueriesNextPageInner]=None, request: List[SearchQueriesNextPageInner]=None):
        """SearchQueries - a model defined in OpenAPI

        :param next_page: The next_page of this SearchQueries.
        :param previous_page: The previous_page of this SearchQueries.
        :param request: The request of this SearchQueries.
        """
        self.openapi_types = {
            'next_page': List[SearchQueriesNextPageInner],
            'previous_page': List[SearchQueriesNextPageInner],
            'request': List[SearchQueriesNextPageInner]
        }

        self.attribute_map = {
            'next_page': 'nextPage',
            'previous_page': 'previousPage',
            'request': 'request'
        }

        self._next_page = next_page
        self._previous_page = previous_page
        self._request = request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchQueries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Search_queries of this SearchQueries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page(self):
        """Gets the next_page of this SearchQueries.

        Metadata representing the next page of results, if applicable.

        :return: The next_page of this SearchQueries.
        :rtype: List[SearchQueriesNextPageInner]
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this SearchQueries.

        Metadata representing the next page of results, if applicable.

        :param next_page: The next_page of this SearchQueries.
        :type next_page: List[SearchQueriesNextPageInner]
        """

        self._next_page = next_page

    @property
    def previous_page(self):
        """Gets the previous_page of this SearchQueries.

        Metadata representing the previous page of results, if applicable.

        :return: The previous_page of this SearchQueries.
        :rtype: List[SearchQueriesNextPageInner]
        """
        return self._previous_page

    @previous_page.setter
    def previous_page(self, previous_page):
        """Sets the previous_page of this SearchQueries.

        Metadata representing the previous page of results, if applicable.

        :param previous_page: The previous_page of this SearchQueries.
        :type previous_page: List[SearchQueriesNextPageInner]
        """

        self._previous_page = previous_page

    @property
    def request(self):
        """Gets the request of this SearchQueries.

        Metadata representing the current request.

        :return: The request of this SearchQueries.
        :rtype: List[SearchQueriesNextPageInner]
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SearchQueries.

        Metadata representing the current request.

        :param request: The request of this SearchQueries.
        :type request: List[SearchQueriesNextPageInner]
        """

        self._request = request
