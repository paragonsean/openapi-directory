/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchQueriesNextPageInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query metadata for the previous, current, and next pages of results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchQueries {
  public static final String SERIALIZED_NAME_NEXT_PAGE = "nextPage";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private List<SearchQueriesNextPageInner> nextPage = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_PAGE = "previousPage";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_PAGE)
  private List<SearchQueriesNextPageInner> previousPage = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private List<SearchQueriesNextPageInner> request = new ArrayList<>();

  public SearchQueries() {
  }

  public SearchQueries nextPage(List<SearchQueriesNextPageInner> nextPage) {
    this.nextPage = nextPage;
    return this;
  }

  public SearchQueries addNextPageItem(SearchQueriesNextPageInner nextPageItem) {
    if (this.nextPage == null) {
      this.nextPage = new ArrayList<>();
    }
    this.nextPage.add(nextPageItem);
    return this;
  }

  /**
   * Metadata representing the next page of results, if applicable.
   * @return nextPage
   */
  @javax.annotation.Nullable
  public List<SearchQueriesNextPageInner> getNextPage() {
    return nextPage;
  }

  public void setNextPage(List<SearchQueriesNextPageInner> nextPage) {
    this.nextPage = nextPage;
  }


  public SearchQueries previousPage(List<SearchQueriesNextPageInner> previousPage) {
    this.previousPage = previousPage;
    return this;
  }

  public SearchQueries addPreviousPageItem(SearchQueriesNextPageInner previousPageItem) {
    if (this.previousPage == null) {
      this.previousPage = new ArrayList<>();
    }
    this.previousPage.add(previousPageItem);
    return this;
  }

  /**
   * Metadata representing the previous page of results, if applicable.
   * @return previousPage
   */
  @javax.annotation.Nullable
  public List<SearchQueriesNextPageInner> getPreviousPage() {
    return previousPage;
  }

  public void setPreviousPage(List<SearchQueriesNextPageInner> previousPage) {
    this.previousPage = previousPage;
  }


  public SearchQueries request(List<SearchQueriesNextPageInner> request) {
    this.request = request;
    return this;
  }

  public SearchQueries addRequestItem(SearchQueriesNextPageInner requestItem) {
    if (this.request == null) {
      this.request = new ArrayList<>();
    }
    this.request.add(requestItem);
    return this;
  }

  /**
   * Metadata representing the current request.
   * @return request
   */
  @javax.annotation.Nullable
  public List<SearchQueriesNextPageInner> getRequest() {
    return request;
  }

  public void setRequest(List<SearchQueriesNextPageInner> request) {
    this.request = request;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchQueries searchQueries = (SearchQueries) o;
    return Objects.equals(this.nextPage, searchQueries.nextPage) &&
        Objects.equals(this.previousPage, searchQueries.previousPage) &&
        Objects.equals(this.request, searchQueries.request);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPage, previousPage, request);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchQueries {\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    previousPage: ").append(toIndentedString(previousPage)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPage");
    openapiFields.add("previousPage");
    openapiFields.add("request");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchQueries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchQueries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchQueries is not found in the empty JSON string", SearchQueries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchQueries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchQueries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("nextPage") != null && !jsonObj.get("nextPage").isJsonNull()) {
        JsonArray jsonArraynextPage = jsonObj.getAsJsonArray("nextPage");
        if (jsonArraynextPage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nextPage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nextPage` to be an array in the JSON string but got `%s`", jsonObj.get("nextPage").toString()));
          }

          // validate the optional field `nextPage` (array)
          for (int i = 0; i < jsonArraynextPage.size(); i++) {
            SearchQueriesNextPageInner.validateJsonElement(jsonArraynextPage.get(i));
          };
        }
      }
      if (jsonObj.get("previousPage") != null && !jsonObj.get("previousPage").isJsonNull()) {
        JsonArray jsonArraypreviousPage = jsonObj.getAsJsonArray("previousPage");
        if (jsonArraypreviousPage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previousPage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previousPage` to be an array in the JSON string but got `%s`", jsonObj.get("previousPage").toString()));
          }

          // validate the optional field `previousPage` (array)
          for (int i = 0; i < jsonArraypreviousPage.size(); i++) {
            SearchQueriesNextPageInner.validateJsonElement(jsonArraypreviousPage.get(i));
          };
        }
      }
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        JsonArray jsonArrayrequest = jsonObj.getAsJsonArray("request");
        if (jsonArrayrequest != null) {
          // ensure the json data is an array
          if (!jsonObj.get("request").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `request` to be an array in the JSON string but got `%s`", jsonObj.get("request").toString()));
          }

          // validate the optional field `request` (array)
          for (int i = 0; i < jsonArrayrequest.size(); i++) {
            SearchQueriesNextPageInner.validateJsonElement(jsonArrayrequest.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchQueries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchQueries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchQueries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchQueries.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchQueries>() {
           @Override
           public void write(JsonWriter out, SearchQueries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchQueries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchQueries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchQueries
   * @throws IOException if the JSON string is invalid with respect to SearchQueries
   */
  public static SearchQueries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchQueries.class);
  }

  /**
   * Convert an instance of SearchQueries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

