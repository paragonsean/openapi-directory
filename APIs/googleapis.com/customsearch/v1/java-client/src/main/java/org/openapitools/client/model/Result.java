/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResultImage;
import org.openapitools.client.model.ResultLabelsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A custom search result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Result {
  public static final String SERIALIZED_NAME_CACHE_ID = "cacheId";
  @SerializedName(SERIALIZED_NAME_CACHE_ID)
  private String cacheId;

  public static final String SERIALIZED_NAME_DISPLAY_LINK = "displayLink";
  @SerializedName(SERIALIZED_NAME_DISPLAY_LINK)
  private String displayLink;

  public static final String SERIALIZED_NAME_FILE_FORMAT = "fileFormat";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private String fileFormat;

  public static final String SERIALIZED_NAME_FORMATTED_URL = "formattedUrl";
  @SerializedName(SERIALIZED_NAME_FORMATTED_URL)
  private String formattedUrl;

  public static final String SERIALIZED_NAME_HTML_FORMATTED_URL = "htmlFormattedUrl";
  @SerializedName(SERIALIZED_NAME_HTML_FORMATTED_URL)
  private String htmlFormattedUrl;

  public static final String SERIALIZED_NAME_HTML_SNIPPET = "htmlSnippet";
  @SerializedName(SERIALIZED_NAME_HTML_SNIPPET)
  private String htmlSnippet;

  public static final String SERIALIZED_NAME_HTML_TITLE = "htmlTitle";
  @SerializedName(SERIALIZED_NAME_HTML_TITLE)
  private String htmlTitle;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ResultImage image;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<ResultLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_MIME = "mime";
  @SerializedName(SERIALIZED_NAME_MIME)
  private String mime;

  public static final String SERIALIZED_NAME_PAGEMAP = "pagemap";
  @SerializedName(SERIALIZED_NAME_PAGEMAP)
  private Map<String, Object> pagemap = new HashMap<>();

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Result() {
  }

  public Result cacheId(String cacheId) {
    this.cacheId = cacheId;
    return this;
  }

  /**
   * Indicates the ID of Google&#39;s cached version of the search result.
   * @return cacheId
   */
  @javax.annotation.Nullable
  public String getCacheId() {
    return cacheId;
  }

  public void setCacheId(String cacheId) {
    this.cacheId = cacheId;
  }


  public Result displayLink(String displayLink) {
    this.displayLink = displayLink;
    return this;
  }

  /**
   * An abridged version of this search resultâ€™s URL, e.g. www.example.com.
   * @return displayLink
   */
  @javax.annotation.Nullable
  public String getDisplayLink() {
    return displayLink;
  }

  public void setDisplayLink(String displayLink) {
    this.displayLink = displayLink;
  }


  public Result fileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * The file format of the search result.
   * @return fileFormat
   */
  @javax.annotation.Nullable
  public String getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
  }


  public Result formattedUrl(String formattedUrl) {
    this.formattedUrl = formattedUrl;
    return this;
  }

  /**
   * The URL displayed after the snippet for each search result.
   * @return formattedUrl
   */
  @javax.annotation.Nullable
  public String getFormattedUrl() {
    return formattedUrl;
  }

  public void setFormattedUrl(String formattedUrl) {
    this.formattedUrl = formattedUrl;
  }


  public Result htmlFormattedUrl(String htmlFormattedUrl) {
    this.htmlFormattedUrl = htmlFormattedUrl;
    return this;
  }

  /**
   * The HTML-formatted URL displayed after the snippet for each search result.
   * @return htmlFormattedUrl
   */
  @javax.annotation.Nullable
  public String getHtmlFormattedUrl() {
    return htmlFormattedUrl;
  }

  public void setHtmlFormattedUrl(String htmlFormattedUrl) {
    this.htmlFormattedUrl = htmlFormattedUrl;
  }


  public Result htmlSnippet(String htmlSnippet) {
    this.htmlSnippet = htmlSnippet;
    return this;
  }

  /**
   * The snippet of the search result, in HTML.
   * @return htmlSnippet
   */
  @javax.annotation.Nullable
  public String getHtmlSnippet() {
    return htmlSnippet;
  }

  public void setHtmlSnippet(String htmlSnippet) {
    this.htmlSnippet = htmlSnippet;
  }


  public Result htmlTitle(String htmlTitle) {
    this.htmlTitle = htmlTitle;
    return this;
  }

  /**
   * The title of the search result, in HTML.
   * @return htmlTitle
   */
  @javax.annotation.Nullable
  public String getHtmlTitle() {
    return htmlTitle;
  }

  public void setHtmlTitle(String htmlTitle) {
    this.htmlTitle = htmlTitle;
  }


  public Result image(ResultImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ResultImage getImage() {
    return image;
  }

  public void setImage(ResultImage image) {
    this.image = image;
  }


  public Result kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * A unique identifier for the type of current object. For this API, it is &#x60;customsearch#result.&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Result labels(List<ResultLabelsInner> labels) {
    this.labels = labels;
    return this;
  }

  public Result addLabelsItem(ResultLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Encapsulates all information about refinement labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<ResultLabelsInner> getLabels() {
    return labels;
  }

  public void setLabels(List<ResultLabelsInner> labels) {
    this.labels = labels;
  }


  public Result link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Result mime(String mime) {
    this.mime = mime;
    return this;
  }

  /**
   * The MIME type of the search result.
   * @return mime
   */
  @javax.annotation.Nullable
  public String getMime() {
    return mime;
  }

  public void setMime(String mime) {
    this.mime = mime;
  }


  public Result pagemap(Map<String, Object> pagemap) {
    this.pagemap = pagemap;
    return this;
  }

  public Result putPagemapItem(String key, Object pagemapItem) {
    if (this.pagemap == null) {
      this.pagemap = new HashMap<>();
    }
    this.pagemap.put(key, pagemapItem);
    return this;
  }

  /**
   * Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result.
   * @return pagemap
   */
  @javax.annotation.Nullable
  public Map<String, Object> getPagemap() {
    return pagemap;
  }

  public void setPagemap(Map<String, Object> pagemap) {
    this.pagemap = pagemap;
  }


  public Result snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * The snippet of the search result, in plain text.
   * @return snippet
   */
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public Result title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the search result, in plain text.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result result = (Result) o;
    return Objects.equals(this.cacheId, result.cacheId) &&
        Objects.equals(this.displayLink, result.displayLink) &&
        Objects.equals(this.fileFormat, result.fileFormat) &&
        Objects.equals(this.formattedUrl, result.formattedUrl) &&
        Objects.equals(this.htmlFormattedUrl, result.htmlFormattedUrl) &&
        Objects.equals(this.htmlSnippet, result.htmlSnippet) &&
        Objects.equals(this.htmlTitle, result.htmlTitle) &&
        Objects.equals(this.image, result.image) &&
        Objects.equals(this.kind, result.kind) &&
        Objects.equals(this.labels, result.labels) &&
        Objects.equals(this.link, result.link) &&
        Objects.equals(this.mime, result.mime) &&
        Objects.equals(this.pagemap, result.pagemap) &&
        Objects.equals(this.snippet, result.snippet) &&
        Objects.equals(this.title, result.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheId, displayLink, fileFormat, formattedUrl, htmlFormattedUrl, htmlSnippet, htmlTitle, image, kind, labels, link, mime, pagemap, snippet, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result {\n");
    sb.append("    cacheId: ").append(toIndentedString(cacheId)).append("\n");
    sb.append("    displayLink: ").append(toIndentedString(displayLink)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    formattedUrl: ").append(toIndentedString(formattedUrl)).append("\n");
    sb.append("    htmlFormattedUrl: ").append(toIndentedString(htmlFormattedUrl)).append("\n");
    sb.append("    htmlSnippet: ").append(toIndentedString(htmlSnippet)).append("\n");
    sb.append("    htmlTitle: ").append(toIndentedString(htmlTitle)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    mime: ").append(toIndentedString(mime)).append("\n");
    sb.append("    pagemap: ").append(toIndentedString(pagemap)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheId");
    openapiFields.add("displayLink");
    openapiFields.add("fileFormat");
    openapiFields.add("formattedUrl");
    openapiFields.add("htmlFormattedUrl");
    openapiFields.add("htmlSnippet");
    openapiFields.add("htmlTitle");
    openapiFields.add("image");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("link");
    openapiFields.add("mime");
    openapiFields.add("pagemap");
    openapiFields.add("snippet");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result is not found in the empty JSON string", Result.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cacheId") != null && !jsonObj.get("cacheId").isJsonNull()) && !jsonObj.get("cacheId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cacheId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cacheId").toString()));
      }
      if ((jsonObj.get("displayLink") != null && !jsonObj.get("displayLink").isJsonNull()) && !jsonObj.get("displayLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayLink").toString()));
      }
      if ((jsonObj.get("fileFormat") != null && !jsonObj.get("fileFormat").isJsonNull()) && !jsonObj.get("fileFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileFormat").toString()));
      }
      if ((jsonObj.get("formattedUrl") != null && !jsonObj.get("formattedUrl").isJsonNull()) && !jsonObj.get("formattedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedUrl").toString()));
      }
      if ((jsonObj.get("htmlFormattedUrl") != null && !jsonObj.get("htmlFormattedUrl").isJsonNull()) && !jsonObj.get("htmlFormattedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlFormattedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlFormattedUrl").toString()));
      }
      if ((jsonObj.get("htmlSnippet") != null && !jsonObj.get("htmlSnippet").isJsonNull()) && !jsonObj.get("htmlSnippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlSnippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlSnippet").toString()));
      }
      if ((jsonObj.get("htmlTitle") != null && !jsonObj.get("htmlTitle").isJsonNull()) && !jsonObj.get("htmlTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlTitle").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ResultImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            ResultLabelsInner.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("mime") != null && !jsonObj.get("mime").isJsonNull()) && !jsonObj.get("mime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime").toString()));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result.class));

       return (TypeAdapter<T>) new TypeAdapter<Result>() {
           @Override
           public void write(JsonWriter out, Result value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result
   * @throws IOException if the JSON string is invalid with respect to Result
   */
  public static Result fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result.class);
  }

  /**
   * Convert an instance of Result to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

