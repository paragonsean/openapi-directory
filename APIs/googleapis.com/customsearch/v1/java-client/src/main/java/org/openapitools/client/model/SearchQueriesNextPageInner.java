/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom search request metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchQueriesNextPageInner {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_CR = "cr";
  @SerializedName(SERIALIZED_NAME_CR)
  private String cr;

  public static final String SERIALIZED_NAME_CX = "cx";
  @SerializedName(SERIALIZED_NAME_CX)
  private String cx;

  public static final String SERIALIZED_NAME_DATE_RESTRICT = "dateRestrict";
  @SerializedName(SERIALIZED_NAME_DATE_RESTRICT)
  private String dateRestrict;

  public static final String SERIALIZED_NAME_DISABLE_CN_TW_TRANSLATION = "disableCnTwTranslation";
  @SerializedName(SERIALIZED_NAME_DISABLE_CN_TW_TRANSLATION)
  private String disableCnTwTranslation;

  public static final String SERIALIZED_NAME_EXACT_TERMS = "exactTerms";
  @SerializedName(SERIALIZED_NAME_EXACT_TERMS)
  private String exactTerms;

  public static final String SERIALIZED_NAME_EXCLUDE_TERMS = "excludeTerms";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_TERMS)
  private String excludeTerms;

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_GL = "gl";
  @SerializedName(SERIALIZED_NAME_GL)
  private String gl;

  public static final String SERIALIZED_NAME_GOOGLE_HOST = "googleHost";
  @SerializedName(SERIALIZED_NAME_GOOGLE_HOST)
  private String googleHost;

  public static final String SERIALIZED_NAME_HIGH_RANGE = "highRange";
  @SerializedName(SERIALIZED_NAME_HIGH_RANGE)
  private String highRange;

  public static final String SERIALIZED_NAME_HL = "hl";
  @SerializedName(SERIALIZED_NAME_HL)
  private String hl;

  public static final String SERIALIZED_NAME_HQ = "hq";
  @SerializedName(SERIALIZED_NAME_HQ)
  private String hq;

  public static final String SERIALIZED_NAME_IMG_COLOR_TYPE = "imgColorType";
  @SerializedName(SERIALIZED_NAME_IMG_COLOR_TYPE)
  private String imgColorType;

  public static final String SERIALIZED_NAME_IMG_DOMINANT_COLOR = "imgDominantColor";
  @SerializedName(SERIALIZED_NAME_IMG_DOMINANT_COLOR)
  private String imgDominantColor;

  public static final String SERIALIZED_NAME_IMG_SIZE = "imgSize";
  @SerializedName(SERIALIZED_NAME_IMG_SIZE)
  private String imgSize;

  public static final String SERIALIZED_NAME_IMG_TYPE = "imgType";
  @SerializedName(SERIALIZED_NAME_IMG_TYPE)
  private String imgType;

  public static final String SERIALIZED_NAME_INPUT_ENCODING = "inputEncoding";
  @SerializedName(SERIALIZED_NAME_INPUT_ENCODING)
  private String inputEncoding;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LINK_SITE = "linkSite";
  @SerializedName(SERIALIZED_NAME_LINK_SITE)
  private String linkSite;

  public static final String SERIALIZED_NAME_LOW_RANGE = "lowRange";
  @SerializedName(SERIALIZED_NAME_LOW_RANGE)
  private String lowRange;

  public static final String SERIALIZED_NAME_OR_TERMS = "orTerms";
  @SerializedName(SERIALIZED_NAME_OR_TERMS)
  private String orTerms;

  public static final String SERIALIZED_NAME_OUTPUT_ENCODING = "outputEncoding";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ENCODING)
  private String outputEncoding;

  public static final String SERIALIZED_NAME_RELATED_SITE = "relatedSite";
  @SerializedName(SERIALIZED_NAME_RELATED_SITE)
  private String relatedSite;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private String rights;

  public static final String SERIALIZED_NAME_SAFE = "safe";
  @SerializedName(SERIALIZED_NAME_SAFE)
  private String safe;

  public static final String SERIALIZED_NAME_SEARCH_TERMS = "searchTerms";
  @SerializedName(SERIALIZED_NAME_SEARCH_TERMS)
  private String searchTerms;

  public static final String SERIALIZED_NAME_SEARCH_TYPE = "searchType";
  @SerializedName(SERIALIZED_NAME_SEARCH_TYPE)
  private String searchType;

  public static final String SERIALIZED_NAME_SITE_SEARCH = "siteSearch";
  @SerializedName(SERIALIZED_NAME_SITE_SEARCH)
  private String siteSearch;

  public static final String SERIALIZED_NAME_SITE_SEARCH_FILTER = "siteSearchFilter";
  @SerializedName(SERIALIZED_NAME_SITE_SEARCH_FILTER)
  private String siteSearchFilter;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_START_PAGE = "startPage";
  @SerializedName(SERIALIZED_NAME_START_PAGE)
  private Integer startPage;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private String totalResults;

  public SearchQueriesNextPageInner() {
  }

  public SearchQueriesNextPageInner count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Number of search results returned in this set.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public SearchQueriesNextPageInner cr(String cr) {
    this.cr = cr;
    return this;
  }

  /**
   * Restricts search results to documents originating in a particular country. You may use [Boolean operators](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) in the &#x60;cr&#x60; parameter&#39;s value. Google WebSearch determines the country of a document by analyzing the following: * The top-level domain (TLD) of the document&#39;s URL. * The geographic location of the web server&#39;s IP address. See [Country (cr) Parameter Values](https://developers.google.com/custom-search/docs/json_api_reference#countryCollections) for a list of valid values for this parameter.
   * @return cr
   */
  @javax.annotation.Nullable
  public String getCr() {
    return cr;
  }

  public void setCr(String cr) {
    this.cr = cr;
  }


  public SearchQueriesNextPageInner cx(String cx) {
    this.cx = cx;
    return this;
  }

  /**
   * The identifier of an engine created using the Programmable Search Engine [Control Panel](https://programmablesearchengine.google.com/). This is a custom property not defined in the OpenSearch spec. This parameter is **required**.
   * @return cx
   */
  @javax.annotation.Nullable
  public String getCx() {
    return cx;
  }

  public void setCx(String cx) {
    this.cx = cx;
  }


  public SearchQueriesNextPageInner dateRestrict(String dateRestrict) {
    this.dateRestrict = dateRestrict;
    return this;
  }

  /**
   * Restricts results to URLs based on date. Supported values include: * &#x60;d[number]&#x60;: requests results from the specified number of past days. * &#x60;w[number]&#x60;: requests results from the specified number of past weeks. * &#x60;m[number]&#x60;: requests results from the specified number of past months. * &#x60;y[number]&#x60;: requests results from the specified number of past years.
   * @return dateRestrict
   */
  @javax.annotation.Nullable
  public String getDateRestrict() {
    return dateRestrict;
  }

  public void setDateRestrict(String dateRestrict) {
    this.dateRestrict = dateRestrict;
  }


  public SearchQueriesNextPageInner disableCnTwTranslation(String disableCnTwTranslation) {
    this.disableCnTwTranslation = disableCnTwTranslation;
    return this;
  }

  /**
   * Enables or disables the [Simplified and Traditional Chinese Search](https://developers.google.com/custom-search/docs/json_api_reference#chineseSearch) feature. Supported values are: * &#x60;0&#x60;: enabled (default) * &#x60;1&#x60;: disabled
   * @return disableCnTwTranslation
   */
  @javax.annotation.Nullable
  public String getDisableCnTwTranslation() {
    return disableCnTwTranslation;
  }

  public void setDisableCnTwTranslation(String disableCnTwTranslation) {
    this.disableCnTwTranslation = disableCnTwTranslation;
  }


  public SearchQueriesNextPageInner exactTerms(String exactTerms) {
    this.exactTerms = exactTerms;
    return this;
  }

  /**
   * Identifies a phrase that all documents in the search results must contain.
   * @return exactTerms
   */
  @javax.annotation.Nullable
  public String getExactTerms() {
    return exactTerms;
  }

  public void setExactTerms(String exactTerms) {
    this.exactTerms = exactTerms;
  }


  public SearchQueriesNextPageInner excludeTerms(String excludeTerms) {
    this.excludeTerms = excludeTerms;
    return this;
  }

  /**
   * Identifies a word or phrase that should not appear in any documents in the search results.
   * @return excludeTerms
   */
  @javax.annotation.Nullable
  public String getExcludeTerms() {
    return excludeTerms;
  }

  public void setExcludeTerms(String excludeTerms) {
    this.excludeTerms = excludeTerms;
  }


  public SearchQueriesNextPageInner fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Restricts results to files of a specified extension. Filetypes supported by Google include: * Adobe Portable Document Format (&#x60;pdf&#x60;) * Adobe PostScript (&#x60;ps&#x60;) * Lotus 1-2-3 (&#x60;wk1&#x60;, &#x60;wk2&#x60;, &#x60;wk3&#x60;, &#x60;wk4&#x60;, &#x60;wk5&#x60;, &#x60;wki&#x60;, &#x60;wks&#x60;, &#x60;wku&#x60;) * Lotus WordPro (&#x60;lwp&#x60;) * Macwrite (&#x60;mw&#x60;) * Microsoft Excel (&#x60;xls&#x60;) * Microsoft PowerPoint (&#x60;ppt&#x60;) * Microsoft Word (&#x60;doc&#x60;) * Microsoft Works (&#x60;wks&#x60;, &#x60;wps&#x60;, &#x60;wdb&#x60;) * Microsoft Write (&#x60;wri&#x60;) * Rich Text Format (&#x60;rtf&#x60;) * Shockwave Flash (&#x60;swf&#x60;) * Text (&#x60;ans&#x60;, &#x60;txt&#x60;). Additional filetypes may be added in the future. An up-to-date list can always be found in Google&#39;s [file type FAQ](https://support.google.com/webmasters/answer/35287).
   * @return fileType
   */
  @javax.annotation.Nullable
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public SearchQueriesNextPageInner filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Activates or deactivates the automatic filtering of Google search results. See [Automatic Filtering](https://developers.google.com/custom-search/docs/json_api_reference#automaticFiltering) for more information about Google&#39;s search results filters. Valid values for this parameter are: * &#x60;0&#x60;: Disabled * &#x60;1&#x60;: Enabled (default) **Note**: By default, Google applies filtering to all search results to improve the quality of those results.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public SearchQueriesNextPageInner gl(String gl) {
    this.gl = gl;
    return this;
  }

  /**
   * Boosts search results whose country of origin matches the parameter value. See [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) for a list of valid values. Specifying a &#x60;gl&#x60; parameter value in WebSearch requests should improve the relevance of results. This is particularly true for international customers and, even more specifically, for customers in English-speaking countries other than the United States.
   * @return gl
   */
  @javax.annotation.Nullable
  public String getGl() {
    return gl;
  }

  public void setGl(String gl) {
    this.gl = gl;
  }


  public SearchQueriesNextPageInner googleHost(String googleHost) {
    this.googleHost = googleHost;
    return this;
  }

  /**
   * Specifies the Google domain (for example, google.com, google.de, or google.fr) to which the search should be limited.
   * @return googleHost
   */
  @javax.annotation.Nullable
  public String getGoogleHost() {
    return googleHost;
  }

  public void setGoogleHost(String googleHost) {
    this.googleHost = googleHost;
  }


  public SearchQueriesNextPageInner highRange(String highRange) {
    this.highRange = highRange;
    return this;
  }

  /**
   * Specifies the ending value for a search range. Use &#x60;cse:lowRange&#x60; and &#x60;cse:highrange&#x60; to append an inclusive search range of &#x60;lowRange...highRange&#x60; to the query.
   * @return highRange
   */
  @javax.annotation.Nullable
  public String getHighRange() {
    return highRange;
  }

  public void setHighRange(String highRange) {
    this.highRange = highRange;
  }


  public SearchQueriesNextPageInner hl(String hl) {
    this.hl = hl;
    return this;
  }

  /**
   * Specifies the interface language (host language) of your user interface. Explicitly setting this parameter improves the performance and the quality of your search results. See the [Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#wsInterfaceLanguages) section of [Internationalizing Queries and Results Presentation](https://developers.google.com/custom-search/docs/json_api_reference#wsInternationalizing) for more information, and [Supported Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#interfaceLanguages) for a list of supported languages.
   * @return hl
   */
  @javax.annotation.Nullable
  public String getHl() {
    return hl;
  }

  public void setHl(String hl) {
    this.hl = hl;
  }


  public SearchQueriesNextPageInner hq(String hq) {
    this.hq = hq;
    return this;
  }

  /**
   * Appends the specified query terms to the query, as if they were combined with a logical &#x60;AND&#x60; operator.
   * @return hq
   */
  @javax.annotation.Nullable
  public String getHq() {
    return hq;
  }

  public void setHq(String hq) {
    this.hq = hq;
  }


  public SearchQueriesNextPageInner imgColorType(String imgColorType) {
    this.imgColorType = imgColorType;
    return this;
  }

  /**
   * Restricts results to images of a specified color type. Supported values are: * &#x60;mono&#x60; (black and white) * &#x60;gray&#x60; (grayscale) * &#x60;color&#x60; (color)
   * @return imgColorType
   */
  @javax.annotation.Nullable
  public String getImgColorType() {
    return imgColorType;
  }

  public void setImgColorType(String imgColorType) {
    this.imgColorType = imgColorType;
  }


  public SearchQueriesNextPageInner imgDominantColor(String imgDominantColor) {
    this.imgDominantColor = imgDominantColor;
    return this;
  }

  /**
   * Restricts results to images with a specific dominant color. Supported values are: * &#x60;red&#x60; * &#x60;orange&#x60; * &#x60;yellow&#x60; * &#x60;green&#x60; * &#x60;teal&#x60; * &#x60;blue&#x60; * &#x60;purple&#x60; * &#x60;pink&#x60; * &#x60;white&#x60; * &#x60;gray&#x60; * &#x60;black&#x60; * &#x60;brown&#x60;
   * @return imgDominantColor
   */
  @javax.annotation.Nullable
  public String getImgDominantColor() {
    return imgDominantColor;
  }

  public void setImgDominantColor(String imgDominantColor) {
    this.imgDominantColor = imgDominantColor;
  }


  public SearchQueriesNextPageInner imgSize(String imgSize) {
    this.imgSize = imgSize;
    return this;
  }

  /**
   * Restricts results to images of a specified size. Supported values are: * &#x60;icon&#x60; (small) * &#x60;small | medium | large | xlarge&#x60; (medium) * &#x60;xxlarge&#x60; (large) * &#x60;huge&#x60; (extra-large)
   * @return imgSize
   */
  @javax.annotation.Nullable
  public String getImgSize() {
    return imgSize;
  }

  public void setImgSize(String imgSize) {
    this.imgSize = imgSize;
  }


  public SearchQueriesNextPageInner imgType(String imgType) {
    this.imgType = imgType;
    return this;
  }

  /**
   * Restricts results to images of a specified type. Supported values are: * &#x60;clipart&#x60; (Clip art) * &#x60;face&#x60; (Face) * &#x60;lineart&#x60; (Line drawing) * &#x60;photo&#x60; (Photo) * &#x60;animated&#x60; (Animated) * &#x60;stock&#x60; (Stock)
   * @return imgType
   */
  @javax.annotation.Nullable
  public String getImgType() {
    return imgType;
  }

  public void setImgType(String imgType) {
    this.imgType = imgType;
  }


  public SearchQueriesNextPageInner inputEncoding(String inputEncoding) {
    this.inputEncoding = inputEncoding;
    return this;
  }

  /**
   * The character encoding supported for search requests.
   * @return inputEncoding
   */
  @javax.annotation.Nullable
  public String getInputEncoding() {
    return inputEncoding;
  }

  public void setInputEncoding(String inputEncoding) {
    this.inputEncoding = inputEncoding;
  }


  public SearchQueriesNextPageInner language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The language of the search results.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SearchQueriesNextPageInner linkSite(String linkSite) {
    this.linkSite = linkSite;
    return this;
  }

  /**
   * Specifies that all results should contain a link to a specific URL.
   * @return linkSite
   */
  @javax.annotation.Nullable
  public String getLinkSite() {
    return linkSite;
  }

  public void setLinkSite(String linkSite) {
    this.linkSite = linkSite;
  }


  public SearchQueriesNextPageInner lowRange(String lowRange) {
    this.lowRange = lowRange;
    return this;
  }

  /**
   * Specifies the starting value for a search range. Use &#x60;cse:lowRange&#x60; and &#x60;cse:highrange&#x60; to append an inclusive search range of &#x60;lowRange...highRange&#x60; to the query.
   * @return lowRange
   */
  @javax.annotation.Nullable
  public String getLowRange() {
    return lowRange;
  }

  public void setLowRange(String lowRange) {
    this.lowRange = lowRange;
  }


  public SearchQueriesNextPageInner orTerms(String orTerms) {
    this.orTerms = orTerms;
    return this;
  }

  /**
   * Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms. You can also use the [Boolean OR](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) query term for this type of query.
   * @return orTerms
   */
  @javax.annotation.Nullable
  public String getOrTerms() {
    return orTerms;
  }

  public void setOrTerms(String orTerms) {
    this.orTerms = orTerms;
  }


  public SearchQueriesNextPageInner outputEncoding(String outputEncoding) {
    this.outputEncoding = outputEncoding;
    return this;
  }

  /**
   * The character encoding supported for search results.
   * @return outputEncoding
   */
  @javax.annotation.Nullable
  public String getOutputEncoding() {
    return outputEncoding;
  }

  public void setOutputEncoding(String outputEncoding) {
    this.outputEncoding = outputEncoding;
  }


  public SearchQueriesNextPageInner relatedSite(String relatedSite) {
    this.relatedSite = relatedSite;
    return this;
  }

  /**
   * Specifies that all search results should be pages that are related to the specified URL. The parameter value should be a URL.
   * @return relatedSite
   */
  @javax.annotation.Nullable
  public String getRelatedSite() {
    return relatedSite;
  }

  public void setRelatedSite(String relatedSite) {
    this.relatedSite = relatedSite;
  }


  public SearchQueriesNextPageInner rights(String rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Filters based on licensing. Supported values include: * &#x60;cc_publicdomain&#x60; * &#x60;cc_attribute&#x60; * &#x60;cc_sharealike&#x60; * &#x60;cc_noncommercial&#x60; * &#x60;cc_nonderived&#x60;
   * @return rights
   */
  @javax.annotation.Nullable
  public String getRights() {
    return rights;
  }

  public void setRights(String rights) {
    this.rights = rights;
  }


  public SearchQueriesNextPageInner safe(String safe) {
    this.safe = safe;
    return this;
  }

  /**
   * Specifies the [SafeSearch level](https://developers.google.com/custom-search/docs/json_api_reference#safeSearchLevels) used for filtering out adult results. This is a custom property not defined in the OpenSearch spec. Valid parameter values are: * &#x60;\&quot;off\&quot;&#x60;: Disable SafeSearch * &#x60;\&quot;active\&quot;&#x60;: Enable SafeSearch
   * @return safe
   */
  @javax.annotation.Nullable
  public String getSafe() {
    return safe;
  }

  public void setSafe(String safe) {
    this.safe = safe;
  }


  public SearchQueriesNextPageInner searchTerms(String searchTerms) {
    this.searchTerms = searchTerms;
    return this;
  }

  /**
   * The search terms entered by the user.
   * @return searchTerms
   */
  @javax.annotation.Nullable
  public String getSearchTerms() {
    return searchTerms;
  }

  public void setSearchTerms(String searchTerms) {
    this.searchTerms = searchTerms;
  }


  public SearchQueriesNextPageInner searchType(String searchType) {
    this.searchType = searchType;
    return this;
  }

  /**
   * Allowed values are &#x60;web&#x60; or &#x60;image&#x60;. If unspecified, results are limited to webpages.
   * @return searchType
   */
  @javax.annotation.Nullable
  public String getSearchType() {
    return searchType;
  }

  public void setSearchType(String searchType) {
    this.searchType = searchType;
  }


  public SearchQueriesNextPageInner siteSearch(String siteSearch) {
    this.siteSearch = siteSearch;
    return this;
  }

  /**
   * Restricts results to URLs from a specified site.
   * @return siteSearch
   */
  @javax.annotation.Nullable
  public String getSiteSearch() {
    return siteSearch;
  }

  public void setSiteSearch(String siteSearch) {
    this.siteSearch = siteSearch;
  }


  public SearchQueriesNextPageInner siteSearchFilter(String siteSearchFilter) {
    this.siteSearchFilter = siteSearchFilter;
    return this;
  }

  /**
   * Specifies whether to include or exclude results from the site named in the &#x60;sitesearch&#x60; parameter. Supported values are: * &#x60;i&#x60;: include content from site * &#x60;e&#x60;: exclude content from site
   * @return siteSearchFilter
   */
  @javax.annotation.Nullable
  public String getSiteSearchFilter() {
    return siteSearchFilter;
  }

  public void setSiteSearchFilter(String siteSearchFilter) {
    this.siteSearchFilter = siteSearchFilter;
  }


  public SearchQueriesNextPageInner sort(String sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Specifies that results should be sorted according to the specified expression. For example, sort by date.
   * @return sort
   */
  @javax.annotation.Nullable
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }


  public SearchQueriesNextPageInner startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The index of the current set of search results into the total set of results, where the index of the first result is 1.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public SearchQueriesNextPageInner startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

  /**
   * The page number of this set of results, where the page length is set by the &#x60;count&#x60; property.
   * @return startPage
   */
  @javax.annotation.Nullable
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }


  public SearchQueriesNextPageInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A description of the query.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SearchQueriesNextPageInner totalResults(String totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Estimated number of total search results. May not be accurate.
   * @return totalResults
   */
  @javax.annotation.Nullable
  public String getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(String totalResults) {
    this.totalResults = totalResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchQueriesNextPageInner searchQueriesNextPageInner = (SearchQueriesNextPageInner) o;
    return Objects.equals(this.count, searchQueriesNextPageInner.count) &&
        Objects.equals(this.cr, searchQueriesNextPageInner.cr) &&
        Objects.equals(this.cx, searchQueriesNextPageInner.cx) &&
        Objects.equals(this.dateRestrict, searchQueriesNextPageInner.dateRestrict) &&
        Objects.equals(this.disableCnTwTranslation, searchQueriesNextPageInner.disableCnTwTranslation) &&
        Objects.equals(this.exactTerms, searchQueriesNextPageInner.exactTerms) &&
        Objects.equals(this.excludeTerms, searchQueriesNextPageInner.excludeTerms) &&
        Objects.equals(this.fileType, searchQueriesNextPageInner.fileType) &&
        Objects.equals(this.filter, searchQueriesNextPageInner.filter) &&
        Objects.equals(this.gl, searchQueriesNextPageInner.gl) &&
        Objects.equals(this.googleHost, searchQueriesNextPageInner.googleHost) &&
        Objects.equals(this.highRange, searchQueriesNextPageInner.highRange) &&
        Objects.equals(this.hl, searchQueriesNextPageInner.hl) &&
        Objects.equals(this.hq, searchQueriesNextPageInner.hq) &&
        Objects.equals(this.imgColorType, searchQueriesNextPageInner.imgColorType) &&
        Objects.equals(this.imgDominantColor, searchQueriesNextPageInner.imgDominantColor) &&
        Objects.equals(this.imgSize, searchQueriesNextPageInner.imgSize) &&
        Objects.equals(this.imgType, searchQueriesNextPageInner.imgType) &&
        Objects.equals(this.inputEncoding, searchQueriesNextPageInner.inputEncoding) &&
        Objects.equals(this.language, searchQueriesNextPageInner.language) &&
        Objects.equals(this.linkSite, searchQueriesNextPageInner.linkSite) &&
        Objects.equals(this.lowRange, searchQueriesNextPageInner.lowRange) &&
        Objects.equals(this.orTerms, searchQueriesNextPageInner.orTerms) &&
        Objects.equals(this.outputEncoding, searchQueriesNextPageInner.outputEncoding) &&
        Objects.equals(this.relatedSite, searchQueriesNextPageInner.relatedSite) &&
        Objects.equals(this.rights, searchQueriesNextPageInner.rights) &&
        Objects.equals(this.safe, searchQueriesNextPageInner.safe) &&
        Objects.equals(this.searchTerms, searchQueriesNextPageInner.searchTerms) &&
        Objects.equals(this.searchType, searchQueriesNextPageInner.searchType) &&
        Objects.equals(this.siteSearch, searchQueriesNextPageInner.siteSearch) &&
        Objects.equals(this.siteSearchFilter, searchQueriesNextPageInner.siteSearchFilter) &&
        Objects.equals(this.sort, searchQueriesNextPageInner.sort) &&
        Objects.equals(this.startIndex, searchQueriesNextPageInner.startIndex) &&
        Objects.equals(this.startPage, searchQueriesNextPageInner.startPage) &&
        Objects.equals(this.title, searchQueriesNextPageInner.title) &&
        Objects.equals(this.totalResults, searchQueriesNextPageInner.totalResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, cr, cx, dateRestrict, disableCnTwTranslation, exactTerms, excludeTerms, fileType, filter, gl, googleHost, highRange, hl, hq, imgColorType, imgDominantColor, imgSize, imgType, inputEncoding, language, linkSite, lowRange, orTerms, outputEncoding, relatedSite, rights, safe, searchTerms, searchType, siteSearch, siteSearchFilter, sort, startIndex, startPage, title, totalResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchQueriesNextPageInner {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    cr: ").append(toIndentedString(cr)).append("\n");
    sb.append("    cx: ").append(toIndentedString(cx)).append("\n");
    sb.append("    dateRestrict: ").append(toIndentedString(dateRestrict)).append("\n");
    sb.append("    disableCnTwTranslation: ").append(toIndentedString(disableCnTwTranslation)).append("\n");
    sb.append("    exactTerms: ").append(toIndentedString(exactTerms)).append("\n");
    sb.append("    excludeTerms: ").append(toIndentedString(excludeTerms)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    gl: ").append(toIndentedString(gl)).append("\n");
    sb.append("    googleHost: ").append(toIndentedString(googleHost)).append("\n");
    sb.append("    highRange: ").append(toIndentedString(highRange)).append("\n");
    sb.append("    hl: ").append(toIndentedString(hl)).append("\n");
    sb.append("    hq: ").append(toIndentedString(hq)).append("\n");
    sb.append("    imgColorType: ").append(toIndentedString(imgColorType)).append("\n");
    sb.append("    imgDominantColor: ").append(toIndentedString(imgDominantColor)).append("\n");
    sb.append("    imgSize: ").append(toIndentedString(imgSize)).append("\n");
    sb.append("    imgType: ").append(toIndentedString(imgType)).append("\n");
    sb.append("    inputEncoding: ").append(toIndentedString(inputEncoding)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    linkSite: ").append(toIndentedString(linkSite)).append("\n");
    sb.append("    lowRange: ").append(toIndentedString(lowRange)).append("\n");
    sb.append("    orTerms: ").append(toIndentedString(orTerms)).append("\n");
    sb.append("    outputEncoding: ").append(toIndentedString(outputEncoding)).append("\n");
    sb.append("    relatedSite: ").append(toIndentedString(relatedSite)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    safe: ").append(toIndentedString(safe)).append("\n");
    sb.append("    searchTerms: ").append(toIndentedString(searchTerms)).append("\n");
    sb.append("    searchType: ").append(toIndentedString(searchType)).append("\n");
    sb.append("    siteSearch: ").append(toIndentedString(siteSearch)).append("\n");
    sb.append("    siteSearchFilter: ").append(toIndentedString(siteSearchFilter)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("cr");
    openapiFields.add("cx");
    openapiFields.add("dateRestrict");
    openapiFields.add("disableCnTwTranslation");
    openapiFields.add("exactTerms");
    openapiFields.add("excludeTerms");
    openapiFields.add("fileType");
    openapiFields.add("filter");
    openapiFields.add("gl");
    openapiFields.add("googleHost");
    openapiFields.add("highRange");
    openapiFields.add("hl");
    openapiFields.add("hq");
    openapiFields.add("imgColorType");
    openapiFields.add("imgDominantColor");
    openapiFields.add("imgSize");
    openapiFields.add("imgType");
    openapiFields.add("inputEncoding");
    openapiFields.add("language");
    openapiFields.add("linkSite");
    openapiFields.add("lowRange");
    openapiFields.add("orTerms");
    openapiFields.add("outputEncoding");
    openapiFields.add("relatedSite");
    openapiFields.add("rights");
    openapiFields.add("safe");
    openapiFields.add("searchTerms");
    openapiFields.add("searchType");
    openapiFields.add("siteSearch");
    openapiFields.add("siteSearchFilter");
    openapiFields.add("sort");
    openapiFields.add("startIndex");
    openapiFields.add("startPage");
    openapiFields.add("title");
    openapiFields.add("totalResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchQueriesNextPageInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchQueriesNextPageInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchQueriesNextPageInner is not found in the empty JSON string", SearchQueriesNextPageInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchQueriesNextPageInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchQueriesNextPageInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cr") != null && !jsonObj.get("cr").isJsonNull()) && !jsonObj.get("cr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cr").toString()));
      }
      if ((jsonObj.get("cx") != null && !jsonObj.get("cx").isJsonNull()) && !jsonObj.get("cx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cx").toString()));
      }
      if ((jsonObj.get("dateRestrict") != null && !jsonObj.get("dateRestrict").isJsonNull()) && !jsonObj.get("dateRestrict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateRestrict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateRestrict").toString()));
      }
      if ((jsonObj.get("disableCnTwTranslation") != null && !jsonObj.get("disableCnTwTranslation").isJsonNull()) && !jsonObj.get("disableCnTwTranslation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableCnTwTranslation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableCnTwTranslation").toString()));
      }
      if ((jsonObj.get("exactTerms") != null && !jsonObj.get("exactTerms").isJsonNull()) && !jsonObj.get("exactTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exactTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exactTerms").toString()));
      }
      if ((jsonObj.get("excludeTerms") != null && !jsonObj.get("excludeTerms").isJsonNull()) && !jsonObj.get("excludeTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludeTerms").toString()));
      }
      if ((jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) && !jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("gl") != null && !jsonObj.get("gl").isJsonNull()) && !jsonObj.get("gl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gl").toString()));
      }
      if ((jsonObj.get("googleHost") != null && !jsonObj.get("googleHost").isJsonNull()) && !jsonObj.get("googleHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleHost").toString()));
      }
      if ((jsonObj.get("highRange") != null && !jsonObj.get("highRange").isJsonNull()) && !jsonObj.get("highRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highRange").toString()));
      }
      if ((jsonObj.get("hl") != null && !jsonObj.get("hl").isJsonNull()) && !jsonObj.get("hl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hl").toString()));
      }
      if ((jsonObj.get("hq") != null && !jsonObj.get("hq").isJsonNull()) && !jsonObj.get("hq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hq").toString()));
      }
      if ((jsonObj.get("imgColorType") != null && !jsonObj.get("imgColorType").isJsonNull()) && !jsonObj.get("imgColorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imgColorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imgColorType").toString()));
      }
      if ((jsonObj.get("imgDominantColor") != null && !jsonObj.get("imgDominantColor").isJsonNull()) && !jsonObj.get("imgDominantColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imgDominantColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imgDominantColor").toString()));
      }
      if ((jsonObj.get("imgSize") != null && !jsonObj.get("imgSize").isJsonNull()) && !jsonObj.get("imgSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imgSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imgSize").toString()));
      }
      if ((jsonObj.get("imgType") != null && !jsonObj.get("imgType").isJsonNull()) && !jsonObj.get("imgType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imgType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imgType").toString()));
      }
      if ((jsonObj.get("inputEncoding") != null && !jsonObj.get("inputEncoding").isJsonNull()) && !jsonObj.get("inputEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputEncoding").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("linkSite") != null && !jsonObj.get("linkSite").isJsonNull()) && !jsonObj.get("linkSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkSite").toString()));
      }
      if ((jsonObj.get("lowRange") != null && !jsonObj.get("lowRange").isJsonNull()) && !jsonObj.get("lowRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowRange").toString()));
      }
      if ((jsonObj.get("orTerms") != null && !jsonObj.get("orTerms").isJsonNull()) && !jsonObj.get("orTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orTerms").toString()));
      }
      if ((jsonObj.get("outputEncoding") != null && !jsonObj.get("outputEncoding").isJsonNull()) && !jsonObj.get("outputEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputEncoding").toString()));
      }
      if ((jsonObj.get("relatedSite") != null && !jsonObj.get("relatedSite").isJsonNull()) && !jsonObj.get("relatedSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedSite").toString()));
      }
      if ((jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) && !jsonObj.get("rights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rights").toString()));
      }
      if ((jsonObj.get("safe") != null && !jsonObj.get("safe").isJsonNull()) && !jsonObj.get("safe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safe").toString()));
      }
      if ((jsonObj.get("searchTerms") != null && !jsonObj.get("searchTerms").isJsonNull()) && !jsonObj.get("searchTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchTerms").toString()));
      }
      if ((jsonObj.get("searchType") != null && !jsonObj.get("searchType").isJsonNull()) && !jsonObj.get("searchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchType").toString()));
      }
      if ((jsonObj.get("siteSearch") != null && !jsonObj.get("siteSearch").isJsonNull()) && !jsonObj.get("siteSearch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteSearch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteSearch").toString()));
      }
      if ((jsonObj.get("siteSearchFilter") != null && !jsonObj.get("siteSearchFilter").isJsonNull()) && !jsonObj.get("siteSearchFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteSearchFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteSearchFilter").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("totalResults") != null && !jsonObj.get("totalResults").isJsonNull()) && !jsonObj.get("totalResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalResults").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchQueriesNextPageInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchQueriesNextPageInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchQueriesNextPageInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchQueriesNextPageInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchQueriesNextPageInner>() {
           @Override
           public void write(JsonWriter out, SearchQueriesNextPageInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchQueriesNextPageInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchQueriesNextPageInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchQueriesNextPageInner
   * @throws IOException if the JSON string is invalid with respect to SearchQueriesNextPageInner
   */
  public static SearchQueriesNextPageInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchQueriesNextPageInner.class);
  }

  /**
   * Convert an instance of SearchQueriesNextPageInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

