/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PromotionBodyLinesInner;
import org.openapitools.client.model.PromotionImage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Promotion result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Promotion {
  public static final String SERIALIZED_NAME_BODY_LINES = "bodyLines";
  @SerializedName(SERIALIZED_NAME_BODY_LINES)
  private List<PromotionBodyLinesInner> bodyLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_LINK = "displayLink";
  @SerializedName(SERIALIZED_NAME_DISPLAY_LINK)
  private String displayLink;

  public static final String SERIALIZED_NAME_HTML_TITLE = "htmlTitle";
  @SerializedName(SERIALIZED_NAME_HTML_TITLE)
  private String htmlTitle;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private PromotionImage image;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Promotion() {
  }

  public Promotion bodyLines(List<PromotionBodyLinesInner> bodyLines) {
    this.bodyLines = bodyLines;
    return this;
  }

  public Promotion addBodyLinesItem(PromotionBodyLinesInner bodyLinesItem) {
    if (this.bodyLines == null) {
      this.bodyLines = new ArrayList<>();
    }
    this.bodyLines.add(bodyLinesItem);
    return this;
  }

  /**
   * An array of block objects for this promotion.
   * @return bodyLines
   */
  @javax.annotation.Nullable
  public List<PromotionBodyLinesInner> getBodyLines() {
    return bodyLines;
  }

  public void setBodyLines(List<PromotionBodyLinesInner> bodyLines) {
    this.bodyLines = bodyLines;
  }


  public Promotion displayLink(String displayLink) {
    this.displayLink = displayLink;
    return this;
  }

  /**
   * An abridged version of this search&#39;s result URL, e.g. www.example.com.
   * @return displayLink
   */
  @javax.annotation.Nullable
  public String getDisplayLink() {
    return displayLink;
  }

  public void setDisplayLink(String displayLink) {
    this.displayLink = displayLink;
  }


  public Promotion htmlTitle(String htmlTitle) {
    this.htmlTitle = htmlTitle;
    return this;
  }

  /**
   * The title of the promotion, in HTML.
   * @return htmlTitle
   */
  @javax.annotation.Nullable
  public String getHtmlTitle() {
    return htmlTitle;
  }

  public void setHtmlTitle(String htmlTitle) {
    this.htmlTitle = htmlTitle;
  }


  public Promotion image(PromotionImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public PromotionImage getImage() {
    return image;
  }

  public void setImage(PromotionImage image) {
    this.image = image;
  }


  public Promotion link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The URL of the promotion.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Promotion title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the promotion.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Promotion promotion = (Promotion) o;
    return Objects.equals(this.bodyLines, promotion.bodyLines) &&
        Objects.equals(this.displayLink, promotion.displayLink) &&
        Objects.equals(this.htmlTitle, promotion.htmlTitle) &&
        Objects.equals(this.image, promotion.image) &&
        Objects.equals(this.link, promotion.link) &&
        Objects.equals(this.title, promotion.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyLines, displayLink, htmlTitle, image, link, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Promotion {\n");
    sb.append("    bodyLines: ").append(toIndentedString(bodyLines)).append("\n");
    sb.append("    displayLink: ").append(toIndentedString(displayLink)).append("\n");
    sb.append("    htmlTitle: ").append(toIndentedString(htmlTitle)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bodyLines");
    openapiFields.add("displayLink");
    openapiFields.add("htmlTitle");
    openapiFields.add("image");
    openapiFields.add("link");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Promotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Promotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Promotion is not found in the empty JSON string", Promotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Promotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Promotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bodyLines") != null && !jsonObj.get("bodyLines").isJsonNull()) {
        JsonArray jsonArraybodyLines = jsonObj.getAsJsonArray("bodyLines");
        if (jsonArraybodyLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bodyLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bodyLines` to be an array in the JSON string but got `%s`", jsonObj.get("bodyLines").toString()));
          }

          // validate the optional field `bodyLines` (array)
          for (int i = 0; i < jsonArraybodyLines.size(); i++) {
            PromotionBodyLinesInner.validateJsonElement(jsonArraybodyLines.get(i));
          };
        }
      }
      if ((jsonObj.get("displayLink") != null && !jsonObj.get("displayLink").isJsonNull()) && !jsonObj.get("displayLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayLink").toString()));
      }
      if ((jsonObj.get("htmlTitle") != null && !jsonObj.get("htmlTitle").isJsonNull()) && !jsonObj.get("htmlTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlTitle").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        PromotionImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Promotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Promotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Promotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Promotion.class));

       return (TypeAdapter<T>) new TypeAdapter<Promotion>() {
           @Override
           public void write(JsonWriter out, Promotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Promotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Promotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Promotion
   * @throws IOException if the JSON string is invalid with respect to Promotion
   */
  public static Promotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Promotion.class);
  }

  /**
   * Convert an instance of Promotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

