/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Promotion;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.SearchQueries;
import org.openapitools.client.model.SearchSearchInformation;
import org.openapitools.client.model.SearchSpelling;
import org.openapitools.client.model.SearchUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response to a custom search request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Search {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Map<String, Object> context = new HashMap<>();

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Result> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<Promotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private SearchQueries queries;

  public static final String SERIALIZED_NAME_SEARCH_INFORMATION = "searchInformation";
  @SerializedName(SERIALIZED_NAME_SEARCH_INFORMATION)
  private SearchSearchInformation searchInformation;

  public static final String SERIALIZED_NAME_SPELLING = "spelling";
  @SerializedName(SERIALIZED_NAME_SPELLING)
  private SearchSpelling spelling;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private SearchUrl url;

  public Search() {
  }

  public Search context(Map<String, Object> context) {
    this.context = context;
    return this;
  }

  public Search putContextItem(String key, Object contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

  /**
   * Metadata and refinements associated with the given search engine, including: * The name of the search engine that was used for the query. * A set of [facet objects](https://developers.google.com/custom-search/docs/refinements#create) (refinements) you can use for refining a search.
   * @return context
   */
  @javax.annotation.Nullable
  public Map<String, Object> getContext() {
    return context;
  }

  public void setContext(Map<String, Object> context) {
    this.context = context;
  }


  public Search items(List<Result> items) {
    this.items = items;
    return this;
  }

  public Search addItemsItem(Result itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The current set of custom search results.
   * @return items
   */
  @javax.annotation.Nullable
  public List<Result> getItems() {
    return items;
  }

  public void setItems(List<Result> items) {
    this.items = items;
  }


  public Search kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Unique identifier for the type of current object. For this API, it is customsearch#search.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Search promotions(List<Promotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public Search addPromotionsItem(Promotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * The set of [promotions](https://developers.google.com/custom-search/docs/promotions). Present only if the custom search engine&#39;s configuration files define any promotions for the given query.
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<Promotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<Promotion> promotions) {
    this.promotions = promotions;
  }


  public Search queries(SearchQueries queries) {
    this.queries = queries;
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nullable
  public SearchQueries getQueries() {
    return queries;
  }

  public void setQueries(SearchQueries queries) {
    this.queries = queries;
  }


  public Search searchInformation(SearchSearchInformation searchInformation) {
    this.searchInformation = searchInformation;
    return this;
  }

  /**
   * Get searchInformation
   * @return searchInformation
   */
  @javax.annotation.Nullable
  public SearchSearchInformation getSearchInformation() {
    return searchInformation;
  }

  public void setSearchInformation(SearchSearchInformation searchInformation) {
    this.searchInformation = searchInformation;
  }


  public Search spelling(SearchSpelling spelling) {
    this.spelling = spelling;
    return this;
  }

  /**
   * Get spelling
   * @return spelling
   */
  @javax.annotation.Nullable
  public SearchSpelling getSpelling() {
    return spelling;
  }

  public void setSpelling(SearchSpelling spelling) {
    this.spelling = spelling;
  }


  public Search url(SearchUrl url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public SearchUrl getUrl() {
    return url;
  }

  public void setUrl(SearchUrl url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Search search = (Search) o;
    return Objects.equals(this.context, search.context) &&
        Objects.equals(this.items, search.items) &&
        Objects.equals(this.kind, search.kind) &&
        Objects.equals(this.promotions, search.promotions) &&
        Objects.equals(this.queries, search.queries) &&
        Objects.equals(this.searchInformation, search.searchInformation) &&
        Objects.equals(this.spelling, search.spelling) &&
        Objects.equals(this.url, search.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, items, kind, promotions, queries, searchInformation, spelling, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Search {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    searchInformation: ").append(toIndentedString(searchInformation)).append("\n");
    sb.append("    spelling: ").append(toIndentedString(spelling)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("items");
    openapiFields.add("kind");
    openapiFields.add("promotions");
    openapiFields.add("queries");
    openapiFields.add("searchInformation");
    openapiFields.add("spelling");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Search
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Search.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Search is not found in the empty JSON string", Search.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Search.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Search` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Result.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            Promotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      // validate the optional field `queries`
      if (jsonObj.get("queries") != null && !jsonObj.get("queries").isJsonNull()) {
        SearchQueries.validateJsonElement(jsonObj.get("queries"));
      }
      // validate the optional field `searchInformation`
      if (jsonObj.get("searchInformation") != null && !jsonObj.get("searchInformation").isJsonNull()) {
        SearchSearchInformation.validateJsonElement(jsonObj.get("searchInformation"));
      }
      // validate the optional field `spelling`
      if (jsonObj.get("spelling") != null && !jsonObj.get("spelling").isJsonNull()) {
        SearchSpelling.validateJsonElement(jsonObj.get("spelling"));
      }
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        SearchUrl.validateJsonElement(jsonObj.get("url"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Search.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Search' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Search> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Search.class));

       return (TypeAdapter<T>) new TypeAdapter<Search>() {
           @Override
           public void write(JsonWriter out, Search value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Search read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Search given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Search
   * @throws IOException if the JSON string is invalid with respect to Search
   */
  public static Search fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Search.class);
  }

  /**
   * Convert an instance of Search to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

