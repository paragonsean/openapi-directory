/*
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Image belonging to a custom search result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:19.612460-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultImage {
  public static final String SERIALIZED_NAME_BYTE_SIZE = "byteSize";
  @SerializedName(SERIALIZED_NAME_BYTE_SIZE)
  private Integer byteSize;

  public static final String SERIALIZED_NAME_CONTEXT_LINK = "contextLink";
  @SerializedName(SERIALIZED_NAME_CONTEXT_LINK)
  private String contextLink;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "thumbnailHeight";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight;

  public static final String SERIALIZED_NAME_THUMBNAIL_LINK = "thumbnailLink";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_LINK)
  private String thumbnailLink;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "thumbnailWidth";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public ResultImage() {
  }

  public ResultImage byteSize(Integer byteSize) {
    this.byteSize = byteSize;
    return this;
  }

  /**
   * The size of the image, in bytes.
   * @return byteSize
   */
  @javax.annotation.Nullable
  public Integer getByteSize() {
    return byteSize;
  }

  public void setByteSize(Integer byteSize) {
    this.byteSize = byteSize;
  }


  public ResultImage contextLink(String contextLink) {
    this.contextLink = contextLink;
    return this;
  }

  /**
   * A URL pointing to the webpage hosting the image.
   * @return contextLink
   */
  @javax.annotation.Nullable
  public String getContextLink() {
    return contextLink;
  }

  public void setContextLink(String contextLink) {
    this.contextLink = contextLink;
  }


  public ResultImage height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the image, in pixels.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public ResultImage thumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

  /**
   * The height of the thumbnail image, in pixels.
   * @return thumbnailHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }

  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public ResultImage thumbnailLink(String thumbnailLink) {
    this.thumbnailLink = thumbnailLink;
    return this;
  }

  /**
   * A URL to the thumbnail image.
   * @return thumbnailLink
   */
  @javax.annotation.Nullable
  public String getThumbnailLink() {
    return thumbnailLink;
  }

  public void setThumbnailLink(String thumbnailLink) {
    this.thumbnailLink = thumbnailLink;
  }


  public ResultImage thumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

  /**
   * The width of the thumbnail image, in pixels.
   * @return thumbnailWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }

  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public ResultImage width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the image, in pixels.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultImage resultImage = (ResultImage) o;
    return Objects.equals(this.byteSize, resultImage.byteSize) &&
        Objects.equals(this.contextLink, resultImage.contextLink) &&
        Objects.equals(this.height, resultImage.height) &&
        Objects.equals(this.thumbnailHeight, resultImage.thumbnailHeight) &&
        Objects.equals(this.thumbnailLink, resultImage.thumbnailLink) &&
        Objects.equals(this.thumbnailWidth, resultImage.thumbnailWidth) &&
        Objects.equals(this.width, resultImage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(byteSize, contextLink, height, thumbnailHeight, thumbnailLink, thumbnailWidth, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultImage {\n");
    sb.append("    byteSize: ").append(toIndentedString(byteSize)).append("\n");
    sb.append("    contextLink: ").append(toIndentedString(contextLink)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    thumbnailLink: ").append(toIndentedString(thumbnailLink)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("byteSize");
    openapiFields.add("contextLink");
    openapiFields.add("height");
    openapiFields.add("thumbnailHeight");
    openapiFields.add("thumbnailLink");
    openapiFields.add("thumbnailWidth");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultImage is not found in the empty JSON string", ResultImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contextLink") != null && !jsonObj.get("contextLink").isJsonNull()) && !jsonObj.get("contextLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextLink").toString()));
      }
      if ((jsonObj.get("thumbnailLink") != null && !jsonObj.get("thumbnailLink").isJsonNull()) && !jsonObj.get("thumbnailLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultImage.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultImage>() {
           @Override
           public void write(JsonWriter out, ResultImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultImage
   * @throws IOException if the JSON string is invalid with respect to ResultImage
   */
  public static ResultImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultImage.class);
  }

  /**
   * Convert an instance of ResultImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

