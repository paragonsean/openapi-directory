/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_queries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_queries::OAISearch_queries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_queries::OAISearch_queries() {
    this->initializeModel();
}

OAISearch_queries::~OAISearch_queries() {}

void OAISearch_queries::initializeModel() {

    m_next_page_isSet = false;
    m_next_page_isValid = false;

    m_previous_page_isSet = false;
    m_previous_page_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;
}

void OAISearch_queries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_queries::fromJsonObject(QJsonObject json) {

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("nextPage")]);
    m_next_page_isSet = !json[QString("nextPage")].isNull() && m_next_page_isValid;

    m_previous_page_isValid = ::OpenAPI::fromJsonValue(m_previous_page, json[QString("previousPage")]);
    m_previous_page_isSet = !json[QString("previousPage")].isNull() && m_previous_page_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;
}

QString OAISearch_queries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_queries::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page.size() > 0) {
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(m_next_page));
    }
    if (m_previous_page.size() > 0) {
        obj.insert(QString("previousPage"), ::OpenAPI::toJsonValue(m_previous_page));
    }
    if (m_request.size() > 0) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    return obj;
}

QList<OAISearch_queries_nextPage_inner> OAISearch_queries::getNextPage() const {
    return m_next_page;
}
void OAISearch_queries::setNextPage(const QList<OAISearch_queries_nextPage_inner> &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAISearch_queries::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAISearch_queries::is_next_page_Valid() const{
    return m_next_page_isValid;
}

QList<OAISearch_queries_nextPage_inner> OAISearch_queries::getPreviousPage() const {
    return m_previous_page;
}
void OAISearch_queries::setPreviousPage(const QList<OAISearch_queries_nextPage_inner> &previous_page) {
    m_previous_page = previous_page;
    m_previous_page_isSet = true;
}

bool OAISearch_queries::is_previous_page_Set() const{
    return m_previous_page_isSet;
}

bool OAISearch_queries::is_previous_page_Valid() const{
    return m_previous_page_isValid;
}

QList<OAISearch_queries_nextPage_inner> OAISearch_queries::getRequest() const {
    return m_request;
}
void OAISearch_queries::setRequest(const QList<OAISearch_queries_nextPage_inner> &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAISearch_queries::is_request_Set() const{
    return m_request_isSet;
}

bool OAISearch_queries::is_request_Valid() const{
    return m_request_isValid;
}

bool OAISearch_queries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_queries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
