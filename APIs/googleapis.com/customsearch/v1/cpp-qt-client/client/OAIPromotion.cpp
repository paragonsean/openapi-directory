/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotion::OAIPromotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotion::OAIPromotion() {
    this->initializeModel();
}

OAIPromotion::~OAIPromotion() {}

void OAIPromotion::initializeModel() {

    m_body_lines_isSet = false;
    m_body_lines_isValid = false;

    m_display_link_isSet = false;
    m_display_link_isValid = false;

    m_html_title_isSet = false;
    m_html_title_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPromotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotion::fromJsonObject(QJsonObject json) {

    m_body_lines_isValid = ::OpenAPI::fromJsonValue(m_body_lines, json[QString("bodyLines")]);
    m_body_lines_isSet = !json[QString("bodyLines")].isNull() && m_body_lines_isValid;

    m_display_link_isValid = ::OpenAPI::fromJsonValue(m_display_link, json[QString("displayLink")]);
    m_display_link_isSet = !json[QString("displayLink")].isNull() && m_display_link_isValid;

    m_html_title_isValid = ::OpenAPI::fromJsonValue(m_html_title, json[QString("htmlTitle")]);
    m_html_title_isSet = !json[QString("htmlTitle")].isNull() && m_html_title_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPromotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotion::asJsonObject() const {
    QJsonObject obj;
    if (m_body_lines.size() > 0) {
        obj.insert(QString("bodyLines"), ::OpenAPI::toJsonValue(m_body_lines));
    }
    if (m_display_link_isSet) {
        obj.insert(QString("displayLink"), ::OpenAPI::toJsonValue(m_display_link));
    }
    if (m_html_title_isSet) {
        obj.insert(QString("htmlTitle"), ::OpenAPI::toJsonValue(m_html_title));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIPromotion_bodyLines_inner> OAIPromotion::getBodyLines() const {
    return m_body_lines;
}
void OAIPromotion::setBodyLines(const QList<OAIPromotion_bodyLines_inner> &body_lines) {
    m_body_lines = body_lines;
    m_body_lines_isSet = true;
}

bool OAIPromotion::is_body_lines_Set() const{
    return m_body_lines_isSet;
}

bool OAIPromotion::is_body_lines_Valid() const{
    return m_body_lines_isValid;
}

QString OAIPromotion::getDisplayLink() const {
    return m_display_link;
}
void OAIPromotion::setDisplayLink(const QString &display_link) {
    m_display_link = display_link;
    m_display_link_isSet = true;
}

bool OAIPromotion::is_display_link_Set() const{
    return m_display_link_isSet;
}

bool OAIPromotion::is_display_link_Valid() const{
    return m_display_link_isValid;
}

QString OAIPromotion::getHtmlTitle() const {
    return m_html_title;
}
void OAIPromotion::setHtmlTitle(const QString &html_title) {
    m_html_title = html_title;
    m_html_title_isSet = true;
}

bool OAIPromotion::is_html_title_Set() const{
    return m_html_title_isSet;
}

bool OAIPromotion::is_html_title_Valid() const{
    return m_html_title_isValid;
}

OAIPromotion_image OAIPromotion::getImage() const {
    return m_image;
}
void OAIPromotion::setImage(const OAIPromotion_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPromotion::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPromotion::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPromotion::getLink() const {
    return m_link;
}
void OAIPromotion::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPromotion::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPromotion::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPromotion::getTitle() const {
    return m_title;
}
void OAIPromotion::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPromotion::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPromotion::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPromotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
