/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult::OAIResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult::OAIResult() {
    this->initializeModel();
}

OAIResult::~OAIResult() {}

void OAIResult::initializeModel() {

    m_cache_id_isSet = false;
    m_cache_id_isValid = false;

    m_display_link_isSet = false;
    m_display_link_isValid = false;

    m_file_format_isSet = false;
    m_file_format_isValid = false;

    m_formatted_url_isSet = false;
    m_formatted_url_isValid = false;

    m_html_formatted_url_isSet = false;
    m_html_formatted_url_isValid = false;

    m_html_snippet_isSet = false;
    m_html_snippet_isValid = false;

    m_html_title_isSet = false;
    m_html_title_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mime_isSet = false;
    m_mime_isValid = false;

    m_pagemap_isSet = false;
    m_pagemap_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult::fromJsonObject(QJsonObject json) {

    m_cache_id_isValid = ::OpenAPI::fromJsonValue(m_cache_id, json[QString("cacheId")]);
    m_cache_id_isSet = !json[QString("cacheId")].isNull() && m_cache_id_isValid;

    m_display_link_isValid = ::OpenAPI::fromJsonValue(m_display_link, json[QString("displayLink")]);
    m_display_link_isSet = !json[QString("displayLink")].isNull() && m_display_link_isValid;

    m_file_format_isValid = ::OpenAPI::fromJsonValue(m_file_format, json[QString("fileFormat")]);
    m_file_format_isSet = !json[QString("fileFormat")].isNull() && m_file_format_isValid;

    m_formatted_url_isValid = ::OpenAPI::fromJsonValue(m_formatted_url, json[QString("formattedUrl")]);
    m_formatted_url_isSet = !json[QString("formattedUrl")].isNull() && m_formatted_url_isValid;

    m_html_formatted_url_isValid = ::OpenAPI::fromJsonValue(m_html_formatted_url, json[QString("htmlFormattedUrl")]);
    m_html_formatted_url_isSet = !json[QString("htmlFormattedUrl")].isNull() && m_html_formatted_url_isValid;

    m_html_snippet_isValid = ::OpenAPI::fromJsonValue(m_html_snippet, json[QString("htmlSnippet")]);
    m_html_snippet_isSet = !json[QString("htmlSnippet")].isNull() && m_html_snippet_isValid;

    m_html_title_isValid = ::OpenAPI::fromJsonValue(m_html_title, json[QString("htmlTitle")]);
    m_html_title_isSet = !json[QString("htmlTitle")].isNull() && m_html_title_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mime_isValid = ::OpenAPI::fromJsonValue(m_mime, json[QString("mime")]);
    m_mime_isSet = !json[QString("mime")].isNull() && m_mime_isValid;

    m_pagemap_isValid = ::OpenAPI::fromJsonValue(m_pagemap, json[QString("pagemap")]);
    m_pagemap_isSet = !json[QString("pagemap")].isNull() && m_pagemap_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_id_isSet) {
        obj.insert(QString("cacheId"), ::OpenAPI::toJsonValue(m_cache_id));
    }
    if (m_display_link_isSet) {
        obj.insert(QString("displayLink"), ::OpenAPI::toJsonValue(m_display_link));
    }
    if (m_file_format_isSet) {
        obj.insert(QString("fileFormat"), ::OpenAPI::toJsonValue(m_file_format));
    }
    if (m_formatted_url_isSet) {
        obj.insert(QString("formattedUrl"), ::OpenAPI::toJsonValue(m_formatted_url));
    }
    if (m_html_formatted_url_isSet) {
        obj.insert(QString("htmlFormattedUrl"), ::OpenAPI::toJsonValue(m_html_formatted_url));
    }
    if (m_html_snippet_isSet) {
        obj.insert(QString("htmlSnippet"), ::OpenAPI::toJsonValue(m_html_snippet));
    }
    if (m_html_title_isSet) {
        obj.insert(QString("htmlTitle"), ::OpenAPI::toJsonValue(m_html_title));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mime_isSet) {
        obj.insert(QString("mime"), ::OpenAPI::toJsonValue(m_mime));
    }
    if (m_pagemap.size() > 0) {
        obj.insert(QString("pagemap"), ::OpenAPI::toJsonValue(m_pagemap));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIResult::getCacheId() const {
    return m_cache_id;
}
void OAIResult::setCacheId(const QString &cache_id) {
    m_cache_id = cache_id;
    m_cache_id_isSet = true;
}

bool OAIResult::is_cache_id_Set() const{
    return m_cache_id_isSet;
}

bool OAIResult::is_cache_id_Valid() const{
    return m_cache_id_isValid;
}

QString OAIResult::getDisplayLink() const {
    return m_display_link;
}
void OAIResult::setDisplayLink(const QString &display_link) {
    m_display_link = display_link;
    m_display_link_isSet = true;
}

bool OAIResult::is_display_link_Set() const{
    return m_display_link_isSet;
}

bool OAIResult::is_display_link_Valid() const{
    return m_display_link_isValid;
}

QString OAIResult::getFileFormat() const {
    return m_file_format;
}
void OAIResult::setFileFormat(const QString &file_format) {
    m_file_format = file_format;
    m_file_format_isSet = true;
}

bool OAIResult::is_file_format_Set() const{
    return m_file_format_isSet;
}

bool OAIResult::is_file_format_Valid() const{
    return m_file_format_isValid;
}

QString OAIResult::getFormattedUrl() const {
    return m_formatted_url;
}
void OAIResult::setFormattedUrl(const QString &formatted_url) {
    m_formatted_url = formatted_url;
    m_formatted_url_isSet = true;
}

bool OAIResult::is_formatted_url_Set() const{
    return m_formatted_url_isSet;
}

bool OAIResult::is_formatted_url_Valid() const{
    return m_formatted_url_isValid;
}

QString OAIResult::getHtmlFormattedUrl() const {
    return m_html_formatted_url;
}
void OAIResult::setHtmlFormattedUrl(const QString &html_formatted_url) {
    m_html_formatted_url = html_formatted_url;
    m_html_formatted_url_isSet = true;
}

bool OAIResult::is_html_formatted_url_Set() const{
    return m_html_formatted_url_isSet;
}

bool OAIResult::is_html_formatted_url_Valid() const{
    return m_html_formatted_url_isValid;
}

QString OAIResult::getHtmlSnippet() const {
    return m_html_snippet;
}
void OAIResult::setHtmlSnippet(const QString &html_snippet) {
    m_html_snippet = html_snippet;
    m_html_snippet_isSet = true;
}

bool OAIResult::is_html_snippet_Set() const{
    return m_html_snippet_isSet;
}

bool OAIResult::is_html_snippet_Valid() const{
    return m_html_snippet_isValid;
}

QString OAIResult::getHtmlTitle() const {
    return m_html_title;
}
void OAIResult::setHtmlTitle(const QString &html_title) {
    m_html_title = html_title;
    m_html_title_isSet = true;
}

bool OAIResult::is_html_title_Set() const{
    return m_html_title_isSet;
}

bool OAIResult::is_html_title_Valid() const{
    return m_html_title_isValid;
}

OAIResult_image OAIResult::getImage() const {
    return m_image;
}
void OAIResult::setImage(const OAIResult_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIResult::is_image_Set() const{
    return m_image_isSet;
}

bool OAIResult::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIResult::getKind() const {
    return m_kind;
}
void OAIResult::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIResult::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIResult::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIResult_labels_inner> OAIResult::getLabels() const {
    return m_labels;
}
void OAIResult::setLabels(const QList<OAIResult_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIResult::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIResult::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIResult::getLink() const {
    return m_link;
}
void OAIResult::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIResult::is_link_Set() const{
    return m_link_isSet;
}

bool OAIResult::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIResult::getMime() const {
    return m_mime;
}
void OAIResult::setMime(const QString &mime) {
    m_mime = mime;
    m_mime_isSet = true;
}

bool OAIResult::is_mime_Set() const{
    return m_mime_isSet;
}

bool OAIResult::is_mime_Valid() const{
    return m_mime_isValid;
}

QMap<QString, QJsonValue> OAIResult::getPagemap() const {
    return m_pagemap;
}
void OAIResult::setPagemap(const QMap<QString, QJsonValue> &pagemap) {
    m_pagemap = pagemap;
    m_pagemap_isSet = true;
}

bool OAIResult::is_pagemap_Set() const{
    return m_pagemap_isSet;
}

bool OAIResult::is_pagemap_Valid() const{
    return m_pagemap_isValid;
}

QString OAIResult::getSnippet() const {
    return m_snippet;
}
void OAIResult::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIResult::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIResult::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAIResult::getTitle() const {
    return m_title;
}
void OAIResult::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIResult::is_title_Set() const{
    return m_title_isSet;
}

bool OAIResult::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_formatted_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagemap.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
