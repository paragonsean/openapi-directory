/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotion_image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotion_image::OAIPromotion_image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotion_image::OAIPromotion_image() {
    this->initializeModel();
}

OAIPromotion_image::~OAIPromotion_image() {}

void OAIPromotion_image::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPromotion_image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotion_image::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPromotion_image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotion_image::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIPromotion_image::getHeight() const {
    return m_height;
}
void OAIPromotion_image::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPromotion_image::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPromotion_image::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPromotion_image::getSource() const {
    return m_source;
}
void OAIPromotion_image::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPromotion_image::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPromotion_image::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIPromotion_image::getWidth() const {
    return m_width;
}
void OAIPromotion_image::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPromotion_image::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPromotion_image::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPromotion_image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotion_image::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
