/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult_image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult_image::OAIResult_image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult_image::OAIResult_image() {
    this->initializeModel();
}

OAIResult_image::~OAIResult_image() {}

void OAIResult_image::initializeModel() {

    m_byte_size_isSet = false;
    m_byte_size_isValid = false;

    m_context_link_isSet = false;
    m_context_link_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_thumbnail_height_isSet = false;
    m_thumbnail_height_isValid = false;

    m_thumbnail_link_isSet = false;
    m_thumbnail_link_isValid = false;

    m_thumbnail_width_isSet = false;
    m_thumbnail_width_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIResult_image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult_image::fromJsonObject(QJsonObject json) {

    m_byte_size_isValid = ::OpenAPI::fromJsonValue(m_byte_size, json[QString("byteSize")]);
    m_byte_size_isSet = !json[QString("byteSize")].isNull() && m_byte_size_isValid;

    m_context_link_isValid = ::OpenAPI::fromJsonValue(m_context_link, json[QString("contextLink")]);
    m_context_link_isSet = !json[QString("contextLink")].isNull() && m_context_link_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_thumbnail_height_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_height, json[QString("thumbnailHeight")]);
    m_thumbnail_height_isSet = !json[QString("thumbnailHeight")].isNull() && m_thumbnail_height_isValid;

    m_thumbnail_link_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_link, json[QString("thumbnailLink")]);
    m_thumbnail_link_isSet = !json[QString("thumbnailLink")].isNull() && m_thumbnail_link_isValid;

    m_thumbnail_width_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_width, json[QString("thumbnailWidth")]);
    m_thumbnail_width_isSet = !json[QString("thumbnailWidth")].isNull() && m_thumbnail_width_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIResult_image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult_image::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_size_isSet) {
        obj.insert(QString("byteSize"), ::OpenAPI::toJsonValue(m_byte_size));
    }
    if (m_context_link_isSet) {
        obj.insert(QString("contextLink"), ::OpenAPI::toJsonValue(m_context_link));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_thumbnail_height_isSet) {
        obj.insert(QString("thumbnailHeight"), ::OpenAPI::toJsonValue(m_thumbnail_height));
    }
    if (m_thumbnail_link_isSet) {
        obj.insert(QString("thumbnailLink"), ::OpenAPI::toJsonValue(m_thumbnail_link));
    }
    if (m_thumbnail_width_isSet) {
        obj.insert(QString("thumbnailWidth"), ::OpenAPI::toJsonValue(m_thumbnail_width));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIResult_image::getByteSize() const {
    return m_byte_size;
}
void OAIResult_image::setByteSize(const qint32 &byte_size) {
    m_byte_size = byte_size;
    m_byte_size_isSet = true;
}

bool OAIResult_image::is_byte_size_Set() const{
    return m_byte_size_isSet;
}

bool OAIResult_image::is_byte_size_Valid() const{
    return m_byte_size_isValid;
}

QString OAIResult_image::getContextLink() const {
    return m_context_link;
}
void OAIResult_image::setContextLink(const QString &context_link) {
    m_context_link = context_link;
    m_context_link_isSet = true;
}

bool OAIResult_image::is_context_link_Set() const{
    return m_context_link_isSet;
}

bool OAIResult_image::is_context_link_Valid() const{
    return m_context_link_isValid;
}

qint32 OAIResult_image::getHeight() const {
    return m_height;
}
void OAIResult_image::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIResult_image::is_height_Set() const{
    return m_height_isSet;
}

bool OAIResult_image::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIResult_image::getThumbnailHeight() const {
    return m_thumbnail_height;
}
void OAIResult_image::setThumbnailHeight(const qint32 &thumbnail_height) {
    m_thumbnail_height = thumbnail_height;
    m_thumbnail_height_isSet = true;
}

bool OAIResult_image::is_thumbnail_height_Set() const{
    return m_thumbnail_height_isSet;
}

bool OAIResult_image::is_thumbnail_height_Valid() const{
    return m_thumbnail_height_isValid;
}

QString OAIResult_image::getThumbnailLink() const {
    return m_thumbnail_link;
}
void OAIResult_image::setThumbnailLink(const QString &thumbnail_link) {
    m_thumbnail_link = thumbnail_link;
    m_thumbnail_link_isSet = true;
}

bool OAIResult_image::is_thumbnail_link_Set() const{
    return m_thumbnail_link_isSet;
}

bool OAIResult_image::is_thumbnail_link_Valid() const{
    return m_thumbnail_link_isValid;
}

qint32 OAIResult_image::getThumbnailWidth() const {
    return m_thumbnail_width;
}
void OAIResult_image::setThumbnailWidth(const qint32 &thumbnail_width) {
    m_thumbnail_width = thumbnail_width;
    m_thumbnail_width_isSet = true;
}

bool OAIResult_image::is_thumbnail_width_Set() const{
    return m_thumbnail_width_isSet;
}

bool OAIResult_image::is_thumbnail_width_Valid() const{
    return m_thumbnail_width_isValid;
}

qint32 OAIResult_image::getWidth() const {
    return m_width;
}
void OAIResult_image::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIResult_image::is_width_Set() const{
    return m_width_isSet;
}

bool OAIResult_image::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIResult_image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult_image::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
