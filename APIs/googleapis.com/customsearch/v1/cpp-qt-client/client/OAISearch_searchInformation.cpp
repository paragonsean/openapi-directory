/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_searchInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_searchInformation::OAISearch_searchInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_searchInformation::OAISearch_searchInformation() {
    this->initializeModel();
}

OAISearch_searchInformation::~OAISearch_searchInformation() {}

void OAISearch_searchInformation::initializeModel() {

    m_formatted_search_time_isSet = false;
    m_formatted_search_time_isValid = false;

    m_formatted_total_results_isSet = false;
    m_formatted_total_results_isValid = false;

    m_search_time_isSet = false;
    m_search_time_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAISearch_searchInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_searchInformation::fromJsonObject(QJsonObject json) {

    m_formatted_search_time_isValid = ::OpenAPI::fromJsonValue(m_formatted_search_time, json[QString("formattedSearchTime")]);
    m_formatted_search_time_isSet = !json[QString("formattedSearchTime")].isNull() && m_formatted_search_time_isValid;

    m_formatted_total_results_isValid = ::OpenAPI::fromJsonValue(m_formatted_total_results, json[QString("formattedTotalResults")]);
    m_formatted_total_results_isSet = !json[QString("formattedTotalResults")].isNull() && m_formatted_total_results_isValid;

    m_search_time_isValid = ::OpenAPI::fromJsonValue(m_search_time, json[QString("searchTime")]);
    m_search_time_isSet = !json[QString("searchTime")].isNull() && m_search_time_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAISearch_searchInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_searchInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_search_time_isSet) {
        obj.insert(QString("formattedSearchTime"), ::OpenAPI::toJsonValue(m_formatted_search_time));
    }
    if (m_formatted_total_results_isSet) {
        obj.insert(QString("formattedTotalResults"), ::OpenAPI::toJsonValue(m_formatted_total_results));
    }
    if (m_search_time_isSet) {
        obj.insert(QString("searchTime"), ::OpenAPI::toJsonValue(m_search_time));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QString OAISearch_searchInformation::getFormattedSearchTime() const {
    return m_formatted_search_time;
}
void OAISearch_searchInformation::setFormattedSearchTime(const QString &formatted_search_time) {
    m_formatted_search_time = formatted_search_time;
    m_formatted_search_time_isSet = true;
}

bool OAISearch_searchInformation::is_formatted_search_time_Set() const{
    return m_formatted_search_time_isSet;
}

bool OAISearch_searchInformation::is_formatted_search_time_Valid() const{
    return m_formatted_search_time_isValid;
}

QString OAISearch_searchInformation::getFormattedTotalResults() const {
    return m_formatted_total_results;
}
void OAISearch_searchInformation::setFormattedTotalResults(const QString &formatted_total_results) {
    m_formatted_total_results = formatted_total_results;
    m_formatted_total_results_isSet = true;
}

bool OAISearch_searchInformation::is_formatted_total_results_Set() const{
    return m_formatted_total_results_isSet;
}

bool OAISearch_searchInformation::is_formatted_total_results_Valid() const{
    return m_formatted_total_results_isValid;
}

double OAISearch_searchInformation::getSearchTime() const {
    return m_search_time;
}
void OAISearch_searchInformation::setSearchTime(const double &search_time) {
    m_search_time = search_time;
    m_search_time_isSet = true;
}

bool OAISearch_searchInformation::is_search_time_Set() const{
    return m_search_time_isSet;
}

bool OAISearch_searchInformation::is_search_time_Valid() const{
    return m_search_time_isValid;
}

QString OAISearch_searchInformation::getTotalResults() const {
    return m_total_results;
}
void OAISearch_searchInformation::setTotalResults(const QString &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAISearch_searchInformation::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearch_searchInformation::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAISearch_searchInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_search_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_searchInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
