/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICseApi_H
#define OAI_OAICseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISearch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICseApi : public QObject {
    Q_OBJECT

public:
    OAICseApi(const int timeOut = 0);
    ~OAICseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  c2coff QString [optional]
    * @param[in]  cr QString [optional]
    * @param[in]  cx QString [optional]
    * @param[in]  date_restrict QString [optional]
    * @param[in]  exact_terms QString [optional]
    * @param[in]  exclude_terms QString [optional]
    * @param[in]  file_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  gl QString [optional]
    * @param[in]  googlehost QString [optional]
    * @param[in]  high_range QString [optional]
    * @param[in]  hl QString [optional]
    * @param[in]  hq QString [optional]
    * @param[in]  img_color_type QString [optional]
    * @param[in]  img_dominant_color QString [optional]
    * @param[in]  img_size QString [optional]
    * @param[in]  img_type QString [optional]
    * @param[in]  link_site QString [optional]
    * @param[in]  low_range QString [optional]
    * @param[in]  lr QString [optional]
    * @param[in]  num qint32 [optional]
    * @param[in]  or_terms QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  related_site QString [optional]
    * @param[in]  rights QString [optional]
    * @param[in]  safe QString [optional]
    * @param[in]  search_type QString [optional]
    * @param[in]  site_search QString [optional]
    * @param[in]  site_search_filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  start qint32 [optional]
    */
    virtual void search_cse_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &c2coff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cx = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_restrict = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exact_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &googlehost = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &high_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_color_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_dominant_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link_site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &low_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &num = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &or_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &related_site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rights = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &safe = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_search_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  c2coff QString [optional]
    * @param[in]  cr QString [optional]
    * @param[in]  cx QString [optional]
    * @param[in]  date_restrict QString [optional]
    * @param[in]  exact_terms QString [optional]
    * @param[in]  exclude_terms QString [optional]
    * @param[in]  file_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  gl QString [optional]
    * @param[in]  googlehost QString [optional]
    * @param[in]  high_range QString [optional]
    * @param[in]  hl QString [optional]
    * @param[in]  hq QString [optional]
    * @param[in]  img_color_type QString [optional]
    * @param[in]  img_dominant_color QString [optional]
    * @param[in]  img_size QString [optional]
    * @param[in]  img_type QString [optional]
    * @param[in]  link_site QString [optional]
    * @param[in]  low_range QString [optional]
    * @param[in]  lr QString [optional]
    * @param[in]  num qint32 [optional]
    * @param[in]  or_terms QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  related_site QString [optional]
    * @param[in]  rights QString [optional]
    * @param[in]  safe QString [optional]
    * @param[in]  search_type QString [optional]
    * @param[in]  site_search QString [optional]
    * @param[in]  site_search_filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  start qint32 [optional]
    */
    virtual void search_cse_siterestrict_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &c2coff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cx = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_restrict = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exact_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &googlehost = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &high_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_color_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_dominant_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link_site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &low_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &num = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &or_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &related_site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rights = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &safe = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_search_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void search_cse_listCallback(OAIHttpRequestWorker *worker);
    void search_cse_siterestrict_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void search_cse_listSignal(OAISearch summary);
    void search_cse_siterestrict_listSignal(OAISearch summary);


    void search_cse_listSignalFull(OAIHttpRequestWorker *worker, OAISearch summary);
    void search_cse_siterestrict_listSignalFull(OAIHttpRequestWorker *worker, OAISearch summary);

    Q_DECL_DEPRECATED_X("Use search_cse_listSignalError() instead")
    void search_cse_listSignalE(OAISearch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_cse_listSignalError(OAISearch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_cse_siterestrict_listSignalError() instead")
    void search_cse_siterestrict_listSignalE(OAISearch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_cse_siterestrict_listSignalError(OAISearch summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use search_cse_listSignalErrorFull() instead")
    void search_cse_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_cse_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_cse_siterestrict_listSignalErrorFull() instead")
    void search_cse_siterestrict_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_cse_siterestrict_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
