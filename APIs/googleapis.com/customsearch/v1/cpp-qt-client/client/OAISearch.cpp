/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch::OAISearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch::OAISearch() {
    this->initializeModel();
}

OAISearch::~OAISearch() {}

void OAISearch::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_promotions_isSet = false;
    m_promotions_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_search_information_isSet = false;
    m_search_information_isValid = false;

    m_spelling_isSet = false;
    m_spelling_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_promotions_isValid = ::OpenAPI::fromJsonValue(m_promotions, json[QString("promotions")]);
    m_promotions_isSet = !json[QString("promotions")].isNull() && m_promotions_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_search_information_isValid = ::OpenAPI::fromJsonValue(m_search_information, json[QString("searchInformation")]);
    m_search_information_isSet = !json[QString("searchInformation")].isNull() && m_search_information_isValid;

    m_spelling_isValid = ::OpenAPI::fromJsonValue(m_spelling, json[QString("spelling")]);
    m_spelling_isSet = !json[QString("spelling")].isNull() && m_spelling_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_promotions.size() > 0) {
        obj.insert(QString("promotions"), ::OpenAPI::toJsonValue(m_promotions));
    }
    if (m_queries.isSet()) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_search_information.isSet()) {
        obj.insert(QString("searchInformation"), ::OpenAPI::toJsonValue(m_search_information));
    }
    if (m_spelling.isSet()) {
        obj.insert(QString("spelling"), ::OpenAPI::toJsonValue(m_spelling));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QMap<QString, QJsonValue> OAISearch::getContext() const {
    return m_context;
}
void OAISearch::setContext(const QMap<QString, QJsonValue> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISearch::is_context_Set() const{
    return m_context_isSet;
}

bool OAISearch::is_context_Valid() const{
    return m_context_isValid;
}

QList<OAIResult> OAISearch::getItems() const {
    return m_items;
}
void OAISearch::setItems(const QList<OAIResult> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISearch::is_items_Set() const{
    return m_items_isSet;
}

bool OAISearch::is_items_Valid() const{
    return m_items_isValid;
}

QString OAISearch::getKind() const {
    return m_kind;
}
void OAISearch::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISearch::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISearch::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIPromotion> OAISearch::getPromotions() const {
    return m_promotions;
}
void OAISearch::setPromotions(const QList<OAIPromotion> &promotions) {
    m_promotions = promotions;
    m_promotions_isSet = true;
}

bool OAISearch::is_promotions_Set() const{
    return m_promotions_isSet;
}

bool OAISearch::is_promotions_Valid() const{
    return m_promotions_isValid;
}

OAISearch_queries OAISearch::getQueries() const {
    return m_queries;
}
void OAISearch::setQueries(const OAISearch_queries &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAISearch::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAISearch::is_queries_Valid() const{
    return m_queries_isValid;
}

OAISearch_searchInformation OAISearch::getSearchInformation() const {
    return m_search_information;
}
void OAISearch::setSearchInformation(const OAISearch_searchInformation &search_information) {
    m_search_information = search_information;
    m_search_information_isSet = true;
}

bool OAISearch::is_search_information_Set() const{
    return m_search_information_isSet;
}

bool OAISearch::is_search_information_Valid() const{
    return m_search_information_isValid;
}

OAISearch_spelling OAISearch::getSpelling() const {
    return m_spelling;
}
void OAISearch::setSpelling(const OAISearch_spelling &spelling) {
    m_spelling = spelling;
    m_spelling_isSet = true;
}

bool OAISearch::is_spelling_Set() const{
    return m_spelling_isSet;
}

bool OAISearch::is_spelling_Valid() const{
    return m_spelling_isValid;
}

OAISearch_url OAISearch::getUrl() const {
    return m_url;
}
void OAISearch::setUrl(const OAISearch_url &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISearch::is_url_Set() const{
    return m_url_isSet;
}

bool OAISearch::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spelling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
