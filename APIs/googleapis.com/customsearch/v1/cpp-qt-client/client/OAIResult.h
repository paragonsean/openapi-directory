/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResult.h
 *
 * A custom search result.
 */

#ifndef OAIResult_H
#define OAIResult_H

#include <QJsonObject>

#include "OAIResult_image.h"
#include "OAIResult_labels_inner.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResult_image;
class OAIResult_labels_inner;

class OAIResult : public OAIObject {
public:
    OAIResult();
    OAIResult(QString json);
    ~OAIResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCacheId() const;
    void setCacheId(const QString &cache_id);
    bool is_cache_id_Set() const;
    bool is_cache_id_Valid() const;

    QString getDisplayLink() const;
    void setDisplayLink(const QString &display_link);
    bool is_display_link_Set() const;
    bool is_display_link_Valid() const;

    QString getFileFormat() const;
    void setFileFormat(const QString &file_format);
    bool is_file_format_Set() const;
    bool is_file_format_Valid() const;

    QString getFormattedUrl() const;
    void setFormattedUrl(const QString &formatted_url);
    bool is_formatted_url_Set() const;
    bool is_formatted_url_Valid() const;

    QString getHtmlFormattedUrl() const;
    void setHtmlFormattedUrl(const QString &html_formatted_url);
    bool is_html_formatted_url_Set() const;
    bool is_html_formatted_url_Valid() const;

    QString getHtmlSnippet() const;
    void setHtmlSnippet(const QString &html_snippet);
    bool is_html_snippet_Set() const;
    bool is_html_snippet_Valid() const;

    QString getHtmlTitle() const;
    void setHtmlTitle(const QString &html_title);
    bool is_html_title_Set() const;
    bool is_html_title_Valid() const;

    OAIResult_image getImage() const;
    void setImage(const OAIResult_image &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QList<OAIResult_labels_inner> getLabels() const;
    void setLabels(const QList<OAIResult_labels_inner> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getMime() const;
    void setMime(const QString &mime);
    bool is_mime_Set() const;
    bool is_mime_Valid() const;

    QMap<QString, QJsonValue> getPagemap() const;
    void setPagemap(const QMap<QString, QJsonValue> &pagemap);
    bool is_pagemap_Set() const;
    bool is_pagemap_Valid() const;

    QString getSnippet() const;
    void setSnippet(const QString &snippet);
    bool is_snippet_Set() const;
    bool is_snippet_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cache_id;
    bool m_cache_id_isSet;
    bool m_cache_id_isValid;

    QString m_display_link;
    bool m_display_link_isSet;
    bool m_display_link_isValid;

    QString m_file_format;
    bool m_file_format_isSet;
    bool m_file_format_isValid;

    QString m_formatted_url;
    bool m_formatted_url_isSet;
    bool m_formatted_url_isValid;

    QString m_html_formatted_url;
    bool m_html_formatted_url_isSet;
    bool m_html_formatted_url_isValid;

    QString m_html_snippet;
    bool m_html_snippet_isSet;
    bool m_html_snippet_isValid;

    QString m_html_title;
    bool m_html_title_isSet;
    bool m_html_title_isValid;

    OAIResult_image m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QList<OAIResult_labels_inner> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_mime;
    bool m_mime_isSet;
    bool m_mime_isValid;

    QMap<QString, QJsonValue> m_pagemap;
    bool m_pagemap_isSet;
    bool m_pagemap_isValid;

    QString m_snippet;
    bool m_snippet_isSet;
    bool m_snippet_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResult)

#endif // OAIResult_H
