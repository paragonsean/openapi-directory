/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_queries_nextPage_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_queries_nextPage_inner::OAISearch_queries_nextPage_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_queries_nextPage_inner::OAISearch_queries_nextPage_inner() {
    this->initializeModel();
}

OAISearch_queries_nextPage_inner::~OAISearch_queries_nextPage_inner() {}

void OAISearch_queries_nextPage_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_cr_isSet = false;
    m_cr_isValid = false;

    m_cx_isSet = false;
    m_cx_isValid = false;

    m_date_restrict_isSet = false;
    m_date_restrict_isValid = false;

    m_disable_cn_tw_translation_isSet = false;
    m_disable_cn_tw_translation_isValid = false;

    m_exact_terms_isSet = false;
    m_exact_terms_isValid = false;

    m_exclude_terms_isSet = false;
    m_exclude_terms_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_gl_isSet = false;
    m_gl_isValid = false;

    m_google_host_isSet = false;
    m_google_host_isValid = false;

    m_high_range_isSet = false;
    m_high_range_isValid = false;

    m_hl_isSet = false;
    m_hl_isValid = false;

    m_hq_isSet = false;
    m_hq_isValid = false;

    m_img_color_type_isSet = false;
    m_img_color_type_isValid = false;

    m_img_dominant_color_isSet = false;
    m_img_dominant_color_isValid = false;

    m_img_size_isSet = false;
    m_img_size_isValid = false;

    m_img_type_isSet = false;
    m_img_type_isValid = false;

    m_input_encoding_isSet = false;
    m_input_encoding_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_site_isSet = false;
    m_link_site_isValid = false;

    m_low_range_isSet = false;
    m_low_range_isValid = false;

    m_or_terms_isSet = false;
    m_or_terms_isValid = false;

    m_output_encoding_isSet = false;
    m_output_encoding_isValid = false;

    m_related_site_isSet = false;
    m_related_site_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_safe_isSet = false;
    m_safe_isValid = false;

    m_search_terms_isSet = false;
    m_search_terms_isValid = false;

    m_search_type_isSet = false;
    m_search_type_isValid = false;

    m_site_search_isSet = false;
    m_site_search_isValid = false;

    m_site_search_filter_isSet = false;
    m_site_search_filter_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_start_page_isSet = false;
    m_start_page_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAISearch_queries_nextPage_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_queries_nextPage_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_cr_isValid = ::OpenAPI::fromJsonValue(m_cr, json[QString("cr")]);
    m_cr_isSet = !json[QString("cr")].isNull() && m_cr_isValid;

    m_cx_isValid = ::OpenAPI::fromJsonValue(m_cx, json[QString("cx")]);
    m_cx_isSet = !json[QString("cx")].isNull() && m_cx_isValid;

    m_date_restrict_isValid = ::OpenAPI::fromJsonValue(m_date_restrict, json[QString("dateRestrict")]);
    m_date_restrict_isSet = !json[QString("dateRestrict")].isNull() && m_date_restrict_isValid;

    m_disable_cn_tw_translation_isValid = ::OpenAPI::fromJsonValue(m_disable_cn_tw_translation, json[QString("disableCnTwTranslation")]);
    m_disable_cn_tw_translation_isSet = !json[QString("disableCnTwTranslation")].isNull() && m_disable_cn_tw_translation_isValid;

    m_exact_terms_isValid = ::OpenAPI::fromJsonValue(m_exact_terms, json[QString("exactTerms")]);
    m_exact_terms_isSet = !json[QString("exactTerms")].isNull() && m_exact_terms_isValid;

    m_exclude_terms_isValid = ::OpenAPI::fromJsonValue(m_exclude_terms, json[QString("excludeTerms")]);
    m_exclude_terms_isSet = !json[QString("excludeTerms")].isNull() && m_exclude_terms_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_gl_isValid = ::OpenAPI::fromJsonValue(m_gl, json[QString("gl")]);
    m_gl_isSet = !json[QString("gl")].isNull() && m_gl_isValid;

    m_google_host_isValid = ::OpenAPI::fromJsonValue(m_google_host, json[QString("googleHost")]);
    m_google_host_isSet = !json[QString("googleHost")].isNull() && m_google_host_isValid;

    m_high_range_isValid = ::OpenAPI::fromJsonValue(m_high_range, json[QString("highRange")]);
    m_high_range_isSet = !json[QString("highRange")].isNull() && m_high_range_isValid;

    m_hl_isValid = ::OpenAPI::fromJsonValue(m_hl, json[QString("hl")]);
    m_hl_isSet = !json[QString("hl")].isNull() && m_hl_isValid;

    m_hq_isValid = ::OpenAPI::fromJsonValue(m_hq, json[QString("hq")]);
    m_hq_isSet = !json[QString("hq")].isNull() && m_hq_isValid;

    m_img_color_type_isValid = ::OpenAPI::fromJsonValue(m_img_color_type, json[QString("imgColorType")]);
    m_img_color_type_isSet = !json[QString("imgColorType")].isNull() && m_img_color_type_isValid;

    m_img_dominant_color_isValid = ::OpenAPI::fromJsonValue(m_img_dominant_color, json[QString("imgDominantColor")]);
    m_img_dominant_color_isSet = !json[QString("imgDominantColor")].isNull() && m_img_dominant_color_isValid;

    m_img_size_isValid = ::OpenAPI::fromJsonValue(m_img_size, json[QString("imgSize")]);
    m_img_size_isSet = !json[QString("imgSize")].isNull() && m_img_size_isValid;

    m_img_type_isValid = ::OpenAPI::fromJsonValue(m_img_type, json[QString("imgType")]);
    m_img_type_isSet = !json[QString("imgType")].isNull() && m_img_type_isValid;

    m_input_encoding_isValid = ::OpenAPI::fromJsonValue(m_input_encoding, json[QString("inputEncoding")]);
    m_input_encoding_isSet = !json[QString("inputEncoding")].isNull() && m_input_encoding_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_site_isValid = ::OpenAPI::fromJsonValue(m_link_site, json[QString("linkSite")]);
    m_link_site_isSet = !json[QString("linkSite")].isNull() && m_link_site_isValid;

    m_low_range_isValid = ::OpenAPI::fromJsonValue(m_low_range, json[QString("lowRange")]);
    m_low_range_isSet = !json[QString("lowRange")].isNull() && m_low_range_isValid;

    m_or_terms_isValid = ::OpenAPI::fromJsonValue(m_or_terms, json[QString("orTerms")]);
    m_or_terms_isSet = !json[QString("orTerms")].isNull() && m_or_terms_isValid;

    m_output_encoding_isValid = ::OpenAPI::fromJsonValue(m_output_encoding, json[QString("outputEncoding")]);
    m_output_encoding_isSet = !json[QString("outputEncoding")].isNull() && m_output_encoding_isValid;

    m_related_site_isValid = ::OpenAPI::fromJsonValue(m_related_site, json[QString("relatedSite")]);
    m_related_site_isSet = !json[QString("relatedSite")].isNull() && m_related_site_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_safe_isValid = ::OpenAPI::fromJsonValue(m_safe, json[QString("safe")]);
    m_safe_isSet = !json[QString("safe")].isNull() && m_safe_isValid;

    m_search_terms_isValid = ::OpenAPI::fromJsonValue(m_search_terms, json[QString("searchTerms")]);
    m_search_terms_isSet = !json[QString("searchTerms")].isNull() && m_search_terms_isValid;

    m_search_type_isValid = ::OpenAPI::fromJsonValue(m_search_type, json[QString("searchType")]);
    m_search_type_isSet = !json[QString("searchType")].isNull() && m_search_type_isValid;

    m_site_search_isValid = ::OpenAPI::fromJsonValue(m_site_search, json[QString("siteSearch")]);
    m_site_search_isSet = !json[QString("siteSearch")].isNull() && m_site_search_isValid;

    m_site_search_filter_isValid = ::OpenAPI::fromJsonValue(m_site_search_filter, json[QString("siteSearchFilter")]);
    m_site_search_filter_isSet = !json[QString("siteSearchFilter")].isNull() && m_site_search_filter_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_start_page_isValid = ::OpenAPI::fromJsonValue(m_start_page, json[QString("startPage")]);
    m_start_page_isSet = !json[QString("startPage")].isNull() && m_start_page_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAISearch_queries_nextPage_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_queries_nextPage_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_cr_isSet) {
        obj.insert(QString("cr"), ::OpenAPI::toJsonValue(m_cr));
    }
    if (m_cx_isSet) {
        obj.insert(QString("cx"), ::OpenAPI::toJsonValue(m_cx));
    }
    if (m_date_restrict_isSet) {
        obj.insert(QString("dateRestrict"), ::OpenAPI::toJsonValue(m_date_restrict));
    }
    if (m_disable_cn_tw_translation_isSet) {
        obj.insert(QString("disableCnTwTranslation"), ::OpenAPI::toJsonValue(m_disable_cn_tw_translation));
    }
    if (m_exact_terms_isSet) {
        obj.insert(QString("exactTerms"), ::OpenAPI::toJsonValue(m_exact_terms));
    }
    if (m_exclude_terms_isSet) {
        obj.insert(QString("excludeTerms"), ::OpenAPI::toJsonValue(m_exclude_terms));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_gl_isSet) {
        obj.insert(QString("gl"), ::OpenAPI::toJsonValue(m_gl));
    }
    if (m_google_host_isSet) {
        obj.insert(QString("googleHost"), ::OpenAPI::toJsonValue(m_google_host));
    }
    if (m_high_range_isSet) {
        obj.insert(QString("highRange"), ::OpenAPI::toJsonValue(m_high_range));
    }
    if (m_hl_isSet) {
        obj.insert(QString("hl"), ::OpenAPI::toJsonValue(m_hl));
    }
    if (m_hq_isSet) {
        obj.insert(QString("hq"), ::OpenAPI::toJsonValue(m_hq));
    }
    if (m_img_color_type_isSet) {
        obj.insert(QString("imgColorType"), ::OpenAPI::toJsonValue(m_img_color_type));
    }
    if (m_img_dominant_color_isSet) {
        obj.insert(QString("imgDominantColor"), ::OpenAPI::toJsonValue(m_img_dominant_color));
    }
    if (m_img_size_isSet) {
        obj.insert(QString("imgSize"), ::OpenAPI::toJsonValue(m_img_size));
    }
    if (m_img_type_isSet) {
        obj.insert(QString("imgType"), ::OpenAPI::toJsonValue(m_img_type));
    }
    if (m_input_encoding_isSet) {
        obj.insert(QString("inputEncoding"), ::OpenAPI::toJsonValue(m_input_encoding));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_site_isSet) {
        obj.insert(QString("linkSite"), ::OpenAPI::toJsonValue(m_link_site));
    }
    if (m_low_range_isSet) {
        obj.insert(QString("lowRange"), ::OpenAPI::toJsonValue(m_low_range));
    }
    if (m_or_terms_isSet) {
        obj.insert(QString("orTerms"), ::OpenAPI::toJsonValue(m_or_terms));
    }
    if (m_output_encoding_isSet) {
        obj.insert(QString("outputEncoding"), ::OpenAPI::toJsonValue(m_output_encoding));
    }
    if (m_related_site_isSet) {
        obj.insert(QString("relatedSite"), ::OpenAPI::toJsonValue(m_related_site));
    }
    if (m_rights_isSet) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_safe_isSet) {
        obj.insert(QString("safe"), ::OpenAPI::toJsonValue(m_safe));
    }
    if (m_search_terms_isSet) {
        obj.insert(QString("searchTerms"), ::OpenAPI::toJsonValue(m_search_terms));
    }
    if (m_search_type_isSet) {
        obj.insert(QString("searchType"), ::OpenAPI::toJsonValue(m_search_type));
    }
    if (m_site_search_isSet) {
        obj.insert(QString("siteSearch"), ::OpenAPI::toJsonValue(m_site_search));
    }
    if (m_site_search_filter_isSet) {
        obj.insert(QString("siteSearchFilter"), ::OpenAPI::toJsonValue(m_site_search_filter));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_start_page_isSet) {
        obj.insert(QString("startPage"), ::OpenAPI::toJsonValue(m_start_page));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

qint32 OAISearch_queries_nextPage_inner::getCount() const {
    return m_count;
}
void OAISearch_queries_nextPage_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAISearch_queries_nextPage_inner::is_count_Valid() const{
    return m_count_isValid;
}

QString OAISearch_queries_nextPage_inner::getCr() const {
    return m_cr;
}
void OAISearch_queries_nextPage_inner::setCr(const QString &cr) {
    m_cr = cr;
    m_cr_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_cr_Set() const{
    return m_cr_isSet;
}

bool OAISearch_queries_nextPage_inner::is_cr_Valid() const{
    return m_cr_isValid;
}

QString OAISearch_queries_nextPage_inner::getCx() const {
    return m_cx;
}
void OAISearch_queries_nextPage_inner::setCx(const QString &cx) {
    m_cx = cx;
    m_cx_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_cx_Set() const{
    return m_cx_isSet;
}

bool OAISearch_queries_nextPage_inner::is_cx_Valid() const{
    return m_cx_isValid;
}

QString OAISearch_queries_nextPage_inner::getDateRestrict() const {
    return m_date_restrict;
}
void OAISearch_queries_nextPage_inner::setDateRestrict(const QString &date_restrict) {
    m_date_restrict = date_restrict;
    m_date_restrict_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_date_restrict_Set() const{
    return m_date_restrict_isSet;
}

bool OAISearch_queries_nextPage_inner::is_date_restrict_Valid() const{
    return m_date_restrict_isValid;
}

QString OAISearch_queries_nextPage_inner::getDisableCnTwTranslation() const {
    return m_disable_cn_tw_translation;
}
void OAISearch_queries_nextPage_inner::setDisableCnTwTranslation(const QString &disable_cn_tw_translation) {
    m_disable_cn_tw_translation = disable_cn_tw_translation;
    m_disable_cn_tw_translation_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_disable_cn_tw_translation_Set() const{
    return m_disable_cn_tw_translation_isSet;
}

bool OAISearch_queries_nextPage_inner::is_disable_cn_tw_translation_Valid() const{
    return m_disable_cn_tw_translation_isValid;
}

QString OAISearch_queries_nextPage_inner::getExactTerms() const {
    return m_exact_terms;
}
void OAISearch_queries_nextPage_inner::setExactTerms(const QString &exact_terms) {
    m_exact_terms = exact_terms;
    m_exact_terms_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_exact_terms_Set() const{
    return m_exact_terms_isSet;
}

bool OAISearch_queries_nextPage_inner::is_exact_terms_Valid() const{
    return m_exact_terms_isValid;
}

QString OAISearch_queries_nextPage_inner::getExcludeTerms() const {
    return m_exclude_terms;
}
void OAISearch_queries_nextPage_inner::setExcludeTerms(const QString &exclude_terms) {
    m_exclude_terms = exclude_terms;
    m_exclude_terms_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_exclude_terms_Set() const{
    return m_exclude_terms_isSet;
}

bool OAISearch_queries_nextPage_inner::is_exclude_terms_Valid() const{
    return m_exclude_terms_isValid;
}

QString OAISearch_queries_nextPage_inner::getFileType() const {
    return m_file_type;
}
void OAISearch_queries_nextPage_inner::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAISearch_queries_nextPage_inner::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAISearch_queries_nextPage_inner::getFilter() const {
    return m_filter;
}
void OAISearch_queries_nextPage_inner::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISearch_queries_nextPage_inner::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISearch_queries_nextPage_inner::getGl() const {
    return m_gl;
}
void OAISearch_queries_nextPage_inner::setGl(const QString &gl) {
    m_gl = gl;
    m_gl_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_gl_Set() const{
    return m_gl_isSet;
}

bool OAISearch_queries_nextPage_inner::is_gl_Valid() const{
    return m_gl_isValid;
}

QString OAISearch_queries_nextPage_inner::getGoogleHost() const {
    return m_google_host;
}
void OAISearch_queries_nextPage_inner::setGoogleHost(const QString &google_host) {
    m_google_host = google_host;
    m_google_host_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_google_host_Set() const{
    return m_google_host_isSet;
}

bool OAISearch_queries_nextPage_inner::is_google_host_Valid() const{
    return m_google_host_isValid;
}

QString OAISearch_queries_nextPage_inner::getHighRange() const {
    return m_high_range;
}
void OAISearch_queries_nextPage_inner::setHighRange(const QString &high_range) {
    m_high_range = high_range;
    m_high_range_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_high_range_Set() const{
    return m_high_range_isSet;
}

bool OAISearch_queries_nextPage_inner::is_high_range_Valid() const{
    return m_high_range_isValid;
}

QString OAISearch_queries_nextPage_inner::getHl() const {
    return m_hl;
}
void OAISearch_queries_nextPage_inner::setHl(const QString &hl) {
    m_hl = hl;
    m_hl_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_hl_Set() const{
    return m_hl_isSet;
}

bool OAISearch_queries_nextPage_inner::is_hl_Valid() const{
    return m_hl_isValid;
}

QString OAISearch_queries_nextPage_inner::getHq() const {
    return m_hq;
}
void OAISearch_queries_nextPage_inner::setHq(const QString &hq) {
    m_hq = hq;
    m_hq_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_hq_Set() const{
    return m_hq_isSet;
}

bool OAISearch_queries_nextPage_inner::is_hq_Valid() const{
    return m_hq_isValid;
}

QString OAISearch_queries_nextPage_inner::getImgColorType() const {
    return m_img_color_type;
}
void OAISearch_queries_nextPage_inner::setImgColorType(const QString &img_color_type) {
    m_img_color_type = img_color_type;
    m_img_color_type_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_img_color_type_Set() const{
    return m_img_color_type_isSet;
}

bool OAISearch_queries_nextPage_inner::is_img_color_type_Valid() const{
    return m_img_color_type_isValid;
}

QString OAISearch_queries_nextPage_inner::getImgDominantColor() const {
    return m_img_dominant_color;
}
void OAISearch_queries_nextPage_inner::setImgDominantColor(const QString &img_dominant_color) {
    m_img_dominant_color = img_dominant_color;
    m_img_dominant_color_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_img_dominant_color_Set() const{
    return m_img_dominant_color_isSet;
}

bool OAISearch_queries_nextPage_inner::is_img_dominant_color_Valid() const{
    return m_img_dominant_color_isValid;
}

QString OAISearch_queries_nextPage_inner::getImgSize() const {
    return m_img_size;
}
void OAISearch_queries_nextPage_inner::setImgSize(const QString &img_size) {
    m_img_size = img_size;
    m_img_size_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_img_size_Set() const{
    return m_img_size_isSet;
}

bool OAISearch_queries_nextPage_inner::is_img_size_Valid() const{
    return m_img_size_isValid;
}

QString OAISearch_queries_nextPage_inner::getImgType() const {
    return m_img_type;
}
void OAISearch_queries_nextPage_inner::setImgType(const QString &img_type) {
    m_img_type = img_type;
    m_img_type_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_img_type_Set() const{
    return m_img_type_isSet;
}

bool OAISearch_queries_nextPage_inner::is_img_type_Valid() const{
    return m_img_type_isValid;
}

QString OAISearch_queries_nextPage_inner::getInputEncoding() const {
    return m_input_encoding;
}
void OAISearch_queries_nextPage_inner::setInputEncoding(const QString &input_encoding) {
    m_input_encoding = input_encoding;
    m_input_encoding_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_input_encoding_Set() const{
    return m_input_encoding_isSet;
}

bool OAISearch_queries_nextPage_inner::is_input_encoding_Valid() const{
    return m_input_encoding_isValid;
}

QString OAISearch_queries_nextPage_inner::getLanguage() const {
    return m_language;
}
void OAISearch_queries_nextPage_inner::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_language_Set() const{
    return m_language_isSet;
}

bool OAISearch_queries_nextPage_inner::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISearch_queries_nextPage_inner::getLinkSite() const {
    return m_link_site;
}
void OAISearch_queries_nextPage_inner::setLinkSite(const QString &link_site) {
    m_link_site = link_site;
    m_link_site_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_link_site_Set() const{
    return m_link_site_isSet;
}

bool OAISearch_queries_nextPage_inner::is_link_site_Valid() const{
    return m_link_site_isValid;
}

QString OAISearch_queries_nextPage_inner::getLowRange() const {
    return m_low_range;
}
void OAISearch_queries_nextPage_inner::setLowRange(const QString &low_range) {
    m_low_range = low_range;
    m_low_range_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_low_range_Set() const{
    return m_low_range_isSet;
}

bool OAISearch_queries_nextPage_inner::is_low_range_Valid() const{
    return m_low_range_isValid;
}

QString OAISearch_queries_nextPage_inner::getOrTerms() const {
    return m_or_terms;
}
void OAISearch_queries_nextPage_inner::setOrTerms(const QString &or_terms) {
    m_or_terms = or_terms;
    m_or_terms_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_or_terms_Set() const{
    return m_or_terms_isSet;
}

bool OAISearch_queries_nextPage_inner::is_or_terms_Valid() const{
    return m_or_terms_isValid;
}

QString OAISearch_queries_nextPage_inner::getOutputEncoding() const {
    return m_output_encoding;
}
void OAISearch_queries_nextPage_inner::setOutputEncoding(const QString &output_encoding) {
    m_output_encoding = output_encoding;
    m_output_encoding_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_output_encoding_Set() const{
    return m_output_encoding_isSet;
}

bool OAISearch_queries_nextPage_inner::is_output_encoding_Valid() const{
    return m_output_encoding_isValid;
}

QString OAISearch_queries_nextPage_inner::getRelatedSite() const {
    return m_related_site;
}
void OAISearch_queries_nextPage_inner::setRelatedSite(const QString &related_site) {
    m_related_site = related_site;
    m_related_site_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_related_site_Set() const{
    return m_related_site_isSet;
}

bool OAISearch_queries_nextPage_inner::is_related_site_Valid() const{
    return m_related_site_isValid;
}

QString OAISearch_queries_nextPage_inner::getRights() const {
    return m_rights;
}
void OAISearch_queries_nextPage_inner::setRights(const QString &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAISearch_queries_nextPage_inner::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAISearch_queries_nextPage_inner::getSafe() const {
    return m_safe;
}
void OAISearch_queries_nextPage_inner::setSafe(const QString &safe) {
    m_safe = safe;
    m_safe_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_safe_Set() const{
    return m_safe_isSet;
}

bool OAISearch_queries_nextPage_inner::is_safe_Valid() const{
    return m_safe_isValid;
}

QString OAISearch_queries_nextPage_inner::getSearchTerms() const {
    return m_search_terms;
}
void OAISearch_queries_nextPage_inner::setSearchTerms(const QString &search_terms) {
    m_search_terms = search_terms;
    m_search_terms_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_search_terms_Set() const{
    return m_search_terms_isSet;
}

bool OAISearch_queries_nextPage_inner::is_search_terms_Valid() const{
    return m_search_terms_isValid;
}

QString OAISearch_queries_nextPage_inner::getSearchType() const {
    return m_search_type;
}
void OAISearch_queries_nextPage_inner::setSearchType(const QString &search_type) {
    m_search_type = search_type;
    m_search_type_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_search_type_Set() const{
    return m_search_type_isSet;
}

bool OAISearch_queries_nextPage_inner::is_search_type_Valid() const{
    return m_search_type_isValid;
}

QString OAISearch_queries_nextPage_inner::getSiteSearch() const {
    return m_site_search;
}
void OAISearch_queries_nextPage_inner::setSiteSearch(const QString &site_search) {
    m_site_search = site_search;
    m_site_search_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_site_search_Set() const{
    return m_site_search_isSet;
}

bool OAISearch_queries_nextPage_inner::is_site_search_Valid() const{
    return m_site_search_isValid;
}

QString OAISearch_queries_nextPage_inner::getSiteSearchFilter() const {
    return m_site_search_filter;
}
void OAISearch_queries_nextPage_inner::setSiteSearchFilter(const QString &site_search_filter) {
    m_site_search_filter = site_search_filter;
    m_site_search_filter_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_site_search_filter_Set() const{
    return m_site_search_filter_isSet;
}

bool OAISearch_queries_nextPage_inner::is_site_search_filter_Valid() const{
    return m_site_search_filter_isValid;
}

QString OAISearch_queries_nextPage_inner::getSort() const {
    return m_sort;
}
void OAISearch_queries_nextPage_inner::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISearch_queries_nextPage_inner::is_sort_Valid() const{
    return m_sort_isValid;
}

qint32 OAISearch_queries_nextPage_inner::getStartIndex() const {
    return m_start_index;
}
void OAISearch_queries_nextPage_inner::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAISearch_queries_nextPage_inner::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint32 OAISearch_queries_nextPage_inner::getStartPage() const {
    return m_start_page;
}
void OAISearch_queries_nextPage_inner::setStartPage(const qint32 &start_page) {
    m_start_page = start_page;
    m_start_page_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_start_page_Set() const{
    return m_start_page_isSet;
}

bool OAISearch_queries_nextPage_inner::is_start_page_Valid() const{
    return m_start_page_isValid;
}

QString OAISearch_queries_nextPage_inner::getTitle() const {
    return m_title;
}
void OAISearch_queries_nextPage_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearch_queries_nextPage_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISearch_queries_nextPage_inner::getTotalResults() const {
    return m_total_results;
}
void OAISearch_queries_nextPage_inner::setTotalResults(const QString &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAISearch_queries_nextPage_inner::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearch_queries_nextPage_inner::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAISearch_queries_nextPage_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_restrict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_cn_tw_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exact_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_color_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_dominant_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_search_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_queries_nextPage_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
