/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_url.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_url::OAISearch_url(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_url::OAISearch_url() {
    this->initializeModel();
}

OAISearch_url::~OAISearch_url() {}

void OAISearch_url::initializeModel() {

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearch_url::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_url::fromJsonObject(QJsonObject json) {

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearch_url::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_url::asJsonObject() const {
    QJsonObject obj;
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISearch_url::getRTemplate() const {
    return m_r_template;
}
void OAISearch_url::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAISearch_url::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAISearch_url::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAISearch_url::getType() const {
    return m_type;
}
void OAISearch_url::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearch_url::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearch_url::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearch_url::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_url::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
