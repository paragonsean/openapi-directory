/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_spelling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_spelling::OAISearch_spelling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_spelling::OAISearch_spelling() {
    this->initializeModel();
}

OAISearch_spelling::~OAISearch_spelling() {}

void OAISearch_spelling::initializeModel() {

    m_corrected_query_isSet = false;
    m_corrected_query_isValid = false;

    m_html_corrected_query_isSet = false;
    m_html_corrected_query_isValid = false;
}

void OAISearch_spelling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_spelling::fromJsonObject(QJsonObject json) {

    m_corrected_query_isValid = ::OpenAPI::fromJsonValue(m_corrected_query, json[QString("correctedQuery")]);
    m_corrected_query_isSet = !json[QString("correctedQuery")].isNull() && m_corrected_query_isValid;

    m_html_corrected_query_isValid = ::OpenAPI::fromJsonValue(m_html_corrected_query, json[QString("htmlCorrectedQuery")]);
    m_html_corrected_query_isSet = !json[QString("htmlCorrectedQuery")].isNull() && m_html_corrected_query_isValid;
}

QString OAISearch_spelling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_spelling::asJsonObject() const {
    QJsonObject obj;
    if (m_corrected_query_isSet) {
        obj.insert(QString("correctedQuery"), ::OpenAPI::toJsonValue(m_corrected_query));
    }
    if (m_html_corrected_query_isSet) {
        obj.insert(QString("htmlCorrectedQuery"), ::OpenAPI::toJsonValue(m_html_corrected_query));
    }
    return obj;
}

QString OAISearch_spelling::getCorrectedQuery() const {
    return m_corrected_query;
}
void OAISearch_spelling::setCorrectedQuery(const QString &corrected_query) {
    m_corrected_query = corrected_query;
    m_corrected_query_isSet = true;
}

bool OAISearch_spelling::is_corrected_query_Set() const{
    return m_corrected_query_isSet;
}

bool OAISearch_spelling::is_corrected_query_Valid() const{
    return m_corrected_query_isValid;
}

QString OAISearch_spelling::getHtmlCorrectedQuery() const {
    return m_html_corrected_query;
}
void OAISearch_spelling::setHtmlCorrectedQuery(const QString &html_corrected_query) {
    m_html_corrected_query = html_corrected_query;
    m_html_corrected_query_isSet = true;
}

bool OAISearch_spelling::is_html_corrected_query_Set() const{
    return m_html_corrected_query_isSet;
}

bool OAISearch_spelling::is_html_corrected_query_Valid() const{
    return m_html_corrected_query_isValid;
}

bool OAISearch_spelling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corrected_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_corrected_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_spelling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
