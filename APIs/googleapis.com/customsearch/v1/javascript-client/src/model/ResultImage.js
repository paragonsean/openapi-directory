/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResultImage model module.
 * @module model/ResultImage
 * @version v1
 */
class ResultImage {
    /**
     * Constructs a new <code>ResultImage</code>.
     * Image belonging to a custom search result.
     * @alias module:model/ResultImage
     */
    constructor() { 
        
        ResultImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultImage} obj Optional instance to populate.
     * @return {module:model/ResultImage} The populated <code>ResultImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultImage();

            if (data.hasOwnProperty('byteSize')) {
                obj['byteSize'] = ApiClient.convertToType(data['byteSize'], 'Number');
            }
            if (data.hasOwnProperty('contextLink')) {
                obj['contextLink'] = ApiClient.convertToType(data['contextLink'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('thumbnailHeight')) {
                obj['thumbnailHeight'] = ApiClient.convertToType(data['thumbnailHeight'], 'Number');
            }
            if (data.hasOwnProperty('thumbnailLink')) {
                obj['thumbnailLink'] = ApiClient.convertToType(data['thumbnailLink'], 'String');
            }
            if (data.hasOwnProperty('thumbnailWidth')) {
                obj['thumbnailWidth'] = ApiClient.convertToType(data['thumbnailWidth'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResultImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResultImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contextLink'] && !(typeof data['contextLink'] === 'string' || data['contextLink'] instanceof String)) {
            throw new Error("Expected the field `contextLink` to be a primitive type in the JSON string but got " + data['contextLink']);
        }
        // ensure the json data is a string
        if (data['thumbnailLink'] && !(typeof data['thumbnailLink'] === 'string' || data['thumbnailLink'] instanceof String)) {
            throw new Error("Expected the field `thumbnailLink` to be a primitive type in the JSON string but got " + data['thumbnailLink']);
        }

        return true;
    }


}



/**
 * The size of the image, in bytes.
 * @member {Number} byteSize
 */
ResultImage.prototype['byteSize'] = undefined;

/**
 * A URL pointing to the webpage hosting the image.
 * @member {String} contextLink
 */
ResultImage.prototype['contextLink'] = undefined;

/**
 * The height of the image, in pixels.
 * @member {Number} height
 */
ResultImage.prototype['height'] = undefined;

/**
 * The height of the thumbnail image, in pixels.
 * @member {Number} thumbnailHeight
 */
ResultImage.prototype['thumbnailHeight'] = undefined;

/**
 * A URL to the thumbnail image.
 * @member {String} thumbnailLink
 */
ResultImage.prototype['thumbnailLink'] = undefined;

/**
 * The width of the thumbnail image, in pixels.
 * @member {Number} thumbnailWidth
 */
ResultImage.prototype['thumbnailWidth'] = undefined;

/**
 * The width of the image, in pixels.
 * @member {Number} width
 */
ResultImage.prototype['width'] = undefined;






export default ResultImage;

