/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResultImage from './ResultImage';
import ResultLabelsInner from './ResultLabelsInner';

/**
 * The Result model module.
 * @module model/Result
 * @version v1
 */
class Result {
    /**
     * Constructs a new <code>Result</code>.
     * A custom search result.
     * @alias module:model/Result
     */
    constructor() { 
        
        Result.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Result</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Result} obj Optional instance to populate.
     * @return {module:model/Result} The populated <code>Result</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Result();

            if (data.hasOwnProperty('cacheId')) {
                obj['cacheId'] = ApiClient.convertToType(data['cacheId'], 'String');
            }
            if (data.hasOwnProperty('displayLink')) {
                obj['displayLink'] = ApiClient.convertToType(data['displayLink'], 'String');
            }
            if (data.hasOwnProperty('fileFormat')) {
                obj['fileFormat'] = ApiClient.convertToType(data['fileFormat'], 'String');
            }
            if (data.hasOwnProperty('formattedUrl')) {
                obj['formattedUrl'] = ApiClient.convertToType(data['formattedUrl'], 'String');
            }
            if (data.hasOwnProperty('htmlFormattedUrl')) {
                obj['htmlFormattedUrl'] = ApiClient.convertToType(data['htmlFormattedUrl'], 'String');
            }
            if (data.hasOwnProperty('htmlSnippet')) {
                obj['htmlSnippet'] = ApiClient.convertToType(data['htmlSnippet'], 'String');
            }
            if (data.hasOwnProperty('htmlTitle')) {
                obj['htmlTitle'] = ApiClient.convertToType(data['htmlTitle'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ResultImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [ResultLabelsInner]);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('mime')) {
                obj['mime'] = ApiClient.convertToType(data['mime'], 'String');
            }
            if (data.hasOwnProperty('pagemap')) {
                obj['pagemap'] = ApiClient.convertToType(data['pagemap'], {'String': Object});
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = ApiClient.convertToType(data['snippet'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Result</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Result</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cacheId'] && !(typeof data['cacheId'] === 'string' || data['cacheId'] instanceof String)) {
            throw new Error("Expected the field `cacheId` to be a primitive type in the JSON string but got " + data['cacheId']);
        }
        // ensure the json data is a string
        if (data['displayLink'] && !(typeof data['displayLink'] === 'string' || data['displayLink'] instanceof String)) {
            throw new Error("Expected the field `displayLink` to be a primitive type in the JSON string but got " + data['displayLink']);
        }
        // ensure the json data is a string
        if (data['fileFormat'] && !(typeof data['fileFormat'] === 'string' || data['fileFormat'] instanceof String)) {
            throw new Error("Expected the field `fileFormat` to be a primitive type in the JSON string but got " + data['fileFormat']);
        }
        // ensure the json data is a string
        if (data['formattedUrl'] && !(typeof data['formattedUrl'] === 'string' || data['formattedUrl'] instanceof String)) {
            throw new Error("Expected the field `formattedUrl` to be a primitive type in the JSON string but got " + data['formattedUrl']);
        }
        // ensure the json data is a string
        if (data['htmlFormattedUrl'] && !(typeof data['htmlFormattedUrl'] === 'string' || data['htmlFormattedUrl'] instanceof String)) {
            throw new Error("Expected the field `htmlFormattedUrl` to be a primitive type in the JSON string but got " + data['htmlFormattedUrl']);
        }
        // ensure the json data is a string
        if (data['htmlSnippet'] && !(typeof data['htmlSnippet'] === 'string' || data['htmlSnippet'] instanceof String)) {
            throw new Error("Expected the field `htmlSnippet` to be a primitive type in the JSON string but got " + data['htmlSnippet']);
        }
        // ensure the json data is a string
        if (data['htmlTitle'] && !(typeof data['htmlTitle'] === 'string' || data['htmlTitle'] instanceof String)) {
            throw new Error("Expected the field `htmlTitle` to be a primitive type in the JSON string but got " + data['htmlTitle']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ResultImage.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                ResultLabelsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['mime'] && !(typeof data['mime'] === 'string' || data['mime'] instanceof String)) {
            throw new Error("Expected the field `mime` to be a primitive type in the JSON string but got " + data['mime']);
        }
        // ensure the json data is a string
        if (data['snippet'] && !(typeof data['snippet'] === 'string' || data['snippet'] instanceof String)) {
            throw new Error("Expected the field `snippet` to be a primitive type in the JSON string but got " + data['snippet']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Indicates the ID of Google's cached version of the search result.
 * @member {String} cacheId
 */
Result.prototype['cacheId'] = undefined;

/**
 * An abridged version of this search resultâ€™s URL, e.g. www.example.com.
 * @member {String} displayLink
 */
Result.prototype['displayLink'] = undefined;

/**
 * The file format of the search result.
 * @member {String} fileFormat
 */
Result.prototype['fileFormat'] = undefined;

/**
 * The URL displayed after the snippet for each search result.
 * @member {String} formattedUrl
 */
Result.prototype['formattedUrl'] = undefined;

/**
 * The HTML-formatted URL displayed after the snippet for each search result.
 * @member {String} htmlFormattedUrl
 */
Result.prototype['htmlFormattedUrl'] = undefined;

/**
 * The snippet of the search result, in HTML.
 * @member {String} htmlSnippet
 */
Result.prototype['htmlSnippet'] = undefined;

/**
 * The title of the search result, in HTML.
 * @member {String} htmlTitle
 */
Result.prototype['htmlTitle'] = undefined;

/**
 * @member {module:model/ResultImage} image
 */
Result.prototype['image'] = undefined;

/**
 * A unique identifier for the type of current object. For this API, it is `customsearch#result.`
 * @member {String} kind
 */
Result.prototype['kind'] = undefined;

/**
 * Encapsulates all information about refinement labels.
 * @member {Array.<module:model/ResultLabelsInner>} labels
 */
Result.prototype['labels'] = undefined;

/**
 * The full URL to which the search result is pointing, e.g. http://www.example.com/foo/bar.
 * @member {String} link
 */
Result.prototype['link'] = undefined;

/**
 * The MIME type of the search result.
 * @member {String} mime
 */
Result.prototype['mime'] = undefined;

/**
 * Contains [PageMap](https://developers.google.com/custom-search/docs/structured_data#pagemaps) information for this search result.
 * @member {Object.<String, Object>} pagemap
 */
Result.prototype['pagemap'] = undefined;

/**
 * The snippet of the search result, in plain text.
 * @member {String} snippet
 */
Result.prototype['snippet'] = undefined;

/**
 * The title of the search result, in plain text.
 * @member {String} title
 */
Result.prototype['title'] = undefined;






export default Result;

