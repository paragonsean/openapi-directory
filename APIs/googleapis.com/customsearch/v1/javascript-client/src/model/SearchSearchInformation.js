/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchSearchInformation model module.
 * @module model/SearchSearchInformation
 * @version v1
 */
class SearchSearchInformation {
    /**
     * Constructs a new <code>SearchSearchInformation</code>.
     * Metadata about a search operation.
     * @alias module:model/SearchSearchInformation
     */
    constructor() { 
        
        SearchSearchInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchSearchInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchSearchInformation} obj Optional instance to populate.
     * @return {module:model/SearchSearchInformation} The populated <code>SearchSearchInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchSearchInformation();

            if (data.hasOwnProperty('formattedSearchTime')) {
                obj['formattedSearchTime'] = ApiClient.convertToType(data['formattedSearchTime'], 'String');
            }
            if (data.hasOwnProperty('formattedTotalResults')) {
                obj['formattedTotalResults'] = ApiClient.convertToType(data['formattedTotalResults'], 'String');
            }
            if (data.hasOwnProperty('searchTime')) {
                obj['searchTime'] = ApiClient.convertToType(data['searchTime'], 'Number');
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchSearchInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchSearchInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formattedSearchTime'] && !(typeof data['formattedSearchTime'] === 'string' || data['formattedSearchTime'] instanceof String)) {
            throw new Error("Expected the field `formattedSearchTime` to be a primitive type in the JSON string but got " + data['formattedSearchTime']);
        }
        // ensure the json data is a string
        if (data['formattedTotalResults'] && !(typeof data['formattedTotalResults'] === 'string' || data['formattedTotalResults'] instanceof String)) {
            throw new Error("Expected the field `formattedTotalResults` to be a primitive type in the JSON string but got " + data['formattedTotalResults']);
        }
        // ensure the json data is a string
        if (data['totalResults'] && !(typeof data['totalResults'] === 'string' || data['totalResults'] instanceof String)) {
            throw new Error("Expected the field `totalResults` to be a primitive type in the JSON string but got " + data['totalResults']);
        }

        return true;
    }


}



/**
 * The time taken for the server to return search results, formatted according to locale style.
 * @member {String} formattedSearchTime
 */
SearchSearchInformation.prototype['formattedSearchTime'] = undefined;

/**
 * The total number of search results, formatted according to locale style.
 * @member {String} formattedTotalResults
 */
SearchSearchInformation.prototype['formattedTotalResults'] = undefined;

/**
 * The time taken for the server to return search results.
 * @member {Number} searchTime
 */
SearchSearchInformation.prototype['searchTime'] = undefined;

/**
 * The total number of search results returned by the query.
 * @member {String} totalResults
 */
SearchSearchInformation.prototype['totalResults'] = undefined;






export default SearchSearchInformation;

