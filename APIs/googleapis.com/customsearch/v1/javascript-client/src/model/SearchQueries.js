/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SearchQueriesNextPageInner from './SearchQueriesNextPageInner';

/**
 * The SearchQueries model module.
 * @module model/SearchQueries
 * @version v1
 */
class SearchQueries {
    /**
     * Constructs a new <code>SearchQueries</code>.
     * Query metadata for the previous, current, and next pages of results.
     * @alias module:model/SearchQueries
     */
    constructor() { 
        
        SearchQueries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchQueries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchQueries} obj Optional instance to populate.
     * @return {module:model/SearchQueries} The populated <code>SearchQueries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchQueries();

            if (data.hasOwnProperty('nextPage')) {
                obj['nextPage'] = ApiClient.convertToType(data['nextPage'], [SearchQueriesNextPageInner]);
            }
            if (data.hasOwnProperty('previousPage')) {
                obj['previousPage'] = ApiClient.convertToType(data['previousPage'], [SearchQueriesNextPageInner]);
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ApiClient.convertToType(data['request'], [SearchQueriesNextPageInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchQueries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchQueries</code>.
     */
    static validateJSON(data) {
        if (data['nextPage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nextPage'])) {
                throw new Error("Expected the field `nextPage` to be an array in the JSON data but got " + data['nextPage']);
            }
            // validate the optional field `nextPage` (array)
            for (const item of data['nextPage']) {
                SearchQueriesNextPageInner.validateJSON(item);
            };
        }
        if (data['previousPage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previousPage'])) {
                throw new Error("Expected the field `previousPage` to be an array in the JSON data but got " + data['previousPage']);
            }
            // validate the optional field `previousPage` (array)
            for (const item of data['previousPage']) {
                SearchQueriesNextPageInner.validateJSON(item);
            };
        }
        if (data['request']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['request'])) {
                throw new Error("Expected the field `request` to be an array in the JSON data but got " + data['request']);
            }
            // validate the optional field `request` (array)
            for (const item of data['request']) {
                SearchQueriesNextPageInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Metadata representing the next page of results, if applicable.
 * @member {Array.<module:model/SearchQueriesNextPageInner>} nextPage
 */
SearchQueries.prototype['nextPage'] = undefined;

/**
 * Metadata representing the previous page of results, if applicable.
 * @member {Array.<module:model/SearchQueriesNextPageInner>} previousPage
 */
SearchQueries.prototype['previousPage'] = undefined;

/**
 * Metadata representing the current request.
 * @member {Array.<module:model/SearchQueriesNextPageInner>} request
 */
SearchQueries.prototype['request'] = undefined;






export default SearchQueries;

