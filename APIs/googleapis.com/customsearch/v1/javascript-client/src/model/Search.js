/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Promotion from './Promotion';
import Result from './Result';
import SearchQueries from './SearchQueries';
import SearchSearchInformation from './SearchSearchInformation';
import SearchSpelling from './SearchSpelling';
import SearchUrl from './SearchUrl';

/**
 * The Search model module.
 * @module model/Search
 * @version v1
 */
class Search {
    /**
     * Constructs a new <code>Search</code>.
     * Response to a custom search request.
     * @alias module:model/Search
     */
    constructor() { 
        
        Search.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Search</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Search} obj Optional instance to populate.
     * @return {module:model/Search} The populated <code>Search</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Search();

            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], {'String': Object});
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Result]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('promotions')) {
                obj['promotions'] = ApiClient.convertToType(data['promotions'], [Promotion]);
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = SearchQueries.constructFromObject(data['queries']);
            }
            if (data.hasOwnProperty('searchInformation')) {
                obj['searchInformation'] = SearchSearchInformation.constructFromObject(data['searchInformation']);
            }
            if (data.hasOwnProperty('spelling')) {
                obj['spelling'] = SearchSpelling.constructFromObject(data['spelling']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = SearchUrl.constructFromObject(data['url']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Search</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Search</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Result.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['promotions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promotions'])) {
                throw new Error("Expected the field `promotions` to be an array in the JSON data but got " + data['promotions']);
            }
            // validate the optional field `promotions` (array)
            for (const item of data['promotions']) {
                Promotion.validateJSON(item);
            };
        }
        // validate the optional field `queries`
        if (data['queries']) { // data not null
          SearchQueries.validateJSON(data['queries']);
        }
        // validate the optional field `searchInformation`
        if (data['searchInformation']) { // data not null
          SearchSearchInformation.validateJSON(data['searchInformation']);
        }
        // validate the optional field `spelling`
        if (data['spelling']) { // data not null
          SearchSpelling.validateJSON(data['spelling']);
        }
        // validate the optional field `url`
        if (data['url']) { // data not null
          SearchUrl.validateJSON(data['url']);
        }

        return true;
    }


}



/**
 * Metadata and refinements associated with the given search engine, including: * The name of the search engine that was used for the query. * A set of [facet objects](https://developers.google.com/custom-search/docs/refinements#create) (refinements) you can use for refining a search.
 * @member {Object.<String, Object>} context
 */
Search.prototype['context'] = undefined;

/**
 * The current set of custom search results.
 * @member {Array.<module:model/Result>} items
 */
Search.prototype['items'] = undefined;

/**
 * Unique identifier for the type of current object. For this API, it is customsearch#search.
 * @member {String} kind
 */
Search.prototype['kind'] = undefined;

/**
 * The set of [promotions](https://developers.google.com/custom-search/docs/promotions). Present only if the custom search engine's configuration files define any promotions for the given query.
 * @member {Array.<module:model/Promotion>} promotions
 */
Search.prototype['promotions'] = undefined;

/**
 * @member {module:model/SearchQueries} queries
 */
Search.prototype['queries'] = undefined;

/**
 * @member {module:model/SearchSearchInformation} searchInformation
 */
Search.prototype['searchInformation'] = undefined;

/**
 * @member {module:model/SearchSpelling} spelling
 */
Search.prototype['spelling'] = undefined;

/**
 * @member {module:model/SearchUrl} url
 */
Search.prototype['url'] = undefined;






export default Search;

