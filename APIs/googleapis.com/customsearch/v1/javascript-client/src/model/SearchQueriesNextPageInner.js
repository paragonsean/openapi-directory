/**
 * Custom Search API
 * Searches over a website or collection of websites
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchQueriesNextPageInner model module.
 * @module model/SearchQueriesNextPageInner
 * @version v1
 */
class SearchQueriesNextPageInner {
    /**
     * Constructs a new <code>SearchQueriesNextPageInner</code>.
     * Custom search request metadata.
     * @alias module:model/SearchQueriesNextPageInner
     */
    constructor() { 
        
        SearchQueriesNextPageInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchQueriesNextPageInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchQueriesNextPageInner} obj Optional instance to populate.
     * @return {module:model/SearchQueriesNextPageInner} The populated <code>SearchQueriesNextPageInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchQueriesNextPageInner();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('cr')) {
                obj['cr'] = ApiClient.convertToType(data['cr'], 'String');
            }
            if (data.hasOwnProperty('cx')) {
                obj['cx'] = ApiClient.convertToType(data['cx'], 'String');
            }
            if (data.hasOwnProperty('dateRestrict')) {
                obj['dateRestrict'] = ApiClient.convertToType(data['dateRestrict'], 'String');
            }
            if (data.hasOwnProperty('disableCnTwTranslation')) {
                obj['disableCnTwTranslation'] = ApiClient.convertToType(data['disableCnTwTranslation'], 'String');
            }
            if (data.hasOwnProperty('exactTerms')) {
                obj['exactTerms'] = ApiClient.convertToType(data['exactTerms'], 'String');
            }
            if (data.hasOwnProperty('excludeTerms')) {
                obj['excludeTerms'] = ApiClient.convertToType(data['excludeTerms'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('gl')) {
                obj['gl'] = ApiClient.convertToType(data['gl'], 'String');
            }
            if (data.hasOwnProperty('googleHost')) {
                obj['googleHost'] = ApiClient.convertToType(data['googleHost'], 'String');
            }
            if (data.hasOwnProperty('highRange')) {
                obj['highRange'] = ApiClient.convertToType(data['highRange'], 'String');
            }
            if (data.hasOwnProperty('hl')) {
                obj['hl'] = ApiClient.convertToType(data['hl'], 'String');
            }
            if (data.hasOwnProperty('hq')) {
                obj['hq'] = ApiClient.convertToType(data['hq'], 'String');
            }
            if (data.hasOwnProperty('imgColorType')) {
                obj['imgColorType'] = ApiClient.convertToType(data['imgColorType'], 'String');
            }
            if (data.hasOwnProperty('imgDominantColor')) {
                obj['imgDominantColor'] = ApiClient.convertToType(data['imgDominantColor'], 'String');
            }
            if (data.hasOwnProperty('imgSize')) {
                obj['imgSize'] = ApiClient.convertToType(data['imgSize'], 'String');
            }
            if (data.hasOwnProperty('imgType')) {
                obj['imgType'] = ApiClient.convertToType(data['imgType'], 'String');
            }
            if (data.hasOwnProperty('inputEncoding')) {
                obj['inputEncoding'] = ApiClient.convertToType(data['inputEncoding'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('linkSite')) {
                obj['linkSite'] = ApiClient.convertToType(data['linkSite'], 'String');
            }
            if (data.hasOwnProperty('lowRange')) {
                obj['lowRange'] = ApiClient.convertToType(data['lowRange'], 'String');
            }
            if (data.hasOwnProperty('orTerms')) {
                obj['orTerms'] = ApiClient.convertToType(data['orTerms'], 'String');
            }
            if (data.hasOwnProperty('outputEncoding')) {
                obj['outputEncoding'] = ApiClient.convertToType(data['outputEncoding'], 'String');
            }
            if (data.hasOwnProperty('relatedSite')) {
                obj['relatedSite'] = ApiClient.convertToType(data['relatedSite'], 'String');
            }
            if (data.hasOwnProperty('rights')) {
                obj['rights'] = ApiClient.convertToType(data['rights'], 'String');
            }
            if (data.hasOwnProperty('safe')) {
                obj['safe'] = ApiClient.convertToType(data['safe'], 'String');
            }
            if (data.hasOwnProperty('searchTerms')) {
                obj['searchTerms'] = ApiClient.convertToType(data['searchTerms'], 'String');
            }
            if (data.hasOwnProperty('searchType')) {
                obj['searchType'] = ApiClient.convertToType(data['searchType'], 'String');
            }
            if (data.hasOwnProperty('siteSearch')) {
                obj['siteSearch'] = ApiClient.convertToType(data['siteSearch'], 'String');
            }
            if (data.hasOwnProperty('siteSearchFilter')) {
                obj['siteSearchFilter'] = ApiClient.convertToType(data['siteSearchFilter'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('startPage')) {
                obj['startPage'] = ApiClient.convertToType(data['startPage'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchQueriesNextPageInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchQueriesNextPageInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cr'] && !(typeof data['cr'] === 'string' || data['cr'] instanceof String)) {
            throw new Error("Expected the field `cr` to be a primitive type in the JSON string but got " + data['cr']);
        }
        // ensure the json data is a string
        if (data['cx'] && !(typeof data['cx'] === 'string' || data['cx'] instanceof String)) {
            throw new Error("Expected the field `cx` to be a primitive type in the JSON string but got " + data['cx']);
        }
        // ensure the json data is a string
        if (data['dateRestrict'] && !(typeof data['dateRestrict'] === 'string' || data['dateRestrict'] instanceof String)) {
            throw new Error("Expected the field `dateRestrict` to be a primitive type in the JSON string but got " + data['dateRestrict']);
        }
        // ensure the json data is a string
        if (data['disableCnTwTranslation'] && !(typeof data['disableCnTwTranslation'] === 'string' || data['disableCnTwTranslation'] instanceof String)) {
            throw new Error("Expected the field `disableCnTwTranslation` to be a primitive type in the JSON string but got " + data['disableCnTwTranslation']);
        }
        // ensure the json data is a string
        if (data['exactTerms'] && !(typeof data['exactTerms'] === 'string' || data['exactTerms'] instanceof String)) {
            throw new Error("Expected the field `exactTerms` to be a primitive type in the JSON string but got " + data['exactTerms']);
        }
        // ensure the json data is a string
        if (data['excludeTerms'] && !(typeof data['excludeTerms'] === 'string' || data['excludeTerms'] instanceof String)) {
            throw new Error("Expected the field `excludeTerms` to be a primitive type in the JSON string but got " + data['excludeTerms']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['gl'] && !(typeof data['gl'] === 'string' || data['gl'] instanceof String)) {
            throw new Error("Expected the field `gl` to be a primitive type in the JSON string but got " + data['gl']);
        }
        // ensure the json data is a string
        if (data['googleHost'] && !(typeof data['googleHost'] === 'string' || data['googleHost'] instanceof String)) {
            throw new Error("Expected the field `googleHost` to be a primitive type in the JSON string but got " + data['googleHost']);
        }
        // ensure the json data is a string
        if (data['highRange'] && !(typeof data['highRange'] === 'string' || data['highRange'] instanceof String)) {
            throw new Error("Expected the field `highRange` to be a primitive type in the JSON string but got " + data['highRange']);
        }
        // ensure the json data is a string
        if (data['hl'] && !(typeof data['hl'] === 'string' || data['hl'] instanceof String)) {
            throw new Error("Expected the field `hl` to be a primitive type in the JSON string but got " + data['hl']);
        }
        // ensure the json data is a string
        if (data['hq'] && !(typeof data['hq'] === 'string' || data['hq'] instanceof String)) {
            throw new Error("Expected the field `hq` to be a primitive type in the JSON string but got " + data['hq']);
        }
        // ensure the json data is a string
        if (data['imgColorType'] && !(typeof data['imgColorType'] === 'string' || data['imgColorType'] instanceof String)) {
            throw new Error("Expected the field `imgColorType` to be a primitive type in the JSON string but got " + data['imgColorType']);
        }
        // ensure the json data is a string
        if (data['imgDominantColor'] && !(typeof data['imgDominantColor'] === 'string' || data['imgDominantColor'] instanceof String)) {
            throw new Error("Expected the field `imgDominantColor` to be a primitive type in the JSON string but got " + data['imgDominantColor']);
        }
        // ensure the json data is a string
        if (data['imgSize'] && !(typeof data['imgSize'] === 'string' || data['imgSize'] instanceof String)) {
            throw new Error("Expected the field `imgSize` to be a primitive type in the JSON string but got " + data['imgSize']);
        }
        // ensure the json data is a string
        if (data['imgType'] && !(typeof data['imgType'] === 'string' || data['imgType'] instanceof String)) {
            throw new Error("Expected the field `imgType` to be a primitive type in the JSON string but got " + data['imgType']);
        }
        // ensure the json data is a string
        if (data['inputEncoding'] && !(typeof data['inputEncoding'] === 'string' || data['inputEncoding'] instanceof String)) {
            throw new Error("Expected the field `inputEncoding` to be a primitive type in the JSON string but got " + data['inputEncoding']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['linkSite'] && !(typeof data['linkSite'] === 'string' || data['linkSite'] instanceof String)) {
            throw new Error("Expected the field `linkSite` to be a primitive type in the JSON string but got " + data['linkSite']);
        }
        // ensure the json data is a string
        if (data['lowRange'] && !(typeof data['lowRange'] === 'string' || data['lowRange'] instanceof String)) {
            throw new Error("Expected the field `lowRange` to be a primitive type in the JSON string but got " + data['lowRange']);
        }
        // ensure the json data is a string
        if (data['orTerms'] && !(typeof data['orTerms'] === 'string' || data['orTerms'] instanceof String)) {
            throw new Error("Expected the field `orTerms` to be a primitive type in the JSON string but got " + data['orTerms']);
        }
        // ensure the json data is a string
        if (data['outputEncoding'] && !(typeof data['outputEncoding'] === 'string' || data['outputEncoding'] instanceof String)) {
            throw new Error("Expected the field `outputEncoding` to be a primitive type in the JSON string but got " + data['outputEncoding']);
        }
        // ensure the json data is a string
        if (data['relatedSite'] && !(typeof data['relatedSite'] === 'string' || data['relatedSite'] instanceof String)) {
            throw new Error("Expected the field `relatedSite` to be a primitive type in the JSON string but got " + data['relatedSite']);
        }
        // ensure the json data is a string
        if (data['rights'] && !(typeof data['rights'] === 'string' || data['rights'] instanceof String)) {
            throw new Error("Expected the field `rights` to be a primitive type in the JSON string but got " + data['rights']);
        }
        // ensure the json data is a string
        if (data['safe'] && !(typeof data['safe'] === 'string' || data['safe'] instanceof String)) {
            throw new Error("Expected the field `safe` to be a primitive type in the JSON string but got " + data['safe']);
        }
        // ensure the json data is a string
        if (data['searchTerms'] && !(typeof data['searchTerms'] === 'string' || data['searchTerms'] instanceof String)) {
            throw new Error("Expected the field `searchTerms` to be a primitive type in the JSON string but got " + data['searchTerms']);
        }
        // ensure the json data is a string
        if (data['searchType'] && !(typeof data['searchType'] === 'string' || data['searchType'] instanceof String)) {
            throw new Error("Expected the field `searchType` to be a primitive type in the JSON string but got " + data['searchType']);
        }
        // ensure the json data is a string
        if (data['siteSearch'] && !(typeof data['siteSearch'] === 'string' || data['siteSearch'] instanceof String)) {
            throw new Error("Expected the field `siteSearch` to be a primitive type in the JSON string but got " + data['siteSearch']);
        }
        // ensure the json data is a string
        if (data['siteSearchFilter'] && !(typeof data['siteSearchFilter'] === 'string' || data['siteSearchFilter'] instanceof String)) {
            throw new Error("Expected the field `siteSearchFilter` to be a primitive type in the JSON string but got " + data['siteSearchFilter']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['totalResults'] && !(typeof data['totalResults'] === 'string' || data['totalResults'] instanceof String)) {
            throw new Error("Expected the field `totalResults` to be a primitive type in the JSON string but got " + data['totalResults']);
        }

        return true;
    }


}



/**
 * Number of search results returned in this set.
 * @member {Number} count
 */
SearchQueriesNextPageInner.prototype['count'] = undefined;

/**
 * Restricts search results to documents originating in a particular country. You may use [Boolean operators](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) in the `cr` parameter's value. Google WebSearch determines the country of a document by analyzing the following: * The top-level domain (TLD) of the document's URL. * The geographic location of the web server's IP address. See [Country (cr) Parameter Values](https://developers.google.com/custom-search/docs/json_api_reference#countryCollections) for a list of valid values for this parameter.
 * @member {String} cr
 */
SearchQueriesNextPageInner.prototype['cr'] = undefined;

/**
 * The identifier of an engine created using the Programmable Search Engine [Control Panel](https://programmablesearchengine.google.com/). This is a custom property not defined in the OpenSearch spec. This parameter is **required**.
 * @member {String} cx
 */
SearchQueriesNextPageInner.prototype['cx'] = undefined;

/**
 * Restricts results to URLs based on date. Supported values include: * `d[number]`: requests results from the specified number of past days. * `w[number]`: requests results from the specified number of past weeks. * `m[number]`: requests results from the specified number of past months. * `y[number]`: requests results from the specified number of past years.
 * @member {String} dateRestrict
 */
SearchQueriesNextPageInner.prototype['dateRestrict'] = undefined;

/**
 * Enables or disables the [Simplified and Traditional Chinese Search](https://developers.google.com/custom-search/docs/json_api_reference#chineseSearch) feature. Supported values are: * `0`: enabled (default) * `1`: disabled
 * @member {String} disableCnTwTranslation
 */
SearchQueriesNextPageInner.prototype['disableCnTwTranslation'] = undefined;

/**
 * Identifies a phrase that all documents in the search results must contain.
 * @member {String} exactTerms
 */
SearchQueriesNextPageInner.prototype['exactTerms'] = undefined;

/**
 * Identifies a word or phrase that should not appear in any documents in the search results.
 * @member {String} excludeTerms
 */
SearchQueriesNextPageInner.prototype['excludeTerms'] = undefined;

/**
 * Restricts results to files of a specified extension. Filetypes supported by Google include: * Adobe Portable Document Format (`pdf`) * Adobe PostScript (`ps`) * Lotus 1-2-3 (`wk1`, `wk2`, `wk3`, `wk4`, `wk5`, `wki`, `wks`, `wku`) * Lotus WordPro (`lwp`) * Macwrite (`mw`) * Microsoft Excel (`xls`) * Microsoft PowerPoint (`ppt`) * Microsoft Word (`doc`) * Microsoft Works (`wks`, `wps`, `wdb`) * Microsoft Write (`wri`) * Rich Text Format (`rtf`) * Shockwave Flash (`swf`) * Text (`ans`, `txt`). Additional filetypes may be added in the future. An up-to-date list can always be found in Google's [file type FAQ](https://support.google.com/webmasters/answer/35287).
 * @member {String} fileType
 */
SearchQueriesNextPageInner.prototype['fileType'] = undefined;

/**
 * Activates or deactivates the automatic filtering of Google search results. See [Automatic Filtering](https://developers.google.com/custom-search/docs/json_api_reference#automaticFiltering) for more information about Google's search results filters. Valid values for this parameter are: * `0`: Disabled * `1`: Enabled (default) **Note**: By default, Google applies filtering to all search results to improve the quality of those results.
 * @member {String} filter
 */
SearchQueriesNextPageInner.prototype['filter'] = undefined;

/**
 * Boosts search results whose country of origin matches the parameter value. See [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) for a list of valid values. Specifying a `gl` parameter value in WebSearch requests should improve the relevance of results. This is particularly true for international customers and, even more specifically, for customers in English-speaking countries other than the United States.
 * @member {String} gl
 */
SearchQueriesNextPageInner.prototype['gl'] = undefined;

/**
 * Specifies the Google domain (for example, google.com, google.de, or google.fr) to which the search should be limited.
 * @member {String} googleHost
 */
SearchQueriesNextPageInner.prototype['googleHost'] = undefined;

/**
 * Specifies the ending value for a search range. Use `cse:lowRange` and `cse:highrange` to append an inclusive search range of `lowRange...highRange` to the query.
 * @member {String} highRange
 */
SearchQueriesNextPageInner.prototype['highRange'] = undefined;

/**
 * Specifies the interface language (host language) of your user interface. Explicitly setting this parameter improves the performance and the quality of your search results. See the [Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#wsInterfaceLanguages) section of [Internationalizing Queries and Results Presentation](https://developers.google.com/custom-search/docs/json_api_reference#wsInternationalizing) for more information, and [Supported Interface Languages](https://developers.google.com/custom-search/docs/json_api_reference#interfaceLanguages) for a list of supported languages.
 * @member {String} hl
 */
SearchQueriesNextPageInner.prototype['hl'] = undefined;

/**
 * Appends the specified query terms to the query, as if they were combined with a logical `AND` operator.
 * @member {String} hq
 */
SearchQueriesNextPageInner.prototype['hq'] = undefined;

/**
 * Restricts results to images of a specified color type. Supported values are: * `mono` (black and white) * `gray` (grayscale) * `color` (color)
 * @member {String} imgColorType
 */
SearchQueriesNextPageInner.prototype['imgColorType'] = undefined;

/**
 * Restricts results to images with a specific dominant color. Supported values are: * `red` * `orange` * `yellow` * `green` * `teal` * `blue` * `purple` * `pink` * `white` * `gray` * `black` * `brown`
 * @member {String} imgDominantColor
 */
SearchQueriesNextPageInner.prototype['imgDominantColor'] = undefined;

/**
 * Restricts results to images of a specified size. Supported values are: * `icon` (small) * `small | medium | large | xlarge` (medium) * `xxlarge` (large) * `huge` (extra-large)
 * @member {String} imgSize
 */
SearchQueriesNextPageInner.prototype['imgSize'] = undefined;

/**
 * Restricts results to images of a specified type. Supported values are: * `clipart` (Clip art) * `face` (Face) * `lineart` (Line drawing) * `photo` (Photo) * `animated` (Animated) * `stock` (Stock)
 * @member {String} imgType
 */
SearchQueriesNextPageInner.prototype['imgType'] = undefined;

/**
 * The character encoding supported for search requests.
 * @member {String} inputEncoding
 */
SearchQueriesNextPageInner.prototype['inputEncoding'] = undefined;

/**
 * The language of the search results.
 * @member {String} language
 */
SearchQueriesNextPageInner.prototype['language'] = undefined;

/**
 * Specifies that all results should contain a link to a specific URL.
 * @member {String} linkSite
 */
SearchQueriesNextPageInner.prototype['linkSite'] = undefined;

/**
 * Specifies the starting value for a search range. Use `cse:lowRange` and `cse:highrange` to append an inclusive search range of `lowRange...highRange` to the query.
 * @member {String} lowRange
 */
SearchQueriesNextPageInner.prototype['lowRange'] = undefined;

/**
 * Provides additional search terms to check for in a document, where each document in the search results must contain at least one of the additional search terms. You can also use the [Boolean OR](https://developers.google.com/custom-search/docs/json_api_reference#BooleanOrSearch) query term for this type of query.
 * @member {String} orTerms
 */
SearchQueriesNextPageInner.prototype['orTerms'] = undefined;

/**
 * The character encoding supported for search results.
 * @member {String} outputEncoding
 */
SearchQueriesNextPageInner.prototype['outputEncoding'] = undefined;

/**
 * Specifies that all search results should be pages that are related to the specified URL. The parameter value should be a URL.
 * @member {String} relatedSite
 */
SearchQueriesNextPageInner.prototype['relatedSite'] = undefined;

/**
 * Filters based on licensing. Supported values include: * `cc_publicdomain` * `cc_attribute` * `cc_sharealike` * `cc_noncommercial` * `cc_nonderived`
 * @member {String} rights
 */
SearchQueriesNextPageInner.prototype['rights'] = undefined;

/**
 * Specifies the [SafeSearch level](https://developers.google.com/custom-search/docs/json_api_reference#safeSearchLevels) used for filtering out adult results. This is a custom property not defined in the OpenSearch spec. Valid parameter values are: * `\"off\"`: Disable SafeSearch * `\"active\"`: Enable SafeSearch
 * @member {String} safe
 */
SearchQueriesNextPageInner.prototype['safe'] = undefined;

/**
 * The search terms entered by the user.
 * @member {String} searchTerms
 */
SearchQueriesNextPageInner.prototype['searchTerms'] = undefined;

/**
 * Allowed values are `web` or `image`. If unspecified, results are limited to webpages.
 * @member {String} searchType
 */
SearchQueriesNextPageInner.prototype['searchType'] = undefined;

/**
 * Restricts results to URLs from a specified site.
 * @member {String} siteSearch
 */
SearchQueriesNextPageInner.prototype['siteSearch'] = undefined;

/**
 * Specifies whether to include or exclude results from the site named in the `sitesearch` parameter. Supported values are: * `i`: include content from site * `e`: exclude content from site
 * @member {String} siteSearchFilter
 */
SearchQueriesNextPageInner.prototype['siteSearchFilter'] = undefined;

/**
 * Specifies that results should be sorted according to the specified expression. For example, sort by date.
 * @member {String} sort
 */
SearchQueriesNextPageInner.prototype['sort'] = undefined;

/**
 * The index of the current set of search results into the total set of results, where the index of the first result is 1.
 * @member {Number} startIndex
 */
SearchQueriesNextPageInner.prototype['startIndex'] = undefined;

/**
 * The page number of this set of results, where the page length is set by the `count` property.
 * @member {Number} startPage
 */
SearchQueriesNextPageInner.prototype['startPage'] = undefined;

/**
 * A description of the query.
 * @member {String} title
 */
SearchQueriesNextPageInner.prototype['title'] = undefined;

/**
 * Estimated number of total search results. May not be accurate.
 * @member {String} totalResults
 */
SearchQueriesNextPageInner.prototype['totalResults'] = undefined;






export default SearchQueriesNextPageInner;

