/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalyzeCommentRequest.h
 *
 * The comment analysis request message. Next ID: 11
 */

#ifndef OAIAnalyzeCommentRequest_H
#define OAIAnalyzeCommentRequest_H

#include <QJsonObject>

#include "OAIAttributeParameters.h"
#include "OAIContext.h"
#include "OAITextEntry.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITextEntry;
class OAIContext;
class OAIAttributeParameters;

class OAIAnalyzeCommentRequest : public OAIObject {
public:
    OAIAnalyzeCommentRequest();
    OAIAnalyzeCommentRequest(QString json);
    ~OAIAnalyzeCommentRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    OAITextEntry getComment() const;
    void setComment(const OAITextEntry &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getCommunityId() const;
    void setCommunityId(const QString &community_id);
    bool is_community_id_Set() const;
    bool is_community_id_Valid() const;

    OAIContext getContext() const;
    void setContext(const OAIContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    bool isDoNotStore() const;
    void setDoNotStore(const bool &do_not_store);
    bool is_do_not_store_Set() const;
    bool is_do_not_store_Valid() const;

    bool isDropUnsupportedAttributes() const;
    void setDropUnsupportedAttributes(const bool &drop_unsupported_attributes);
    bool is_drop_unsupported_attributes_Set() const;
    bool is_drop_unsupported_attributes_Valid() const;

    QList<QString> getLanguages() const;
    void setLanguages(const QList<QString> &languages);
    bool is_languages_Set() const;
    bool is_languages_Valid() const;

    QMap<QString, OAIAttributeParameters> getRequestedAttributes() const;
    void setRequestedAttributes(const QMap<QString, OAIAttributeParameters> &requested_attributes);
    bool is_requested_attributes_Set() const;
    bool is_requested_attributes_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    bool isSpanAnnotations() const;
    void setSpanAnnotations(const bool &span_annotations);
    bool is_span_annotations_Set() const;
    bool is_span_annotations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    OAITextEntry m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_community_id;
    bool m_community_id_isSet;
    bool m_community_id_isValid;

    OAIContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    bool m_do_not_store;
    bool m_do_not_store_isSet;
    bool m_do_not_store_isValid;

    bool m_drop_unsupported_attributes;
    bool m_drop_unsupported_attributes_isSet;
    bool m_drop_unsupported_attributes_isValid;

    QList<QString> m_languages;
    bool m_languages_isSet;
    bool m_languages_isValid;

    QMap<QString, OAIAttributeParameters> m_requested_attributes;
    bool m_requested_attributes_isSet;
    bool m_requested_attributes_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    bool m_span_annotations;
    bool m_span_annotations_isSet;
    bool m_span_annotations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalyzeCommentRequest)

#endif // OAIAnalyzeCommentRequest_H
