/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestCommentScoreResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestCommentScoreResponse::OAISuggestCommentScoreResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestCommentScoreResponse::OAISuggestCommentScoreResponse() {
    this->initializeModel();
}

OAISuggestCommentScoreResponse::~OAISuggestCommentScoreResponse() {}

void OAISuggestCommentScoreResponse::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_requested_languages_isSet = false;
    m_requested_languages_isValid = false;
}

void OAISuggestCommentScoreResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestCommentScoreResponse::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_requested_languages_isValid = ::OpenAPI::fromJsonValue(m_requested_languages, json[QString("requestedLanguages")]);
    m_requested_languages_isSet = !json[QString("requestedLanguages")].isNull() && m_requested_languages_isValid;
}

QString OAISuggestCommentScoreResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestCommentScoreResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_requested_languages.size() > 0) {
        obj.insert(QString("requestedLanguages"), ::OpenAPI::toJsonValue(m_requested_languages));
    }
    return obj;
}

QString OAISuggestCommentScoreResponse::getClientToken() const {
    return m_client_token;
}
void OAISuggestCommentScoreResponse::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAISuggestCommentScoreResponse::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAISuggestCommentScoreResponse::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAISuggestCommentScoreResponse::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAISuggestCommentScoreResponse::setDetectedLanguages(const QList<QString> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAISuggestCommentScoreResponse::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAISuggestCommentScoreResponse::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QList<QString> OAISuggestCommentScoreResponse::getRequestedLanguages() const {
    return m_requested_languages;
}
void OAISuggestCommentScoreResponse::setRequestedLanguages(const QList<QString> &requested_languages) {
    m_requested_languages = requested_languages;
    m_requested_languages_isSet = true;
}

bool OAISuggestCommentScoreResponse::is_requested_languages_Set() const{
    return m_requested_languages_isSet;
}

bool OAISuggestCommentScoreResponse::is_requested_languages_Valid() const{
    return m_requested_languages_isValid;
}

bool OAISuggestCommentScoreResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestCommentScoreResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
