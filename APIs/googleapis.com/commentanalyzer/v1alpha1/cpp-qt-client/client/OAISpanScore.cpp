/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpanScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpanScore::OAISpanScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpanScore::OAISpanScore() {
    this->initializeModel();
}

OAISpanScore::~OAISpanScore() {}

void OAISpanScore::initializeModel() {

    m_begin_isSet = false;
    m_begin_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAISpanScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpanScore::fromJsonObject(QJsonObject json) {

    m_begin_isValid = ::OpenAPI::fromJsonValue(m_begin, json[QString("begin")]);
    m_begin_isSet = !json[QString("begin")].isNull() && m_begin_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAISpanScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpanScore::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_isSet) {
        obj.insert(QString("begin"), ::OpenAPI::toJsonValue(m_begin));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_score.isSet()) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

qint32 OAISpanScore::getBegin() const {
    return m_begin;
}
void OAISpanScore::setBegin(const qint32 &begin) {
    m_begin = begin;
    m_begin_isSet = true;
}

bool OAISpanScore::is_begin_Set() const{
    return m_begin_isSet;
}

bool OAISpanScore::is_begin_Valid() const{
    return m_begin_isValid;
}

qint32 OAISpanScore::getEnd() const {
    return m_end;
}
void OAISpanScore::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAISpanScore::is_end_Set() const{
    return m_end_isSet;
}

bool OAISpanScore::is_end_Valid() const{
    return m_end_isValid;
}

OAIScore OAISpanScore::getScore() const {
    return m_score;
}
void OAISpanScore::setScore(const OAIScore &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISpanScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAISpanScore::is_score_Valid() const{
    return m_score_isValid;
}

bool OAISpanScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpanScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
