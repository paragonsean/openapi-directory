/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalyzeCommentResponse.h
 *
 * The comment analysis response message.
 */

#ifndef OAIAnalyzeCommentResponse_H
#define OAIAnalyzeCommentResponse_H

#include <QJsonObject>

#include "OAIAttributeScores.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttributeScores;

class OAIAnalyzeCommentResponse : public OAIObject {
public:
    OAIAnalyzeCommentResponse();
    OAIAnalyzeCommentResponse(QString json);
    ~OAIAnalyzeCommentResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIAttributeScores> getAttributeScores() const;
    void setAttributeScores(const QMap<QString, OAIAttributeScores> &attribute_scores);
    bool is_attribute_scores_Set() const;
    bool is_attribute_scores_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QList<QString> getDetectedLanguages() const;
    void setDetectedLanguages(const QList<QString> &detected_languages);
    bool is_detected_languages_Set() const;
    bool is_detected_languages_Valid() const;

    QList<QString> getLanguages() const;
    void setLanguages(const QList<QString> &languages);
    bool is_languages_Set() const;
    bool is_languages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIAttributeScores> m_attribute_scores;
    bool m_attribute_scores_isSet;
    bool m_attribute_scores_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QList<QString> m_detected_languages;
    bool m_detected_languages_isSet;
    bool m_detected_languages_isValid;

    QList<QString> m_languages;
    bool m_languages_isSet;
    bool m_languages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalyzeCommentResponse)

#endif // OAIAnalyzeCommentResponse_H
