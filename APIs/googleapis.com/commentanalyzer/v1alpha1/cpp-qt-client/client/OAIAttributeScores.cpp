/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeScores.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeScores::OAIAttributeScores(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeScores::OAIAttributeScores() {
    this->initializeModel();
}

OAIAttributeScores::~OAIAttributeScores() {}

void OAIAttributeScores::initializeModel() {

    m_span_scores_isSet = false;
    m_span_scores_isValid = false;

    m_summary_score_isSet = false;
    m_summary_score_isValid = false;
}

void OAIAttributeScores::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeScores::fromJsonObject(QJsonObject json) {

    m_span_scores_isValid = ::OpenAPI::fromJsonValue(m_span_scores, json[QString("spanScores")]);
    m_span_scores_isSet = !json[QString("spanScores")].isNull() && m_span_scores_isValid;

    m_summary_score_isValid = ::OpenAPI::fromJsonValue(m_summary_score, json[QString("summaryScore")]);
    m_summary_score_isSet = !json[QString("summaryScore")].isNull() && m_summary_score_isValid;
}

QString OAIAttributeScores::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeScores::asJsonObject() const {
    QJsonObject obj;
    if (m_span_scores.size() > 0) {
        obj.insert(QString("spanScores"), ::OpenAPI::toJsonValue(m_span_scores));
    }
    if (m_summary_score.isSet()) {
        obj.insert(QString("summaryScore"), ::OpenAPI::toJsonValue(m_summary_score));
    }
    return obj;
}

QList<OAISpanScore> OAIAttributeScores::getSpanScores() const {
    return m_span_scores;
}
void OAIAttributeScores::setSpanScores(const QList<OAISpanScore> &span_scores) {
    m_span_scores = span_scores;
    m_span_scores_isSet = true;
}

bool OAIAttributeScores::is_span_scores_Set() const{
    return m_span_scores_isSet;
}

bool OAIAttributeScores::is_span_scores_Valid() const{
    return m_span_scores_isValid;
}

OAIScore OAIAttributeScores::getSummaryScore() const {
    return m_summary_score;
}
void OAIAttributeScores::setSummaryScore(const OAIScore &summary_score) {
    m_summary_score = summary_score;
    m_summary_score_isSet = true;
}

bool OAIAttributeScores::is_summary_score_Set() const{
    return m_summary_score_isSet;
}

bool OAIAttributeScores::is_summary_score_Valid() const{
    return m_summary_score_isValid;
}

bool OAIAttributeScores::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_span_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_score.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeScores::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
