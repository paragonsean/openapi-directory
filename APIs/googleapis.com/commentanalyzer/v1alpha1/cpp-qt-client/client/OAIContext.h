/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContext.h
 *
 * Context is typically something that a Comment is referencing or replying to (such as an article, or previous comment). Note: Populate only ONE OF the following fields. The oneof syntax cannot be used because that would require nesting entries inside another message and breaking backwards compatibility. The server will return an error if more than one of the following fields is present.
 */

#ifndef OAIContext_H
#define OAIContext_H

#include <QJsonObject>

#include "OAIArticleAndParentComment.h"
#include "OAITextEntry.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIArticleAndParentComment;
class OAITextEntry;

class OAIContext : public OAIObject {
public:
    OAIContext();
    OAIContext(QString json);
    ~OAIContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIArticleAndParentComment getArticleAndParentComment() const;
    void setArticleAndParentComment(const OAIArticleAndParentComment &article_and_parent_comment);
    bool is_article_and_parent_comment_Set() const;
    bool is_article_and_parent_comment_Valid() const;

    QList<OAITextEntry> getEntries() const;
    void setEntries(const QList<OAITextEntry> &entries);
    bool is_entries_Set() const;
    bool is_entries_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIArticleAndParentComment m_article_and_parent_comment;
    bool m_article_and_parent_comment_isSet;
    bool m_article_and_parent_comment_isValid;

    QList<OAITextEntry> m_entries;
    bool m_entries_isSet;
    bool m_entries_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContext)

#endif // OAIContext_H
