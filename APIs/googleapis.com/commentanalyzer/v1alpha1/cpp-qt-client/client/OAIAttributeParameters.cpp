/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeParameters::OAIAttributeParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeParameters::OAIAttributeParameters() {
    this->initializeModel();
}

OAIAttributeParameters::~OAIAttributeParameters() {}

void OAIAttributeParameters::initializeModel() {

    m_score_threshold_isSet = false;
    m_score_threshold_isValid = false;

    m_score_type_isSet = false;
    m_score_type_isValid = false;
}

void OAIAttributeParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeParameters::fromJsonObject(QJsonObject json) {

    m_score_threshold_isValid = ::OpenAPI::fromJsonValue(m_score_threshold, json[QString("scoreThreshold")]);
    m_score_threshold_isSet = !json[QString("scoreThreshold")].isNull() && m_score_threshold_isValid;

    m_score_type_isValid = ::OpenAPI::fromJsonValue(m_score_type, json[QString("scoreType")]);
    m_score_type_isSet = !json[QString("scoreType")].isNull() && m_score_type_isValid;
}

QString OAIAttributeParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_score_threshold_isSet) {
        obj.insert(QString("scoreThreshold"), ::OpenAPI::toJsonValue(m_score_threshold));
    }
    if (m_score_type_isSet) {
        obj.insert(QString("scoreType"), ::OpenAPI::toJsonValue(m_score_type));
    }
    return obj;
}

float OAIAttributeParameters::getScoreThreshold() const {
    return m_score_threshold;
}
void OAIAttributeParameters::setScoreThreshold(const float &score_threshold) {
    m_score_threshold = score_threshold;
    m_score_threshold_isSet = true;
}

bool OAIAttributeParameters::is_score_threshold_Set() const{
    return m_score_threshold_isSet;
}

bool OAIAttributeParameters::is_score_threshold_Valid() const{
    return m_score_threshold_isValid;
}

QString OAIAttributeParameters::getScoreType() const {
    return m_score_type;
}
void OAIAttributeParameters::setScoreType(const QString &score_type) {
    m_score_type = score_type;
    m_score_type_isSet = true;
}

bool OAIAttributeParameters::is_score_type_Set() const{
    return m_score_type_isSet;
}

bool OAIAttributeParameters::is_score_type_Valid() const{
    return m_score_type_isValid;
}

bool OAIAttributeParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
