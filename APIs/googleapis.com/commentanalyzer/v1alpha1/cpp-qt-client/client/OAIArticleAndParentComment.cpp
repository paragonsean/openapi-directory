/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleAndParentComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleAndParentComment::OAIArticleAndParentComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleAndParentComment::OAIArticleAndParentComment() {
    this->initializeModel();
}

OAIArticleAndParentComment::~OAIArticleAndParentComment() {}

void OAIArticleAndParentComment::initializeModel() {

    m_article_isSet = false;
    m_article_isValid = false;

    m_parent_comment_isSet = false;
    m_parent_comment_isValid = false;
}

void OAIArticleAndParentComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleAndParentComment::fromJsonObject(QJsonObject json) {

    m_article_isValid = ::OpenAPI::fromJsonValue(m_article, json[QString("article")]);
    m_article_isSet = !json[QString("article")].isNull() && m_article_isValid;

    m_parent_comment_isValid = ::OpenAPI::fromJsonValue(m_parent_comment, json[QString("parentComment")]);
    m_parent_comment_isSet = !json[QString("parentComment")].isNull() && m_parent_comment_isValid;
}

QString OAIArticleAndParentComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleAndParentComment::asJsonObject() const {
    QJsonObject obj;
    if (m_article.isSet()) {
        obj.insert(QString("article"), ::OpenAPI::toJsonValue(m_article));
    }
    if (m_parent_comment.isSet()) {
        obj.insert(QString("parentComment"), ::OpenAPI::toJsonValue(m_parent_comment));
    }
    return obj;
}

OAITextEntry OAIArticleAndParentComment::getArticle() const {
    return m_article;
}
void OAIArticleAndParentComment::setArticle(const OAITextEntry &article) {
    m_article = article;
    m_article_isSet = true;
}

bool OAIArticleAndParentComment::is_article_Set() const{
    return m_article_isSet;
}

bool OAIArticleAndParentComment::is_article_Valid() const{
    return m_article_isValid;
}

OAITextEntry OAIArticleAndParentComment::getParentComment() const {
    return m_parent_comment;
}
void OAIArticleAndParentComment::setParentComment(const OAITextEntry &parent_comment) {
    m_parent_comment = parent_comment;
    m_parent_comment_isSet = true;
}

bool OAIArticleAndParentComment::is_parent_comment_Set() const{
    return m_parent_comment_isSet;
}

bool OAIArticleAndParentComment::is_parent_comment_Valid() const{
    return m_parent_comment_isValid;
}

bool OAIArticleAndParentComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_article.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleAndParentComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
