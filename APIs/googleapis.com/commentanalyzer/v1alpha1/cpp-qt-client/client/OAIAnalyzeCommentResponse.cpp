/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeCommentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeCommentResponse::OAIAnalyzeCommentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeCommentResponse::OAIAnalyzeCommentResponse() {
    this->initializeModel();
}

OAIAnalyzeCommentResponse::~OAIAnalyzeCommentResponse() {}

void OAIAnalyzeCommentResponse::initializeModel() {

    m_attribute_scores_isSet = false;
    m_attribute_scores_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;
}

void OAIAnalyzeCommentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeCommentResponse::fromJsonObject(QJsonObject json) {

    m_attribute_scores_isValid = ::OpenAPI::fromJsonValue(m_attribute_scores, json[QString("attributeScores")]);
    m_attribute_scores_isSet = !json[QString("attributeScores")].isNull() && m_attribute_scores_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;
}

QString OAIAnalyzeCommentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeCommentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_scores.size() > 0) {
        obj.insert(QString("attributeScores"), ::OpenAPI::toJsonValue(m_attribute_scores));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    return obj;
}

QMap<QString, OAIAttributeScores> OAIAnalyzeCommentResponse::getAttributeScores() const {
    return m_attribute_scores;
}
void OAIAnalyzeCommentResponse::setAttributeScores(const QMap<QString, OAIAttributeScores> &attribute_scores) {
    m_attribute_scores = attribute_scores;
    m_attribute_scores_isSet = true;
}

bool OAIAnalyzeCommentResponse::is_attribute_scores_Set() const{
    return m_attribute_scores_isSet;
}

bool OAIAnalyzeCommentResponse::is_attribute_scores_Valid() const{
    return m_attribute_scores_isValid;
}

QString OAIAnalyzeCommentResponse::getClientToken() const {
    return m_client_token;
}
void OAIAnalyzeCommentResponse::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAnalyzeCommentResponse::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAnalyzeCommentResponse::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAIAnalyzeCommentResponse::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIAnalyzeCommentResponse::setDetectedLanguages(const QList<QString> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIAnalyzeCommentResponse::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIAnalyzeCommentResponse::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QList<QString> OAIAnalyzeCommentResponse::getLanguages() const {
    return m_languages;
}
void OAIAnalyzeCommentResponse::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIAnalyzeCommentResponse::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIAnalyzeCommentResponse::is_languages_Valid() const{
    return m_languages_isValid;
}

bool OAIAnalyzeCommentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeCommentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
