/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestCommentScoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestCommentScoreRequest::OAISuggestCommentScoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestCommentScoreRequest::OAISuggestCommentScoreRequest() {
    this->initializeModel();
}

OAISuggestCommentScoreRequest::~OAISuggestCommentScoreRequest() {}

void OAISuggestCommentScoreRequest::initializeModel() {

    m_attribute_scores_isSet = false;
    m_attribute_scores_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_community_id_isSet = false;
    m_community_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAISuggestCommentScoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestCommentScoreRequest::fromJsonObject(QJsonObject json) {

    m_attribute_scores_isValid = ::OpenAPI::fromJsonValue(m_attribute_scores, json[QString("attributeScores")]);
    m_attribute_scores_isSet = !json[QString("attributeScores")].isNull() && m_attribute_scores_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_community_id_isValid = ::OpenAPI::fromJsonValue(m_community_id, json[QString("communityId")]);
    m_community_id_isSet = !json[QString("communityId")].isNull() && m_community_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAISuggestCommentScoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestCommentScoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_scores.size() > 0) {
        obj.insert(QString("attributeScores"), ::OpenAPI::toJsonValue(m_attribute_scores));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_community_id_isSet) {
        obj.insert(QString("communityId"), ::OpenAPI::toJsonValue(m_community_id));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QMap<QString, OAIAttributeScores> OAISuggestCommentScoreRequest::getAttributeScores() const {
    return m_attribute_scores;
}
void OAISuggestCommentScoreRequest::setAttributeScores(const QMap<QString, OAIAttributeScores> &attribute_scores) {
    m_attribute_scores = attribute_scores;
    m_attribute_scores_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_attribute_scores_Set() const{
    return m_attribute_scores_isSet;
}

bool OAISuggestCommentScoreRequest::is_attribute_scores_Valid() const{
    return m_attribute_scores_isValid;
}

QString OAISuggestCommentScoreRequest::getClientToken() const {
    return m_client_token;
}
void OAISuggestCommentScoreRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAISuggestCommentScoreRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAITextEntry OAISuggestCommentScoreRequest::getComment() const {
    return m_comment;
}
void OAISuggestCommentScoreRequest::setComment(const OAITextEntry &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAISuggestCommentScoreRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAISuggestCommentScoreRequest::getCommunityId() const {
    return m_community_id;
}
void OAISuggestCommentScoreRequest::setCommunityId(const QString &community_id) {
    m_community_id = community_id;
    m_community_id_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_community_id_Set() const{
    return m_community_id_isSet;
}

bool OAISuggestCommentScoreRequest::is_community_id_Valid() const{
    return m_community_id_isValid;
}

OAIContext OAISuggestCommentScoreRequest::getContext() const {
    return m_context;
}
void OAISuggestCommentScoreRequest::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAISuggestCommentScoreRequest::is_context_Valid() const{
    return m_context_isValid;
}

QList<QString> OAISuggestCommentScoreRequest::getLanguages() const {
    return m_languages;
}
void OAISuggestCommentScoreRequest::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAISuggestCommentScoreRequest::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAISuggestCommentScoreRequest::getSessionId() const {
    return m_session_id;
}
void OAISuggestCommentScoreRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISuggestCommentScoreRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISuggestCommentScoreRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAISuggestCommentScoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestCommentScoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
