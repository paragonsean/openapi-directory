/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContext::OAIContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContext::OAIContext() {
    this->initializeModel();
}

OAIContext::~OAIContext() {}

void OAIContext::initializeModel() {

    m_article_and_parent_comment_isSet = false;
    m_article_and_parent_comment_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;
}

void OAIContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContext::fromJsonObject(QJsonObject json) {

    m_article_and_parent_comment_isValid = ::OpenAPI::fromJsonValue(m_article_and_parent_comment, json[QString("articleAndParentComment")]);
    m_article_and_parent_comment_isSet = !json[QString("articleAndParentComment")].isNull() && m_article_and_parent_comment_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;
}

QString OAIContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContext::asJsonObject() const {
    QJsonObject obj;
    if (m_article_and_parent_comment.isSet()) {
        obj.insert(QString("articleAndParentComment"), ::OpenAPI::toJsonValue(m_article_and_parent_comment));
    }
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    return obj;
}

OAIArticleAndParentComment OAIContext::getArticleAndParentComment() const {
    return m_article_and_parent_comment;
}
void OAIContext::setArticleAndParentComment(const OAIArticleAndParentComment &article_and_parent_comment) {
    m_article_and_parent_comment = article_and_parent_comment;
    m_article_and_parent_comment_isSet = true;
}

bool OAIContext::is_article_and_parent_comment_Set() const{
    return m_article_and_parent_comment_isSet;
}

bool OAIContext::is_article_and_parent_comment_Valid() const{
    return m_article_and_parent_comment_isValid;
}

QList<OAITextEntry> OAIContext::getEntries() const {
    return m_entries;
}
void OAIContext::setEntries(const QList<OAITextEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIContext::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIContext::is_entries_Valid() const{
    return m_entries_isValid;
}

bool OAIContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_article_and_parent_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
