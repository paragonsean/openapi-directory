/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeCommentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeCommentRequest::OAIAnalyzeCommentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeCommentRequest::OAIAnalyzeCommentRequest() {
    this->initializeModel();
}

OAIAnalyzeCommentRequest::~OAIAnalyzeCommentRequest() {}

void OAIAnalyzeCommentRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_community_id_isSet = false;
    m_community_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_do_not_store_isSet = false;
    m_do_not_store_isValid = false;

    m_drop_unsupported_attributes_isSet = false;
    m_drop_unsupported_attributes_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_requested_attributes_isSet = false;
    m_requested_attributes_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_span_annotations_isSet = false;
    m_span_annotations_isValid = false;
}

void OAIAnalyzeCommentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeCommentRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_community_id_isValid = ::OpenAPI::fromJsonValue(m_community_id, json[QString("communityId")]);
    m_community_id_isSet = !json[QString("communityId")].isNull() && m_community_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_do_not_store_isValid = ::OpenAPI::fromJsonValue(m_do_not_store, json[QString("doNotStore")]);
    m_do_not_store_isSet = !json[QString("doNotStore")].isNull() && m_do_not_store_isValid;

    m_drop_unsupported_attributes_isValid = ::OpenAPI::fromJsonValue(m_drop_unsupported_attributes, json[QString("dropUnsupportedAttributes")]);
    m_drop_unsupported_attributes_isSet = !json[QString("dropUnsupportedAttributes")].isNull() && m_drop_unsupported_attributes_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_requested_attributes_isValid = ::OpenAPI::fromJsonValue(m_requested_attributes, json[QString("requestedAttributes")]);
    m_requested_attributes_isSet = !json[QString("requestedAttributes")].isNull() && m_requested_attributes_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_span_annotations_isValid = ::OpenAPI::fromJsonValue(m_span_annotations, json[QString("spanAnnotations")]);
    m_span_annotations_isSet = !json[QString("spanAnnotations")].isNull() && m_span_annotations_isValid;
}

QString OAIAnalyzeCommentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeCommentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_community_id_isSet) {
        obj.insert(QString("communityId"), ::OpenAPI::toJsonValue(m_community_id));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_do_not_store_isSet) {
        obj.insert(QString("doNotStore"), ::OpenAPI::toJsonValue(m_do_not_store));
    }
    if (m_drop_unsupported_attributes_isSet) {
        obj.insert(QString("dropUnsupportedAttributes"), ::OpenAPI::toJsonValue(m_drop_unsupported_attributes));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_requested_attributes.size() > 0) {
        obj.insert(QString("requestedAttributes"), ::OpenAPI::toJsonValue(m_requested_attributes));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_span_annotations_isSet) {
        obj.insert(QString("spanAnnotations"), ::OpenAPI::toJsonValue(m_span_annotations));
    }
    return obj;
}

QString OAIAnalyzeCommentRequest::getClientToken() const {
    return m_client_token;
}
void OAIAnalyzeCommentRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAnalyzeCommentRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAITextEntry OAIAnalyzeCommentRequest::getComment() const {
    return m_comment;
}
void OAIAnalyzeCommentRequest::setComment(const OAITextEntry &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAnalyzeCommentRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIAnalyzeCommentRequest::getCommunityId() const {
    return m_community_id;
}
void OAIAnalyzeCommentRequest::setCommunityId(const QString &community_id) {
    m_community_id = community_id;
    m_community_id_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_community_id_Set() const{
    return m_community_id_isSet;
}

bool OAIAnalyzeCommentRequest::is_community_id_Valid() const{
    return m_community_id_isValid;
}

OAIContext OAIAnalyzeCommentRequest::getContext() const {
    return m_context;
}
void OAIAnalyzeCommentRequest::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIAnalyzeCommentRequest::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIAnalyzeCommentRequest::isDoNotStore() const {
    return m_do_not_store;
}
void OAIAnalyzeCommentRequest::setDoNotStore(const bool &do_not_store) {
    m_do_not_store = do_not_store;
    m_do_not_store_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_do_not_store_Set() const{
    return m_do_not_store_isSet;
}

bool OAIAnalyzeCommentRequest::is_do_not_store_Valid() const{
    return m_do_not_store_isValid;
}

bool OAIAnalyzeCommentRequest::isDropUnsupportedAttributes() const {
    return m_drop_unsupported_attributes;
}
void OAIAnalyzeCommentRequest::setDropUnsupportedAttributes(const bool &drop_unsupported_attributes) {
    m_drop_unsupported_attributes = drop_unsupported_attributes;
    m_drop_unsupported_attributes_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_drop_unsupported_attributes_Set() const{
    return m_drop_unsupported_attributes_isSet;
}

bool OAIAnalyzeCommentRequest::is_drop_unsupported_attributes_Valid() const{
    return m_drop_unsupported_attributes_isValid;
}

QList<QString> OAIAnalyzeCommentRequest::getLanguages() const {
    return m_languages;
}
void OAIAnalyzeCommentRequest::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIAnalyzeCommentRequest::is_languages_Valid() const{
    return m_languages_isValid;
}

QMap<QString, OAIAttributeParameters> OAIAnalyzeCommentRequest::getRequestedAttributes() const {
    return m_requested_attributes;
}
void OAIAnalyzeCommentRequest::setRequestedAttributes(const QMap<QString, OAIAttributeParameters> &requested_attributes) {
    m_requested_attributes = requested_attributes;
    m_requested_attributes_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_requested_attributes_Set() const{
    return m_requested_attributes_isSet;
}

bool OAIAnalyzeCommentRequest::is_requested_attributes_Valid() const{
    return m_requested_attributes_isValid;
}

QString OAIAnalyzeCommentRequest::getSessionId() const {
    return m_session_id;
}
void OAIAnalyzeCommentRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIAnalyzeCommentRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIAnalyzeCommentRequest::isSpanAnnotations() const {
    return m_span_annotations;
}
void OAIAnalyzeCommentRequest::setSpanAnnotations(const bool &span_annotations) {
    m_span_annotations = span_annotations;
    m_span_annotations_isSet = true;
}

bool OAIAnalyzeCommentRequest::is_span_annotations_Set() const{
    return m_span_annotations_isSet;
}

bool OAIAnalyzeCommentRequest::is_span_annotations_Valid() const{
    return m_span_annotations_isValid;
}

bool OAIAnalyzeCommentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_unsupported_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeCommentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
