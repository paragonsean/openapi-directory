/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeCommentRequest;
import org.openapitools.client.model.AnalyzeCommentResponse;
import org.openapitools.client.model.SuggestCommentScoreRequest;
import org.openapitools.client.model.SuggestCommentScoreResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Analyzes the provided text and returns scores for requested attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentanalyzerCommentsAnalyzeTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AnalyzeCommentRequest analyzeCommentRequest = null;
        AnalyzeCommentResponse response = api.commentanalyzerCommentsAnalyze($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, analyzeCommentRequest);
        // TODO: test validations
    }

    /**
     * Suggest comment scores as training data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentanalyzerCommentsSuggestscoreTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SuggestCommentScoreRequest suggestCommentScoreRequest = null;
        SuggestCommentScoreResponse response = api.commentanalyzerCommentsSuggestscore($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, suggestCommentScoreRequest);
        // TODO: test validations
    }

}
