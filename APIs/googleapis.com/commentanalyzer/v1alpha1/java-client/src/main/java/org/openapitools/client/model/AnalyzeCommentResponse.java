/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeScores;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The comment analysis response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeCommentResponse {
  public static final String SERIALIZED_NAME_ATTRIBUTE_SCORES = "attributeScores";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_SCORES)
  private Map<String, AttributeScores> attributeScores = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGES = "detectedLanguages";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGES)
  private List<String> detectedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public AnalyzeCommentResponse() {
  }

  public AnalyzeCommentResponse attributeScores(Map<String, AttributeScores> attributeScores) {
    this.attributeScores = attributeScores;
    return this;
  }

  public AnalyzeCommentResponse putAttributeScoresItem(String key, AttributeScores attributeScoresItem) {
    if (this.attributeScores == null) {
      this.attributeScores = new HashMap<>();
    }
    this.attributeScores.put(key, attributeScoresItem);
    return this;
  }

  /**
   * Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \&quot;ATTACK_ON_AUTHOR\&quot;, \&quot;INFLAMMATORY\&quot;, etc).
   * @return attributeScores
   */
  @javax.annotation.Nullable
  public Map<String, AttributeScores> getAttributeScores() {
    return attributeScores;
  }

  public void setAttributeScores(Map<String, AttributeScores> attributeScores) {
    this.attributeScores = attributeScores;
  }


  public AnalyzeCommentResponse clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Same token from the original AnalyzeCommentRequest.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public AnalyzeCommentResponse detectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
    return this;
  }

  public AnalyzeCommentResponse addDetectedLanguagesItem(String detectedLanguagesItem) {
    if (this.detectedLanguages == null) {
      this.detectedLanguages = new ArrayList<>();
    }
    this.detectedLanguages.add(detectedLanguagesItem);
    return this;
  }

  /**
   * Contains the languages detected from the text content, sorted in order of likelihood.
   * @return detectedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getDetectedLanguages() {
    return detectedLanguages;
  }

  public void setDetectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
  }


  public AnalyzeCommentResponse languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public AnalyzeCommentResponse addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \&quot;effective_languages\&quot;. The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages &#x3D; Request.languages else effective_languages &#x3D; detected_languages[0]
   * @return languages
   */
  @javax.annotation.Nullable
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeCommentResponse analyzeCommentResponse = (AnalyzeCommentResponse) o;
    return Objects.equals(this.attributeScores, analyzeCommentResponse.attributeScores) &&
        Objects.equals(this.clientToken, analyzeCommentResponse.clientToken) &&
        Objects.equals(this.detectedLanguages, analyzeCommentResponse.detectedLanguages) &&
        Objects.equals(this.languages, analyzeCommentResponse.languages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeScores, clientToken, detectedLanguages, languages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeCommentResponse {\n");
    sb.append("    attributeScores: ").append(toIndentedString(attributeScores)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    detectedLanguages: ").append(toIndentedString(detectedLanguages)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeScores");
    openapiFields.add("clientToken");
    openapiFields.add("detectedLanguages");
    openapiFields.add("languages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeCommentResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeCommentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeCommentResponse is not found in the empty JSON string", AnalyzeCommentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeCommentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeCommentResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedLanguages") != null && !jsonObj.get("detectedLanguages").isJsonNull() && !jsonObj.get("detectedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull() && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeCommentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeCommentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeCommentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeCommentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeCommentResponse>() {
           @Override
           public void write(JsonWriter out, AnalyzeCommentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeCommentResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeCommentResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeCommentResponse
   * @throws IOException if the JSON string is invalid with respect to AnalyzeCommentResponse
   */
  public static AnalyzeCommentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeCommentResponse.class);
  }

  /**
   * Convert an instance of AnalyzeCommentResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

