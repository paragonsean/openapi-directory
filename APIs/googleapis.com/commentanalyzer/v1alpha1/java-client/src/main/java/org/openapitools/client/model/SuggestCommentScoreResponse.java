/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The comment score suggestion response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestCommentScoreResponse {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGES = "detectedLanguages";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGES)
  private List<String> detectedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTED_LANGUAGES = "requestedLanguages";
  @SerializedName(SERIALIZED_NAME_REQUESTED_LANGUAGES)
  private List<String> requestedLanguages = new ArrayList<>();

  public SuggestCommentScoreResponse() {
  }

  public SuggestCommentScoreResponse clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Same token from the original SuggestCommentScoreRequest.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public SuggestCommentScoreResponse detectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
    return this;
  }

  public SuggestCommentScoreResponse addDetectedLanguagesItem(String detectedLanguagesItem) {
    if (this.detectedLanguages == null) {
      this.detectedLanguages = new ArrayList<>();
    }
    this.detectedLanguages.add(detectedLanguagesItem);
    return this;
  }

  /**
   * The list of languages detected from the comment text.
   * @return detectedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getDetectedLanguages() {
    return detectedLanguages;
  }

  public void setDetectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
  }


  public SuggestCommentScoreResponse requestedLanguages(List<String> requestedLanguages) {
    this.requestedLanguages = requestedLanguages;
    return this;
  }

  public SuggestCommentScoreResponse addRequestedLanguagesItem(String requestedLanguagesItem) {
    if (this.requestedLanguages == null) {
      this.requestedLanguages = new ArrayList<>();
    }
    this.requestedLanguages.add(requestedLanguagesItem);
    return this;
  }

  /**
   * The list of languages provided in the request.
   * @return requestedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getRequestedLanguages() {
    return requestedLanguages;
  }

  public void setRequestedLanguages(List<String> requestedLanguages) {
    this.requestedLanguages = requestedLanguages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestCommentScoreResponse suggestCommentScoreResponse = (SuggestCommentScoreResponse) o;
    return Objects.equals(this.clientToken, suggestCommentScoreResponse.clientToken) &&
        Objects.equals(this.detectedLanguages, suggestCommentScoreResponse.detectedLanguages) &&
        Objects.equals(this.requestedLanguages, suggestCommentScoreResponse.requestedLanguages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, detectedLanguages, requestedLanguages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestCommentScoreResponse {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    detectedLanguages: ").append(toIndentedString(detectedLanguages)).append("\n");
    sb.append("    requestedLanguages: ").append(toIndentedString(requestedLanguages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("detectedLanguages");
    openapiFields.add("requestedLanguages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestCommentScoreResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestCommentScoreResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestCommentScoreResponse is not found in the empty JSON string", SuggestCommentScoreResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestCommentScoreResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestCommentScoreResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedLanguages") != null && !jsonObj.get("detectedLanguages").isJsonNull() && !jsonObj.get("detectedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestedLanguages") != null && !jsonObj.get("requestedLanguages").isJsonNull() && !jsonObj.get("requestedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("requestedLanguages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestCommentScoreResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestCommentScoreResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestCommentScoreResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestCommentScoreResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestCommentScoreResponse>() {
           @Override
           public void write(JsonWriter out, SuggestCommentScoreResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestCommentScoreResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestCommentScoreResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestCommentScoreResponse
   * @throws IOException if the JSON string is invalid with respect to SuggestCommentScoreResponse
   */
  public static SuggestCommentScoreResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestCommentScoreResponse.class);
  }

  /**
   * Convert an instance of SuggestCommentScoreResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

