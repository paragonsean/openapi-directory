/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeScores;
import org.openapitools.client.model.Context;
import org.openapitools.client.model.TextEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The comment score suggestion request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestCommentScoreRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTE_SCORES = "attributeScores";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_SCORES)
  private Map<String, AttributeScores> attributeScores = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private TextEntry comment;

  public static final String SERIALIZED_NAME_COMMUNITY_ID = "communityId";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_ID)
  private String communityId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Context context;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public SuggestCommentScoreRequest() {
  }

  public SuggestCommentScoreRequest attributeScores(Map<String, AttributeScores> attributeScores) {
    this.attributeScores = attributeScores;
    return this;
  }

  public SuggestCommentScoreRequest putAttributeScoresItem(String key, AttributeScores attributeScoresItem) {
    if (this.attributeScores == null) {
      this.attributeScores = new HashMap<>();
    }
    this.attributeScores.put(key, attributeScoresItem);
    return this;
  }

  /**
   * Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example \&quot;ATTACK_ON_AUTHOR\&quot;, \&quot;INFLAMMATORY\&quot;, etc.). This field has the same type as the &#x60;attribute_scores&#x60; field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the &#x60;summary_score&#x60; field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the &#x60;span_scores&#x60; field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don&#39;t include a ScoreType, &#x60;PROBABILITY&#x60; is assumed. &#x60;attribute_scores&#x60; must not be empty. The mapped AttributeScores objects also must not be empty. An &#x60;INVALID_ARGUMENT&#x60; error is returned for all malformed requests.
   * @return attributeScores
   */
  @javax.annotation.Nullable
  public Map<String, AttributeScores> getAttributeScores() {
    return attributeScores;
  }

  public void setAttributeScores(Map<String, AttributeScores> attributeScores) {
    this.attributeScores = attributeScores;
  }


  public SuggestCommentScoreRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Opaque token that is echoed from the request to the response.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public SuggestCommentScoreRequest comment(TextEntry comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public TextEntry getComment() {
    return comment;
  }

  public void setComment(TextEntry comment) {
    this.comment = comment;
  }


  public SuggestCommentScoreRequest communityId(String communityId) {
    this.communityId = communityId;
    return this;
  }

  /**
   * Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.
   * @return communityId
   */
  @javax.annotation.Nullable
  public String getCommunityId() {
    return communityId;
  }

  public void setCommunityId(String communityId) {
    this.communityId = communityId;
  }


  public SuggestCommentScoreRequest context(Context context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Context getContext() {
    return context;
  }

  public void setContext(Context context) {
    this.context = context;
  }


  public SuggestCommentScoreRequest languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public SuggestCommentScoreRequest addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.
   * @return languages
   */
  @javax.annotation.Nullable
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public SuggestCommentScoreRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestCommentScoreRequest suggestCommentScoreRequest = (SuggestCommentScoreRequest) o;
    return Objects.equals(this.attributeScores, suggestCommentScoreRequest.attributeScores) &&
        Objects.equals(this.clientToken, suggestCommentScoreRequest.clientToken) &&
        Objects.equals(this.comment, suggestCommentScoreRequest.comment) &&
        Objects.equals(this.communityId, suggestCommentScoreRequest.communityId) &&
        Objects.equals(this.context, suggestCommentScoreRequest.context) &&
        Objects.equals(this.languages, suggestCommentScoreRequest.languages) &&
        Objects.equals(this.sessionId, suggestCommentScoreRequest.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeScores, clientToken, comment, communityId, context, languages, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestCommentScoreRequest {\n");
    sb.append("    attributeScores: ").append(toIndentedString(attributeScores)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    communityId: ").append(toIndentedString(communityId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeScores");
    openapiFields.add("clientToken");
    openapiFields.add("comment");
    openapiFields.add("communityId");
    openapiFields.add("context");
    openapiFields.add("languages");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestCommentScoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestCommentScoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestCommentScoreRequest is not found in the empty JSON string", SuggestCommentScoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestCommentScoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestCommentScoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        TextEntry.validateJsonElement(jsonObj.get("comment"));
      }
      if ((jsonObj.get("communityId") != null && !jsonObj.get("communityId").isJsonNull()) && !jsonObj.get("communityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communityId").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        Context.validateJsonElement(jsonObj.get("context"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull() && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestCommentScoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestCommentScoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestCommentScoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestCommentScoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestCommentScoreRequest>() {
           @Override
           public void write(JsonWriter out, SuggestCommentScoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestCommentScoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestCommentScoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestCommentScoreRequest
   * @throws IOException if the JSON string is invalid with respect to SuggestCommentScoreRequest
   */
  public static SuggestCommentScoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestCommentScoreRequest.class);
  }

  /**
   * Convert an instance of SuggestCommentScoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

