/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AttributeParameters;
import org.openapitools.client.model.Context;
import org.openapitools.client.model.TextEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The comment analysis request message. Next ID: 11
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeCommentRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private TextEntry comment;

  public static final String SERIALIZED_NAME_COMMUNITY_ID = "communityId";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_ID)
  private String communityId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Context context;

  public static final String SERIALIZED_NAME_DO_NOT_STORE = "doNotStore";
  @SerializedName(SERIALIZED_NAME_DO_NOT_STORE)
  private Boolean doNotStore;

  public static final String SERIALIZED_NAME_DROP_UNSUPPORTED_ATTRIBUTES = "dropUnsupportedAttributes";
  @SerializedName(SERIALIZED_NAME_DROP_UNSUPPORTED_ATTRIBUTES)
  private Boolean dropUnsupportedAttributes;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTED_ATTRIBUTES = "requestedAttributes";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ATTRIBUTES)
  private Map<String, AttributeParameters> requestedAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SPAN_ANNOTATIONS = "spanAnnotations";
  @SerializedName(SERIALIZED_NAME_SPAN_ANNOTATIONS)
  private Boolean spanAnnotations;

  public AnalyzeCommentRequest() {
  }

  public AnalyzeCommentRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Opaque token that is echoed from the request to the response.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public AnalyzeCommentRequest comment(TextEntry comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public TextEntry getComment() {
    return comment;
  }

  public void setComment(TextEntry comment) {
    this.comment = comment;
  }


  public AnalyzeCommentRequest communityId(String communityId) {
    this.communityId = communityId;
    return this;
  }

  /**
   * Optional identifier associating this AnalyzeCommentRequest with a particular client&#39;s community. Different communities may have different norms and rules. Specifying this value enables us to explore building community-specific models for clients.
   * @return communityId
   */
  @javax.annotation.Nullable
  public String getCommunityId() {
    return communityId;
  }

  public void setCommunityId(String communityId) {
    this.communityId = communityId;
  }


  public AnalyzeCommentRequest context(Context context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Context getContext() {
    return context;
  }

  public void setContext(Context context) {
    this.context = context;
  }


  public AnalyzeCommentRequest doNotStore(Boolean doNotStore) {
    this.doNotStore = doNotStore;
    return this;
  }

  /**
   * Do not store the comment or context sent in this request. By default, the service may store comments/context for debugging purposes.
   * @return doNotStore
   */
  @javax.annotation.Nullable
  public Boolean getDoNotStore() {
    return doNotStore;
  }

  public void setDoNotStore(Boolean doNotStore) {
    this.doNotStore = doNotStore;
  }


  public AnalyzeCommentRequest dropUnsupportedAttributes(Boolean dropUnsupportedAttributes) {
    this.dropUnsupportedAttributes = dropUnsupportedAttributes;
    return this;
  }

  /**
   * If specified, any requested attribute that is requested but not supported for the language detected will be dropped from the returned scores instead of returning an error.
   * @return dropUnsupportedAttributes
   */
  @javax.annotation.Nullable
  public Boolean getDropUnsupportedAttributes() {
    return dropUnsupportedAttributes;
  }

  public void setDropUnsupportedAttributes(Boolean dropUnsupportedAttributes) {
    this.dropUnsupportedAttributes = dropUnsupportedAttributes;
  }


  public AnalyzeCommentRequest languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public AnalyzeCommentRequest addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Specifying multiple languages means the text contains multiple lanugages. Both ISO and BCP-47 language codes are accepted. The server returns an error if no language was specified and language detection fails. The server also returns an error if the languages (either specified by the caller, or auto-detected) are not *all* supported by the service.
   * @return languages
   */
  @javax.annotation.Nullable
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public AnalyzeCommentRequest requestedAttributes(Map<String, AttributeParameters> requestedAttributes) {
    this.requestedAttributes = requestedAttributes;
    return this;
  }

  public AnalyzeCommentRequest putRequestedAttributesItem(String key, AttributeParameters requestedAttributesItem) {
    if (this.requestedAttributes == null) {
      this.requestedAttributes = new HashMap<>();
    }
    this.requestedAttributes.put(key, requestedAttributesItem);
    return this;
  }

  /**
   * Specification of requested attributes. The AttributeParameters serve as configuration for each associated attribute. The map keys are attribute names. The available attributes may be different on each RFE installation, and can be seen by calling ListAttributes (see above). For the prod installation, known as Perspective API, see https://developers.perspectiveapi.com/s/about-the-api-model-cards.
   * @return requestedAttributes
   */
  @javax.annotation.Nullable
  public Map<String, AttributeParameters> getRequestedAttributes() {
    return requestedAttributes;
  }

  public void setRequestedAttributes(Map<String, AttributeParameters> requestedAttributes) {
    this.requestedAttributes = requestedAttributes;
  }


  public AnalyzeCommentRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public AnalyzeCommentRequest spanAnnotations(Boolean spanAnnotations) {
    this.spanAnnotations = spanAnnotations;
    return this;
  }

  /**
   * An advisory parameter that will return span annotations if the model is capable of providing scores with sub-comment resolution. This will likely increase the size of the returned message.
   * @return spanAnnotations
   */
  @javax.annotation.Nullable
  public Boolean getSpanAnnotations() {
    return spanAnnotations;
  }

  public void setSpanAnnotations(Boolean spanAnnotations) {
    this.spanAnnotations = spanAnnotations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeCommentRequest analyzeCommentRequest = (AnalyzeCommentRequest) o;
    return Objects.equals(this.clientToken, analyzeCommentRequest.clientToken) &&
        Objects.equals(this.comment, analyzeCommentRequest.comment) &&
        Objects.equals(this.communityId, analyzeCommentRequest.communityId) &&
        Objects.equals(this.context, analyzeCommentRequest.context) &&
        Objects.equals(this.doNotStore, analyzeCommentRequest.doNotStore) &&
        Objects.equals(this.dropUnsupportedAttributes, analyzeCommentRequest.dropUnsupportedAttributes) &&
        Objects.equals(this.languages, analyzeCommentRequest.languages) &&
        Objects.equals(this.requestedAttributes, analyzeCommentRequest.requestedAttributes) &&
        Objects.equals(this.sessionId, analyzeCommentRequest.sessionId) &&
        Objects.equals(this.spanAnnotations, analyzeCommentRequest.spanAnnotations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, comment, communityId, context, doNotStore, dropUnsupportedAttributes, languages, requestedAttributes, sessionId, spanAnnotations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeCommentRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    communityId: ").append(toIndentedString(communityId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    doNotStore: ").append(toIndentedString(doNotStore)).append("\n");
    sb.append("    dropUnsupportedAttributes: ").append(toIndentedString(dropUnsupportedAttributes)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    requestedAttributes: ").append(toIndentedString(requestedAttributes)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    spanAnnotations: ").append(toIndentedString(spanAnnotations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("comment");
    openapiFields.add("communityId");
    openapiFields.add("context");
    openapiFields.add("doNotStore");
    openapiFields.add("dropUnsupportedAttributes");
    openapiFields.add("languages");
    openapiFields.add("requestedAttributes");
    openapiFields.add("sessionId");
    openapiFields.add("spanAnnotations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeCommentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeCommentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeCommentRequest is not found in the empty JSON string", AnalyzeCommentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeCommentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeCommentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        TextEntry.validateJsonElement(jsonObj.get("comment"));
      }
      if ((jsonObj.get("communityId") != null && !jsonObj.get("communityId").isJsonNull()) && !jsonObj.get("communityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communityId").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        Context.validateJsonElement(jsonObj.get("context"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull() && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeCommentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeCommentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeCommentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeCommentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeCommentRequest>() {
           @Override
           public void write(JsonWriter out, AnalyzeCommentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeCommentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeCommentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeCommentRequest
   * @throws IOException if the JSON string is invalid with respect to AnalyzeCommentRequest
   */
  public static AnalyzeCommentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeCommentRequest.class);
  }

  /**
   * Convert an instance of AnalyzeCommentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

