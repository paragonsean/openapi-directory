/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TextEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type of context specific to a comment left on a single-threaded comment message board, where comments are either a top level comment or the child of a top level comment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleAndParentComment {
  public static final String SERIALIZED_NAME_ARTICLE = "article";
  @SerializedName(SERIALIZED_NAME_ARTICLE)
  private TextEntry article;

  public static final String SERIALIZED_NAME_PARENT_COMMENT = "parentComment";
  @SerializedName(SERIALIZED_NAME_PARENT_COMMENT)
  private TextEntry parentComment;

  public ArticleAndParentComment() {
  }

  public ArticleAndParentComment article(TextEntry article) {
    this.article = article;
    return this;
  }

  /**
   * Get article
   * @return article
   */
  @javax.annotation.Nullable
  public TextEntry getArticle() {
    return article;
  }

  public void setArticle(TextEntry article) {
    this.article = article;
  }


  public ArticleAndParentComment parentComment(TextEntry parentComment) {
    this.parentComment = parentComment;
    return this;
  }

  /**
   * Get parentComment
   * @return parentComment
   */
  @javax.annotation.Nullable
  public TextEntry getParentComment() {
    return parentComment;
  }

  public void setParentComment(TextEntry parentComment) {
    this.parentComment = parentComment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleAndParentComment articleAndParentComment = (ArticleAndParentComment) o;
    return Objects.equals(this.article, articleAndParentComment.article) &&
        Objects.equals(this.parentComment, articleAndParentComment.parentComment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(article, parentComment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleAndParentComment {\n");
    sb.append("    article: ").append(toIndentedString(article)).append("\n");
    sb.append("    parentComment: ").append(toIndentedString(parentComment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("article");
    openapiFields.add("parentComment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleAndParentComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleAndParentComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleAndParentComment is not found in the empty JSON string", ArticleAndParentComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleAndParentComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleAndParentComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `article`
      if (jsonObj.get("article") != null && !jsonObj.get("article").isJsonNull()) {
        TextEntry.validateJsonElement(jsonObj.get("article"));
      }
      // validate the optional field `parentComment`
      if (jsonObj.get("parentComment") != null && !jsonObj.get("parentComment").isJsonNull()) {
        TextEntry.validateJsonElement(jsonObj.get("parentComment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleAndParentComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleAndParentComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleAndParentComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleAndParentComment.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleAndParentComment>() {
           @Override
           public void write(JsonWriter out, ArticleAndParentComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleAndParentComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleAndParentComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleAndParentComment
   * @throws IOException if the JSON string is invalid with respect to ArticleAndParentComment
   */
  public static ArticleAndParentComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleAndParentComment.class);
  }

  /**
   * Convert an instance of ArticleAndParentComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

