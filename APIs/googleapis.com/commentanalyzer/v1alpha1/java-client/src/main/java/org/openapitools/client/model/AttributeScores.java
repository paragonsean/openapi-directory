/*
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Score;
import org.openapitools.client.model.SpanScore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This holds score values for a single attribute. It contains both per-span scores as well as an overall summary score..
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:22.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeScores {
  public static final String SERIALIZED_NAME_SPAN_SCORES = "spanScores";
  @SerializedName(SERIALIZED_NAME_SPAN_SCORES)
  private List<SpanScore> spanScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY_SCORE = "summaryScore";
  @SerializedName(SERIALIZED_NAME_SUMMARY_SCORE)
  private Score summaryScore;

  public AttributeScores() {
  }

  public AttributeScores spanScores(List<SpanScore> spanScores) {
    this.spanScores = spanScores;
    return this;
  }

  public AttributeScores addSpanScoresItem(SpanScore spanScoresItem) {
    if (this.spanScores == null) {
      this.spanScores = new ArrayList<>();
    }
    this.spanScores.add(spanScoresItem);
    return this;
  }

  /**
   * Per-span scores.
   * @return spanScores
   */
  @javax.annotation.Nullable
  public List<SpanScore> getSpanScores() {
    return spanScores;
  }

  public void setSpanScores(List<SpanScore> spanScores) {
    this.spanScores = spanScores;
  }


  public AttributeScores summaryScore(Score summaryScore) {
    this.summaryScore = summaryScore;
    return this;
  }

  /**
   * Get summaryScore
   * @return summaryScore
   */
  @javax.annotation.Nullable
  public Score getSummaryScore() {
    return summaryScore;
  }

  public void setSummaryScore(Score summaryScore) {
    this.summaryScore = summaryScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeScores attributeScores = (AttributeScores) o;
    return Objects.equals(this.spanScores, attributeScores.spanScores) &&
        Objects.equals(this.summaryScore, attributeScores.summaryScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spanScores, summaryScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeScores {\n");
    sb.append("    spanScores: ").append(toIndentedString(spanScores)).append("\n");
    sb.append("    summaryScore: ").append(toIndentedString(summaryScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spanScores");
    openapiFields.add("summaryScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeScores
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeScores.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeScores is not found in the empty JSON string", AttributeScores.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeScores.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeScores` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("spanScores") != null && !jsonObj.get("spanScores").isJsonNull()) {
        JsonArray jsonArrayspanScores = jsonObj.getAsJsonArray("spanScores");
        if (jsonArrayspanScores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spanScores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spanScores` to be an array in the JSON string but got `%s`", jsonObj.get("spanScores").toString()));
          }

          // validate the optional field `spanScores` (array)
          for (int i = 0; i < jsonArrayspanScores.size(); i++) {
            SpanScore.validateJsonElement(jsonArrayspanScores.get(i));
          };
        }
      }
      // validate the optional field `summaryScore`
      if (jsonObj.get("summaryScore") != null && !jsonObj.get("summaryScore").isJsonNull()) {
        Score.validateJsonElement(jsonObj.get("summaryScore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeScores.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeScores' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeScores> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeScores.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeScores>() {
           @Override
           public void write(JsonWriter out, AttributeScores value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeScores read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeScores given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeScores
   * @throws IOException if the JSON string is invalid with respect to AttributeScores
   */
  public static AttributeScores fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeScores.class);
  }

  /**
   * Convert an instance of AttributeScores to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

