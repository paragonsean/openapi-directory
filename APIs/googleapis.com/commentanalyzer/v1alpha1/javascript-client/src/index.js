/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AnalyzeCommentRequest from './model/AnalyzeCommentRequest';
import AnalyzeCommentResponse from './model/AnalyzeCommentResponse';
import ArticleAndParentComment from './model/ArticleAndParentComment';
import AttributeParameters from './model/AttributeParameters';
import AttributeScores from './model/AttributeScores';
import Context from './model/Context';
import Score from './model/Score';
import SpanScore from './model/SpanScore';
import SuggestCommentScoreRequest from './model/SuggestCommentScoreRequest';
import SuggestCommentScoreResponse from './model/SuggestCommentScoreResponse';
import TextEntry from './model/TextEntry';
import CommentsApi from './api/CommentsApi';


/**
* The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \&quot;toxicity\&quot; of a comment). Users can leverage the \&quot;SuggestCommentScore\&quot; method to submit corrections to improve Perspective over time. Users can set the \&quot;doNotStore\&quot; flag to ensure that all submitted comments are automatically deleted after scores are returned..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PerspectiveCommentAnalyzerApi = require('index'); // See note below*.
* var xxxSvc = new PerspectiveCommentAnalyzerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PerspectiveCommentAnalyzerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PerspectiveCommentAnalyzerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PerspectiveCommentAnalyzerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1alpha1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AnalyzeCommentRequest model constructor.
     * @property {module:model/AnalyzeCommentRequest}
     */
    AnalyzeCommentRequest,

    /**
     * The AnalyzeCommentResponse model constructor.
     * @property {module:model/AnalyzeCommentResponse}
     */
    AnalyzeCommentResponse,

    /**
     * The ArticleAndParentComment model constructor.
     * @property {module:model/ArticleAndParentComment}
     */
    ArticleAndParentComment,

    /**
     * The AttributeParameters model constructor.
     * @property {module:model/AttributeParameters}
     */
    AttributeParameters,

    /**
     * The AttributeScores model constructor.
     * @property {module:model/AttributeScores}
     */
    AttributeScores,

    /**
     * The Context model constructor.
     * @property {module:model/Context}
     */
    Context,

    /**
     * The Score model constructor.
     * @property {module:model/Score}
     */
    Score,

    /**
     * The SpanScore model constructor.
     * @property {module:model/SpanScore}
     */
    SpanScore,

    /**
     * The SuggestCommentScoreRequest model constructor.
     * @property {module:model/SuggestCommentScoreRequest}
     */
    SuggestCommentScoreRequest,

    /**
     * The SuggestCommentScoreResponse model constructor.
     * @property {module:model/SuggestCommentScoreResponse}
     */
    SuggestCommentScoreResponse,

    /**
     * The TextEntry model constructor.
     * @property {module:model/TextEntry}
     */
    TextEntry,

    /**
    * The CommentsApi service constructor.
    * @property {module:api/CommentsApi}
    */
    CommentsApi
};
