/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Score from './Score';
import SpanScore from './SpanScore';

/**
 * The AttributeScores model module.
 * @module model/AttributeScores
 * @version v1alpha1
 */
class AttributeScores {
    /**
     * Constructs a new <code>AttributeScores</code>.
     * This holds score values for a single attribute. It contains both per-span scores as well as an overall summary score..
     * @alias module:model/AttributeScores
     */
    constructor() { 
        
        AttributeScores.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeScores</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeScores} obj Optional instance to populate.
     * @return {module:model/AttributeScores} The populated <code>AttributeScores</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeScores();

            if (data.hasOwnProperty('spanScores')) {
                obj['spanScores'] = ApiClient.convertToType(data['spanScores'], [SpanScore]);
            }
            if (data.hasOwnProperty('summaryScore')) {
                obj['summaryScore'] = Score.constructFromObject(data['summaryScore']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeScores</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeScores</code>.
     */
    static validateJSON(data) {
        if (data['spanScores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spanScores'])) {
                throw new Error("Expected the field `spanScores` to be an array in the JSON data but got " + data['spanScores']);
            }
            // validate the optional field `spanScores` (array)
            for (const item of data['spanScores']) {
                SpanScore.validateJSON(item);
            };
        }
        // validate the optional field `summaryScore`
        if (data['summaryScore']) { // data not null
          Score.validateJSON(data['summaryScore']);
        }

        return true;
    }


}



/**
 * Per-span scores.
 * @member {Array.<module:model/SpanScore>} spanScores
 */
AttributeScores.prototype['spanScores'] = undefined;

/**
 * @member {module:model/Score} summaryScore
 */
AttributeScores.prototype['summaryScore'] = undefined;






export default AttributeScores;

