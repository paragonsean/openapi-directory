/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeScores from './AttributeScores';

/**
 * The AnalyzeCommentResponse model module.
 * @module model/AnalyzeCommentResponse
 * @version v1alpha1
 */
class AnalyzeCommentResponse {
    /**
     * Constructs a new <code>AnalyzeCommentResponse</code>.
     * The comment analysis response message.
     * @alias module:model/AnalyzeCommentResponse
     */
    constructor() { 
        
        AnalyzeCommentResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyzeCommentResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeCommentResponse} obj Optional instance to populate.
     * @return {module:model/AnalyzeCommentResponse} The populated <code>AnalyzeCommentResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeCommentResponse();

            if (data.hasOwnProperty('attributeScores')) {
                obj['attributeScores'] = ApiClient.convertToType(data['attributeScores'], {'String': AttributeScores});
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('detectedLanguages')) {
                obj['detectedLanguages'] = ApiClient.convertToType(data['detectedLanguages'], ['String']);
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeCommentResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeCommentResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['detectedLanguages'])) {
            throw new Error("Expected the field `detectedLanguages` to be an array in the JSON data but got " + data['detectedLanguages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }

        return true;
    }


}



/**
 * Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc).
 * @member {Object.<String, module:model/AttributeScores>} attributeScores
 */
AnalyzeCommentResponse.prototype['attributeScores'] = undefined;

/**
 * Same token from the original AnalyzeCommentRequest.
 * @member {String} clientToken
 */
AnalyzeCommentResponse.prototype['clientToken'] = undefined;

/**
 * Contains the languages detected from the text content, sorted in order of likelihood.
 * @member {Array.<String>} detectedLanguages
 */
AnalyzeCommentResponse.prototype['detectedLanguages'] = undefined;

/**
 * The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \"effective_languages\". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]
 * @member {Array.<String>} languages
 */
AnalyzeCommentResponse.prototype['languages'] = undefined;






export default AnalyzeCommentResponse;

