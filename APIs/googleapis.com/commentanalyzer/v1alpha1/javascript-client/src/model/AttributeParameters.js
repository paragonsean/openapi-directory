/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeParameters model module.
 * @module model/AttributeParameters
 * @version v1alpha1
 */
class AttributeParameters {
    /**
     * Constructs a new <code>AttributeParameters</code>.
     * Configurable parameters for attribute scoring.
     * @alias module:model/AttributeParameters
     */
    constructor() { 
        
        AttributeParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeParameters} obj Optional instance to populate.
     * @return {module:model/AttributeParameters} The populated <code>AttributeParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeParameters();

            if (data.hasOwnProperty('scoreThreshold')) {
                obj['scoreThreshold'] = ApiClient.convertToType(data['scoreThreshold'], 'Number');
            }
            if (data.hasOwnProperty('scoreType')) {
                obj['scoreType'] = ApiClient.convertToType(data['scoreType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['scoreType'] && !(typeof data['scoreType'] === 'string' || data['scoreType'] instanceof String)) {
            throw new Error("Expected the field `scoreType` to be a primitive type in the JSON string but got " + data['scoreType']);
        }

        return true;
    }


}



/**
 * Don't return scores for this attribute that are below this threshold. If unset, a default threshold will be applied. A FloatValue wrapper is used to distinguish between 0 vs. default/unset.
 * @member {Number} scoreThreshold
 */
AttributeParameters.prototype['scoreThreshold'] = undefined;

/**
 * What type of scores to return. If unset, defaults to probability scores.
 * @member {module:model/AttributeParameters.ScoreTypeEnum} scoreType
 */
AttributeParameters.prototype['scoreType'] = undefined;





/**
 * Allowed values for the <code>scoreType</code> property.
 * @enum {String}
 * @readonly
 */
AttributeParameters['ScoreTypeEnum'] = {

    /**
     * value: "SCORE_TYPE_UNSPECIFIED"
     * @const
     */
    "SCORE_TYPE_UNSPECIFIED": "SCORE_TYPE_UNSPECIFIED",

    /**
     * value: "PROBABILITY"
     * @const
     */
    "PROBABILITY": "PROBABILITY",

    /**
     * value: "STD_DEV_SCORE"
     * @const
     */
    "STD_DEV_SCORE": "STD_DEV_SCORE",

    /**
     * value: "PERCENTILE"
     * @const
     */
    "PERCENTILE": "PERCENTILE",

    /**
     * value: "RAW"
     * @const
     */
    "RAW": "RAW"
};



export default AttributeParameters;

