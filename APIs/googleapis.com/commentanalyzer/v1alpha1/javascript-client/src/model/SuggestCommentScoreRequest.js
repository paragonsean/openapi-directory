/**
 * Perspective Comment Analyzer API
 * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeScores from './AttributeScores';
import Context from './Context';
import TextEntry from './TextEntry';

/**
 * The SuggestCommentScoreRequest model module.
 * @module model/SuggestCommentScoreRequest
 * @version v1alpha1
 */
class SuggestCommentScoreRequest {
    /**
     * Constructs a new <code>SuggestCommentScoreRequest</code>.
     * The comment score suggestion request message.
     * @alias module:model/SuggestCommentScoreRequest
     */
    constructor() { 
        
        SuggestCommentScoreRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuggestCommentScoreRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuggestCommentScoreRequest} obj Optional instance to populate.
     * @return {module:model/SuggestCommentScoreRequest} The populated <code>SuggestCommentScoreRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuggestCommentScoreRequest();

            if (data.hasOwnProperty('attributeScores')) {
                obj['attributeScores'] = ApiClient.convertToType(data['attributeScores'], {'String': AttributeScores});
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = TextEntry.constructFromObject(data['comment']);
            }
            if (data.hasOwnProperty('communityId')) {
                obj['communityId'] = ApiClient.convertToType(data['communityId'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = Context.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuggestCommentScoreRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuggestCommentScoreRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          TextEntry.validateJSON(data['comment']);
        }
        // ensure the json data is a string
        if (data['communityId'] && !(typeof data['communityId'] === 'string' || data['communityId'] instanceof String)) {
            throw new Error("Expected the field `communityId` to be a primitive type in the JSON string but got " + data['communityId']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          Context.validateJSON(data['context']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }

        return true;
    }


}



/**
 * Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc.). This field has the same type as the `attribute_scores` field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the `summary_score` field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the `span_scores` field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don't include a ScoreType, `PROBABILITY` is assumed. `attribute_scores` must not be empty. The mapped AttributeScores objects also must not be empty. An `INVALID_ARGUMENT` error is returned for all malformed requests.
 * @member {Object.<String, module:model/AttributeScores>} attributeScores
 */
SuggestCommentScoreRequest.prototype['attributeScores'] = undefined;

/**
 * Opaque token that is echoed from the request to the response.
 * @member {String} clientToken
 */
SuggestCommentScoreRequest.prototype['clientToken'] = undefined;

/**
 * @member {module:model/TextEntry} comment
 */
SuggestCommentScoreRequest.prototype['comment'] = undefined;

/**
 * Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.
 * @member {String} communityId
 */
SuggestCommentScoreRequest.prototype['communityId'] = undefined;

/**
 * @member {module:model/Context} context
 */
SuggestCommentScoreRequest.prototype['context'] = undefined;

/**
 * The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.
 * @member {Array.<String>} languages
 */
SuggestCommentScoreRequest.prototype['languages'] = undefined;

/**
 * Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.
 * @member {String} sessionId
 */
SuggestCommentScoreRequest.prototype['sessionId'] = undefined;






export default SuggestCommentScoreRequest;

