# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_scores import AttributeScores
from openapi_server.models.context import Context
from openapi_server.models.text_entry import TextEntry
from openapi_server import util


class SuggestCommentScoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_scores: Dict[str, AttributeScores]=None, client_token: str=None, comment: TextEntry=None, community_id: str=None, context: Context=None, languages: List[str]=None, session_id: str=None):
        """SuggestCommentScoreRequest - a model defined in OpenAPI

        :param attribute_scores: The attribute_scores of this SuggestCommentScoreRequest.
        :param client_token: The client_token of this SuggestCommentScoreRequest.
        :param comment: The comment of this SuggestCommentScoreRequest.
        :param community_id: The community_id of this SuggestCommentScoreRequest.
        :param context: The context of this SuggestCommentScoreRequest.
        :param languages: The languages of this SuggestCommentScoreRequest.
        :param session_id: The session_id of this SuggestCommentScoreRequest.
        """
        self.openapi_types = {
            'attribute_scores': Dict[str, AttributeScores],
            'client_token': str,
            'comment': TextEntry,
            'community_id': str,
            'context': Context,
            'languages': List[str],
            'session_id': str
        }

        self.attribute_map = {
            'attribute_scores': 'attributeScores',
            'client_token': 'clientToken',
            'comment': 'comment',
            'community_id': 'communityId',
            'context': 'context',
            'languages': 'languages',
            'session_id': 'sessionId'
        }

        self._attribute_scores = attribute_scores
        self._client_token = client_token
        self._comment = comment
        self._community_id = community_id
        self._context = context
        self._languages = languages
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestCommentScoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestCommentScoreRequest of this SuggestCommentScoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_scores(self):
        """Gets the attribute_scores of this SuggestCommentScoreRequest.

        Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc.). This field has the same type as the `attribute_scores` field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the `summary_score` field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the `span_scores` field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don't include a ScoreType, `PROBABILITY` is assumed. `attribute_scores` must not be empty. The mapped AttributeScores objects also must not be empty. An `INVALID_ARGUMENT` error is returned for all malformed requests.

        :return: The attribute_scores of this SuggestCommentScoreRequest.
        :rtype: Dict[str, AttributeScores]
        """
        return self._attribute_scores

    @attribute_scores.setter
    def attribute_scores(self, attribute_scores):
        """Sets the attribute_scores of this SuggestCommentScoreRequest.

        Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc.). This field has the same type as the `attribute_scores` field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the `summary_score` field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the `span_scores` field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don't include a ScoreType, `PROBABILITY` is assumed. `attribute_scores` must not be empty. The mapped AttributeScores objects also must not be empty. An `INVALID_ARGUMENT` error is returned for all malformed requests.

        :param attribute_scores: The attribute_scores of this SuggestCommentScoreRequest.
        :type attribute_scores: Dict[str, AttributeScores]
        """

        self._attribute_scores = attribute_scores

    @property
    def client_token(self):
        """Gets the client_token of this SuggestCommentScoreRequest.

        Opaque token that is echoed from the request to the response.

        :return: The client_token of this SuggestCommentScoreRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this SuggestCommentScoreRequest.

        Opaque token that is echoed from the request to the response.

        :param client_token: The client_token of this SuggestCommentScoreRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def comment(self):
        """Gets the comment of this SuggestCommentScoreRequest.


        :return: The comment of this SuggestCommentScoreRequest.
        :rtype: TextEntry
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SuggestCommentScoreRequest.


        :param comment: The comment of this SuggestCommentScoreRequest.
        :type comment: TextEntry
        """

        self._comment = comment

    @property
    def community_id(self):
        """Gets the community_id of this SuggestCommentScoreRequest.

        Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.

        :return: The community_id of this SuggestCommentScoreRequest.
        :rtype: str
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id):
        """Sets the community_id of this SuggestCommentScoreRequest.

        Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.

        :param community_id: The community_id of this SuggestCommentScoreRequest.
        :type community_id: str
        """

        self._community_id = community_id

    @property
    def context(self):
        """Gets the context of this SuggestCommentScoreRequest.


        :return: The context of this SuggestCommentScoreRequest.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SuggestCommentScoreRequest.


        :param context: The context of this SuggestCommentScoreRequest.
        :type context: Context
        """

        self._context = context

    @property
    def languages(self):
        """Gets the languages of this SuggestCommentScoreRequest.

        The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.

        :return: The languages of this SuggestCommentScoreRequest.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this SuggestCommentScoreRequest.

        The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.

        :param languages: The languages of this SuggestCommentScoreRequest.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def session_id(self):
        """Gets the session_id of this SuggestCommentScoreRequest.

        Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.

        :return: The session_id of this SuggestCommentScoreRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SuggestCommentScoreRequest.

        Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.

        :param session_id: The session_id of this SuggestCommentScoreRequest.
        :type session_id: str
        """

        self._session_id = session_id
