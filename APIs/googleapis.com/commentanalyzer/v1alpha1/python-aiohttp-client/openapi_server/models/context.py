# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_and_parent_comment import ArticleAndParentComment
from openapi_server.models.text_entry import TextEntry
from openapi_server import util


class Context(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_and_parent_comment: ArticleAndParentComment=None, entries: List[TextEntry]=None):
        """Context - a model defined in OpenAPI

        :param article_and_parent_comment: The article_and_parent_comment of this Context.
        :param entries: The entries of this Context.
        """
        self.openapi_types = {
            'article_and_parent_comment': ArticleAndParentComment,
            'entries': List[TextEntry]
        }

        self.attribute_map = {
            'article_and_parent_comment': 'articleAndParentComment',
            'entries': 'entries'
        }

        self._article_and_parent_comment = article_and_parent_comment
        self._entries = entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Context of this Context.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_and_parent_comment(self):
        """Gets the article_and_parent_comment of this Context.


        :return: The article_and_parent_comment of this Context.
        :rtype: ArticleAndParentComment
        """
        return self._article_and_parent_comment

    @article_and_parent_comment.setter
    def article_and_parent_comment(self, article_and_parent_comment):
        """Sets the article_and_parent_comment of this Context.


        :param article_and_parent_comment: The article_and_parent_comment of this Context.
        :type article_and_parent_comment: ArticleAndParentComment
        """

        self._article_and_parent_comment = article_and_parent_comment

    @property
    def entries(self):
        """Gets the entries of this Context.

        A list of messages. For example, a linear comments section or forum thread.

        :return: The entries of this Context.
        :rtype: List[TextEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this Context.

        A list of messages. For example, a linear comments section or forum thread.

        :param entries: The entries of this Context.
        :type entries: List[TextEntry]
        """

        self._entries = entries
