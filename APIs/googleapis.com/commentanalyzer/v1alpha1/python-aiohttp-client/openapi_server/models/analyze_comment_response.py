# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_scores import AttributeScores
from openapi_server import util


class AnalyzeCommentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_scores: Dict[str, AttributeScores]=None, client_token: str=None, detected_languages: List[str]=None, languages: List[str]=None):
        """AnalyzeCommentResponse - a model defined in OpenAPI

        :param attribute_scores: The attribute_scores of this AnalyzeCommentResponse.
        :param client_token: The client_token of this AnalyzeCommentResponse.
        :param detected_languages: The detected_languages of this AnalyzeCommentResponse.
        :param languages: The languages of this AnalyzeCommentResponse.
        """
        self.openapi_types = {
            'attribute_scores': Dict[str, AttributeScores],
            'client_token': str,
            'detected_languages': List[str],
            'languages': List[str]
        }

        self.attribute_map = {
            'attribute_scores': 'attributeScores',
            'client_token': 'clientToken',
            'detected_languages': 'detectedLanguages',
            'languages': 'languages'
        }

        self._attribute_scores = attribute_scores
        self._client_token = client_token
        self._detected_languages = detected_languages
        self._languages = languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeCommentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeCommentResponse of this AnalyzeCommentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_scores(self):
        """Gets the attribute_scores of this AnalyzeCommentResponse.

        Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc).

        :return: The attribute_scores of this AnalyzeCommentResponse.
        :rtype: Dict[str, AttributeScores]
        """
        return self._attribute_scores

    @attribute_scores.setter
    def attribute_scores(self, attribute_scores):
        """Sets the attribute_scores of this AnalyzeCommentResponse.

        Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc).

        :param attribute_scores: The attribute_scores of this AnalyzeCommentResponse.
        :type attribute_scores: Dict[str, AttributeScores]
        """

        self._attribute_scores = attribute_scores

    @property
    def client_token(self):
        """Gets the client_token of this AnalyzeCommentResponse.

        Same token from the original AnalyzeCommentRequest.

        :return: The client_token of this AnalyzeCommentResponse.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AnalyzeCommentResponse.

        Same token from the original AnalyzeCommentRequest.

        :param client_token: The client_token of this AnalyzeCommentResponse.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def detected_languages(self):
        """Gets the detected_languages of this AnalyzeCommentResponse.

        Contains the languages detected from the text content, sorted in order of likelihood.

        :return: The detected_languages of this AnalyzeCommentResponse.
        :rtype: List[str]
        """
        return self._detected_languages

    @detected_languages.setter
    def detected_languages(self, detected_languages):
        """Sets the detected_languages of this AnalyzeCommentResponse.

        Contains the languages detected from the text content, sorted in order of likelihood.

        :param detected_languages: The detected_languages of this AnalyzeCommentResponse.
        :type detected_languages: List[str]
        """

        self._detected_languages = detected_languages

    @property
    def languages(self):
        """Gets the languages of this AnalyzeCommentResponse.

        The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \"effective_languages\". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]

        :return: The languages of this AnalyzeCommentResponse.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AnalyzeCommentResponse.

        The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \"effective_languages\". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]

        :param languages: The languages of this AnalyzeCommentResponse.
        :type languages: List[str]
        """

        self._languages = languages
