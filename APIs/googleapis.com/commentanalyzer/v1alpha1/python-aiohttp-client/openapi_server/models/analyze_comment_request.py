# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_parameters import AttributeParameters
from openapi_server.models.context import Context
from openapi_server.models.text_entry import TextEntry
from openapi_server import util


class AnalyzeCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, comment: TextEntry=None, community_id: str=None, context: Context=None, do_not_store: bool=None, drop_unsupported_attributes: bool=None, languages: List[str]=None, requested_attributes: Dict[str, AttributeParameters]=None, session_id: str=None, span_annotations: bool=None):
        """AnalyzeCommentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this AnalyzeCommentRequest.
        :param comment: The comment of this AnalyzeCommentRequest.
        :param community_id: The community_id of this AnalyzeCommentRequest.
        :param context: The context of this AnalyzeCommentRequest.
        :param do_not_store: The do_not_store of this AnalyzeCommentRequest.
        :param drop_unsupported_attributes: The drop_unsupported_attributes of this AnalyzeCommentRequest.
        :param languages: The languages of this AnalyzeCommentRequest.
        :param requested_attributes: The requested_attributes of this AnalyzeCommentRequest.
        :param session_id: The session_id of this AnalyzeCommentRequest.
        :param span_annotations: The span_annotations of this AnalyzeCommentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'comment': TextEntry,
            'community_id': str,
            'context': Context,
            'do_not_store': bool,
            'drop_unsupported_attributes': bool,
            'languages': List[str],
            'requested_attributes': Dict[str, AttributeParameters],
            'session_id': str,
            'span_annotations': bool
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'comment': 'comment',
            'community_id': 'communityId',
            'context': 'context',
            'do_not_store': 'doNotStore',
            'drop_unsupported_attributes': 'dropUnsupportedAttributes',
            'languages': 'languages',
            'requested_attributes': 'requestedAttributes',
            'session_id': 'sessionId',
            'span_annotations': 'spanAnnotations'
        }

        self._client_token = client_token
        self._comment = comment
        self._community_id = community_id
        self._context = context
        self._do_not_store = do_not_store
        self._drop_unsupported_attributes = drop_unsupported_attributes
        self._languages = languages
        self._requested_attributes = requested_attributes
        self._session_id = session_id
        self._span_annotations = span_annotations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeCommentRequest of this AnalyzeCommentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this AnalyzeCommentRequest.

        Opaque token that is echoed from the request to the response.

        :return: The client_token of this AnalyzeCommentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AnalyzeCommentRequest.

        Opaque token that is echoed from the request to the response.

        :param client_token: The client_token of this AnalyzeCommentRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def comment(self):
        """Gets the comment of this AnalyzeCommentRequest.


        :return: The comment of this AnalyzeCommentRequest.
        :rtype: TextEntry
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AnalyzeCommentRequest.


        :param comment: The comment of this AnalyzeCommentRequest.
        :type comment: TextEntry
        """

        self._comment = comment

    @property
    def community_id(self):
        """Gets the community_id of this AnalyzeCommentRequest.

        Optional identifier associating this AnalyzeCommentRequest with a particular client's community. Different communities may have different norms and rules. Specifying this value enables us to explore building community-specific models for clients.

        :return: The community_id of this AnalyzeCommentRequest.
        :rtype: str
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id):
        """Sets the community_id of this AnalyzeCommentRequest.

        Optional identifier associating this AnalyzeCommentRequest with a particular client's community. Different communities may have different norms and rules. Specifying this value enables us to explore building community-specific models for clients.

        :param community_id: The community_id of this AnalyzeCommentRequest.
        :type community_id: str
        """

        self._community_id = community_id

    @property
    def context(self):
        """Gets the context of this AnalyzeCommentRequest.


        :return: The context of this AnalyzeCommentRequest.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AnalyzeCommentRequest.


        :param context: The context of this AnalyzeCommentRequest.
        :type context: Context
        """

        self._context = context

    @property
    def do_not_store(self):
        """Gets the do_not_store of this AnalyzeCommentRequest.

        Do not store the comment or context sent in this request. By default, the service may store comments/context for debugging purposes.

        :return: The do_not_store of this AnalyzeCommentRequest.
        :rtype: bool
        """
        return self._do_not_store

    @do_not_store.setter
    def do_not_store(self, do_not_store):
        """Sets the do_not_store of this AnalyzeCommentRequest.

        Do not store the comment or context sent in this request. By default, the service may store comments/context for debugging purposes.

        :param do_not_store: The do_not_store of this AnalyzeCommentRequest.
        :type do_not_store: bool
        """

        self._do_not_store = do_not_store

    @property
    def drop_unsupported_attributes(self):
        """Gets the drop_unsupported_attributes of this AnalyzeCommentRequest.

        If specified, any requested attribute that is requested but not supported for the language detected will be dropped from the returned scores instead of returning an error.

        :return: The drop_unsupported_attributes of this AnalyzeCommentRequest.
        :rtype: bool
        """
        return self._drop_unsupported_attributes

    @drop_unsupported_attributes.setter
    def drop_unsupported_attributes(self, drop_unsupported_attributes):
        """Sets the drop_unsupported_attributes of this AnalyzeCommentRequest.

        If specified, any requested attribute that is requested but not supported for the language detected will be dropped from the returned scores instead of returning an error.

        :param drop_unsupported_attributes: The drop_unsupported_attributes of this AnalyzeCommentRequest.
        :type drop_unsupported_attributes: bool
        """

        self._drop_unsupported_attributes = drop_unsupported_attributes

    @property
    def languages(self):
        """Gets the languages of this AnalyzeCommentRequest.

        The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Specifying multiple languages means the text contains multiple lanugages. Both ISO and BCP-47 language codes are accepted. The server returns an error if no language was specified and language detection fails. The server also returns an error if the languages (either specified by the caller, or auto-detected) are not *all* supported by the service.

        :return: The languages of this AnalyzeCommentRequest.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AnalyzeCommentRequest.

        The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Specifying multiple languages means the text contains multiple lanugages. Both ISO and BCP-47 language codes are accepted. The server returns an error if no language was specified and language detection fails. The server also returns an error if the languages (either specified by the caller, or auto-detected) are not *all* supported by the service.

        :param languages: The languages of this AnalyzeCommentRequest.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def requested_attributes(self):
        """Gets the requested_attributes of this AnalyzeCommentRequest.

        Specification of requested attributes. The AttributeParameters serve as configuration for each associated attribute. The map keys are attribute names. The available attributes may be different on each RFE installation, and can be seen by calling ListAttributes (see above). For the prod installation, known as Perspective API, see https://developers.perspectiveapi.com/s/about-the-api-model-cards.

        :return: The requested_attributes of this AnalyzeCommentRequest.
        :rtype: Dict[str, AttributeParameters]
        """
        return self._requested_attributes

    @requested_attributes.setter
    def requested_attributes(self, requested_attributes):
        """Sets the requested_attributes of this AnalyzeCommentRequest.

        Specification of requested attributes. The AttributeParameters serve as configuration for each associated attribute. The map keys are attribute names. The available attributes may be different on each RFE installation, and can be seen by calling ListAttributes (see above). For the prod installation, known as Perspective API, see https://developers.perspectiveapi.com/s/about-the-api-model-cards.

        :param requested_attributes: The requested_attributes of this AnalyzeCommentRequest.
        :type requested_attributes: Dict[str, AttributeParameters]
        """

        self._requested_attributes = requested_attributes

    @property
    def session_id(self):
        """Gets the session_id of this AnalyzeCommentRequest.

        Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.

        :return: The session_id of this AnalyzeCommentRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this AnalyzeCommentRequest.

        Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.

        :param session_id: The session_id of this AnalyzeCommentRequest.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def span_annotations(self):
        """Gets the span_annotations of this AnalyzeCommentRequest.

        An advisory parameter that will return span annotations if the model is capable of providing scores with sub-comment resolution. This will likely increase the size of the returned message.

        :return: The span_annotations of this AnalyzeCommentRequest.
        :rtype: bool
        """
        return self._span_annotations

    @span_annotations.setter
    def span_annotations(self, span_annotations):
        """Sets the span_annotations of this AnalyzeCommentRequest.

        An advisory parameter that will return span annotations if the model is capable of providing scores with sub-comment resolution. This will likely increase the size of the returned message.

        :param span_annotations: The span_annotations of this AnalyzeCommentRequest.
        :type span_annotations: bool
        """

        self._span_annotations = span_annotations
