/*
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event generated when a container exits.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:22.659576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerStoppedEvent {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private Integer actionId;

  public static final String SERIALIZED_NAME_EXIT_STATUS = "exitStatus";
  @SerializedName(SERIALIZED_NAME_EXIT_STATUS)
  private Integer exitStatus;

  public static final String SERIALIZED_NAME_STDERR = "stderr";
  @SerializedName(SERIALIZED_NAME_STDERR)
  private String stderr;

  public ContainerStoppedEvent() {
  }

  public ContainerStoppedEvent actionId(Integer actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * The numeric ID of the action that started this container.
   * @return actionId
   */
  @javax.annotation.Nullable
  public Integer getActionId() {
    return actionId;
  }

  public void setActionId(Integer actionId) {
    this.actionId = actionId;
  }


  public ContainerStoppedEvent exitStatus(Integer exitStatus) {
    this.exitStatus = exitStatus;
    return this;
  }

  /**
   * The exit status of the container.
   * @return exitStatus
   */
  @javax.annotation.Nullable
  public Integer getExitStatus() {
    return exitStatus;
  }

  public void setExitStatus(Integer exitStatus) {
    this.exitStatus = exitStatus;
  }


  public ContainerStoppedEvent stderr(String stderr) {
    this.stderr = stderr;
    return this;
  }

  /**
   * The tail end of any content written to standard error by the container. If the content emits large amounts of debugging noise or contains sensitive information, you can prevent the content from being printed by setting the &#x60;DISABLE_STANDARD_ERROR_CAPTURE&#x60; flag. Note that only a small amount of the end of the stream is captured here. The entire stream is stored in the &#x60;/google/logs&#x60; directory mounted into each action, and can be copied off the machine as described elsewhere.
   * @return stderr
   */
  @javax.annotation.Nullable
  public String getStderr() {
    return stderr;
  }

  public void setStderr(String stderr) {
    this.stderr = stderr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerStoppedEvent containerStoppedEvent = (ContainerStoppedEvent) o;
    return Objects.equals(this.actionId, containerStoppedEvent.actionId) &&
        Objects.equals(this.exitStatus, containerStoppedEvent.exitStatus) &&
        Objects.equals(this.stderr, containerStoppedEvent.stderr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, exitStatus, stderr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerStoppedEvent {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    exitStatus: ").append(toIndentedString(exitStatus)).append("\n");
    sb.append("    stderr: ").append(toIndentedString(stderr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("exitStatus");
    openapiFields.add("stderr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerStoppedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerStoppedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerStoppedEvent is not found in the empty JSON string", ContainerStoppedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerStoppedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerStoppedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stderr") != null && !jsonObj.get("stderr").isJsonNull()) && !jsonObj.get("stderr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stderr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stderr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerStoppedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerStoppedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerStoppedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerStoppedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerStoppedEvent>() {
           @Override
           public void write(JsonWriter out, ContainerStoppedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerStoppedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerStoppedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerStoppedEvent
   * @throws IOException if the JSON string is invalid with respect to ContainerStoppedEvent
   */
  public static ContainerStoppedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerStoppedEvent.class);
  }

  /**
   * Convert an instance of ContainerStoppedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

