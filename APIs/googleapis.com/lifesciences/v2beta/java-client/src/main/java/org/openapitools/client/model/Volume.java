/*
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExistingDisk;
import org.openapitools.client.model.NFSMount;
import org.openapitools.client.model.PersistentDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Carries information about storage that can be attached to a VM. Specify either &#x60;Volume&#x60; or &#x60;Disk&#x60;, but not both.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:22.659576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Volume {
  public static final String SERIALIZED_NAME_EXISTING_DISK = "existingDisk";
  @SerializedName(SERIALIZED_NAME_EXISTING_DISK)
  private ExistingDisk existingDisk;

  public static final String SERIALIZED_NAME_NFS_MOUNT = "nfsMount";
  @SerializedName(SERIALIZED_NAME_NFS_MOUNT)
  private NFSMount nfsMount;

  public static final String SERIALIZED_NAME_PERSISTENT_DISK = "persistentDisk";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_DISK)
  private PersistentDisk persistentDisk;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private String volume;

  public Volume() {
  }

  public Volume existingDisk(ExistingDisk existingDisk) {
    this.existingDisk = existingDisk;
    return this;
  }

  /**
   * Get existingDisk
   * @return existingDisk
   */
  @javax.annotation.Nullable
  public ExistingDisk getExistingDisk() {
    return existingDisk;
  }

  public void setExistingDisk(ExistingDisk existingDisk) {
    this.existingDisk = existingDisk;
  }


  public Volume nfsMount(NFSMount nfsMount) {
    this.nfsMount = nfsMount;
    return this;
  }

  /**
   * Get nfsMount
   * @return nfsMount
   */
  @javax.annotation.Nullable
  public NFSMount getNfsMount() {
    return nfsMount;
  }

  public void setNfsMount(NFSMount nfsMount) {
    this.nfsMount = nfsMount;
  }


  public Volume persistentDisk(PersistentDisk persistentDisk) {
    this.persistentDisk = persistentDisk;
    return this;
  }

  /**
   * Get persistentDisk
   * @return persistentDisk
   */
  @javax.annotation.Nullable
  public PersistentDisk getPersistentDisk() {
    return persistentDisk;
  }

  public void setPersistentDisk(PersistentDisk persistentDisk) {
    this.persistentDisk = persistentDisk;
  }


  public Volume volume(String volume) {
    this.volume = volume;
    return this;
  }

  /**
   * A user-supplied name for the volume. Used when mounting the volume into &#x60;Actions&#x60;. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
   * @return volume
   */
  @javax.annotation.Nullable
  public String getVolume() {
    return volume;
  }

  public void setVolume(String volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Volume volume = (Volume) o;
    return Objects.equals(this.existingDisk, volume.existingDisk) &&
        Objects.equals(this.nfsMount, volume.nfsMount) &&
        Objects.equals(this.persistentDisk, volume.persistentDisk) &&
        Objects.equals(this.volume, volume.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existingDisk, nfsMount, persistentDisk, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Volume {\n");
    sb.append("    existingDisk: ").append(toIndentedString(existingDisk)).append("\n");
    sb.append("    nfsMount: ").append(toIndentedString(nfsMount)).append("\n");
    sb.append("    persistentDisk: ").append(toIndentedString(persistentDisk)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("existingDisk");
    openapiFields.add("nfsMount");
    openapiFields.add("persistentDisk");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Volume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Volume is not found in the empty JSON string", Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `existingDisk`
      if (jsonObj.get("existingDisk") != null && !jsonObj.get("existingDisk").isJsonNull()) {
        ExistingDisk.validateJsonElement(jsonObj.get("existingDisk"));
      }
      // validate the optional field `nfsMount`
      if (jsonObj.get("nfsMount") != null && !jsonObj.get("nfsMount").isJsonNull()) {
        NFSMount.validateJsonElement(jsonObj.get("nfsMount"));
      }
      // validate the optional field `persistentDisk`
      if (jsonObj.get("persistentDisk") != null && !jsonObj.get("persistentDisk").isJsonNull()) {
        PersistentDisk.validateJsonElement(jsonObj.get("persistentDisk"));
      }
      if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull()) && !jsonObj.get("volume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<Volume>() {
           @Override
           public void write(JsonWriter out, Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Volume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Volume
   * @throws IOException if the JSON string is invalid with respect to Volume
   */
  public static Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Volume.class);
  }

  /**
   * Convert an instance of Volume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

