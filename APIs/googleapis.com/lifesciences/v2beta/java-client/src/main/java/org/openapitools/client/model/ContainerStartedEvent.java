/*
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event generated when a container starts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:22.659576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerStartedEvent {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private Integer actionId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_PORT_MAPPINGS = "portMappings";
  @SerializedName(SERIALIZED_NAME_PORT_MAPPINGS)
  private Map<String, Integer> portMappings = new HashMap<>();

  public ContainerStartedEvent() {
  }

  public ContainerStartedEvent actionId(Integer actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * The numeric ID of the action that started this container.
   * @return actionId
   */
  @javax.annotation.Nullable
  public Integer getActionId() {
    return actionId;
  }

  public void setActionId(Integer actionId) {
    this.actionId = actionId;
  }


  public ContainerStartedEvent ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The public IP address that can be used to connect to the container. This field is only populated when at least one port mapping is present. If the instance was created with a private address, this field will be empty even if port mappings exist.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ContainerStartedEvent portMappings(Map<String, Integer> portMappings) {
    this.portMappings = portMappings;
    return this;
  }

  public ContainerStartedEvent putPortMappingsItem(String key, Integer portMappingsItem) {
    if (this.portMappings == null) {
      this.portMappings = new HashMap<>();
    }
    this.portMappings.put(key, portMappingsItem);
    return this;
  }

  /**
   * The container-to-host port mappings installed for this container. This set will contain any ports exposed using the &#x60;PUBLISH_EXPOSED_PORTS&#x60; flag as well as any specified in the &#x60;Action&#x60; definition.
   * @return portMappings
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getPortMappings() {
    return portMappings;
  }

  public void setPortMappings(Map<String, Integer> portMappings) {
    this.portMappings = portMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerStartedEvent containerStartedEvent = (ContainerStartedEvent) o;
    return Objects.equals(this.actionId, containerStartedEvent.actionId) &&
        Objects.equals(this.ipAddress, containerStartedEvent.ipAddress) &&
        Objects.equals(this.portMappings, containerStartedEvent.portMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, ipAddress, portMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerStartedEvent {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    portMappings: ").append(toIndentedString(portMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("ipAddress");
    openapiFields.add("portMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerStartedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerStartedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerStartedEvent is not found in the empty JSON string", ContainerStartedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerStartedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerStartedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerStartedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerStartedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerStartedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerStartedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerStartedEvent>() {
           @Override
           public void write(JsonWriter out, ContainerStartedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerStartedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerStartedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerStartedEvent
   * @throws IOException if the JSON string is invalid with respect to ContainerStartedEvent
   */
  public static ContainerStartedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerStartedEvent.class);
  }

  /**
   * Convert an instance of ContainerStartedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

