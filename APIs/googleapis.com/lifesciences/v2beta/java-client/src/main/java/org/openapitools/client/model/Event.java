/*
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContainerKilledEvent;
import org.openapitools.client.model.ContainerStartedEvent;
import org.openapitools.client.model.ContainerStoppedEvent;
import org.openapitools.client.model.DelayedEvent;
import org.openapitools.client.model.FailedEvent;
import org.openapitools.client.model.PullStartedEvent;
import org.openapitools.client.model.PullStoppedEvent;
import org.openapitools.client.model.UnexpectedExitStatusEvent;
import org.openapitools.client.model.WorkerAssignedEvent;
import org.openapitools.client.model.WorkerReleasedEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Carries information about events that occur during pipeline execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:22.659576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_CONTAINER_KILLED = "containerKilled";
  @SerializedName(SERIALIZED_NAME_CONTAINER_KILLED)
  private ContainerKilledEvent containerKilled;

  public static final String SERIALIZED_NAME_CONTAINER_STARTED = "containerStarted";
  @SerializedName(SERIALIZED_NAME_CONTAINER_STARTED)
  private ContainerStartedEvent containerStarted;

  public static final String SERIALIZED_NAME_CONTAINER_STOPPED = "containerStopped";
  @SerializedName(SERIALIZED_NAME_CONTAINER_STOPPED)
  private ContainerStoppedEvent containerStopped;

  public static final String SERIALIZED_NAME_DELAYED = "delayed";
  @SerializedName(SERIALIZED_NAME_DELAYED)
  private DelayedEvent delayed;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private FailedEvent failed;

  public static final String SERIALIZED_NAME_PULL_STARTED = "pullStarted";
  @SerializedName(SERIALIZED_NAME_PULL_STARTED)
  private PullStartedEvent pullStarted;

  public static final String SERIALIZED_NAME_PULL_STOPPED = "pullStopped";
  @SerializedName(SERIALIZED_NAME_PULL_STOPPED)
  private PullStoppedEvent pullStopped;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_UNEXPECTED_EXIT_STATUS = "unexpectedExitStatus";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_EXIT_STATUS)
  private UnexpectedExitStatusEvent unexpectedExitStatus;

  public static final String SERIALIZED_NAME_WORKER_ASSIGNED = "workerAssigned";
  @SerializedName(SERIALIZED_NAME_WORKER_ASSIGNED)
  private WorkerAssignedEvent workerAssigned;

  public static final String SERIALIZED_NAME_WORKER_RELEASED = "workerReleased";
  @SerializedName(SERIALIZED_NAME_WORKER_RELEASED)
  private WorkerReleasedEvent workerReleased;

  public Event() {
  }

  public Event containerKilled(ContainerKilledEvent containerKilled) {
    this.containerKilled = containerKilled;
    return this;
  }

  /**
   * Get containerKilled
   * @return containerKilled
   */
  @javax.annotation.Nullable
  public ContainerKilledEvent getContainerKilled() {
    return containerKilled;
  }

  public void setContainerKilled(ContainerKilledEvent containerKilled) {
    this.containerKilled = containerKilled;
  }


  public Event containerStarted(ContainerStartedEvent containerStarted) {
    this.containerStarted = containerStarted;
    return this;
  }

  /**
   * Get containerStarted
   * @return containerStarted
   */
  @javax.annotation.Nullable
  public ContainerStartedEvent getContainerStarted() {
    return containerStarted;
  }

  public void setContainerStarted(ContainerStartedEvent containerStarted) {
    this.containerStarted = containerStarted;
  }


  public Event containerStopped(ContainerStoppedEvent containerStopped) {
    this.containerStopped = containerStopped;
    return this;
  }

  /**
   * Get containerStopped
   * @return containerStopped
   */
  @javax.annotation.Nullable
  public ContainerStoppedEvent getContainerStopped() {
    return containerStopped;
  }

  public void setContainerStopped(ContainerStoppedEvent containerStopped) {
    this.containerStopped = containerStopped;
  }


  public Event delayed(DelayedEvent delayed) {
    this.delayed = delayed;
    return this;
  }

  /**
   * Get delayed
   * @return delayed
   */
  @javax.annotation.Nullable
  public DelayedEvent getDelayed() {
    return delayed;
  }

  public void setDelayed(DelayedEvent delayed) {
    this.delayed = delayed;
  }


  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the &#x60;details&#x60; field.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Event failed(FailedEvent failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public FailedEvent getFailed() {
    return failed;
  }

  public void setFailed(FailedEvent failed) {
    this.failed = failed;
  }


  public Event pullStarted(PullStartedEvent pullStarted) {
    this.pullStarted = pullStarted;
    return this;
  }

  /**
   * Get pullStarted
   * @return pullStarted
   */
  @javax.annotation.Nullable
  public PullStartedEvent getPullStarted() {
    return pullStarted;
  }

  public void setPullStarted(PullStartedEvent pullStarted) {
    this.pullStarted = pullStarted;
  }


  public Event pullStopped(PullStoppedEvent pullStopped) {
    this.pullStopped = pullStopped;
    return this;
  }

  /**
   * Get pullStopped
   * @return pullStopped
   */
  @javax.annotation.Nullable
  public PullStoppedEvent getPullStopped() {
    return pullStopped;
  }

  public void setPullStopped(PullStoppedEvent pullStopped) {
    this.pullStopped = pullStopped;
  }


  public Event timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The time at which the event occurred.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public Event unexpectedExitStatus(UnexpectedExitStatusEvent unexpectedExitStatus) {
    this.unexpectedExitStatus = unexpectedExitStatus;
    return this;
  }

  /**
   * Get unexpectedExitStatus
   * @return unexpectedExitStatus
   */
  @javax.annotation.Nullable
  public UnexpectedExitStatusEvent getUnexpectedExitStatus() {
    return unexpectedExitStatus;
  }

  public void setUnexpectedExitStatus(UnexpectedExitStatusEvent unexpectedExitStatus) {
    this.unexpectedExitStatus = unexpectedExitStatus;
  }


  public Event workerAssigned(WorkerAssignedEvent workerAssigned) {
    this.workerAssigned = workerAssigned;
    return this;
  }

  /**
   * Get workerAssigned
   * @return workerAssigned
   */
  @javax.annotation.Nullable
  public WorkerAssignedEvent getWorkerAssigned() {
    return workerAssigned;
  }

  public void setWorkerAssigned(WorkerAssignedEvent workerAssigned) {
    this.workerAssigned = workerAssigned;
  }


  public Event workerReleased(WorkerReleasedEvent workerReleased) {
    this.workerReleased = workerReleased;
    return this;
  }

  /**
   * Get workerReleased
   * @return workerReleased
   */
  @javax.annotation.Nullable
  public WorkerReleasedEvent getWorkerReleased() {
    return workerReleased;
  }

  public void setWorkerReleased(WorkerReleasedEvent workerReleased) {
    this.workerReleased = workerReleased;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.containerKilled, event.containerKilled) &&
        Objects.equals(this.containerStarted, event.containerStarted) &&
        Objects.equals(this.containerStopped, event.containerStopped) &&
        Objects.equals(this.delayed, event.delayed) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.failed, event.failed) &&
        Objects.equals(this.pullStarted, event.pullStarted) &&
        Objects.equals(this.pullStopped, event.pullStopped) &&
        Objects.equals(this.timestamp, event.timestamp) &&
        Objects.equals(this.unexpectedExitStatus, event.unexpectedExitStatus) &&
        Objects.equals(this.workerAssigned, event.workerAssigned) &&
        Objects.equals(this.workerReleased, event.workerReleased);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerKilled, containerStarted, containerStopped, delayed, description, failed, pullStarted, pullStopped, timestamp, unexpectedExitStatus, workerAssigned, workerReleased);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    containerKilled: ").append(toIndentedString(containerKilled)).append("\n");
    sb.append("    containerStarted: ").append(toIndentedString(containerStarted)).append("\n");
    sb.append("    containerStopped: ").append(toIndentedString(containerStopped)).append("\n");
    sb.append("    delayed: ").append(toIndentedString(delayed)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    pullStarted: ").append(toIndentedString(pullStarted)).append("\n");
    sb.append("    pullStopped: ").append(toIndentedString(pullStopped)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    unexpectedExitStatus: ").append(toIndentedString(unexpectedExitStatus)).append("\n");
    sb.append("    workerAssigned: ").append(toIndentedString(workerAssigned)).append("\n");
    sb.append("    workerReleased: ").append(toIndentedString(workerReleased)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerKilled");
    openapiFields.add("containerStarted");
    openapiFields.add("containerStopped");
    openapiFields.add("delayed");
    openapiFields.add("description");
    openapiFields.add("failed");
    openapiFields.add("pullStarted");
    openapiFields.add("pullStopped");
    openapiFields.add("timestamp");
    openapiFields.add("unexpectedExitStatus");
    openapiFields.add("workerAssigned");
    openapiFields.add("workerReleased");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerKilled`
      if (jsonObj.get("containerKilled") != null && !jsonObj.get("containerKilled").isJsonNull()) {
        ContainerKilledEvent.validateJsonElement(jsonObj.get("containerKilled"));
      }
      // validate the optional field `containerStarted`
      if (jsonObj.get("containerStarted") != null && !jsonObj.get("containerStarted").isJsonNull()) {
        ContainerStartedEvent.validateJsonElement(jsonObj.get("containerStarted"));
      }
      // validate the optional field `containerStopped`
      if (jsonObj.get("containerStopped") != null && !jsonObj.get("containerStopped").isJsonNull()) {
        ContainerStoppedEvent.validateJsonElement(jsonObj.get("containerStopped"));
      }
      // validate the optional field `delayed`
      if (jsonObj.get("delayed") != null && !jsonObj.get("delayed").isJsonNull()) {
        DelayedEvent.validateJsonElement(jsonObj.get("delayed"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `failed`
      if (jsonObj.get("failed") != null && !jsonObj.get("failed").isJsonNull()) {
        FailedEvent.validateJsonElement(jsonObj.get("failed"));
      }
      // validate the optional field `pullStarted`
      if (jsonObj.get("pullStarted") != null && !jsonObj.get("pullStarted").isJsonNull()) {
        PullStartedEvent.validateJsonElement(jsonObj.get("pullStarted"));
      }
      // validate the optional field `pullStopped`
      if (jsonObj.get("pullStopped") != null && !jsonObj.get("pullStopped").isJsonNull()) {
        PullStoppedEvent.validateJsonElement(jsonObj.get("pullStopped"));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `unexpectedExitStatus`
      if (jsonObj.get("unexpectedExitStatus") != null && !jsonObj.get("unexpectedExitStatus").isJsonNull()) {
        UnexpectedExitStatusEvent.validateJsonElement(jsonObj.get("unexpectedExitStatus"));
      }
      // validate the optional field `workerAssigned`
      if (jsonObj.get("workerAssigned") != null && !jsonObj.get("workerAssigned").isJsonNull()) {
        WorkerAssignedEvent.validateJsonElement(jsonObj.get("workerAssigned"));
      }
      // validate the optional field `workerReleased`
      if (jsonObj.get("workerReleased") != null && !jsonObj.get("workerReleased").isJsonNull()) {
        WorkerReleasedEvent.validateJsonElement(jsonObj.get("workerReleased"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

