/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExistingDisk from './ExistingDisk';
import NFSMount from './NFSMount';
import PersistentDisk from './PersistentDisk';

/**
 * The Volume model module.
 * @module model/Volume
 * @version v2beta
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * Carries information about storage that can be attached to a VM. Specify either &#x60;Volume&#x60; or &#x60;Disk&#x60;, but not both.
     * @alias module:model/Volume
     */
    constructor() { 
        
        Volume.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('existingDisk')) {
                obj['existingDisk'] = ExistingDisk.constructFromObject(data['existingDisk']);
            }
            if (data.hasOwnProperty('nfsMount')) {
                obj['nfsMount'] = NFSMount.constructFromObject(data['nfsMount']);
            }
            if (data.hasOwnProperty('persistentDisk')) {
                obj['persistentDisk'] = PersistentDisk.constructFromObject(data['persistentDisk']);
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // validate the optional field `existingDisk`
        if (data['existingDisk']) { // data not null
          ExistingDisk.validateJSON(data['existingDisk']);
        }
        // validate the optional field `nfsMount`
        if (data['nfsMount']) { // data not null
          NFSMount.validateJSON(data['nfsMount']);
        }
        // validate the optional field `persistentDisk`
        if (data['persistentDisk']) { // data not null
          PersistentDisk.validateJSON(data['persistentDisk']);
        }
        // ensure the json data is a string
        if (data['volume'] && !(typeof data['volume'] === 'string' || data['volume'] instanceof String)) {
            throw new Error("Expected the field `volume` to be a primitive type in the JSON string but got " + data['volume']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExistingDisk} existingDisk
 */
Volume.prototype['existingDisk'] = undefined;

/**
 * @member {module:model/NFSMount} nfsMount
 */
Volume.prototype['nfsMount'] = undefined;

/**
 * @member {module:model/PersistentDisk} persistentDisk
 */
Volume.prototype['persistentDisk'] = undefined;

/**
 * A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
 * @member {String} volume
 */
Volume.prototype['volume'] = undefined;






export default Volume;

