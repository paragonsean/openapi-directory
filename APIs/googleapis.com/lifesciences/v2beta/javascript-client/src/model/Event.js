/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerKilledEvent from './ContainerKilledEvent';
import ContainerStartedEvent from './ContainerStartedEvent';
import ContainerStoppedEvent from './ContainerStoppedEvent';
import DelayedEvent from './DelayedEvent';
import FailedEvent from './FailedEvent';
import PullStartedEvent from './PullStartedEvent';
import PullStoppedEvent from './PullStoppedEvent';
import UnexpectedExitStatusEvent from './UnexpectedExitStatusEvent';
import WorkerAssignedEvent from './WorkerAssignedEvent';
import WorkerReleasedEvent from './WorkerReleasedEvent';

/**
 * The Event model module.
 * @module model/Event
 * @version v2beta
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * Carries information about events that occur during pipeline execution.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('containerKilled')) {
                obj['containerKilled'] = ContainerKilledEvent.constructFromObject(data['containerKilled']);
            }
            if (data.hasOwnProperty('containerStarted')) {
                obj['containerStarted'] = ContainerStartedEvent.constructFromObject(data['containerStarted']);
            }
            if (data.hasOwnProperty('containerStopped')) {
                obj['containerStopped'] = ContainerStoppedEvent.constructFromObject(data['containerStopped']);
            }
            if (data.hasOwnProperty('delayed')) {
                obj['delayed'] = DelayedEvent.constructFromObject(data['delayed']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('failed')) {
                obj['failed'] = FailedEvent.constructFromObject(data['failed']);
            }
            if (data.hasOwnProperty('pullStarted')) {
                obj['pullStarted'] = PullStartedEvent.constructFromObject(data['pullStarted']);
            }
            if (data.hasOwnProperty('pullStopped')) {
                obj['pullStopped'] = PullStoppedEvent.constructFromObject(data['pullStopped']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('unexpectedExitStatus')) {
                obj['unexpectedExitStatus'] = UnexpectedExitStatusEvent.constructFromObject(data['unexpectedExitStatus']);
            }
            if (data.hasOwnProperty('workerAssigned')) {
                obj['workerAssigned'] = WorkerAssignedEvent.constructFromObject(data['workerAssigned']);
            }
            if (data.hasOwnProperty('workerReleased')) {
                obj['workerReleased'] = WorkerReleasedEvent.constructFromObject(data['workerReleased']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // validate the optional field `containerKilled`
        if (data['containerKilled']) { // data not null
          ContainerKilledEvent.validateJSON(data['containerKilled']);
        }
        // validate the optional field `containerStarted`
        if (data['containerStarted']) { // data not null
          ContainerStartedEvent.validateJSON(data['containerStarted']);
        }
        // validate the optional field `containerStopped`
        if (data['containerStopped']) { // data not null
          ContainerStoppedEvent.validateJSON(data['containerStopped']);
        }
        // validate the optional field `delayed`
        if (data['delayed']) { // data not null
          DelayedEvent.validateJSON(data['delayed']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `failed`
        if (data['failed']) { // data not null
          FailedEvent.validateJSON(data['failed']);
        }
        // validate the optional field `pullStarted`
        if (data['pullStarted']) { // data not null
          PullStartedEvent.validateJSON(data['pullStarted']);
        }
        // validate the optional field `pullStopped`
        if (data['pullStopped']) { // data not null
          PullStoppedEvent.validateJSON(data['pullStopped']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // validate the optional field `unexpectedExitStatus`
        if (data['unexpectedExitStatus']) { // data not null
          UnexpectedExitStatusEvent.validateJSON(data['unexpectedExitStatus']);
        }
        // validate the optional field `workerAssigned`
        if (data['workerAssigned']) { // data not null
          WorkerAssignedEvent.validateJSON(data['workerAssigned']);
        }
        // validate the optional field `workerReleased`
        if (data['workerReleased']) { // data not null
          WorkerReleasedEvent.validateJSON(data['workerReleased']);
        }

        return true;
    }


}



/**
 * @member {module:model/ContainerKilledEvent} containerKilled
 */
Event.prototype['containerKilled'] = undefined;

/**
 * @member {module:model/ContainerStartedEvent} containerStarted
 */
Event.prototype['containerStarted'] = undefined;

/**
 * @member {module:model/ContainerStoppedEvent} containerStopped
 */
Event.prototype['containerStopped'] = undefined;

/**
 * @member {module:model/DelayedEvent} delayed
 */
Event.prototype['delayed'] = undefined;

/**
 * A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.
 * @member {String} description
 */
Event.prototype['description'] = undefined;

/**
 * @member {module:model/FailedEvent} failed
 */
Event.prototype['failed'] = undefined;

/**
 * @member {module:model/PullStartedEvent} pullStarted
 */
Event.prototype['pullStarted'] = undefined;

/**
 * @member {module:model/PullStoppedEvent} pullStopped
 */
Event.prototype['pullStopped'] = undefined;

/**
 * The time at which the event occurred.
 * @member {String} timestamp
 */
Event.prototype['timestamp'] = undefined;

/**
 * @member {module:model/UnexpectedExitStatusEvent} unexpectedExitStatus
 */
Event.prototype['unexpectedExitStatus'] = undefined;

/**
 * @member {module:model/WorkerAssignedEvent} workerAssigned
 */
Event.prototype['workerAssigned'] = undefined;

/**
 * @member {module:model/WorkerReleasedEvent} workerReleased
 */
Event.prototype['workerReleased'] = undefined;






export default Event;

