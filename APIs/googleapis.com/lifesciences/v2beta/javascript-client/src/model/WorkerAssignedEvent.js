/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkerAssignedEvent model module.
 * @module model/WorkerAssignedEvent
 * @version v2beta
 */
class WorkerAssignedEvent {
    /**
     * Constructs a new <code>WorkerAssignedEvent</code>.
     * An event generated after a worker VM has been assigned to run the pipeline.
     * @alias module:model/WorkerAssignedEvent
     */
    constructor() { 
        
        WorkerAssignedEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkerAssignedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkerAssignedEvent} obj Optional instance to populate.
     * @return {module:model/WorkerAssignedEvent} The populated <code>WorkerAssignedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkerAssignedEvent();

            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkerAssignedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkerAssignedEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * The worker's instance name.
 * @member {String} instance
 */
WorkerAssignedEvent.prototype['instance'] = undefined;

/**
 * The machine type that was assigned for the worker.
 * @member {String} machineType
 */
WorkerAssignedEvent.prototype['machineType'] = undefined;

/**
 * The zone the worker is running in.
 * @member {String} zone
 */
WorkerAssignedEvent.prototype['zone'] = undefined;






export default WorkerAssignedEvent;

