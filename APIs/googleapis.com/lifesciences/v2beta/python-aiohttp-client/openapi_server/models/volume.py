# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.existing_disk import ExistingDisk
from openapi_server.models.nfs_mount import NFSMount
from openapi_server.models.persistent_disk import PersistentDisk
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, existing_disk: ExistingDisk=None, nfs_mount: NFSMount=None, persistent_disk: PersistentDisk=None, volume: str=None):
        """Volume - a model defined in OpenAPI

        :param existing_disk: The existing_disk of this Volume.
        :param nfs_mount: The nfs_mount of this Volume.
        :param persistent_disk: The persistent_disk of this Volume.
        :param volume: The volume of this Volume.
        """
        self.openapi_types = {
            'existing_disk': ExistingDisk,
            'nfs_mount': NFSMount,
            'persistent_disk': PersistentDisk,
            'volume': str
        }

        self.attribute_map = {
            'existing_disk': 'existingDisk',
            'nfs_mount': 'nfsMount',
            'persistent_disk': 'persistentDisk',
            'volume': 'volume'
        }

        self._existing_disk = existing_disk
        self._nfs_mount = nfs_mount
        self._persistent_disk = persistent_disk
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def existing_disk(self):
        """Gets the existing_disk of this Volume.


        :return: The existing_disk of this Volume.
        :rtype: ExistingDisk
        """
        return self._existing_disk

    @existing_disk.setter
    def existing_disk(self, existing_disk):
        """Sets the existing_disk of this Volume.


        :param existing_disk: The existing_disk of this Volume.
        :type existing_disk: ExistingDisk
        """

        self._existing_disk = existing_disk

    @property
    def nfs_mount(self):
        """Gets the nfs_mount of this Volume.


        :return: The nfs_mount of this Volume.
        :rtype: NFSMount
        """
        return self._nfs_mount

    @nfs_mount.setter
    def nfs_mount(self, nfs_mount):
        """Sets the nfs_mount of this Volume.


        :param nfs_mount: The nfs_mount of this Volume.
        :type nfs_mount: NFSMount
        """

        self._nfs_mount = nfs_mount

    @property
    def persistent_disk(self):
        """Gets the persistent_disk of this Volume.


        :return: The persistent_disk of this Volume.
        :rtype: PersistentDisk
        """
        return self._persistent_disk

    @persistent_disk.setter
    def persistent_disk(self, persistent_disk):
        """Sets the persistent_disk of this Volume.


        :param persistent_disk: The persistent_disk of this Volume.
        :type persistent_disk: PersistentDisk
        """

        self._persistent_disk = persistent_disk

    @property
    def volume(self):
        """Gets the volume of this Volume.

        A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :return: The volume of this Volume.
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Volume.

        A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :param volume: The volume of this Volume.
        :type volume: str
        """

        self._volume = volume
