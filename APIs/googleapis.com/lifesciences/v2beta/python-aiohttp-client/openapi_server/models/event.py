# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_killed_event import ContainerKilledEvent
from openapi_server.models.container_started_event import ContainerStartedEvent
from openapi_server.models.container_stopped_event import ContainerStoppedEvent
from openapi_server.models.delayed_event import DelayedEvent
from openapi_server.models.failed_event import FailedEvent
from openapi_server.models.pull_started_event import PullStartedEvent
from openapi_server.models.pull_stopped_event import PullStoppedEvent
from openapi_server.models.unexpected_exit_status_event import UnexpectedExitStatusEvent
from openapi_server.models.worker_assigned_event import WorkerAssignedEvent
from openapi_server.models.worker_released_event import WorkerReleasedEvent
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_killed: ContainerKilledEvent=None, container_started: ContainerStartedEvent=None, container_stopped: ContainerStoppedEvent=None, delayed: DelayedEvent=None, description: str=None, failed: FailedEvent=None, pull_started: PullStartedEvent=None, pull_stopped: PullStoppedEvent=None, timestamp: str=None, unexpected_exit_status: UnexpectedExitStatusEvent=None, worker_assigned: WorkerAssignedEvent=None, worker_released: WorkerReleasedEvent=None):
        """Event - a model defined in OpenAPI

        :param container_killed: The container_killed of this Event.
        :param container_started: The container_started of this Event.
        :param container_stopped: The container_stopped of this Event.
        :param delayed: The delayed of this Event.
        :param description: The description of this Event.
        :param failed: The failed of this Event.
        :param pull_started: The pull_started of this Event.
        :param pull_stopped: The pull_stopped of this Event.
        :param timestamp: The timestamp of this Event.
        :param unexpected_exit_status: The unexpected_exit_status of this Event.
        :param worker_assigned: The worker_assigned of this Event.
        :param worker_released: The worker_released of this Event.
        """
        self.openapi_types = {
            'container_killed': ContainerKilledEvent,
            'container_started': ContainerStartedEvent,
            'container_stopped': ContainerStoppedEvent,
            'delayed': DelayedEvent,
            'description': str,
            'failed': FailedEvent,
            'pull_started': PullStartedEvent,
            'pull_stopped': PullStoppedEvent,
            'timestamp': str,
            'unexpected_exit_status': UnexpectedExitStatusEvent,
            'worker_assigned': WorkerAssignedEvent,
            'worker_released': WorkerReleasedEvent
        }

        self.attribute_map = {
            'container_killed': 'containerKilled',
            'container_started': 'containerStarted',
            'container_stopped': 'containerStopped',
            'delayed': 'delayed',
            'description': 'description',
            'failed': 'failed',
            'pull_started': 'pullStarted',
            'pull_stopped': 'pullStopped',
            'timestamp': 'timestamp',
            'unexpected_exit_status': 'unexpectedExitStatus',
            'worker_assigned': 'workerAssigned',
            'worker_released': 'workerReleased'
        }

        self._container_killed = container_killed
        self._container_started = container_started
        self._container_stopped = container_stopped
        self._delayed = delayed
        self._description = description
        self._failed = failed
        self._pull_started = pull_started
        self._pull_stopped = pull_stopped
        self._timestamp = timestamp
        self._unexpected_exit_status = unexpected_exit_status
        self._worker_assigned = worker_assigned
        self._worker_released = worker_released

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_killed(self):
        """Gets the container_killed of this Event.


        :return: The container_killed of this Event.
        :rtype: ContainerKilledEvent
        """
        return self._container_killed

    @container_killed.setter
    def container_killed(self, container_killed):
        """Sets the container_killed of this Event.


        :param container_killed: The container_killed of this Event.
        :type container_killed: ContainerKilledEvent
        """

        self._container_killed = container_killed

    @property
    def container_started(self):
        """Gets the container_started of this Event.


        :return: The container_started of this Event.
        :rtype: ContainerStartedEvent
        """
        return self._container_started

    @container_started.setter
    def container_started(self, container_started):
        """Sets the container_started of this Event.


        :param container_started: The container_started of this Event.
        :type container_started: ContainerStartedEvent
        """

        self._container_started = container_started

    @property
    def container_stopped(self):
        """Gets the container_stopped of this Event.


        :return: The container_stopped of this Event.
        :rtype: ContainerStoppedEvent
        """
        return self._container_stopped

    @container_stopped.setter
    def container_stopped(self, container_stopped):
        """Sets the container_stopped of this Event.


        :param container_stopped: The container_stopped of this Event.
        :type container_stopped: ContainerStoppedEvent
        """

        self._container_stopped = container_stopped

    @property
    def delayed(self):
        """Gets the delayed of this Event.


        :return: The delayed of this Event.
        :rtype: DelayedEvent
        """
        return self._delayed

    @delayed.setter
    def delayed(self, delayed):
        """Sets the delayed of this Event.


        :param delayed: The delayed of this Event.
        :type delayed: DelayedEvent
        """

        self._delayed = delayed

    @property
    def description(self):
        """Gets the description of this Event.

        A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def failed(self):
        """Gets the failed of this Event.


        :return: The failed of this Event.
        :rtype: FailedEvent
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Event.


        :param failed: The failed of this Event.
        :type failed: FailedEvent
        """

        self._failed = failed

    @property
    def pull_started(self):
        """Gets the pull_started of this Event.


        :return: The pull_started of this Event.
        :rtype: PullStartedEvent
        """
        return self._pull_started

    @pull_started.setter
    def pull_started(self, pull_started):
        """Sets the pull_started of this Event.


        :param pull_started: The pull_started of this Event.
        :type pull_started: PullStartedEvent
        """

        self._pull_started = pull_started

    @property
    def pull_stopped(self):
        """Gets the pull_stopped of this Event.


        :return: The pull_stopped of this Event.
        :rtype: PullStoppedEvent
        """
        return self._pull_stopped

    @pull_stopped.setter
    def pull_stopped(self, pull_stopped):
        """Sets the pull_stopped of this Event.


        :param pull_stopped: The pull_stopped of this Event.
        :type pull_stopped: PullStoppedEvent
        """

        self._pull_stopped = pull_stopped

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.

        The time at which the event occurred.

        :return: The timestamp of this Event.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.

        The time at which the event occurred.

        :param timestamp: The timestamp of this Event.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def unexpected_exit_status(self):
        """Gets the unexpected_exit_status of this Event.


        :return: The unexpected_exit_status of this Event.
        :rtype: UnexpectedExitStatusEvent
        """
        return self._unexpected_exit_status

    @unexpected_exit_status.setter
    def unexpected_exit_status(self, unexpected_exit_status):
        """Sets the unexpected_exit_status of this Event.


        :param unexpected_exit_status: The unexpected_exit_status of this Event.
        :type unexpected_exit_status: UnexpectedExitStatusEvent
        """

        self._unexpected_exit_status = unexpected_exit_status

    @property
    def worker_assigned(self):
        """Gets the worker_assigned of this Event.


        :return: The worker_assigned of this Event.
        :rtype: WorkerAssignedEvent
        """
        return self._worker_assigned

    @worker_assigned.setter
    def worker_assigned(self, worker_assigned):
        """Sets the worker_assigned of this Event.


        :param worker_assigned: The worker_assigned of this Event.
        :type worker_assigned: WorkerAssignedEvent
        """

        self._worker_assigned = worker_assigned

    @property
    def worker_released(self):
        """Gets the worker_released of this Event.


        :return: The worker_released of this Event.
        :rtype: WorkerReleasedEvent
        """
        return self._worker_released

    @worker_released.setter
    def worker_released(self, worker_released):
        """Sets the worker_released of this Event.


        :param worker_released: The worker_released of this Event.
        :type worker_released: WorkerReleasedEvent
        """

        self._worker_released = worker_released
