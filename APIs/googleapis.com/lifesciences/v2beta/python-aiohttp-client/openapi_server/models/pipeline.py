# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.resources import Resources
from openapi_server.models.secret import Secret
from openapi_server import util


class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[Action]=None, encrypted_environment: Secret=None, environment: Dict[str, str]=None, resources: Resources=None, timeout: str=None):
        """Pipeline - a model defined in OpenAPI

        :param actions: The actions of this Pipeline.
        :param encrypted_environment: The encrypted_environment of this Pipeline.
        :param environment: The environment of this Pipeline.
        :param resources: The resources of this Pipeline.
        :param timeout: The timeout of this Pipeline.
        """
        self.openapi_types = {
            'actions': List[Action],
            'encrypted_environment': Secret,
            'environment': Dict[str, str],
            'resources': Resources,
            'timeout': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'encrypted_environment': 'encryptedEnvironment',
            'environment': 'environment',
            'resources': 'resources',
            'timeout': 'timeout'
        }

        self._actions = actions
        self._encrypted_environment = encrypted_environment
        self._environment = environment
        self._resources = resources
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pipeline of this Pipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Pipeline.

        The list of actions to execute, in the order they are specified.

        :return: The actions of this Pipeline.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Pipeline.

        The list of actions to execute, in the order they are specified.

        :param actions: The actions of this Pipeline.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def encrypted_environment(self):
        """Gets the encrypted_environment of this Pipeline.


        :return: The encrypted_environment of this Pipeline.
        :rtype: Secret
        """
        return self._encrypted_environment

    @encrypted_environment.setter
    def encrypted_environment(self, encrypted_environment):
        """Sets the encrypted_environment of this Pipeline.


        :param encrypted_environment: The encrypted_environment of this Pipeline.
        :type encrypted_environment: Secret
        """

        self._encrypted_environment = encrypted_environment

    @property
    def environment(self):
        """Gets the environment of this Pipeline.

        The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).

        :return: The environment of this Pipeline.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Pipeline.

        The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).

        :param environment: The environment of this Pipeline.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def resources(self):
        """Gets the resources of this Pipeline.


        :return: The resources of this Pipeline.
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Pipeline.


        :param resources: The resources of this Pipeline.
        :type resources: Resources
        """

        self._resources = resources

    @property
    def timeout(self):
        """Gets the timeout of this Pipeline.

        The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.

        :return: The timeout of this Pipeline.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Pipeline.

        The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.

        :param timeout: The timeout of this Pipeline.
        :type timeout: str
        """

        self._timeout = timeout
