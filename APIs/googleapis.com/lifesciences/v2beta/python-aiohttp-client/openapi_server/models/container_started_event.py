# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerStartedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: int=None, ip_address: str=None, port_mappings: Dict[str, int]=None):
        """ContainerStartedEvent - a model defined in OpenAPI

        :param action_id: The action_id of this ContainerStartedEvent.
        :param ip_address: The ip_address of this ContainerStartedEvent.
        :param port_mappings: The port_mappings of this ContainerStartedEvent.
        """
        self.openapi_types = {
            'action_id': int,
            'ip_address': str,
            'port_mappings': Dict[str, int]
        }

        self.attribute_map = {
            'action_id': 'actionId',
            'ip_address': 'ipAddress',
            'port_mappings': 'portMappings'
        }

        self._action_id = action_id
        self._ip_address = ip_address
        self._port_mappings = port_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerStartedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerStartedEvent of this ContainerStartedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this ContainerStartedEvent.

        The numeric ID of the action that started this container.

        :return: The action_id of this ContainerStartedEvent.
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ContainerStartedEvent.

        The numeric ID of the action that started this container.

        :param action_id: The action_id of this ContainerStartedEvent.
        :type action_id: int
        """

        self._action_id = action_id

    @property
    def ip_address(self):
        """Gets the ip_address of this ContainerStartedEvent.

        The public IP address that can be used to connect to the container. This field is only populated when at least one port mapping is present. If the instance was created with a private address, this field will be empty even if port mappings exist.

        :return: The ip_address of this ContainerStartedEvent.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ContainerStartedEvent.

        The public IP address that can be used to connect to the container. This field is only populated when at least one port mapping is present. If the instance was created with a private address, this field will be empty even if port mappings exist.

        :param ip_address: The ip_address of this ContainerStartedEvent.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def port_mappings(self):
        """Gets the port_mappings of this ContainerStartedEvent.

        The container-to-host port mappings installed for this container. This set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as well as any specified in the `Action` definition.

        :return: The port_mappings of this ContainerStartedEvent.
        :rtype: Dict[str, int]
        """
        return self._port_mappings

    @port_mappings.setter
    def port_mappings(self, port_mappings):
        """Sets the port_mappings of this ContainerStartedEvent.

        The container-to-host port mappings installed for this container. This set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as well as any specified in the `Action` definition.

        :param port_mappings: The port_mappings of this ContainerStartedEvent.
        :type port_mappings: Dict[str, int]
        """

        self._port_mappings = port_mappings
