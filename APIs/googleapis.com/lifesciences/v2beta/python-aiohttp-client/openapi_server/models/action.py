# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mount import Mount
from openapi_server.models.secret import Secret
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_run: bool=None, block_external_network: bool=None, commands: List[str]=None, container_name: str=None, credentials: Secret=None, disable_image_prefetch: bool=None, disable_standard_error_capture: bool=None, enable_fuse: bool=None, encrypted_environment: Secret=None, entrypoint: str=None, environment: Dict[str, str]=None, ignore_exit_status: bool=None, image_uri: str=None, labels: Dict[str, str]=None, mounts: List[Mount]=None, pid_namespace: str=None, port_mappings: Dict[str, int]=None, publish_exposed_ports: bool=None, run_in_background: bool=None, timeout: str=None):
        """Action - a model defined in OpenAPI

        :param always_run: The always_run of this Action.
        :param block_external_network: The block_external_network of this Action.
        :param commands: The commands of this Action.
        :param container_name: The container_name of this Action.
        :param credentials: The credentials of this Action.
        :param disable_image_prefetch: The disable_image_prefetch of this Action.
        :param disable_standard_error_capture: The disable_standard_error_capture of this Action.
        :param enable_fuse: The enable_fuse of this Action.
        :param encrypted_environment: The encrypted_environment of this Action.
        :param entrypoint: The entrypoint of this Action.
        :param environment: The environment of this Action.
        :param ignore_exit_status: The ignore_exit_status of this Action.
        :param image_uri: The image_uri of this Action.
        :param labels: The labels of this Action.
        :param mounts: The mounts of this Action.
        :param pid_namespace: The pid_namespace of this Action.
        :param port_mappings: The port_mappings of this Action.
        :param publish_exposed_ports: The publish_exposed_ports of this Action.
        :param run_in_background: The run_in_background of this Action.
        :param timeout: The timeout of this Action.
        """
        self.openapi_types = {
            'always_run': bool,
            'block_external_network': bool,
            'commands': List[str],
            'container_name': str,
            'credentials': Secret,
            'disable_image_prefetch': bool,
            'disable_standard_error_capture': bool,
            'enable_fuse': bool,
            'encrypted_environment': Secret,
            'entrypoint': str,
            'environment': Dict[str, str],
            'ignore_exit_status': bool,
            'image_uri': str,
            'labels': Dict[str, str],
            'mounts': List[Mount],
            'pid_namespace': str,
            'port_mappings': Dict[str, int],
            'publish_exposed_ports': bool,
            'run_in_background': bool,
            'timeout': str
        }

        self.attribute_map = {
            'always_run': 'alwaysRun',
            'block_external_network': 'blockExternalNetwork',
            'commands': 'commands',
            'container_name': 'containerName',
            'credentials': 'credentials',
            'disable_image_prefetch': 'disableImagePrefetch',
            'disable_standard_error_capture': 'disableStandardErrorCapture',
            'enable_fuse': 'enableFuse',
            'encrypted_environment': 'encryptedEnvironment',
            'entrypoint': 'entrypoint',
            'environment': 'environment',
            'ignore_exit_status': 'ignoreExitStatus',
            'image_uri': 'imageUri',
            'labels': 'labels',
            'mounts': 'mounts',
            'pid_namespace': 'pidNamespace',
            'port_mappings': 'portMappings',
            'publish_exposed_ports': 'publishExposedPorts',
            'run_in_background': 'runInBackground',
            'timeout': 'timeout'
        }

        self._always_run = always_run
        self._block_external_network = block_external_network
        self._commands = commands
        self._container_name = container_name
        self._credentials = credentials
        self._disable_image_prefetch = disable_image_prefetch
        self._disable_standard_error_capture = disable_standard_error_capture
        self._enable_fuse = enable_fuse
        self._encrypted_environment = encrypted_environment
        self._entrypoint = entrypoint
        self._environment = environment
        self._ignore_exit_status = ignore_exit_status
        self._image_uri = image_uri
        self._labels = labels
        self._mounts = mounts
        self._pid_namespace = pid_namespace
        self._port_mappings = port_mappings
        self._publish_exposed_ports = publish_exposed_ports
        self._run_in_background = run_in_background
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_run(self):
        """Gets the always_run of this Action.

        By default, after an action fails, no further actions are run. This flag indicates that this action must be run even if the pipeline has already failed. This is useful for actions that copy output files off of the VM or for debugging. Note that no actions will be run if image prefetching fails.

        :return: The always_run of this Action.
        :rtype: bool
        """
        return self._always_run

    @always_run.setter
    def always_run(self, always_run):
        """Sets the always_run of this Action.

        By default, after an action fails, no further actions are run. This flag indicates that this action must be run even if the pipeline has already failed. This is useful for actions that copy output files off of the VM or for debugging. Note that no actions will be run if image prefetching fails.

        :param always_run: The always_run of this Action.
        :type always_run: bool
        """

        self._always_run = always_run

    @property
    def block_external_network(self):
        """Gets the block_external_network of this Action.

        Prevents the container from accessing the external network.

        :return: The block_external_network of this Action.
        :rtype: bool
        """
        return self._block_external_network

    @block_external_network.setter
    def block_external_network(self, block_external_network):
        """Sets the block_external_network of this Action.

        Prevents the container from accessing the external network.

        :param block_external_network: The block_external_network of this Action.
        :type block_external_network: bool
        """

        self._block_external_network = block_external_network

    @property
    def commands(self):
        """Gets the commands of this Action.

        If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.

        :return: The commands of this Action.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this Action.

        If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.

        :param commands: The commands of this Action.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def container_name(self):
        """Gets the container_name of this Action.

        An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :return: The container_name of this Action.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this Action.

        An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.

        :param container_name: The container_name of this Action.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def credentials(self):
        """Gets the credentials of this Action.


        :return: The credentials of this Action.
        :rtype: Secret
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Action.


        :param credentials: The credentials of this Action.
        :type credentials: Secret
        """

        self._credentials = credentials

    @property
    def disable_image_prefetch(self):
        """Gets the disable_image_prefetch of this Action.

        All container images are typically downloaded before any actions are executed. This helps prevent typos in URIs or issues like lack of disk space from wasting large amounts of compute resources. If set, this flag prevents the worker from downloading the image until just before the action is executed.

        :return: The disable_image_prefetch of this Action.
        :rtype: bool
        """
        return self._disable_image_prefetch

    @disable_image_prefetch.setter
    def disable_image_prefetch(self, disable_image_prefetch):
        """Sets the disable_image_prefetch of this Action.

        All container images are typically downloaded before any actions are executed. This helps prevent typos in URIs or issues like lack of disk space from wasting large amounts of compute resources. If set, this flag prevents the worker from downloading the image until just before the action is executed.

        :param disable_image_prefetch: The disable_image_prefetch of this Action.
        :type disable_image_prefetch: bool
        """

        self._disable_image_prefetch = disable_image_prefetch

    @property
    def disable_standard_error_capture(self):
        """Gets the disable_standard_error_capture of this Action.

        A small portion of the container's standard error stream is typically captured and returned inside the `ContainerStoppedEvent`. Setting this flag disables this functionality.

        :return: The disable_standard_error_capture of this Action.
        :rtype: bool
        """
        return self._disable_standard_error_capture

    @disable_standard_error_capture.setter
    def disable_standard_error_capture(self, disable_standard_error_capture):
        """Sets the disable_standard_error_capture of this Action.

        A small portion of the container's standard error stream is typically captured and returned inside the `ContainerStoppedEvent`. Setting this flag disables this functionality.

        :param disable_standard_error_capture: The disable_standard_error_capture of this Action.
        :type disable_standard_error_capture: bool
        """

        self._disable_standard_error_capture = disable_standard_error_capture

    @property
    def enable_fuse(self):
        """Gets the enable_fuse of this Action.

        Enable access to the FUSE device for this action. Filesystems can then be mounted into disks shared with other actions. The other actions do not need the `enable_fuse` flag to access the mounted filesystem. This has the effect of causing the container to be executed with `CAP_SYS_ADMIN` and exposes `/dev/fuse` to the container, so use it only for containers you trust.

        :return: The enable_fuse of this Action.
        :rtype: bool
        """
        return self._enable_fuse

    @enable_fuse.setter
    def enable_fuse(self, enable_fuse):
        """Sets the enable_fuse of this Action.

        Enable access to the FUSE device for this action. Filesystems can then be mounted into disks shared with other actions. The other actions do not need the `enable_fuse` flag to access the mounted filesystem. This has the effect of causing the container to be executed with `CAP_SYS_ADMIN` and exposes `/dev/fuse` to the container, so use it only for containers you trust.

        :param enable_fuse: The enable_fuse of this Action.
        :type enable_fuse: bool
        """

        self._enable_fuse = enable_fuse

    @property
    def encrypted_environment(self):
        """Gets the encrypted_environment of this Action.


        :return: The encrypted_environment of this Action.
        :rtype: Secret
        """
        return self._encrypted_environment

    @encrypted_environment.setter
    def encrypted_environment(self, encrypted_environment):
        """Sets the encrypted_environment of this Action.


        :param encrypted_environment: The encrypted_environment of this Action.
        :type encrypted_environment: Secret
        """

        self._encrypted_environment = encrypted_environment

    @property
    def entrypoint(self):
        """Gets the entrypoint of this Action.

        If specified, overrides the `ENTRYPOINT` specified in the container.

        :return: The entrypoint of this Action.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this Action.

        If specified, overrides the `ENTRYPOINT` specified in the container.

        :param entrypoint: The entrypoint of this Action.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def environment(self):
        """Gets the environment of this Action.

        The environment to pass into the container. This environment is merged with values specified in the google.cloud.lifesciences.v2beta.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.

        :return: The environment of this Action.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Action.

        The environment to pass into the container. This environment is merged with values specified in the google.cloud.lifesciences.v2beta.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.

        :param environment: The environment of this Action.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def ignore_exit_status(self):
        """Gets the ignore_exit_status of this Action.

        Normally, a non-zero exit status causes the pipeline to fail. This flag allows execution of other actions to continue instead.

        :return: The ignore_exit_status of this Action.
        :rtype: bool
        """
        return self._ignore_exit_status

    @ignore_exit_status.setter
    def ignore_exit_status(self, ignore_exit_status):
        """Sets the ignore_exit_status of this Action.

        Normally, a non-zero exit status causes the pipeline to fail. This flag allows execution of other actions to continue instead.

        :param ignore_exit_status: The ignore_exit_status of this Action.
        :type ignore_exit_status: bool
        """

        self._ignore_exit_status = ignore_exit_status

    @property
    def image_uri(self):
        """Gets the image_uri of this Action.

        Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.cloud.lifesciences.v2beta.Action.credentials field.

        :return: The image_uri of this Action.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this Action.

        Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.cloud.lifesciences.v2beta.Action.credentials field.

        :param image_uri: The image_uri of this Action.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def labels(self):
        """Gets the labels of this Action.

        Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.

        :return: The labels of this Action.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Action.

        Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.

        :param labels: The labels of this Action.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mounts(self):
        """Gets the mounts of this Action.

        A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. 

        :return: The mounts of this Action.
        :rtype: List[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this Action.

        A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. 

        :param mounts: The mounts of this Action.
        :type mounts: List[Mount]
        """

        self._mounts = mounts

    @property
    def pid_namespace(self):
        """Gets the pid_namespace of this Action.

        An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.

        :return: The pid_namespace of this Action.
        :rtype: str
        """
        return self._pid_namespace

    @pid_namespace.setter
    def pid_namespace(self, pid_namespace):
        """Sets the pid_namespace of this Action.

        An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.

        :param pid_namespace: The pid_namespace of this Action.
        :type pid_namespace: str
        """

        self._pid_namespace = pid_namespace

    @property
    def port_mappings(self):
        """Gets the port_mappings of this Action.

        A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.

        :return: The port_mappings of this Action.
        :rtype: Dict[str, int]
        """
        return self._port_mappings

    @port_mappings.setter
    def port_mappings(self, port_mappings):
        """Sets the port_mappings of this Action.

        A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.

        :param port_mappings: The port_mappings of this Action.
        :type port_mappings: Dict[str, int]
        """

        self._port_mappings = port_mappings

    @property
    def publish_exposed_ports(self):
        """Gets the publish_exposed_ports of this Action.

        Exposes all ports specified by `EXPOSE` statements in the container. To discover the host side port numbers, consult the `ACTION_STARTED` event in the operation metadata.

        :return: The publish_exposed_ports of this Action.
        :rtype: bool
        """
        return self._publish_exposed_ports

    @publish_exposed_ports.setter
    def publish_exposed_ports(self, publish_exposed_ports):
        """Sets the publish_exposed_ports of this Action.

        Exposes all ports specified by `EXPOSE` statements in the container. To discover the host side port numbers, consult the `ACTION_STARTED` event in the operation metadata.

        :param publish_exposed_ports: The publish_exposed_ports of this Action.
        :type publish_exposed_ports: bool
        """

        self._publish_exposed_ports = publish_exposed_ports

    @property
    def run_in_background(self):
        """Gets the run_in_background of this Action.

        This flag allows an action to continue running in the background while executing subsequent actions. This is useful to provide services to other actions (or to provide debugging support tools like SSH servers).

        :return: The run_in_background of this Action.
        :rtype: bool
        """
        return self._run_in_background

    @run_in_background.setter
    def run_in_background(self, run_in_background):
        """Sets the run_in_background of this Action.

        This flag allows an action to continue running in the background while executing subsequent actions. This is useful to provide services to other actions (or to provide debugging support tools like SSH servers).

        :param run_in_background: The run_in_background of this Action.
        :type run_in_background: bool
        """

        self._run_in_background = run_in_background

    @property
    def timeout(self):
        """Gets the timeout of this Action.

        The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.

        :return: The timeout of this Action.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Action.

        The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.

        :param timeout: The timeout of this Action.
        :type timeout: str
        """

        self._timeout = timeout
