# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Mount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk: str=None, path: str=None, read_only: bool=None):
        """Mount - a model defined in OpenAPI

        :param disk: The disk of this Mount.
        :param path: The path of this Mount.
        :param read_only: The read_only of this Mount.
        """
        self.openapi_types = {
            'disk': str,
            'path': str,
            'read_only': bool
        }

        self.attribute_map = {
            'disk': 'disk',
            'path': 'path',
            'read_only': 'readOnly'
        }

        self._disk = disk
        self._path = path
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mount of this Mount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk(self):
        """Gets the disk of this Mount.

        The name of the disk to mount, as specified in the resources section.

        :return: The disk of this Mount.
        :rtype: str
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Mount.

        The name of the disk to mount, as specified in the resources section.

        :param disk: The disk of this Mount.
        :type disk: str
        """

        self._disk = disk

    @property
    def path(self):
        """Gets the path of this Mount.

        The path to mount the disk inside the container.

        :return: The path of this Mount.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Mount.

        The path to mount the disk inside the container.

        :param path: The path of this Mount.
        :type path: str
        """

        self._path = path

    @property
    def read_only(self):
        """Gets the read_only of this Mount.

        If true, the disk is mounted read-only inside the container.

        :return: The read_only of this Mount.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Mount.

        If true, the disk is mounted read-only inside the container.

        :param read_only: The read_only of this Mount.
        :type read_only: bool
        """

        self._read_only = read_only
