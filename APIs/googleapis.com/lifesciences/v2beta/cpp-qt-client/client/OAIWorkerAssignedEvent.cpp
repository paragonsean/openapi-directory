/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerAssignedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerAssignedEvent::OAIWorkerAssignedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerAssignedEvent::OAIWorkerAssignedEvent() {
    this->initializeModel();
}

OAIWorkerAssignedEvent::~OAIWorkerAssignedEvent() {}

void OAIWorkerAssignedEvent::initializeModel() {

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIWorkerAssignedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerAssignedEvent::fromJsonObject(QJsonObject json) {

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIWorkerAssignedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerAssignedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIWorkerAssignedEvent::getInstance() const {
    return m_instance;
}
void OAIWorkerAssignedEvent::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIWorkerAssignedEvent::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIWorkerAssignedEvent::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIWorkerAssignedEvent::getMachineType() const {
    return m_machine_type;
}
void OAIWorkerAssignedEvent::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIWorkerAssignedEvent::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIWorkerAssignedEvent::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIWorkerAssignedEvent::getZone() const {
    return m_zone;
}
void OAIWorkerAssignedEvent::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIWorkerAssignedEvent::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIWorkerAssignedEvent::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIWorkerAssignedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerAssignedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
