/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_container_killed_isSet = false;
    m_container_killed_isValid = false;

    m_container_started_isSet = false;
    m_container_started_isValid = false;

    m_container_stopped_isSet = false;
    m_container_stopped_isValid = false;

    m_delayed_isSet = false;
    m_delayed_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_pull_started_isSet = false;
    m_pull_started_isValid = false;

    m_pull_stopped_isSet = false;
    m_pull_stopped_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unexpected_exit_status_isSet = false;
    m_unexpected_exit_status_isValid = false;

    m_worker_assigned_isSet = false;
    m_worker_assigned_isValid = false;

    m_worker_released_isSet = false;
    m_worker_released_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_container_killed_isValid = ::OpenAPI::fromJsonValue(m_container_killed, json[QString("containerKilled")]);
    m_container_killed_isSet = !json[QString("containerKilled")].isNull() && m_container_killed_isValid;

    m_container_started_isValid = ::OpenAPI::fromJsonValue(m_container_started, json[QString("containerStarted")]);
    m_container_started_isSet = !json[QString("containerStarted")].isNull() && m_container_started_isValid;

    m_container_stopped_isValid = ::OpenAPI::fromJsonValue(m_container_stopped, json[QString("containerStopped")]);
    m_container_stopped_isSet = !json[QString("containerStopped")].isNull() && m_container_stopped_isValid;

    m_delayed_isValid = ::OpenAPI::fromJsonValue(m_delayed, json[QString("delayed")]);
    m_delayed_isSet = !json[QString("delayed")].isNull() && m_delayed_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_pull_started_isValid = ::OpenAPI::fromJsonValue(m_pull_started, json[QString("pullStarted")]);
    m_pull_started_isSet = !json[QString("pullStarted")].isNull() && m_pull_started_isValid;

    m_pull_stopped_isValid = ::OpenAPI::fromJsonValue(m_pull_stopped, json[QString("pullStopped")]);
    m_pull_stopped_isSet = !json[QString("pullStopped")].isNull() && m_pull_stopped_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_unexpected_exit_status_isValid = ::OpenAPI::fromJsonValue(m_unexpected_exit_status, json[QString("unexpectedExitStatus")]);
    m_unexpected_exit_status_isSet = !json[QString("unexpectedExitStatus")].isNull() && m_unexpected_exit_status_isValid;

    m_worker_assigned_isValid = ::OpenAPI::fromJsonValue(m_worker_assigned, json[QString("workerAssigned")]);
    m_worker_assigned_isSet = !json[QString("workerAssigned")].isNull() && m_worker_assigned_isValid;

    m_worker_released_isValid = ::OpenAPI::fromJsonValue(m_worker_released, json[QString("workerReleased")]);
    m_worker_released_isSet = !json[QString("workerReleased")].isNull() && m_worker_released_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_container_killed.isSet()) {
        obj.insert(QString("containerKilled"), ::OpenAPI::toJsonValue(m_container_killed));
    }
    if (m_container_started.isSet()) {
        obj.insert(QString("containerStarted"), ::OpenAPI::toJsonValue(m_container_started));
    }
    if (m_container_stopped.isSet()) {
        obj.insert(QString("containerStopped"), ::OpenAPI::toJsonValue(m_container_stopped));
    }
    if (m_delayed.isSet()) {
        obj.insert(QString("delayed"), ::OpenAPI::toJsonValue(m_delayed));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_failed.isSet()) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_pull_started.isSet()) {
        obj.insert(QString("pullStarted"), ::OpenAPI::toJsonValue(m_pull_started));
    }
    if (m_pull_stopped.isSet()) {
        obj.insert(QString("pullStopped"), ::OpenAPI::toJsonValue(m_pull_stopped));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_unexpected_exit_status.isSet()) {
        obj.insert(QString("unexpectedExitStatus"), ::OpenAPI::toJsonValue(m_unexpected_exit_status));
    }
    if (m_worker_assigned.isSet()) {
        obj.insert(QString("workerAssigned"), ::OpenAPI::toJsonValue(m_worker_assigned));
    }
    if (m_worker_released.isSet()) {
        obj.insert(QString("workerReleased"), ::OpenAPI::toJsonValue(m_worker_released));
    }
    return obj;
}

OAIContainerKilledEvent OAIEvent::getContainerKilled() const {
    return m_container_killed;
}
void OAIEvent::setContainerKilled(const OAIContainerKilledEvent &container_killed) {
    m_container_killed = container_killed;
    m_container_killed_isSet = true;
}

bool OAIEvent::is_container_killed_Set() const{
    return m_container_killed_isSet;
}

bool OAIEvent::is_container_killed_Valid() const{
    return m_container_killed_isValid;
}

OAIContainerStartedEvent OAIEvent::getContainerStarted() const {
    return m_container_started;
}
void OAIEvent::setContainerStarted(const OAIContainerStartedEvent &container_started) {
    m_container_started = container_started;
    m_container_started_isSet = true;
}

bool OAIEvent::is_container_started_Set() const{
    return m_container_started_isSet;
}

bool OAIEvent::is_container_started_Valid() const{
    return m_container_started_isValid;
}

OAIContainerStoppedEvent OAIEvent::getContainerStopped() const {
    return m_container_stopped;
}
void OAIEvent::setContainerStopped(const OAIContainerStoppedEvent &container_stopped) {
    m_container_stopped = container_stopped;
    m_container_stopped_isSet = true;
}

bool OAIEvent::is_container_stopped_Set() const{
    return m_container_stopped_isSet;
}

bool OAIEvent::is_container_stopped_Valid() const{
    return m_container_stopped_isValid;
}

OAIDelayedEvent OAIEvent::getDelayed() const {
    return m_delayed;
}
void OAIEvent::setDelayed(const OAIDelayedEvent &delayed) {
    m_delayed = delayed;
    m_delayed_isSet = true;
}

bool OAIEvent::is_delayed_Set() const{
    return m_delayed_isSet;
}

bool OAIEvent::is_delayed_Valid() const{
    return m_delayed_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

OAIFailedEvent OAIEvent::getFailed() const {
    return m_failed;
}
void OAIEvent::setFailed(const OAIFailedEvent &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIEvent::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIEvent::is_failed_Valid() const{
    return m_failed_isValid;
}

OAIPullStartedEvent OAIEvent::getPullStarted() const {
    return m_pull_started;
}
void OAIEvent::setPullStarted(const OAIPullStartedEvent &pull_started) {
    m_pull_started = pull_started;
    m_pull_started_isSet = true;
}

bool OAIEvent::is_pull_started_Set() const{
    return m_pull_started_isSet;
}

bool OAIEvent::is_pull_started_Valid() const{
    return m_pull_started_isValid;
}

OAIPullStoppedEvent OAIEvent::getPullStopped() const {
    return m_pull_stopped;
}
void OAIEvent::setPullStopped(const OAIPullStoppedEvent &pull_stopped) {
    m_pull_stopped = pull_stopped;
    m_pull_stopped_isSet = true;
}

bool OAIEvent::is_pull_stopped_Set() const{
    return m_pull_stopped_isSet;
}

bool OAIEvent::is_pull_stopped_Valid() const{
    return m_pull_stopped_isValid;
}

QString OAIEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIEvent::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIUnexpectedExitStatusEvent OAIEvent::getUnexpectedExitStatus() const {
    return m_unexpected_exit_status;
}
void OAIEvent::setUnexpectedExitStatus(const OAIUnexpectedExitStatusEvent &unexpected_exit_status) {
    m_unexpected_exit_status = unexpected_exit_status;
    m_unexpected_exit_status_isSet = true;
}

bool OAIEvent::is_unexpected_exit_status_Set() const{
    return m_unexpected_exit_status_isSet;
}

bool OAIEvent::is_unexpected_exit_status_Valid() const{
    return m_unexpected_exit_status_isValid;
}

OAIWorkerAssignedEvent OAIEvent::getWorkerAssigned() const {
    return m_worker_assigned;
}
void OAIEvent::setWorkerAssigned(const OAIWorkerAssignedEvent &worker_assigned) {
    m_worker_assigned = worker_assigned;
    m_worker_assigned_isSet = true;
}

bool OAIEvent::is_worker_assigned_Set() const{
    return m_worker_assigned_isSet;
}

bool OAIEvent::is_worker_assigned_Valid() const{
    return m_worker_assigned_isValid;
}

OAIWorkerReleasedEvent OAIEvent::getWorkerReleased() const {
    return m_worker_released;
}
void OAIEvent::setWorkerReleased(const OAIWorkerReleasedEvent &worker_released) {
    m_worker_released = worker_released;
    m_worker_released_isSet = true;
}

bool OAIEvent::is_worker_released_Set() const{
    return m_worker_released_isSet;
}

bool OAIEvent::is_worker_released_Valid() const{
    return m_worker_released_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_killed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_started.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_stopped.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delayed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_started.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_stopped.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unexpected_exit_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_assigned.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_released.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
