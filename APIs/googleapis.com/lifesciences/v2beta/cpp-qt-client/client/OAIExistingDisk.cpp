/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExistingDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExistingDisk::OAIExistingDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExistingDisk::OAIExistingDisk() {
    this->initializeModel();
}

OAIExistingDisk::~OAIExistingDisk() {}

void OAIExistingDisk::initializeModel() {

    m_disk_isSet = false;
    m_disk_isValid = false;
}

void OAIExistingDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExistingDisk::fromJsonObject(QJsonObject json) {

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;
}

QString OAIExistingDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExistingDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_isSet) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    return obj;
}

QString OAIExistingDisk::getDisk() const {
    return m_disk;
}
void OAIExistingDisk::setDisk(const QString &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIExistingDisk::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIExistingDisk::is_disk_Valid() const{
    return m_disk_isValid;
}

bool OAIExistingDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExistingDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
