/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_pipeline_isSet = false;
    m_pipeline_isValid = false;

    m_pub_sub_topic_isSet = false;
    m_pub_sub_topic_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_pipeline_isValid = ::OpenAPI::fromJsonValue(m_pipeline, json[QString("pipeline")]);
    m_pipeline_isSet = !json[QString("pipeline")].isNull() && m_pipeline_isValid;

    m_pub_sub_topic_isValid = ::OpenAPI::fromJsonValue(m_pub_sub_topic, json[QString("pubSubTopic")]);
    m_pub_sub_topic_isSet = !json[QString("pubSubTopic")].isNull() && m_pub_sub_topic_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_pipeline.isSet()) {
        obj.insert(QString("pipeline"), ::OpenAPI::toJsonValue(m_pipeline));
    }
    if (m_pub_sub_topic_isSet) {
        obj.insert(QString("pubSubTopic"), ::OpenAPI::toJsonValue(m_pub_sub_topic));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMetadata::getEndTime() const {
    return m_end_time;
}
void OAIMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIEvent> OAIMetadata::getEvents() const {
    return m_events;
}
void OAIMetadata::setEvents(const QList<OAIEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIMetadata::is_events_Set() const{
    return m_events_isSet;
}

bool OAIMetadata::is_events_Valid() const{
    return m_events_isValid;
}

QMap<QString, QString> OAIMetadata::getLabels() const {
    return m_labels;
}
void OAIMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPipeline OAIMetadata::getPipeline() const {
    return m_pipeline;
}
void OAIMetadata::setPipeline(const OAIPipeline &pipeline) {
    m_pipeline = pipeline;
    m_pipeline_isSet = true;
}

bool OAIMetadata::is_pipeline_Set() const{
    return m_pipeline_isSet;
}

bool OAIMetadata::is_pipeline_Valid() const{
    return m_pipeline_isValid;
}

QString OAIMetadata::getPubSubTopic() const {
    return m_pub_sub_topic;
}
void OAIMetadata::setPubSubTopic(const QString &pub_sub_topic) {
    m_pub_sub_topic = pub_sub_topic;
    m_pub_sub_topic_isSet = true;
}

bool OAIMetadata::is_pub_sub_topic_Set() const{
    return m_pub_sub_topic_isSet;
}

bool OAIMetadata::is_pub_sub_topic_Valid() const{
    return m_pub_sub_topic_isValid;
}

QString OAIMetadata::getStartTime() const {
    return m_start_time;
}
void OAIMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_sub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
