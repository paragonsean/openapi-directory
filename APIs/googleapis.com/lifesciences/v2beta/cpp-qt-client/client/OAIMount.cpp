/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMount::OAIMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMount::OAIMount() {
    this->initializeModel();
}

OAIMount::~OAIMount() {}

void OAIMount::initializeModel() {

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMount::fromJsonObject(QJsonObject json) {

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;
}

QString OAIMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMount::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_isSet) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

QString OAIMount::getDisk() const {
    return m_disk;
}
void OAIMount::setDisk(const QString &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIMount::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIMount::is_disk_Valid() const{
    return m_disk_isValid;
}

QString OAIMount::getPath() const {
    return m_path;
}
void OAIMount::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMount::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMount::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIMount::isReadOnly() const {
    return m_read_only;
}
void OAIMount::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIMount::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIMount::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
