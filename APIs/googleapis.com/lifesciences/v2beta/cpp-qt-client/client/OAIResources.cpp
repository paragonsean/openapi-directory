/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResources::OAIResources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResources::OAIResources() {
    this->initializeModel();
}

OAIResources::~OAIResources() {}

void OAIResources::initializeModel() {

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAIResources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResources::fromJsonObject(QJsonObject json) {

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtualMachine")]);
    m_virtual_machine_isSet = !json[QString("virtualMachine")].isNull() && m_virtual_machine_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAIResources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResources::asJsonObject() const {
    QJsonObject obj;
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_virtual_machine.isSet()) {
        obj.insert(QString("virtualMachine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QList<QString> OAIResources::getRegions() const {
    return m_regions;
}
void OAIResources::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIResources::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIResources::is_regions_Valid() const{
    return m_regions_isValid;
}

OAIVirtualMachine OAIResources::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIResources::setVirtualMachine(const OAIVirtualMachine &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIResources::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIResources::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

QList<QString> OAIResources::getZones() const {
    return m_zones;
}
void OAIResources::setZones(const QList<QString> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAIResources::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAIResources::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAIResources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
