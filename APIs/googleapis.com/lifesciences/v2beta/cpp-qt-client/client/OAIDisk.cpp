/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisk::OAIDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisk::OAIDisk() {
    this->initializeModel();
}

OAIDisk::~OAIDisk() {}

void OAIDisk::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_source_image_isSet = false;
    m_source_image_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisk::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;

    m_source_image_isValid = ::OpenAPI::fromJsonValue(m_source_image, json[QString("sourceImage")]);
    m_source_image_isSet = !json[QString("sourceImage")].isNull() && m_source_image_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_source_image_isSet) {
        obj.insert(QString("sourceImage"), ::OpenAPI::toJsonValue(m_source_image));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDisk::getName() const {
    return m_name;
}
void OAIDisk::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDisk::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDisk::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDisk::getSizeGb() const {
    return m_size_gb;
}
void OAIDisk::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIDisk::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIDisk::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

QString OAIDisk::getSourceImage() const {
    return m_source_image;
}
void OAIDisk::setSourceImage(const QString &source_image) {
    m_source_image = source_image;
    m_source_image_isSet = true;
}

bool OAIDisk::is_source_image_Set() const{
    return m_source_image_isSet;
}

bool OAIDisk::is_source_image_Valid() const{
    return m_source_image_isValid;
}

QString OAIDisk::getType() const {
    return m_type;
}
void OAIDisk::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDisk::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDisk::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
