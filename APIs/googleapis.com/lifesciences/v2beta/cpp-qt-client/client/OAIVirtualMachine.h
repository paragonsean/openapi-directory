/**
 * Cloud Life Sciences API
 * Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualMachine.h
 *
 * Carries information about a Compute Engine VM resource.
 */

#ifndef OAIVirtualMachine_H
#define OAIVirtualMachine_H

#include <QJsonObject>

#include "OAIAccelerator.h"
#include "OAIDisk.h"
#include "OAINetwork.h"
#include "OAIServiceAccount.h"
#include "OAIVolume.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccelerator;
class OAIDisk;
class OAINetwork;
class OAIServiceAccount;
class OAIVolume;

class OAIVirtualMachine : public OAIObject {
public:
    OAIVirtualMachine();
    OAIVirtualMachine(QString json);
    ~OAIVirtualMachine() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccelerator> getAccelerators() const;
    void setAccelerators(const QList<OAIAccelerator> &accelerators);
    bool is_accelerators_Set() const;
    bool is_accelerators_Valid() const;

    qint32 getBootDiskSizeGb() const;
    void setBootDiskSizeGb(const qint32 &boot_disk_size_gb);
    bool is_boot_disk_size_gb_Set() const;
    bool is_boot_disk_size_gb_Valid() const;

    QString getBootImage() const;
    void setBootImage(const QString &boot_image);
    bool is_boot_image_Set() const;
    bool is_boot_image_Valid() const;

    QString getCpuPlatform() const;
    void setCpuPlatform(const QString &cpu_platform);
    bool is_cpu_platform_Set() const;
    bool is_cpu_platform_Valid() const;

    QList<OAIDisk> getDisks() const;
    void setDisks(const QList<OAIDisk> &disks);
    bool is_disks_Set() const;
    bool is_disks_Valid() const;

    QList<QString> getDockerCacheImages() const;
    void setDockerCacheImages(const QList<QString> &docker_cache_images);
    bool is_docker_cache_images_Set() const;
    bool is_docker_cache_images_Valid() const;

    bool isEnableStackdriverMonitoring() const;
    void setEnableStackdriverMonitoring(const bool &enable_stackdriver_monitoring);
    bool is_enable_stackdriver_monitoring_Set() const;
    bool is_enable_stackdriver_monitoring_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    OAINetwork getNetwork() const;
    void setNetwork(const OAINetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    Q_DECL_DEPRECATED QString getNvidiaDriverVersion() const;
    Q_DECL_DEPRECATED void setNvidiaDriverVersion(const QString &nvidia_driver_version);
    Q_DECL_DEPRECATED bool is_nvidia_driver_version_Set() const;
    Q_DECL_DEPRECATED bool is_nvidia_driver_version_Valid() const;

    bool isPreemptible() const;
    void setPreemptible(const bool &preemptible);
    bool is_preemptible_Set() const;
    bool is_preemptible_Valid() const;

    QString getReservation() const;
    void setReservation(const QString &reservation);
    bool is_reservation_Set() const;
    bool is_reservation_Valid() const;

    OAIServiceAccount getServiceAccount() const;
    void setServiceAccount(const OAIServiceAccount &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    QList<OAIVolume> getVolumes() const;
    void setVolumes(const QList<OAIVolume> &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccelerator> m_accelerators;
    bool m_accelerators_isSet;
    bool m_accelerators_isValid;

    qint32 m_boot_disk_size_gb;
    bool m_boot_disk_size_gb_isSet;
    bool m_boot_disk_size_gb_isValid;

    QString m_boot_image;
    bool m_boot_image_isSet;
    bool m_boot_image_isValid;

    QString m_cpu_platform;
    bool m_cpu_platform_isSet;
    bool m_cpu_platform_isValid;

    QList<OAIDisk> m_disks;
    bool m_disks_isSet;
    bool m_disks_isValid;

    QList<QString> m_docker_cache_images;
    bool m_docker_cache_images_isSet;
    bool m_docker_cache_images_isValid;

    bool m_enable_stackdriver_monitoring;
    bool m_enable_stackdriver_monitoring_isSet;
    bool m_enable_stackdriver_monitoring_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    OAINetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_nvidia_driver_version;
    bool m_nvidia_driver_version_isSet;
    bool m_nvidia_driver_version_isValid;

    bool m_preemptible;
    bool m_preemptible_isSet;
    bool m_preemptible_isValid;

    QString m_reservation;
    bool m_reservation_isSet;
    bool m_reservation_isValid;

    OAIServiceAccount m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QList<OAIVolume> m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualMachine)

#endif // OAIVirtualMachine_H
