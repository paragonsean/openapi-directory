# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_details: Dict[str, object]=None, description: str=None, enum: List[object]=None, format: str=None, items: JsonSchema=None, jdbc_type: str=None, properties: Dict[str, JsonSchema]=None, required: List[str]=None, type: List[str]=None):
        """JsonSchema - a model defined in OpenAPI

        :param additional_details: The additional_details of this JsonSchema.
        :param description: The description of this JsonSchema.
        :param enum: The enum of this JsonSchema.
        :param format: The format of this JsonSchema.
        :param items: The items of this JsonSchema.
        :param jdbc_type: The jdbc_type of this JsonSchema.
        :param properties: The properties of this JsonSchema.
        :param required: The required of this JsonSchema.
        :param type: The type of this JsonSchema.
        """
        self.openapi_types = {
            'additional_details': Dict[str, object],
            'description': str,
            'enum': List[object],
            'format': str,
            'items': JsonSchema,
            'jdbc_type': str,
            'properties': Dict[str, JsonSchema],
            'required': List[str],
            'type': List[str]
        }

        self.attribute_map = {
            'additional_details': 'additionalDetails',
            'description': 'description',
            'enum': 'enum',
            'format': 'format',
            'items': 'items',
            'jdbc_type': 'jdbcType',
            'properties': 'properties',
            'required': 'required',
            'type': 'type'
        }

        self._additional_details = additional_details
        self._description = description
        self._enum = enum
        self._format = format
        self._items = items
        self._jdbc_type = jdbc_type
        self._properties = properties
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonSchema of this JsonSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_details(self):
        """Gets the additional_details of this JsonSchema.

        Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema

        :return: The additional_details of this JsonSchema.
        :rtype: Dict[str, object]
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this JsonSchema.

        Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema

        :param additional_details: The additional_details of this JsonSchema.
        :type additional_details: Dict[str, object]
        """

        self._additional_details = additional_details

    @property
    def description(self):
        """Gets the description of this JsonSchema.

        A description of this schema.

        :return: The description of this JsonSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JsonSchema.

        A description of this schema.

        :param description: The description of this JsonSchema.
        :type description: str
        """

        self._description = description

    @property
    def enum(self):
        """Gets the enum of this JsonSchema.

        Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values

        :return: The enum of this JsonSchema.
        :rtype: List[object]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this JsonSchema.

        Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values

        :param enum: The enum of this JsonSchema.
        :type enum: List[object]
        """

        self._enum = enum

    @property
    def format(self):
        """Gets the format of this JsonSchema.

        Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format

        :return: The format of this JsonSchema.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this JsonSchema.

        Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format

        :param format: The format of this JsonSchema.
        :type format: str
        """

        self._format = format

    @property
    def items(self):
        """Gets the items of this JsonSchema.


        :return: The items of this JsonSchema.
        :rtype: JsonSchema
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JsonSchema.


        :param items: The items of this JsonSchema.
        :type items: JsonSchema
        """

        self._items = items

    @property
    def jdbc_type(self):
        """Gets the jdbc_type of this JsonSchema.

        JDBC datatype of the field.

        :return: The jdbc_type of this JsonSchema.
        :rtype: str
        """
        return self._jdbc_type

    @jdbc_type.setter
    def jdbc_type(self, jdbc_type):
        """Sets the jdbc_type of this JsonSchema.

        JDBC datatype of the field.

        :param jdbc_type: The jdbc_type of this JsonSchema.
        :type jdbc_type: str
        """
        allowed_values = ["DATA_TYPE_UNSPECIFIED", "INT", "SMALLINT", "DOUBLE", "DATE", "DATETIME", "TIME", "STRING", "LONG", "BOOLEAN", "DECIMAL", "UUID", "BLOB", "BIT", "TINYINT", "INTEGER", "BIGINT", "FLOAT", "REAL", "NUMERIC", "CHAR", "VARCHAR", "LONGVARCHAR", "TIMESTAMP", "NCHAR", "NVARCHAR", "LONGNVARCHAR", "NULL", "OTHER", "JAVA_OBJECT", "DISTINCT", "STRUCT", "ARRAY", "CLOB", "REF", "DATALINK", "ROWID", "BINARY", "VARBINARY", "LONGVARBINARY", "NCLOB", "SQLXML", "REF_CURSOR", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE"]  # noqa: E501
        if jdbc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `jdbc_type` ({0}), must be one of {1}"
                .format(jdbc_type, allowed_values)
            )

        self._jdbc_type = jdbc_type

    @property
    def properties(self):
        """Gets the properties of this JsonSchema.

        The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property

        :return: The properties of this JsonSchema.
        :rtype: Dict[str, JsonSchema]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JsonSchema.

        The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property

        :param properties: The properties of this JsonSchema.
        :type properties: Dict[str, JsonSchema]
        """

        self._properties = properties

    @property
    def required(self):
        """Gets the required of this JsonSchema.

        Whether this property is required.

        :return: The required of this JsonSchema.
        :rtype: List[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this JsonSchema.

        Whether this property is required.

        :param required: The required of this JsonSchema.
        :type required: List[str]
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this JsonSchema.

        JSON Schema Validation: A Vocabulary for Structural Validation of JSON

        :return: The type of this JsonSchema.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JsonSchema.

        JSON Schema Validation: A Vocabulary for Structural Validation of JSON

        :param type: The type of this JsonSchema.
        :type type: List[str]
        """

        self._type = type
