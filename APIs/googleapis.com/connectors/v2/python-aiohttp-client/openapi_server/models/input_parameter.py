# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema import JsonSchema
from openapi_server import util


class InputParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_details: Dict[str, object]=None, data_type: str=None, default_value: object=None, description: str=None, json_schema: JsonSchema=None, name: str=None, nullable: bool=None):
        """InputParameter - a model defined in OpenAPI

        :param additional_details: The additional_details of this InputParameter.
        :param data_type: The data_type of this InputParameter.
        :param default_value: The default_value of this InputParameter.
        :param description: The description of this InputParameter.
        :param json_schema: The json_schema of this InputParameter.
        :param name: The name of this InputParameter.
        :param nullable: The nullable of this InputParameter.
        """
        self.openapi_types = {
            'additional_details': Dict[str, object],
            'data_type': str,
            'default_value': object,
            'description': str,
            'json_schema': JsonSchema,
            'name': str,
            'nullable': bool
        }

        self.attribute_map = {
            'additional_details': 'additionalDetails',
            'data_type': 'dataType',
            'default_value': 'defaultValue',
            'description': 'description',
            'json_schema': 'jsonSchema',
            'name': 'name',
            'nullable': 'nullable'
        }

        self._additional_details = additional_details
        self._data_type = data_type
        self._default_value = default_value
        self._description = description
        self._json_schema = json_schema
        self._name = name
        self._nullable = nullable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputParameter of this InputParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_details(self):
        """Gets the additional_details of this InputParameter.

        The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.

        :return: The additional_details of this InputParameter.
        :rtype: Dict[str, object]
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this InputParameter.

        The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.

        :param additional_details: The additional_details of this InputParameter.
        :type additional_details: Dict[str, object]
        """

        self._additional_details = additional_details

    @property
    def data_type(self):
        """Gets the data_type of this InputParameter.

        The data type of the Parameter

        :return: The data_type of this InputParameter.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this InputParameter.

        The data type of the Parameter

        :param data_type: The data_type of this InputParameter.
        :type data_type: str
        """
        allowed_values = ["DATA_TYPE_UNSPECIFIED", "INT", "SMALLINT", "DOUBLE", "DATE", "DATETIME", "TIME", "STRING", "LONG", "BOOLEAN", "DECIMAL", "UUID", "BLOB", "BIT", "TINYINT", "INTEGER", "BIGINT", "FLOAT", "REAL", "NUMERIC", "CHAR", "VARCHAR", "LONGVARCHAR", "TIMESTAMP", "NCHAR", "NVARCHAR", "LONGNVARCHAR", "NULL", "OTHER", "JAVA_OBJECT", "DISTINCT", "STRUCT", "ARRAY", "CLOB", "REF", "DATALINK", "ROWID", "BINARY", "VARBINARY", "LONGVARBINARY", "NCLOB", "SQLXML", "REF_CURSOR", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def default_value(self):
        """Gets the default_value of this InputParameter.

        The following field specifies the default value of the Parameter provided by the external system if a value is not provided.

        :return: The default_value of this InputParameter.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this InputParameter.

        The following field specifies the default value of the Parameter provided by the external system if a value is not provided.

        :param default_value: The default_value of this InputParameter.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this InputParameter.

        A brief description of the Parameter.

        :return: The description of this InputParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InputParameter.

        A brief description of the Parameter.

        :param description: The description of this InputParameter.
        :type description: str
        """

        self._description = description

    @property
    def json_schema(self):
        """Gets the json_schema of this InputParameter.


        :return: The json_schema of this InputParameter.
        :rtype: JsonSchema
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema):
        """Sets the json_schema of this InputParameter.


        :param json_schema: The json_schema of this InputParameter.
        :type json_schema: JsonSchema
        """

        self._json_schema = json_schema

    @property
    def name(self):
        """Gets the name of this InputParameter.

        Name of the Parameter.

        :return: The name of this InputParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InputParameter.

        Name of the Parameter.

        :param name: The name of this InputParameter.
        :type name: str
        """

        self._name = name

    @property
    def nullable(self):
        """Gets the nullable of this InputParameter.

        Specifies whether a null value is allowed.

        :return: The nullable of this InputParameter.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this InputParameter.

        Specifies whether a null value is allowed.

        :param nullable: The nullable of this InputParameter.
        :type nullable: bool
        """

        self._nullable = nullable
