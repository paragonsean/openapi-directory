# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: Dict[str, object]=None, name: str=None):
        """Entity - a model defined in OpenAPI

        :param fields: The fields of this Entity.
        :param name: The name of this Entity.
        """
        self.openapi_types = {
            'fields': Dict[str, object],
            'name': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'name': 'name'
        }

        self._fields = fields
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this Entity.

        Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.

        :return: The fields of this Entity.
        :rtype: Dict[str, object]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Entity.

        Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.

        :param fields: The fields of this Entity.
        :type fields: Dict[str, object]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this Entity.

        Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}

        :return: The name of this Entity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.

        Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}

        :param name: The name of this Entity.
        :type name: str
        """

        self._name = name
