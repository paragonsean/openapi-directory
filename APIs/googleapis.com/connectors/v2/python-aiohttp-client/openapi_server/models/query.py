# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_parameter import QueryParameter
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_rows: str=None, query: str=None, query_parameters: List[QueryParameter]=None, timeout: str=None):
        """Query - a model defined in OpenAPI

        :param max_rows: The max_rows of this Query.
        :param query: The query of this Query.
        :param query_parameters: The query_parameters of this Query.
        :param timeout: The timeout of this Query.
        """
        self.openapi_types = {
            'max_rows': str,
            'query': str,
            'query_parameters': List[QueryParameter],
            'timeout': str
        }

        self.attribute_map = {
            'max_rows': 'maxRows',
            'query': 'query',
            'query_parameters': 'queryParameters',
            'timeout': 'timeout'
        }

        self._max_rows = max_rows
        self._query = query
        self._query_parameters = query_parameters
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_rows(self):
        """Gets the max_rows of this Query.

        Sets the limit for the maximum number of rows returned after the query execution.

        :return: The max_rows of this Query.
        :rtype: str
        """
        return self._max_rows

    @max_rows.setter
    def max_rows(self, max_rows):
        """Sets the max_rows of this Query.

        Sets the limit for the maximum number of rows returned after the query execution.

        :param max_rows: The max_rows of this Query.
        :type max_rows: str
        """

        self._max_rows = max_rows

    @property
    def query(self):
        """Gets the query of this Query.

        Required. Sql query to execute.

        :return: The query of this Query.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Query.

        Required. Sql query to execute.

        :param query: The query of this Query.
        :type query: str
        """

        self._query = query

    @property
    def query_parameters(self):
        """Gets the query_parameters of this Query.

        In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.

        :return: The query_parameters of this Query.
        :rtype: List[QueryParameter]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this Query.

        In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.

        :param query_parameters: The query_parameters of this Query.
        :type query_parameters: List[QueryParameter]
        """

        self._query_parameters = query_parameters

    @property
    def timeout(self):
        """Gets the timeout of this Query.

        Sets the number of seconds the driver will wait for a query to execute.

        :return: The timeout of this Query.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Query.

        Sets the number of seconds the driver will wait for a query to execute.

        :param timeout: The timeout of this Query.
        :type timeout: str
        """

        self._timeout = timeout
