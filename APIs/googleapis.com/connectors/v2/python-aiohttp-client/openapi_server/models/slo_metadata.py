# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_slo_metadata import NodeSloMetadata
from openapi_server.models.per_sli_slo_eligibility import PerSliSloEligibility
from openapi_server import util


class SloMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[NodeSloMetadata]=None, per_sli_eligibility: PerSliSloEligibility=None, tier: str=None):
        """SloMetadata - a model defined in OpenAPI

        :param nodes: The nodes of this SloMetadata.
        :param per_sli_eligibility: The per_sli_eligibility of this SloMetadata.
        :param tier: The tier of this SloMetadata.
        """
        self.openapi_types = {
            'nodes': List[NodeSloMetadata],
            'per_sli_eligibility': PerSliSloEligibility,
            'tier': str
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'per_sli_eligibility': 'perSliEligibility',
            'tier': 'tier'
        }

        self._nodes = nodes
        self._per_sli_eligibility = per_sli_eligibility
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SloMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SloMetadata of this SloMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this SloMetadata.

        Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.

        :return: The nodes of this SloMetadata.
        :rtype: List[NodeSloMetadata]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this SloMetadata.

        Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.

        :param nodes: The nodes of this SloMetadata.
        :type nodes: List[NodeSloMetadata]
        """

        self._nodes = nodes

    @property
    def per_sli_eligibility(self):
        """Gets the per_sli_eligibility of this SloMetadata.


        :return: The per_sli_eligibility of this SloMetadata.
        :rtype: PerSliSloEligibility
        """
        return self._per_sli_eligibility

    @per_sli_eligibility.setter
    def per_sli_eligibility(self, per_sli_eligibility):
        """Sets the per_sli_eligibility of this SloMetadata.


        :param per_sli_eligibility: The per_sli_eligibility of this SloMetadata.
        :type per_sli_eligibility: PerSliSloEligibility
        """

        self._per_sli_eligibility = per_sli_eligibility

    @property
    def tier(self):
        """Gets the tier of this SloMetadata.

        Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.

        :return: The tier of this SloMetadata.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SloMetadata.

        Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.

        :param tier: The tier of this SloMetadata.
        :type tier: str
        """

        self._tier = tier
