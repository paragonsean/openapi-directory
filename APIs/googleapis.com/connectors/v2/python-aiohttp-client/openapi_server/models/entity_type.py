# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema import JsonSchema
from openapi_server.models.model_field import ModelField
from openapi_server import util


class EntityType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[ModelField]=None, json_schema: JsonSchema=None, name: str=None):
        """EntityType - a model defined in OpenAPI

        :param fields: The fields of this EntityType.
        :param json_schema: The json_schema of this EntityType.
        :param name: The name of this EntityType.
        """
        self.openapi_types = {
            'fields': List[ModelField],
            'json_schema': JsonSchema,
            'name': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'json_schema': 'jsonSchema',
            'name': 'name'
        }

        self._fields = fields
        self._json_schema = json_schema
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityType of this EntityType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this EntityType.

        List containing metadata information about each field of the entity type.

        :return: The fields of this EntityType.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EntityType.

        List containing metadata information about each field of the entity type.

        :param fields: The fields of this EntityType.
        :type fields: List[ModelField]
        """

        self._fields = fields

    @property
    def json_schema(self):
        """Gets the json_schema of this EntityType.


        :return: The json_schema of this EntityType.
        :rtype: JsonSchema
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema):
        """Sets the json_schema of this EntityType.


        :param json_schema: The json_schema of this EntityType.
        :type json_schema: JsonSchema
        """

        self._json_schema = json_schema

    @property
    def name(self):
        """Gets the name of this EntityType.

        The name of the entity type.

        :return: The name of this EntityType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityType.

        The name of the entity type.

        :param name: The name of this EntityType.
        :type name: str
        """

        self._name = name
