# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, value: object=None):
        """QueryParameter - a model defined in OpenAPI

        :param data_type: The data_type of this QueryParameter.
        :param value: The value of this QueryParameter.
        """
        self.openapi_types = {
            'data_type': str,
            'value': object
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'value': 'value'
        }

        self._data_type = data_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryParameter of this QueryParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this QueryParameter.


        :return: The data_type of this QueryParameter.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this QueryParameter.


        :param data_type: The data_type of this QueryParameter.
        :type data_type: str
        """
        allowed_values = ["DATA_TYPE_UNSPECIFIED", "INT", "SMALLINT", "DOUBLE", "DATE", "DATETIME", "TIME", "STRING", "LONG", "BOOLEAN", "DECIMAL", "UUID", "BLOB", "BIT", "TINYINT", "INTEGER", "BIGINT", "FLOAT", "REAL", "NUMERIC", "CHAR", "VARCHAR", "LONGVARCHAR", "TIMESTAMP", "NCHAR", "NVARCHAR", "LONGNVARCHAR", "NULL", "OTHER", "JAVA_OBJECT", "DISTINCT", "STRUCT", "ARRAY", "CLOB", "REF", "DATALINK", "ROWID", "BINARY", "VARBINARY", "LONGVARBINARY", "NCLOB", "SQLXML", "REF_CURSOR", "TIME_WITH_TIMEZONE", "TIMESTAMP_WITH_TIMEZONE"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def value(self):
        """Gets the value of this QueryParameter.


        :return: The value of this QueryParameter.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QueryParameter.


        :param value: The value of this QueryParameter.
        :type value: object
        """

        self._value = value
