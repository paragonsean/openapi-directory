# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.per_sli_slo_eligibility import PerSliSloEligibility
from openapi_server import util


class NodeSloMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, node_id: str=None, per_sli_eligibility: PerSliSloEligibility=None):
        """NodeSloMetadata - a model defined in OpenAPI

        :param location: The location of this NodeSloMetadata.
        :param node_id: The node_id of this NodeSloMetadata.
        :param per_sli_eligibility: The per_sli_eligibility of this NodeSloMetadata.
        """
        self.openapi_types = {
            'location': str,
            'node_id': str,
            'per_sli_eligibility': PerSliSloEligibility
        }

        self.attribute_map = {
            'location': 'location',
            'node_id': 'nodeId',
            'per_sli_eligibility': 'perSliEligibility'
        }

        self._location = location
        self._node_id = node_id
        self._per_sli_eligibility = per_sli_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeSloMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeSloMetadata of this NodeSloMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this NodeSloMetadata.

        The location of the node, if different from instance location.

        :return: The location of this NodeSloMetadata.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NodeSloMetadata.

        The location of the node, if different from instance location.

        :param location: The location of this NodeSloMetadata.
        :type location: str
        """

        self._location = location

    @property
    def node_id(self):
        """Gets the node_id of this NodeSloMetadata.

        The id of the node. This should be equal to SaasInstanceNode.node_id.

        :return: The node_id of this NodeSloMetadata.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeSloMetadata.

        The id of the node. This should be equal to SaasInstanceNode.node_id.

        :param node_id: The node_id of this NodeSloMetadata.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def per_sli_eligibility(self):
        """Gets the per_sli_eligibility of this NodeSloMetadata.


        :return: The per_sli_eligibility of this NodeSloMetadata.
        :rtype: PerSliSloEligibility
        """
        return self._per_sli_eligibility

    @per_sli_eligibility.setter
    def per_sli_eligibility(self, per_sli_eligibility):
        """Sets the per_sli_eligibility of this NodeSloMetadata.


        :param per_sli_eligibility: The per_sli_eligibility of this NodeSloMetadata.
        :type per_sli_eligibility: PerSliSloEligibility
        """

        self._per_sli_eligibility = per_sli_eligibility
