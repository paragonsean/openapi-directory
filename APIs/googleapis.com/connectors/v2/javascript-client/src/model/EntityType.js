/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Field from './Field';
import JsonSchema from './JsonSchema';

/**
 * The EntityType model module.
 * @module model/EntityType
 * @version v2
 */
class EntityType {
    /**
     * Constructs a new <code>EntityType</code>.
     * EntityType message contains metadata information about a single entity type present in the external system.
     * @alias module:model/EntityType
     */
    constructor() { 
        
        EntityType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityType} obj Optional instance to populate.
     * @return {module:model/EntityType} The populated <code>EntityType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityType();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('jsonSchema')) {
                obj['jsonSchema'] = JsonSchema.constructFromObject(data['jsonSchema']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityType</code>.
     */
    static validateJSON(data) {
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // validate the optional field `jsonSchema`
        if (data['jsonSchema']) { // data not null
          JsonSchema.validateJSON(data['jsonSchema']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * List containing metadata information about each field of the entity type.
 * @member {Array.<module:model/Field>} fields
 */
EntityType.prototype['fields'] = undefined;

/**
 * @member {module:model/JsonSchema} jsonSchema
 */
EntityType.prototype['jsonSchema'] = undefined;

/**
 * The name of the entity type.
 * @member {String} name
 */
EntityType.prototype['name'] = undefined;






export default EntityType;

