/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryParameter from './QueryParameter';

/**
 * The Query model module.
 * @module model/Query
 * @version v2
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * A wrapper around the SQL query statement. This is needed so that the JSON representation of ExecuteSqlQueryRequest has the following format: &#x60;{\&quot;query\&quot;:\&quot;select *\&quot;}&#x60;.
     * @alias module:model/Query
     */
    constructor() { 
        
        Query.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('maxRows')) {
                obj['maxRows'] = ApiClient.convertToType(data['maxRows'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('queryParameters')) {
                obj['queryParameters'] = ApiClient.convertToType(data['queryParameters'], [QueryParameter]);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maxRows'] && !(typeof data['maxRows'] === 'string' || data['maxRows'] instanceof String)) {
            throw new Error("Expected the field `maxRows` to be a primitive type in the JSON string but got " + data['maxRows']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        if (data['queryParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryParameters'])) {
                throw new Error("Expected the field `queryParameters` to be an array in the JSON data but got " + data['queryParameters']);
            }
            // validate the optional field `queryParameters` (array)
            for (const item of data['queryParameters']) {
                QueryParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}



/**
 * Sets the limit for the maximum number of rows returned after the query execution.
 * @member {String} maxRows
 */
Query.prototype['maxRows'] = undefined;

/**
 * Required. Sql query to execute.
 * @member {String} query
 */
Query.prototype['query'] = undefined;

/**
 * In the struct, the value corresponds to the value of query parameter and date type corresponds to the date type of the query parameter.
 * @member {Array.<module:model/QueryParameter>} queryParameters
 */
Query.prototype['queryParameters'] = undefined;

/**
 * Sets the number of seconds the driver will wait for a query to execute.
 * @member {String} timeout
 */
Query.prototype['timeout'] = undefined;






export default Query;

