/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeSloMetadata from './NodeSloMetadata';
import PerSliSloEligibility from './PerSliSloEligibility';

/**
 * The SloMetadata model module.
 * @module model/SloMetadata
 * @version v2
 */
class SloMetadata {
    /**
     * Constructs a new <code>SloMetadata</code>.
     * SloMetadata contains resources required for proper SLO classification of the instance.
     * @alias module:model/SloMetadata
     */
    constructor() { 
        
        SloMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SloMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SloMetadata} obj Optional instance to populate.
     * @return {module:model/SloMetadata} The populated <code>SloMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SloMetadata();

            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], [NodeSloMetadata]);
            }
            if (data.hasOwnProperty('perSliEligibility')) {
                obj['perSliEligibility'] = PerSliSloEligibility.constructFromObject(data['perSliEligibility']);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SloMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SloMetadata</code>.
     */
    static validateJSON(data) {
        if (data['nodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodes'])) {
                throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
            }
            // validate the optional field `nodes` (array)
            for (const item of data['nodes']) {
                NodeSloMetadata.validateJSON(item);
            };
        }
        // validate the optional field `perSliEligibility`
        if (data['perSliEligibility']) { // data not null
          PerSliSloEligibility.validateJSON(data['perSliEligibility']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.
 * @member {Array.<module:model/NodeSloMetadata>} nodes
 */
SloMetadata.prototype['nodes'] = undefined;

/**
 * @member {module:model/PerSliSloEligibility} perSliEligibility
 */
SloMetadata.prototype['perSliEligibility'] = undefined;

/**
 * Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.
 * @member {String} tier
 */
SloMetadata.prototype['tier'] = undefined;






export default SloMetadata;

