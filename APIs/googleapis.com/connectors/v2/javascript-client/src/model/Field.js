/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonSchema from './JsonSchema';
import Reference from './Reference';

/**
 * The Field model module.
 * @module model/Field
 * @version v2
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * Message contains EntityType&#39;s Field metadata.
     * @alias module:model/Field
     */
    constructor() { 
        
        Field.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('additionalDetails')) {
                obj['additionalDetails'] = ApiClient.convertToType(data['additionalDetails'], {'String': Object});
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('jsonSchema')) {
                obj['jsonSchema'] = JsonSchema.constructFromObject(data['jsonSchema']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = Reference.constructFromObject(data['reference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `jsonSchema`
        if (data['jsonSchema']) { // data not null
          JsonSchema.validateJSON(data['jsonSchema']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          Reference.validateJSON(data['reference']);
        }

        return true;
    }


}



/**
 * The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.
 * @member {Object.<String, Object>} additionalDetails
 */
Field.prototype['additionalDetails'] = undefined;

/**
 * The data type of the Field.
 * @member {module:model/Field.DataTypeEnum} dataType
 */
Field.prototype['dataType'] = undefined;

/**
 * The following field specifies the default value of the Field provided by the external system if a value is not provided.
 * @member {Object} defaultValue
 */
Field.prototype['defaultValue'] = undefined;

/**
 * A brief description of the Field.
 * @member {String} description
 */
Field.prototype['description'] = undefined;

/**
 * @member {module:model/JsonSchema} jsonSchema
 */
Field.prototype['jsonSchema'] = undefined;

/**
 * The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.
 * @member {Boolean} key
 */
Field.prototype['key'] = undefined;

/**
 * Name of the Field.
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * Specifies whether a null value is allowed.
 * @member {Boolean} nullable
 */
Field.prototype['nullable'] = undefined;

/**
 * @member {module:model/Reference} reference
 */
Field.prototype['reference'] = undefined;





/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
Field['DataTypeEnum'] = {

    /**
     * value: "DATA_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_TYPE_UNSPECIFIED": "DATA_TYPE_UNSPECIFIED",

    /**
     * value: "INT"
     * @const
     */
    "INT": "INT",

    /**
     * value: "SMALLINT"
     * @const
     */
    "SMALLINT": "SMALLINT",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "DATETIME"
     * @const
     */
    "DATETIME": "DATETIME",

    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "LONG"
     * @const
     */
    "LONG": "LONG",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "DECIMAL"
     * @const
     */
    "DECIMAL": "DECIMAL",

    /**
     * value: "UUID"
     * @const
     */
    "UUID": "UUID",

    /**
     * value: "BLOB"
     * @const
     */
    "BLOB": "BLOB",

    /**
     * value: "BIT"
     * @const
     */
    "BIT": "BIT",

    /**
     * value: "TINYINT"
     * @const
     */
    "TINYINT": "TINYINT",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "BIGINT"
     * @const
     */
    "BIGINT": "BIGINT",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "REAL"
     * @const
     */
    "REAL": "REAL",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "CHAR"
     * @const
     */
    "CHAR": "CHAR",

    /**
     * value: "VARCHAR"
     * @const
     */
    "VARCHAR": "VARCHAR",

    /**
     * value: "LONGVARCHAR"
     * @const
     */
    "LONGVARCHAR": "LONGVARCHAR",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "NCHAR"
     * @const
     */
    "NCHAR": "NCHAR",

    /**
     * value: "NVARCHAR"
     * @const
     */
    "NVARCHAR": "NVARCHAR",

    /**
     * value: "LONGNVARCHAR"
     * @const
     */
    "LONGNVARCHAR": "LONGNVARCHAR",

    /**
     * value: "NULL"
     * @const
     */
    "NULL": "NULL",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "JAVA_OBJECT"
     * @const
     */
    "JAVA_OBJECT": "JAVA_OBJECT",

    /**
     * value: "DISTINCT"
     * @const
     */
    "DISTINCT": "DISTINCT",

    /**
     * value: "STRUCT"
     * @const
     */
    "STRUCT": "STRUCT",

    /**
     * value: "ARRAY"
     * @const
     */
    "ARRAY": "ARRAY",

    /**
     * value: "CLOB"
     * @const
     */
    "CLOB": "CLOB",

    /**
     * value: "REF"
     * @const
     */
    "REF": "REF",

    /**
     * value: "DATALINK"
     * @const
     */
    "DATALINK": "DATALINK",

    /**
     * value: "ROWID"
     * @const
     */
    "ROWID": "ROWID",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY",

    /**
     * value: "VARBINARY"
     * @const
     */
    "VARBINARY": "VARBINARY",

    /**
     * value: "LONGVARBINARY"
     * @const
     */
    "LONGVARBINARY": "LONGVARBINARY",

    /**
     * value: "NCLOB"
     * @const
     */
    "NCLOB": "NCLOB",

    /**
     * value: "SQLXML"
     * @const
     */
    "SQLXML": "SQLXML",

    /**
     * value: "REF_CURSOR"
     * @const
     */
    "REF_CURSOR": "REF_CURSOR",

    /**
     * value: "TIME_WITH_TIMEZONE"
     * @const
     */
    "TIME_WITH_TIMEZONE": "TIME_WITH_TIMEZONE",

    /**
     * value: "TIMESTAMP_WITH_TIMEZONE"
     * @const
     */
    "TIMESTAMP_WITH_TIMEZONE": "TIMESTAMP_WITH_TIMEZONE"
};



export default Field;

