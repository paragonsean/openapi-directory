/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JsonSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result Metadata message contains metadata about the result returned after executing an Action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:46.233352-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultMetadata {
  /**
   * The data type of the metadata field
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    DATA_TYPE_UNSPECIFIED("DATA_TYPE_UNSPECIFIED"),
    
    INT("INT"),
    
    SMALLINT("SMALLINT"),
    
    DOUBLE("DOUBLE"),
    
    DATE("DATE"),
    
    DATETIME("DATETIME"),
    
    TIME("TIME"),
    
    STRING("STRING"),
    
    LONG("LONG"),
    
    BOOLEAN("BOOLEAN"),
    
    DECIMAL("DECIMAL"),
    
    UUID("UUID"),
    
    BLOB("BLOB"),
    
    BIT("BIT"),
    
    TINYINT("TINYINT"),
    
    INTEGER("INTEGER"),
    
    BIGINT("BIGINT"),
    
    FLOAT("FLOAT"),
    
    REAL("REAL"),
    
    NUMERIC("NUMERIC"),
    
    CHAR("CHAR"),
    
    VARCHAR("VARCHAR"),
    
    LONGVARCHAR("LONGVARCHAR"),
    
    TIMESTAMP("TIMESTAMP"),
    
    NCHAR("NCHAR"),
    
    NVARCHAR("NVARCHAR"),
    
    LONGNVARCHAR("LONGNVARCHAR"),
    
    NULL("NULL"),
    
    OTHER("OTHER"),
    
    JAVA_OBJECT("JAVA_OBJECT"),
    
    DISTINCT("DISTINCT"),
    
    STRUCT("STRUCT"),
    
    ARRAY("ARRAY"),
    
    CLOB("CLOB"),
    
    REF("REF"),
    
    DATALINK("DATALINK"),
    
    ROWID("ROWID"),
    
    BINARY("BINARY"),
    
    VARBINARY("VARBINARY"),
    
    LONGVARBINARY("LONGVARBINARY"),
    
    NCLOB("NCLOB"),
    
    SQLXML("SQLXML"),
    
    REF_CURSOR("REF_CURSOR"),
    
    TIME_WITH_TIMEZONE("TIME_WITH_TIMEZONE"),
    
    TIMESTAMP_WITH_TIMEZONE("TIMESTAMP_WITH_TIMEZONE");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JSON_SCHEMA = "jsonSchema";
  @SerializedName(SERIALIZED_NAME_JSON_SCHEMA)
  private JsonSchema jsonSchema;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ResultMetadata() {
  }

  public ResultMetadata dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * The data type of the metadata field
   * @return dataType
   */
  @javax.annotation.Nullable
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public ResultMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description of the metadata field.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ResultMetadata jsonSchema(JsonSchema jsonSchema) {
    this.jsonSchema = jsonSchema;
    return this;
  }

  /**
   * Get jsonSchema
   * @return jsonSchema
   */
  @javax.annotation.Nullable
  public JsonSchema getJsonSchema() {
    return jsonSchema;
  }

  public void setJsonSchema(JsonSchema jsonSchema) {
    this.jsonSchema = jsonSchema;
  }


  public ResultMetadata name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the metadata field.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultMetadata resultMetadata = (ResultMetadata) o;
    return Objects.equals(this.dataType, resultMetadata.dataType) &&
        Objects.equals(this.description, resultMetadata.description) &&
        Objects.equals(this.jsonSchema, resultMetadata.jsonSchema) &&
        Objects.equals(this.name, resultMetadata.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, description, jsonSchema, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultMetadata {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jsonSchema: ").append(toIndentedString(jsonSchema)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataType");
    openapiFields.add("description");
    openapiFields.add("jsonSchema");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultMetadata is not found in the empty JSON string", ResultMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        DataTypeEnum.validateJsonElement(jsonObj.get("dataType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `jsonSchema`
      if (jsonObj.get("jsonSchema") != null && !jsonObj.get("jsonSchema").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("jsonSchema"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultMetadata>() {
           @Override
           public void write(JsonWriter out, ResultMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultMetadata
   * @throws IOException if the JSON string is invalid with respect to ResultMetadata
   */
  public static ResultMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultMetadata.class);
  }

  /**
   * Convert an instance of ResultMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

