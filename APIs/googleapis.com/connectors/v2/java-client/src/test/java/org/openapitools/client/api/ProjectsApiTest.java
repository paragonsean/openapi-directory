/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckReadinessResponse;
import org.openapitools.client.model.CheckStatusResponse;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.ExchangeAuthCodeResponse;
import org.openapitools.client.model.ExecuteActionRequest;
import org.openapitools.client.model.ExecuteActionResponse;
import org.openapitools.client.model.ExecuteSqlQueryRequest;
import org.openapitools.client.model.ExecuteSqlQueryResponse;
import org.openapitools.client.model.ListActionsResponse;
import org.openapitools.client.model.ListEntitiesResponse;
import org.openapitools.client.model.ListEntityTypesResponse;
import org.openapitools.client.model.RefreshAccessTokenResponse;
import org.openapitools.client.model.UpdateEntitiesWithConditionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsActionsExecuteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExecuteActionRequest executeActionRequest = null;
        ExecuteActionResponse response = api.connectorsProjectsLocationsConnectionsActionsExecute(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, executeActionRequest);
        // TODO: test validations
    }

    /**
     * Gets the schema of all the actions supported by the connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsActionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListActionsResponse response = api.connectorsProjectsLocationsConnectionsActionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Reports readiness status of the connector. Similar logic to GetStatus but modified for kubernetes health check to understand.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsCheckReadinessTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CheckReadinessResponse response = api.connectorsProjectsLocationsConnectionsCheckReadiness(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Reports the status of the connection. Note that when the connection is in a state that is not ACTIVE, the implementation of this RPC method must return a Status with the corresponding State instead of returning a gRPC status code that is not \&quot;OK\&quot;, which indicates that ConnectionStatus itself, not the connection, failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsCheckStatusTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CheckStatusResponse response = api.connectorsProjectsLocationsConnectionsCheckStatus(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a &#x60;Entity&#x60; message object returned as a response by the external system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Entity entity = null;
        Entity response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, entity);
        // TODO: test validations
    }

    /**
     * Deletes an existing entity row matching the entity type and entity id specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes entities based on conditions specified in the request and not on entity id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsTest() throws ApiException {
        String entityType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String conditions = null;
        Object response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditions(entityType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conditions);
        // TODO: test validations
    }

    /**
     * Gets a single entity row matching the entity type and entity id specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Entity response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one &#39;sort_by&#39; column is supported. 2. If no &#39;sort_by&#39; column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the &#39;sort_by&#39; columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String conditions = null;
        Integer pageSize = null;
        String pageToken = null;
        List<String> sortBy = null;
        ListEntitiesResponse response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conditions, pageSize, pageToken, sortBy);
        // TODO: test validations
    }

    /**
     * Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a &#x60;Entity&#x60; message object returned as a response by the external system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Entity entity = null;
        Entity response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, entity);
        // TODO: test validations
    }

    /**
     * Updates entities based on conditions specified in the request and not on entity id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsTest() throws ApiException {
        String entityType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String conditions = null;
        Entity entity = null;
        UpdateEntitiesWithConditionsResponse response = api.connectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditions(entityType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conditions, entity);
        // TODO: test validations
    }

    /**
     * Lists metadata related to all entity types present in the external system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEntityTypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListEntityTypesResponse response = api.connectorsProjectsLocationsConnectionsEntityTypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * ExchangeAuthCode exchanges the OAuth authorization code (and other necessary data) for an access token (and associated credentials).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsExchangeAuthCodeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ExchangeAuthCodeResponse response = api.connectorsProjectsLocationsConnectionsExchangeAuthCode(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be &#39;select * from Account a, Order o where a.Id &#x3D; o.AccountId&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsExecuteSqlQueryTest() throws ApiException {
        String connection = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExecuteSqlQueryRequest executeSqlQueryRequest = null;
        ExecuteSqlQueryResponse response = api.connectorsProjectsLocationsConnectionsExecuteSqlQuery(connection, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, executeSqlQueryRequest);
        // TODO: test validations
    }

    /**
     * RefreshAccessToken exchanges the OAuth refresh token (and other necessary data) for a new access token (and new associated credentials).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsRefreshAccessTokenTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        RefreshAccessTokenResponse response = api.connectorsProjectsLocationsConnectionsRefreshAccessToken(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
