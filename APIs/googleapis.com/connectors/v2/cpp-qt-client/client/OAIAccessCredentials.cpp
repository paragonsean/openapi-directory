/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessCredentials::OAIAccessCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessCredentials::OAIAccessCredentials() {
    this->initializeModel();
}

OAIAccessCredentials::~OAIAccessCredentials() {}

void OAIAccessCredentials::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIAccessCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessCredentials::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAIAccessCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAIAccessCredentials::getAccessToken() const {
    return m_access_token;
}
void OAIAccessCredentials::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAccessCredentials::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAccessCredentials::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIAccessCredentials::getExpiresIn() const {
    return m_expires_in;
}
void OAIAccessCredentials::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIAccessCredentials::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIAccessCredentials::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIAccessCredentials::getRefreshToken() const {
    return m_refresh_token;
}
void OAIAccessCredentials::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIAccessCredentials::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIAccessCredentials::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIAccessCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
