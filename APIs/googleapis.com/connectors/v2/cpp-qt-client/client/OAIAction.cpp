/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_input_json_schema_isSet = false;
    m_input_json_schema_isValid = false;

    m_input_parameters_isSet = false;
    m_input_parameters_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_result_json_schema_isSet = false;
    m_result_json_schema_isValid = false;

    m_result_metadata_isSet = false;
    m_result_metadata_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_input_json_schema_isValid = ::OpenAPI::fromJsonValue(m_input_json_schema, json[QString("inputJsonSchema")]);
    m_input_json_schema_isSet = !json[QString("inputJsonSchema")].isNull() && m_input_json_schema_isValid;

    m_input_parameters_isValid = ::OpenAPI::fromJsonValue(m_input_parameters, json[QString("inputParameters")]);
    m_input_parameters_isSet = !json[QString("inputParameters")].isNull() && m_input_parameters_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_result_json_schema_isValid = ::OpenAPI::fromJsonValue(m_result_json_schema, json[QString("resultJsonSchema")]);
    m_result_json_schema_isSet = !json[QString("resultJsonSchema")].isNull() && m_result_json_schema_isValid;

    m_result_metadata_isValid = ::OpenAPI::fromJsonValue(m_result_metadata, json[QString("resultMetadata")]);
    m_result_metadata_isSet = !json[QString("resultMetadata")].isNull() && m_result_metadata_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_input_json_schema.isSet()) {
        obj.insert(QString("inputJsonSchema"), ::OpenAPI::toJsonValue(m_input_json_schema));
    }
    if (m_input_parameters.size() > 0) {
        obj.insert(QString("inputParameters"), ::OpenAPI::toJsonValue(m_input_parameters));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_result_json_schema.isSet()) {
        obj.insert(QString("resultJsonSchema"), ::OpenAPI::toJsonValue(m_result_json_schema));
    }
    if (m_result_metadata.size() > 0) {
        obj.insert(QString("resultMetadata"), ::OpenAPI::toJsonValue(m_result_metadata));
    }
    return obj;
}

QString OAIAction::getDescription() const {
    return m_description;
}
void OAIAction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAction::getDisplayName() const {
    return m_display_name;
}
void OAIAction::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAction::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAction::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIJsonSchema OAIAction::getInputJsonSchema() const {
    return m_input_json_schema;
}
void OAIAction::setInputJsonSchema(const OAIJsonSchema &input_json_schema) {
    m_input_json_schema = input_json_schema;
    m_input_json_schema_isSet = true;
}

bool OAIAction::is_input_json_schema_Set() const{
    return m_input_json_schema_isSet;
}

bool OAIAction::is_input_json_schema_Valid() const{
    return m_input_json_schema_isValid;
}

QList<OAIInputParameter> OAIAction::getInputParameters() const {
    return m_input_parameters;
}
void OAIAction::setInputParameters(const QList<OAIInputParameter> &input_parameters) {
    m_input_parameters = input_parameters;
    m_input_parameters_isSet = true;
}

bool OAIAction::is_input_parameters_Set() const{
    return m_input_parameters_isSet;
}

bool OAIAction::is_input_parameters_Valid() const{
    return m_input_parameters_isValid;
}

QString OAIAction::getName() const {
    return m_name;
}
void OAIAction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAction::is_name_Valid() const{
    return m_name_isValid;
}

OAIJsonSchema OAIAction::getResultJsonSchema() const {
    return m_result_json_schema;
}
void OAIAction::setResultJsonSchema(const OAIJsonSchema &result_json_schema) {
    m_result_json_schema = result_json_schema;
    m_result_json_schema_isSet = true;
}

bool OAIAction::is_result_json_schema_Set() const{
    return m_result_json_schema_isSet;
}

bool OAIAction::is_result_json_schema_Valid() const{
    return m_result_json_schema_isValid;
}

QList<OAIResultMetadata> OAIAction::getResultMetadata() const {
    return m_result_metadata;
}
void OAIAction::setResultMetadata(const QList<OAIResultMetadata> &result_metadata) {
    m_result_metadata = result_metadata;
    m_result_metadata_isSet = true;
}

bool OAIAction::is_result_metadata_Set() const{
    return m_result_metadata_isSet;
}

bool OAIAction::is_result_metadata_Valid() const{
    return m_result_metadata_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_json_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_json_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
