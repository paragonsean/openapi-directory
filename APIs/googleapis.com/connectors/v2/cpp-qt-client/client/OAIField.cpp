/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_additional_details_isSet = false;
    m_additional_details_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_json_schema_isSet = false;
    m_json_schema_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_additional_details_isValid = ::OpenAPI::fromJsonValue(m_additional_details, json[QString("additionalDetails")]);
    m_additional_details_isSet = !json[QString("additionalDetails")].isNull() && m_additional_details_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_json_schema_isValid = ::OpenAPI::fromJsonValue(m_json_schema, json[QString("jsonSchema")]);
    m_json_schema_isSet = !json[QString("jsonSchema")].isNull() && m_json_schema_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_details.size() > 0) {
        obj.insert(QString("additionalDetails"), ::OpenAPI::toJsonValue(m_additional_details));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_json_schema.isSet()) {
        obj.insert(QString("jsonSchema"), ::OpenAPI::toJsonValue(m_json_schema));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIField::getAdditionalDetails() const {
    return m_additional_details;
}
void OAIField::setAdditionalDetails(const QMap<QString, QJsonValue> &additional_details) {
    m_additional_details = additional_details;
    m_additional_details_isSet = true;
}

bool OAIField::is_additional_details_Set() const{
    return m_additional_details_isSet;
}

bool OAIField::is_additional_details_Valid() const{
    return m_additional_details_isValid;
}

QString OAIField::getDataType() const {
    return m_data_type;
}
void OAIField::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIField::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIField::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QJsonValue OAIField::getDefaultValue() const {
    return m_default_value;
}
void OAIField::setDefaultValue(const QJsonValue &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIField::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIField::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIField::getDescription() const {
    return m_description;
}
void OAIField::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIField::is_description_Set() const{
    return m_description_isSet;
}

bool OAIField::is_description_Valid() const{
    return m_description_isValid;
}

OAIJsonSchema OAIField::getJsonSchema() const {
    return m_json_schema;
}
void OAIField::setJsonSchema(const OAIJsonSchema &json_schema) {
    m_json_schema = json_schema;
    m_json_schema_isSet = true;
}

bool OAIField::is_json_schema_Set() const{
    return m_json_schema_isSet;
}

bool OAIField::is_json_schema_Valid() const{
    return m_json_schema_isValid;
}

bool OAIField::isKey() const {
    return m_key;
}
void OAIField::setKey(const bool &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIField::is_key_Set() const{
    return m_key_isSet;
}

bool OAIField::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIField::getName() const {
    return m_name;
}
void OAIField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIField::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIField::isNullable() const {
    return m_nullable;
}
void OAIField::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIField::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIField::is_nullable_Valid() const{
    return m_nullable_isValid;
}

OAIReference OAIField::getReference() const {
    return m_reference;
}
void OAIField::setReference(const OAIReference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIField::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIField::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
