/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEntityTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEntityTypesResponse::OAIListEntityTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEntityTypesResponse::OAIListEntityTypesResponse() {
    this->initializeModel();
}

OAIListEntityTypesResponse::~OAIListEntityTypesResponse() {}

void OAIListEntityTypesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_unsupported_type_names_isSet = false;
    m_unsupported_type_names_isValid = false;
}

void OAIListEntityTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEntityTypesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_unsupported_type_names_isValid = ::OpenAPI::fromJsonValue(m_unsupported_type_names, json[QString("unsupportedTypeNames")]);
    m_unsupported_type_names_isSet = !json[QString("unsupportedTypeNames")].isNull() && m_unsupported_type_names_isValid;
}

QString OAIListEntityTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEntityTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_unsupported_type_names.size() > 0) {
        obj.insert(QString("unsupportedTypeNames"), ::OpenAPI::toJsonValue(m_unsupported_type_names));
    }
    return obj;
}

QString OAIListEntityTypesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListEntityTypesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListEntityTypesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListEntityTypesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIEntityType> OAIListEntityTypesResponse::getTypes() const {
    return m_types;
}
void OAIListEntityTypesResponse::setTypes(const QList<OAIEntityType> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIListEntityTypesResponse::is_types_Set() const{
    return m_types_isSet;
}

bool OAIListEntityTypesResponse::is_types_Valid() const{
    return m_types_isValid;
}

QList<QString> OAIListEntityTypesResponse::getUnsupportedTypeNames() const {
    return m_unsupported_type_names;
}
void OAIListEntityTypesResponse::setUnsupportedTypeNames(const QList<QString> &unsupported_type_names) {
    m_unsupported_type_names = unsupported_type_names;
    m_unsupported_type_names_isSet = true;
}

bool OAIListEntityTypesResponse::is_unsupported_type_names_Set() const{
    return m_unsupported_type_names_isSet;
}

bool OAIListEntityTypesResponse::is_unsupported_type_names_Valid() const{
    return m_unsupported_type_names_isValid;
}

bool OAIListEntityTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_type_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEntityTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
