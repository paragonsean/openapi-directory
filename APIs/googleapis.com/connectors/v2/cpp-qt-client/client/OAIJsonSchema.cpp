/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonSchema::OAIJsonSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonSchema::OAIJsonSchema() {
    this->initializeModel();
}

OAIJsonSchema::~OAIJsonSchema() {}

void OAIJsonSchema::initializeModel() {

    m_additional_details_isSet = false;
    m_additional_details_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_enum_isSet = false;
    m_r_enum_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_jdbc_type_isSet = false;
    m_jdbc_type_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJsonSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonSchema::fromJsonObject(QJsonObject json) {

    m_additional_details_isValid = ::OpenAPI::fromJsonValue(m_additional_details, json[QString("additionalDetails")]);
    m_additional_details_isSet = !json[QString("additionalDetails")].isNull() && m_additional_details_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_enum_isValid = ::OpenAPI::fromJsonValue(m_r_enum, json[QString("enum")]);
    m_r_enum_isSet = !json[QString("enum")].isNull() && m_r_enum_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_jdbc_type_isValid = ::OpenAPI::fromJsonValue(m_jdbc_type, json[QString("jdbcType")]);
    m_jdbc_type_isSet = !json[QString("jdbcType")].isNull() && m_jdbc_type_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJsonSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_details.size() > 0) {
        obj.insert(QString("additionalDetails"), ::OpenAPI::toJsonValue(m_additional_details));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_enum.size() > 0) {
        obj.insert(QString("enum"), ::OpenAPI::toJsonValue(m_r_enum));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_jdbc_type_isSet) {
        obj.insert(QString("jdbcType"), ::OpenAPI::toJsonValue(m_jdbc_type));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIJsonSchema::getAdditionalDetails() const {
    return m_additional_details;
}
void OAIJsonSchema::setAdditionalDetails(const QMap<QString, QJsonValue> &additional_details) {
    m_additional_details = additional_details;
    m_additional_details_isSet = true;
}

bool OAIJsonSchema::is_additional_details_Set() const{
    return m_additional_details_isSet;
}

bool OAIJsonSchema::is_additional_details_Valid() const{
    return m_additional_details_isValid;
}

QString OAIJsonSchema::getDescription() const {
    return m_description;
}
void OAIJsonSchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJsonSchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJsonSchema::is_description_Valid() const{
    return m_description_isValid;
}

QList<QJsonValue> OAIJsonSchema::getREnum() const {
    return m_r_enum;
}
void OAIJsonSchema::setREnum(const QList<QJsonValue> &r_enum) {
    m_r_enum = r_enum;
    m_r_enum_isSet = true;
}

bool OAIJsonSchema::is_r_enum_Set() const{
    return m_r_enum_isSet;
}

bool OAIJsonSchema::is_r_enum_Valid() const{
    return m_r_enum_isValid;
}

QString OAIJsonSchema::getFormat() const {
    return m_format;
}
void OAIJsonSchema::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIJsonSchema::is_format_Set() const{
    return m_format_isSet;
}

bool OAIJsonSchema::is_format_Valid() const{
    return m_format_isValid;
}

OAIJsonSchema OAIJsonSchema::getItems() const {
    return m_items;
}
void OAIJsonSchema::setItems(const OAIJsonSchema &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIJsonSchema::is_items_Set() const{
    return m_items_isSet;
}

bool OAIJsonSchema::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIJsonSchema::getJdbcType() const {
    return m_jdbc_type;
}
void OAIJsonSchema::setJdbcType(const QString &jdbc_type) {
    m_jdbc_type = jdbc_type;
    m_jdbc_type_isSet = true;
}

bool OAIJsonSchema::is_jdbc_type_Set() const{
    return m_jdbc_type_isSet;
}

bool OAIJsonSchema::is_jdbc_type_Valid() const{
    return m_jdbc_type_isValid;
}

QMap<QString, OAIJsonSchema> OAIJsonSchema::getProperties() const {
    return m_properties;
}
void OAIJsonSchema::setProperties(const QMap<QString, OAIJsonSchema> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIJsonSchema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIJsonSchema::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QString> OAIJsonSchema::getRequired() const {
    return m_required;
}
void OAIJsonSchema::setRequired(const QList<QString> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIJsonSchema::is_required_Set() const{
    return m_required_isSet;
}

bool OAIJsonSchema::is_required_Valid() const{
    return m_required_isValid;
}

QList<QString> OAIJsonSchema::getType() const {
    return m_type;
}
void OAIJsonSchema::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJsonSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJsonSchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJsonSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_enum.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jdbc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
