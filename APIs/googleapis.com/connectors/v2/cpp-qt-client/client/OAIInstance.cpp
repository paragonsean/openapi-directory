/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_consumer_defined_name_isSet = false;
    m_consumer_defined_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_maintenance_policy_names_isSet = false;
    m_maintenance_policy_names_isValid = false;

    m_maintenance_schedules_isSet = false;
    m_maintenance_schedules_isValid = false;

    m_maintenance_settings_isSet = false;
    m_maintenance_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_parameters_isSet = false;
    m_notification_parameters_isValid = false;

    m_producer_metadata_isSet = false;
    m_producer_metadata_isValid = false;

    m_provisioned_resources_isSet = false;
    m_provisioned_resources_isValid = false;

    m_slm_instance_template_isSet = false;
    m_slm_instance_template_isValid = false;

    m_slo_metadata_isSet = false;
    m_slo_metadata_isValid = false;

    m_software_versions_isSet = false;
    m_software_versions_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenant_project_id_isSet = false;
    m_tenant_project_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_consumer_defined_name_isValid = ::OpenAPI::fromJsonValue(m_consumer_defined_name, json[QString("consumerDefinedName")]);
    m_consumer_defined_name_isSet = !json[QString("consumerDefinedName")].isNull() && m_consumer_defined_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_maintenance_policy_names_isValid = ::OpenAPI::fromJsonValue(m_maintenance_policy_names, json[QString("maintenancePolicyNames")]);
    m_maintenance_policy_names_isSet = !json[QString("maintenancePolicyNames")].isNull() && m_maintenance_policy_names_isValid;

    m_maintenance_schedules_isValid = ::OpenAPI::fromJsonValue(m_maintenance_schedules, json[QString("maintenanceSchedules")]);
    m_maintenance_schedules_isSet = !json[QString("maintenanceSchedules")].isNull() && m_maintenance_schedules_isValid;

    m_maintenance_settings_isValid = ::OpenAPI::fromJsonValue(m_maintenance_settings, json[QString("maintenanceSettings")]);
    m_maintenance_settings_isSet = !json[QString("maintenanceSettings")].isNull() && m_maintenance_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_parameters_isValid = ::OpenAPI::fromJsonValue(m_notification_parameters, json[QString("notificationParameters")]);
    m_notification_parameters_isSet = !json[QString("notificationParameters")].isNull() && m_notification_parameters_isValid;

    m_producer_metadata_isValid = ::OpenAPI::fromJsonValue(m_producer_metadata, json[QString("producerMetadata")]);
    m_producer_metadata_isSet = !json[QString("producerMetadata")].isNull() && m_producer_metadata_isValid;

    m_provisioned_resources_isValid = ::OpenAPI::fromJsonValue(m_provisioned_resources, json[QString("provisionedResources")]);
    m_provisioned_resources_isSet = !json[QString("provisionedResources")].isNull() && m_provisioned_resources_isValid;

    m_slm_instance_template_isValid = ::OpenAPI::fromJsonValue(m_slm_instance_template, json[QString("slmInstanceTemplate")]);
    m_slm_instance_template_isSet = !json[QString("slmInstanceTemplate")].isNull() && m_slm_instance_template_isValid;

    m_slo_metadata_isValid = ::OpenAPI::fromJsonValue(m_slo_metadata, json[QString("sloMetadata")]);
    m_slo_metadata_isSet = !json[QString("sloMetadata")].isNull() && m_slo_metadata_isValid;

    m_software_versions_isValid = ::OpenAPI::fromJsonValue(m_software_versions, json[QString("softwareVersions")]);
    m_software_versions_isSet = !json[QString("softwareVersions")].isNull() && m_software_versions_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tenant_project_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_project_id, json[QString("tenantProjectId")]);
    m_tenant_project_id_isSet = !json[QString("tenantProjectId")].isNull() && m_tenant_project_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_defined_name_isSet) {
        obj.insert(QString("consumerDefinedName"), ::OpenAPI::toJsonValue(m_consumer_defined_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_maintenance_policy_names.size() > 0) {
        obj.insert(QString("maintenancePolicyNames"), ::OpenAPI::toJsonValue(m_maintenance_policy_names));
    }
    if (m_maintenance_schedules.size() > 0) {
        obj.insert(QString("maintenanceSchedules"), ::OpenAPI::toJsonValue(m_maintenance_schedules));
    }
    if (m_maintenance_settings.isSet()) {
        obj.insert(QString("maintenanceSettings"), ::OpenAPI::toJsonValue(m_maintenance_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_parameters.size() > 0) {
        obj.insert(QString("notificationParameters"), ::OpenAPI::toJsonValue(m_notification_parameters));
    }
    if (m_producer_metadata.size() > 0) {
        obj.insert(QString("producerMetadata"), ::OpenAPI::toJsonValue(m_producer_metadata));
    }
    if (m_provisioned_resources.size() > 0) {
        obj.insert(QString("provisionedResources"), ::OpenAPI::toJsonValue(m_provisioned_resources));
    }
    if (m_slm_instance_template_isSet) {
        obj.insert(QString("slmInstanceTemplate"), ::OpenAPI::toJsonValue(m_slm_instance_template));
    }
    if (m_slo_metadata.isSet()) {
        obj.insert(QString("sloMetadata"), ::OpenAPI::toJsonValue(m_slo_metadata));
    }
    if (m_software_versions.size() > 0) {
        obj.insert(QString("softwareVersions"), ::OpenAPI::toJsonValue(m_software_versions));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenant_project_id_isSet) {
        obj.insert(QString("tenantProjectId"), ::OpenAPI::toJsonValue(m_tenant_project_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIInstance::getConsumerDefinedName() const {
    return m_consumer_defined_name;
}
void OAIInstance::setConsumerDefinedName(const QString &consumer_defined_name) {
    m_consumer_defined_name = consumer_defined_name;
    m_consumer_defined_name_isSet = true;
}

bool OAIInstance::is_consumer_defined_name_Set() const{
    return m_consumer_defined_name_isSet;
}

bool OAIInstance::is_consumer_defined_name_Valid() const{
    return m_consumer_defined_name_isValid;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInstance::getInstanceType() const {
    return m_instance_type;
}
void OAIInstance::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QMap<QString, QString> OAIInstance::getLabels() const {
    return m_labels;
}
void OAIInstance::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

QMap<QString, QString> OAIInstance::getMaintenancePolicyNames() const {
    return m_maintenance_policy_names;
}
void OAIInstance::setMaintenancePolicyNames(const QMap<QString, QString> &maintenance_policy_names) {
    m_maintenance_policy_names = maintenance_policy_names;
    m_maintenance_policy_names_isSet = true;
}

bool OAIInstance::is_maintenance_policy_names_Set() const{
    return m_maintenance_policy_names_isSet;
}

bool OAIInstance::is_maintenance_policy_names_Valid() const{
    return m_maintenance_policy_names_isValid;
}

QMap<QString, OAIMaintenanceSchedule> OAIInstance::getMaintenanceSchedules() const {
    return m_maintenance_schedules;
}
void OAIInstance::setMaintenanceSchedules(const QMap<QString, OAIMaintenanceSchedule> &maintenance_schedules) {
    m_maintenance_schedules = maintenance_schedules;
    m_maintenance_schedules_isSet = true;
}

bool OAIInstance::is_maintenance_schedules_Set() const{
    return m_maintenance_schedules_isSet;
}

bool OAIInstance::is_maintenance_schedules_Valid() const{
    return m_maintenance_schedules_isValid;
}

OAIMaintenanceSettings OAIInstance::getMaintenanceSettings() const {
    return m_maintenance_settings;
}
void OAIInstance::setMaintenanceSettings(const OAIMaintenanceSettings &maintenance_settings) {
    m_maintenance_settings = maintenance_settings;
    m_maintenance_settings_isSet = true;
}

bool OAIInstance::is_maintenance_settings_Set() const{
    return m_maintenance_settings_isSet;
}

bool OAIInstance::is_maintenance_settings_Valid() const{
    return m_maintenance_settings_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAINotificationParameter> OAIInstance::getNotificationParameters() const {
    return m_notification_parameters;
}
void OAIInstance::setNotificationParameters(const QMap<QString, OAINotificationParameter> &notification_parameters) {
    m_notification_parameters = notification_parameters;
    m_notification_parameters_isSet = true;
}

bool OAIInstance::is_notification_parameters_Set() const{
    return m_notification_parameters_isSet;
}

bool OAIInstance::is_notification_parameters_Valid() const{
    return m_notification_parameters_isValid;
}

QMap<QString, QString> OAIInstance::getProducerMetadata() const {
    return m_producer_metadata;
}
void OAIInstance::setProducerMetadata(const QMap<QString, QString> &producer_metadata) {
    m_producer_metadata = producer_metadata;
    m_producer_metadata_isSet = true;
}

bool OAIInstance::is_producer_metadata_Set() const{
    return m_producer_metadata_isSet;
}

bool OAIInstance::is_producer_metadata_Valid() const{
    return m_producer_metadata_isValid;
}

QList<OAIProvisionedResource> OAIInstance::getProvisionedResources() const {
    return m_provisioned_resources;
}
void OAIInstance::setProvisionedResources(const QList<OAIProvisionedResource> &provisioned_resources) {
    m_provisioned_resources = provisioned_resources;
    m_provisioned_resources_isSet = true;
}

bool OAIInstance::is_provisioned_resources_Set() const{
    return m_provisioned_resources_isSet;
}

bool OAIInstance::is_provisioned_resources_Valid() const{
    return m_provisioned_resources_isValid;
}

QString OAIInstance::getSlmInstanceTemplate() const {
    return m_slm_instance_template;
}
void OAIInstance::setSlmInstanceTemplate(const QString &slm_instance_template) {
    m_slm_instance_template = slm_instance_template;
    m_slm_instance_template_isSet = true;
}

bool OAIInstance::is_slm_instance_template_Set() const{
    return m_slm_instance_template_isSet;
}

bool OAIInstance::is_slm_instance_template_Valid() const{
    return m_slm_instance_template_isValid;
}

OAISloMetadata OAIInstance::getSloMetadata() const {
    return m_slo_metadata;
}
void OAIInstance::setSloMetadata(const OAISloMetadata &slo_metadata) {
    m_slo_metadata = slo_metadata;
    m_slo_metadata_isSet = true;
}

bool OAIInstance::is_slo_metadata_Set() const{
    return m_slo_metadata_isSet;
}

bool OAIInstance::is_slo_metadata_Valid() const{
    return m_slo_metadata_isValid;
}

QMap<QString, QString> OAIInstance::getSoftwareVersions() const {
    return m_software_versions;
}
void OAIInstance::setSoftwareVersions(const QMap<QString, QString> &software_versions) {
    m_software_versions = software_versions;
    m_software_versions_isSet = true;
}

bool OAIInstance::is_software_versions_Set() const{
    return m_software_versions_isSet;
}

bool OAIInstance::is_software_versions_Valid() const{
    return m_software_versions_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getTenantProjectId() const {
    return m_tenant_project_id;
}
void OAIInstance::setTenantProjectId(const QString &tenant_project_id) {
    m_tenant_project_id = tenant_project_id;
    m_tenant_project_id_isSet = true;
}

bool OAIInstance::is_tenant_project_id_Set() const{
    return m_tenant_project_id_isSet;
}

bool OAIInstance::is_tenant_project_id_Valid() const{
    return m_tenant_project_id_isValid;
}

QString OAIInstance::getUpdateTime() const {
    return m_update_time;
}
void OAIInstance::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInstance::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInstance::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_defined_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_policy_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slm_instance_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slo_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
