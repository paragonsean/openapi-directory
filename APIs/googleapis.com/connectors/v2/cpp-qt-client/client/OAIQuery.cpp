/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_max_rows_isSet = false;
    m_max_rows_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_max_rows_isValid = ::OpenAPI::fromJsonValue(m_max_rows, json[QString("maxRows")]);
    m_max_rows_isSet = !json[QString("maxRows")].isNull() && m_max_rows_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_max_rows_isSet) {
        obj.insert(QString("maxRows"), ::OpenAPI::toJsonValue(m_max_rows));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_parameters.size() > 0) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIQuery::getMaxRows() const {
    return m_max_rows;
}
void OAIQuery::setMaxRows(const QString &max_rows) {
    m_max_rows = max_rows;
    m_max_rows_isSet = true;
}

bool OAIQuery::is_max_rows_Set() const{
    return m_max_rows_isSet;
}

bool OAIQuery::is_max_rows_Valid() const{
    return m_max_rows_isValid;
}

QString OAIQuery::getQuery() const {
    return m_query;
}
void OAIQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQuery::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIQueryParameter> OAIQuery::getQueryParameters() const {
    return m_query_parameters;
}
void OAIQuery::setQueryParameters(const QList<OAIQueryParameter> &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIQuery::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIQuery::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QString OAIQuery::getTimeout() const {
    return m_timeout;
}
void OAIQuery::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIQuery::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIQuery::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
