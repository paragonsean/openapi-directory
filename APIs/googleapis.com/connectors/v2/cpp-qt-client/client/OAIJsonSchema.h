/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJsonSchema.h
 *
 * JsonSchema representation of schema metadata
 */

#ifndef OAIJsonSchema_H
#define OAIJsonSchema_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJsonSchema : public OAIObject {
public:
    OAIJsonSchema();
    OAIJsonSchema(QString json);
    ~OAIJsonSchema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getAdditionalDetails() const;
    void setAdditionalDetails(const QMap<QString, QJsonValue> &additional_details);
    bool is_additional_details_Set() const;
    bool is_additional_details_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QJsonValue> getREnum() const;
    void setREnum(const QList<QJsonValue> &r_enum);
    bool is_r_enum_Set() const;
    bool is_r_enum_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    OAIJsonSchema getItems() const;
    void setItems(const OAIJsonSchema &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getJdbcType() const;
    void setJdbcType(const QString &jdbc_type);
    bool is_jdbc_type_Set() const;
    bool is_jdbc_type_Valid() const;

    QMap<QString, OAIJsonSchema> getProperties() const;
    void setProperties(const QMap<QString, OAIJsonSchema> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QList<QString> getRequired() const;
    void setRequired(const QList<QString> &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    QList<QString> getType() const;
    void setType(const QList<QString> &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_additional_details;
    bool m_additional_details_isSet;
    bool m_additional_details_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QJsonValue> m_r_enum;
    bool m_r_enum_isSet;
    bool m_r_enum_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    OAIJsonSchema m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_jdbc_type;
    bool m_jdbc_type_isSet;
    bool m_jdbc_type_isValid;

    QMap<QString, OAIJsonSchema> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QList<QString> m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    QList<QString> m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJsonSchema)

#endif // OAIJsonSchema_H
