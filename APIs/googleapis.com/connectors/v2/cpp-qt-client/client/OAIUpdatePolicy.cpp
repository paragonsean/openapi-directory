/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePolicy::OAIUpdatePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePolicy::OAIUpdatePolicy() {
    this->initializeModel();
}

OAIUpdatePolicy::~OAIUpdatePolicy() {}

void OAIUpdatePolicy::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_deny_maintenance_periods_isSet = false;
    m_deny_maintenance_periods_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAIUpdatePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePolicy::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_deny_maintenance_periods_isValid = ::OpenAPI::fromJsonValue(m_deny_maintenance_periods, json[QString("denyMaintenancePeriods")]);
    m_deny_maintenance_periods_isSet = !json[QString("denyMaintenancePeriods")].isNull() && m_deny_maintenance_periods_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAIUpdatePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_deny_maintenance_periods.size() > 0) {
        obj.insert(QString("denyMaintenancePeriods"), ::OpenAPI::toJsonValue(m_deny_maintenance_periods));
    }
    if (m_window.isSet()) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

QString OAIUpdatePolicy::getChannel() const {
    return m_channel;
}
void OAIUpdatePolicy::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIUpdatePolicy::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIUpdatePolicy::is_channel_Valid() const{
    return m_channel_isValid;
}

QList<OAIDenyMaintenancePeriod> OAIUpdatePolicy::getDenyMaintenancePeriods() const {
    return m_deny_maintenance_periods;
}
void OAIUpdatePolicy::setDenyMaintenancePeriods(const QList<OAIDenyMaintenancePeriod> &deny_maintenance_periods) {
    m_deny_maintenance_periods = deny_maintenance_periods;
    m_deny_maintenance_periods_isSet = true;
}

bool OAIUpdatePolicy::is_deny_maintenance_periods_Set() const{
    return m_deny_maintenance_periods_isSet;
}

bool OAIUpdatePolicy::is_deny_maintenance_periods_Valid() const{
    return m_deny_maintenance_periods_isValid;
}

OAIMaintenanceWindow OAIUpdatePolicy::getWindow() const {
    return m_window;
}
void OAIUpdatePolicy::setWindow(const OAIMaintenanceWindow &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAIUpdatePolicy::is_window_Set() const{
    return m_window_isSet;
}

bool OAIUpdatePolicy::is_window_Valid() const{
    return m_window_isValid;
}

bool OAIUpdatePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_maintenance_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
