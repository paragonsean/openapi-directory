/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkConfig model module.
 * @module model/NetworkConfig
 * @version v1
 */
class NetworkConfig {
    /**
     * Constructs a new <code>NetworkConfig</code>.
     * Regional Network Config.
     * @alias module:model/NetworkConfig
     */
    constructor() { 
        
        NetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfig} obj Optional instance to populate.
     * @return {module:model/NetworkConfig} The populated <code>NetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfig();

            if (data.hasOwnProperty('egressIps')) {
                obj['egressIps'] = ApiClient.convertToType(data['egressIps'], ['String']);
            }
            if (data.hasOwnProperty('egressMode')) {
                obj['egressMode'] = ApiClient.convertToType(data['egressMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['egressIps'])) {
            throw new Error("Expected the field `egressIps` to be an array in the JSON data but got " + data['egressIps']);
        }
        // ensure the json data is a string
        if (data['egressMode'] && !(typeof data['egressMode'] === 'string' || data['egressMode'] instanceof String)) {
            throw new Error("Expected the field `egressMode` to be a primitive type in the JSON string but got " + data['egressMode']);
        }

        return true;
    }


}



/**
 * Output only. Egress IPs
 * @member {Array.<String>} egressIps
 */
NetworkConfig.prototype['egressIps'] = undefined;

/**
 * Optional. Egress mode for the network.
 * @member {module:model/NetworkConfig.EgressModeEnum} egressMode
 */
NetworkConfig.prototype['egressMode'] = undefined;





/**
 * Allowed values for the <code>egressMode</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['EgressModeEnum'] = {

    /**
     * value: "NETWORK_EGRESS_MODE_UNSPECIFIED"
     * @const
     */
    "NETWORK_EGRESS_MODE_UNSPECIFIED": "NETWORK_EGRESS_MODE_UNSPECIFIED",

    /**
     * value: "AUTO_IP"
     * @const
     */
    "AUTO_IP": "AUTO_IP",

    /**
     * value: "STATIC_IP"
     * @const
     */
    "STATIC_IP": "STATIC_IP"
};



export default NetworkConfig;

