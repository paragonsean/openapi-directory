/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EncryptionKey model module.
 * @module model/EncryptionKey
 * @version v1
 */
class EncryptionKey {
    /**
     * Constructs a new <code>EncryptionKey</code>.
     * Encryption Key value.
     * @alias module:model/EncryptionKey
     */
    constructor() { 
        
        EncryptionKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptionKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionKey} obj Optional instance to populate.
     * @return {module:model/EncryptionKey} The populated <code>EncryptionKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionKey();

            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/_*_/locations/_*_/keyRings/_*_/cryptoKeys/_*`. Will be empty string if google managed.
 * @member {String} kmsKeyName
 */
EncryptionKey.prototype['kmsKeyName'] = undefined;

/**
 * Type.
 * @member {module:model/EncryptionKey.TypeEnum} type
 */
EncryptionKey.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EncryptionKey['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "GOOGLE_MANAGED"
     * @const
     */
    "GOOGLE_MANAGED": "GOOGLE_MANAGED",

    /**
     * value: "CUSTOMER_MANAGED"
     * @const
     */
    "CUSTOMER_MANAGED": "CUSTOMER_MANAGED"
};



export default EncryptionKey;

