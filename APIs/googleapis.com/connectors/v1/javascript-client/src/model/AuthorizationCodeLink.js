/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthorizationCodeLink model module.
 * @module model/AuthorizationCodeLink
 * @version v1
 */
class AuthorizationCodeLink {
    /**
     * Constructs a new <code>AuthorizationCodeLink</code>.
     * This configuration captures the details required to render an authorization link for the OAuth Authorization Code Flow.
     * @alias module:model/AuthorizationCodeLink
     */
    constructor() { 
        
        AuthorizationCodeLink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizationCodeLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizationCodeLink} obj Optional instance to populate.
     * @return {module:model/AuthorizationCodeLink} The populated <code>AuthorizationCodeLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizationCodeLink();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('enablePkce')) {
                obj['enablePkce'] = ApiClient.convertToType(data['enablePkce'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthorizationCodeLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthorizationCodeLink</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The client ID assigned to the Google Cloud Connectors OAuth app for the connector data source.
 * @member {String} clientId
 */
AuthorizationCodeLink.prototype['clientId'] = undefined;

/**
 * Whether to enable PKCE for the auth code flow.
 * @member {Boolean} enablePkce
 */
AuthorizationCodeLink.prototype['enablePkce'] = undefined;

/**
 * The scopes for which the user will authorize Google Cloud Connectors on the connector data source.
 * @member {Array.<String>} scopes
 */
AuthorizationCodeLink.prototype['scopes'] = undefined;

/**
 * The base URI the user must click to trigger the authorization code login flow.
 * @member {String} uri
 */
AuthorizationCodeLink.prototype['uri'] = undefined;






export default AuthorizationCodeLink;

