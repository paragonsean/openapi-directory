/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigVariableTemplate from './ConfigVariableTemplate';

/**
 * The SslConfigTemplate model module.
 * @module model/SslConfigTemplate
 * @version v1
 */
class SslConfigTemplate {
    /**
     * Constructs a new <code>SslConfigTemplate</code>.
     * Ssl config details of a connector version
     * @alias module:model/SslConfigTemplate
     */
    constructor() { 
        
        SslConfigTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SslConfigTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SslConfigTemplate} obj Optional instance to populate.
     * @return {module:model/SslConfigTemplate} The populated <code>SslConfigTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SslConfigTemplate();

            if (data.hasOwnProperty('additionalVariables')) {
                obj['additionalVariables'] = ApiClient.convertToType(data['additionalVariables'], [ConfigVariableTemplate]);
            }
            if (data.hasOwnProperty('clientCertType')) {
                obj['clientCertType'] = ApiClient.convertToType(data['clientCertType'], ['String']);
            }
            if (data.hasOwnProperty('isTlsMandatory')) {
                obj['isTlsMandatory'] = ApiClient.convertToType(data['isTlsMandatory'], 'Boolean');
            }
            if (data.hasOwnProperty('serverCertType')) {
                obj['serverCertType'] = ApiClient.convertToType(data['serverCertType'], ['String']);
            }
            if (data.hasOwnProperty('sslType')) {
                obj['sslType'] = ApiClient.convertToType(data['sslType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SslConfigTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SslConfigTemplate</code>.
     */
    static validateJSON(data) {
        if (data['additionalVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalVariables'])) {
                throw new Error("Expected the field `additionalVariables` to be an array in the JSON data but got " + data['additionalVariables']);
            }
            // validate the optional field `additionalVariables` (array)
            for (const item of data['additionalVariables']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clientCertType'])) {
            throw new Error("Expected the field `clientCertType` to be an array in the JSON data but got " + data['clientCertType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serverCertType'])) {
            throw new Error("Expected the field `serverCertType` to be an array in the JSON data but got " + data['serverCertType']);
        }
        // ensure the json data is a string
        if (data['sslType'] && !(typeof data['sslType'] === 'string' || data['sslType'] instanceof String)) {
            throw new Error("Expected the field `sslType` to be a primitive type in the JSON string but got " + data['sslType']);
        }

        return true;
    }


}



/**
 * Any additional fields that need to be rendered
 * @member {Array.<module:model/ConfigVariableTemplate>} additionalVariables
 */
SslConfigTemplate.prototype['additionalVariables'] = undefined;

/**
 * List of supported Client Cert Types
 * @member {Array.<module:model/SslConfigTemplate.ClientCertTypeEnum>} clientCertType
 */
SslConfigTemplate.prototype['clientCertType'] = undefined;

/**
 * Boolean for determining if the connector version mandates TLS.
 * @member {Boolean} isTlsMandatory
 */
SslConfigTemplate.prototype['isTlsMandatory'] = undefined;

/**
 * List of supported Server Cert Types
 * @member {Array.<module:model/SslConfigTemplate.ServerCertTypeEnum>} serverCertType
 */
SslConfigTemplate.prototype['serverCertType'] = undefined;

/**
 * Controls the ssl type for the given connector version
 * @member {module:model/SslConfigTemplate.SslTypeEnum} sslType
 */
SslConfigTemplate.prototype['sslType'] = undefined;





/**
 * Allowed values for the <code>clientCertType</code> property.
 * @enum {String}
 * @readonly
 */
SslConfigTemplate['ClientCertTypeEnum'] = {

    /**
     * value: "CERT_TYPE_UNSPECIFIED"
     * @const
     */
    "CERT_TYPE_UNSPECIFIED": "CERT_TYPE_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM"
};


/**
 * Allowed values for the <code>serverCertType</code> property.
 * @enum {String}
 * @readonly
 */
SslConfigTemplate['ServerCertTypeEnum'] = {

    /**
     * value: "CERT_TYPE_UNSPECIFIED"
     * @const
     */
    "CERT_TYPE_UNSPECIFIED": "CERT_TYPE_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM"
};


/**
 * Allowed values for the <code>sslType</code> property.
 * @enum {String}
 * @readonly
 */
SslConfigTemplate['SslTypeEnum'] = {

    /**
     * value: "SSL_TYPE_UNSPECIFIED"
     * @const
     */
    "SSL_TYPE_UNSPECIFIED": "SSL_TYPE_UNSPECIFIED",

    /**
     * value: "TLS"
     * @const
     */
    "TLS": "TLS",

    /**
     * value: "MTLS"
     * @const
     */
    "MTLS": "MTLS"
};



export default SslConfigTemplate;

