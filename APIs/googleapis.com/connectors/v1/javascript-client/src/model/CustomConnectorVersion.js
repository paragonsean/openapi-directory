/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthConfig from './AuthConfig';
import ConfigVariableTemplate from './ConfigVariableTemplate';
import DestinationConfig from './DestinationConfig';

/**
 * The CustomConnectorVersion model module.
 * @module model/CustomConnectorVersion
 * @version v1
 */
class CustomConnectorVersion {
    /**
     * Constructs a new <code>CustomConnectorVersion</code>.
     * CustomConnectorVersion indicates a specific version of a connector.
     * @alias module:model/CustomConnectorVersion
     */
    constructor() { 
        
        CustomConnectorVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomConnectorVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomConnectorVersion} obj Optional instance to populate.
     * @return {module:model/CustomConnectorVersion} The populated <code>CustomConnectorVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomConnectorVersion();

            if (data.hasOwnProperty('authConfig')) {
                obj['authConfig'] = AuthConfig.constructFromObject(data['authConfig']);
            }
            if (data.hasOwnProperty('backendVariableTemplates')) {
                obj['backendVariableTemplates'] = ApiClient.convertToType(data['backendVariableTemplates'], [ConfigVariableTemplate]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('destinationConfigs')) {
                obj['destinationConfigs'] = ApiClient.convertToType(data['destinationConfigs'], [DestinationConfig]);
            }
            if (data.hasOwnProperty('enableBackendDestinationConfig')) {
                obj['enableBackendDestinationConfig'] = ApiClient.convertToType(data['enableBackendDestinationConfig'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('specLocation')) {
                obj['specLocation'] = ApiClient.convertToType(data['specLocation'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomConnectorVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomConnectorVersion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authConfig`
        if (data['authConfig']) { // data not null
          AuthConfig.validateJSON(data['authConfig']);
        }
        if (data['backendVariableTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backendVariableTemplates'])) {
                throw new Error("Expected the field `backendVariableTemplates` to be an array in the JSON data but got " + data['backendVariableTemplates']);
            }
            // validate the optional field `backendVariableTemplates` (array)
            for (const item of data['backendVariableTemplates']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        if (data['destinationConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinationConfigs'])) {
                throw new Error("Expected the field `destinationConfigs` to be an array in the JSON data but got " + data['destinationConfigs']);
            }
            // validate the optional field `destinationConfigs` (array)
            for (const item of data['destinationConfigs']) {
                DestinationConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['specLocation'] && !(typeof data['specLocation'] === 'string' || data['specLocation'] instanceof String)) {
            throw new Error("Expected the field `specLocation` to be a primitive type in the JSON string but got " + data['specLocation']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthConfig} authConfig
 */
CustomConnectorVersion.prototype['authConfig'] = undefined;

/**
 * Optional. Backend variables config templates. This translates to additional variable templates in connection.
 * @member {Array.<module:model/ConfigVariableTemplate>} backendVariableTemplates
 */
CustomConnectorVersion.prototype['backendVariableTemplates'] = undefined;

/**
 * Output only. Created time.
 * @member {String} createTime
 */
CustomConnectorVersion.prototype['createTime'] = undefined;

/**
 * Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.
 * @member {Array.<module:model/DestinationConfig>} destinationConfigs
 */
CustomConnectorVersion.prototype['destinationConfigs'] = undefined;

/**
 * Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.
 * @member {Boolean} enableBackendDestinationConfig
 */
CustomConnectorVersion.prototype['enableBackendDestinationConfig'] = undefined;

/**
 * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
 * @member {Object.<String, String>} labels
 */
CustomConnectorVersion.prototype['labels'] = undefined;

/**
 * Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}
 * @member {String} name
 */
CustomConnectorVersion.prototype['name'] = undefined;

/**
 * Optional. Service account used by runtime plane to access auth config secrets.
 * @member {String} serviceAccount
 */
CustomConnectorVersion.prototype['serviceAccount'] = undefined;

/**
 * Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`
 * @member {String} specLocation
 */
CustomConnectorVersion.prototype['specLocation'] = undefined;

/**
 * Output only. State of the custom connector version.
 * @member {module:model/CustomConnectorVersion.StateEnum} state
 */
CustomConnectorVersion.prototype['state'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
CustomConnectorVersion.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CustomConnectorVersion['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED"
};



export default CustomConnectorVersion;

