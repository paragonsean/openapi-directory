/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventType model module.
 * @module model/EventType
 * @version v1
 */
class EventType {
    /**
     * Constructs a new <code>EventType</code>.
     * EventType includes fields.
     * @alias module:model/EventType
     */
    constructor() { 
        
        EventType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventType} obj Optional instance to populate.
     * @return {module:model/EventType} The populated <code>EventType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventType();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('enrichedEventPayloadSchema')) {
                obj['enrichedEventPayloadSchema'] = ApiClient.convertToType(data['enrichedEventPayloadSchema'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('eventPayloadSchema')) {
                obj['eventPayloadSchema'] = ApiClient.convertToType(data['eventPayloadSchema'], 'String');
            }
            if (data.hasOwnProperty('eventTypeId')) {
                obj['eventTypeId'] = ApiClient.convertToType(data['eventTypeId'], 'String');
            }
            if (data.hasOwnProperty('idPath')) {
                obj['idPath'] = ApiClient.convertToType(data['idPath'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['enrichedEventPayloadSchema'] && !(typeof data['enrichedEventPayloadSchema'] === 'string' || data['enrichedEventPayloadSchema'] instanceof String)) {
            throw new Error("Expected the field `enrichedEventPayloadSchema` to be a primitive type in the JSON string but got " + data['enrichedEventPayloadSchema']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['eventPayloadSchema'] && !(typeof data['eventPayloadSchema'] === 'string' || data['eventPayloadSchema'] instanceof String)) {
            throw new Error("Expected the field `eventPayloadSchema` to be a primitive type in the JSON string but got " + data['eventPayloadSchema']);
        }
        // ensure the json data is a string
        if (data['eventTypeId'] && !(typeof data['eventTypeId'] === 'string' || data['eventTypeId'] instanceof String)) {
            throw new Error("Expected the field `eventTypeId` to be a primitive type in the JSON string but got " + data['eventTypeId']);
        }
        // ensure the json data is a string
        if (data['idPath'] && !(typeof data['idPath'] === 'string' || data['idPath'] instanceof String)) {
            throw new Error("Expected the field `idPath` to be a primitive type in the JSON string but got " + data['idPath']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Created time.
 * @member {String} createTime
 */
EventType.prototype['createTime'] = undefined;

/**
 * Output only. Schema of the event payload after enriched. Will be null if read before send is not supported.
 * @member {String} enrichedEventPayloadSchema
 */
EventType.prototype['enrichedEventPayloadSchema'] = undefined;

/**
 * Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature.
 * @member {String} entityType
 */
EventType.prototype['entityType'] = undefined;

/**
 * Output only. Schema of webhook event payload.
 * @member {String} eventPayloadSchema
 */
EventType.prototype['eventPayloadSchema'] = undefined;

/**
 * Output only. Event type id. Example: `ticket.created`.
 * @member {String} eventTypeId
 */
EventType.prototype['eventTypeId'] = undefined;

/**
 * Output only. Id path denotes the path of id in webhook payload.
 * @member {String} idPath
 */
EventType.prototype['idPath'] = undefined;

/**
 * Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype} Only global location is supported for Connector resource.
 * @member {String} name
 */
EventType.prototype['name'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
EventType.prototype['updateTime'] = undefined;






export default EventType;

