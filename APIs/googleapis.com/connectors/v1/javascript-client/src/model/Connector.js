/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventingDetails from './EventingDetails';

/**
 * The Connector model module.
 * @module model/Connector
 * @version v1
 */
class Connector {
    /**
     * Constructs a new <code>Connector</code>.
     * Connectors indicates a specific connector type, e.x. Salesforce, SAP etc.
     * @alias module:model/Connector
     */
    constructor() { 
        
        Connector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connector} obj Optional instance to populate.
     * @return {module:model/Connector} The populated <code>Connector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connector();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('documentationUri')) {
                obj['documentationUri'] = ApiClient.convertToType(data['documentationUri'], 'String');
            }
            if (data.hasOwnProperty('eventingDetails')) {
                obj['eventingDetails'] = EventingDetails.constructFromObject(data['eventingDetails']);
            }
            if (data.hasOwnProperty('externalUri')) {
                obj['externalUri'] = ApiClient.convertToType(data['externalUri'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('launchStage')) {
                obj['launchStage'] = ApiClient.convertToType(data['launchStage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('webAssetsLocation')) {
                obj['webAssetsLocation'] = ApiClient.convertToType(data['webAssetsLocation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['documentationUri'] && !(typeof data['documentationUri'] === 'string' || data['documentationUri'] instanceof String)) {
            throw new Error("Expected the field `documentationUri` to be a primitive type in the JSON string but got " + data['documentationUri']);
        }
        // validate the optional field `eventingDetails`
        if (data['eventingDetails']) { // data not null
          EventingDetails.validateJSON(data['eventingDetails']);
        }
        // ensure the json data is a string
        if (data['externalUri'] && !(typeof data['externalUri'] === 'string' || data['externalUri'] instanceof String)) {
            throw new Error("Expected the field `externalUri` to be a primitive type in the JSON string but got " + data['externalUri']);
        }
        // ensure the json data is a string
        if (data['launchStage'] && !(typeof data['launchStage'] === 'string' || data['launchStage'] instanceof String)) {
            throw new Error("Expected the field `launchStage` to be a primitive type in the JSON string but got " + data['launchStage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['webAssetsLocation'] && !(typeof data['webAssetsLocation'] === 'string' || data['webAssetsLocation'] instanceof String)) {
            throw new Error("Expected the field `webAssetsLocation` to be a primitive type in the JSON string but got " + data['webAssetsLocation']);
        }

        return true;
    }


}



/**
 * Output only. Created time.
 * @member {String} createTime
 */
Connector.prototype['createTime'] = undefined;

/**
 * Output only. Description of the resource.
 * @member {String} description
 */
Connector.prototype['description'] = undefined;

/**
 * Output only. Display name.
 * @member {String} displayName
 */
Connector.prototype['displayName'] = undefined;

/**
 * Output only. Link to documentation page.
 * @member {String} documentationUri
 */
Connector.prototype['documentationUri'] = undefined;

/**
 * @member {module:model/EventingDetails} eventingDetails
 */
Connector.prototype['eventingDetails'] = undefined;

/**
 * Output only. Link to external page.
 * @member {String} externalUri
 */
Connector.prototype['externalUri'] = undefined;

/**
 * Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
 * @member {Object.<String, String>} labels
 */
Connector.prototype['labels'] = undefined;

/**
 * Output only. Flag to mark the version indicating the launch stage.
 * @member {module:model/Connector.LaunchStageEnum} launchStage
 */
Connector.prototype['launchStage'] = undefined;

/**
 * Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for Connector resource.
 * @member {String} name
 */
Connector.prototype['name'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
Connector.prototype['updateTime'] = undefined;

/**
 * Output only. Cloud storage location of icons etc consumed by UI.
 * @member {String} webAssetsLocation
 */
Connector.prototype['webAssetsLocation'] = undefined;





/**
 * Allowed values for the <code>launchStage</code> property.
 * @enum {String}
 * @readonly
 */
Connector['LaunchStageEnum'] = {

    /**
     * value: "LAUNCH_STAGE_UNSPECIFIED"
     * @const
     */
    "LAUNCH_STAGE_UNSPECIFIED": "LAUNCH_STAGE_UNSPECIFIED",

    /**
     * value: "PREVIEW"
     * @const
     */
    "PREVIEW": "PREVIEW",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED",

    /**
     * value: "PRIVATE_PREVIEW"
     * @const
     */
    "PRIVATE_PREVIEW": "PRIVATE_PREVIEW"
};



export default Connector;

