/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventingStatus from './EventingStatus';

/**
 * The EventingRuntimeData model module.
 * @module model/EventingRuntimeData
 * @version v1
 */
class EventingRuntimeData {
    /**
     * Constructs a new <code>EventingRuntimeData</code>.
     * Eventing runtime data has the details related to eventing managed by the system.
     * @alias module:model/EventingRuntimeData
     */
    constructor() { 
        
        EventingRuntimeData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventingRuntimeData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventingRuntimeData} obj Optional instance to populate.
     * @return {module:model/EventingRuntimeData} The populated <code>EventingRuntimeData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventingRuntimeData();

            if (data.hasOwnProperty('eventsListenerEndpoint')) {
                obj['eventsListenerEndpoint'] = ApiClient.convertToType(data['eventsListenerEndpoint'], 'String');
            }
            if (data.hasOwnProperty('eventsListenerPscSa')) {
                obj['eventsListenerPscSa'] = ApiClient.convertToType(data['eventsListenerPscSa'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EventingStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventingRuntimeData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventingRuntimeData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventsListenerEndpoint'] && !(typeof data['eventsListenerEndpoint'] === 'string' || data['eventsListenerEndpoint'] instanceof String)) {
            throw new Error("Expected the field `eventsListenerEndpoint` to be a primitive type in the JSON string but got " + data['eventsListenerEndpoint']);
        }
        // ensure the json data is a string
        if (data['eventsListenerPscSa'] && !(typeof data['eventsListenerPscSa'] === 'string' || data['eventsListenerPscSa'] instanceof String)) {
            throw new Error("Expected the field `eventsListenerPscSa` to be a primitive type in the JSON string but got " + data['eventsListenerPscSa']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          EventingStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * Output only. Events listener endpoint. The value will populated after provisioning the events listener.
 * @member {String} eventsListenerEndpoint
 */
EventingRuntimeData.prototype['eventsListenerEndpoint'] = undefined;

/**
 * Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.
 * @member {String} eventsListenerPscSa
 */
EventingRuntimeData.prototype['eventsListenerPscSa'] = undefined;

/**
 * @member {module:model/EventingStatus} status
 */
EventingRuntimeData.prototype['status'] = undefined;






export default EventingRuntimeData;

