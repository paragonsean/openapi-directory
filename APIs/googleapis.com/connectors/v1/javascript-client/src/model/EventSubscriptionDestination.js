/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndPoint from './EndPoint';

/**
 * The EventSubscriptionDestination model module.
 * @module model/EventSubscriptionDestination
 * @version v1
 */
class EventSubscriptionDestination {
    /**
     * Constructs a new <code>EventSubscriptionDestination</code>.
     * Message for EventSubscription Destination to act on receiving an event
     * @alias module:model/EventSubscriptionDestination
     */
    constructor() { 
        
        EventSubscriptionDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventSubscriptionDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSubscriptionDestination} obj Optional instance to populate.
     * @return {module:model/EventSubscriptionDestination} The populated <code>EventSubscriptionDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSubscriptionDestination();

            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = EndPoint.constructFromObject(data['endpoint']);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSubscriptionDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSubscriptionDestination</code>.
     */
    static validateJSON(data) {
        // validate the optional field `endpoint`
        if (data['endpoint']) { // data not null
          EndPoint.validateJSON(data['endpoint']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/EndPoint} endpoint
 */
EventSubscriptionDestination.prototype['endpoint'] = undefined;

/**
 * Service account needed for runtime plane to trigger IP workflow.
 * @member {String} serviceAccount
 */
EventSubscriptionDestination.prototype['serviceAccount'] = undefined;

/**
 * type of the destination
 * @member {module:model/EventSubscriptionDestination.TypeEnum} type
 */
EventSubscriptionDestination.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscriptionDestination['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "ENDPOINT"
     * @const
     */
    "ENDPOINT": "ENDPOINT"
};



export default EventSubscriptionDestination;

