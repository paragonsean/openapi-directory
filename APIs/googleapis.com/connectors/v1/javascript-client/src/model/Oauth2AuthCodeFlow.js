/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Secret from './Secret';

/**
 * The Oauth2AuthCodeFlow model module.
 * @module model/Oauth2AuthCodeFlow
 * @version v1
 */
class Oauth2AuthCodeFlow {
    /**
     * Constructs a new <code>Oauth2AuthCodeFlow</code>.
     * Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
     * @alias module:model/Oauth2AuthCodeFlow
     */
    constructor() { 
        
        Oauth2AuthCodeFlow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Oauth2AuthCodeFlow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Oauth2AuthCodeFlow} obj Optional instance to populate.
     * @return {module:model/Oauth2AuthCodeFlow} The populated <code>Oauth2AuthCodeFlow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Oauth2AuthCodeFlow();

            if (data.hasOwnProperty('authCode')) {
                obj['authCode'] = ApiClient.convertToType(data['authCode'], 'String');
            }
            if (data.hasOwnProperty('authUri')) {
                obj['authUri'] = ApiClient.convertToType(data['authUri'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = Secret.constructFromObject(data['clientSecret']);
            }
            if (data.hasOwnProperty('enablePkce')) {
                obj['enablePkce'] = ApiClient.convertToType(data['enablePkce'], 'Boolean');
            }
            if (data.hasOwnProperty('pkceVerifier')) {
                obj['pkceVerifier'] = ApiClient.convertToType(data['pkceVerifier'], 'String');
            }
            if (data.hasOwnProperty('redirectUri')) {
                obj['redirectUri'] = ApiClient.convertToType(data['redirectUri'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Oauth2AuthCodeFlow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Oauth2AuthCodeFlow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authCode'] && !(typeof data['authCode'] === 'string' || data['authCode'] instanceof String)) {
            throw new Error("Expected the field `authCode` to be a primitive type in the JSON string but got " + data['authCode']);
        }
        // ensure the json data is a string
        if (data['authUri'] && !(typeof data['authUri'] === 'string' || data['authUri'] instanceof String)) {
            throw new Error("Expected the field `authUri` to be a primitive type in the JSON string but got " + data['authUri']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // validate the optional field `clientSecret`
        if (data['clientSecret']) { // data not null
          Secret.validateJSON(data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['pkceVerifier'] && !(typeof data['pkceVerifier'] === 'string' || data['pkceVerifier'] instanceof String)) {
            throw new Error("Expected the field `pkceVerifier` to be a primitive type in the JSON string but got " + data['pkceVerifier']);
        }
        // ensure the json data is a string
        if (data['redirectUri'] && !(typeof data['redirectUri'] === 'string' || data['redirectUri'] instanceof String)) {
            throw new Error("Expected the field `redirectUri` to be a primitive type in the JSON string but got " + data['redirectUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}



/**
 * Authorization code to be exchanged for access and refresh tokens.
 * @member {String} authCode
 */
Oauth2AuthCodeFlow.prototype['authCode'] = undefined;

/**
 * Auth URL for Authorization Code Flow
 * @member {String} authUri
 */
Oauth2AuthCodeFlow.prototype['authUri'] = undefined;

/**
 * Client ID for user-provided OAuth app.
 * @member {String} clientId
 */
Oauth2AuthCodeFlow.prototype['clientId'] = undefined;

/**
 * @member {module:model/Secret} clientSecret
 */
Oauth2AuthCodeFlow.prototype['clientSecret'] = undefined;

/**
 * Whether to enable PKCE when the user performs the auth code flow.
 * @member {Boolean} enablePkce
 */
Oauth2AuthCodeFlow.prototype['enablePkce'] = undefined;

/**
 * PKCE verifier to be used during the auth code exchange.
 * @member {String} pkceVerifier
 */
Oauth2AuthCodeFlow.prototype['pkceVerifier'] = undefined;

/**
 * Redirect URI to be provided during the auth code exchange.
 * @member {String} redirectUri
 */
Oauth2AuthCodeFlow.prototype['redirectUri'] = undefined;

/**
 * Scopes the connection will request when the user performs the auth code flow.
 * @member {Array.<String>} scopes
 */
Oauth2AuthCodeFlow.prototype['scopes'] = undefined;






export default Oauth2AuthCodeFlow;

