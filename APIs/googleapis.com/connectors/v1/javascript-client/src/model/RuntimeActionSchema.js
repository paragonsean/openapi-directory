/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputParameter from './InputParameter';
import JsonSchema from './JsonSchema';
import ResultMetadata from './ResultMetadata';

/**
 * The RuntimeActionSchema model module.
 * @module model/RuntimeActionSchema
 * @version v1
 */
class RuntimeActionSchema {
    /**
     * Constructs a new <code>RuntimeActionSchema</code>.
     * Schema of a runtime action.
     * @alias module:model/RuntimeActionSchema
     */
    constructor() { 
        
        RuntimeActionSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeActionSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeActionSchema} obj Optional instance to populate.
     * @return {module:model/RuntimeActionSchema} The populated <code>RuntimeActionSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeActionSchema();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('inputJsonSchema')) {
                obj['inputJsonSchema'] = JsonSchema.constructFromObject(data['inputJsonSchema']);
            }
            if (data.hasOwnProperty('inputParameters')) {
                obj['inputParameters'] = ApiClient.convertToType(data['inputParameters'], [InputParameter]);
            }
            if (data.hasOwnProperty('resultJsonSchema')) {
                obj['resultJsonSchema'] = JsonSchema.constructFromObject(data['resultJsonSchema']);
            }
            if (data.hasOwnProperty('resultMetadata')) {
                obj['resultMetadata'] = ApiClient.convertToType(data['resultMetadata'], [ResultMetadata]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeActionSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeActionSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `inputJsonSchema`
        if (data['inputJsonSchema']) { // data not null
          JsonSchema.validateJSON(data['inputJsonSchema']);
        }
        if (data['inputParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputParameters'])) {
                throw new Error("Expected the field `inputParameters` to be an array in the JSON data but got " + data['inputParameters']);
            }
            // validate the optional field `inputParameters` (array)
            for (const item of data['inputParameters']) {
                InputParameter.validateJSON(item);
            };
        }
        // validate the optional field `resultJsonSchema`
        if (data['resultJsonSchema']) { // data not null
          JsonSchema.validateJSON(data['resultJsonSchema']);
        }
        if (data['resultMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resultMetadata'])) {
                throw new Error("Expected the field `resultMetadata` to be an array in the JSON data but got " + data['resultMetadata']);
            }
            // validate the optional field `resultMetadata` (array)
            for (const item of data['resultMetadata']) {
                ResultMetadata.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Name of the action.
 * @member {String} action
 */
RuntimeActionSchema.prototype['action'] = undefined;

/**
 * Output only. Brief Description of action
 * @member {String} description
 */
RuntimeActionSchema.prototype['description'] = undefined;

/**
 * Output only. Display Name of action to be shown on client side
 * @member {String} displayName
 */
RuntimeActionSchema.prototype['displayName'] = undefined;

/**
 * @member {module:model/JsonSchema} inputJsonSchema
 */
RuntimeActionSchema.prototype['inputJsonSchema'] = undefined;

/**
 * Output only. List of input parameter metadata for the action.
 * @member {Array.<module:model/InputParameter>} inputParameters
 */
RuntimeActionSchema.prototype['inputParameters'] = undefined;

/**
 * @member {module:model/JsonSchema} resultJsonSchema
 */
RuntimeActionSchema.prototype['resultJsonSchema'] = undefined;

/**
 * Output only. List of result field metadata.
 * @member {Array.<module:model/ResultMetadata>} resultMetadata
 */
RuntimeActionSchema.prototype['resultMetadata'] = undefined;






export default RuntimeActionSchema;

