/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigVariableTemplate from './ConfigVariableTemplate';

/**
 * The AuthConfigTemplate model module.
 * @module model/AuthConfigTemplate
 * @version v1
 */
class AuthConfigTemplate {
    /**
     * Constructs a new <code>AuthConfigTemplate</code>.
     * AuthConfigTemplate defines required field over an authentication type.
     * @alias module:model/AuthConfigTemplate
     */
    constructor() { 
        
        AuthConfigTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthConfigTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthConfigTemplate} obj Optional instance to populate.
     * @return {module:model/AuthConfigTemplate} The populated <code>AuthConfigTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthConfigTemplate();

            if (data.hasOwnProperty('authKey')) {
                obj['authKey'] = ApiClient.convertToType(data['authKey'], 'String');
            }
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('configVariableTemplates')) {
                obj['configVariableTemplates'] = ApiClient.convertToType(data['configVariableTemplates'], [ConfigVariableTemplate]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthConfigTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthConfigTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authKey'] && !(typeof data['authKey'] === 'string' || data['authKey'] instanceof String)) {
            throw new Error("Expected the field `authKey` to be a primitive type in the JSON string but got " + data['authKey']);
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        if (data['configVariableTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['configVariableTemplates'])) {
                throw new Error("Expected the field `configVariableTemplates` to be an array in the JSON data but got " + data['configVariableTemplates']);
            }
            // validate the optional field `configVariableTemplates` (array)
            for (const item of data['configVariableTemplates']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}



/**
 * Identifier key for auth config
 * @member {String} authKey
 */
AuthConfigTemplate.prototype['authKey'] = undefined;

/**
 * The type of authentication configured.
 * @member {module:model/AuthConfigTemplate.AuthTypeEnum} authType
 */
AuthConfigTemplate.prototype['authType'] = undefined;

/**
 * Config variables to describe an `AuthConfig` for a `Connection`.
 * @member {Array.<module:model/ConfigVariableTemplate>} configVariableTemplates
 */
AuthConfigTemplate.prototype['configVariableTemplates'] = undefined;

/**
 * Connector specific description for an authentication template.
 * @member {String} description
 */
AuthConfigTemplate.prototype['description'] = undefined;

/**
 * Display name for authentication template.
 * @member {String} displayName
 */
AuthConfigTemplate.prototype['displayName'] = undefined;





/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
AuthConfigTemplate['AuthTypeEnum'] = {

    /**
     * value: "AUTH_TYPE_UNSPECIFIED"
     * @const
     */
    "AUTH_TYPE_UNSPECIFIED": "AUTH_TYPE_UNSPECIFIED",

    /**
     * value: "USER_PASSWORD"
     * @const
     */
    "USER_PASSWORD": "USER_PASSWORD",

    /**
     * value: "OAUTH2_JWT_BEARER"
     * @const
     */
    "OAUTH2_JWT_BEARER": "OAUTH2_JWT_BEARER",

    /**
     * value: "OAUTH2_CLIENT_CREDENTIALS"
     * @const
     */
    "OAUTH2_CLIENT_CREDENTIALS": "OAUTH2_CLIENT_CREDENTIALS",

    /**
     * value: "SSH_PUBLIC_KEY"
     * @const
     */
    "SSH_PUBLIC_KEY": "SSH_PUBLIC_KEY",

    /**
     * value: "OAUTH2_AUTH_CODE_FLOW"
     * @const
     */
    "OAUTH2_AUTH_CODE_FLOW": "OAUTH2_AUTH_CODE_FLOW",

    /**
     * value: "GOOGLE_AUTHENTICATION"
     * @const
     */
    "GOOGLE_AUTHENTICATION": "GOOGLE_AUTHENTICATION"
};



export default AuthConfigTemplate;

