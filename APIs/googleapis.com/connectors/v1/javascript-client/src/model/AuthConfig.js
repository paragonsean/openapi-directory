/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigVariable from './ConfigVariable';
import Oauth2AuthCodeFlow from './Oauth2AuthCodeFlow';
import Oauth2ClientCredentials from './Oauth2ClientCredentials';
import Oauth2JwtBearer from './Oauth2JwtBearer';
import SshPublicKey from './SshPublicKey';
import UserPassword from './UserPassword';

/**
 * The AuthConfig model module.
 * @module model/AuthConfig
 * @version v1
 */
class AuthConfig {
    /**
     * Constructs a new <code>AuthConfig</code>.
     * AuthConfig defines details of a authentication type.
     * @alias module:model/AuthConfig
     */
    constructor() { 
        
        AuthConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthConfig} obj Optional instance to populate.
     * @return {module:model/AuthConfig} The populated <code>AuthConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthConfig();

            if (data.hasOwnProperty('additionalVariables')) {
                obj['additionalVariables'] = ApiClient.convertToType(data['additionalVariables'], [ConfigVariable]);
            }
            if (data.hasOwnProperty('authKey')) {
                obj['authKey'] = ApiClient.convertToType(data['authKey'], 'String');
            }
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('oauth2AuthCodeFlow')) {
                obj['oauth2AuthCodeFlow'] = Oauth2AuthCodeFlow.constructFromObject(data['oauth2AuthCodeFlow']);
            }
            if (data.hasOwnProperty('oauth2ClientCredentials')) {
                obj['oauth2ClientCredentials'] = Oauth2ClientCredentials.constructFromObject(data['oauth2ClientCredentials']);
            }
            if (data.hasOwnProperty('oauth2JwtBearer')) {
                obj['oauth2JwtBearer'] = Oauth2JwtBearer.constructFromObject(data['oauth2JwtBearer']);
            }
            if (data.hasOwnProperty('sshPublicKey')) {
                obj['sshPublicKey'] = SshPublicKey.constructFromObject(data['sshPublicKey']);
            }
            if (data.hasOwnProperty('userPassword')) {
                obj['userPassword'] = UserPassword.constructFromObject(data['userPassword']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthConfig</code>.
     */
    static validateJSON(data) {
        if (data['additionalVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalVariables'])) {
                throw new Error("Expected the field `additionalVariables` to be an array in the JSON data but got " + data['additionalVariables']);
            }
            // validate the optional field `additionalVariables` (array)
            for (const item of data['additionalVariables']) {
                ConfigVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['authKey'] && !(typeof data['authKey'] === 'string' || data['authKey'] instanceof String)) {
            throw new Error("Expected the field `authKey` to be a primitive type in the JSON string but got " + data['authKey']);
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // validate the optional field `oauth2AuthCodeFlow`
        if (data['oauth2AuthCodeFlow']) { // data not null
          Oauth2AuthCodeFlow.validateJSON(data['oauth2AuthCodeFlow']);
        }
        // validate the optional field `oauth2ClientCredentials`
        if (data['oauth2ClientCredentials']) { // data not null
          Oauth2ClientCredentials.validateJSON(data['oauth2ClientCredentials']);
        }
        // validate the optional field `oauth2JwtBearer`
        if (data['oauth2JwtBearer']) { // data not null
          Oauth2JwtBearer.validateJSON(data['oauth2JwtBearer']);
        }
        // validate the optional field `sshPublicKey`
        if (data['sshPublicKey']) { // data not null
          SshPublicKey.validateJSON(data['sshPublicKey']);
        }
        // validate the optional field `userPassword`
        if (data['userPassword']) { // data not null
          UserPassword.validateJSON(data['userPassword']);
        }

        return true;
    }


}



/**
 * List containing additional auth configs.
 * @member {Array.<module:model/ConfigVariable>} additionalVariables
 */
AuthConfig.prototype['additionalVariables'] = undefined;

/**
 * Identifier key for auth config
 * @member {String} authKey
 */
AuthConfig.prototype['authKey'] = undefined;

/**
 * The type of authentication configured.
 * @member {module:model/AuthConfig.AuthTypeEnum} authType
 */
AuthConfig.prototype['authType'] = undefined;

/**
 * @member {module:model/Oauth2AuthCodeFlow} oauth2AuthCodeFlow
 */
AuthConfig.prototype['oauth2AuthCodeFlow'] = undefined;

/**
 * @member {module:model/Oauth2ClientCredentials} oauth2ClientCredentials
 */
AuthConfig.prototype['oauth2ClientCredentials'] = undefined;

/**
 * @member {module:model/Oauth2JwtBearer} oauth2JwtBearer
 */
AuthConfig.prototype['oauth2JwtBearer'] = undefined;

/**
 * @member {module:model/SshPublicKey} sshPublicKey
 */
AuthConfig.prototype['sshPublicKey'] = undefined;

/**
 * @member {module:model/UserPassword} userPassword
 */
AuthConfig.prototype['userPassword'] = undefined;





/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
AuthConfig['AuthTypeEnum'] = {

    /**
     * value: "AUTH_TYPE_UNSPECIFIED"
     * @const
     */
    "AUTH_TYPE_UNSPECIFIED": "AUTH_TYPE_UNSPECIFIED",

    /**
     * value: "USER_PASSWORD"
     * @const
     */
    "USER_PASSWORD": "USER_PASSWORD",

    /**
     * value: "OAUTH2_JWT_BEARER"
     * @const
     */
    "OAUTH2_JWT_BEARER": "OAUTH2_JWT_BEARER",

    /**
     * value: "OAUTH2_CLIENT_CREDENTIALS"
     * @const
     */
    "OAUTH2_CLIENT_CREDENTIALS": "OAUTH2_CLIENT_CREDENTIALS",

    /**
     * value: "SSH_PUBLIC_KEY"
     * @const
     */
    "SSH_PUBLIC_KEY": "SSH_PUBLIC_KEY",

    /**
     * value: "OAUTH2_AUTH_CODE_FLOW"
     * @const
     */
    "OAUTH2_AUTH_CODE_FLOW": "OAUTH2_AUTH_CODE_FLOW",

    /**
     * value: "GOOGLE_AUTHENTICATION"
     * @const
     */
    "GOOGLE_AUTHENTICATION": "GOOGLE_AUTHENTICATION"
};



export default AuthConfig;

