/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldComparison from './FieldComparison';

/**
 * The LogicalExpression model module.
 * @module model/LogicalExpression
 * @version v1
 */
class LogicalExpression {
    /**
     * Constructs a new <code>LogicalExpression</code>.
     * Struct for representing boolean expressions.
     * @alias module:model/LogicalExpression
     */
    constructor() { 
        
        LogicalExpression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogicalExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogicalExpression} obj Optional instance to populate.
     * @return {module:model/LogicalExpression} The populated <code>LogicalExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogicalExpression();

            if (data.hasOwnProperty('fieldComparisons')) {
                obj['fieldComparisons'] = ApiClient.convertToType(data['fieldComparisons'], [FieldComparison]);
            }
            if (data.hasOwnProperty('logicalExpressions')) {
                obj['logicalExpressions'] = ApiClient.convertToType(data['logicalExpressions'], [LogicalExpression]);
            }
            if (data.hasOwnProperty('logicalOperator')) {
                obj['logicalOperator'] = ApiClient.convertToType(data['logicalOperator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogicalExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogicalExpression</code>.
     */
    static validateJSON(data) {
        if (data['fieldComparisons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldComparisons'])) {
                throw new Error("Expected the field `fieldComparisons` to be an array in the JSON data but got " + data['fieldComparisons']);
            }
            // validate the optional field `fieldComparisons` (array)
            for (const item of data['fieldComparisons']) {
                FieldComparison.validateJSON(item);
            };
        }
        if (data['logicalExpressions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logicalExpressions'])) {
                throw new Error("Expected the field `logicalExpressions` to be an array in the JSON data but got " + data['logicalExpressions']);
            }
            // validate the optional field `logicalExpressions` (array)
            for (const item of data['logicalExpressions']) {
                LogicalExpression.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['logicalOperator'] && !(typeof data['logicalOperator'] === 'string' || data['logicalOperator'] instanceof String)) {
            throw new Error("Expected the field `logicalOperator` to be a primitive type in the JSON string but got " + data['logicalOperator']);
        }

        return true;
    }


}



/**
 * A list of fields to be compared.
 * @member {Array.<module:model/FieldComparison>} fieldComparisons
 */
LogicalExpression.prototype['fieldComparisons'] = undefined;

/**
 * A list of nested conditions to be compared.
 * @member {Array.<module:model/LogicalExpression>} logicalExpressions
 */
LogicalExpression.prototype['logicalExpressions'] = undefined;

/**
 * The logical operator to use between the fields and conditions.
 * @member {module:model/LogicalExpression.LogicalOperatorEnum} logicalOperator
 */
LogicalExpression.prototype['logicalOperator'] = undefined;





/**
 * Allowed values for the <code>logicalOperator</code> property.
 * @enum {String}
 * @readonly
 */
LogicalExpression['LogicalOperatorEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR"
};



export default LogicalExpression;

