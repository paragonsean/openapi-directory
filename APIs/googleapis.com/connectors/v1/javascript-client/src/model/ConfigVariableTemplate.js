/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizationCodeLink from './AuthorizationCodeLink';
import EnumOption from './EnumOption';
import LogicalExpression from './LogicalExpression';
import RoleGrant from './RoleGrant';

/**
 * The ConfigVariableTemplate model module.
 * @module model/ConfigVariableTemplate
 * @version v1
 */
class ConfigVariableTemplate {
    /**
     * Constructs a new <code>ConfigVariableTemplate</code>.
     * ConfigVariableTemplate provides metadata about a &#x60;ConfigVariable&#x60; that is used in a Connection.
     * @alias module:model/ConfigVariableTemplate
     */
    constructor() { 
        
        ConfigVariableTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigVariableTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigVariableTemplate} obj Optional instance to populate.
     * @return {module:model/ConfigVariableTemplate} The populated <code>ConfigVariableTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigVariableTemplate();

            if (data.hasOwnProperty('authorizationCodeLink')) {
                obj['authorizationCodeLink'] = AuthorizationCodeLink.constructFromObject(data['authorizationCodeLink']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enumOptions')) {
                obj['enumOptions'] = ApiClient.convertToType(data['enumOptions'], [EnumOption]);
            }
            if (data.hasOwnProperty('isAdvanced')) {
                obj['isAdvanced'] = ApiClient.convertToType(data['isAdvanced'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('requiredCondition')) {
                obj['requiredCondition'] = LogicalExpression.constructFromObject(data['requiredCondition']);
            }
            if (data.hasOwnProperty('roleGrant')) {
                obj['roleGrant'] = RoleGrant.constructFromObject(data['roleGrant']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('validationRegex')) {
                obj['validationRegex'] = ApiClient.convertToType(data['validationRegex'], 'String');
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigVariableTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigVariableTemplate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authorizationCodeLink`
        if (data['authorizationCodeLink']) { // data not null
          AuthorizationCodeLink.validateJSON(data['authorizationCodeLink']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['enumOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumOptions'])) {
                throw new Error("Expected the field `enumOptions` to be an array in the JSON data but got " + data['enumOptions']);
            }
            // validate the optional field `enumOptions` (array)
            for (const item of data['enumOptions']) {
                EnumOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }
        // validate the optional field `requiredCondition`
        if (data['requiredCondition']) { // data not null
          LogicalExpression.validateJSON(data['requiredCondition']);
        }
        // validate the optional field `roleGrant`
        if (data['roleGrant']) { // data not null
          RoleGrant.validateJSON(data['roleGrant']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['validationRegex'] && !(typeof data['validationRegex'] === 'string' || data['validationRegex'] instanceof String)) {
            throw new Error("Expected the field `validationRegex` to be a primitive type in the JSON string but got " + data['validationRegex']);
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthorizationCodeLink} authorizationCodeLink
 */
ConfigVariableTemplate.prototype['authorizationCodeLink'] = undefined;

/**
 * Description.
 * @member {String} description
 */
ConfigVariableTemplate.prototype['description'] = undefined;

/**
 * Display name of the parameter.
 * @member {String} displayName
 */
ConfigVariableTemplate.prototype['displayName'] = undefined;

/**
 * Enum options. To be populated if `ValueType` is `ENUM`
 * @member {Array.<module:model/EnumOption>} enumOptions
 */
ConfigVariableTemplate.prototype['enumOptions'] = undefined;

/**
 * Indicates if current template is part of advanced settings
 * @member {Boolean} isAdvanced
 */
ConfigVariableTemplate.prototype['isAdvanced'] = undefined;

/**
 * Key of the config variable.
 * @member {String} key
 */
ConfigVariableTemplate.prototype['key'] = undefined;

/**
 * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
 * @member {module:model/ConfigVariableTemplate.LocationTypeEnum} locationType
 */
ConfigVariableTemplate.prototype['locationType'] = undefined;

/**
 * Flag represents that this `ConfigVariable` must be provided for a connection.
 * @member {Boolean} required
 */
ConfigVariableTemplate.prototype['required'] = undefined;

/**
 * @member {module:model/LogicalExpression} requiredCondition
 */
ConfigVariableTemplate.prototype['requiredCondition'] = undefined;

/**
 * @member {module:model/RoleGrant} roleGrant
 */
ConfigVariableTemplate.prototype['roleGrant'] = undefined;

/**
 * State of the config variable.
 * @member {module:model/ConfigVariableTemplate.StateEnum} state
 */
ConfigVariableTemplate.prototype['state'] = undefined;

/**
 * Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.
 * @member {String} validationRegex
 */
ConfigVariableTemplate.prototype['validationRegex'] = undefined;

/**
 * Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
 * @member {module:model/ConfigVariableTemplate.ValueTypeEnum} valueType
 */
ConfigVariableTemplate.prototype['valueType'] = undefined;





/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
ConfigVariableTemplate['LocationTypeEnum'] = {

    /**
     * value: "LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "LOCATION_TYPE_UNSPECIFIED": "LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "HEADER"
     * @const
     */
    "HEADER": "HEADER",

    /**
     * value: "PAYLOAD"
     * @const
     */
    "PAYLOAD": "PAYLOAD",

    /**
     * value: "QUERY_PARAM"
     * @const
     */
    "QUERY_PARAM": "QUERY_PARAM",

    /**
     * value: "PATH_PARAM"
     * @const
     */
    "PATH_PARAM": "PATH_PARAM"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConfigVariableTemplate['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED"
};


/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
ConfigVariableTemplate['ValueTypeEnum'] = {

    /**
     * value: "VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "VALUE_TYPE_UNSPECIFIED": "VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "INT"
     * @const
     */
    "INT": "INT",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "SECRET"
     * @const
     */
    "SECRET": "SECRET",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "AUTHORIZATION_CODE"
     * @const
     */
    "AUTHORIZATION_CODE": "AUTHORIZATION_CODE",

    /**
     * value: "ENCRYPTION_KEY"
     * @const
     */
    "ENCRYPTION_KEY": "ENCRYPTION_KEY"
};



export default ConfigVariableTemplate;

