/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthConfigTemplate from './AuthConfigTemplate';
import ConfigVariableTemplate from './ConfigVariableTemplate';
import ConnectorInfraConfig from './ConnectorInfraConfig';
import DestinationConfigTemplate from './DestinationConfigTemplate';
import EgressControlConfig from './EgressControlConfig';
import EventingConfigTemplate from './EventingConfigTemplate';
import RoleGrant from './RoleGrant';
import SslConfigTemplate from './SslConfigTemplate';
import SupportedRuntimeFeatures from './SupportedRuntimeFeatures';

/**
 * The ConnectorVersion model module.
 * @module model/ConnectorVersion
 * @version v1
 */
class ConnectorVersion {
    /**
     * Constructs a new <code>ConnectorVersion</code>.
     * ConnectorVersion indicates a specific version of a connector.
     * @alias module:model/ConnectorVersion
     */
    constructor() { 
        
        ConnectorVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorVersion} obj Optional instance to populate.
     * @return {module:model/ConnectorVersion} The populated <code>ConnectorVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorVersion();

            if (data.hasOwnProperty('authConfigTemplates')) {
                obj['authConfigTemplates'] = ApiClient.convertToType(data['authConfigTemplates'], [AuthConfigTemplate]);
            }
            if (data.hasOwnProperty('configVariableTemplates')) {
                obj['configVariableTemplates'] = ApiClient.convertToType(data['configVariableTemplates'], [ConfigVariableTemplate]);
            }
            if (data.hasOwnProperty('connectorInfraConfig')) {
                obj['connectorInfraConfig'] = ConnectorInfraConfig.constructFromObject(data['connectorInfraConfig']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('destinationConfigTemplates')) {
                obj['destinationConfigTemplates'] = ApiClient.convertToType(data['destinationConfigTemplates'], [DestinationConfigTemplate]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('egressControlConfig')) {
                obj['egressControlConfig'] = EgressControlConfig.constructFromObject(data['egressControlConfig']);
            }
            if (data.hasOwnProperty('eventingConfigTemplate')) {
                obj['eventingConfigTemplate'] = EventingConfigTemplate.constructFromObject(data['eventingConfigTemplate']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('launchStage')) {
                obj['launchStage'] = ApiClient.convertToType(data['launchStage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('releaseVersion')) {
                obj['releaseVersion'] = ApiClient.convertToType(data['releaseVersion'], 'String');
            }
            if (data.hasOwnProperty('roleGrant')) {
                obj['roleGrant'] = RoleGrant.constructFromObject(data['roleGrant']);
            }
            if (data.hasOwnProperty('roleGrants')) {
                obj['roleGrants'] = ApiClient.convertToType(data['roleGrants'], [RoleGrant]);
            }
            if (data.hasOwnProperty('sslConfigTemplate')) {
                obj['sslConfigTemplate'] = SslConfigTemplate.constructFromObject(data['sslConfigTemplate']);
            }
            if (data.hasOwnProperty('supportedRuntimeFeatures')) {
                obj['supportedRuntimeFeatures'] = SupportedRuntimeFeatures.constructFromObject(data['supportedRuntimeFeatures']);
            }
            if (data.hasOwnProperty('unsupportedConnectionTypes')) {
                obj['unsupportedConnectionTypes'] = ApiClient.convertToType(data['unsupportedConnectionTypes'], ['String']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorVersion</code>.
     */
    static validateJSON(data) {
        if (data['authConfigTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authConfigTemplates'])) {
                throw new Error("Expected the field `authConfigTemplates` to be an array in the JSON data but got " + data['authConfigTemplates']);
            }
            // validate the optional field `authConfigTemplates` (array)
            for (const item of data['authConfigTemplates']) {
                AuthConfigTemplate.validateJSON(item);
            };
        }
        if (data['configVariableTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['configVariableTemplates'])) {
                throw new Error("Expected the field `configVariableTemplates` to be an array in the JSON data but got " + data['configVariableTemplates']);
            }
            // validate the optional field `configVariableTemplates` (array)
            for (const item of data['configVariableTemplates']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }
        // validate the optional field `connectorInfraConfig`
        if (data['connectorInfraConfig']) { // data not null
          ConnectorInfraConfig.validateJSON(data['connectorInfraConfig']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        if (data['destinationConfigTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinationConfigTemplates'])) {
                throw new Error("Expected the field `destinationConfigTemplates` to be an array in the JSON data but got " + data['destinationConfigTemplates']);
            }
            // validate the optional field `destinationConfigTemplates` (array)
            for (const item of data['destinationConfigTemplates']) {
                DestinationConfigTemplate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `egressControlConfig`
        if (data['egressControlConfig']) { // data not null
          EgressControlConfig.validateJSON(data['egressControlConfig']);
        }
        // validate the optional field `eventingConfigTemplate`
        if (data['eventingConfigTemplate']) { // data not null
          EventingConfigTemplate.validateJSON(data['eventingConfigTemplate']);
        }
        // ensure the json data is a string
        if (data['launchStage'] && !(typeof data['launchStage'] === 'string' || data['launchStage'] instanceof String)) {
            throw new Error("Expected the field `launchStage` to be a primitive type in the JSON string but got " + data['launchStage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['releaseVersion'] && !(typeof data['releaseVersion'] === 'string' || data['releaseVersion'] instanceof String)) {
            throw new Error("Expected the field `releaseVersion` to be a primitive type in the JSON string but got " + data['releaseVersion']);
        }
        // validate the optional field `roleGrant`
        if (data['roleGrant']) { // data not null
          RoleGrant.validateJSON(data['roleGrant']);
        }
        if (data['roleGrants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roleGrants'])) {
                throw new Error("Expected the field `roleGrants` to be an array in the JSON data but got " + data['roleGrants']);
            }
            // validate the optional field `roleGrants` (array)
            for (const item of data['roleGrants']) {
                RoleGrant.validateJSON(item);
            };
        }
        // validate the optional field `sslConfigTemplate`
        if (data['sslConfigTemplate']) { // data not null
          SslConfigTemplate.validateJSON(data['sslConfigTemplate']);
        }
        // validate the optional field `supportedRuntimeFeatures`
        if (data['supportedRuntimeFeatures']) { // data not null
          SupportedRuntimeFeatures.validateJSON(data['supportedRuntimeFeatures']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unsupportedConnectionTypes'])) {
            throw new Error("Expected the field `unsupportedConnectionTypes` to be an array in the JSON data but got " + data['unsupportedConnectionTypes']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. List of auth configs supported by the Connector Version.
 * @member {Array.<module:model/AuthConfigTemplate>} authConfigTemplates
 */
ConnectorVersion.prototype['authConfigTemplates'] = undefined;

/**
 * Output only. List of config variables needed to create a connection.
 * @member {Array.<module:model/ConfigVariableTemplate>} configVariableTemplates
 */
ConnectorVersion.prototype['configVariableTemplates'] = undefined;

/**
 * @member {module:model/ConnectorInfraConfig} connectorInfraConfig
 */
ConnectorVersion.prototype['connectorInfraConfig'] = undefined;

/**
 * Output only. Created time.
 * @member {String} createTime
 */
ConnectorVersion.prototype['createTime'] = undefined;

/**
 * Output only. List of destination configs needed to create a connection.
 * @member {Array.<module:model/DestinationConfigTemplate>} destinationConfigTemplates
 */
ConnectorVersion.prototype['destinationConfigTemplates'] = undefined;

/**
 * Output only. Display name.
 * @member {String} displayName
 */
ConnectorVersion.prototype['displayName'] = undefined;

/**
 * @member {module:model/EgressControlConfig} egressControlConfig
 */
ConnectorVersion.prototype['egressControlConfig'] = undefined;

/**
 * @member {module:model/EventingConfigTemplate} eventingConfigTemplate
 */
ConnectorVersion.prototype['eventingConfigTemplate'] = undefined;

/**
 * Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
 * @member {Object.<String, String>} labels
 */
ConnectorVersion.prototype['labels'] = undefined;

/**
 * Output only. Flag to mark the version indicating the launch stage.
 * @member {module:model/ConnectorVersion.LaunchStageEnum} launchStage
 */
ConnectorVersion.prototype['launchStage'] = undefined;

/**
 * Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource.
 * @member {String} name
 */
ConnectorVersion.prototype['name'] = undefined;

/**
 * Output only. ReleaseVersion of the connector, for example: \"1.0.1-alpha\".
 * @member {String} releaseVersion
 */
ConnectorVersion.prototype['releaseVersion'] = undefined;

/**
 * @member {module:model/RoleGrant} roleGrant
 */
ConnectorVersion.prototype['roleGrant'] = undefined;

/**
 * Output only. Role grant configurations for this connector version.
 * @member {Array.<module:model/RoleGrant>} roleGrants
 */
ConnectorVersion.prototype['roleGrants'] = undefined;

/**
 * @member {module:model/SslConfigTemplate} sslConfigTemplate
 */
ConnectorVersion.prototype['sslConfigTemplate'] = undefined;

/**
 * @member {module:model/SupportedRuntimeFeatures} supportedRuntimeFeatures
 */
ConnectorVersion.prototype['supportedRuntimeFeatures'] = undefined;

/**
 * Output only. Unsupported connection types.
 * @member {Array.<module:model/ConnectorVersion.UnsupportedConnectionTypesEnum>} unsupportedConnectionTypes
 */
ConnectorVersion.prototype['unsupportedConnectionTypes'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
ConnectorVersion.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>launchStage</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorVersion['LaunchStageEnum'] = {

    /**
     * value: "LAUNCH_STAGE_UNSPECIFIED"
     * @const
     */
    "LAUNCH_STAGE_UNSPECIFIED": "LAUNCH_STAGE_UNSPECIFIED",

    /**
     * value: "PREVIEW"
     * @const
     */
    "PREVIEW": "PREVIEW",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED",

    /**
     * value: "PRIVATE_PREVIEW"
     * @const
     */
    "PRIVATE_PREVIEW": "PRIVATE_PREVIEW"
};


/**
 * Allowed values for the <code>unsupportedConnectionTypes</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorVersion['UnsupportedConnectionTypesEnum'] = {

    /**
     * value: "CONNECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "CONNECTION_TYPE_UNSPECIFIED": "CONNECTION_TYPE_UNSPECIFIED",

    /**
     * value: "CONNECTION_WITH_EVENTING"
     * @const
     */
    "CONNECTION_WITH_EVENTING": "CONNECTION_WITH_EVENTING",

    /**
     * value: "ONLY_CONNECTION"
     * @const
     */
    "ONLY_CONNECTION": "ONLY_CONNECTION",

    /**
     * value: "ONLY_EVENTING"
     * @const
     */
    "ONLY_EVENTING": "ONLY_EVENTING"
};



export default ConnectorVersion;

