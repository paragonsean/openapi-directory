/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RuntimeConfig model module.
 * @module model/RuntimeConfig
 * @version v1
 */
class RuntimeConfig {
    /**
     * Constructs a new <code>RuntimeConfig</code>.
     * RuntimeConfig is the singleton resource of each location. It includes generic resource configs consumed by control plane and runtime plane like: pub/sub topic/subscription resource name, Cloud Storage location storing schema etc.
     * @alias module:model/RuntimeConfig
     */
    constructor() { 
        
        RuntimeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeConfig} obj Optional instance to populate.
     * @return {module:model/RuntimeConfig} The populated <code>RuntimeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeConfig();

            if (data.hasOwnProperty('conndSubscription')) {
                obj['conndSubscription'] = ApiClient.convertToType(data['conndSubscription'], 'String');
            }
            if (data.hasOwnProperty('conndTopic')) {
                obj['conndTopic'] = ApiClient.convertToType(data['conndTopic'], 'String');
            }
            if (data.hasOwnProperty('controlPlaneSubscription')) {
                obj['controlPlaneSubscription'] = ApiClient.convertToType(data['controlPlaneSubscription'], 'String');
            }
            if (data.hasOwnProperty('controlPlaneTopic')) {
                obj['controlPlaneTopic'] = ApiClient.convertToType(data['controlPlaneTopic'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtimeEndpoint')) {
                obj['runtimeEndpoint'] = ApiClient.convertToType(data['runtimeEndpoint'], 'String');
            }
            if (data.hasOwnProperty('schemaGcsBucket')) {
                obj['schemaGcsBucket'] = ApiClient.convertToType(data['schemaGcsBucket'], 'String');
            }
            if (data.hasOwnProperty('serviceDirectory')) {
                obj['serviceDirectory'] = ApiClient.convertToType(data['serviceDirectory'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conndSubscription'] && !(typeof data['conndSubscription'] === 'string' || data['conndSubscription'] instanceof String)) {
            throw new Error("Expected the field `conndSubscription` to be a primitive type in the JSON string but got " + data['conndSubscription']);
        }
        // ensure the json data is a string
        if (data['conndTopic'] && !(typeof data['conndTopic'] === 'string' || data['conndTopic'] instanceof String)) {
            throw new Error("Expected the field `conndTopic` to be a primitive type in the JSON string but got " + data['conndTopic']);
        }
        // ensure the json data is a string
        if (data['controlPlaneSubscription'] && !(typeof data['controlPlaneSubscription'] === 'string' || data['controlPlaneSubscription'] instanceof String)) {
            throw new Error("Expected the field `controlPlaneSubscription` to be a primitive type in the JSON string but got " + data['controlPlaneSubscription']);
        }
        // ensure the json data is a string
        if (data['controlPlaneTopic'] && !(typeof data['controlPlaneTopic'] === 'string' || data['controlPlaneTopic'] instanceof String)) {
            throw new Error("Expected the field `controlPlaneTopic` to be a primitive type in the JSON string but got " + data['controlPlaneTopic']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runtimeEndpoint'] && !(typeof data['runtimeEndpoint'] === 'string' || data['runtimeEndpoint'] instanceof String)) {
            throw new Error("Expected the field `runtimeEndpoint` to be a primitive type in the JSON string but got " + data['runtimeEndpoint']);
        }
        // ensure the json data is a string
        if (data['schemaGcsBucket'] && !(typeof data['schemaGcsBucket'] === 'string' || data['schemaGcsBucket'] instanceof String)) {
            throw new Error("Expected the field `schemaGcsBucket` to be a primitive type in the JSON string but got " + data['schemaGcsBucket']);
        }
        // ensure the json data is a string
        if (data['serviceDirectory'] && !(typeof data['serviceDirectory'] === 'string' || data['serviceDirectory'] instanceof String)) {
            throw new Error("Expected the field `serviceDirectory` to be a primitive type in the JSON string but got " + data['serviceDirectory']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}
 * @member {String} conndSubscription
 */
RuntimeConfig.prototype['conndSubscription'] = undefined;

/**
 * Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id}
 * @member {String} conndTopic
 */
RuntimeConfig.prototype['conndTopic'] = undefined;

/**
 * Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}
 * @member {String} controlPlaneSubscription
 */
RuntimeConfig.prototype['controlPlaneSubscription'] = undefined;

/**
 * Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id}
 * @member {String} controlPlaneTopic
 */
RuntimeConfig.prototype['controlPlaneTopic'] = undefined;

/**
 * Output only. location_id of the runtime location. E.g. \"us-west1\".
 * @member {String} locationId
 */
RuntimeConfig.prototype['locationId'] = undefined;

/**
 * Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig
 * @member {String} name
 */
RuntimeConfig.prototype['name'] = undefined;

/**
 * Output only. The endpoint of the connectors runtime ingress.
 * @member {String} runtimeEndpoint
 */
RuntimeConfig.prototype['runtimeEndpoint'] = undefined;

/**
 * Output only. The Cloud Storage bucket that stores connector's schema reports.
 * @member {String} schemaGcsBucket
 */
RuntimeConfig.prototype['schemaGcsBucket'] = undefined;

/**
 * Output only. The name of the Service Directory service name.
 * @member {String} serviceDirectory
 */
RuntimeConfig.prototype['serviceDirectory'] = undefined;

/**
 * Output only. The state of the location.
 * @member {module:model/RuntimeConfig.StateEnum} state
 */
RuntimeConfig.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RuntimeConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "ACTIVATING"
     * @const
     */
    "ACTIVATING": "ACTIVATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING"
};



export default RuntimeConfig;

