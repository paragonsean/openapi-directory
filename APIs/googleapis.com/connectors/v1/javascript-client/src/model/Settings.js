/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Settings model module.
 * @module model/Settings
 * @version v1
 */
class Settings {
    /**
     * Constructs a new <code>Settings</code>.
     * Global Settings details.
     * @alias module:model/Settings
     */
    constructor() { 
        
        Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settings} obj Optional instance to populate.
     * @return {module:model/Settings} The populated <code>Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settings();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('payg')) {
                obj['payg'] = ApiClient.convertToType(data['payg'], 'Boolean');
            }
            if (data.hasOwnProperty('tenantProjectId')) {
                obj['tenantProjectId'] = ApiClient.convertToType(data['tenantProjectId'], 'String');
            }
            if (data.hasOwnProperty('vpcsc')) {
                obj['vpcsc'] = ApiClient.convertToType(data['vpcsc'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tenantProjectId'] && !(typeof data['tenantProjectId'] === 'string' || data['tenantProjectId'] instanceof String)) {
            throw new Error("Expected the field `tenantProjectId` to be a primitive type in the JSON string but got " + data['tenantProjectId']);
        }

        return true;
    }


}



/**
 * Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings}
 * @member {String} name
 */
Settings.prototype['name'] = undefined;

/**
 * Output only. Flag indicates if user is in PayG model
 * @member {Boolean} payg
 */
Settings.prototype['payg'] = undefined;

/**
 * Output only. Tenant project id of the consumer project.
 * @member {String} tenantProjectId
 */
Settings.prototype['tenantProjectId'] = undefined;

/**
 * Optional. Flag indicates whether vpc-sc is enabled.
 * @member {Boolean} vpcsc
 */
Settings.prototype['vpcsc'] = undefined;






export default Settings;

