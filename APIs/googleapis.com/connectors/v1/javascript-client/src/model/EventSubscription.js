/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventSubscriptionDestination from './EventSubscriptionDestination';
import EventSubscriptionStatus from './EventSubscriptionStatus';
import JMS from './JMS';

/**
 * The EventSubscription model module.
 * @module model/EventSubscription
 * @version v1
 */
class EventSubscription {
    /**
     * Constructs a new <code>EventSubscription</code>.
     * represents the Connector&#39;s EventSubscription resource
     * @alias module:model/EventSubscription
     */
    constructor() { 
        
        EventSubscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventSubscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSubscription} obj Optional instance to populate.
     * @return {module:model/EventSubscription} The populated <code>EventSubscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSubscription();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = EventSubscriptionDestination.constructFromObject(data['destinations']);
            }
            if (data.hasOwnProperty('eventTypeId')) {
                obj['eventTypeId'] = ApiClient.convertToType(data['eventTypeId'], 'String');
            }
            if (data.hasOwnProperty('jms')) {
                obj['jms'] = JMS.constructFromObject(data['jms']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EventSubscriptionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subscriber')) {
                obj['subscriber'] = ApiClient.convertToType(data['subscriber'], 'String');
            }
            if (data.hasOwnProperty('subscriberLink')) {
                obj['subscriberLink'] = ApiClient.convertToType(data['subscriberLink'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSubscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSubscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `destinations`
        if (data['destinations']) { // data not null
          EventSubscriptionDestination.validateJSON(data['destinations']);
        }
        // ensure the json data is a string
        if (data['eventTypeId'] && !(typeof data['eventTypeId'] === 'string' || data['eventTypeId'] instanceof String)) {
            throw new Error("Expected the field `eventTypeId` to be a primitive type in the JSON string but got " + data['eventTypeId']);
        }
        // validate the optional field `jms`
        if (data['jms']) { // data not null
          JMS.validateJSON(data['jms']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          EventSubscriptionStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['subscriber'] && !(typeof data['subscriber'] === 'string' || data['subscriber'] instanceof String)) {
            throw new Error("Expected the field `subscriber` to be a primitive type in the JSON string but got " + data['subscriber']);
        }
        // ensure the json data is a string
        if (data['subscriberLink'] && !(typeof data['subscriberLink'] === 'string' || data['subscriberLink'] instanceof String)) {
            throw new Error("Expected the field `subscriberLink` to be a primitive type in the JSON string but got " + data['subscriberLink']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Created time.
 * @member {String} createTime
 */
EventSubscription.prototype['createTime'] = undefined;

/**
 * @member {module:model/EventSubscriptionDestination} destinations
 */
EventSubscription.prototype['destinations'] = undefined;

/**
 * Optional. Event type id of the event of current EventSubscription.
 * @member {String} eventTypeId
 */
EventSubscription.prototype['eventTypeId'] = undefined;

/**
 * @member {module:model/JMS} jms
 */
EventSubscription.prototype['jms'] = undefined;

/**
 * Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
 * @member {String} name
 */
EventSubscription.prototype['name'] = undefined;

/**
 * @member {module:model/EventSubscriptionStatus} status
 */
EventSubscription.prototype['status'] = undefined;

/**
 * Optional. name of the Subscriber for the current EventSubscription.
 * @member {String} subscriber
 */
EventSubscription.prototype['subscriber'] = undefined;

/**
 * Optional. Link for Subscriber of the current EventSubscription.
 * @member {String} subscriberLink
 */
EventSubscription.prototype['subscriberLink'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
EventSubscription.prototype['updateTime'] = undefined;






export default EventSubscription;

