/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DestinationConfigTemplate model module.
 * @module model/DestinationConfigTemplate
 * @version v1
 */
class DestinationConfigTemplate {
    /**
     * Constructs a new <code>DestinationConfigTemplate</code>.
     * DestinationConfigTemplate defines required destinations supported by the Connector.
     * @alias module:model/DestinationConfigTemplate
     */
    constructor() { 
        
        DestinationConfigTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DestinationConfigTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DestinationConfigTemplate} obj Optional instance to populate.
     * @return {module:model/DestinationConfigTemplate} The populated <code>DestinationConfigTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DestinationConfigTemplate();

            if (data.hasOwnProperty('defaultPort')) {
                obj['defaultPort'] = ApiClient.convertToType(data['defaultPort'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isAdvanced')) {
                obj['isAdvanced'] = ApiClient.convertToType(data['isAdvanced'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'Number');
            }
            if (data.hasOwnProperty('portFieldType')) {
                obj['portFieldType'] = ApiClient.convertToType(data['portFieldType'], 'String');
            }
            if (data.hasOwnProperty('regexPattern')) {
                obj['regexPattern'] = ApiClient.convertToType(data['regexPattern'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DestinationConfigTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DestinationConfigTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['portFieldType'] && !(typeof data['portFieldType'] === 'string' || data['portFieldType'] instanceof String)) {
            throw new Error("Expected the field `portFieldType` to be a primitive type in the JSON string but got " + data['portFieldType']);
        }
        // ensure the json data is a string
        if (data['regexPattern'] && !(typeof data['regexPattern'] === 'string' || data['regexPattern'] instanceof String)) {
            throw new Error("Expected the field `regexPattern` to be a primitive type in the JSON string but got " + data['regexPattern']);
        }

        return true;
    }


}



/**
 * The default port.
 * @member {Number} defaultPort
 */
DestinationConfigTemplate.prototype['defaultPort'] = undefined;

/**
 * Description.
 * @member {String} description
 */
DestinationConfigTemplate.prototype['description'] = undefined;

/**
 * Display name of the parameter.
 * @member {String} displayName
 */
DestinationConfigTemplate.prototype['displayName'] = undefined;

/**
 * Whether the current destination tempalate is part of Advanced settings
 * @member {Boolean} isAdvanced
 */
DestinationConfigTemplate.prototype['isAdvanced'] = undefined;

/**
 * Key of the destination.
 * @member {String} key
 */
DestinationConfigTemplate.prototype['key'] = undefined;

/**
 * The maximum number of destinations supported for this key.
 * @member {Number} max
 */
DestinationConfigTemplate.prototype['max'] = undefined;

/**
 * The minimum number of destinations supported for this key.
 * @member {Number} min
 */
DestinationConfigTemplate.prototype['min'] = undefined;

/**
 * Whether port number should be provided by customers.
 * @member {module:model/DestinationConfigTemplate.PortFieldTypeEnum} portFieldType
 */
DestinationConfigTemplate.prototype['portFieldType'] = undefined;

/**
 * Regex pattern for host.
 * @member {String} regexPattern
 */
DestinationConfigTemplate.prototype['regexPattern'] = undefined;





/**
 * Allowed values for the <code>portFieldType</code> property.
 * @enum {String}
 * @readonly
 */
DestinationConfigTemplate['PortFieldTypeEnum'] = {

    /**
     * value: "FIELD_TYPE_UNSPECIFIED"
     * @const
     */
    "FIELD_TYPE_UNSPECIFIED": "FIELD_TYPE_UNSPECIFIED",

    /**
     * value: "REQUIRED"
     * @const
     */
    "REQUIRED": "REQUIRED",

    /**
     * value: "OPTIONAL"
     * @const
     */
    "OPTIONAL": "OPTIONAL",

    /**
     * value: "NOT_USED"
     * @const
     */
    "NOT_USED": "NOT_USED"
};



export default DestinationConfigTemplate;

