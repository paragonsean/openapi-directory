/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldComparison model module.
 * @module model/FieldComparison
 * @version v1
 */
class FieldComparison {
    /**
     * Constructs a new <code>FieldComparison</code>.
     * Field that needs to be compared.
     * @alias module:model/FieldComparison
     */
    constructor() { 
        
        FieldComparison.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldComparison</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldComparison} obj Optional instance to populate.
     * @return {module:model/FieldComparison} The populated <code>FieldComparison</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldComparison();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('comparator')) {
                obj['comparator'] = ApiClient.convertToType(data['comparator'], 'String');
            }
            if (data.hasOwnProperty('intValue')) {
                obj['intValue'] = ApiClient.convertToType(data['intValue'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldComparison</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldComparison</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comparator'] && !(typeof data['comparator'] === 'string' || data['comparator'] instanceof String)) {
            throw new Error("Expected the field `comparator` to be a primitive type in the JSON string but got " + data['comparator']);
        }
        // ensure the json data is a string
        if (data['intValue'] && !(typeof data['intValue'] === 'string' || data['intValue'] instanceof String)) {
            throw new Error("Expected the field `intValue` to be a primitive type in the JSON string but got " + data['intValue']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * Boolean value
 * @member {Boolean} boolValue
 */
FieldComparison.prototype['boolValue'] = undefined;

/**
 * Comparator to use for comparing the field value.
 * @member {module:model/FieldComparison.ComparatorEnum} comparator
 */
FieldComparison.prototype['comparator'] = undefined;

/**
 * Integer value
 * @member {String} intValue
 */
FieldComparison.prototype['intValue'] = undefined;

/**
 * Key of the field.
 * @member {String} key
 */
FieldComparison.prototype['key'] = undefined;

/**
 * String value
 * @member {String} stringValue
 */
FieldComparison.prototype['stringValue'] = undefined;





/**
 * Allowed values for the <code>comparator</code> property.
 * @enum {String}
 * @readonly
 */
FieldComparison['ComparatorEnum'] = {

    /**
     * value: "COMPARATOR_UNSPECIFIED"
     * @const
     */
    "COMPARATOR_UNSPECIFIED": "COMPARATOR_UNSPECIFIED",

    /**
     * value: "EQUALS"
     * @const
     */
    "EQUALS": "EQUALS",

    /**
     * value: "NOT_EQUALS"
     * @const
     */
    "NOT_EQUALS": "NOT_EQUALS"
};



export default FieldComparison;

