/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Field from './Field';
import JsonSchema from './JsonSchema';

/**
 * The RuntimeEntitySchema model module.
 * @module model/RuntimeEntitySchema
 * @version v1
 */
class RuntimeEntitySchema {
    /**
     * Constructs a new <code>RuntimeEntitySchema</code>.
     * Schema of a runtime entity.
     * @alias module:model/RuntimeEntitySchema
     */
    constructor() { 
        
        RuntimeEntitySchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeEntitySchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeEntitySchema} obj Optional instance to populate.
     * @return {module:model/RuntimeEntitySchema} The populated <code>RuntimeEntitySchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeEntitySchema();

            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('jsonSchema')) {
                obj['jsonSchema'] = JsonSchema.constructFromObject(data['jsonSchema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeEntitySchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeEntitySchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // validate the optional field `jsonSchema`
        if (data['jsonSchema']) { // data not null
          JsonSchema.validateJSON(data['jsonSchema']);
        }

        return true;
    }


}



/**
 * Output only. Name of the entity.
 * @member {String} entity
 */
RuntimeEntitySchema.prototype['entity'] = undefined;

/**
 * Output only. List of fields in the entity.
 * @member {Array.<module:model/Field>} fields
 */
RuntimeEntitySchema.prototype['fields'] = undefined;

/**
 * @member {module:model/JsonSchema} jsonSchema
 */
RuntimeEntitySchema.prototype['jsonSchema'] = undefined;






export default RuntimeEntitySchema;

