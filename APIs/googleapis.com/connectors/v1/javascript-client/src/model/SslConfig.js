/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigVariable from './ConfigVariable';
import Secret from './Secret';

/**
 * The SslConfig model module.
 * @module model/SslConfig
 * @version v1
 */
class SslConfig {
    /**
     * Constructs a new <code>SslConfig</code>.
     * SSL Configuration of a connection
     * @alias module:model/SslConfig
     */
    constructor() { 
        
        SslConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SslConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SslConfig} obj Optional instance to populate.
     * @return {module:model/SslConfig} The populated <code>SslConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SslConfig();

            if (data.hasOwnProperty('additionalVariables')) {
                obj['additionalVariables'] = ApiClient.convertToType(data['additionalVariables'], [ConfigVariable]);
            }
            if (data.hasOwnProperty('clientCertType')) {
                obj['clientCertType'] = ApiClient.convertToType(data['clientCertType'], 'String');
            }
            if (data.hasOwnProperty('clientCertificate')) {
                obj['clientCertificate'] = Secret.constructFromObject(data['clientCertificate']);
            }
            if (data.hasOwnProperty('clientPrivateKey')) {
                obj['clientPrivateKey'] = Secret.constructFromObject(data['clientPrivateKey']);
            }
            if (data.hasOwnProperty('clientPrivateKeyPass')) {
                obj['clientPrivateKeyPass'] = Secret.constructFromObject(data['clientPrivateKeyPass']);
            }
            if (data.hasOwnProperty('privateServerCertificate')) {
                obj['privateServerCertificate'] = Secret.constructFromObject(data['privateServerCertificate']);
            }
            if (data.hasOwnProperty('serverCertType')) {
                obj['serverCertType'] = ApiClient.convertToType(data['serverCertType'], 'String');
            }
            if (data.hasOwnProperty('trustModel')) {
                obj['trustModel'] = ApiClient.convertToType(data['trustModel'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('useSsl')) {
                obj['useSsl'] = ApiClient.convertToType(data['useSsl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SslConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SslConfig</code>.
     */
    static validateJSON(data) {
        if (data['additionalVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalVariables'])) {
                throw new Error("Expected the field `additionalVariables` to be an array in the JSON data but got " + data['additionalVariables']);
            }
            // validate the optional field `additionalVariables` (array)
            for (const item of data['additionalVariables']) {
                ConfigVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['clientCertType'] && !(typeof data['clientCertType'] === 'string' || data['clientCertType'] instanceof String)) {
            throw new Error("Expected the field `clientCertType` to be a primitive type in the JSON string but got " + data['clientCertType']);
        }
        // validate the optional field `clientCertificate`
        if (data['clientCertificate']) { // data not null
          Secret.validateJSON(data['clientCertificate']);
        }
        // validate the optional field `clientPrivateKey`
        if (data['clientPrivateKey']) { // data not null
          Secret.validateJSON(data['clientPrivateKey']);
        }
        // validate the optional field `clientPrivateKeyPass`
        if (data['clientPrivateKeyPass']) { // data not null
          Secret.validateJSON(data['clientPrivateKeyPass']);
        }
        // validate the optional field `privateServerCertificate`
        if (data['privateServerCertificate']) { // data not null
          Secret.validateJSON(data['privateServerCertificate']);
        }
        // ensure the json data is a string
        if (data['serverCertType'] && !(typeof data['serverCertType'] === 'string' || data['serverCertType'] instanceof String)) {
            throw new Error("Expected the field `serverCertType` to be a primitive type in the JSON string but got " + data['serverCertType']);
        }
        // ensure the json data is a string
        if (data['trustModel'] && !(typeof data['trustModel'] === 'string' || data['trustModel'] instanceof String)) {
            throw new Error("Expected the field `trustModel` to be a primitive type in the JSON string but got " + data['trustModel']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Additional SSL related field values
 * @member {Array.<module:model/ConfigVariable>} additionalVariables
 */
SslConfig.prototype['additionalVariables'] = undefined;

/**
 * Type of Client Cert (PEM/JKS/.. etc.)
 * @member {module:model/SslConfig.ClientCertTypeEnum} clientCertType
 */
SslConfig.prototype['clientCertType'] = undefined;

/**
 * @member {module:model/Secret} clientCertificate
 */
SslConfig.prototype['clientCertificate'] = undefined;

/**
 * @member {module:model/Secret} clientPrivateKey
 */
SslConfig.prototype['clientPrivateKey'] = undefined;

/**
 * @member {module:model/Secret} clientPrivateKeyPass
 */
SslConfig.prototype['clientPrivateKeyPass'] = undefined;

/**
 * @member {module:model/Secret} privateServerCertificate
 */
SslConfig.prototype['privateServerCertificate'] = undefined;

/**
 * Type of Server Cert (PEM/JKS/.. etc.)
 * @member {module:model/SslConfig.ServerCertTypeEnum} serverCertType
 */
SslConfig.prototype['serverCertType'] = undefined;

/**
 * Trust Model of the SSL connection
 * @member {module:model/SslConfig.TrustModelEnum} trustModel
 */
SslConfig.prototype['trustModel'] = undefined;

/**
 * Controls the ssl type for the given connector version.
 * @member {module:model/SslConfig.TypeEnum} type
 */
SslConfig.prototype['type'] = undefined;

/**
 * Bool for enabling SSL
 * @member {Boolean} useSsl
 */
SslConfig.prototype['useSsl'] = undefined;





/**
 * Allowed values for the <code>clientCertType</code> property.
 * @enum {String}
 * @readonly
 */
SslConfig['ClientCertTypeEnum'] = {

    /**
     * value: "CERT_TYPE_UNSPECIFIED"
     * @const
     */
    "CERT_TYPE_UNSPECIFIED": "CERT_TYPE_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM"
};


/**
 * Allowed values for the <code>serverCertType</code> property.
 * @enum {String}
 * @readonly
 */
SslConfig['ServerCertTypeEnum'] = {

    /**
     * value: "CERT_TYPE_UNSPECIFIED"
     * @const
     */
    "CERT_TYPE_UNSPECIFIED": "CERT_TYPE_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM"
};


/**
 * Allowed values for the <code>trustModel</code> property.
 * @enum {String}
 * @readonly
 */
SslConfig['TrustModelEnum'] = {

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE",

    /**
     * value: "INSECURE"
     * @const
     */
    "INSECURE": "INSECURE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SslConfig['TypeEnum'] = {

    /**
     * value: "SSL_TYPE_UNSPECIFIED"
     * @const
     */
    "SSL_TYPE_UNSPECIFIED": "SSL_TYPE_UNSPECIFIED",

    /**
     * value: "TLS"
     * @const
     */
    "TLS": "TLS",

    /**
     * value: "MTLS"
     * @const
     */
    "MTLS": "MTLS"
};



export default SslConfig;

