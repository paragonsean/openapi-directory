/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedZone model module.
 * @module model/ManagedZone
 * @version v1
 */
class ManagedZone {
    /**
     * Constructs a new <code>ManagedZone</code>.
     * represents the Connector&#39;s Managed Zone resource
     * @alias module:model/ManagedZone
     */
    constructor() { 
        
        ManagedZone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedZone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedZone} obj Optional instance to populate.
     * @return {module:model/ManagedZone} The populated <code>ManagedZone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedZone();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('targetProject')) {
                obj['targetProject'] = ApiClient.convertToType(data['targetProject'], 'String');
            }
            if (data.hasOwnProperty('targetVpc')) {
                obj['targetVpc'] = ApiClient.convertToType(data['targetVpc'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedZone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedZone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dns'] && !(typeof data['dns'] === 'string' || data['dns'] instanceof String)) {
            throw new Error("Expected the field `dns` to be a primitive type in the JSON string but got " + data['dns']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['targetProject'] && !(typeof data['targetProject'] === 'string' || data['targetProject'] instanceof String)) {
            throw new Error("Expected the field `targetProject` to be a primitive type in the JSON string but got " + data['targetProject']);
        }
        // ensure the json data is a string
        if (data['targetVpc'] && !(typeof data['targetVpc'] === 'string' || data['targetVpc'] instanceof String)) {
            throw new Error("Expected the field `targetVpc` to be a primitive type in the JSON string but got " + data['targetVpc']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Created time.
 * @member {String} createTime
 */
ManagedZone.prototype['createTime'] = undefined;

/**
 * Optional. Description of the resource.
 * @member {String} description
 */
ManagedZone.prototype['description'] = undefined;

/**
 * Required. DNS Name of the resource
 * @member {String} dns
 */
ManagedZone.prototype['dns'] = undefined;

/**
 * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
 * @member {Object.<String, String>} labels
 */
ManagedZone.prototype['labels'] = undefined;

/**
 * Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone}
 * @member {String} name
 */
ManagedZone.prototype['name'] = undefined;

/**
 * Required. The name of the Target Project
 * @member {String} targetProject
 */
ManagedZone.prototype['targetProject'] = undefined;

/**
 * Required. The name of the Target Project VPC Network
 * @member {String} targetVpc
 */
ManagedZone.prototype['targetVpc'] = undefined;

/**
 * Output only. Updated time.
 * @member {String} updateTime
 */
ManagedZone.prototype['updateTime'] = undefined;






export default ManagedZone;

