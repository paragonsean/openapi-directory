/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Secret from './Secret';

/**
 * The SshPublicKey model module.
 * @module model/SshPublicKey
 * @version v1
 */
class SshPublicKey {
    /**
     * Constructs a new <code>SshPublicKey</code>.
     * Parameters to support Ssh public key Authentication.
     * @alias module:model/SshPublicKey
     */
    constructor() { 
        
        SshPublicKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SshPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SshPublicKey} obj Optional instance to populate.
     * @return {module:model/SshPublicKey} The populated <code>SshPublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SshPublicKey();

            if (data.hasOwnProperty('certType')) {
                obj['certType'] = ApiClient.convertToType(data['certType'], 'String');
            }
            if (data.hasOwnProperty('sshClientCert')) {
                obj['sshClientCert'] = Secret.constructFromObject(data['sshClientCert']);
            }
            if (data.hasOwnProperty('sshClientCertPass')) {
                obj['sshClientCertPass'] = Secret.constructFromObject(data['sshClientCertPass']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SshPublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SshPublicKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certType'] && !(typeof data['certType'] === 'string' || data['certType'] instanceof String)) {
            throw new Error("Expected the field `certType` to be a primitive type in the JSON string but got " + data['certType']);
        }
        // validate the optional field `sshClientCert`
        if (data['sshClientCert']) { // data not null
          Secret.validateJSON(data['sshClientCert']);
        }
        // validate the optional field `sshClientCertPass`
        if (data['sshClientCertPass']) { // data not null
          Secret.validateJSON(data['sshClientCertPass']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Format of SSH Client cert.
 * @member {String} certType
 */
SshPublicKey.prototype['certType'] = undefined;

/**
 * @member {module:model/Secret} sshClientCert
 */
SshPublicKey.prototype['sshClientCert'] = undefined;

/**
 * @member {module:model/Secret} sshClientCertPass
 */
SshPublicKey.prototype['sshClientCertPass'] = undefined;

/**
 * The user account used to authenticate.
 * @member {String} username
 */
SshPublicKey.prototype['username'] = undefined;






export default SshPublicKey;

