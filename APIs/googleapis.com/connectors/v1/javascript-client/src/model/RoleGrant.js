/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Resource from './Resource';

/**
 * The RoleGrant model module.
 * @module model/RoleGrant
 * @version v1
 */
class RoleGrant {
    /**
     * Constructs a new <code>RoleGrant</code>.
     * This configuration defines all the Cloud IAM roles that needs to be granted to a particular Google Cloud resource for the selected principal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a &#39;grant&#39; button to do the same on behalf of the user.
     * @alias module:model/RoleGrant
     */
    constructor() { 
        
        RoleGrant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoleGrant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleGrant} obj Optional instance to populate.
     * @return {module:model/RoleGrant} The populated <code>RoleGrant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleGrant();

            if (data.hasOwnProperty('helperTextTemplate')) {
                obj['helperTextTemplate'] = ApiClient.convertToType(data['helperTextTemplate'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = Resource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleGrant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleGrant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['helperTextTemplate'] && !(typeof data['helperTextTemplate'] === 'string' || data['helperTextTemplate'] instanceof String)) {
            throw new Error("Expected the field `helperTextTemplate` to be a primitive type in the JSON string but got " + data['helperTextTemplate']);
        }
        // ensure the json data is a string
        if (data['principal'] && !(typeof data['principal'] === 'string' || data['principal'] instanceof String)) {
            throw new Error("Expected the field `principal` to be a primitive type in the JSON string but got " + data['principal']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          Resource.validateJSON(data['resource']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * Template that UI can use to provide helper text to customers.
 * @member {String} helperTextTemplate
 */
RoleGrant.prototype['helperTextTemplate'] = undefined;

/**
 * Prinicipal/Identity for whom the role need to assigned.
 * @member {module:model/RoleGrant.PrincipalEnum} principal
 */
RoleGrant.prototype['principal'] = undefined;

/**
 * @member {module:model/Resource} resource
 */
RoleGrant.prototype['resource'] = undefined;

/**
 * List of roles that need to be granted.
 * @member {Array.<String>} roles
 */
RoleGrant.prototype['roles'] = undefined;





/**
 * Allowed values for the <code>principal</code> property.
 * @enum {String}
 * @readonly
 */
RoleGrant['PrincipalEnum'] = {

    /**
     * value: "PRINCIPAL_UNSPECIFIED"
     * @const
     */
    "PRINCIPAL_UNSPECIFIED": "PRINCIPAL_UNSPECIFIED",

    /**
     * value: "CONNECTOR_SA"
     * @const
     */
    "CONNECTOR_SA": "CONNECTOR_SA"
};



export default RoleGrant;

