/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JwtClaims from './JwtClaims';
import Secret from './Secret';

/**
 * The Oauth2JwtBearer model module.
 * @module model/Oauth2JwtBearer
 * @version v1
 */
class Oauth2JwtBearer {
    /**
     * Constructs a new <code>Oauth2JwtBearer</code>.
     * Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
     * @alias module:model/Oauth2JwtBearer
     */
    constructor() { 
        
        Oauth2JwtBearer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Oauth2JwtBearer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Oauth2JwtBearer} obj Optional instance to populate.
     * @return {module:model/Oauth2JwtBearer} The populated <code>Oauth2JwtBearer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Oauth2JwtBearer();

            if (data.hasOwnProperty('clientKey')) {
                obj['clientKey'] = Secret.constructFromObject(data['clientKey']);
            }
            if (data.hasOwnProperty('jwtClaims')) {
                obj['jwtClaims'] = JwtClaims.constructFromObject(data['jwtClaims']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Oauth2JwtBearer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Oauth2JwtBearer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `clientKey`
        if (data['clientKey']) { // data not null
          Secret.validateJSON(data['clientKey']);
        }
        // validate the optional field `jwtClaims`
        if (data['jwtClaims']) { // data not null
          JwtClaims.validateJSON(data['jwtClaims']);
        }

        return true;
    }


}



/**
 * @member {module:model/Secret} clientKey
 */
Oauth2JwtBearer.prototype['clientKey'] = undefined;

/**
 * @member {module:model/JwtClaims} jwtClaims
 */
Oauth2JwtBearer.prototype['jwtClaims'] = undefined;






export default Oauth2JwtBearer;

