/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthConfigTemplate from './AuthConfigTemplate';
import ConfigVariableTemplate from './ConfigVariableTemplate';
import DestinationConfigTemplate from './DestinationConfigTemplate';

/**
 * The EventingConfigTemplate model module.
 * @module model/EventingConfigTemplate
 * @version v1
 */
class EventingConfigTemplate {
    /**
     * Constructs a new <code>EventingConfigTemplate</code>.
     * Eventing Config details of a connector version.
     * @alias module:model/EventingConfigTemplate
     */
    constructor() { 
        
        EventingConfigTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventingConfigTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventingConfigTemplate} obj Optional instance to populate.
     * @return {module:model/EventingConfigTemplate} The populated <code>EventingConfigTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventingConfigTemplate();

            if (data.hasOwnProperty('additionalVariables')) {
                obj['additionalVariables'] = ApiClient.convertToType(data['additionalVariables'], [ConfigVariableTemplate]);
            }
            if (data.hasOwnProperty('authConfigTemplates')) {
                obj['authConfigTemplates'] = ApiClient.convertToType(data['authConfigTemplates'], [AuthConfigTemplate]);
            }
            if (data.hasOwnProperty('autoRefresh')) {
                obj['autoRefresh'] = ApiClient.convertToType(data['autoRefresh'], 'Boolean');
            }
            if (data.hasOwnProperty('autoRegistrationSupported')) {
                obj['autoRegistrationSupported'] = ApiClient.convertToType(data['autoRegistrationSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionKeyTemplate')) {
                obj['encryptionKeyTemplate'] = ConfigVariableTemplate.constructFromObject(data['encryptionKeyTemplate']);
            }
            if (data.hasOwnProperty('enrichmentSupported')) {
                obj['enrichmentSupported'] = ApiClient.convertToType(data['enrichmentSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('eventListenerType')) {
                obj['eventListenerType'] = ApiClient.convertToType(data['eventListenerType'], 'String');
            }
            if (data.hasOwnProperty('isEventingSupported')) {
                obj['isEventingSupported'] = ApiClient.convertToType(data['isEventingSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('listenerAuthConfigTemplates')) {
                obj['listenerAuthConfigTemplates'] = ApiClient.convertToType(data['listenerAuthConfigTemplates'], [AuthConfigTemplate]);
            }
            if (data.hasOwnProperty('proxyDestinationConfig')) {
                obj['proxyDestinationConfig'] = DestinationConfigTemplate.constructFromObject(data['proxyDestinationConfig']);
            }
            if (data.hasOwnProperty('registrationDestinationConfig')) {
                obj['registrationDestinationConfig'] = DestinationConfigTemplate.constructFromObject(data['registrationDestinationConfig']);
            }
            if (data.hasOwnProperty('triggerConfigVariables')) {
                obj['triggerConfigVariables'] = ApiClient.convertToType(data['triggerConfigVariables'], [ConfigVariableTemplate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventingConfigTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventingConfigTemplate</code>.
     */
    static validateJSON(data) {
        if (data['additionalVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalVariables'])) {
                throw new Error("Expected the field `additionalVariables` to be an array in the JSON data but got " + data['additionalVariables']);
            }
            // validate the optional field `additionalVariables` (array)
            for (const item of data['additionalVariables']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }
        if (data['authConfigTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authConfigTemplates'])) {
                throw new Error("Expected the field `authConfigTemplates` to be an array in the JSON data but got " + data['authConfigTemplates']);
            }
            // validate the optional field `authConfigTemplates` (array)
            for (const item of data['authConfigTemplates']) {
                AuthConfigTemplate.validateJSON(item);
            };
        }
        // validate the optional field `encryptionKeyTemplate`
        if (data['encryptionKeyTemplate']) { // data not null
          ConfigVariableTemplate.validateJSON(data['encryptionKeyTemplate']);
        }
        // ensure the json data is a string
        if (data['eventListenerType'] && !(typeof data['eventListenerType'] === 'string' || data['eventListenerType'] instanceof String)) {
            throw new Error("Expected the field `eventListenerType` to be a primitive type in the JSON string but got " + data['eventListenerType']);
        }
        if (data['listenerAuthConfigTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listenerAuthConfigTemplates'])) {
                throw new Error("Expected the field `listenerAuthConfigTemplates` to be an array in the JSON data but got " + data['listenerAuthConfigTemplates']);
            }
            // validate the optional field `listenerAuthConfigTemplates` (array)
            for (const item of data['listenerAuthConfigTemplates']) {
                AuthConfigTemplate.validateJSON(item);
            };
        }
        // validate the optional field `proxyDestinationConfig`
        if (data['proxyDestinationConfig']) { // data not null
          DestinationConfigTemplate.validateJSON(data['proxyDestinationConfig']);
        }
        // validate the optional field `registrationDestinationConfig`
        if (data['registrationDestinationConfig']) { // data not null
          DestinationConfigTemplate.validateJSON(data['registrationDestinationConfig']);
        }
        if (data['triggerConfigVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggerConfigVariables'])) {
                throw new Error("Expected the field `triggerConfigVariables` to be an array in the JSON data but got " + data['triggerConfigVariables']);
            }
            // validate the optional field `triggerConfigVariables` (array)
            for (const item of data['triggerConfigVariables']) {
                ConfigVariableTemplate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Additional fields that need to be rendered.
 * @member {Array.<module:model/ConfigVariableTemplate>} additionalVariables
 */
EventingConfigTemplate.prototype['additionalVariables'] = undefined;

/**
 * AuthConfigTemplates represents the auth values for the webhook adapter.
 * @member {Array.<module:model/AuthConfigTemplate>} authConfigTemplates
 */
EventingConfigTemplate.prototype['authConfigTemplates'] = undefined;

/**
 * Auto refresh to extend webhook life.
 * @member {Boolean} autoRefresh
 */
EventingConfigTemplate.prototype['autoRefresh'] = undefined;

/**
 * Auto Registration supported.
 * @member {Boolean} autoRegistrationSupported
 */
EventingConfigTemplate.prototype['autoRegistrationSupported'] = undefined;

/**
 * @member {module:model/ConfigVariableTemplate} encryptionKeyTemplate
 */
EventingConfigTemplate.prototype['encryptionKeyTemplate'] = undefined;

/**
 * Enrichment Supported.
 * @member {Boolean} enrichmentSupported
 */
EventingConfigTemplate.prototype['enrichmentSupported'] = undefined;

/**
 * The type of the event listener for a specific connector.
 * @member {module:model/EventingConfigTemplate.EventListenerTypeEnum} eventListenerType
 */
EventingConfigTemplate.prototype['eventListenerType'] = undefined;

/**
 * Is Eventing Supported.
 * @member {Boolean} isEventingSupported
 */
EventingConfigTemplate.prototype['isEventingSupported'] = undefined;

/**
 * ListenerAuthConfigTemplates represents the auth values for the event listener.
 * @member {Array.<module:model/AuthConfigTemplate>} listenerAuthConfigTemplates
 */
EventingConfigTemplate.prototype['listenerAuthConfigTemplates'] = undefined;

/**
 * @member {module:model/DestinationConfigTemplate} proxyDestinationConfig
 */
EventingConfigTemplate.prototype['proxyDestinationConfig'] = undefined;

/**
 * @member {module:model/DestinationConfigTemplate} registrationDestinationConfig
 */
EventingConfigTemplate.prototype['registrationDestinationConfig'] = undefined;

/**
 * Trigger Config fields that needs to be rendered
 * @member {Array.<module:model/ConfigVariableTemplate>} triggerConfigVariables
 */
EventingConfigTemplate.prototype['triggerConfigVariables'] = undefined;





/**
 * Allowed values for the <code>eventListenerType</code> property.
 * @enum {String}
 * @readonly
 */
EventingConfigTemplate['EventListenerTypeEnum'] = {

    /**
     * value: "EVENT_LISTENER_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_LISTENER_TYPE_UNSPECIFIED": "EVENT_LISTENER_TYPE_UNSPECIFIED",

    /**
     * value: "WEBHOOK_LISTENER"
     * @const
     */
    "WEBHOOK_LISTENER": "WEBHOOK_LISTENER",

    /**
     * value: "JMS_LISTENER"
     * @const
     */
    "JMS_LISTENER": "JMS_LISTENER"
};



export default EventingConfigTemplate;

