/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthConfig from './AuthConfig';
import ConfigVariable from './ConfigVariable';
import DeadLetterConfig from './DeadLetterConfig';
import DestinationConfig from './DestinationConfig';

/**
 * The EventingConfig model module.
 * @module model/EventingConfig
 * @version v1
 */
class EventingConfig {
    /**
     * Constructs a new <code>EventingConfig</code>.
     * Eventing Configuration of a connection
     * @alias module:model/EventingConfig
     */
    constructor() { 
        
        EventingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventingConfig} obj Optional instance to populate.
     * @return {module:model/EventingConfig} The populated <code>EventingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventingConfig();

            if (data.hasOwnProperty('additionalVariables')) {
                obj['additionalVariables'] = ApiClient.convertToType(data['additionalVariables'], [ConfigVariable]);
            }
            if (data.hasOwnProperty('authConfig')) {
                obj['authConfig'] = AuthConfig.constructFromObject(data['authConfig']);
            }
            if (data.hasOwnProperty('deadLetterConfig')) {
                obj['deadLetterConfig'] = DeadLetterConfig.constructFromObject(data['deadLetterConfig']);
            }
            if (data.hasOwnProperty('enrichmentEnabled')) {
                obj['enrichmentEnabled'] = ApiClient.convertToType(data['enrichmentEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('eventsListenerIngressEndpoint')) {
                obj['eventsListenerIngressEndpoint'] = ApiClient.convertToType(data['eventsListenerIngressEndpoint'], 'String');
            }
            if (data.hasOwnProperty('listenerAuthConfig')) {
                obj['listenerAuthConfig'] = AuthConfig.constructFromObject(data['listenerAuthConfig']);
            }
            if (data.hasOwnProperty('privateConnectivityEnabled')) {
                obj['privateConnectivityEnabled'] = ApiClient.convertToType(data['privateConnectivityEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('proxyDestinationConfig')) {
                obj['proxyDestinationConfig'] = DestinationConfig.constructFromObject(data['proxyDestinationConfig']);
            }
            if (data.hasOwnProperty('registrationDestinationConfig')) {
                obj['registrationDestinationConfig'] = DestinationConfig.constructFromObject(data['registrationDestinationConfig']);
            }
            if (data.hasOwnProperty('triggerConfigVariables')) {
                obj['triggerConfigVariables'] = ApiClient.convertToType(data['triggerConfigVariables'], [ConfigVariable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventingConfig</code>.
     */
    static validateJSON(data) {
        if (data['additionalVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalVariables'])) {
                throw new Error("Expected the field `additionalVariables` to be an array in the JSON data but got " + data['additionalVariables']);
            }
            // validate the optional field `additionalVariables` (array)
            for (const item of data['additionalVariables']) {
                ConfigVariable.validateJSON(item);
            };
        }
        // validate the optional field `authConfig`
        if (data['authConfig']) { // data not null
          AuthConfig.validateJSON(data['authConfig']);
        }
        // validate the optional field `deadLetterConfig`
        if (data['deadLetterConfig']) { // data not null
          DeadLetterConfig.validateJSON(data['deadLetterConfig']);
        }
        // ensure the json data is a string
        if (data['eventsListenerIngressEndpoint'] && !(typeof data['eventsListenerIngressEndpoint'] === 'string' || data['eventsListenerIngressEndpoint'] instanceof String)) {
            throw new Error("Expected the field `eventsListenerIngressEndpoint` to be a primitive type in the JSON string but got " + data['eventsListenerIngressEndpoint']);
        }
        // validate the optional field `listenerAuthConfig`
        if (data['listenerAuthConfig']) { // data not null
          AuthConfig.validateJSON(data['listenerAuthConfig']);
        }
        // validate the optional field `proxyDestinationConfig`
        if (data['proxyDestinationConfig']) { // data not null
          DestinationConfig.validateJSON(data['proxyDestinationConfig']);
        }
        // validate the optional field `registrationDestinationConfig`
        if (data['registrationDestinationConfig']) { // data not null
          DestinationConfig.validateJSON(data['registrationDestinationConfig']);
        }
        if (data['triggerConfigVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggerConfigVariables'])) {
                throw new Error("Expected the field `triggerConfigVariables` to be an array in the JSON data but got " + data['triggerConfigVariables']);
            }
            // validate the optional field `triggerConfigVariables` (array)
            for (const item of data['triggerConfigVariables']) {
                ConfigVariable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Additional eventing related field values
 * @member {Array.<module:model/ConfigVariable>} additionalVariables
 */
EventingConfig.prototype['additionalVariables'] = undefined;

/**
 * @member {module:model/AuthConfig} authConfig
 */
EventingConfig.prototype['authConfig'] = undefined;

/**
 * @member {module:model/DeadLetterConfig} deadLetterConfig
 */
EventingConfig.prototype['deadLetterConfig'] = undefined;

/**
 * Enrichment Enabled.
 * @member {Boolean} enrichmentEnabled
 */
EventingConfig.prototype['enrichmentEnabled'] = undefined;

/**
 * Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
 * @member {String} eventsListenerIngressEndpoint
 */
EventingConfig.prototype['eventsListenerIngressEndpoint'] = undefined;

/**
 * @member {module:model/AuthConfig} listenerAuthConfig
 */
EventingConfig.prototype['listenerAuthConfig'] = undefined;

/**
 * Optional. Private Connectivity Enabled.
 * @member {Boolean} privateConnectivityEnabled
 */
EventingConfig.prototype['privateConnectivityEnabled'] = undefined;

/**
 * @member {module:model/DestinationConfig} proxyDestinationConfig
 */
EventingConfig.prototype['proxyDestinationConfig'] = undefined;

/**
 * @member {module:model/DestinationConfig} registrationDestinationConfig
 */
EventingConfig.prototype['registrationDestinationConfig'] = undefined;

/**
 * Optional. Additional eventing related field values
 * @member {Array.<module:model/ConfigVariable>} triggerConfigVariables
 */
EventingConfig.prototype['triggerConfigVariables'] = undefined;






export default EventingConfig;

