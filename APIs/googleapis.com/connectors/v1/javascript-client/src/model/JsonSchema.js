/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonSchema model module.
 * @module model/JsonSchema
 * @version v1
 */
class JsonSchema {
    /**
     * Constructs a new <code>JsonSchema</code>.
     * JsonSchema representation of schema metadata
     * @alias module:model/JsonSchema
     */
    constructor() { 
        
        JsonSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonSchema} obj Optional instance to populate.
     * @return {module:model/JsonSchema} The populated <code>JsonSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonSchema();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], [Object]);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = JsonSchema.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('jdbcType')) {
                obj['jdbcType'] = ApiClient.convertToType(data['jdbcType'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': JsonSchema});
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enum'])) {
            throw new Error("Expected the field `enum` to be an array in the JSON data but got " + data['enum']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          JsonSchema.validateJSON(data['items']);
        }
        // ensure the json data is a string
        if (data['jdbcType'] && !(typeof data['jdbcType'] === 'string' || data['jdbcType'] instanceof String)) {
            throw new Error("Expected the field `jdbcType` to be a primitive type in the JSON string but got " + data['jdbcType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required'])) {
            throw new Error("Expected the field `required` to be an array in the JSON data but got " + data['required']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['type'])) {
            throw new Error("Expected the field `type` to be an array in the JSON data but got " + data['type']);
        }

        return true;
    }


}



/**
 * A description of this schema.
 * @member {String} description
 */
JsonSchema.prototype['description'] = undefined;

/**
 * Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values
 * @member {Array.<Object>} enum
 */
JsonSchema.prototype['enum'] = undefined;

/**
 * Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format
 * @member {String} format
 */
JsonSchema.prototype['format'] = undefined;

/**
 * @member {module:model/JsonSchema} items
 */
JsonSchema.prototype['items'] = undefined;

/**
 * JDBC datatype of the field.
 * @member {module:model/JsonSchema.JdbcTypeEnum} jdbcType
 */
JsonSchema.prototype['jdbcType'] = undefined;

/**
 * The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property
 * @member {Object.<String, module:model/JsonSchema>} properties
 */
JsonSchema.prototype['properties'] = undefined;

/**
 * Whether this property is required.
 * @member {Array.<String>} required
 */
JsonSchema.prototype['required'] = undefined;

/**
 * JSON Schema Validation: A Vocabulary for Structural Validation of JSON
 * @member {Array.<String>} type
 */
JsonSchema.prototype['type'] = undefined;





/**
 * Allowed values for the <code>jdbcType</code> property.
 * @enum {String}
 * @readonly
 */
JsonSchema['JdbcTypeEnum'] = {

    /**
     * value: "DATA_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATA_TYPE_UNSPECIFIED",

    /**
     * value: "DATA_TYPE_INT"
     * @const
     */
    "INT": "DATA_TYPE_INT",

    /**
     * value: "DATA_TYPE_SMALLINT"
     * @const
     */
    "SMALLINT": "DATA_TYPE_SMALLINT",

    /**
     * value: "DATA_TYPE_DOUBLE"
     * @const
     */
    "DOUBLE": "DATA_TYPE_DOUBLE",

    /**
     * value: "DATA_TYPE_DATE"
     * @const
     */
    "DATE": "DATA_TYPE_DATE",

    /**
     * value: "DATA_TYPE_DATETIME"
     * @const
     */
    "DATETIME": "DATA_TYPE_DATETIME",

    /**
     * value: "DATA_TYPE_TIME"
     * @const
     */
    "TIME": "DATA_TYPE_TIME",

    /**
     * value: "DATA_TYPE_STRING"
     * @const
     */
    "STRING": "DATA_TYPE_STRING",

    /**
     * value: "DATA_TYPE_LONG"
     * @const
     */
    "LONG": "DATA_TYPE_LONG",

    /**
     * value: "DATA_TYPE_BOOLEAN"
     * @const
     */
    "BOOLEAN": "DATA_TYPE_BOOLEAN",

    /**
     * value: "DATA_TYPE_DECIMAL"
     * @const
     */
    "DECIMAL": "DATA_TYPE_DECIMAL",

    /**
     * value: "DATA_TYPE_UUID"
     * @const
     */
    "UUID": "DATA_TYPE_UUID",

    /**
     * value: "DATA_TYPE_BLOB"
     * @const
     */
    "BLOB": "DATA_TYPE_BLOB",

    /**
     * value: "DATA_TYPE_BIT"
     * @const
     */
    "BIT": "DATA_TYPE_BIT",

    /**
     * value: "DATA_TYPE_TINYINT"
     * @const
     */
    "TINYINT": "DATA_TYPE_TINYINT",

    /**
     * value: "DATA_TYPE_INTEGER"
     * @const
     */
    "INTEGER": "DATA_TYPE_INTEGER",

    /**
     * value: "DATA_TYPE_BIGINT"
     * @const
     */
    "BIGINT": "DATA_TYPE_BIGINT",

    /**
     * value: "DATA_TYPE_FLOAT"
     * @const
     */
    "FLOAT": "DATA_TYPE_FLOAT",

    /**
     * value: "DATA_TYPE_REAL"
     * @const
     */
    "REAL": "DATA_TYPE_REAL",

    /**
     * value: "DATA_TYPE_NUMERIC"
     * @const
     */
    "NUMERIC": "DATA_TYPE_NUMERIC",

    /**
     * value: "DATA_TYPE_CHAR"
     * @const
     */
    "CHAR": "DATA_TYPE_CHAR",

    /**
     * value: "DATA_TYPE_VARCHAR"
     * @const
     */
    "VARCHAR": "DATA_TYPE_VARCHAR",

    /**
     * value: "DATA_TYPE_LONGVARCHAR"
     * @const
     */
    "LONGVARCHAR": "DATA_TYPE_LONGVARCHAR",

    /**
     * value: "DATA_TYPE_TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "DATA_TYPE_TIMESTAMP",

    /**
     * value: "DATA_TYPE_NCHAR"
     * @const
     */
    "NCHAR": "DATA_TYPE_NCHAR",

    /**
     * value: "DATA_TYPE_NVARCHAR"
     * @const
     */
    "NVARCHAR": "DATA_TYPE_NVARCHAR",

    /**
     * value: "DATA_TYPE_LONGNVARCHAR"
     * @const
     */
    "LONGNVARCHAR": "DATA_TYPE_LONGNVARCHAR",

    /**
     * value: "DATA_TYPE_NULL"
     * @const
     */
    "NULL": "DATA_TYPE_NULL",

    /**
     * value: "DATA_TYPE_OTHER"
     * @const
     */
    "OTHER": "DATA_TYPE_OTHER",

    /**
     * value: "DATA_TYPE_JAVA_OBJECT"
     * @const
     */
    "JAVA_OBJECT": "DATA_TYPE_JAVA_OBJECT",

    /**
     * value: "DATA_TYPE_DISTINCT"
     * @const
     */
    "DISTINCT": "DATA_TYPE_DISTINCT",

    /**
     * value: "DATA_TYPE_STRUCT"
     * @const
     */
    "STRUCT": "DATA_TYPE_STRUCT",

    /**
     * value: "DATA_TYPE_ARRAY"
     * @const
     */
    "ARRAY": "DATA_TYPE_ARRAY",

    /**
     * value: "DATA_TYPE_CLOB"
     * @const
     */
    "CLOB": "DATA_TYPE_CLOB",

    /**
     * value: "DATA_TYPE_REF"
     * @const
     */
    "REF": "DATA_TYPE_REF",

    /**
     * value: "DATA_TYPE_DATALINK"
     * @const
     */
    "DATALINK": "DATA_TYPE_DATALINK",

    /**
     * value: "DATA_TYPE_ROWID"
     * @const
     */
    "ROWID": "DATA_TYPE_ROWID",

    /**
     * value: "DATA_TYPE_BINARY"
     * @const
     */
    "BINARY": "DATA_TYPE_BINARY",

    /**
     * value: "DATA_TYPE_VARBINARY"
     * @const
     */
    "VARBINARY": "DATA_TYPE_VARBINARY",

    /**
     * value: "DATA_TYPE_LONGVARBINARY"
     * @const
     */
    "LONGVARBINARY": "DATA_TYPE_LONGVARBINARY",

    /**
     * value: "DATA_TYPE_NCLOB"
     * @const
     */
    "NCLOB": "DATA_TYPE_NCLOB",

    /**
     * value: "DATA_TYPE_SQLXML"
     * @const
     */
    "SQLXML": "DATA_TYPE_SQLXML",

    /**
     * value: "DATA_TYPE_REF_CURSOR"
     * @const
     */
    "REF_CURSOR": "DATA_TYPE_REF_CURSOR",

    /**
     * value: "DATA_TYPE_TIME_WITH_TIMEZONE"
     * @const
     */
    "TIME_WITH_TIMEZONE": "DATA_TYPE_TIME_WITH_TIMEZONE",

    /**
     * value: "DATA_TYPE_TIMESTAMP_WITH_TIMEZONE"
     * @const
     */
    "TIMESTAMP_WITH_TIMEZONE": "DATA_TYPE_TIMESTAMP_WITH_TIMEZONE"
};



export default JsonSchema;

