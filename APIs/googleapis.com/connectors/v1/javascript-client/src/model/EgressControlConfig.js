/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtractionRules from './ExtractionRules';

/**
 * The EgressControlConfig model module.
 * @module model/EgressControlConfig
 * @version v1
 */
class EgressControlConfig {
    /**
     * Constructs a new <code>EgressControlConfig</code>.
     * Egress control config for connector runtime. These configurations define the rules to identify which outbound domains/hosts needs to be whitelisted. It may be a static information for a particular connector version or it is derived from the configurations provided by the customer in Connection resource.
     * @alias module:model/EgressControlConfig
     */
    constructor() { 
        
        EgressControlConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EgressControlConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EgressControlConfig} obj Optional instance to populate.
     * @return {module:model/EgressControlConfig} The populated <code>EgressControlConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EgressControlConfig();

            if (data.hasOwnProperty('backends')) {
                obj['backends'] = ApiClient.convertToType(data['backends'], 'String');
            }
            if (data.hasOwnProperty('extractionRules')) {
                obj['extractionRules'] = ExtractionRules.constructFromObject(data['extractionRules']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EgressControlConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EgressControlConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backends'] && !(typeof data['backends'] === 'string' || data['backends'] instanceof String)) {
            throw new Error("Expected the field `backends` to be a primitive type in the JSON string but got " + data['backends']);
        }
        // validate the optional field `extractionRules`
        if (data['extractionRules']) { // data not null
          ExtractionRules.validateJSON(data['extractionRules']);
        }

        return true;
    }


}



/**
 * Static Comma separated backends which are common for all Connection resources. Supported formats for each backend are host:port or just host (host can be ip address or domain name).
 * @member {String} backends
 */
EgressControlConfig.prototype['backends'] = undefined;

/**
 * @member {module:model/ExtractionRules} extractionRules
 */
EgressControlConfig.prototype['extractionRules'] = undefined;






export default EgressControlConfig;

