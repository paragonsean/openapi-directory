/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectionSchemaMetadata model module.
 * @module model/ConnectionSchemaMetadata
 * @version v1
 */
class ConnectionSchemaMetadata {
    /**
     * Constructs a new <code>ConnectionSchemaMetadata</code>.
     * ConnectionSchemaMetadata is the singleton resource of each connection. It includes the entity and action names of runtime resources exposed by a connection backend.
     * @alias module:model/ConnectionSchemaMetadata
     */
    constructor() { 
        
        ConnectionSchemaMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionSchemaMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionSchemaMetadata} obj Optional instance to populate.
     * @return {module:model/ConnectionSchemaMetadata} The populated <code>ConnectionSchemaMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionSchemaMetadata();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], ['String']);
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refreshTime')) {
                obj['refreshTime'] = ApiClient.convertToType(data['refreshTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionSchemaMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionSchemaMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['entities'])) {
            throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['refreshTime'] && !(typeof data['refreshTime'] === 'string' || data['refreshTime'] instanceof String)) {
            throw new Error("Expected the field `refreshTime` to be a primitive type in the JSON string but got " + data['refreshTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. List of actions.
 * @member {Array.<String>} actions
 */
ConnectionSchemaMetadata.prototype['actions'] = undefined;

/**
 * Output only. List of entity names.
 * @member {Array.<String>} entities
 */
ConnectionSchemaMetadata.prototype['entities'] = undefined;

/**
 * Error message for users.
 * @member {String} errorMessage
 */
ConnectionSchemaMetadata.prototype['errorMessage'] = undefined;

/**
 * Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata
 * @member {String} name
 */
ConnectionSchemaMetadata.prototype['name'] = undefined;

/**
 * Output only. Timestamp when the connection runtime schema refresh was triggered.
 * @member {String} refreshTime
 */
ConnectionSchemaMetadata.prototype['refreshTime'] = undefined;

/**
 * Output only. The current state of runtime schema.
 * @member {module:model/ConnectionSchemaMetadata.StateEnum} state
 */
ConnectionSchemaMetadata.prototype['state'] = undefined;

/**
 * Output only. Timestamp when the connection runtime schema was updated.
 * @member {String} updateTime
 */
ConnectionSchemaMetadata.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionSchemaMetadata['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "REFRESHING"
     * @const
     */
    "REFRESHING": "REFRESHING",

    /**
     * value: "UPDATED"
     * @const
     */
    "UPDATED": "UPDATED",

    /**
     * value: "REFRESHING_SCHEMA_METADATA"
     * @const
     */
    "REFRESHING_SCHEMA_METADATA": "REFRESHING_SCHEMA_METADATA",

    /**
     * value: "UPDATED_SCHEMA_METADATA"
     * @const
     */
    "UPDATED_SCHEMA_METADATA": "UPDATED_SCHEMA_METADATA",

    /**
     * value: "REFRESH_SCHEMA_METADATA_FAILED"
     * @const
     */
    "REFRESH_SCHEMA_METADATA_FAILED": "REFRESH_SCHEMA_METADATA_FAILED",

    /**
     * value: "REFRESHING_FULL_SCHEMA"
     * @const
     */
    "REFRESHING_FULL_SCHEMA": "REFRESHING_FULL_SCHEMA",

    /**
     * value: "UPDATED_FULL_SCHEMA"
     * @const
     */
    "UPDATED_FULL_SCHEMA": "UPDATED_FULL_SCHEMA"
};



export default ConnectionSchemaMetadata;

