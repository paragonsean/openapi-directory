/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ConnectorsApi);
  }
}(this, function(expect, ConnectorsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ConnectorsApi.Connection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Connection', function() {
    it('should create an instance of Connection', function() {
      // uncomment below and update the code to test Connection
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be.a(ConnectorsApi.Connection);
    });

    it('should have the property authConfig (base name: "authConfig")', function() {
      // uncomment below and update the code to test the property authConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property configVariables (base name: "configVariables")', function() {
      // uncomment below and update the code to test the property configVariables
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property connectionRevision (base name: "connectionRevision")', function() {
      // uncomment below and update the code to test the property connectionRevision
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property connectorVersion (base name: "connectorVersion")', function() {
      // uncomment below and update the code to test the property connectorVersion
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property connectorVersionInfraConfig (base name: "connectorVersionInfraConfig")', function() {
      // uncomment below and update the code to test the property connectorVersionInfraConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property connectorVersionLaunchStage (base name: "connectorVersionLaunchStage")', function() {
      // uncomment below and update the code to test the property connectorVersionLaunchStage
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property destinationConfigs (base name: "destinationConfigs")', function() {
      // uncomment below and update the code to test the property destinationConfigs
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property envoyImageLocation (base name: "envoyImageLocation")', function() {
      // uncomment below and update the code to test the property envoyImageLocation
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property eventingConfig (base name: "eventingConfig")', function() {
      // uncomment below and update the code to test the property eventingConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property eventingEnablementType (base name: "eventingEnablementType")', function() {
      // uncomment below and update the code to test the property eventingEnablementType
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property eventingRuntimeData (base name: "eventingRuntimeData")', function() {
      // uncomment below and update the code to test the property eventingRuntimeData
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property imageLocation (base name: "imageLocation")', function() {
      // uncomment below and update the code to test the property imageLocation
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property isTrustedTester (base name: "isTrustedTester")', function() {
      // uncomment below and update the code to test the property isTrustedTester
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property lockConfig (base name: "lockConfig")', function() {
      // uncomment below and update the code to test the property lockConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property logConfig (base name: "logConfig")', function() {
      // uncomment below and update the code to test the property logConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property nodeConfig (base name: "nodeConfig")', function() {
      // uncomment below and update the code to test the property nodeConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccount (base name: "serviceAccount")', function() {
      // uncomment below and update the code to test the property serviceAccount
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property serviceDirectory (base name: "serviceDirectory")', function() {
      // uncomment below and update the code to test the property serviceDirectory
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property sslConfig (base name: "sslConfig")', function() {
      // uncomment below and update the code to test the property sslConfig
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionType (base name: "subscriptionType")', function() {
      // uncomment below and update the code to test the property subscriptionType
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property suspended (base name: "suspended")', function() {
      // uncomment below and update the code to test the property suspended
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new ConnectorsApi.Connection();
      //expect(instance).to.be();
    });

  });

}));
