/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.CustomConnector;
import org.openapitools.client.model.CustomConnectorVersion;
import org.openapitools.client.model.EndpointAttachment;
import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.EventType;
import org.openapitools.client.model.ListActionsResponse;
import org.openapitools.client.model.ListConnectionsResponse;
import org.openapitools.client.model.ListConnectorVersionsResponse;
import org.openapitools.client.model.ListConnectorsResponse;
import org.openapitools.client.model.ListCustomConnectorVersionsResponse;
import org.openapitools.client.model.ListCustomConnectorsResponse;
import org.openapitools.client.model.ListEndpointAttachmentsResponse;
import org.openapitools.client.model.ListEntityTypesResponse;
import org.openapitools.client.model.ListEventSubscriptionsResponse;
import org.openapitools.client.model.ListEventTypesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListManagedZonesResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListProvidersResponse;
import org.openapitools.client.model.ListRuntimeActionSchemasResponse;
import org.openapitools.client.model.ListRuntimeEntitySchemasResponse;
import org.openapitools.client.model.ListenEventRequest;
import org.openapitools.client.model.ManagedZone;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Get action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsConnectionSchemaMetadataGetActionTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String actionId = null;
        Operation response = api.connectorsProjectsLocationsConnectionsConnectionSchemaMetadataGetAction(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, actionId);
        // TODO: test validations
    }

    /**
     * Get entity type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsConnectionSchemaMetadataGetEntityTypeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String entityId = null;
        Operation response = api.connectorsProjectsLocationsConnectionsConnectionSchemaMetadataGetEntityType(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, entityId);
        // TODO: test validations
    }

    /**
     * List actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsConnectionSchemaMetadataListActionsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListActionsResponse response = api.connectorsProjectsLocationsConnectionsConnectionSchemaMetadataListActions(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * List entity types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsConnectionSchemaMetadataListEntityTypesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListEntityTypesResponse response = api.connectorsProjectsLocationsConnectionsConnectionSchemaMetadataListEntityTypes(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Refresh runtime schema of a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.connectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefresh(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new Connection in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String connectionId = null;
        Connection connection = null;
        Operation response = api.connectorsProjectsLocationsConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connectionId, connection);
        // TODO: test validations
    }

    /**
     * Creates a new EventSubscription in a given project,location and connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEventSubscriptionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String eventSubscriptionId = null;
        EventSubscription eventSubscription = null;
        Operation response = api.connectorsProjectsLocationsConnectionsEventSubscriptionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventSubscriptionId, eventSubscription);
        // TODO: test validations
    }

    /**
     * List EventSubscriptions in a given project,location and connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEventSubscriptionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEventSubscriptionsResponse response = api.connectorsProjectsLocationsConnectionsEventSubscriptionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * RetryEventSubscription retries the registration of Subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsEventSubscriptionsRetryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.connectorsProjectsLocationsConnectionsEventSubscriptionsRetry(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists Connections in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListConnectionsResponse response = api.connectorsProjectsLocationsConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * ListenEvent listens to the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsListenEventTest() throws ApiException {
        String resourcePath = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListenEventRequest listenEventRequest = null;
        Object response = api.connectorsProjectsLocationsConnectionsListenEvent(resourcePath, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listenEventRequest);
        // TODO: test validations
    }

    /**
     * RepaiEventing tries to repair eventing related event subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsRepairEventingTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.connectorsProjectsLocationsConnectionsRepairEventing(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * List schema of a runtime actions filtered by action name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsRuntimeActionSchemasListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRuntimeActionSchemasResponse response = api.connectorsProjectsLocationsConnectionsRuntimeActionSchemasList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List schema of a runtime entities filtered by entity name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsConnectionsRuntimeEntitySchemasListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRuntimeEntitySchemasResponse response = api.connectorsProjectsLocationsConnectionsRuntimeEntitySchemasList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new EndpointAttachment in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsEndpointAttachmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endpointAttachmentId = null;
        EndpointAttachment endpointAttachment = null;
        Operation response = api.connectorsProjectsLocationsEndpointAttachmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endpointAttachmentId, endpointAttachment);
        // TODO: test validations
    }

    /**
     * List EndpointAttachments in a given project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsEndpointAttachmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEndpointAttachmentsResponse response = api.connectorsProjectsLocationsEndpointAttachmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new CustomConnector in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalCustomConnectorsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customConnectorId = null;
        CustomConnector customConnector = null;
        Operation response = api.connectorsProjectsLocationsGlobalCustomConnectorsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customConnectorId, customConnector);
        // TODO: test validations
    }

    /**
     * Creates a new CustomConnectorVersion in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalCustomConnectorsCustomConnectorVersionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customConnectorVersionId = null;
        CustomConnectorVersion customConnectorVersion = null;
        Operation response = api.connectorsProjectsLocationsGlobalCustomConnectorsCustomConnectorVersionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customConnectorVersionId, customConnectorVersion);
        // TODO: test validations
    }

    /**
     * List CustomConnectorVersions in a given project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalCustomConnectorsCustomConnectorVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCustomConnectorVersionsResponse response = api.connectorsProjectsLocationsGlobalCustomConnectorsCustomConnectorVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List CustomConnectorVersions in a given project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalCustomConnectorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCustomConnectorsResponse response = api.connectorsProjectsLocationsGlobalCustomConnectorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ManagedZone in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalManagedZonesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String managedZoneId = null;
        ManagedZone managedZone = null;
        Operation response = api.connectorsProjectsLocationsGlobalManagedZonesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, managedZoneId, managedZone);
        // TODO: test validations
    }

    /**
     * List ManagedZones in a given project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalManagedZonesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListManagedZonesResponse response = api.connectorsProjectsLocationsGlobalManagedZonesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single ManagedZone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsGlobalManagedZonesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ManagedZone managedZone = null;
        Operation response = api.connectorsProjectsLocationsGlobalManagedZonesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, managedZone);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.connectorsProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.connectorsProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsOperationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.connectorsProjectsLocationsOperationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.connectorsProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists Connectors in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersConnectorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListConnectorsResponse response = api.connectorsProjectsLocationsProvidersConnectorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets details of a single event type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersConnectorsVersionsEventtypesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        EventType response = api.connectorsProjectsLocationsProvidersConnectorsVersionsEventtypesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists Event Types in a given Connector Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersConnectorsVersionsEventtypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEventTypesResponse response = api.connectorsProjectsLocationsProvidersConnectorsVersionsEventtypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists Connector Versions in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersConnectorsVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListConnectorVersionsResponse response = api.connectorsProjectsLocationsProvidersConnectorsVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.connectorsProjectsLocationsProvidersGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists Providers in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProvidersResponse response = api.connectorsProjectsLocationsProvidersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.connectorsProjectsLocationsProvidersSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsProjectsLocationsProvidersTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.connectorsProjectsLocationsProvidersTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
