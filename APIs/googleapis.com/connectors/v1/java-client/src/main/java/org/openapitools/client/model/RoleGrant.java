/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Resource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This configuration defines all the Cloud IAM roles that needs to be granted to a particular Google Cloud resource for the selected principal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a &#39;grant&#39; button to do the same on behalf of the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoleGrant {
  public static final String SERIALIZED_NAME_HELPER_TEXT_TEMPLATE = "helperTextTemplate";
  @SerializedName(SERIALIZED_NAME_HELPER_TEXT_TEMPLATE)
  private String helperTextTemplate;

  /**
   * Prinicipal/Identity for whom the role need to assigned.
   */
  @JsonAdapter(PrincipalEnum.Adapter.class)
  public enum PrincipalEnum {
    PRINCIPAL_UNSPECIFIED("PRINCIPAL_UNSPECIFIED"),
    
    CONNECTOR_SA("CONNECTOR_SA");

    private String value;

    PrincipalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrincipalEnum fromValue(String value) {
      for (PrincipalEnum b : PrincipalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrincipalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrincipalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrincipalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrincipalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrincipalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private PrincipalEnum principal;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Resource resource;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<String> roles = new ArrayList<>();

  public RoleGrant() {
  }

  public RoleGrant helperTextTemplate(String helperTextTemplate) {
    this.helperTextTemplate = helperTextTemplate;
    return this;
  }

  /**
   * Template that UI can use to provide helper text to customers.
   * @return helperTextTemplate
   */
  @javax.annotation.Nullable
  public String getHelperTextTemplate() {
    return helperTextTemplate;
  }

  public void setHelperTextTemplate(String helperTextTemplate) {
    this.helperTextTemplate = helperTextTemplate;
  }


  public RoleGrant principal(PrincipalEnum principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Prinicipal/Identity for whom the role need to assigned.
   * @return principal
   */
  @javax.annotation.Nullable
  public PrincipalEnum getPrincipal() {
    return principal;
  }

  public void setPrincipal(PrincipalEnum principal) {
    this.principal = principal;
  }


  public RoleGrant resource(Resource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public Resource getResource() {
    return resource;
  }

  public void setResource(Resource resource) {
    this.resource = resource;
  }


  public RoleGrant roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public RoleGrant addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * List of roles that need to be granted.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleGrant roleGrant = (RoleGrant) o;
    return Objects.equals(this.helperTextTemplate, roleGrant.helperTextTemplate) &&
        Objects.equals(this.principal, roleGrant.principal) &&
        Objects.equals(this.resource, roleGrant.resource) &&
        Objects.equals(this.roles, roleGrant.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(helperTextTemplate, principal, resource, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleGrant {\n");
    sb.append("    helperTextTemplate: ").append(toIndentedString(helperTextTemplate)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("helperTextTemplate");
    openapiFields.add("principal");
    openapiFields.add("resource");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleGrant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleGrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleGrant is not found in the empty JSON string", RoleGrant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleGrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleGrant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("helperTextTemplate") != null && !jsonObj.get("helperTextTemplate").isJsonNull()) && !jsonObj.get("helperTextTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helperTextTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helperTextTemplate").toString()));
      }
      if ((jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) && !jsonObj.get("principal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal").toString()));
      }
      // validate the optional field `principal`
      if (jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) {
        PrincipalEnum.validateJsonElement(jsonObj.get("principal"));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        Resource.validateJsonElement(jsonObj.get("resource"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleGrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleGrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleGrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleGrant.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleGrant>() {
           @Override
           public void write(JsonWriter out, RoleGrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleGrant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleGrant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleGrant
   * @throws IOException if the JSON string is invalid with respect to RoleGrant
   */
  public static RoleGrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleGrant.class);
  }

  /**
   * Convert an instance of RoleGrant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

