/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Regional Network Config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfig {
  public static final String SERIALIZED_NAME_EGRESS_IPS = "egressIps";
  @SerializedName(SERIALIZED_NAME_EGRESS_IPS)
  private List<String> egressIps = new ArrayList<>();

  /**
   * Optional. Egress mode for the network.
   */
  @JsonAdapter(EgressModeEnum.Adapter.class)
  public enum EgressModeEnum {
    NETWORK_EGRESS_MODE_UNSPECIFIED("NETWORK_EGRESS_MODE_UNSPECIFIED"),
    
    AUTO_IP("AUTO_IP"),
    
    STATIC_IP("STATIC_IP");

    private String value;

    EgressModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EgressModeEnum fromValue(String value) {
      for (EgressModeEnum b : EgressModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EgressModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EgressModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EgressModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EgressModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EgressModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EGRESS_MODE = "egressMode";
  @SerializedName(SERIALIZED_NAME_EGRESS_MODE)
  private EgressModeEnum egressMode;

  public NetworkConfig() {
  }

  public NetworkConfig(
     List<String> egressIps
  ) {
    this();
    this.egressIps = egressIps;
  }

  /**
   * Output only. Egress IPs
   * @return egressIps
   */
  @javax.annotation.Nullable
  public List<String> getEgressIps() {
    return egressIps;
  }



  public NetworkConfig egressMode(EgressModeEnum egressMode) {
    this.egressMode = egressMode;
    return this;
  }

  /**
   * Optional. Egress mode for the network.
   * @return egressMode
   */
  @javax.annotation.Nullable
  public EgressModeEnum getEgressMode() {
    return egressMode;
  }

  public void setEgressMode(EgressModeEnum egressMode) {
    this.egressMode = egressMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfig networkConfig = (NetworkConfig) o;
    return Objects.equals(this.egressIps, networkConfig.egressIps) &&
        Objects.equals(this.egressMode, networkConfig.egressMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egressIps, egressMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfig {\n");
    sb.append("    egressIps: ").append(toIndentedString(egressIps)).append("\n");
    sb.append("    egressMode: ").append(toIndentedString(egressMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egressIps");
    openapiFields.add("egressMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfig is not found in the empty JSON string", NetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("egressIps") != null && !jsonObj.get("egressIps").isJsonNull() && !jsonObj.get("egressIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `egressIps` to be an array in the JSON string but got `%s`", jsonObj.get("egressIps").toString()));
      }
      if ((jsonObj.get("egressMode") != null && !jsonObj.get("egressMode").isJsonNull()) && !jsonObj.get("egressMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `egressMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("egressMode").toString()));
      }
      // validate the optional field `egressMode`
      if (jsonObj.get("egressMode") != null && !jsonObj.get("egressMode").isJsonNull()) {
        EgressModeEnum.validateJsonElement(jsonObj.get("egressMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfig>() {
           @Override
           public void write(JsonWriter out, NetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfig
   * @throws IOException if the JSON string is invalid with respect to NetworkConfig
   */
  public static NetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfig.class);
  }

  /**
   * Convert an instance of NetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

