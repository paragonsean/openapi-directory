/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JsonSchema representation of schema metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonSchema {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENUM = "enum";
  @SerializedName(SERIALIZED_NAME_ENUM)
  private List<Object> _enum = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private JsonSchema items;

  /**
   * JDBC datatype of the field.
   */
  @JsonAdapter(JdbcTypeEnum.Adapter.class)
  public enum JdbcTypeEnum {
    UNSPECIFIED("DATA_TYPE_UNSPECIFIED"),
    
    INT("DATA_TYPE_INT"),
    
    SMALLINT("DATA_TYPE_SMALLINT"),
    
    DOUBLE("DATA_TYPE_DOUBLE"),
    
    DATE("DATA_TYPE_DATE"),
    
    DATETIME("DATA_TYPE_DATETIME"),
    
    TIME("DATA_TYPE_TIME"),
    
    STRING("DATA_TYPE_STRING"),
    
    LONG("DATA_TYPE_LONG"),
    
    BOOLEAN("DATA_TYPE_BOOLEAN"),
    
    DECIMAL("DATA_TYPE_DECIMAL"),
    
    UUID("DATA_TYPE_UUID"),
    
    BLOB("DATA_TYPE_BLOB"),
    
    BIT("DATA_TYPE_BIT"),
    
    TINYINT("DATA_TYPE_TINYINT"),
    
    INTEGER("DATA_TYPE_INTEGER"),
    
    BIGINT("DATA_TYPE_BIGINT"),
    
    FLOAT("DATA_TYPE_FLOAT"),
    
    REAL("DATA_TYPE_REAL"),
    
    NUMERIC("DATA_TYPE_NUMERIC"),
    
    CHAR("DATA_TYPE_CHAR"),
    
    VARCHAR("DATA_TYPE_VARCHAR"),
    
    LONGVARCHAR("DATA_TYPE_LONGVARCHAR"),
    
    TIMESTAMP("DATA_TYPE_TIMESTAMP"),
    
    NCHAR("DATA_TYPE_NCHAR"),
    
    NVARCHAR("DATA_TYPE_NVARCHAR"),
    
    LONGNVARCHAR("DATA_TYPE_LONGNVARCHAR"),
    
    NULL("DATA_TYPE_NULL"),
    
    OTHER("DATA_TYPE_OTHER"),
    
    JAVA_OBJECT("DATA_TYPE_JAVA_OBJECT"),
    
    DISTINCT("DATA_TYPE_DISTINCT"),
    
    STRUCT("DATA_TYPE_STRUCT"),
    
    ARRAY("DATA_TYPE_ARRAY"),
    
    CLOB("DATA_TYPE_CLOB"),
    
    REF("DATA_TYPE_REF"),
    
    DATALINK("DATA_TYPE_DATALINK"),
    
    ROWID("DATA_TYPE_ROWID"),
    
    BINARY("DATA_TYPE_BINARY"),
    
    VARBINARY("DATA_TYPE_VARBINARY"),
    
    LONGVARBINARY("DATA_TYPE_LONGVARBINARY"),
    
    NCLOB("DATA_TYPE_NCLOB"),
    
    SQLXML("DATA_TYPE_SQLXML"),
    
    REF_CURSOR("DATA_TYPE_REF_CURSOR"),
    
    TIME_WITH_TIMEZONE("DATA_TYPE_TIME_WITH_TIMEZONE"),
    
    TIMESTAMP_WITH_TIMEZONE("DATA_TYPE_TIMESTAMP_WITH_TIMEZONE");

    private String value;

    JdbcTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JdbcTypeEnum fromValue(String value) {
      for (JdbcTypeEnum b : JdbcTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JdbcTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JdbcTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JdbcTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JdbcTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JdbcTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JDBC_TYPE = "jdbcType";
  @SerializedName(SERIALIZED_NAME_JDBC_TYPE)
  private JdbcTypeEnum jdbcType;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, JsonSchema> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private List<String> required = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = new ArrayList<>();

  public JsonSchema() {
  }

  public JsonSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of this schema.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JsonSchema _enum(List<Object> _enum) {
    this._enum = _enum;
    return this;
  }

  public JsonSchema addEnumItem(Object _enumItem) {
    if (this._enum == null) {
      this._enum = new ArrayList<>();
    }
    this._enum.add(_enumItem);
    return this;
  }

  /**
   * Possible values for an enumeration. This works in conjunction with &#x60;type&#x60; to represent types with a fixed set of legal values
   * @return _enum
   */
  @javax.annotation.Nullable
  public List<Object> getEnum() {
    return _enum;
  }

  public void setEnum(List<Object> _enum) {
    this._enum = _enum;
  }


  public JsonSchema format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public JsonSchema items(JsonSchema items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public JsonSchema getItems() {
    return items;
  }

  public void setItems(JsonSchema items) {
    this.items = items;
  }


  public JsonSchema jdbcType(JdbcTypeEnum jdbcType) {
    this.jdbcType = jdbcType;
    return this;
  }

  /**
   * JDBC datatype of the field.
   * @return jdbcType
   */
  @javax.annotation.Nullable
  public JdbcTypeEnum getJdbcType() {
    return jdbcType;
  }

  public void setJdbcType(JdbcTypeEnum jdbcType) {
    this.jdbcType = jdbcType;
  }


  public JsonSchema properties(Map<String, JsonSchema> properties) {
    this.properties = properties;
    return this;
  }

  public JsonSchema putPropertiesItem(String key, JsonSchema propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The child schemas, applicable only if this is of type &#x60;object&#x60;. The key is the name of the property and the value is the json schema that describes that property
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, JsonSchema> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, JsonSchema> properties) {
    this.properties = properties;
  }


  public JsonSchema required(List<String> required) {
    this.required = required;
    return this;
  }

  public JsonSchema addRequiredItem(String requiredItem) {
    if (this.required == null) {
      this.required = new ArrayList<>();
    }
    this.required.add(requiredItem);
    return this;
  }

  /**
   * Whether this property is required.
   * @return required
   */
  @javax.annotation.Nullable
  public List<String> getRequired() {
    return required;
  }

  public void setRequired(List<String> required) {
    this.required = required;
  }


  public JsonSchema type(List<String> type) {
    this.type = type;
    return this;
  }

  public JsonSchema addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * JSON Schema Validation: A Vocabulary for Structural Validation of JSON
   * @return type
   */
  @javax.annotation.Nullable
  public List<String> getType() {
    return type;
  }

  public void setType(List<String> type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchema jsonSchema = (JsonSchema) o;
    return Objects.equals(this.description, jsonSchema.description) &&
        Objects.equals(this._enum, jsonSchema._enum) &&
        Objects.equals(this.format, jsonSchema.format) &&
        Objects.equals(this.items, jsonSchema.items) &&
        Objects.equals(this.jdbcType, jsonSchema.jdbcType) &&
        Objects.equals(this.properties, jsonSchema.properties) &&
        Objects.equals(this.required, jsonSchema.required) &&
        Objects.equals(this.type, jsonSchema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, _enum, format, items, jdbcType, properties, required, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchema {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    jdbcType: ").append(toIndentedString(jdbcType)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("enum");
    openapiFields.add("format");
    openapiFields.add("items");
    openapiFields.add("jdbcType");
    openapiFields.add("properties");
    openapiFields.add("required");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSchema is not found in the empty JSON string", JsonSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enum") != null && !jsonObj.get("enum").isJsonNull() && !jsonObj.get("enum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enum` to be an array in the JSON string but got `%s`", jsonObj.get("enum").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("items"));
      }
      if ((jsonObj.get("jdbcType") != null && !jsonObj.get("jdbcType").isJsonNull()) && !jsonObj.get("jdbcType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jdbcType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jdbcType").toString()));
      }
      // validate the optional field `jdbcType`
      if (jsonObj.get("jdbcType") != null && !jsonObj.get("jdbcType").isJsonNull()) {
        JdbcTypeEnum.validateJsonElement(jsonObj.get("jdbcType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull() && !jsonObj.get("required").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required` to be an array in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSchema>() {
           @Override
           public void write(JsonWriter out, JsonSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonSchema
   * @throws IOException if the JSON string is invalid with respect to JsonSchema
   */
  public static JsonSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSchema.class);
  }

  /**
   * Convert an instance of JsonSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

