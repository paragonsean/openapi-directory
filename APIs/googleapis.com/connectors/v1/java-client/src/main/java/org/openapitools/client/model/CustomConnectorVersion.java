/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthConfig;
import org.openapitools.client.model.ConfigVariableTemplate;
import org.openapitools.client.model.DestinationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomConnectorVersion indicates a specific version of a connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomConnectorVersion {
  public static final String SERIALIZED_NAME_AUTH_CONFIG = "authConfig";
  @SerializedName(SERIALIZED_NAME_AUTH_CONFIG)
  private AuthConfig authConfig;

  public static final String SERIALIZED_NAME_BACKEND_VARIABLE_TEMPLATES = "backendVariableTemplates";
  @SerializedName(SERIALIZED_NAME_BACKEND_VARIABLE_TEMPLATES)
  private List<ConfigVariableTemplate> backendVariableTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTINATION_CONFIGS = "destinationConfigs";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIGS)
  private List<DestinationConfig> destinationConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_BACKEND_DESTINATION_CONFIG = "enableBackendDestinationConfig";
  @SerializedName(SERIALIZED_NAME_ENABLE_BACKEND_DESTINATION_CONFIG)
  private Boolean enableBackendDestinationConfig;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SPEC_LOCATION = "specLocation";
  @SerializedName(SERIALIZED_NAME_SPEC_LOCATION)
  private String specLocation;

  /**
   * Output only. State of the custom connector version.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CustomConnectorVersion() {
  }

  public CustomConnectorVersion(
     String createTime, 
     String name, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.state = state;
    this.updateTime = updateTime;
  }

  public CustomConnectorVersion authConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
    return this;
  }

  /**
   * Get authConfig
   * @return authConfig
   */
  @javax.annotation.Nullable
  public AuthConfig getAuthConfig() {
    return authConfig;
  }

  public void setAuthConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
  }


  public CustomConnectorVersion backendVariableTemplates(List<ConfigVariableTemplate> backendVariableTemplates) {
    this.backendVariableTemplates = backendVariableTemplates;
    return this;
  }

  public CustomConnectorVersion addBackendVariableTemplatesItem(ConfigVariableTemplate backendVariableTemplatesItem) {
    if (this.backendVariableTemplates == null) {
      this.backendVariableTemplates = new ArrayList<>();
    }
    this.backendVariableTemplates.add(backendVariableTemplatesItem);
    return this;
  }

  /**
   * Optional. Backend variables config templates. This translates to additional variable templates in connection.
   * @return backendVariableTemplates
   */
  @javax.annotation.Nullable
  public List<ConfigVariableTemplate> getBackendVariableTemplates() {
    return backendVariableTemplates;
  }

  public void setBackendVariableTemplates(List<ConfigVariableTemplate> backendVariableTemplates) {
    this.backendVariableTemplates = backendVariableTemplates;
  }


  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public CustomConnectorVersion destinationConfigs(List<DestinationConfig> destinationConfigs) {
    this.destinationConfigs = destinationConfigs;
    return this;
  }

  public CustomConnectorVersion addDestinationConfigsItem(DestinationConfig destinationConfigsItem) {
    if (this.destinationConfigs == null) {
      this.destinationConfigs = new ArrayList<>();
    }
    this.destinationConfigs.add(destinationConfigsItem);
    return this;
  }

  /**
   * Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.
   * @return destinationConfigs
   */
  @javax.annotation.Nullable
  public List<DestinationConfig> getDestinationConfigs() {
    return destinationConfigs;
  }

  public void setDestinationConfigs(List<DestinationConfig> destinationConfigs) {
    this.destinationConfigs = destinationConfigs;
  }


  public CustomConnectorVersion enableBackendDestinationConfig(Boolean enableBackendDestinationConfig) {
    this.enableBackendDestinationConfig = enableBackendDestinationConfig;
    return this;
  }

  /**
   * Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.
   * @return enableBackendDestinationConfig
   */
  @javax.annotation.Nullable
  public Boolean getEnableBackendDestinationConfig() {
    return enableBackendDestinationConfig;
  }

  public void setEnableBackendDestinationConfig(Boolean enableBackendDestinationConfig) {
    this.enableBackendDestinationConfig = enableBackendDestinationConfig;
  }


  public CustomConnectorVersion labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CustomConnectorVersion putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public CustomConnectorVersion serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. Service account used by runtime plane to access auth config secrets.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public CustomConnectorVersion specLocation(String specLocation) {
    this.specLocation = specLocation;
    return this;
  }

  /**
   * Optional. Location of the custom connector spec. The location can be either a public url like &#x60;https://public-url.com/spec&#x60; Or a Google Cloud Storage location like &#x60;gs:///&#x60;
   * @return specLocation
   */
  @javax.annotation.Nullable
  public String getSpecLocation() {
    return specLocation;
  }

  public void setSpecLocation(String specLocation) {
    this.specLocation = specLocation;
  }


  /**
   * Output only. State of the custom connector version.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomConnectorVersion customConnectorVersion = (CustomConnectorVersion) o;
    return Objects.equals(this.authConfig, customConnectorVersion.authConfig) &&
        Objects.equals(this.backendVariableTemplates, customConnectorVersion.backendVariableTemplates) &&
        Objects.equals(this.createTime, customConnectorVersion.createTime) &&
        Objects.equals(this.destinationConfigs, customConnectorVersion.destinationConfigs) &&
        Objects.equals(this.enableBackendDestinationConfig, customConnectorVersion.enableBackendDestinationConfig) &&
        Objects.equals(this.labels, customConnectorVersion.labels) &&
        Objects.equals(this.name, customConnectorVersion.name) &&
        Objects.equals(this.serviceAccount, customConnectorVersion.serviceAccount) &&
        Objects.equals(this.specLocation, customConnectorVersion.specLocation) &&
        Objects.equals(this.state, customConnectorVersion.state) &&
        Objects.equals(this.updateTime, customConnectorVersion.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authConfig, backendVariableTemplates, createTime, destinationConfigs, enableBackendDestinationConfig, labels, name, serviceAccount, specLocation, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomConnectorVersion {\n");
    sb.append("    authConfig: ").append(toIndentedString(authConfig)).append("\n");
    sb.append("    backendVariableTemplates: ").append(toIndentedString(backendVariableTemplates)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destinationConfigs: ").append(toIndentedString(destinationConfigs)).append("\n");
    sb.append("    enableBackendDestinationConfig: ").append(toIndentedString(enableBackendDestinationConfig)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    specLocation: ").append(toIndentedString(specLocation)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authConfig");
    openapiFields.add("backendVariableTemplates");
    openapiFields.add("createTime");
    openapiFields.add("destinationConfigs");
    openapiFields.add("enableBackendDestinationConfig");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("serviceAccount");
    openapiFields.add("specLocation");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomConnectorVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomConnectorVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomConnectorVersion is not found in the empty JSON string", CustomConnectorVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomConnectorVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomConnectorVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authConfig`
      if (jsonObj.get("authConfig") != null && !jsonObj.get("authConfig").isJsonNull()) {
        AuthConfig.validateJsonElement(jsonObj.get("authConfig"));
      }
      if (jsonObj.get("backendVariableTemplates") != null && !jsonObj.get("backendVariableTemplates").isJsonNull()) {
        JsonArray jsonArraybackendVariableTemplates = jsonObj.getAsJsonArray("backendVariableTemplates");
        if (jsonArraybackendVariableTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendVariableTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendVariableTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("backendVariableTemplates").toString()));
          }

          // validate the optional field `backendVariableTemplates` (array)
          for (int i = 0; i < jsonArraybackendVariableTemplates.size(); i++) {
            ConfigVariableTemplate.validateJsonElement(jsonArraybackendVariableTemplates.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("destinationConfigs") != null && !jsonObj.get("destinationConfigs").isJsonNull()) {
        JsonArray jsonArraydestinationConfigs = jsonObj.getAsJsonArray("destinationConfigs");
        if (jsonArraydestinationConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("destinationConfigs").toString()));
          }

          // validate the optional field `destinationConfigs` (array)
          for (int i = 0; i < jsonArraydestinationConfigs.size(); i++) {
            DestinationConfig.validateJsonElement(jsonArraydestinationConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("specLocation") != null && !jsonObj.get("specLocation").isJsonNull()) && !jsonObj.get("specLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specLocation").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomConnectorVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomConnectorVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomConnectorVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomConnectorVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomConnectorVersion>() {
           @Override
           public void write(JsonWriter out, CustomConnectorVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomConnectorVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomConnectorVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomConnectorVersion
   * @throws IOException if the JSON string is invalid with respect to CustomConnectorVersion
   */
  public static CustomConnectorVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomConnectorVersion.class);
  }

  /**
   * Convert an instance of CustomConnectorVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

