/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigVariable;
import org.openapitools.client.model.Secret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SSL Configuration of a connection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SslConfig {
  public static final String SERIALIZED_NAME_ADDITIONAL_VARIABLES = "additionalVariables";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_VARIABLES)
  private List<ConfigVariable> additionalVariables = new ArrayList<>();

  /**
   * Type of Client Cert (PEM/JKS/.. etc.)
   */
  @JsonAdapter(ClientCertTypeEnum.Adapter.class)
  public enum ClientCertTypeEnum {
    CERT_TYPE_UNSPECIFIED("CERT_TYPE_UNSPECIFIED"),
    
    PEM("PEM");

    private String value;

    ClientCertTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientCertTypeEnum fromValue(String value) {
      for (ClientCertTypeEnum b : ClientCertTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientCertTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientCertTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientCertTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientCertTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientCertTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_CERT_TYPE = "clientCertType";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT_TYPE)
  private ClientCertTypeEnum clientCertType;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE = "clientCertificate";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE)
  private Secret clientCertificate;

  public static final String SERIALIZED_NAME_CLIENT_PRIVATE_KEY = "clientPrivateKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_PRIVATE_KEY)
  private Secret clientPrivateKey;

  public static final String SERIALIZED_NAME_CLIENT_PRIVATE_KEY_PASS = "clientPrivateKeyPass";
  @SerializedName(SERIALIZED_NAME_CLIENT_PRIVATE_KEY_PASS)
  private Secret clientPrivateKeyPass;

  public static final String SERIALIZED_NAME_PRIVATE_SERVER_CERTIFICATE = "privateServerCertificate";
  @SerializedName(SERIALIZED_NAME_PRIVATE_SERVER_CERTIFICATE)
  private Secret privateServerCertificate;

  /**
   * Type of Server Cert (PEM/JKS/.. etc.)
   */
  @JsonAdapter(ServerCertTypeEnum.Adapter.class)
  public enum ServerCertTypeEnum {
    CERT_TYPE_UNSPECIFIED("CERT_TYPE_UNSPECIFIED"),
    
    PEM("PEM");

    private String value;

    ServerCertTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerCertTypeEnum fromValue(String value) {
      for (ServerCertTypeEnum b : ServerCertTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerCertTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerCertTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerCertTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerCertTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerCertTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_CERT_TYPE = "serverCertType";
  @SerializedName(SERIALIZED_NAME_SERVER_CERT_TYPE)
  private ServerCertTypeEnum serverCertType;

  /**
   * Trust Model of the SSL connection
   */
  @JsonAdapter(TrustModelEnum.Adapter.class)
  public enum TrustModelEnum {
    PUBLIC("PUBLIC"),
    
    PRIVATE("PRIVATE"),
    
    INSECURE("INSECURE");

    private String value;

    TrustModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustModelEnum fromValue(String value) {
      for (TrustModelEnum b : TrustModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrustModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrustModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrustModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrustModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUST_MODEL = "trustModel";
  @SerializedName(SERIALIZED_NAME_TRUST_MODEL)
  private TrustModelEnum trustModel;

  /**
   * Controls the ssl type for the given connector version.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SSL_TYPE_UNSPECIFIED("SSL_TYPE_UNSPECIFIED"),
    
    TLS("TLS"),
    
    MTLS("MTLS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USE_SSL = "useSsl";
  @SerializedName(SERIALIZED_NAME_USE_SSL)
  private Boolean useSsl;

  public SslConfig() {
  }

  public SslConfig additionalVariables(List<ConfigVariable> additionalVariables) {
    this.additionalVariables = additionalVariables;
    return this;
  }

  public SslConfig addAdditionalVariablesItem(ConfigVariable additionalVariablesItem) {
    if (this.additionalVariables == null) {
      this.additionalVariables = new ArrayList<>();
    }
    this.additionalVariables.add(additionalVariablesItem);
    return this;
  }

  /**
   * Additional SSL related field values
   * @return additionalVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariable> getAdditionalVariables() {
    return additionalVariables;
  }

  public void setAdditionalVariables(List<ConfigVariable> additionalVariables) {
    this.additionalVariables = additionalVariables;
  }


  public SslConfig clientCertType(ClientCertTypeEnum clientCertType) {
    this.clientCertType = clientCertType;
    return this;
  }

  /**
   * Type of Client Cert (PEM/JKS/.. etc.)
   * @return clientCertType
   */
  @javax.annotation.Nullable
  public ClientCertTypeEnum getClientCertType() {
    return clientCertType;
  }

  public void setClientCertType(ClientCertTypeEnum clientCertType) {
    this.clientCertType = clientCertType;
  }


  public SslConfig clientCertificate(Secret clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * Get clientCertificate
   * @return clientCertificate
   */
  @javax.annotation.Nullable
  public Secret getClientCertificate() {
    return clientCertificate;
  }

  public void setClientCertificate(Secret clientCertificate) {
    this.clientCertificate = clientCertificate;
  }


  public SslConfig clientPrivateKey(Secret clientPrivateKey) {
    this.clientPrivateKey = clientPrivateKey;
    return this;
  }

  /**
   * Get clientPrivateKey
   * @return clientPrivateKey
   */
  @javax.annotation.Nullable
  public Secret getClientPrivateKey() {
    return clientPrivateKey;
  }

  public void setClientPrivateKey(Secret clientPrivateKey) {
    this.clientPrivateKey = clientPrivateKey;
  }


  public SslConfig clientPrivateKeyPass(Secret clientPrivateKeyPass) {
    this.clientPrivateKeyPass = clientPrivateKeyPass;
    return this;
  }

  /**
   * Get clientPrivateKeyPass
   * @return clientPrivateKeyPass
   */
  @javax.annotation.Nullable
  public Secret getClientPrivateKeyPass() {
    return clientPrivateKeyPass;
  }

  public void setClientPrivateKeyPass(Secret clientPrivateKeyPass) {
    this.clientPrivateKeyPass = clientPrivateKeyPass;
  }


  public SslConfig privateServerCertificate(Secret privateServerCertificate) {
    this.privateServerCertificate = privateServerCertificate;
    return this;
  }

  /**
   * Get privateServerCertificate
   * @return privateServerCertificate
   */
  @javax.annotation.Nullable
  public Secret getPrivateServerCertificate() {
    return privateServerCertificate;
  }

  public void setPrivateServerCertificate(Secret privateServerCertificate) {
    this.privateServerCertificate = privateServerCertificate;
  }


  public SslConfig serverCertType(ServerCertTypeEnum serverCertType) {
    this.serverCertType = serverCertType;
    return this;
  }

  /**
   * Type of Server Cert (PEM/JKS/.. etc.)
   * @return serverCertType
   */
  @javax.annotation.Nullable
  public ServerCertTypeEnum getServerCertType() {
    return serverCertType;
  }

  public void setServerCertType(ServerCertTypeEnum serverCertType) {
    this.serverCertType = serverCertType;
  }


  public SslConfig trustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
    return this;
  }

  /**
   * Trust Model of the SSL connection
   * @return trustModel
   */
  @javax.annotation.Nullable
  public TrustModelEnum getTrustModel() {
    return trustModel;
  }

  public void setTrustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
  }


  public SslConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Controls the ssl type for the given connector version.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SslConfig useSsl(Boolean useSsl) {
    this.useSsl = useSsl;
    return this;
  }

  /**
   * Bool for enabling SSL
   * @return useSsl
   */
  @javax.annotation.Nullable
  public Boolean getUseSsl() {
    return useSsl;
  }

  public void setUseSsl(Boolean useSsl) {
    this.useSsl = useSsl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SslConfig sslConfig = (SslConfig) o;
    return Objects.equals(this.additionalVariables, sslConfig.additionalVariables) &&
        Objects.equals(this.clientCertType, sslConfig.clientCertType) &&
        Objects.equals(this.clientCertificate, sslConfig.clientCertificate) &&
        Objects.equals(this.clientPrivateKey, sslConfig.clientPrivateKey) &&
        Objects.equals(this.clientPrivateKeyPass, sslConfig.clientPrivateKeyPass) &&
        Objects.equals(this.privateServerCertificate, sslConfig.privateServerCertificate) &&
        Objects.equals(this.serverCertType, sslConfig.serverCertType) &&
        Objects.equals(this.trustModel, sslConfig.trustModel) &&
        Objects.equals(this.type, sslConfig.type) &&
        Objects.equals(this.useSsl, sslConfig.useSsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalVariables, clientCertType, clientCertificate, clientPrivateKey, clientPrivateKeyPass, privateServerCertificate, serverCertType, trustModel, type, useSsl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SslConfig {\n");
    sb.append("    additionalVariables: ").append(toIndentedString(additionalVariables)).append("\n");
    sb.append("    clientCertType: ").append(toIndentedString(clientCertType)).append("\n");
    sb.append("    clientCertificate: ").append(toIndentedString(clientCertificate)).append("\n");
    sb.append("    clientPrivateKey: ").append(toIndentedString(clientPrivateKey)).append("\n");
    sb.append("    clientPrivateKeyPass: ").append(toIndentedString(clientPrivateKeyPass)).append("\n");
    sb.append("    privateServerCertificate: ").append(toIndentedString(privateServerCertificate)).append("\n");
    sb.append("    serverCertType: ").append(toIndentedString(serverCertType)).append("\n");
    sb.append("    trustModel: ").append(toIndentedString(trustModel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useSsl: ").append(toIndentedString(useSsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalVariables");
    openapiFields.add("clientCertType");
    openapiFields.add("clientCertificate");
    openapiFields.add("clientPrivateKey");
    openapiFields.add("clientPrivateKeyPass");
    openapiFields.add("privateServerCertificate");
    openapiFields.add("serverCertType");
    openapiFields.add("trustModel");
    openapiFields.add("type");
    openapiFields.add("useSsl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SslConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SslConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SslConfig is not found in the empty JSON string", SslConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SslConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SslConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalVariables") != null && !jsonObj.get("additionalVariables").isJsonNull()) {
        JsonArray jsonArrayadditionalVariables = jsonObj.getAsJsonArray("additionalVariables");
        if (jsonArrayadditionalVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalVariables` to be an array in the JSON string but got `%s`", jsonObj.get("additionalVariables").toString()));
          }

          // validate the optional field `additionalVariables` (array)
          for (int i = 0; i < jsonArrayadditionalVariables.size(); i++) {
            ConfigVariable.validateJsonElement(jsonArrayadditionalVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("clientCertType") != null && !jsonObj.get("clientCertType").isJsonNull()) && !jsonObj.get("clientCertType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertType").toString()));
      }
      // validate the optional field `clientCertType`
      if (jsonObj.get("clientCertType") != null && !jsonObj.get("clientCertType").isJsonNull()) {
        ClientCertTypeEnum.validateJsonElement(jsonObj.get("clientCertType"));
      }
      // validate the optional field `clientCertificate`
      if (jsonObj.get("clientCertificate") != null && !jsonObj.get("clientCertificate").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("clientCertificate"));
      }
      // validate the optional field `clientPrivateKey`
      if (jsonObj.get("clientPrivateKey") != null && !jsonObj.get("clientPrivateKey").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("clientPrivateKey"));
      }
      // validate the optional field `clientPrivateKeyPass`
      if (jsonObj.get("clientPrivateKeyPass") != null && !jsonObj.get("clientPrivateKeyPass").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("clientPrivateKeyPass"));
      }
      // validate the optional field `privateServerCertificate`
      if (jsonObj.get("privateServerCertificate") != null && !jsonObj.get("privateServerCertificate").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("privateServerCertificate"));
      }
      if ((jsonObj.get("serverCertType") != null && !jsonObj.get("serverCertType").isJsonNull()) && !jsonObj.get("serverCertType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverCertType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverCertType").toString()));
      }
      // validate the optional field `serverCertType`
      if (jsonObj.get("serverCertType") != null && !jsonObj.get("serverCertType").isJsonNull()) {
        ServerCertTypeEnum.validateJsonElement(jsonObj.get("serverCertType"));
      }
      if ((jsonObj.get("trustModel") != null && !jsonObj.get("trustModel").isJsonNull()) && !jsonObj.get("trustModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustModel").toString()));
      }
      // validate the optional field `trustModel`
      if (jsonObj.get("trustModel") != null && !jsonObj.get("trustModel").isJsonNull()) {
        TrustModelEnum.validateJsonElement(jsonObj.get("trustModel"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SslConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SslConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SslConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SslConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SslConfig>() {
           @Override
           public void write(JsonWriter out, SslConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SslConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SslConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SslConfig
   * @throws IOException if the JSON string is invalid with respect to SslConfig
   */
  public static SslConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SslConfig.class);
  }

  /**
   * Convert an instance of SslConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

