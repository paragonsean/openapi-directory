/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthConfigTemplate;
import org.openapitools.client.model.ConfigVariableTemplate;
import org.openapitools.client.model.ConnectorInfraConfig;
import org.openapitools.client.model.DestinationConfigTemplate;
import org.openapitools.client.model.EgressControlConfig;
import org.openapitools.client.model.EventingConfigTemplate;
import org.openapitools.client.model.RoleGrant;
import org.openapitools.client.model.SslConfigTemplate;
import org.openapitools.client.model.SupportedRuntimeFeatures;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectorVersion indicates a specific version of a connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorVersion {
  public static final String SERIALIZED_NAME_AUTH_CONFIG_TEMPLATES = "authConfigTemplates";
  @SerializedName(SERIALIZED_NAME_AUTH_CONFIG_TEMPLATES)
  private List<AuthConfigTemplate> authConfigTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG_VARIABLE_TEMPLATES = "configVariableTemplates";
  @SerializedName(SERIALIZED_NAME_CONFIG_VARIABLE_TEMPLATES)
  private List<ConfigVariableTemplate> configVariableTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTOR_INFRA_CONFIG = "connectorInfraConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_INFRA_CONFIG)
  private ConnectorInfraConfig connectorInfraConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTINATION_CONFIG_TEMPLATES = "destinationConfigTemplates";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIG_TEMPLATES)
  private List<DestinationConfigTemplate> destinationConfigTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EGRESS_CONTROL_CONFIG = "egressControlConfig";
  @SerializedName(SERIALIZED_NAME_EGRESS_CONTROL_CONFIG)
  private EgressControlConfig egressControlConfig;

  public static final String SERIALIZED_NAME_EVENTING_CONFIG_TEMPLATE = "eventingConfigTemplate";
  @SerializedName(SERIALIZED_NAME_EVENTING_CONFIG_TEMPLATE)
  private EventingConfigTemplate eventingConfigTemplate;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  /**
   * Output only. Flag to mark the version indicating the launch stage.
   */
  @JsonAdapter(LaunchStageEnum.Adapter.class)
  public enum LaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    PREVIEW("PREVIEW"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED"),
    
    PRIVATE_PREVIEW("PRIVATE_PREVIEW");

    private String value;

    LaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchStageEnum fromValue(String value) {
      for (LaunchStageEnum b : LaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_STAGE = "launchStage";
  @SerializedName(SERIALIZED_NAME_LAUNCH_STAGE)
  private LaunchStageEnum launchStage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_VERSION = "releaseVersion";
  @SerializedName(SERIALIZED_NAME_RELEASE_VERSION)
  private String releaseVersion;

  public static final String SERIALIZED_NAME_ROLE_GRANT = "roleGrant";
  @SerializedName(SERIALIZED_NAME_ROLE_GRANT)
  private RoleGrant roleGrant;

  public static final String SERIALIZED_NAME_ROLE_GRANTS = "roleGrants";
  @SerializedName(SERIALIZED_NAME_ROLE_GRANTS)
  private List<RoleGrant> roleGrants = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSL_CONFIG_TEMPLATE = "sslConfigTemplate";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIG_TEMPLATE)
  private SslConfigTemplate sslConfigTemplate;

  public static final String SERIALIZED_NAME_SUPPORTED_RUNTIME_FEATURES = "supportedRuntimeFeatures";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_RUNTIME_FEATURES)
  private SupportedRuntimeFeatures supportedRuntimeFeatures;

  /**
   * Gets or Sets unsupportedConnectionTypes
   */
  @JsonAdapter(UnsupportedConnectionTypesEnum.Adapter.class)
  public enum UnsupportedConnectionTypesEnum {
    CONNECTION_TYPE_UNSPECIFIED("CONNECTION_TYPE_UNSPECIFIED"),
    
    CONNECTION_WITH_EVENTING("CONNECTION_WITH_EVENTING"),
    
    ONLY_CONNECTION("ONLY_CONNECTION"),
    
    ONLY_EVENTING("ONLY_EVENTING");

    private String value;

    UnsupportedConnectionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnsupportedConnectionTypesEnum fromValue(String value) {
      for (UnsupportedConnectionTypesEnum b : UnsupportedConnectionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnsupportedConnectionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnsupportedConnectionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnsupportedConnectionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnsupportedConnectionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnsupportedConnectionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNSUPPORTED_CONNECTION_TYPES = "unsupportedConnectionTypes";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_CONNECTION_TYPES)
  private List<UnsupportedConnectionTypesEnum> unsupportedConnectionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConnectorVersion() {
  }

  public ConnectorVersion(
     List<AuthConfigTemplate> authConfigTemplates, 
     List<ConfigVariableTemplate> configVariableTemplates, 
     String createTime, 
     List<DestinationConfigTemplate> destinationConfigTemplates, 
     String displayName, 
     Map<String, String> labels, 
     LaunchStageEnum launchStage, 
     String name, 
     String releaseVersion, 
     List<RoleGrant> roleGrants, 
     List<UnsupportedConnectionTypesEnum> unsupportedConnectionTypes, 
     String updateTime
  ) {
    this();
    this.authConfigTemplates = authConfigTemplates;
    this.configVariableTemplates = configVariableTemplates;
    this.createTime = createTime;
    this.destinationConfigTemplates = destinationConfigTemplates;
    this.displayName = displayName;
    this.labels = labels;
    this.launchStage = launchStage;
    this.name = name;
    this.releaseVersion = releaseVersion;
    this.roleGrants = roleGrants;
    this.unsupportedConnectionTypes = unsupportedConnectionTypes;
    this.updateTime = updateTime;
  }

  /**
   * Output only. List of auth configs supported by the Connector Version.
   * @return authConfigTemplates
   */
  @javax.annotation.Nullable
  public List<AuthConfigTemplate> getAuthConfigTemplates() {
    return authConfigTemplates;
  }



  /**
   * Output only. List of config variables needed to create a connection.
   * @return configVariableTemplates
   */
  @javax.annotation.Nullable
  public List<ConfigVariableTemplate> getConfigVariableTemplates() {
    return configVariableTemplates;
  }



  public ConnectorVersion connectorInfraConfig(ConnectorInfraConfig connectorInfraConfig) {
    this.connectorInfraConfig = connectorInfraConfig;
    return this;
  }

  /**
   * Get connectorInfraConfig
   * @return connectorInfraConfig
   */
  @javax.annotation.Nullable
  public ConnectorInfraConfig getConnectorInfraConfig() {
    return connectorInfraConfig;
  }

  public void setConnectorInfraConfig(ConnectorInfraConfig connectorInfraConfig) {
    this.connectorInfraConfig = connectorInfraConfig;
  }


  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. List of destination configs needed to create a connection.
   * @return destinationConfigTemplates
   */
  @javax.annotation.Nullable
  public List<DestinationConfigTemplate> getDestinationConfigTemplates() {
    return destinationConfigTemplates;
  }



  /**
   * Output only. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public ConnectorVersion egressControlConfig(EgressControlConfig egressControlConfig) {
    this.egressControlConfig = egressControlConfig;
    return this;
  }

  /**
   * Get egressControlConfig
   * @return egressControlConfig
   */
  @javax.annotation.Nullable
  public EgressControlConfig getEgressControlConfig() {
    return egressControlConfig;
  }

  public void setEgressControlConfig(EgressControlConfig egressControlConfig) {
    this.egressControlConfig = egressControlConfig;
  }


  public ConnectorVersion eventingConfigTemplate(EventingConfigTemplate eventingConfigTemplate) {
    this.eventingConfigTemplate = eventingConfigTemplate;
    return this;
  }

  /**
   * Get eventingConfigTemplate
   * @return eventingConfigTemplate
   */
  @javax.annotation.Nullable
  public EventingConfigTemplate getEventingConfigTemplate() {
    return eventingConfigTemplate;
  }

  public void setEventingConfigTemplate(EventingConfigTemplate eventingConfigTemplate) {
    this.eventingConfigTemplate = eventingConfigTemplate;
  }


  /**
   * Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }



  /**
   * Output only. Flag to mark the version indicating the launch stage.
   * @return launchStage
   */
  @javax.annotation.Nullable
  public LaunchStageEnum getLaunchStage() {
    return launchStage;
  }



  /**
   * Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. ReleaseVersion of the connector, for example: \&quot;1.0.1-alpha\&quot;.
   * @return releaseVersion
   */
  @javax.annotation.Nullable
  public String getReleaseVersion() {
    return releaseVersion;
  }



  public ConnectorVersion roleGrant(RoleGrant roleGrant) {
    this.roleGrant = roleGrant;
    return this;
  }

  /**
   * Get roleGrant
   * @return roleGrant
   */
  @javax.annotation.Nullable
  public RoleGrant getRoleGrant() {
    return roleGrant;
  }

  public void setRoleGrant(RoleGrant roleGrant) {
    this.roleGrant = roleGrant;
  }


  /**
   * Output only. Role grant configurations for this connector version.
   * @return roleGrants
   */
  @javax.annotation.Nullable
  public List<RoleGrant> getRoleGrants() {
    return roleGrants;
  }



  public ConnectorVersion sslConfigTemplate(SslConfigTemplate sslConfigTemplate) {
    this.sslConfigTemplate = sslConfigTemplate;
    return this;
  }

  /**
   * Get sslConfigTemplate
   * @return sslConfigTemplate
   */
  @javax.annotation.Nullable
  public SslConfigTemplate getSslConfigTemplate() {
    return sslConfigTemplate;
  }

  public void setSslConfigTemplate(SslConfigTemplate sslConfigTemplate) {
    this.sslConfigTemplate = sslConfigTemplate;
  }


  public ConnectorVersion supportedRuntimeFeatures(SupportedRuntimeFeatures supportedRuntimeFeatures) {
    this.supportedRuntimeFeatures = supportedRuntimeFeatures;
    return this;
  }

  /**
   * Get supportedRuntimeFeatures
   * @return supportedRuntimeFeatures
   */
  @javax.annotation.Nullable
  public SupportedRuntimeFeatures getSupportedRuntimeFeatures() {
    return supportedRuntimeFeatures;
  }

  public void setSupportedRuntimeFeatures(SupportedRuntimeFeatures supportedRuntimeFeatures) {
    this.supportedRuntimeFeatures = supportedRuntimeFeatures;
  }


  /**
   * Output only. Unsupported connection types.
   * @return unsupportedConnectionTypes
   */
  @javax.annotation.Nullable
  public List<UnsupportedConnectionTypesEnum> getUnsupportedConnectionTypes() {
    return unsupportedConnectionTypes;
  }



  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorVersion connectorVersion = (ConnectorVersion) o;
    return Objects.equals(this.authConfigTemplates, connectorVersion.authConfigTemplates) &&
        Objects.equals(this.configVariableTemplates, connectorVersion.configVariableTemplates) &&
        Objects.equals(this.connectorInfraConfig, connectorVersion.connectorInfraConfig) &&
        Objects.equals(this.createTime, connectorVersion.createTime) &&
        Objects.equals(this.destinationConfigTemplates, connectorVersion.destinationConfigTemplates) &&
        Objects.equals(this.displayName, connectorVersion.displayName) &&
        Objects.equals(this.egressControlConfig, connectorVersion.egressControlConfig) &&
        Objects.equals(this.eventingConfigTemplate, connectorVersion.eventingConfigTemplate) &&
        Objects.equals(this.labels, connectorVersion.labels) &&
        Objects.equals(this.launchStage, connectorVersion.launchStage) &&
        Objects.equals(this.name, connectorVersion.name) &&
        Objects.equals(this.releaseVersion, connectorVersion.releaseVersion) &&
        Objects.equals(this.roleGrant, connectorVersion.roleGrant) &&
        Objects.equals(this.roleGrants, connectorVersion.roleGrants) &&
        Objects.equals(this.sslConfigTemplate, connectorVersion.sslConfigTemplate) &&
        Objects.equals(this.supportedRuntimeFeatures, connectorVersion.supportedRuntimeFeatures) &&
        Objects.equals(this.unsupportedConnectionTypes, connectorVersion.unsupportedConnectionTypes) &&
        Objects.equals(this.updateTime, connectorVersion.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authConfigTemplates, configVariableTemplates, connectorInfraConfig, createTime, destinationConfigTemplates, displayName, egressControlConfig, eventingConfigTemplate, labels, launchStage, name, releaseVersion, roleGrant, roleGrants, sslConfigTemplate, supportedRuntimeFeatures, unsupportedConnectionTypes, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorVersion {\n");
    sb.append("    authConfigTemplates: ").append(toIndentedString(authConfigTemplates)).append("\n");
    sb.append("    configVariableTemplates: ").append(toIndentedString(configVariableTemplates)).append("\n");
    sb.append("    connectorInfraConfig: ").append(toIndentedString(connectorInfraConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destinationConfigTemplates: ").append(toIndentedString(destinationConfigTemplates)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    egressControlConfig: ").append(toIndentedString(egressControlConfig)).append("\n");
    sb.append("    eventingConfigTemplate: ").append(toIndentedString(eventingConfigTemplate)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    launchStage: ").append(toIndentedString(launchStage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseVersion: ").append(toIndentedString(releaseVersion)).append("\n");
    sb.append("    roleGrant: ").append(toIndentedString(roleGrant)).append("\n");
    sb.append("    roleGrants: ").append(toIndentedString(roleGrants)).append("\n");
    sb.append("    sslConfigTemplate: ").append(toIndentedString(sslConfigTemplate)).append("\n");
    sb.append("    supportedRuntimeFeatures: ").append(toIndentedString(supportedRuntimeFeatures)).append("\n");
    sb.append("    unsupportedConnectionTypes: ").append(toIndentedString(unsupportedConnectionTypes)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authConfigTemplates");
    openapiFields.add("configVariableTemplates");
    openapiFields.add("connectorInfraConfig");
    openapiFields.add("createTime");
    openapiFields.add("destinationConfigTemplates");
    openapiFields.add("displayName");
    openapiFields.add("egressControlConfig");
    openapiFields.add("eventingConfigTemplate");
    openapiFields.add("labels");
    openapiFields.add("launchStage");
    openapiFields.add("name");
    openapiFields.add("releaseVersion");
    openapiFields.add("roleGrant");
    openapiFields.add("roleGrants");
    openapiFields.add("sslConfigTemplate");
    openapiFields.add("supportedRuntimeFeatures");
    openapiFields.add("unsupportedConnectionTypes");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorVersion is not found in the empty JSON string", ConnectorVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authConfigTemplates") != null && !jsonObj.get("authConfigTemplates").isJsonNull()) {
        JsonArray jsonArrayauthConfigTemplates = jsonObj.getAsJsonArray("authConfigTemplates");
        if (jsonArrayauthConfigTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authConfigTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authConfigTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("authConfigTemplates").toString()));
          }

          // validate the optional field `authConfigTemplates` (array)
          for (int i = 0; i < jsonArrayauthConfigTemplates.size(); i++) {
            AuthConfigTemplate.validateJsonElement(jsonArrayauthConfigTemplates.get(i));
          };
        }
      }
      if (jsonObj.get("configVariableTemplates") != null && !jsonObj.get("configVariableTemplates").isJsonNull()) {
        JsonArray jsonArrayconfigVariableTemplates = jsonObj.getAsJsonArray("configVariableTemplates");
        if (jsonArrayconfigVariableTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configVariableTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configVariableTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("configVariableTemplates").toString()));
          }

          // validate the optional field `configVariableTemplates` (array)
          for (int i = 0; i < jsonArrayconfigVariableTemplates.size(); i++) {
            ConfigVariableTemplate.validateJsonElement(jsonArrayconfigVariableTemplates.get(i));
          };
        }
      }
      // validate the optional field `connectorInfraConfig`
      if (jsonObj.get("connectorInfraConfig") != null && !jsonObj.get("connectorInfraConfig").isJsonNull()) {
        ConnectorInfraConfig.validateJsonElement(jsonObj.get("connectorInfraConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("destinationConfigTemplates") != null && !jsonObj.get("destinationConfigTemplates").isJsonNull()) {
        JsonArray jsonArraydestinationConfigTemplates = jsonObj.getAsJsonArray("destinationConfigTemplates");
        if (jsonArraydestinationConfigTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationConfigTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationConfigTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("destinationConfigTemplates").toString()));
          }

          // validate the optional field `destinationConfigTemplates` (array)
          for (int i = 0; i < jsonArraydestinationConfigTemplates.size(); i++) {
            DestinationConfigTemplate.validateJsonElement(jsonArraydestinationConfigTemplates.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `egressControlConfig`
      if (jsonObj.get("egressControlConfig") != null && !jsonObj.get("egressControlConfig").isJsonNull()) {
        EgressControlConfig.validateJsonElement(jsonObj.get("egressControlConfig"));
      }
      // validate the optional field `eventingConfigTemplate`
      if (jsonObj.get("eventingConfigTemplate") != null && !jsonObj.get("eventingConfigTemplate").isJsonNull()) {
        EventingConfigTemplate.validateJsonElement(jsonObj.get("eventingConfigTemplate"));
      }
      if ((jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) && !jsonObj.get("launchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchStage").toString()));
      }
      // validate the optional field `launchStage`
      if (jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) {
        LaunchStageEnum.validateJsonElement(jsonObj.get("launchStage"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("releaseVersion") != null && !jsonObj.get("releaseVersion").isJsonNull()) && !jsonObj.get("releaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseVersion").toString()));
      }
      // validate the optional field `roleGrant`
      if (jsonObj.get("roleGrant") != null && !jsonObj.get("roleGrant").isJsonNull()) {
        RoleGrant.validateJsonElement(jsonObj.get("roleGrant"));
      }
      if (jsonObj.get("roleGrants") != null && !jsonObj.get("roleGrants").isJsonNull()) {
        JsonArray jsonArrayroleGrants = jsonObj.getAsJsonArray("roleGrants");
        if (jsonArrayroleGrants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roleGrants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roleGrants` to be an array in the JSON string but got `%s`", jsonObj.get("roleGrants").toString()));
          }

          // validate the optional field `roleGrants` (array)
          for (int i = 0; i < jsonArrayroleGrants.size(); i++) {
            RoleGrant.validateJsonElement(jsonArrayroleGrants.get(i));
          };
        }
      }
      // validate the optional field `sslConfigTemplate`
      if (jsonObj.get("sslConfigTemplate") != null && !jsonObj.get("sslConfigTemplate").isJsonNull()) {
        SslConfigTemplate.validateJsonElement(jsonObj.get("sslConfigTemplate"));
      }
      // validate the optional field `supportedRuntimeFeatures`
      if (jsonObj.get("supportedRuntimeFeatures") != null && !jsonObj.get("supportedRuntimeFeatures").isJsonNull()) {
        SupportedRuntimeFeatures.validateJsonElement(jsonObj.get("supportedRuntimeFeatures"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unsupportedConnectionTypes") != null && !jsonObj.get("unsupportedConnectionTypes").isJsonNull() && !jsonObj.get("unsupportedConnectionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsupportedConnectionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("unsupportedConnectionTypes").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorVersion>() {
           @Override
           public void write(JsonWriter out, ConnectorVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorVersion
   * @throws IOException if the JSON string is invalid with respect to ConnectorVersion
   */
  public static ConnectorVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorVersion.class);
  }

  /**
   * Convert an instance of ConnectorVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

