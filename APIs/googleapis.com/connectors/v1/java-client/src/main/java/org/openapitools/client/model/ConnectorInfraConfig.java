/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HPAConfig;
import org.openapitools.client.model.ResourceLimits;
import org.openapitools.client.model.ResourceRequests;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorInfraConfig {
  public static final String SERIALIZED_NAME_CONNECTION_RATELIMIT_WINDOW_SECONDS = "connectionRatelimitWindowSeconds";
  @SerializedName(SERIALIZED_NAME_CONNECTION_RATELIMIT_WINDOW_SECONDS)
  private String connectionRatelimitWindowSeconds;

  /**
   * Indicate whether connector is deployed on GKE/CloudRun
   */
  @JsonAdapter(DeploymentModelEnum.Adapter.class)
  public enum DeploymentModelEnum {
    DEPLOYMENT_MODEL_UNSPECIFIED("DEPLOYMENT_MODEL_UNSPECIFIED"),
    
    GKE_MST("GKE_MST"),
    
    CLOUD_RUN_MST("CLOUD_RUN_MST");

    private String value;

    DeploymentModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentModelEnum fromValue(String value) {
      for (DeploymentModelEnum b : DeploymentModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeploymentModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_MODEL = "deploymentModel";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_MODEL)
  private DeploymentModelEnum deploymentModel;

  public static final String SERIALIZED_NAME_HPA_CONFIG = "hpaConfig";
  @SerializedName(SERIALIZED_NAME_HPA_CONFIG)
  private HPAConfig hpaConfig;

  public static final String SERIALIZED_NAME_INTERNALCLIENT_RATELIMIT_THRESHOLD = "internalclientRatelimitThreshold";
  @SerializedName(SERIALIZED_NAME_INTERNALCLIENT_RATELIMIT_THRESHOLD)
  private String internalclientRatelimitThreshold;

  public static final String SERIALIZED_NAME_RATELIMIT_THRESHOLD = "ratelimitThreshold";
  @SerializedName(SERIALIZED_NAME_RATELIMIT_THRESHOLD)
  private String ratelimitThreshold;

  public static final String SERIALIZED_NAME_RESOURCE_LIMITS = "resourceLimits";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LIMITS)
  private ResourceLimits resourceLimits;

  public static final String SERIALIZED_NAME_RESOURCE_REQUESTS = "resourceRequests";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REQUESTS)
  private ResourceRequests resourceRequests;

  public static final String SERIALIZED_NAME_SHARED_DEPLOYMENT = "sharedDeployment";
  @SerializedName(SERIALIZED_NAME_SHARED_DEPLOYMENT)
  private String sharedDeployment;

  public ConnectorInfraConfig() {
  }

  public ConnectorInfraConfig connectionRatelimitWindowSeconds(String connectionRatelimitWindowSeconds) {
    this.connectionRatelimitWindowSeconds = connectionRatelimitWindowSeconds;
    return this;
  }

  /**
   * The window used for ratelimiting runtime requests to connections.
   * @return connectionRatelimitWindowSeconds
   */
  @javax.annotation.Nullable
  public String getConnectionRatelimitWindowSeconds() {
    return connectionRatelimitWindowSeconds;
  }

  public void setConnectionRatelimitWindowSeconds(String connectionRatelimitWindowSeconds) {
    this.connectionRatelimitWindowSeconds = connectionRatelimitWindowSeconds;
  }


  public ConnectorInfraConfig deploymentModel(DeploymentModelEnum deploymentModel) {
    this.deploymentModel = deploymentModel;
    return this;
  }

  /**
   * Indicate whether connector is deployed on GKE/CloudRun
   * @return deploymentModel
   */
  @javax.annotation.Nullable
  public DeploymentModelEnum getDeploymentModel() {
    return deploymentModel;
  }

  public void setDeploymentModel(DeploymentModelEnum deploymentModel) {
    this.deploymentModel = deploymentModel;
  }


  public ConnectorInfraConfig hpaConfig(HPAConfig hpaConfig) {
    this.hpaConfig = hpaConfig;
    return this;
  }

  /**
   * Get hpaConfig
   * @return hpaConfig
   */
  @javax.annotation.Nullable
  public HPAConfig getHpaConfig() {
    return hpaConfig;
  }

  public void setHpaConfig(HPAConfig hpaConfig) {
    this.hpaConfig = hpaConfig;
  }


  public ConnectorInfraConfig internalclientRatelimitThreshold(String internalclientRatelimitThreshold) {
    this.internalclientRatelimitThreshold = internalclientRatelimitThreshold;
    return this;
  }

  /**
   * Max QPS supported for internal requests originating from Connd.
   * @return internalclientRatelimitThreshold
   */
  @javax.annotation.Nullable
  public String getInternalclientRatelimitThreshold() {
    return internalclientRatelimitThreshold;
  }

  public void setInternalclientRatelimitThreshold(String internalclientRatelimitThreshold) {
    this.internalclientRatelimitThreshold = internalclientRatelimitThreshold;
  }


  public ConnectorInfraConfig ratelimitThreshold(String ratelimitThreshold) {
    this.ratelimitThreshold = ratelimitThreshold;
    return this;
  }

  /**
   * Max QPS supported by the connector version before throttling of requests.
   * @return ratelimitThreshold
   */
  @javax.annotation.Nullable
  public String getRatelimitThreshold() {
    return ratelimitThreshold;
  }

  public void setRatelimitThreshold(String ratelimitThreshold) {
    this.ratelimitThreshold = ratelimitThreshold;
  }


  public ConnectorInfraConfig resourceLimits(ResourceLimits resourceLimits) {
    this.resourceLimits = resourceLimits;
    return this;
  }

  /**
   * Get resourceLimits
   * @return resourceLimits
   */
  @javax.annotation.Nullable
  public ResourceLimits getResourceLimits() {
    return resourceLimits;
  }

  public void setResourceLimits(ResourceLimits resourceLimits) {
    this.resourceLimits = resourceLimits;
  }


  public ConnectorInfraConfig resourceRequests(ResourceRequests resourceRequests) {
    this.resourceRequests = resourceRequests;
    return this;
  }

  /**
   * Get resourceRequests
   * @return resourceRequests
   */
  @javax.annotation.Nullable
  public ResourceRequests getResourceRequests() {
    return resourceRequests;
  }

  public void setResourceRequests(ResourceRequests resourceRequests) {
    this.resourceRequests = resourceRequests;
  }


  public ConnectorInfraConfig sharedDeployment(String sharedDeployment) {
    this.sharedDeployment = sharedDeployment;
    return this;
  }

  /**
   * The name of shared connector deployment.
   * @return sharedDeployment
   */
  @javax.annotation.Nullable
  public String getSharedDeployment() {
    return sharedDeployment;
  }

  public void setSharedDeployment(String sharedDeployment) {
    this.sharedDeployment = sharedDeployment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorInfraConfig connectorInfraConfig = (ConnectorInfraConfig) o;
    return Objects.equals(this.connectionRatelimitWindowSeconds, connectorInfraConfig.connectionRatelimitWindowSeconds) &&
        Objects.equals(this.deploymentModel, connectorInfraConfig.deploymentModel) &&
        Objects.equals(this.hpaConfig, connectorInfraConfig.hpaConfig) &&
        Objects.equals(this.internalclientRatelimitThreshold, connectorInfraConfig.internalclientRatelimitThreshold) &&
        Objects.equals(this.ratelimitThreshold, connectorInfraConfig.ratelimitThreshold) &&
        Objects.equals(this.resourceLimits, connectorInfraConfig.resourceLimits) &&
        Objects.equals(this.resourceRequests, connectorInfraConfig.resourceRequests) &&
        Objects.equals(this.sharedDeployment, connectorInfraConfig.sharedDeployment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionRatelimitWindowSeconds, deploymentModel, hpaConfig, internalclientRatelimitThreshold, ratelimitThreshold, resourceLimits, resourceRequests, sharedDeployment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorInfraConfig {\n");
    sb.append("    connectionRatelimitWindowSeconds: ").append(toIndentedString(connectionRatelimitWindowSeconds)).append("\n");
    sb.append("    deploymentModel: ").append(toIndentedString(deploymentModel)).append("\n");
    sb.append("    hpaConfig: ").append(toIndentedString(hpaConfig)).append("\n");
    sb.append("    internalclientRatelimitThreshold: ").append(toIndentedString(internalclientRatelimitThreshold)).append("\n");
    sb.append("    ratelimitThreshold: ").append(toIndentedString(ratelimitThreshold)).append("\n");
    sb.append("    resourceLimits: ").append(toIndentedString(resourceLimits)).append("\n");
    sb.append("    resourceRequests: ").append(toIndentedString(resourceRequests)).append("\n");
    sb.append("    sharedDeployment: ").append(toIndentedString(sharedDeployment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionRatelimitWindowSeconds");
    openapiFields.add("deploymentModel");
    openapiFields.add("hpaConfig");
    openapiFields.add("internalclientRatelimitThreshold");
    openapiFields.add("ratelimitThreshold");
    openapiFields.add("resourceLimits");
    openapiFields.add("resourceRequests");
    openapiFields.add("sharedDeployment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorInfraConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorInfraConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorInfraConfig is not found in the empty JSON string", ConnectorInfraConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorInfraConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorInfraConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionRatelimitWindowSeconds") != null && !jsonObj.get("connectionRatelimitWindowSeconds").isJsonNull()) && !jsonObj.get("connectionRatelimitWindowSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionRatelimitWindowSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionRatelimitWindowSeconds").toString()));
      }
      if ((jsonObj.get("deploymentModel") != null && !jsonObj.get("deploymentModel").isJsonNull()) && !jsonObj.get("deploymentModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentModel").toString()));
      }
      // validate the optional field `deploymentModel`
      if (jsonObj.get("deploymentModel") != null && !jsonObj.get("deploymentModel").isJsonNull()) {
        DeploymentModelEnum.validateJsonElement(jsonObj.get("deploymentModel"));
      }
      // validate the optional field `hpaConfig`
      if (jsonObj.get("hpaConfig") != null && !jsonObj.get("hpaConfig").isJsonNull()) {
        HPAConfig.validateJsonElement(jsonObj.get("hpaConfig"));
      }
      if ((jsonObj.get("internalclientRatelimitThreshold") != null && !jsonObj.get("internalclientRatelimitThreshold").isJsonNull()) && !jsonObj.get("internalclientRatelimitThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalclientRatelimitThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalclientRatelimitThreshold").toString()));
      }
      if ((jsonObj.get("ratelimitThreshold") != null && !jsonObj.get("ratelimitThreshold").isJsonNull()) && !jsonObj.get("ratelimitThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratelimitThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratelimitThreshold").toString()));
      }
      // validate the optional field `resourceLimits`
      if (jsonObj.get("resourceLimits") != null && !jsonObj.get("resourceLimits").isJsonNull()) {
        ResourceLimits.validateJsonElement(jsonObj.get("resourceLimits"));
      }
      // validate the optional field `resourceRequests`
      if (jsonObj.get("resourceRequests") != null && !jsonObj.get("resourceRequests").isJsonNull()) {
        ResourceRequests.validateJsonElement(jsonObj.get("resourceRequests"));
      }
      if ((jsonObj.get("sharedDeployment") != null && !jsonObj.get("sharedDeployment").isJsonNull()) && !jsonObj.get("sharedDeployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedDeployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedDeployment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorInfraConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorInfraConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorInfraConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorInfraConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorInfraConfig>() {
           @Override
           public void write(JsonWriter out, ConnectorInfraConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorInfraConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorInfraConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorInfraConfig
   * @throws IOException if the JSON string is invalid with respect to ConnectorInfraConfig
   */
  public static ConnectorInfraConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorInfraConfig.class);
  }

  /**
   * Convert an instance of ConnectorInfraConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

