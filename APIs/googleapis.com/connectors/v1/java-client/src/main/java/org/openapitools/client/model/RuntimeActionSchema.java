/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputParameter;
import org.openapitools.client.model.JsonSchema;
import org.openapitools.client.model.ResultMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema of a runtime action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuntimeActionSchema {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INPUT_JSON_SCHEMA = "inputJsonSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_JSON_SCHEMA)
  private JsonSchema inputJsonSchema;

  public static final String SERIALIZED_NAME_INPUT_PARAMETERS = "inputParameters";
  @SerializedName(SERIALIZED_NAME_INPUT_PARAMETERS)
  private List<InputParameter> inputParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_JSON_SCHEMA = "resultJsonSchema";
  @SerializedName(SERIALIZED_NAME_RESULT_JSON_SCHEMA)
  private JsonSchema resultJsonSchema;

  public static final String SERIALIZED_NAME_RESULT_METADATA = "resultMetadata";
  @SerializedName(SERIALIZED_NAME_RESULT_METADATA)
  private List<ResultMetadata> resultMetadata = new ArrayList<>();

  public RuntimeActionSchema() {
  }

  public RuntimeActionSchema(
     String action, 
     String description, 
     String displayName, 
     List<InputParameter> inputParameters, 
     List<ResultMetadata> resultMetadata
  ) {
    this();
    this.action = action;
    this.description = description;
    this.displayName = displayName;
    this.inputParameters = inputParameters;
    this.resultMetadata = resultMetadata;
  }

  /**
   * Output only. Name of the action.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }



  /**
   * Output only. Brief Description of action
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. Display Name of action to be shown on client side
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public RuntimeActionSchema inputJsonSchema(JsonSchema inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
    return this;
  }

  /**
   * Get inputJsonSchema
   * @return inputJsonSchema
   */
  @javax.annotation.Nullable
  public JsonSchema getInputJsonSchema() {
    return inputJsonSchema;
  }

  public void setInputJsonSchema(JsonSchema inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
  }


  /**
   * Output only. List of input parameter metadata for the action.
   * @return inputParameters
   */
  @javax.annotation.Nullable
  public List<InputParameter> getInputParameters() {
    return inputParameters;
  }



  public RuntimeActionSchema resultJsonSchema(JsonSchema resultJsonSchema) {
    this.resultJsonSchema = resultJsonSchema;
    return this;
  }

  /**
   * Get resultJsonSchema
   * @return resultJsonSchema
   */
  @javax.annotation.Nullable
  public JsonSchema getResultJsonSchema() {
    return resultJsonSchema;
  }

  public void setResultJsonSchema(JsonSchema resultJsonSchema) {
    this.resultJsonSchema = resultJsonSchema;
  }


  /**
   * Output only. List of result field metadata.
   * @return resultMetadata
   */
  @javax.annotation.Nullable
  public List<ResultMetadata> getResultMetadata() {
    return resultMetadata;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeActionSchema runtimeActionSchema = (RuntimeActionSchema) o;
    return Objects.equals(this.action, runtimeActionSchema.action) &&
        Objects.equals(this.description, runtimeActionSchema.description) &&
        Objects.equals(this.displayName, runtimeActionSchema.displayName) &&
        Objects.equals(this.inputJsonSchema, runtimeActionSchema.inputJsonSchema) &&
        Objects.equals(this.inputParameters, runtimeActionSchema.inputParameters) &&
        Objects.equals(this.resultJsonSchema, runtimeActionSchema.resultJsonSchema) &&
        Objects.equals(this.resultMetadata, runtimeActionSchema.resultMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, description, displayName, inputJsonSchema, inputParameters, resultJsonSchema, resultMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeActionSchema {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    inputJsonSchema: ").append(toIndentedString(inputJsonSchema)).append("\n");
    sb.append("    inputParameters: ").append(toIndentedString(inputParameters)).append("\n");
    sb.append("    resultJsonSchema: ").append(toIndentedString(resultJsonSchema)).append("\n");
    sb.append("    resultMetadata: ").append(toIndentedString(resultMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("inputJsonSchema");
    openapiFields.add("inputParameters");
    openapiFields.add("resultJsonSchema");
    openapiFields.add("resultMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuntimeActionSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuntimeActionSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuntimeActionSchema is not found in the empty JSON string", RuntimeActionSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuntimeActionSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuntimeActionSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `inputJsonSchema`
      if (jsonObj.get("inputJsonSchema") != null && !jsonObj.get("inputJsonSchema").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("inputJsonSchema"));
      }
      if (jsonObj.get("inputParameters") != null && !jsonObj.get("inputParameters").isJsonNull()) {
        JsonArray jsonArrayinputParameters = jsonObj.getAsJsonArray("inputParameters");
        if (jsonArrayinputParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputParameters` to be an array in the JSON string but got `%s`", jsonObj.get("inputParameters").toString()));
          }

          // validate the optional field `inputParameters` (array)
          for (int i = 0; i < jsonArrayinputParameters.size(); i++) {
            InputParameter.validateJsonElement(jsonArrayinputParameters.get(i));
          };
        }
      }
      // validate the optional field `resultJsonSchema`
      if (jsonObj.get("resultJsonSchema") != null && !jsonObj.get("resultJsonSchema").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("resultJsonSchema"));
      }
      if (jsonObj.get("resultMetadata") != null && !jsonObj.get("resultMetadata").isJsonNull()) {
        JsonArray jsonArrayresultMetadata = jsonObj.getAsJsonArray("resultMetadata");
        if (jsonArrayresultMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resultMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resultMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("resultMetadata").toString()));
          }

          // validate the optional field `resultMetadata` (array)
          for (int i = 0; i < jsonArrayresultMetadata.size(); i++) {
            ResultMetadata.validateJsonElement(jsonArrayresultMetadata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuntimeActionSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuntimeActionSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuntimeActionSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuntimeActionSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<RuntimeActionSchema>() {
           @Override
           public void write(JsonWriter out, RuntimeActionSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuntimeActionSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuntimeActionSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuntimeActionSchema
   * @throws IOException if the JSON string is invalid with respect to RuntimeActionSchema
   */
  public static RuntimeActionSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuntimeActionSchema.class);
  }

  /**
   * Convert an instance of RuntimeActionSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

