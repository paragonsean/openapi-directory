/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigVariableTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthConfigTemplate defines required field over an authentication type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthConfigTemplate {
  public static final String SERIALIZED_NAME_AUTH_KEY = "authKey";
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private String authKey;

  /**
   * The type of authentication configured.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    AUTH_TYPE_UNSPECIFIED("AUTH_TYPE_UNSPECIFIED"),
    
    USER_PASSWORD("USER_PASSWORD"),
    
    OAUTH2_JWT_BEARER("OAUTH2_JWT_BEARER"),
    
    OAUTH2_CLIENT_CREDENTIALS("OAUTH2_CLIENT_CREDENTIALS"),
    
    SSH_PUBLIC_KEY("SSH_PUBLIC_KEY"),
    
    OAUTH2_AUTH_CODE_FLOW("OAUTH2_AUTH_CODE_FLOW"),
    
    GOOGLE_AUTHENTICATION("GOOGLE_AUTHENTICATION");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_CONFIG_VARIABLE_TEMPLATES = "configVariableTemplates";
  @SerializedName(SERIALIZED_NAME_CONFIG_VARIABLE_TEMPLATES)
  private List<ConfigVariableTemplate> configVariableTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public AuthConfigTemplate() {
  }

  public AuthConfigTemplate authKey(String authKey) {
    this.authKey = authKey;
    return this;
  }

  /**
   * Identifier key for auth config
   * @return authKey
   */
  @javax.annotation.Nullable
  public String getAuthKey() {
    return authKey;
  }

  public void setAuthKey(String authKey) {
    this.authKey = authKey;
  }


  public AuthConfigTemplate authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

  /**
   * The type of authentication configured.
   * @return authType
   */
  @javax.annotation.Nullable
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public AuthConfigTemplate configVariableTemplates(List<ConfigVariableTemplate> configVariableTemplates) {
    this.configVariableTemplates = configVariableTemplates;
    return this;
  }

  public AuthConfigTemplate addConfigVariableTemplatesItem(ConfigVariableTemplate configVariableTemplatesItem) {
    if (this.configVariableTemplates == null) {
      this.configVariableTemplates = new ArrayList<>();
    }
    this.configVariableTemplates.add(configVariableTemplatesItem);
    return this;
  }

  /**
   * Config variables to describe an &#x60;AuthConfig&#x60; for a &#x60;Connection&#x60;.
   * @return configVariableTemplates
   */
  @javax.annotation.Nullable
  public List<ConfigVariableTemplate> getConfigVariableTemplates() {
    return configVariableTemplates;
  }

  public void setConfigVariableTemplates(List<ConfigVariableTemplate> configVariableTemplates) {
    this.configVariableTemplates = configVariableTemplates;
  }


  public AuthConfigTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Connector specific description for an authentication template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AuthConfigTemplate displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for authentication template.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthConfigTemplate authConfigTemplate = (AuthConfigTemplate) o;
    return Objects.equals(this.authKey, authConfigTemplate.authKey) &&
        Objects.equals(this.authType, authConfigTemplate.authType) &&
        Objects.equals(this.configVariableTemplates, authConfigTemplate.configVariableTemplates) &&
        Objects.equals(this.description, authConfigTemplate.description) &&
        Objects.equals(this.displayName, authConfigTemplate.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authKey, authType, configVariableTemplates, description, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthConfigTemplate {\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    configVariableTemplates: ").append(toIndentedString(configVariableTemplates)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authKey");
    openapiFields.add("authType");
    openapiFields.add("configVariableTemplates");
    openapiFields.add("description");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthConfigTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthConfigTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthConfigTemplate is not found in the empty JSON string", AuthConfigTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthConfigTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthConfigTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authKey") != null && !jsonObj.get("authKey").isJsonNull()) && !jsonObj.get("authKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authKey").toString()));
      }
      if ((jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) && !jsonObj.get("authType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authType").toString()));
      }
      // validate the optional field `authType`
      if (jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) {
        AuthTypeEnum.validateJsonElement(jsonObj.get("authType"));
      }
      if (jsonObj.get("configVariableTemplates") != null && !jsonObj.get("configVariableTemplates").isJsonNull()) {
        JsonArray jsonArrayconfigVariableTemplates = jsonObj.getAsJsonArray("configVariableTemplates");
        if (jsonArrayconfigVariableTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configVariableTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configVariableTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("configVariableTemplates").toString()));
          }

          // validate the optional field `configVariableTemplates` (array)
          for (int i = 0; i < jsonArrayconfigVariableTemplates.size(); i++) {
            ConfigVariableTemplate.validateJsonElement(jsonArrayconfigVariableTemplates.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthConfigTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthConfigTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthConfigTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthConfigTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthConfigTemplate>() {
           @Override
           public void write(JsonWriter out, AuthConfigTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthConfigTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthConfigTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthConfigTemplate
   * @throws IOException if the JSON string is invalid with respect to AuthConfigTemplate
   */
  public static AuthConfigTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthConfigTemplate.class);
  }

  /**
   * Convert an instance of AuthConfigTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

