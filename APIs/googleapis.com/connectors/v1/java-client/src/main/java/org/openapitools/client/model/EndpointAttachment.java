/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * represents the Connector&#39;s Endpoint Attachment resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointAttachment {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT_IP = "endpointIp";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_IP)
  private String endpointIp;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_ATTACHMENT = "serviceAttachment";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTACHMENT)
  private String serviceAttachment;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public EndpointAttachment() {
  }

  public EndpointAttachment(
     String createTime, 
     String endpointIp, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.endpointIp = endpointIp;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public EndpointAttachment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The Private Service Connect connection endpoint ip
   * @return endpointIp
   */
  @javax.annotation.Nullable
  public String getEndpointIp() {
    return endpointIp;
  }



  public EndpointAttachment labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public EndpointAttachment putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public EndpointAttachment serviceAttachment(String serviceAttachment) {
    this.serviceAttachment = serviceAttachment;
    return this;
  }

  /**
   * Required. The path of the service attachment
   * @return serviceAttachment
   */
  @javax.annotation.Nullable
  public String getServiceAttachment() {
    return serviceAttachment;
  }

  public void setServiceAttachment(String serviceAttachment) {
    this.serviceAttachment = serviceAttachment;
  }


  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointAttachment endpointAttachment = (EndpointAttachment) o;
    return Objects.equals(this.createTime, endpointAttachment.createTime) &&
        Objects.equals(this.description, endpointAttachment.description) &&
        Objects.equals(this.endpointIp, endpointAttachment.endpointIp) &&
        Objects.equals(this.labels, endpointAttachment.labels) &&
        Objects.equals(this.name, endpointAttachment.name) &&
        Objects.equals(this.serviceAttachment, endpointAttachment.serviceAttachment) &&
        Objects.equals(this.updateTime, endpointAttachment.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, endpointIp, labels, name, serviceAttachment, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointAttachment {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpointIp: ").append(toIndentedString(endpointIp)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceAttachment: ").append(toIndentedString(serviceAttachment)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("endpointIp");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("serviceAttachment");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointAttachment is not found in the empty JSON string", EndpointAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endpointIp") != null && !jsonObj.get("endpointIp").isJsonNull()) && !jsonObj.get("endpointIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointIp").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serviceAttachment") != null && !jsonObj.get("serviceAttachment").isJsonNull()) && !jsonObj.get("serviceAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAttachment").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointAttachment>() {
           @Override
           public void write(JsonWriter out, EndpointAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointAttachment
   * @throws IOException if the JSON string is invalid with respect to EndpointAttachment
   */
  public static EndpointAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointAttachment.class);
  }

  /**
   * Convert an instance of EndpointAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

