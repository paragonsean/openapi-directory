/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuntimeConfig is the singleton resource of each location. It includes generic resource configs consumed by control plane and runtime plane like: pub/sub topic/subscription resource name, Cloud Storage location storing schema etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuntimeConfig {
  public static final String SERIALIZED_NAME_CONND_SUBSCRIPTION = "conndSubscription";
  @SerializedName(SERIALIZED_NAME_CONND_SUBSCRIPTION)
  private String conndSubscription;

  public static final String SERIALIZED_NAME_CONND_TOPIC = "conndTopic";
  @SerializedName(SERIALIZED_NAME_CONND_TOPIC)
  private String conndTopic;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_SUBSCRIPTION = "controlPlaneSubscription";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_SUBSCRIPTION)
  private String controlPlaneSubscription;

  public static final String SERIALIZED_NAME_CONTROL_PLANE_TOPIC = "controlPlaneTopic";
  @SerializedName(SERIALIZED_NAME_CONTROL_PLANE_TOPIC)
  private String controlPlaneTopic;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME_ENDPOINT = "runtimeEndpoint";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ENDPOINT)
  private String runtimeEndpoint;

  public static final String SERIALIZED_NAME_SCHEMA_GCS_BUCKET = "schemaGcsBucket";
  @SerializedName(SERIALIZED_NAME_SCHEMA_GCS_BUCKET)
  private String schemaGcsBucket;

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY = "serviceDirectory";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY)
  private String serviceDirectory;

  /**
   * Output only. The state of the location.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ACTIVATING("ACTIVATING"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public RuntimeConfig() {
  }

  public RuntimeConfig(
     String conndSubscription, 
     String conndTopic, 
     String controlPlaneSubscription, 
     String controlPlaneTopic, 
     String locationId, 
     String name, 
     String runtimeEndpoint, 
     String schemaGcsBucket, 
     String serviceDirectory, 
     StateEnum state
  ) {
    this();
    this.conndSubscription = conndSubscription;
    this.conndTopic = conndTopic;
    this.controlPlaneSubscription = controlPlaneSubscription;
    this.controlPlaneTopic = controlPlaneTopic;
    this.locationId = locationId;
    this.name = name;
    this.runtimeEndpoint = runtimeEndpoint;
    this.schemaGcsBucket = schemaGcsBucket;
    this.serviceDirectory = serviceDirectory;
    this.state = state;
  }

  /**
   * Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}
   * @return conndSubscription
   */
  @javax.annotation.Nullable
  public String getConndSubscription() {
    return conndSubscription;
  }



  /**
   * Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id}
   * @return conndTopic
   */
  @javax.annotation.Nullable
  public String getConndTopic() {
    return conndTopic;
  }



  /**
   * Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}
   * @return controlPlaneSubscription
   */
  @javax.annotation.Nullable
  public String getControlPlaneSubscription() {
    return controlPlaneSubscription;
  }



  /**
   * Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id}
   * @return controlPlaneTopic
   */
  @javax.annotation.Nullable
  public String getControlPlaneTopic() {
    return controlPlaneTopic;
  }



  /**
   * Output only. location_id of the runtime location. E.g. \&quot;us-west1\&quot;.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }



  /**
   * Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The endpoint of the connectors runtime ingress.
   * @return runtimeEndpoint
   */
  @javax.annotation.Nullable
  public String getRuntimeEndpoint() {
    return runtimeEndpoint;
  }



  /**
   * Output only. The Cloud Storage bucket that stores connector&#39;s schema reports.
   * @return schemaGcsBucket
   */
  @javax.annotation.Nullable
  public String getSchemaGcsBucket() {
    return schemaGcsBucket;
  }



  /**
   * Output only. The name of the Service Directory service name.
   * @return serviceDirectory
   */
  @javax.annotation.Nullable
  public String getServiceDirectory() {
    return serviceDirectory;
  }



  /**
   * Output only. The state of the location.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeConfig runtimeConfig = (RuntimeConfig) o;
    return Objects.equals(this.conndSubscription, runtimeConfig.conndSubscription) &&
        Objects.equals(this.conndTopic, runtimeConfig.conndTopic) &&
        Objects.equals(this.controlPlaneSubscription, runtimeConfig.controlPlaneSubscription) &&
        Objects.equals(this.controlPlaneTopic, runtimeConfig.controlPlaneTopic) &&
        Objects.equals(this.locationId, runtimeConfig.locationId) &&
        Objects.equals(this.name, runtimeConfig.name) &&
        Objects.equals(this.runtimeEndpoint, runtimeConfig.runtimeEndpoint) &&
        Objects.equals(this.schemaGcsBucket, runtimeConfig.schemaGcsBucket) &&
        Objects.equals(this.serviceDirectory, runtimeConfig.serviceDirectory) &&
        Objects.equals(this.state, runtimeConfig.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conndSubscription, conndTopic, controlPlaneSubscription, controlPlaneTopic, locationId, name, runtimeEndpoint, schemaGcsBucket, serviceDirectory, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeConfig {\n");
    sb.append("    conndSubscription: ").append(toIndentedString(conndSubscription)).append("\n");
    sb.append("    conndTopic: ").append(toIndentedString(conndTopic)).append("\n");
    sb.append("    controlPlaneSubscription: ").append(toIndentedString(controlPlaneSubscription)).append("\n");
    sb.append("    controlPlaneTopic: ").append(toIndentedString(controlPlaneTopic)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runtimeEndpoint: ").append(toIndentedString(runtimeEndpoint)).append("\n");
    sb.append("    schemaGcsBucket: ").append(toIndentedString(schemaGcsBucket)).append("\n");
    sb.append("    serviceDirectory: ").append(toIndentedString(serviceDirectory)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conndSubscription");
    openapiFields.add("conndTopic");
    openapiFields.add("controlPlaneSubscription");
    openapiFields.add("controlPlaneTopic");
    openapiFields.add("locationId");
    openapiFields.add("name");
    openapiFields.add("runtimeEndpoint");
    openapiFields.add("schemaGcsBucket");
    openapiFields.add("serviceDirectory");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuntimeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuntimeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuntimeConfig is not found in the empty JSON string", RuntimeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuntimeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuntimeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conndSubscription") != null && !jsonObj.get("conndSubscription").isJsonNull()) && !jsonObj.get("conndSubscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conndSubscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conndSubscription").toString()));
      }
      if ((jsonObj.get("conndTopic") != null && !jsonObj.get("conndTopic").isJsonNull()) && !jsonObj.get("conndTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conndTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conndTopic").toString()));
      }
      if ((jsonObj.get("controlPlaneSubscription") != null && !jsonObj.get("controlPlaneSubscription").isJsonNull()) && !jsonObj.get("controlPlaneSubscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlPlaneSubscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlPlaneSubscription").toString()));
      }
      if ((jsonObj.get("controlPlaneTopic") != null && !jsonObj.get("controlPlaneTopic").isJsonNull()) && !jsonObj.get("controlPlaneTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlPlaneTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlPlaneTopic").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("runtimeEndpoint") != null && !jsonObj.get("runtimeEndpoint").isJsonNull()) && !jsonObj.get("runtimeEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeEndpoint").toString()));
      }
      if ((jsonObj.get("schemaGcsBucket") != null && !jsonObj.get("schemaGcsBucket").isJsonNull()) && !jsonObj.get("schemaGcsBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaGcsBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaGcsBucket").toString()));
      }
      if ((jsonObj.get("serviceDirectory") != null && !jsonObj.get("serviceDirectory").isJsonNull()) && !jsonObj.get("serviceDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDirectory").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuntimeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuntimeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuntimeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuntimeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RuntimeConfig>() {
           @Override
           public void write(JsonWriter out, RuntimeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuntimeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuntimeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuntimeConfig
   * @throws IOException if the JSON string is invalid with respect to RuntimeConfig
   */
  public static RuntimeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuntimeConfig.class);
  }

  /**
   * Convert an instance of RuntimeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

