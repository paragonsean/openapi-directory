/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizationCodeLink;
import org.openapitools.client.model.EnumOption;
import org.openapitools.client.model.LogicalExpression;
import org.openapitools.client.model.RoleGrant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigVariableTemplate provides metadata about a &#x60;ConfigVariable&#x60; that is used in a Connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigVariableTemplate {
  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE_LINK = "authorizationCodeLink";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE_LINK)
  private AuthorizationCodeLink authorizationCodeLink;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENUM_OPTIONS = "enumOptions";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTIONS)
  private List<EnumOption> enumOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ADVANCED = "isAdvanced";
  @SerializedName(SERIALIZED_NAME_IS_ADVANCED)
  private Boolean isAdvanced;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  /**
   * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
  public enum LocationTypeEnum {
    LOCATION_TYPE_UNSPECIFIED("LOCATION_TYPE_UNSPECIFIED"),
    
    HEADER("HEADER"),
    
    PAYLOAD("PAYLOAD"),
    
    QUERY_PARAM("QUERY_PARAM"),
    
    PATH_PARAM("PATH_PARAM");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_REQUIRED_CONDITION = "requiredCondition";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CONDITION)
  private LogicalExpression requiredCondition;

  public static final String SERIALIZED_NAME_ROLE_GRANT = "roleGrant";
  @SerializedName(SERIALIZED_NAME_ROLE_GRANT)
  private RoleGrant roleGrant;

  /**
   * State of the config variable.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VALIDATION_REGEX = "validationRegex";
  @SerializedName(SERIALIZED_NAME_VALIDATION_REGEX)
  private String validationRegex;

  /**
   * Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    VALUE_TYPE_UNSPECIFIED("VALUE_TYPE_UNSPECIFIED"),
    
    STRING("STRING"),
    
    INT("INT"),
    
    BOOL("BOOL"),
    
    SECRET("SECRET"),
    
    ENUM("ENUM"),
    
    AUTHORIZATION_CODE("AUTHORIZATION_CODE"),
    
    ENCRYPTION_KEY("ENCRYPTION_KEY");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public ConfigVariableTemplate() {
  }

  public ConfigVariableTemplate authorizationCodeLink(AuthorizationCodeLink authorizationCodeLink) {
    this.authorizationCodeLink = authorizationCodeLink;
    return this;
  }

  /**
   * Get authorizationCodeLink
   * @return authorizationCodeLink
   */
  @javax.annotation.Nullable
  public AuthorizationCodeLink getAuthorizationCodeLink() {
    return authorizationCodeLink;
  }

  public void setAuthorizationCodeLink(AuthorizationCodeLink authorizationCodeLink) {
    this.authorizationCodeLink = authorizationCodeLink;
  }


  public ConfigVariableTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ConfigVariableTemplate displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the parameter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConfigVariableTemplate enumOptions(List<EnumOption> enumOptions) {
    this.enumOptions = enumOptions;
    return this;
  }

  public ConfigVariableTemplate addEnumOptionsItem(EnumOption enumOptionsItem) {
    if (this.enumOptions == null) {
      this.enumOptions = new ArrayList<>();
    }
    this.enumOptions.add(enumOptionsItem);
    return this;
  }

  /**
   * Enum options. To be populated if &#x60;ValueType&#x60; is &#x60;ENUM&#x60;
   * @return enumOptions
   */
  @javax.annotation.Nullable
  public List<EnumOption> getEnumOptions() {
    return enumOptions;
  }

  public void setEnumOptions(List<EnumOption> enumOptions) {
    this.enumOptions = enumOptions;
  }


  public ConfigVariableTemplate isAdvanced(Boolean isAdvanced) {
    this.isAdvanced = isAdvanced;
    return this;
  }

  /**
   * Indicates if current template is part of advanced settings
   * @return isAdvanced
   */
  @javax.annotation.Nullable
  public Boolean getIsAdvanced() {
    return isAdvanced;
  }

  public void setIsAdvanced(Boolean isAdvanced) {
    this.isAdvanced = isAdvanced;
  }


  public ConfigVariableTemplate key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Key of the config variable.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ConfigVariableTemplate locationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * Optional. Location Tyep denotes where this value should be sent in BYOC connections.
   * @return locationType
   */
  @javax.annotation.Nullable
  public LocationTypeEnum getLocationType() {
    return locationType;
  }

  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }


  public ConfigVariableTemplate required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Flag represents that this &#x60;ConfigVariable&#x60; must be provided for a connection.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ConfigVariableTemplate requiredCondition(LogicalExpression requiredCondition) {
    this.requiredCondition = requiredCondition;
    return this;
  }

  /**
   * Get requiredCondition
   * @return requiredCondition
   */
  @javax.annotation.Nullable
  public LogicalExpression getRequiredCondition() {
    return requiredCondition;
  }

  public void setRequiredCondition(LogicalExpression requiredCondition) {
    this.requiredCondition = requiredCondition;
  }


  public ConfigVariableTemplate roleGrant(RoleGrant roleGrant) {
    this.roleGrant = roleGrant;
    return this;
  }

  /**
   * Get roleGrant
   * @return roleGrant
   */
  @javax.annotation.Nullable
  public RoleGrant getRoleGrant() {
    return roleGrant;
  }

  public void setRoleGrant(RoleGrant roleGrant) {
    this.roleGrant = roleGrant;
  }


  public ConfigVariableTemplate state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the config variable.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ConfigVariableTemplate validationRegex(String validationRegex) {
    this.validationRegex = validationRegex;
    return this;
  }

  /**
   * Regular expression in RE2 syntax used for validating the &#x60;value&#x60; of a &#x60;ConfigVariable&#x60;.
   * @return validationRegex
   */
  @javax.annotation.Nullable
  public String getValidationRegex() {
    return validationRegex;
  }

  public void setValidationRegex(String validationRegex) {
    this.validationRegex = validationRegex;
  }


  public ConfigVariableTemplate valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
   * @return valueType
   */
  @javax.annotation.Nullable
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigVariableTemplate configVariableTemplate = (ConfigVariableTemplate) o;
    return Objects.equals(this.authorizationCodeLink, configVariableTemplate.authorizationCodeLink) &&
        Objects.equals(this.description, configVariableTemplate.description) &&
        Objects.equals(this.displayName, configVariableTemplate.displayName) &&
        Objects.equals(this.enumOptions, configVariableTemplate.enumOptions) &&
        Objects.equals(this.isAdvanced, configVariableTemplate.isAdvanced) &&
        Objects.equals(this.key, configVariableTemplate.key) &&
        Objects.equals(this.locationType, configVariableTemplate.locationType) &&
        Objects.equals(this.required, configVariableTemplate.required) &&
        Objects.equals(this.requiredCondition, configVariableTemplate.requiredCondition) &&
        Objects.equals(this.roleGrant, configVariableTemplate.roleGrant) &&
        Objects.equals(this.state, configVariableTemplate.state) &&
        Objects.equals(this.validationRegex, configVariableTemplate.validationRegex) &&
        Objects.equals(this.valueType, configVariableTemplate.valueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationCodeLink, description, displayName, enumOptions, isAdvanced, key, locationType, required, requiredCondition, roleGrant, state, validationRegex, valueType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigVariableTemplate {\n");
    sb.append("    authorizationCodeLink: ").append(toIndentedString(authorizationCodeLink)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enumOptions: ").append(toIndentedString(enumOptions)).append("\n");
    sb.append("    isAdvanced: ").append(toIndentedString(isAdvanced)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    requiredCondition: ").append(toIndentedString(requiredCondition)).append("\n");
    sb.append("    roleGrant: ").append(toIndentedString(roleGrant)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    validationRegex: ").append(toIndentedString(validationRegex)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationCodeLink");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("enumOptions");
    openapiFields.add("isAdvanced");
    openapiFields.add("key");
    openapiFields.add("locationType");
    openapiFields.add("required");
    openapiFields.add("requiredCondition");
    openapiFields.add("roleGrant");
    openapiFields.add("state");
    openapiFields.add("validationRegex");
    openapiFields.add("valueType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigVariableTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigVariableTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigVariableTemplate is not found in the empty JSON string", ConfigVariableTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigVariableTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigVariableTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorizationCodeLink`
      if (jsonObj.get("authorizationCodeLink") != null && !jsonObj.get("authorizationCodeLink").isJsonNull()) {
        AuthorizationCodeLink.validateJsonElement(jsonObj.get("authorizationCodeLink"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("enumOptions") != null && !jsonObj.get("enumOptions").isJsonNull()) {
        JsonArray jsonArrayenumOptions = jsonObj.getAsJsonArray("enumOptions");
        if (jsonArrayenumOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enumOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enumOptions` to be an array in the JSON string but got `%s`", jsonObj.get("enumOptions").toString()));
          }

          // validate the optional field `enumOptions` (array)
          for (int i = 0; i < jsonArrayenumOptions.size(); i++) {
            EnumOption.validateJsonElement(jsonArrayenumOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) && !jsonObj.get("locationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationType").toString()));
      }
      // validate the optional field `locationType`
      if (jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) {
        LocationTypeEnum.validateJsonElement(jsonObj.get("locationType"));
      }
      // validate the optional field `requiredCondition`
      if (jsonObj.get("requiredCondition") != null && !jsonObj.get("requiredCondition").isJsonNull()) {
        LogicalExpression.validateJsonElement(jsonObj.get("requiredCondition"));
      }
      // validate the optional field `roleGrant`
      if (jsonObj.get("roleGrant") != null && !jsonObj.get("roleGrant").isJsonNull()) {
        RoleGrant.validateJsonElement(jsonObj.get("roleGrant"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("validationRegex") != null && !jsonObj.get("validationRegex").isJsonNull()) && !jsonObj.get("validationRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationRegex").toString()));
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
      // validate the optional field `valueType`
      if (jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) {
        ValueTypeEnum.validateJsonElement(jsonObj.get("valueType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigVariableTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigVariableTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigVariableTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigVariableTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigVariableTemplate>() {
           @Override
           public void write(JsonWriter out, ConfigVariableTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigVariableTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigVariableTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigVariableTemplate
   * @throws IOException if the JSON string is invalid with respect to ConfigVariableTemplate
   */
  public static ConfigVariableTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigVariableTemplate.class);
  }

  /**
   * Convert an instance of ConfigVariableTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

