/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthConfigTemplate;
import org.openapitools.client.model.ConfigVariableTemplate;
import org.openapitools.client.model.DestinationConfigTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Eventing Config details of a connector version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventingConfigTemplate {
  public static final String SERIALIZED_NAME_ADDITIONAL_VARIABLES = "additionalVariables";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_VARIABLES)
  private List<ConfigVariableTemplate> additionalVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_CONFIG_TEMPLATES = "authConfigTemplates";
  @SerializedName(SERIALIZED_NAME_AUTH_CONFIG_TEMPLATES)
  private List<AuthConfigTemplate> authConfigTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_REFRESH = "autoRefresh";
  @SerializedName(SERIALIZED_NAME_AUTO_REFRESH)
  private Boolean autoRefresh;

  public static final String SERIALIZED_NAME_AUTO_REGISTRATION_SUPPORTED = "autoRegistrationSupported";
  @SerializedName(SERIALIZED_NAME_AUTO_REGISTRATION_SUPPORTED)
  private Boolean autoRegistrationSupported;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_TEMPLATE = "encryptionKeyTemplate";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_TEMPLATE)
  private ConfigVariableTemplate encryptionKeyTemplate;

  public static final String SERIALIZED_NAME_ENRICHMENT_SUPPORTED = "enrichmentSupported";
  @SerializedName(SERIALIZED_NAME_ENRICHMENT_SUPPORTED)
  private Boolean enrichmentSupported;

  /**
   * The type of the event listener for a specific connector.
   */
  @JsonAdapter(EventListenerTypeEnum.Adapter.class)
  public enum EventListenerTypeEnum {
    EVENT_LISTENER_TYPE_UNSPECIFIED("EVENT_LISTENER_TYPE_UNSPECIFIED"),
    
    WEBHOOK_LISTENER("WEBHOOK_LISTENER"),
    
    JMS_LISTENER("JMS_LISTENER");

    private String value;

    EventListenerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventListenerTypeEnum fromValue(String value) {
      for (EventListenerTypeEnum b : EventListenerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventListenerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventListenerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventListenerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventListenerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventListenerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_LISTENER_TYPE = "eventListenerType";
  @SerializedName(SERIALIZED_NAME_EVENT_LISTENER_TYPE)
  private EventListenerTypeEnum eventListenerType;

  public static final String SERIALIZED_NAME_IS_EVENTING_SUPPORTED = "isEventingSupported";
  @SerializedName(SERIALIZED_NAME_IS_EVENTING_SUPPORTED)
  private Boolean isEventingSupported;

  public static final String SERIALIZED_NAME_LISTENER_AUTH_CONFIG_TEMPLATES = "listenerAuthConfigTemplates";
  @SerializedName(SERIALIZED_NAME_LISTENER_AUTH_CONFIG_TEMPLATES)
  private List<AuthConfigTemplate> listenerAuthConfigTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROXY_DESTINATION_CONFIG = "proxyDestinationConfig";
  @SerializedName(SERIALIZED_NAME_PROXY_DESTINATION_CONFIG)
  private DestinationConfigTemplate proxyDestinationConfig;

  public static final String SERIALIZED_NAME_REGISTRATION_DESTINATION_CONFIG = "registrationDestinationConfig";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DESTINATION_CONFIG)
  private DestinationConfigTemplate registrationDestinationConfig;

  public static final String SERIALIZED_NAME_TRIGGER_CONFIG_VARIABLES = "triggerConfigVariables";
  @SerializedName(SERIALIZED_NAME_TRIGGER_CONFIG_VARIABLES)
  private List<ConfigVariableTemplate> triggerConfigVariables = new ArrayList<>();

  public EventingConfigTemplate() {
  }

  public EventingConfigTemplate additionalVariables(List<ConfigVariableTemplate> additionalVariables) {
    this.additionalVariables = additionalVariables;
    return this;
  }

  public EventingConfigTemplate addAdditionalVariablesItem(ConfigVariableTemplate additionalVariablesItem) {
    if (this.additionalVariables == null) {
      this.additionalVariables = new ArrayList<>();
    }
    this.additionalVariables.add(additionalVariablesItem);
    return this;
  }

  /**
   * Additional fields that need to be rendered.
   * @return additionalVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariableTemplate> getAdditionalVariables() {
    return additionalVariables;
  }

  public void setAdditionalVariables(List<ConfigVariableTemplate> additionalVariables) {
    this.additionalVariables = additionalVariables;
  }


  public EventingConfigTemplate authConfigTemplates(List<AuthConfigTemplate> authConfigTemplates) {
    this.authConfigTemplates = authConfigTemplates;
    return this;
  }

  public EventingConfigTemplate addAuthConfigTemplatesItem(AuthConfigTemplate authConfigTemplatesItem) {
    if (this.authConfigTemplates == null) {
      this.authConfigTemplates = new ArrayList<>();
    }
    this.authConfigTemplates.add(authConfigTemplatesItem);
    return this;
  }

  /**
   * AuthConfigTemplates represents the auth values for the webhook adapter.
   * @return authConfigTemplates
   */
  @javax.annotation.Nullable
  public List<AuthConfigTemplate> getAuthConfigTemplates() {
    return authConfigTemplates;
  }

  public void setAuthConfigTemplates(List<AuthConfigTemplate> authConfigTemplates) {
    this.authConfigTemplates = authConfigTemplates;
  }


  public EventingConfigTemplate autoRefresh(Boolean autoRefresh) {
    this.autoRefresh = autoRefresh;
    return this;
  }

  /**
   * Auto refresh to extend webhook life.
   * @return autoRefresh
   */
  @javax.annotation.Nullable
  public Boolean getAutoRefresh() {
    return autoRefresh;
  }

  public void setAutoRefresh(Boolean autoRefresh) {
    this.autoRefresh = autoRefresh;
  }


  public EventingConfigTemplate autoRegistrationSupported(Boolean autoRegistrationSupported) {
    this.autoRegistrationSupported = autoRegistrationSupported;
    return this;
  }

  /**
   * Auto Registration supported.
   * @return autoRegistrationSupported
   */
  @javax.annotation.Nullable
  public Boolean getAutoRegistrationSupported() {
    return autoRegistrationSupported;
  }

  public void setAutoRegistrationSupported(Boolean autoRegistrationSupported) {
    this.autoRegistrationSupported = autoRegistrationSupported;
  }


  public EventingConfigTemplate encryptionKeyTemplate(ConfigVariableTemplate encryptionKeyTemplate) {
    this.encryptionKeyTemplate = encryptionKeyTemplate;
    return this;
  }

  /**
   * Get encryptionKeyTemplate
   * @return encryptionKeyTemplate
   */
  @javax.annotation.Nullable
  public ConfigVariableTemplate getEncryptionKeyTemplate() {
    return encryptionKeyTemplate;
  }

  public void setEncryptionKeyTemplate(ConfigVariableTemplate encryptionKeyTemplate) {
    this.encryptionKeyTemplate = encryptionKeyTemplate;
  }


  public EventingConfigTemplate enrichmentSupported(Boolean enrichmentSupported) {
    this.enrichmentSupported = enrichmentSupported;
    return this;
  }

  /**
   * Enrichment Supported.
   * @return enrichmentSupported
   */
  @javax.annotation.Nullable
  public Boolean getEnrichmentSupported() {
    return enrichmentSupported;
  }

  public void setEnrichmentSupported(Boolean enrichmentSupported) {
    this.enrichmentSupported = enrichmentSupported;
  }


  public EventingConfigTemplate eventListenerType(EventListenerTypeEnum eventListenerType) {
    this.eventListenerType = eventListenerType;
    return this;
  }

  /**
   * The type of the event listener for a specific connector.
   * @return eventListenerType
   */
  @javax.annotation.Nullable
  public EventListenerTypeEnum getEventListenerType() {
    return eventListenerType;
  }

  public void setEventListenerType(EventListenerTypeEnum eventListenerType) {
    this.eventListenerType = eventListenerType;
  }


  public EventingConfigTemplate isEventingSupported(Boolean isEventingSupported) {
    this.isEventingSupported = isEventingSupported;
    return this;
  }

  /**
   * Is Eventing Supported.
   * @return isEventingSupported
   */
  @javax.annotation.Nullable
  public Boolean getIsEventingSupported() {
    return isEventingSupported;
  }

  public void setIsEventingSupported(Boolean isEventingSupported) {
    this.isEventingSupported = isEventingSupported;
  }


  public EventingConfigTemplate listenerAuthConfigTemplates(List<AuthConfigTemplate> listenerAuthConfigTemplates) {
    this.listenerAuthConfigTemplates = listenerAuthConfigTemplates;
    return this;
  }

  public EventingConfigTemplate addListenerAuthConfigTemplatesItem(AuthConfigTemplate listenerAuthConfigTemplatesItem) {
    if (this.listenerAuthConfigTemplates == null) {
      this.listenerAuthConfigTemplates = new ArrayList<>();
    }
    this.listenerAuthConfigTemplates.add(listenerAuthConfigTemplatesItem);
    return this;
  }

  /**
   * ListenerAuthConfigTemplates represents the auth values for the event listener.
   * @return listenerAuthConfigTemplates
   */
  @javax.annotation.Nullable
  public List<AuthConfigTemplate> getListenerAuthConfigTemplates() {
    return listenerAuthConfigTemplates;
  }

  public void setListenerAuthConfigTemplates(List<AuthConfigTemplate> listenerAuthConfigTemplates) {
    this.listenerAuthConfigTemplates = listenerAuthConfigTemplates;
  }


  public EventingConfigTemplate proxyDestinationConfig(DestinationConfigTemplate proxyDestinationConfig) {
    this.proxyDestinationConfig = proxyDestinationConfig;
    return this;
  }

  /**
   * Get proxyDestinationConfig
   * @return proxyDestinationConfig
   */
  @javax.annotation.Nullable
  public DestinationConfigTemplate getProxyDestinationConfig() {
    return proxyDestinationConfig;
  }

  public void setProxyDestinationConfig(DestinationConfigTemplate proxyDestinationConfig) {
    this.proxyDestinationConfig = proxyDestinationConfig;
  }


  public EventingConfigTemplate registrationDestinationConfig(DestinationConfigTemplate registrationDestinationConfig) {
    this.registrationDestinationConfig = registrationDestinationConfig;
    return this;
  }

  /**
   * Get registrationDestinationConfig
   * @return registrationDestinationConfig
   */
  @javax.annotation.Nullable
  public DestinationConfigTemplate getRegistrationDestinationConfig() {
    return registrationDestinationConfig;
  }

  public void setRegistrationDestinationConfig(DestinationConfigTemplate registrationDestinationConfig) {
    this.registrationDestinationConfig = registrationDestinationConfig;
  }


  public EventingConfigTemplate triggerConfigVariables(List<ConfigVariableTemplate> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
    return this;
  }

  public EventingConfigTemplate addTriggerConfigVariablesItem(ConfigVariableTemplate triggerConfigVariablesItem) {
    if (this.triggerConfigVariables == null) {
      this.triggerConfigVariables = new ArrayList<>();
    }
    this.triggerConfigVariables.add(triggerConfigVariablesItem);
    return this;
  }

  /**
   * Trigger Config fields that needs to be rendered
   * @return triggerConfigVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariableTemplate> getTriggerConfigVariables() {
    return triggerConfigVariables;
  }

  public void setTriggerConfigVariables(List<ConfigVariableTemplate> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventingConfigTemplate eventingConfigTemplate = (EventingConfigTemplate) o;
    return Objects.equals(this.additionalVariables, eventingConfigTemplate.additionalVariables) &&
        Objects.equals(this.authConfigTemplates, eventingConfigTemplate.authConfigTemplates) &&
        Objects.equals(this.autoRefresh, eventingConfigTemplate.autoRefresh) &&
        Objects.equals(this.autoRegistrationSupported, eventingConfigTemplate.autoRegistrationSupported) &&
        Objects.equals(this.encryptionKeyTemplate, eventingConfigTemplate.encryptionKeyTemplate) &&
        Objects.equals(this.enrichmentSupported, eventingConfigTemplate.enrichmentSupported) &&
        Objects.equals(this.eventListenerType, eventingConfigTemplate.eventListenerType) &&
        Objects.equals(this.isEventingSupported, eventingConfigTemplate.isEventingSupported) &&
        Objects.equals(this.listenerAuthConfigTemplates, eventingConfigTemplate.listenerAuthConfigTemplates) &&
        Objects.equals(this.proxyDestinationConfig, eventingConfigTemplate.proxyDestinationConfig) &&
        Objects.equals(this.registrationDestinationConfig, eventingConfigTemplate.registrationDestinationConfig) &&
        Objects.equals(this.triggerConfigVariables, eventingConfigTemplate.triggerConfigVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalVariables, authConfigTemplates, autoRefresh, autoRegistrationSupported, encryptionKeyTemplate, enrichmentSupported, eventListenerType, isEventingSupported, listenerAuthConfigTemplates, proxyDestinationConfig, registrationDestinationConfig, triggerConfigVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventingConfigTemplate {\n");
    sb.append("    additionalVariables: ").append(toIndentedString(additionalVariables)).append("\n");
    sb.append("    authConfigTemplates: ").append(toIndentedString(authConfigTemplates)).append("\n");
    sb.append("    autoRefresh: ").append(toIndentedString(autoRefresh)).append("\n");
    sb.append("    autoRegistrationSupported: ").append(toIndentedString(autoRegistrationSupported)).append("\n");
    sb.append("    encryptionKeyTemplate: ").append(toIndentedString(encryptionKeyTemplate)).append("\n");
    sb.append("    enrichmentSupported: ").append(toIndentedString(enrichmentSupported)).append("\n");
    sb.append("    eventListenerType: ").append(toIndentedString(eventListenerType)).append("\n");
    sb.append("    isEventingSupported: ").append(toIndentedString(isEventingSupported)).append("\n");
    sb.append("    listenerAuthConfigTemplates: ").append(toIndentedString(listenerAuthConfigTemplates)).append("\n");
    sb.append("    proxyDestinationConfig: ").append(toIndentedString(proxyDestinationConfig)).append("\n");
    sb.append("    registrationDestinationConfig: ").append(toIndentedString(registrationDestinationConfig)).append("\n");
    sb.append("    triggerConfigVariables: ").append(toIndentedString(triggerConfigVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalVariables");
    openapiFields.add("authConfigTemplates");
    openapiFields.add("autoRefresh");
    openapiFields.add("autoRegistrationSupported");
    openapiFields.add("encryptionKeyTemplate");
    openapiFields.add("enrichmentSupported");
    openapiFields.add("eventListenerType");
    openapiFields.add("isEventingSupported");
    openapiFields.add("listenerAuthConfigTemplates");
    openapiFields.add("proxyDestinationConfig");
    openapiFields.add("registrationDestinationConfig");
    openapiFields.add("triggerConfigVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventingConfigTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventingConfigTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventingConfigTemplate is not found in the empty JSON string", EventingConfigTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventingConfigTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventingConfigTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalVariables") != null && !jsonObj.get("additionalVariables").isJsonNull()) {
        JsonArray jsonArrayadditionalVariables = jsonObj.getAsJsonArray("additionalVariables");
        if (jsonArrayadditionalVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalVariables` to be an array in the JSON string but got `%s`", jsonObj.get("additionalVariables").toString()));
          }

          // validate the optional field `additionalVariables` (array)
          for (int i = 0; i < jsonArrayadditionalVariables.size(); i++) {
            ConfigVariableTemplate.validateJsonElement(jsonArrayadditionalVariables.get(i));
          };
        }
      }
      if (jsonObj.get("authConfigTemplates") != null && !jsonObj.get("authConfigTemplates").isJsonNull()) {
        JsonArray jsonArrayauthConfigTemplates = jsonObj.getAsJsonArray("authConfigTemplates");
        if (jsonArrayauthConfigTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authConfigTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authConfigTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("authConfigTemplates").toString()));
          }

          // validate the optional field `authConfigTemplates` (array)
          for (int i = 0; i < jsonArrayauthConfigTemplates.size(); i++) {
            AuthConfigTemplate.validateJsonElement(jsonArrayauthConfigTemplates.get(i));
          };
        }
      }
      // validate the optional field `encryptionKeyTemplate`
      if (jsonObj.get("encryptionKeyTemplate") != null && !jsonObj.get("encryptionKeyTemplate").isJsonNull()) {
        ConfigVariableTemplate.validateJsonElement(jsonObj.get("encryptionKeyTemplate"));
      }
      if ((jsonObj.get("eventListenerType") != null && !jsonObj.get("eventListenerType").isJsonNull()) && !jsonObj.get("eventListenerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventListenerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventListenerType").toString()));
      }
      // validate the optional field `eventListenerType`
      if (jsonObj.get("eventListenerType") != null && !jsonObj.get("eventListenerType").isJsonNull()) {
        EventListenerTypeEnum.validateJsonElement(jsonObj.get("eventListenerType"));
      }
      if (jsonObj.get("listenerAuthConfigTemplates") != null && !jsonObj.get("listenerAuthConfigTemplates").isJsonNull()) {
        JsonArray jsonArraylistenerAuthConfigTemplates = jsonObj.getAsJsonArray("listenerAuthConfigTemplates");
        if (jsonArraylistenerAuthConfigTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listenerAuthConfigTemplates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listenerAuthConfigTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("listenerAuthConfigTemplates").toString()));
          }

          // validate the optional field `listenerAuthConfigTemplates` (array)
          for (int i = 0; i < jsonArraylistenerAuthConfigTemplates.size(); i++) {
            AuthConfigTemplate.validateJsonElement(jsonArraylistenerAuthConfigTemplates.get(i));
          };
        }
      }
      // validate the optional field `proxyDestinationConfig`
      if (jsonObj.get("proxyDestinationConfig") != null && !jsonObj.get("proxyDestinationConfig").isJsonNull()) {
        DestinationConfigTemplate.validateJsonElement(jsonObj.get("proxyDestinationConfig"));
      }
      // validate the optional field `registrationDestinationConfig`
      if (jsonObj.get("registrationDestinationConfig") != null && !jsonObj.get("registrationDestinationConfig").isJsonNull()) {
        DestinationConfigTemplate.validateJsonElement(jsonObj.get("registrationDestinationConfig"));
      }
      if (jsonObj.get("triggerConfigVariables") != null && !jsonObj.get("triggerConfigVariables").isJsonNull()) {
        JsonArray jsonArraytriggerConfigVariables = jsonObj.getAsJsonArray("triggerConfigVariables");
        if (jsonArraytriggerConfigVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerConfigVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerConfigVariables` to be an array in the JSON string but got `%s`", jsonObj.get("triggerConfigVariables").toString()));
          }

          // validate the optional field `triggerConfigVariables` (array)
          for (int i = 0; i < jsonArraytriggerConfigVariables.size(); i++) {
            ConfigVariableTemplate.validateJsonElement(jsonArraytriggerConfigVariables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventingConfigTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventingConfigTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventingConfigTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventingConfigTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<EventingConfigTemplate>() {
           @Override
           public void write(JsonWriter out, EventingConfigTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventingConfigTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventingConfigTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventingConfigTemplate
   * @throws IOException if the JSON string is invalid with respect to EventingConfigTemplate
   */
  public static EventingConfigTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventingConfigTemplate.class);
  }

  /**
   * Convert an instance of EventingConfigTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

