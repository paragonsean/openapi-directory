/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthConfig;
import org.openapitools.client.model.ConfigVariable;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.ConnectorVersionInfraConfig;
import org.openapitools.client.model.ConnectorsLogConfig;
import org.openapitools.client.model.DestinationConfig;
import org.openapitools.client.model.EventingConfig;
import org.openapitools.client.model.EventingRuntimeData;
import org.openapitools.client.model.LockConfig;
import org.openapitools.client.model.NodeConfig;
import org.openapitools.client.model.SslConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connection represents an instance of connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connection {
  public static final String SERIALIZED_NAME_AUTH_CONFIG = "authConfig";
  @SerializedName(SERIALIZED_NAME_AUTH_CONFIG)
  private AuthConfig authConfig;

  public static final String SERIALIZED_NAME_CONFIG_VARIABLES = "configVariables";
  @SerializedName(SERIALIZED_NAME_CONFIG_VARIABLES)
  private List<ConfigVariable> configVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION_REVISION = "connectionRevision";
  @SerializedName(SERIALIZED_NAME_CONNECTION_REVISION)
  private String connectionRevision;

  public static final String SERIALIZED_NAME_CONNECTOR_VERSION = "connectorVersion";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_VERSION)
  private String connectorVersion;

  public static final String SERIALIZED_NAME_CONNECTOR_VERSION_INFRA_CONFIG = "connectorVersionInfraConfig";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_VERSION_INFRA_CONFIG)
  private ConnectorVersionInfraConfig connectorVersionInfraConfig;

  /**
   * Output only. Flag to mark the version indicating the launch stage.
   */
  @JsonAdapter(ConnectorVersionLaunchStageEnum.Adapter.class)
  public enum ConnectorVersionLaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    PREVIEW("PREVIEW"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED"),
    
    PRIVATE_PREVIEW("PRIVATE_PREVIEW");

    private String value;

    ConnectorVersionLaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorVersionLaunchStageEnum fromValue(String value) {
      for (ConnectorVersionLaunchStageEnum b : ConnectorVersionLaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorVersionLaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorVersionLaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorVersionLaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorVersionLaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectorVersionLaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_VERSION_LAUNCH_STAGE = "connectorVersionLaunchStage";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_VERSION_LAUNCH_STAGE)
  private ConnectorVersionLaunchStageEnum connectorVersionLaunchStage;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_CONFIGS = "destinationConfigs";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIGS)
  private List<DestinationConfig> destinationConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVOY_IMAGE_LOCATION = "envoyImageLocation";
  @SerializedName(SERIALIZED_NAME_ENVOY_IMAGE_LOCATION)
  private String envoyImageLocation;

  public static final String SERIALIZED_NAME_EVENTING_CONFIG = "eventingConfig";
  @SerializedName(SERIALIZED_NAME_EVENTING_CONFIG)
  private EventingConfig eventingConfig;

  /**
   * Optional. Eventing enablement type. Will be nil if eventing is not enabled.
   */
  @JsonAdapter(EventingEnablementTypeEnum.Adapter.class)
  public enum EventingEnablementTypeEnum {
    EVENTING_ENABLEMENT_TYPE_UNSPECIFIED("EVENTING_ENABLEMENT_TYPE_UNSPECIFIED"),
    
    EVENTING_AND_CONNECTION("EVENTING_AND_CONNECTION"),
    
    ONLY_EVENTING("ONLY_EVENTING");

    private String value;

    EventingEnablementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventingEnablementTypeEnum fromValue(String value) {
      for (EventingEnablementTypeEnum b : EventingEnablementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventingEnablementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventingEnablementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventingEnablementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventingEnablementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventingEnablementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENTING_ENABLEMENT_TYPE = "eventingEnablementType";
  @SerializedName(SERIALIZED_NAME_EVENTING_ENABLEMENT_TYPE)
  private EventingEnablementTypeEnum eventingEnablementType;

  public static final String SERIALIZED_NAME_EVENTING_RUNTIME_DATA = "eventingRuntimeData";
  @SerializedName(SERIALIZED_NAME_EVENTING_RUNTIME_DATA)
  private EventingRuntimeData eventingRuntimeData;

  public static final String SERIALIZED_NAME_IMAGE_LOCATION = "imageLocation";
  @SerializedName(SERIALIZED_NAME_IMAGE_LOCATION)
  private String imageLocation;

  public static final String SERIALIZED_NAME_IS_TRUSTED_TESTER = "isTrustedTester";
  @SerializedName(SERIALIZED_NAME_IS_TRUSTED_TESTER)
  private Boolean isTrustedTester;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCK_CONFIG = "lockConfig";
  @SerializedName(SERIALIZED_NAME_LOCK_CONFIG)
  private LockConfig lockConfig;

  public static final String SERIALIZED_NAME_LOG_CONFIG = "logConfig";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIG)
  private ConnectorsLogConfig logConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_CONFIG = "nodeConfig";
  @SerializedName(SERIALIZED_NAME_NODE_CONFIG)
  private NodeConfig nodeConfig;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY = "serviceDirectory";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY)
  private String serviceDirectory;

  public static final String SERIALIZED_NAME_SSL_CONFIG = "sslConfig";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIG)
  private SslConfig sslConfig;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConnectionStatus status;

  /**
   * Output only. This subscription type enum states the subscription type of the project.
   */
  @JsonAdapter(SubscriptionTypeEnum.Adapter.class)
  public enum SubscriptionTypeEnum {
    SUBSCRIPTION_TYPE_UNSPECIFIED("SUBSCRIPTION_TYPE_UNSPECIFIED"),
    
    PAY_G("PAY_G"),
    
    PAID("PAID");

    private String value;

    SubscriptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionTypeEnum fromValue(String value) {
      for (SubscriptionTypeEnum b : SubscriptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TYPE = "subscriptionType";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TYPE)
  private SubscriptionTypeEnum subscriptionType;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Connection() {
  }

  public Connection(
     String connectionRevision, 
     ConnectorVersionLaunchStageEnum connectorVersionLaunchStage, 
     String createTime, 
     String envoyImageLocation, 
     String imageLocation, 
     Boolean isTrustedTester, 
     String name, 
     String serviceDirectory, 
     SubscriptionTypeEnum subscriptionType, 
     String updateTime
  ) {
    this();
    this.connectionRevision = connectionRevision;
    this.connectorVersionLaunchStage = connectorVersionLaunchStage;
    this.createTime = createTime;
    this.envoyImageLocation = envoyImageLocation;
    this.imageLocation = imageLocation;
    this.isTrustedTester = isTrustedTester;
    this.name = name;
    this.serviceDirectory = serviceDirectory;
    this.subscriptionType = subscriptionType;
    this.updateTime = updateTime;
  }

  public Connection authConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
    return this;
  }

  /**
   * Get authConfig
   * @return authConfig
   */
  @javax.annotation.Nullable
  public AuthConfig getAuthConfig() {
    return authConfig;
  }

  public void setAuthConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
  }


  public Connection configVariables(List<ConfigVariable> configVariables) {
    this.configVariables = configVariables;
    return this;
  }

  public Connection addConfigVariablesItem(ConfigVariable configVariablesItem) {
    if (this.configVariables == null) {
      this.configVariables = new ArrayList<>();
    }
    this.configVariables.add(configVariablesItem);
    return this;
  }

  /**
   * Optional. Configuration for configuring the connection with an external system.
   * @return configVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariable> getConfigVariables() {
    return configVariables;
  }

  public void setConfigVariables(List<ConfigVariable> configVariables) {
    this.configVariables = configVariables;
  }


  /**
   * Output only. Connection revision. This field is only updated when the connection is created or updated by User.
   * @return connectionRevision
   */
  @javax.annotation.Nullable
  public String getConnectionRevision() {
    return connectionRevision;
  }



  public Connection connectorVersion(String connectorVersion) {
    this.connectorVersion = connectorVersion;
    return this;
  }

  /**
   * Required. Connector version on which the connection is created. The format is: projects/_*_/locations/_*_/providers/_*_/connectors/_*_/versions/_* Only global location is supported for ConnectorVersion resource.
   * @return connectorVersion
   */
  @javax.annotation.Nullable
  public String getConnectorVersion() {
    return connectorVersion;
  }

  public void setConnectorVersion(String connectorVersion) {
    this.connectorVersion = connectorVersion;
  }


  public Connection connectorVersionInfraConfig(ConnectorVersionInfraConfig connectorVersionInfraConfig) {
    this.connectorVersionInfraConfig = connectorVersionInfraConfig;
    return this;
  }

  /**
   * Get connectorVersionInfraConfig
   * @return connectorVersionInfraConfig
   */
  @javax.annotation.Nullable
  public ConnectorVersionInfraConfig getConnectorVersionInfraConfig() {
    return connectorVersionInfraConfig;
  }

  public void setConnectorVersionInfraConfig(ConnectorVersionInfraConfig connectorVersionInfraConfig) {
    this.connectorVersionInfraConfig = connectorVersionInfraConfig;
  }


  /**
   * Output only. Flag to mark the version indicating the launch stage.
   * @return connectorVersionLaunchStage
   */
  @javax.annotation.Nullable
  public ConnectorVersionLaunchStageEnum getConnectorVersionLaunchStage() {
    return connectorVersionLaunchStage;
  }



  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Connection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Connection destinationConfigs(List<DestinationConfig> destinationConfigs) {
    this.destinationConfigs = destinationConfigs;
    return this;
  }

  public Connection addDestinationConfigsItem(DestinationConfig destinationConfigsItem) {
    if (this.destinationConfigs == null) {
      this.destinationConfigs = new ArrayList<>();
    }
    this.destinationConfigs.add(destinationConfigsItem);
    return this;
  }

  /**
   * Optional. Configuration of the Connector&#39;s destination. Only accepted for Connectors that accepts user defined destination(s).
   * @return destinationConfigs
   */
  @javax.annotation.Nullable
  public List<DestinationConfig> getDestinationConfigs() {
    return destinationConfigs;
  }

  public void setDestinationConfigs(List<DestinationConfig> destinationConfigs) {
    this.destinationConfigs = destinationConfigs;
  }


  /**
   * Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
   * @return envoyImageLocation
   */
  @javax.annotation.Nullable
  public String getEnvoyImageLocation() {
    return envoyImageLocation;
  }



  public Connection eventingConfig(EventingConfig eventingConfig) {
    this.eventingConfig = eventingConfig;
    return this;
  }

  /**
   * Get eventingConfig
   * @return eventingConfig
   */
  @javax.annotation.Nullable
  public EventingConfig getEventingConfig() {
    return eventingConfig;
  }

  public void setEventingConfig(EventingConfig eventingConfig) {
    this.eventingConfig = eventingConfig;
  }


  public Connection eventingEnablementType(EventingEnablementTypeEnum eventingEnablementType) {
    this.eventingEnablementType = eventingEnablementType;
    return this;
  }

  /**
   * Optional. Eventing enablement type. Will be nil if eventing is not enabled.
   * @return eventingEnablementType
   */
  @javax.annotation.Nullable
  public EventingEnablementTypeEnum getEventingEnablementType() {
    return eventingEnablementType;
  }

  public void setEventingEnablementType(EventingEnablementTypeEnum eventingEnablementType) {
    this.eventingEnablementType = eventingEnablementType;
  }


  public Connection eventingRuntimeData(EventingRuntimeData eventingRuntimeData) {
    this.eventingRuntimeData = eventingRuntimeData;
    return this;
  }

  /**
   * Get eventingRuntimeData
   * @return eventingRuntimeData
   */
  @javax.annotation.Nullable
  public EventingRuntimeData getEventingRuntimeData() {
    return eventingRuntimeData;
  }

  public void setEventingRuntimeData(EventingRuntimeData eventingRuntimeData) {
    this.eventingRuntimeData = eventingRuntimeData;
  }


  /**
   * Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
   * @return imageLocation
   */
  @javax.annotation.Nullable
  public String getImageLocation() {
    return imageLocation;
  }



  /**
   * Output only. Is trusted tester program enabled for the project.
   * @return isTrustedTester
   */
  @javax.annotation.Nullable
  public Boolean getIsTrustedTester() {
    return isTrustedTester;
  }



  public Connection labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Connection putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Connection lockConfig(LockConfig lockConfig) {
    this.lockConfig = lockConfig;
    return this;
  }

  /**
   * Get lockConfig
   * @return lockConfig
   */
  @javax.annotation.Nullable
  public LockConfig getLockConfig() {
    return lockConfig;
  }

  public void setLockConfig(LockConfig lockConfig) {
    this.lockConfig = lockConfig;
  }


  public Connection logConfig(ConnectorsLogConfig logConfig) {
    this.logConfig = logConfig;
    return this;
  }

  /**
   * Get logConfig
   * @return logConfig
   */
  @javax.annotation.Nullable
  public ConnectorsLogConfig getLogConfig() {
    return logConfig;
  }

  public void setLogConfig(ConnectorsLogConfig logConfig) {
    this.logConfig = logConfig;
  }


  /**
   * Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Connection nodeConfig(NodeConfig nodeConfig) {
    this.nodeConfig = nodeConfig;
    return this;
  }

  /**
   * Get nodeConfig
   * @return nodeConfig
   */
  @javax.annotation.Nullable
  public NodeConfig getNodeConfig() {
    return nodeConfig;
  }

  public void setNodeConfig(NodeConfig nodeConfig) {
    this.nodeConfig = nodeConfig;
  }


  public Connection serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. Service account needed for runtime plane to access Google Cloud resources.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  /**
   * Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. \&quot;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors\&quot;
   * @return serviceDirectory
   */
  @javax.annotation.Nullable
  public String getServiceDirectory() {
    return serviceDirectory;
  }



  public Connection sslConfig(SslConfig sslConfig) {
    this.sslConfig = sslConfig;
    return this;
  }

  /**
   * Get sslConfig
   * @return sslConfig
   */
  @javax.annotation.Nullable
  public SslConfig getSslConfig() {
    return sslConfig;
  }

  public void setSslConfig(SslConfig sslConfig) {
    this.sslConfig = sslConfig;
  }


  public Connection status(ConnectionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ConnectionStatus getStatus() {
    return status;
  }

  public void setStatus(ConnectionStatus status) {
    this.status = status;
  }


  /**
   * Output only. This subscription type enum states the subscription type of the project.
   * @return subscriptionType
   */
  @javax.annotation.Nullable
  public SubscriptionTypeEnum getSubscriptionType() {
    return subscriptionType;
  }



  public Connection suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Optional. Suspended indicates if a user has suspended a connection or not.
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.authConfig, connection.authConfig) &&
        Objects.equals(this.configVariables, connection.configVariables) &&
        Objects.equals(this.connectionRevision, connection.connectionRevision) &&
        Objects.equals(this.connectorVersion, connection.connectorVersion) &&
        Objects.equals(this.connectorVersionInfraConfig, connection.connectorVersionInfraConfig) &&
        Objects.equals(this.connectorVersionLaunchStage, connection.connectorVersionLaunchStage) &&
        Objects.equals(this.createTime, connection.createTime) &&
        Objects.equals(this.description, connection.description) &&
        Objects.equals(this.destinationConfigs, connection.destinationConfigs) &&
        Objects.equals(this.envoyImageLocation, connection.envoyImageLocation) &&
        Objects.equals(this.eventingConfig, connection.eventingConfig) &&
        Objects.equals(this.eventingEnablementType, connection.eventingEnablementType) &&
        Objects.equals(this.eventingRuntimeData, connection.eventingRuntimeData) &&
        Objects.equals(this.imageLocation, connection.imageLocation) &&
        Objects.equals(this.isTrustedTester, connection.isTrustedTester) &&
        Objects.equals(this.labels, connection.labels) &&
        Objects.equals(this.lockConfig, connection.lockConfig) &&
        Objects.equals(this.logConfig, connection.logConfig) &&
        Objects.equals(this.name, connection.name) &&
        Objects.equals(this.nodeConfig, connection.nodeConfig) &&
        Objects.equals(this.serviceAccount, connection.serviceAccount) &&
        Objects.equals(this.serviceDirectory, connection.serviceDirectory) &&
        Objects.equals(this.sslConfig, connection.sslConfig) &&
        Objects.equals(this.status, connection.status) &&
        Objects.equals(this.subscriptionType, connection.subscriptionType) &&
        Objects.equals(this.suspended, connection.suspended) &&
        Objects.equals(this.updateTime, connection.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authConfig, configVariables, connectionRevision, connectorVersion, connectorVersionInfraConfig, connectorVersionLaunchStage, createTime, description, destinationConfigs, envoyImageLocation, eventingConfig, eventingEnablementType, eventingRuntimeData, imageLocation, isTrustedTester, labels, lockConfig, logConfig, name, nodeConfig, serviceAccount, serviceDirectory, sslConfig, status, subscriptionType, suspended, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    sb.append("    authConfig: ").append(toIndentedString(authConfig)).append("\n");
    sb.append("    configVariables: ").append(toIndentedString(configVariables)).append("\n");
    sb.append("    connectionRevision: ").append(toIndentedString(connectionRevision)).append("\n");
    sb.append("    connectorVersion: ").append(toIndentedString(connectorVersion)).append("\n");
    sb.append("    connectorVersionInfraConfig: ").append(toIndentedString(connectorVersionInfraConfig)).append("\n");
    sb.append("    connectorVersionLaunchStage: ").append(toIndentedString(connectorVersionLaunchStage)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationConfigs: ").append(toIndentedString(destinationConfigs)).append("\n");
    sb.append("    envoyImageLocation: ").append(toIndentedString(envoyImageLocation)).append("\n");
    sb.append("    eventingConfig: ").append(toIndentedString(eventingConfig)).append("\n");
    sb.append("    eventingEnablementType: ").append(toIndentedString(eventingEnablementType)).append("\n");
    sb.append("    eventingRuntimeData: ").append(toIndentedString(eventingRuntimeData)).append("\n");
    sb.append("    imageLocation: ").append(toIndentedString(imageLocation)).append("\n");
    sb.append("    isTrustedTester: ").append(toIndentedString(isTrustedTester)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lockConfig: ").append(toIndentedString(lockConfig)).append("\n");
    sb.append("    logConfig: ").append(toIndentedString(logConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeConfig: ").append(toIndentedString(nodeConfig)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    serviceDirectory: ").append(toIndentedString(serviceDirectory)).append("\n");
    sb.append("    sslConfig: ").append(toIndentedString(sslConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionType: ").append(toIndentedString(subscriptionType)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authConfig");
    openapiFields.add("configVariables");
    openapiFields.add("connectionRevision");
    openapiFields.add("connectorVersion");
    openapiFields.add("connectorVersionInfraConfig");
    openapiFields.add("connectorVersionLaunchStage");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("destinationConfigs");
    openapiFields.add("envoyImageLocation");
    openapiFields.add("eventingConfig");
    openapiFields.add("eventingEnablementType");
    openapiFields.add("eventingRuntimeData");
    openapiFields.add("imageLocation");
    openapiFields.add("isTrustedTester");
    openapiFields.add("labels");
    openapiFields.add("lockConfig");
    openapiFields.add("logConfig");
    openapiFields.add("name");
    openapiFields.add("nodeConfig");
    openapiFields.add("serviceAccount");
    openapiFields.add("serviceDirectory");
    openapiFields.add("sslConfig");
    openapiFields.add("status");
    openapiFields.add("subscriptionType");
    openapiFields.add("suspended");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connection is not found in the empty JSON string", Connection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authConfig`
      if (jsonObj.get("authConfig") != null && !jsonObj.get("authConfig").isJsonNull()) {
        AuthConfig.validateJsonElement(jsonObj.get("authConfig"));
      }
      if (jsonObj.get("configVariables") != null && !jsonObj.get("configVariables").isJsonNull()) {
        JsonArray jsonArrayconfigVariables = jsonObj.getAsJsonArray("configVariables");
        if (jsonArrayconfigVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configVariables` to be an array in the JSON string but got `%s`", jsonObj.get("configVariables").toString()));
          }

          // validate the optional field `configVariables` (array)
          for (int i = 0; i < jsonArrayconfigVariables.size(); i++) {
            ConfigVariable.validateJsonElement(jsonArrayconfigVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("connectionRevision") != null && !jsonObj.get("connectionRevision").isJsonNull()) && !jsonObj.get("connectionRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionRevision").toString()));
      }
      if ((jsonObj.get("connectorVersion") != null && !jsonObj.get("connectorVersion").isJsonNull()) && !jsonObj.get("connectorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorVersion").toString()));
      }
      // validate the optional field `connectorVersionInfraConfig`
      if (jsonObj.get("connectorVersionInfraConfig") != null && !jsonObj.get("connectorVersionInfraConfig").isJsonNull()) {
        ConnectorVersionInfraConfig.validateJsonElement(jsonObj.get("connectorVersionInfraConfig"));
      }
      if ((jsonObj.get("connectorVersionLaunchStage") != null && !jsonObj.get("connectorVersionLaunchStage").isJsonNull()) && !jsonObj.get("connectorVersionLaunchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorVersionLaunchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorVersionLaunchStage").toString()));
      }
      // validate the optional field `connectorVersionLaunchStage`
      if (jsonObj.get("connectorVersionLaunchStage") != null && !jsonObj.get("connectorVersionLaunchStage").isJsonNull()) {
        ConnectorVersionLaunchStageEnum.validateJsonElement(jsonObj.get("connectorVersionLaunchStage"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("destinationConfigs") != null && !jsonObj.get("destinationConfigs").isJsonNull()) {
        JsonArray jsonArraydestinationConfigs = jsonObj.getAsJsonArray("destinationConfigs");
        if (jsonArraydestinationConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("destinationConfigs").toString()));
          }

          // validate the optional field `destinationConfigs` (array)
          for (int i = 0; i < jsonArraydestinationConfigs.size(); i++) {
            DestinationConfig.validateJsonElement(jsonArraydestinationConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("envoyImageLocation") != null && !jsonObj.get("envoyImageLocation").isJsonNull()) && !jsonObj.get("envoyImageLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `envoyImageLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("envoyImageLocation").toString()));
      }
      // validate the optional field `eventingConfig`
      if (jsonObj.get("eventingConfig") != null && !jsonObj.get("eventingConfig").isJsonNull()) {
        EventingConfig.validateJsonElement(jsonObj.get("eventingConfig"));
      }
      if ((jsonObj.get("eventingEnablementType") != null && !jsonObj.get("eventingEnablementType").isJsonNull()) && !jsonObj.get("eventingEnablementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventingEnablementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventingEnablementType").toString()));
      }
      // validate the optional field `eventingEnablementType`
      if (jsonObj.get("eventingEnablementType") != null && !jsonObj.get("eventingEnablementType").isJsonNull()) {
        EventingEnablementTypeEnum.validateJsonElement(jsonObj.get("eventingEnablementType"));
      }
      // validate the optional field `eventingRuntimeData`
      if (jsonObj.get("eventingRuntimeData") != null && !jsonObj.get("eventingRuntimeData").isJsonNull()) {
        EventingRuntimeData.validateJsonElement(jsonObj.get("eventingRuntimeData"));
      }
      if ((jsonObj.get("imageLocation") != null && !jsonObj.get("imageLocation").isJsonNull()) && !jsonObj.get("imageLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageLocation").toString()));
      }
      // validate the optional field `lockConfig`
      if (jsonObj.get("lockConfig") != null && !jsonObj.get("lockConfig").isJsonNull()) {
        LockConfig.validateJsonElement(jsonObj.get("lockConfig"));
      }
      // validate the optional field `logConfig`
      if (jsonObj.get("logConfig") != null && !jsonObj.get("logConfig").isJsonNull()) {
        ConnectorsLogConfig.validateJsonElement(jsonObj.get("logConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nodeConfig`
      if (jsonObj.get("nodeConfig") != null && !jsonObj.get("nodeConfig").isJsonNull()) {
        NodeConfig.validateJsonElement(jsonObj.get("nodeConfig"));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("serviceDirectory") != null && !jsonObj.get("serviceDirectory").isJsonNull()) && !jsonObj.get("serviceDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDirectory").toString()));
      }
      // validate the optional field `sslConfig`
      if (jsonObj.get("sslConfig") != null && !jsonObj.get("sslConfig").isJsonNull()) {
        SslConfig.validateJsonElement(jsonObj.get("sslConfig"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ConnectionStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriptionType") != null && !jsonObj.get("subscriptionType").isJsonNull()) && !jsonObj.get("subscriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionType").toString()));
      }
      // validate the optional field `subscriptionType`
      if (jsonObj.get("subscriptionType") != null && !jsonObj.get("subscriptionType").isJsonNull()) {
        SubscriptionTypeEnum.validateJsonElement(jsonObj.get("subscriptionType"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connection.class));

       return (TypeAdapter<T>) new TypeAdapter<Connection>() {
           @Override
           public void write(JsonWriter out, Connection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connection
   * @throws IOException if the JSON string is invalid with respect to Connection
   */
  public static Connection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connection.class);
  }

  /**
   * Convert an instance of Connection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

