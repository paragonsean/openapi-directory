/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventType includes fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventType {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ENRICHED_EVENT_PAYLOAD_SCHEMA = "enrichedEventPayloadSchema";
  @SerializedName(SERIALIZED_NAME_ENRICHED_EVENT_PAYLOAD_SCHEMA)
  private String enrichedEventPayloadSchema;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_EVENT_PAYLOAD_SCHEMA = "eventPayloadSchema";
  @SerializedName(SERIALIZED_NAME_EVENT_PAYLOAD_SCHEMA)
  private String eventPayloadSchema;

  public static final String SERIALIZED_NAME_EVENT_TYPE_ID = "eventTypeId";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_ID)
  private String eventTypeId;

  public static final String SERIALIZED_NAME_ID_PATH = "idPath";
  @SerializedName(SERIALIZED_NAME_ID_PATH)
  private String idPath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public EventType() {
  }

  public EventType(
     String createTime, 
     String enrichedEventPayloadSchema, 
     String entityType, 
     String eventPayloadSchema, 
     String eventTypeId, 
     String idPath, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.enrichedEventPayloadSchema = enrichedEventPayloadSchema;
    this.entityType = entityType;
    this.eventPayloadSchema = eventPayloadSchema;
    this.eventTypeId = eventTypeId;
    this.idPath = idPath;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Schema of the event payload after enriched. Will be null if read before send is not supported.
   * @return enrichedEventPayloadSchema
   */
  @javax.annotation.Nullable
  public String getEnrichedEventPayloadSchema() {
    return enrichedEventPayloadSchema;
  }



  /**
   * Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature.
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }



  /**
   * Output only. Schema of webhook event payload.
   * @return eventPayloadSchema
   */
  @javax.annotation.Nullable
  public String getEventPayloadSchema() {
    return eventPayloadSchema;
  }



  /**
   * Output only. Event type id. Example: &#x60;ticket.created&#x60;.
   * @return eventTypeId
   */
  @javax.annotation.Nullable
  public String getEventTypeId() {
    return eventTypeId;
  }



  /**
   * Output only. Id path denotes the path of id in webhook payload.
   * @return idPath
   */
  @javax.annotation.Nullable
  public String getIdPath() {
    return idPath;
  }



  /**
   * Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype} Only global location is supported for Connector resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventType eventType = (EventType) o;
    return Objects.equals(this.createTime, eventType.createTime) &&
        Objects.equals(this.enrichedEventPayloadSchema, eventType.enrichedEventPayloadSchema) &&
        Objects.equals(this.entityType, eventType.entityType) &&
        Objects.equals(this.eventPayloadSchema, eventType.eventPayloadSchema) &&
        Objects.equals(this.eventTypeId, eventType.eventTypeId) &&
        Objects.equals(this.idPath, eventType.idPath) &&
        Objects.equals(this.name, eventType.name) &&
        Objects.equals(this.updateTime, eventType.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, enrichedEventPayloadSchema, entityType, eventPayloadSchema, eventTypeId, idPath, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventType {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    enrichedEventPayloadSchema: ").append(toIndentedString(enrichedEventPayloadSchema)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    eventPayloadSchema: ").append(toIndentedString(eventPayloadSchema)).append("\n");
    sb.append("    eventTypeId: ").append(toIndentedString(eventTypeId)).append("\n");
    sb.append("    idPath: ").append(toIndentedString(idPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("enrichedEventPayloadSchema");
    openapiFields.add("entityType");
    openapiFields.add("eventPayloadSchema");
    openapiFields.add("eventTypeId");
    openapiFields.add("idPath");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventType is not found in the empty JSON string", EventType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("enrichedEventPayloadSchema") != null && !jsonObj.get("enrichedEventPayloadSchema").isJsonNull()) && !jsonObj.get("enrichedEventPayloadSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrichedEventPayloadSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrichedEventPayloadSchema").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("eventPayloadSchema") != null && !jsonObj.get("eventPayloadSchema").isJsonNull()) && !jsonObj.get("eventPayloadSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventPayloadSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventPayloadSchema").toString()));
      }
      if ((jsonObj.get("eventTypeId") != null && !jsonObj.get("eventTypeId").isJsonNull()) && !jsonObj.get("eventTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTypeId").toString()));
      }
      if ((jsonObj.get("idPath") != null && !jsonObj.get("idPath").isJsonNull()) && !jsonObj.get("idPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idPath").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventType.class));

       return (TypeAdapter<T>) new TypeAdapter<EventType>() {
           @Override
           public void write(JsonWriter out, EventType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventType
   * @throws IOException if the JSON string is invalid with respect to EventType
   */
  public static EventType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventType.class);
  }

  /**
   * Convert an instance of EventType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

