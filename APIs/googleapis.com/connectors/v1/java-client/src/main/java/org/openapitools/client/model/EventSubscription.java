/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventSubscriptionDestination;
import org.openapitools.client.model.EventSubscriptionStatus;
import org.openapitools.client.model.JMS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * represents the Connector&#39;s EventSubscription resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventSubscription {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private EventSubscriptionDestination destinations;

  public static final String SERIALIZED_NAME_EVENT_TYPE_ID = "eventTypeId";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_ID)
  private String eventTypeId;

  public static final String SERIALIZED_NAME_JMS = "jms";
  @SerializedName(SERIALIZED_NAME_JMS)
  private JMS jms;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EventSubscriptionStatus status;

  public static final String SERIALIZED_NAME_SUBSCRIBER = "subscriber";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER)
  private String subscriber;

  public static final String SERIALIZED_NAME_SUBSCRIBER_LINK = "subscriberLink";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_LINK)
  private String subscriberLink;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public EventSubscription() {
  }

  public EventSubscription(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public EventSubscription destinations(EventSubscriptionDestination destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public EventSubscriptionDestination getDestinations() {
    return destinations;
  }

  public void setDestinations(EventSubscriptionDestination destinations) {
    this.destinations = destinations;
  }


  public EventSubscription eventTypeId(String eventTypeId) {
    this.eventTypeId = eventTypeId;
    return this;
  }

  /**
   * Optional. Event type id of the event of current EventSubscription.
   * @return eventTypeId
   */
  @javax.annotation.Nullable
  public String getEventTypeId() {
    return eventTypeId;
  }

  public void setEventTypeId(String eventTypeId) {
    this.eventTypeId = eventTypeId;
  }


  public EventSubscription jms(JMS jms) {
    this.jms = jms;
    return this;
  }

  /**
   * Get jms
   * @return jms
   */
  @javax.annotation.Nullable
  public JMS getJms() {
    return jms;
  }

  public void setJms(JMS jms) {
    this.jms = jms;
  }


  public EventSubscription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventSubscription status(EventSubscriptionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EventSubscriptionStatus getStatus() {
    return status;
  }

  public void setStatus(EventSubscriptionStatus status) {
    this.status = status;
  }


  public EventSubscription subscriber(String subscriber) {
    this.subscriber = subscriber;
    return this;
  }

  /**
   * Optional. name of the Subscriber for the current EventSubscription.
   * @return subscriber
   */
  @javax.annotation.Nullable
  public String getSubscriber() {
    return subscriber;
  }

  public void setSubscriber(String subscriber) {
    this.subscriber = subscriber;
  }


  public EventSubscription subscriberLink(String subscriberLink) {
    this.subscriberLink = subscriberLink;
    return this;
  }

  /**
   * Optional. Link for Subscriber of the current EventSubscription.
   * @return subscriberLink
   */
  @javax.annotation.Nullable
  public String getSubscriberLink() {
    return subscriberLink;
  }

  public void setSubscriberLink(String subscriberLink) {
    this.subscriberLink = subscriberLink;
  }


  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSubscription eventSubscription = (EventSubscription) o;
    return Objects.equals(this.createTime, eventSubscription.createTime) &&
        Objects.equals(this.destinations, eventSubscription.destinations) &&
        Objects.equals(this.eventTypeId, eventSubscription.eventTypeId) &&
        Objects.equals(this.jms, eventSubscription.jms) &&
        Objects.equals(this.name, eventSubscription.name) &&
        Objects.equals(this.status, eventSubscription.status) &&
        Objects.equals(this.subscriber, eventSubscription.subscriber) &&
        Objects.equals(this.subscriberLink, eventSubscription.subscriberLink) &&
        Objects.equals(this.updateTime, eventSubscription.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, destinations, eventTypeId, jms, name, status, subscriber, subscriberLink, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSubscription {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    eventTypeId: ").append(toIndentedString(eventTypeId)).append("\n");
    sb.append("    jms: ").append(toIndentedString(jms)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriber: ").append(toIndentedString(subscriber)).append("\n");
    sb.append("    subscriberLink: ").append(toIndentedString(subscriberLink)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("destinations");
    openapiFields.add("eventTypeId");
    openapiFields.add("jms");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("subscriber");
    openapiFields.add("subscriberLink");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSubscription is not found in the empty JSON string", EventSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `destinations`
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        EventSubscriptionDestination.validateJsonElement(jsonObj.get("destinations"));
      }
      if ((jsonObj.get("eventTypeId") != null && !jsonObj.get("eventTypeId").isJsonNull()) && !jsonObj.get("eventTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTypeId").toString()));
      }
      // validate the optional field `jms`
      if (jsonObj.get("jms") != null && !jsonObj.get("jms").isJsonNull()) {
        JMS.validateJsonElement(jsonObj.get("jms"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EventSubscriptionStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriber") != null && !jsonObj.get("subscriber").isJsonNull()) && !jsonObj.get("subscriber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriber").toString()));
      }
      if ((jsonObj.get("subscriberLink") != null && !jsonObj.get("subscriberLink").isJsonNull()) && !jsonObj.get("subscriberLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriberLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriberLink").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSubscription>() {
           @Override
           public void write(JsonWriter out, EventSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventSubscription
   * @throws IOException if the JSON string is invalid with respect to EventSubscription
   */
  public static EventSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSubscription.class);
  }

  /**
   * Convert an instance of EventSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

