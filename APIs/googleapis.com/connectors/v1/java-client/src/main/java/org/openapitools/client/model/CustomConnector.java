/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomConnector represents the custom connector defined by the customer as part of byoc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomConnector {
  public static final String SERIALIZED_NAME_ACTIVE_CONNECTOR_VERSIONS = "activeConnectorVersions";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONNECTOR_VERSIONS)
  private List<String> activeConnectorVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Required. Type of the custom connector.
   */
  @JsonAdapter(CustomConnectorTypeEnum.Adapter.class)
  public enum CustomConnectorTypeEnum {
    CUSTOM_CONNECTOR_TYPE_UNSPECIFIED("CUSTOM_CONNECTOR_TYPE_UNSPECIFIED"),
    
    OPEN_API("OPEN_API"),
    
    PROTO("PROTO");

    private String value;

    CustomConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomConnectorTypeEnum fromValue(String value) {
      for (CustomConnectorTypeEnum b : CustomConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomConnectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomConnectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_CONNECTOR_TYPE = "customConnectorType";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONNECTOR_TYPE)
  private CustomConnectorTypeEnum customConnectorType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CustomConnector() {
  }

  public CustomConnector(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public CustomConnector activeConnectorVersions(List<String> activeConnectorVersions) {
    this.activeConnectorVersions = activeConnectorVersions;
    return this;
  }

  public CustomConnector addActiveConnectorVersionsItem(String activeConnectorVersionsItem) {
    if (this.activeConnectorVersions == null) {
      this.activeConnectorVersions = new ArrayList<>();
    }
    this.activeConnectorVersions.add(activeConnectorVersionsItem);
    return this;
  }

  /**
   * Optional. Active connector versions.
   * @return activeConnectorVersions
   */
  @javax.annotation.Nullable
  public List<String> getActiveConnectorVersions() {
    return activeConnectorVersions;
  }

  public void setActiveConnectorVersions(List<String> activeConnectorVersions) {
    this.activeConnectorVersions = activeConnectorVersions;
  }


  /**
   * Output only. Created time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public CustomConnector customConnectorType(CustomConnectorTypeEnum customConnectorType) {
    this.customConnectorType = customConnectorType;
    return this;
  }

  /**
   * Required. Type of the custom connector.
   * @return customConnectorType
   */
  @javax.annotation.Nullable
  public CustomConnectorTypeEnum getCustomConnectorType() {
    return customConnectorType;
  }

  public void setCustomConnectorType(CustomConnectorTypeEnum customConnectorType) {
    this.customConnectorType = customConnectorType;
  }


  public CustomConnector description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomConnector displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CustomConnector labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CustomConnector putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CustomConnector logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Optional. Logo of the resource.
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public CustomConnector name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomConnector customConnector = (CustomConnector) o;
    return Objects.equals(this.activeConnectorVersions, customConnector.activeConnectorVersions) &&
        Objects.equals(this.createTime, customConnector.createTime) &&
        Objects.equals(this.customConnectorType, customConnector.customConnectorType) &&
        Objects.equals(this.description, customConnector.description) &&
        Objects.equals(this.displayName, customConnector.displayName) &&
        Objects.equals(this.labels, customConnector.labels) &&
        Objects.equals(this.logo, customConnector.logo) &&
        Objects.equals(this.name, customConnector.name) &&
        Objects.equals(this.updateTime, customConnector.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeConnectorVersions, createTime, customConnectorType, description, displayName, labels, logo, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomConnector {\n");
    sb.append("    activeConnectorVersions: ").append(toIndentedString(activeConnectorVersions)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customConnectorType: ").append(toIndentedString(customConnectorType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeConnectorVersions");
    openapiFields.add("createTime");
    openapiFields.add("customConnectorType");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("labels");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomConnector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomConnector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomConnector is not found in the empty JSON string", CustomConnector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomConnector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomConnector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeConnectorVersions") != null && !jsonObj.get("activeConnectorVersions").isJsonNull() && !jsonObj.get("activeConnectorVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeConnectorVersions` to be an array in the JSON string but got `%s`", jsonObj.get("activeConnectorVersions").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customConnectorType") != null && !jsonObj.get("customConnectorType").isJsonNull()) && !jsonObj.get("customConnectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customConnectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customConnectorType").toString()));
      }
      // validate the optional field `customConnectorType`
      if (jsonObj.get("customConnectorType") != null && !jsonObj.get("customConnectorType").isJsonNull()) {
        CustomConnectorTypeEnum.validateJsonElement(jsonObj.get("customConnectorType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomConnector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomConnector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomConnector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomConnector.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomConnector>() {
           @Override
           public void write(JsonWriter out, CustomConnector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomConnector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomConnector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomConnector
   * @throws IOException if the JSON string is invalid with respect to CustomConnector
   */
  public static CustomConnector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomConnector.class);
  }

  /**
   * Convert an instance of CustomConnector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

