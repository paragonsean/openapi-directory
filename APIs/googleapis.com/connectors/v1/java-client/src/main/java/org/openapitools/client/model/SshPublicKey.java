/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Secret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters to support Ssh public key Authentication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SshPublicKey {
  public static final String SERIALIZED_NAME_CERT_TYPE = "certType";
  @SerializedName(SERIALIZED_NAME_CERT_TYPE)
  private String certType;

  public static final String SERIALIZED_NAME_SSH_CLIENT_CERT = "sshClientCert";
  @SerializedName(SERIALIZED_NAME_SSH_CLIENT_CERT)
  private Secret sshClientCert;

  public static final String SERIALIZED_NAME_SSH_CLIENT_CERT_PASS = "sshClientCertPass";
  @SerializedName(SERIALIZED_NAME_SSH_CLIENT_CERT_PASS)
  private Secret sshClientCertPass;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public SshPublicKey() {
  }

  public SshPublicKey certType(String certType) {
    this.certType = certType;
    return this;
  }

  /**
   * Format of SSH Client cert.
   * @return certType
   */
  @javax.annotation.Nullable
  public String getCertType() {
    return certType;
  }

  public void setCertType(String certType) {
    this.certType = certType;
  }


  public SshPublicKey sshClientCert(Secret sshClientCert) {
    this.sshClientCert = sshClientCert;
    return this;
  }

  /**
   * Get sshClientCert
   * @return sshClientCert
   */
  @javax.annotation.Nullable
  public Secret getSshClientCert() {
    return sshClientCert;
  }

  public void setSshClientCert(Secret sshClientCert) {
    this.sshClientCert = sshClientCert;
  }


  public SshPublicKey sshClientCertPass(Secret sshClientCertPass) {
    this.sshClientCertPass = sshClientCertPass;
    return this;
  }

  /**
   * Get sshClientCertPass
   * @return sshClientCertPass
   */
  @javax.annotation.Nullable
  public Secret getSshClientCertPass() {
    return sshClientCertPass;
  }

  public void setSshClientCertPass(Secret sshClientCertPass) {
    this.sshClientCertPass = sshClientCertPass;
  }


  public SshPublicKey username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The user account used to authenticate.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SshPublicKey sshPublicKey = (SshPublicKey) o;
    return Objects.equals(this.certType, sshPublicKey.certType) &&
        Objects.equals(this.sshClientCert, sshPublicKey.sshClientCert) &&
        Objects.equals(this.sshClientCertPass, sshPublicKey.sshClientCertPass) &&
        Objects.equals(this.username, sshPublicKey.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certType, sshClientCert, sshClientCertPass, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SshPublicKey {\n");
    sb.append("    certType: ").append(toIndentedString(certType)).append("\n");
    sb.append("    sshClientCert: ").append(toIndentedString(sshClientCert)).append("\n");
    sb.append("    sshClientCertPass: ").append(toIndentedString(sshClientCertPass)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certType");
    openapiFields.add("sshClientCert");
    openapiFields.add("sshClientCertPass");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SshPublicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SshPublicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SshPublicKey is not found in the empty JSON string", SshPublicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SshPublicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SshPublicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certType") != null && !jsonObj.get("certType").isJsonNull()) && !jsonObj.get("certType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certType").toString()));
      }
      // validate the optional field `sshClientCert`
      if (jsonObj.get("sshClientCert") != null && !jsonObj.get("sshClientCert").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("sshClientCert"));
      }
      // validate the optional field `sshClientCertPass`
      if (jsonObj.get("sshClientCertPass") != null && !jsonObj.get("sshClientCertPass").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("sshClientCertPass"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SshPublicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SshPublicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SshPublicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SshPublicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<SshPublicKey>() {
           @Override
           public void write(JsonWriter out, SshPublicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SshPublicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SshPublicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SshPublicKey
   * @throws IOException if the JSON string is invalid with respect to SshPublicKey
   */
  public static SshPublicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SshPublicKey.class);
  }

  /**
   * Convert an instance of SshPublicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

