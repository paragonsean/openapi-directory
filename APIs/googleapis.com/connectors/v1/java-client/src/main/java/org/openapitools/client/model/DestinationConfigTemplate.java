/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinationConfigTemplate defines required destinations supported by the Connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationConfigTemplate {
  public static final String SERIALIZED_NAME_DEFAULT_PORT = "defaultPort";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PORT)
  private Integer defaultPort;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_ADVANCED = "isAdvanced";
  @SerializedName(SERIALIZED_NAME_IS_ADVANCED)
  private Boolean isAdvanced;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Integer min;

  /**
   * Whether port number should be provided by customers.
   */
  @JsonAdapter(PortFieldTypeEnum.Adapter.class)
  public enum PortFieldTypeEnum {
    FIELD_TYPE_UNSPECIFIED("FIELD_TYPE_UNSPECIFIED"),
    
    REQUIRED("REQUIRED"),
    
    OPTIONAL("OPTIONAL"),
    
    NOT_USED("NOT_USED");

    private String value;

    PortFieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortFieldTypeEnum fromValue(String value) {
      for (PortFieldTypeEnum b : PortFieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PortFieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortFieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortFieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortFieldTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PortFieldTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PORT_FIELD_TYPE = "portFieldType";
  @SerializedName(SERIALIZED_NAME_PORT_FIELD_TYPE)
  private PortFieldTypeEnum portFieldType;

  public static final String SERIALIZED_NAME_REGEX_PATTERN = "regexPattern";
  @SerializedName(SERIALIZED_NAME_REGEX_PATTERN)
  private String regexPattern;

  public DestinationConfigTemplate() {
  }

  public DestinationConfigTemplate defaultPort(Integer defaultPort) {
    this.defaultPort = defaultPort;
    return this;
  }

  /**
   * The default port.
   * @return defaultPort
   */
  @javax.annotation.Nullable
  public Integer getDefaultPort() {
    return defaultPort;
  }

  public void setDefaultPort(Integer defaultPort) {
    this.defaultPort = defaultPort;
  }


  public DestinationConfigTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DestinationConfigTemplate displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the parameter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DestinationConfigTemplate isAdvanced(Boolean isAdvanced) {
    this.isAdvanced = isAdvanced;
    return this;
  }

  /**
   * Whether the current destination tempalate is part of Advanced settings
   * @return isAdvanced
   */
  @javax.annotation.Nullable
  public Boolean getIsAdvanced() {
    return isAdvanced;
  }

  public void setIsAdvanced(Boolean isAdvanced) {
    this.isAdvanced = isAdvanced;
  }


  public DestinationConfigTemplate key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Key of the destination.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public DestinationConfigTemplate max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * The maximum number of destinations supported for this key.
   * @return max
   */
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public DestinationConfigTemplate min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * The minimum number of destinations supported for this key.
   * @return min
   */
  @javax.annotation.Nullable
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }


  public DestinationConfigTemplate portFieldType(PortFieldTypeEnum portFieldType) {
    this.portFieldType = portFieldType;
    return this;
  }

  /**
   * Whether port number should be provided by customers.
   * @return portFieldType
   */
  @javax.annotation.Nullable
  public PortFieldTypeEnum getPortFieldType() {
    return portFieldType;
  }

  public void setPortFieldType(PortFieldTypeEnum portFieldType) {
    this.portFieldType = portFieldType;
  }


  public DestinationConfigTemplate regexPattern(String regexPattern) {
    this.regexPattern = regexPattern;
    return this;
  }

  /**
   * Regex pattern for host.
   * @return regexPattern
   */
  @javax.annotation.Nullable
  public String getRegexPattern() {
    return regexPattern;
  }

  public void setRegexPattern(String regexPattern) {
    this.regexPattern = regexPattern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationConfigTemplate destinationConfigTemplate = (DestinationConfigTemplate) o;
    return Objects.equals(this.defaultPort, destinationConfigTemplate.defaultPort) &&
        Objects.equals(this.description, destinationConfigTemplate.description) &&
        Objects.equals(this.displayName, destinationConfigTemplate.displayName) &&
        Objects.equals(this.isAdvanced, destinationConfigTemplate.isAdvanced) &&
        Objects.equals(this.key, destinationConfigTemplate.key) &&
        Objects.equals(this.max, destinationConfigTemplate.max) &&
        Objects.equals(this.min, destinationConfigTemplate.min) &&
        Objects.equals(this.portFieldType, destinationConfigTemplate.portFieldType) &&
        Objects.equals(this.regexPattern, destinationConfigTemplate.regexPattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultPort, description, displayName, isAdvanced, key, max, min, portFieldType, regexPattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationConfigTemplate {\n");
    sb.append("    defaultPort: ").append(toIndentedString(defaultPort)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isAdvanced: ").append(toIndentedString(isAdvanced)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    portFieldType: ").append(toIndentedString(portFieldType)).append("\n");
    sb.append("    regexPattern: ").append(toIndentedString(regexPattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultPort");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("isAdvanced");
    openapiFields.add("key");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("portFieldType");
    openapiFields.add("regexPattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationConfigTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationConfigTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationConfigTemplate is not found in the empty JSON string", DestinationConfigTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationConfigTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationConfigTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("portFieldType") != null && !jsonObj.get("portFieldType").isJsonNull()) && !jsonObj.get("portFieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portFieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portFieldType").toString()));
      }
      // validate the optional field `portFieldType`
      if (jsonObj.get("portFieldType") != null && !jsonObj.get("portFieldType").isJsonNull()) {
        PortFieldTypeEnum.validateJsonElement(jsonObj.get("portFieldType"));
      }
      if ((jsonObj.get("regexPattern") != null && !jsonObj.get("regexPattern").isJsonNull()) && !jsonObj.get("regexPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regexPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regexPattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationConfigTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationConfigTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationConfigTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationConfigTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationConfigTemplate>() {
           @Override
           public void write(JsonWriter out, DestinationConfigTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationConfigTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationConfigTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationConfigTemplate
   * @throws IOException if the JSON string is invalid with respect to DestinationConfigTemplate
   */
  public static DestinationConfigTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationConfigTemplate.class);
  }

  /**
   * Convert an instance of DestinationConfigTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

