/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Secret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Oauth2AuthCodeFlow {
  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_AUTH_URI = "authUri";
  @SerializedName(SERIALIZED_NAME_AUTH_URI)
  private String authUri;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private Secret clientSecret;

  public static final String SERIALIZED_NAME_ENABLE_PKCE = "enablePkce";
  @SerializedName(SERIALIZED_NAME_ENABLE_PKCE)
  private Boolean enablePkce;

  public static final String SERIALIZED_NAME_PKCE_VERIFIER = "pkceVerifier";
  @SerializedName(SERIALIZED_NAME_PKCE_VERIFIER)
  private String pkceVerifier;

  public static final String SERIALIZED_NAME_REDIRECT_URI = "redirectUri";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URI)
  private String redirectUri;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public Oauth2AuthCodeFlow() {
  }

  public Oauth2AuthCodeFlow authCode(String authCode) {
    this.authCode = authCode;
    return this;
  }

  /**
   * Authorization code to be exchanged for access and refresh tokens.
   * @return authCode
   */
  @javax.annotation.Nullable
  public String getAuthCode() {
    return authCode;
  }

  public void setAuthCode(String authCode) {
    this.authCode = authCode;
  }


  public Oauth2AuthCodeFlow authUri(String authUri) {
    this.authUri = authUri;
    return this;
  }

  /**
   * Auth URL for Authorization Code Flow
   * @return authUri
   */
  @javax.annotation.Nullable
  public String getAuthUri() {
    return authUri;
  }

  public void setAuthUri(String authUri) {
    this.authUri = authUri;
  }


  public Oauth2AuthCodeFlow clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client ID for user-provided OAuth app.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Oauth2AuthCodeFlow clientSecret(Secret clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public Secret getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(Secret clientSecret) {
    this.clientSecret = clientSecret;
  }


  public Oauth2AuthCodeFlow enablePkce(Boolean enablePkce) {
    this.enablePkce = enablePkce;
    return this;
  }

  /**
   * Whether to enable PKCE when the user performs the auth code flow.
   * @return enablePkce
   */
  @javax.annotation.Nullable
  public Boolean getEnablePkce() {
    return enablePkce;
  }

  public void setEnablePkce(Boolean enablePkce) {
    this.enablePkce = enablePkce;
  }


  public Oauth2AuthCodeFlow pkceVerifier(String pkceVerifier) {
    this.pkceVerifier = pkceVerifier;
    return this;
  }

  /**
   * PKCE verifier to be used during the auth code exchange.
   * @return pkceVerifier
   */
  @javax.annotation.Nullable
  public String getPkceVerifier() {
    return pkceVerifier;
  }

  public void setPkceVerifier(String pkceVerifier) {
    this.pkceVerifier = pkceVerifier;
  }


  public Oauth2AuthCodeFlow redirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
    return this;
  }

  /**
   * Redirect URI to be provided during the auth code exchange.
   * @return redirectUri
   */
  @javax.annotation.Nullable
  public String getRedirectUri() {
    return redirectUri;
  }

  public void setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
  }


  public Oauth2AuthCodeFlow scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Oauth2AuthCodeFlow addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Scopes the connection will request when the user performs the auth code flow.
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Oauth2AuthCodeFlow oauth2AuthCodeFlow = (Oauth2AuthCodeFlow) o;
    return Objects.equals(this.authCode, oauth2AuthCodeFlow.authCode) &&
        Objects.equals(this.authUri, oauth2AuthCodeFlow.authUri) &&
        Objects.equals(this.clientId, oauth2AuthCodeFlow.clientId) &&
        Objects.equals(this.clientSecret, oauth2AuthCodeFlow.clientSecret) &&
        Objects.equals(this.enablePkce, oauth2AuthCodeFlow.enablePkce) &&
        Objects.equals(this.pkceVerifier, oauth2AuthCodeFlow.pkceVerifier) &&
        Objects.equals(this.redirectUri, oauth2AuthCodeFlow.redirectUri) &&
        Objects.equals(this.scopes, oauth2AuthCodeFlow.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authCode, authUri, clientId, clientSecret, enablePkce, pkceVerifier, redirectUri, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Oauth2AuthCodeFlow {\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    authUri: ").append(toIndentedString(authUri)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    enablePkce: ").append(toIndentedString(enablePkce)).append("\n");
    sb.append("    pkceVerifier: ").append(toIndentedString(pkceVerifier)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authCode");
    openapiFields.add("authUri");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("enablePkce");
    openapiFields.add("pkceVerifier");
    openapiFields.add("redirectUri");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Oauth2AuthCodeFlow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Oauth2AuthCodeFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Oauth2AuthCodeFlow is not found in the empty JSON string", Oauth2AuthCodeFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Oauth2AuthCodeFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Oauth2AuthCodeFlow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authCode") != null && !jsonObj.get("authCode").isJsonNull()) && !jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      if ((jsonObj.get("authUri") != null && !jsonObj.get("authUri").isJsonNull()) && !jsonObj.get("authUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authUri").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      // validate the optional field `clientSecret`
      if (jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) {
        Secret.validateJsonElement(jsonObj.get("clientSecret"));
      }
      if ((jsonObj.get("pkceVerifier") != null && !jsonObj.get("pkceVerifier").isJsonNull()) && !jsonObj.get("pkceVerifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkceVerifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkceVerifier").toString()));
      }
      if ((jsonObj.get("redirectUri") != null && !jsonObj.get("redirectUri").isJsonNull()) && !jsonObj.get("redirectUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Oauth2AuthCodeFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Oauth2AuthCodeFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Oauth2AuthCodeFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Oauth2AuthCodeFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<Oauth2AuthCodeFlow>() {
           @Override
           public void write(JsonWriter out, Oauth2AuthCodeFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Oauth2AuthCodeFlow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Oauth2AuthCodeFlow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Oauth2AuthCodeFlow
   * @throws IOException if the JSON string is invalid with respect to Oauth2AuthCodeFlow
   */
  public static Oauth2AuthCodeFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Oauth2AuthCodeFlow.class);
  }

  /**
   * Convert an instance of Oauth2AuthCodeFlow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

