/*
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthConfig;
import org.openapitools.client.model.ConfigVariable;
import org.openapitools.client.model.DeadLetterConfig;
import org.openapitools.client.model.DestinationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Eventing Configuration of a connection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:50.207857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventingConfig {
  public static final String SERIALIZED_NAME_ADDITIONAL_VARIABLES = "additionalVariables";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_VARIABLES)
  private List<ConfigVariable> additionalVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_CONFIG = "authConfig";
  @SerializedName(SERIALIZED_NAME_AUTH_CONFIG)
  private AuthConfig authConfig;

  public static final String SERIALIZED_NAME_DEAD_LETTER_CONFIG = "deadLetterConfig";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_CONFIG)
  private DeadLetterConfig deadLetterConfig;

  public static final String SERIALIZED_NAME_ENRICHMENT_ENABLED = "enrichmentEnabled";
  @SerializedName(SERIALIZED_NAME_ENRICHMENT_ENABLED)
  private Boolean enrichmentEnabled;

  public static final String SERIALIZED_NAME_EVENTS_LISTENER_INGRESS_ENDPOINT = "eventsListenerIngressEndpoint";
  @SerializedName(SERIALIZED_NAME_EVENTS_LISTENER_INGRESS_ENDPOINT)
  private String eventsListenerIngressEndpoint;

  public static final String SERIALIZED_NAME_LISTENER_AUTH_CONFIG = "listenerAuthConfig";
  @SerializedName(SERIALIZED_NAME_LISTENER_AUTH_CONFIG)
  private AuthConfig listenerAuthConfig;

  public static final String SERIALIZED_NAME_PRIVATE_CONNECTIVITY_ENABLED = "privateConnectivityEnabled";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CONNECTIVITY_ENABLED)
  private Boolean privateConnectivityEnabled;

  public static final String SERIALIZED_NAME_PROXY_DESTINATION_CONFIG = "proxyDestinationConfig";
  @SerializedName(SERIALIZED_NAME_PROXY_DESTINATION_CONFIG)
  private DestinationConfig proxyDestinationConfig;

  public static final String SERIALIZED_NAME_REGISTRATION_DESTINATION_CONFIG = "registrationDestinationConfig";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DESTINATION_CONFIG)
  private DestinationConfig registrationDestinationConfig;

  public static final String SERIALIZED_NAME_TRIGGER_CONFIG_VARIABLES = "triggerConfigVariables";
  @SerializedName(SERIALIZED_NAME_TRIGGER_CONFIG_VARIABLES)
  private List<ConfigVariable> triggerConfigVariables = new ArrayList<>();

  public EventingConfig() {
  }

  public EventingConfig additionalVariables(List<ConfigVariable> additionalVariables) {
    this.additionalVariables = additionalVariables;
    return this;
  }

  public EventingConfig addAdditionalVariablesItem(ConfigVariable additionalVariablesItem) {
    if (this.additionalVariables == null) {
      this.additionalVariables = new ArrayList<>();
    }
    this.additionalVariables.add(additionalVariablesItem);
    return this;
  }

  /**
   * Additional eventing related field values
   * @return additionalVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariable> getAdditionalVariables() {
    return additionalVariables;
  }

  public void setAdditionalVariables(List<ConfigVariable> additionalVariables) {
    this.additionalVariables = additionalVariables;
  }


  public EventingConfig authConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
    return this;
  }

  /**
   * Get authConfig
   * @return authConfig
   */
  @javax.annotation.Nullable
  public AuthConfig getAuthConfig() {
    return authConfig;
  }

  public void setAuthConfig(AuthConfig authConfig) {
    this.authConfig = authConfig;
  }


  public EventingConfig deadLetterConfig(DeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
    return this;
  }

  /**
   * Get deadLetterConfig
   * @return deadLetterConfig
   */
  @javax.annotation.Nullable
  public DeadLetterConfig getDeadLetterConfig() {
    return deadLetterConfig;
  }

  public void setDeadLetterConfig(DeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
  }


  public EventingConfig enrichmentEnabled(Boolean enrichmentEnabled) {
    this.enrichmentEnabled = enrichmentEnabled;
    return this;
  }

  /**
   * Enrichment Enabled.
   * @return enrichmentEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEnrichmentEnabled() {
    return enrichmentEnabled;
  }

  public void setEnrichmentEnabled(Boolean enrichmentEnabled) {
    this.enrichmentEnabled = enrichmentEnabled;
  }


  public EventingConfig eventsListenerIngressEndpoint(String eventsListenerIngressEndpoint) {
    this.eventsListenerIngressEndpoint = eventsListenerIngressEndpoint;
    return this;
  }

  /**
   * Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
   * @return eventsListenerIngressEndpoint
   */
  @javax.annotation.Nullable
  public String getEventsListenerIngressEndpoint() {
    return eventsListenerIngressEndpoint;
  }

  public void setEventsListenerIngressEndpoint(String eventsListenerIngressEndpoint) {
    this.eventsListenerIngressEndpoint = eventsListenerIngressEndpoint;
  }


  public EventingConfig listenerAuthConfig(AuthConfig listenerAuthConfig) {
    this.listenerAuthConfig = listenerAuthConfig;
    return this;
  }

  /**
   * Get listenerAuthConfig
   * @return listenerAuthConfig
   */
  @javax.annotation.Nullable
  public AuthConfig getListenerAuthConfig() {
    return listenerAuthConfig;
  }

  public void setListenerAuthConfig(AuthConfig listenerAuthConfig) {
    this.listenerAuthConfig = listenerAuthConfig;
  }


  public EventingConfig privateConnectivityEnabled(Boolean privateConnectivityEnabled) {
    this.privateConnectivityEnabled = privateConnectivityEnabled;
    return this;
  }

  /**
   * Optional. Private Connectivity Enabled.
   * @return privateConnectivityEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPrivateConnectivityEnabled() {
    return privateConnectivityEnabled;
  }

  public void setPrivateConnectivityEnabled(Boolean privateConnectivityEnabled) {
    this.privateConnectivityEnabled = privateConnectivityEnabled;
  }


  public EventingConfig proxyDestinationConfig(DestinationConfig proxyDestinationConfig) {
    this.proxyDestinationConfig = proxyDestinationConfig;
    return this;
  }

  /**
   * Get proxyDestinationConfig
   * @return proxyDestinationConfig
   */
  @javax.annotation.Nullable
  public DestinationConfig getProxyDestinationConfig() {
    return proxyDestinationConfig;
  }

  public void setProxyDestinationConfig(DestinationConfig proxyDestinationConfig) {
    this.proxyDestinationConfig = proxyDestinationConfig;
  }


  public EventingConfig registrationDestinationConfig(DestinationConfig registrationDestinationConfig) {
    this.registrationDestinationConfig = registrationDestinationConfig;
    return this;
  }

  /**
   * Get registrationDestinationConfig
   * @return registrationDestinationConfig
   */
  @javax.annotation.Nullable
  public DestinationConfig getRegistrationDestinationConfig() {
    return registrationDestinationConfig;
  }

  public void setRegistrationDestinationConfig(DestinationConfig registrationDestinationConfig) {
    this.registrationDestinationConfig = registrationDestinationConfig;
  }


  public EventingConfig triggerConfigVariables(List<ConfigVariable> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
    return this;
  }

  public EventingConfig addTriggerConfigVariablesItem(ConfigVariable triggerConfigVariablesItem) {
    if (this.triggerConfigVariables == null) {
      this.triggerConfigVariables = new ArrayList<>();
    }
    this.triggerConfigVariables.add(triggerConfigVariablesItem);
    return this;
  }

  /**
   * Optional. Additional eventing related field values
   * @return triggerConfigVariables
   */
  @javax.annotation.Nullable
  public List<ConfigVariable> getTriggerConfigVariables() {
    return triggerConfigVariables;
  }

  public void setTriggerConfigVariables(List<ConfigVariable> triggerConfigVariables) {
    this.triggerConfigVariables = triggerConfigVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventingConfig eventingConfig = (EventingConfig) o;
    return Objects.equals(this.additionalVariables, eventingConfig.additionalVariables) &&
        Objects.equals(this.authConfig, eventingConfig.authConfig) &&
        Objects.equals(this.deadLetterConfig, eventingConfig.deadLetterConfig) &&
        Objects.equals(this.enrichmentEnabled, eventingConfig.enrichmentEnabled) &&
        Objects.equals(this.eventsListenerIngressEndpoint, eventingConfig.eventsListenerIngressEndpoint) &&
        Objects.equals(this.listenerAuthConfig, eventingConfig.listenerAuthConfig) &&
        Objects.equals(this.privateConnectivityEnabled, eventingConfig.privateConnectivityEnabled) &&
        Objects.equals(this.proxyDestinationConfig, eventingConfig.proxyDestinationConfig) &&
        Objects.equals(this.registrationDestinationConfig, eventingConfig.registrationDestinationConfig) &&
        Objects.equals(this.triggerConfigVariables, eventingConfig.triggerConfigVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalVariables, authConfig, deadLetterConfig, enrichmentEnabled, eventsListenerIngressEndpoint, listenerAuthConfig, privateConnectivityEnabled, proxyDestinationConfig, registrationDestinationConfig, triggerConfigVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventingConfig {\n");
    sb.append("    additionalVariables: ").append(toIndentedString(additionalVariables)).append("\n");
    sb.append("    authConfig: ").append(toIndentedString(authConfig)).append("\n");
    sb.append("    deadLetterConfig: ").append(toIndentedString(deadLetterConfig)).append("\n");
    sb.append("    enrichmentEnabled: ").append(toIndentedString(enrichmentEnabled)).append("\n");
    sb.append("    eventsListenerIngressEndpoint: ").append(toIndentedString(eventsListenerIngressEndpoint)).append("\n");
    sb.append("    listenerAuthConfig: ").append(toIndentedString(listenerAuthConfig)).append("\n");
    sb.append("    privateConnectivityEnabled: ").append(toIndentedString(privateConnectivityEnabled)).append("\n");
    sb.append("    proxyDestinationConfig: ").append(toIndentedString(proxyDestinationConfig)).append("\n");
    sb.append("    registrationDestinationConfig: ").append(toIndentedString(registrationDestinationConfig)).append("\n");
    sb.append("    triggerConfigVariables: ").append(toIndentedString(triggerConfigVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalVariables");
    openapiFields.add("authConfig");
    openapiFields.add("deadLetterConfig");
    openapiFields.add("enrichmentEnabled");
    openapiFields.add("eventsListenerIngressEndpoint");
    openapiFields.add("listenerAuthConfig");
    openapiFields.add("privateConnectivityEnabled");
    openapiFields.add("proxyDestinationConfig");
    openapiFields.add("registrationDestinationConfig");
    openapiFields.add("triggerConfigVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventingConfig is not found in the empty JSON string", EventingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalVariables") != null && !jsonObj.get("additionalVariables").isJsonNull()) {
        JsonArray jsonArrayadditionalVariables = jsonObj.getAsJsonArray("additionalVariables");
        if (jsonArrayadditionalVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalVariables` to be an array in the JSON string but got `%s`", jsonObj.get("additionalVariables").toString()));
          }

          // validate the optional field `additionalVariables` (array)
          for (int i = 0; i < jsonArrayadditionalVariables.size(); i++) {
            ConfigVariable.validateJsonElement(jsonArrayadditionalVariables.get(i));
          };
        }
      }
      // validate the optional field `authConfig`
      if (jsonObj.get("authConfig") != null && !jsonObj.get("authConfig").isJsonNull()) {
        AuthConfig.validateJsonElement(jsonObj.get("authConfig"));
      }
      // validate the optional field `deadLetterConfig`
      if (jsonObj.get("deadLetterConfig") != null && !jsonObj.get("deadLetterConfig").isJsonNull()) {
        DeadLetterConfig.validateJsonElement(jsonObj.get("deadLetterConfig"));
      }
      if ((jsonObj.get("eventsListenerIngressEndpoint") != null && !jsonObj.get("eventsListenerIngressEndpoint").isJsonNull()) && !jsonObj.get("eventsListenerIngressEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventsListenerIngressEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventsListenerIngressEndpoint").toString()));
      }
      // validate the optional field `listenerAuthConfig`
      if (jsonObj.get("listenerAuthConfig") != null && !jsonObj.get("listenerAuthConfig").isJsonNull()) {
        AuthConfig.validateJsonElement(jsonObj.get("listenerAuthConfig"));
      }
      // validate the optional field `proxyDestinationConfig`
      if (jsonObj.get("proxyDestinationConfig") != null && !jsonObj.get("proxyDestinationConfig").isJsonNull()) {
        DestinationConfig.validateJsonElement(jsonObj.get("proxyDestinationConfig"));
      }
      // validate the optional field `registrationDestinationConfig`
      if (jsonObj.get("registrationDestinationConfig") != null && !jsonObj.get("registrationDestinationConfig").isJsonNull()) {
        DestinationConfig.validateJsonElement(jsonObj.get("registrationDestinationConfig"));
      }
      if (jsonObj.get("triggerConfigVariables") != null && !jsonObj.get("triggerConfigVariables").isJsonNull()) {
        JsonArray jsonArraytriggerConfigVariables = jsonObj.getAsJsonArray("triggerConfigVariables");
        if (jsonArraytriggerConfigVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggerConfigVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggerConfigVariables` to be an array in the JSON string but got `%s`", jsonObj.get("triggerConfigVariables").toString()));
          }

          // validate the optional field `triggerConfigVariables` (array)
          for (int i = 0; i < jsonArraytriggerConfigVariables.size(); i++) {
            ConfigVariable.validateJsonElement(jsonArraytriggerConfigVariables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<EventingConfig>() {
           @Override
           public void write(JsonWriter out, EventingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventingConfig
   * @throws IOException if the JSON string is invalid with respect to EventingConfig
   */
  public static EventingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventingConfig.class);
  }

  /**
   * Convert an instance of EventingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

