/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionalSettings::OAIRegionalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionalSettings::OAIRegionalSettings() {
    this->initializeModel();
}

OAIRegionalSettings::~OAIRegionalSettings() {}

void OAIRegionalSettings::initializeModel() {

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_provisioned_isSet = false;
    m_provisioned_isValid = false;
}

void OAIRegionalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionalSettings::fromJsonObject(QJsonObject json) {

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_provisioned_isValid = ::OpenAPI::fromJsonValue(m_provisioned, json[QString("provisioned")]);
    m_provisioned_isSet = !json[QString("provisioned")].isNull() && m_provisioned_isValid;
}

QString OAIRegionalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_provisioned_isSet) {
        obj.insert(QString("provisioned"), ::OpenAPI::toJsonValue(m_provisioned));
    }
    return obj;
}

OAIEncryptionConfig OAIRegionalSettings::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIRegionalSettings::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIRegionalSettings::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIRegionalSettings::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIRegionalSettings::getName() const {
    return m_name;
}
void OAIRegionalSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegionalSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegionalSettings::is_name_Valid() const{
    return m_name_isValid;
}

OAINetworkConfig OAIRegionalSettings::getNetworkConfig() const {
    return m_network_config;
}
void OAIRegionalSettings::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIRegionalSettings::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIRegionalSettings::is_network_config_Valid() const{
    return m_network_config_isValid;
}

bool OAIRegionalSettings::isProvisioned() const {
    return m_provisioned;
}
void OAIRegionalSettings::setProvisioned(const bool &provisioned) {
    m_provisioned = provisioned;
    m_provisioned_isSet = true;
}

bool OAIRegionalSettings::is_provisioned_Set() const{
    return m_provisioned_isSet;
}

bool OAIRegionalSettings::is_provisioned_Valid() const{
    return m_provisioned_isValid;
}

bool OAIRegionalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
