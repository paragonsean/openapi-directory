/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventingConfigTemplate.h
 *
 * Eventing Config details of a connector version.
 */

#ifndef OAIEventingConfigTemplate_H
#define OAIEventingConfigTemplate_H

#include <QJsonObject>

#include "OAIAuthConfigTemplate.h"
#include "OAIConfigVariableTemplate.h"
#include "OAIDestinationConfigTemplate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfigVariableTemplate;
class OAIAuthConfigTemplate;
class OAIDestinationConfigTemplate;

class OAIEventingConfigTemplate : public OAIObject {
public:
    OAIEventingConfigTemplate();
    OAIEventingConfigTemplate(QString json);
    ~OAIEventingConfigTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIConfigVariableTemplate> getAdditionalVariables() const;
    void setAdditionalVariables(const QList<OAIConfigVariableTemplate> &additional_variables);
    bool is_additional_variables_Set() const;
    bool is_additional_variables_Valid() const;

    QList<OAIAuthConfigTemplate> getAuthConfigTemplates() const;
    void setAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &auth_config_templates);
    bool is_auth_config_templates_Set() const;
    bool is_auth_config_templates_Valid() const;

    bool isAutoRefresh() const;
    void setAutoRefresh(const bool &auto_refresh);
    bool is_auto_refresh_Set() const;
    bool is_auto_refresh_Valid() const;

    bool isAutoRegistrationSupported() const;
    void setAutoRegistrationSupported(const bool &auto_registration_supported);
    bool is_auto_registration_supported_Set() const;
    bool is_auto_registration_supported_Valid() const;

    OAIConfigVariableTemplate getEncryptionKeyTemplate() const;
    void setEncryptionKeyTemplate(const OAIConfigVariableTemplate &encryption_key_template);
    bool is_encryption_key_template_Set() const;
    bool is_encryption_key_template_Valid() const;

    bool isEnrichmentSupported() const;
    void setEnrichmentSupported(const bool &enrichment_supported);
    bool is_enrichment_supported_Set() const;
    bool is_enrichment_supported_Valid() const;

    QString getEventListenerType() const;
    void setEventListenerType(const QString &event_listener_type);
    bool is_event_listener_type_Set() const;
    bool is_event_listener_type_Valid() const;

    bool isIsEventingSupported() const;
    void setIsEventingSupported(const bool &is_eventing_supported);
    bool is_is_eventing_supported_Set() const;
    bool is_is_eventing_supported_Valid() const;

    QList<OAIAuthConfigTemplate> getListenerAuthConfigTemplates() const;
    void setListenerAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &listener_auth_config_templates);
    bool is_listener_auth_config_templates_Set() const;
    bool is_listener_auth_config_templates_Valid() const;

    OAIDestinationConfigTemplate getProxyDestinationConfig() const;
    void setProxyDestinationConfig(const OAIDestinationConfigTemplate &proxy_destination_config);
    bool is_proxy_destination_config_Set() const;
    bool is_proxy_destination_config_Valid() const;

    OAIDestinationConfigTemplate getRegistrationDestinationConfig() const;
    void setRegistrationDestinationConfig(const OAIDestinationConfigTemplate &registration_destination_config);
    bool is_registration_destination_config_Set() const;
    bool is_registration_destination_config_Valid() const;

    QList<OAIConfigVariableTemplate> getTriggerConfigVariables() const;
    void setTriggerConfigVariables(const QList<OAIConfigVariableTemplate> &trigger_config_variables);
    bool is_trigger_config_variables_Set() const;
    bool is_trigger_config_variables_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIConfigVariableTemplate> m_additional_variables;
    bool m_additional_variables_isSet;
    bool m_additional_variables_isValid;

    QList<OAIAuthConfigTemplate> m_auth_config_templates;
    bool m_auth_config_templates_isSet;
    bool m_auth_config_templates_isValid;

    bool m_auto_refresh;
    bool m_auto_refresh_isSet;
    bool m_auto_refresh_isValid;

    bool m_auto_registration_supported;
    bool m_auto_registration_supported_isSet;
    bool m_auto_registration_supported_isValid;

    OAIConfigVariableTemplate m_encryption_key_template;
    bool m_encryption_key_template_isSet;
    bool m_encryption_key_template_isValid;

    bool m_enrichment_supported;
    bool m_enrichment_supported_isSet;
    bool m_enrichment_supported_isValid;

    QString m_event_listener_type;
    bool m_event_listener_type_isSet;
    bool m_event_listener_type_isValid;

    bool m_is_eventing_supported;
    bool m_is_eventing_supported_isSet;
    bool m_is_eventing_supported_isValid;

    QList<OAIAuthConfigTemplate> m_listener_auth_config_templates;
    bool m_listener_auth_config_templates_isSet;
    bool m_listener_auth_config_templates_isValid;

    OAIDestinationConfigTemplate m_proxy_destination_config;
    bool m_proxy_destination_config_isSet;
    bool m_proxy_destination_config_isValid;

    OAIDestinationConfigTemplate m_registration_destination_config;
    bool m_registration_destination_config_isSet;
    bool m_registration_destination_config_isValid;

    QList<OAIConfigVariableTemplate> m_trigger_config_variables;
    bool m_trigger_config_variables_isSet;
    bool m_trigger_config_variables_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventingConfigTemplate)

#endif // OAIEventingConfigTemplate_H
