/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldComparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldComparison::OAIFieldComparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldComparison::OAIFieldComparison() {
    this->initializeModel();
}

OAIFieldComparison::~OAIFieldComparison() {}

void OAIFieldComparison::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_int_value_isSet = false;
    m_int_value_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIFieldComparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldComparison::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_comparator_isValid = ::OpenAPI::fromJsonValue(m_comparator, json[QString("comparator")]);
    m_comparator_isSet = !json[QString("comparator")].isNull() && m_comparator_isValid;

    m_int_value_isValid = ::OpenAPI::fromJsonValue(m_int_value, json[QString("intValue")]);
    m_int_value_isSet = !json[QString("intValue")].isNull() && m_int_value_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIFieldComparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldComparison::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_comparator_isSet) {
        obj.insert(QString("comparator"), ::OpenAPI::toJsonValue(m_comparator));
    }
    if (m_int_value_isSet) {
        obj.insert(QString("intValue"), ::OpenAPI::toJsonValue(m_int_value));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

bool OAIFieldComparison::isBoolValue() const {
    return m_bool_value;
}
void OAIFieldComparison::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIFieldComparison::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIFieldComparison::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

QString OAIFieldComparison::getComparator() const {
    return m_comparator;
}
void OAIFieldComparison::setComparator(const QString &comparator) {
    m_comparator = comparator;
    m_comparator_isSet = true;
}

bool OAIFieldComparison::is_comparator_Set() const{
    return m_comparator_isSet;
}

bool OAIFieldComparison::is_comparator_Valid() const{
    return m_comparator_isValid;
}

QString OAIFieldComparison::getIntValue() const {
    return m_int_value;
}
void OAIFieldComparison::setIntValue(const QString &int_value) {
    m_int_value = int_value;
    m_int_value_isSet = true;
}

bool OAIFieldComparison::is_int_value_Set() const{
    return m_int_value_isSet;
}

bool OAIFieldComparison::is_int_value_Valid() const{
    return m_int_value_isValid;
}

QString OAIFieldComparison::getKey() const {
    return m_key;
}
void OAIFieldComparison::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFieldComparison::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFieldComparison::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFieldComparison::getStringValue() const {
    return m_string_value;
}
void OAIFieldComparison::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIFieldComparison::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIFieldComparison::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIFieldComparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldComparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
