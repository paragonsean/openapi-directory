/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvider::OAIProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvider::OAIProvider() {
    this->initializeModel();
}

OAIProvider::~OAIProvider() {}

void OAIProvider::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_documentation_uri_isSet = false;
    m_documentation_uri_isValid = false;

    m_external_uri_isSet = false;
    m_external_uri_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_web_assets_location_isSet = false;
    m_web_assets_location_isValid = false;
}

void OAIProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvider::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_documentation_uri, json[QString("documentationUri")]);
    m_documentation_uri_isSet = !json[QString("documentationUri")].isNull() && m_documentation_uri_isValid;

    m_external_uri_isValid = ::OpenAPI::fromJsonValue(m_external_uri, json[QString("externalUri")]);
    m_external_uri_isSet = !json[QString("externalUri")].isNull() && m_external_uri_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_web_assets_location_isValid = ::OpenAPI::fromJsonValue(m_web_assets_location, json[QString("webAssetsLocation")]);
    m_web_assets_location_isSet = !json[QString("webAssetsLocation")].isNull() && m_web_assets_location_isValid;
}

QString OAIProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_documentation_uri_isSet) {
        obj.insert(QString("documentationUri"), ::OpenAPI::toJsonValue(m_documentation_uri));
    }
    if (m_external_uri_isSet) {
        obj.insert(QString("externalUri"), ::OpenAPI::toJsonValue(m_external_uri));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_web_assets_location_isSet) {
        obj.insert(QString("webAssetsLocation"), ::OpenAPI::toJsonValue(m_web_assets_location));
    }
    return obj;
}

QString OAIProvider::getCreateTime() const {
    return m_create_time;
}
void OAIProvider::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIProvider::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIProvider::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIProvider::getDescription() const {
    return m_description;
}
void OAIProvider::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvider::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvider::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProvider::getDisplayName() const {
    return m_display_name;
}
void OAIProvider::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProvider::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProvider::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProvider::getDocumentationUri() const {
    return m_documentation_uri;
}
void OAIProvider::setDocumentationUri(const QString &documentation_uri) {
    m_documentation_uri = documentation_uri;
    m_documentation_uri_isSet = true;
}

bool OAIProvider::is_documentation_uri_Set() const{
    return m_documentation_uri_isSet;
}

bool OAIProvider::is_documentation_uri_Valid() const{
    return m_documentation_uri_isValid;
}

QString OAIProvider::getExternalUri() const {
    return m_external_uri;
}
void OAIProvider::setExternalUri(const QString &external_uri) {
    m_external_uri = external_uri;
    m_external_uri_isSet = true;
}

bool OAIProvider::is_external_uri_Set() const{
    return m_external_uri_isSet;
}

bool OAIProvider::is_external_uri_Valid() const{
    return m_external_uri_isValid;
}

QMap<QString, QString> OAIProvider::getLabels() const {
    return m_labels;
}
void OAIProvider::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIProvider::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIProvider::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIProvider::getLaunchStage() const {
    return m_launch_stage;
}
void OAIProvider::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIProvider::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIProvider::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIProvider::getName() const {
    return m_name;
}
void OAIProvider::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvider::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvider::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvider::getUpdateTime() const {
    return m_update_time;
}
void OAIProvider::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIProvider::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIProvider::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIProvider::getWebAssetsLocation() const {
    return m_web_assets_location;
}
void OAIProvider::setWebAssetsLocation(const QString &web_assets_location) {
    m_web_assets_location = web_assets_location;
    m_web_assets_location_isSet = true;
}

bool OAIProvider::is_web_assets_location_Set() const{
    return m_web_assets_location_isSet;
}

bool OAIProvider::is_web_assets_location_Valid() const{
    return m_web_assets_location_isValid;
}

bool OAIProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_assets_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
