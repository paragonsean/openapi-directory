/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_enriched_event_payload_schema_isSet = false;
    m_enriched_event_payload_schema_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_event_payload_schema_isSet = false;
    m_event_payload_schema_isValid = false;

    m_event_type_id_isSet = false;
    m_event_type_id_isValid = false;

    m_id_path_isSet = false;
    m_id_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIEventType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventType::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_enriched_event_payload_schema_isValid = ::OpenAPI::fromJsonValue(m_enriched_event_payload_schema, json[QString("enrichedEventPayloadSchema")]);
    m_enriched_event_payload_schema_isSet = !json[QString("enrichedEventPayloadSchema")].isNull() && m_enriched_event_payload_schema_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_event_payload_schema_isValid = ::OpenAPI::fromJsonValue(m_event_payload_schema, json[QString("eventPayloadSchema")]);
    m_event_payload_schema_isSet = !json[QString("eventPayloadSchema")].isNull() && m_event_payload_schema_isValid;

    m_event_type_id_isValid = ::OpenAPI::fromJsonValue(m_event_type_id, json[QString("eventTypeId")]);
    m_event_type_id_isSet = !json[QString("eventTypeId")].isNull() && m_event_type_id_isValid;

    m_id_path_isValid = ::OpenAPI::fromJsonValue(m_id_path, json[QString("idPath")]);
    m_id_path_isSet = !json[QString("idPath")].isNull() && m_id_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIEventType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventType::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_enriched_event_payload_schema_isSet) {
        obj.insert(QString("enrichedEventPayloadSchema"), ::OpenAPI::toJsonValue(m_enriched_event_payload_schema));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_event_payload_schema_isSet) {
        obj.insert(QString("eventPayloadSchema"), ::OpenAPI::toJsonValue(m_event_payload_schema));
    }
    if (m_event_type_id_isSet) {
        obj.insert(QString("eventTypeId"), ::OpenAPI::toJsonValue(m_event_type_id));
    }
    if (m_id_path_isSet) {
        obj.insert(QString("idPath"), ::OpenAPI::toJsonValue(m_id_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIEventType::getCreateTime() const {
    return m_create_time;
}
void OAIEventType::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEventType::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEventType::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIEventType::getEnrichedEventPayloadSchema() const {
    return m_enriched_event_payload_schema;
}
void OAIEventType::setEnrichedEventPayloadSchema(const QString &enriched_event_payload_schema) {
    m_enriched_event_payload_schema = enriched_event_payload_schema;
    m_enriched_event_payload_schema_isSet = true;
}

bool OAIEventType::is_enriched_event_payload_schema_Set() const{
    return m_enriched_event_payload_schema_isSet;
}

bool OAIEventType::is_enriched_event_payload_schema_Valid() const{
    return m_enriched_event_payload_schema_isValid;
}

QString OAIEventType::getEntityType() const {
    return m_entity_type;
}
void OAIEventType::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEventType::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEventType::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEventType::getEventPayloadSchema() const {
    return m_event_payload_schema;
}
void OAIEventType::setEventPayloadSchema(const QString &event_payload_schema) {
    m_event_payload_schema = event_payload_schema;
    m_event_payload_schema_isSet = true;
}

bool OAIEventType::is_event_payload_schema_Set() const{
    return m_event_payload_schema_isSet;
}

bool OAIEventType::is_event_payload_schema_Valid() const{
    return m_event_payload_schema_isValid;
}

QString OAIEventType::getEventTypeId() const {
    return m_event_type_id;
}
void OAIEventType::setEventTypeId(const QString &event_type_id) {
    m_event_type_id = event_type_id;
    m_event_type_id_isSet = true;
}

bool OAIEventType::is_event_type_id_Set() const{
    return m_event_type_id_isSet;
}

bool OAIEventType::is_event_type_id_Valid() const{
    return m_event_type_id_isValid;
}

QString OAIEventType::getIdPath() const {
    return m_id_path;
}
void OAIEventType::setIdPath(const QString &id_path) {
    m_id_path = id_path;
    m_id_path_isSet = true;
}

bool OAIEventType::is_id_path_Set() const{
    return m_id_path_isSet;
}

bool OAIEventType::is_id_path_Valid() const{
    return m_id_path_isValid;
}

QString OAIEventType::getName() const {
    return m_name;
}
void OAIEventType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventType::getUpdateTime() const {
    return m_update_time;
}
void OAIEventType::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEventType::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEventType::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIEventType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enriched_event_payload_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_payload_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
