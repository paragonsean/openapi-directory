/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedRuntimeFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedRuntimeFeatures::OAISupportedRuntimeFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedRuntimeFeatures::OAISupportedRuntimeFeatures() {
    this->initializeModel();
}

OAISupportedRuntimeFeatures::~OAISupportedRuntimeFeatures() {}

void OAISupportedRuntimeFeatures::initializeModel() {

    m_action_apis_isSet = false;
    m_action_apis_isValid = false;

    m_entity_apis_isSet = false;
    m_entity_apis_isValid = false;

    m_sql_query_isSet = false;
    m_sql_query_isValid = false;
}

void OAISupportedRuntimeFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedRuntimeFeatures::fromJsonObject(QJsonObject json) {

    m_action_apis_isValid = ::OpenAPI::fromJsonValue(m_action_apis, json[QString("actionApis")]);
    m_action_apis_isSet = !json[QString("actionApis")].isNull() && m_action_apis_isValid;

    m_entity_apis_isValid = ::OpenAPI::fromJsonValue(m_entity_apis, json[QString("entityApis")]);
    m_entity_apis_isSet = !json[QString("entityApis")].isNull() && m_entity_apis_isValid;

    m_sql_query_isValid = ::OpenAPI::fromJsonValue(m_sql_query, json[QString("sqlQuery")]);
    m_sql_query_isSet = !json[QString("sqlQuery")].isNull() && m_sql_query_isValid;
}

QString OAISupportedRuntimeFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedRuntimeFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_action_apis_isSet) {
        obj.insert(QString("actionApis"), ::OpenAPI::toJsonValue(m_action_apis));
    }
    if (m_entity_apis_isSet) {
        obj.insert(QString("entityApis"), ::OpenAPI::toJsonValue(m_entity_apis));
    }
    if (m_sql_query_isSet) {
        obj.insert(QString("sqlQuery"), ::OpenAPI::toJsonValue(m_sql_query));
    }
    return obj;
}

bool OAISupportedRuntimeFeatures::isActionApis() const {
    return m_action_apis;
}
void OAISupportedRuntimeFeatures::setActionApis(const bool &action_apis) {
    m_action_apis = action_apis;
    m_action_apis_isSet = true;
}

bool OAISupportedRuntimeFeatures::is_action_apis_Set() const{
    return m_action_apis_isSet;
}

bool OAISupportedRuntimeFeatures::is_action_apis_Valid() const{
    return m_action_apis_isValid;
}

bool OAISupportedRuntimeFeatures::isEntityApis() const {
    return m_entity_apis;
}
void OAISupportedRuntimeFeatures::setEntityApis(const bool &entity_apis) {
    m_entity_apis = entity_apis;
    m_entity_apis_isSet = true;
}

bool OAISupportedRuntimeFeatures::is_entity_apis_Set() const{
    return m_entity_apis_isSet;
}

bool OAISupportedRuntimeFeatures::is_entity_apis_Valid() const{
    return m_entity_apis_isValid;
}

bool OAISupportedRuntimeFeatures::isSqlQuery() const {
    return m_sql_query;
}
void OAISupportedRuntimeFeatures::setSqlQuery(const bool &sql_query) {
    m_sql_query = sql_query;
    m_sql_query_isSet = true;
}

bool OAISupportedRuntimeFeatures::is_sql_query_Set() const{
    return m_sql_query_isSet;
}

bool OAISupportedRuntimeFeatures::is_sql_query_Valid() const{
    return m_sql_query_isValid;
}

bool OAISupportedRuntimeFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_apis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_apis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedRuntimeFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
