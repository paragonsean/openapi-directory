/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalExpression::OAILogicalExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalExpression::OAILogicalExpression() {
    this->initializeModel();
}

OAILogicalExpression::~OAILogicalExpression() {}

void OAILogicalExpression::initializeModel() {

    m_field_comparisons_isSet = false;
    m_field_comparisons_isValid = false;

    m_logical_expressions_isSet = false;
    m_logical_expressions_isValid = false;

    m_logical_operator_isSet = false;
    m_logical_operator_isValid = false;
}

void OAILogicalExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalExpression::fromJsonObject(QJsonObject json) {

    m_field_comparisons_isValid = ::OpenAPI::fromJsonValue(m_field_comparisons, json[QString("fieldComparisons")]);
    m_field_comparisons_isSet = !json[QString("fieldComparisons")].isNull() && m_field_comparisons_isValid;

    m_logical_expressions_isValid = ::OpenAPI::fromJsonValue(m_logical_expressions, json[QString("logicalExpressions")]);
    m_logical_expressions_isSet = !json[QString("logicalExpressions")].isNull() && m_logical_expressions_isValid;

    m_logical_operator_isValid = ::OpenAPI::fromJsonValue(m_logical_operator, json[QString("logicalOperator")]);
    m_logical_operator_isSet = !json[QString("logicalOperator")].isNull() && m_logical_operator_isValid;
}

QString OAILogicalExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_field_comparisons.size() > 0) {
        obj.insert(QString("fieldComparisons"), ::OpenAPI::toJsonValue(m_field_comparisons));
    }
    if (m_logical_expressions.size() > 0) {
        obj.insert(QString("logicalExpressions"), ::OpenAPI::toJsonValue(m_logical_expressions));
    }
    if (m_logical_operator_isSet) {
        obj.insert(QString("logicalOperator"), ::OpenAPI::toJsonValue(m_logical_operator));
    }
    return obj;
}

QList<OAIFieldComparison> OAILogicalExpression::getFieldComparisons() const {
    return m_field_comparisons;
}
void OAILogicalExpression::setFieldComparisons(const QList<OAIFieldComparison> &field_comparisons) {
    m_field_comparisons = field_comparisons;
    m_field_comparisons_isSet = true;
}

bool OAILogicalExpression::is_field_comparisons_Set() const{
    return m_field_comparisons_isSet;
}

bool OAILogicalExpression::is_field_comparisons_Valid() const{
    return m_field_comparisons_isValid;
}

QList<OAILogicalExpression> OAILogicalExpression::getLogicalExpressions() const {
    return m_logical_expressions;
}
void OAILogicalExpression::setLogicalExpressions(const QList<OAILogicalExpression> &logical_expressions) {
    m_logical_expressions = logical_expressions;
    m_logical_expressions_isSet = true;
}

bool OAILogicalExpression::is_logical_expressions_Set() const{
    return m_logical_expressions_isSet;
}

bool OAILogicalExpression::is_logical_expressions_Valid() const{
    return m_logical_expressions_isValid;
}

QString OAILogicalExpression::getLogicalOperator() const {
    return m_logical_operator;
}
void OAILogicalExpression::setLogicalOperator(const QString &logical_operator) {
    m_logical_operator = logical_operator;
    m_logical_operator_isSet = true;
}

bool OAILogicalExpression::is_logical_operator_Set() const{
    return m_logical_operator_isSet;
}

bool OAILogicalExpression::is_logical_operator_Valid() const{
    return m_logical_operator_isValid;
}

bool OAILogicalExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_comparisons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
