/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth2AuthCodeFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth2AuthCodeFlow::OAIOauth2AuthCodeFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth2AuthCodeFlow::OAIOauth2AuthCodeFlow() {
    this->initializeModel();
}

OAIOauth2AuthCodeFlow::~OAIOauth2AuthCodeFlow() {}

void OAIOauth2AuthCodeFlow::initializeModel() {

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_auth_uri_isSet = false;
    m_auth_uri_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_enable_pkce_isSet = false;
    m_enable_pkce_isValid = false;

    m_pkce_verifier_isSet = false;
    m_pkce_verifier_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIOauth2AuthCodeFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth2AuthCodeFlow::fromJsonObject(QJsonObject json) {

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_auth_uri_isValid = ::OpenAPI::fromJsonValue(m_auth_uri, json[QString("authUri")]);
    m_auth_uri_isSet = !json[QString("authUri")].isNull() && m_auth_uri_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_enable_pkce_isValid = ::OpenAPI::fromJsonValue(m_enable_pkce, json[QString("enablePkce")]);
    m_enable_pkce_isSet = !json[QString("enablePkce")].isNull() && m_enable_pkce_isValid;

    m_pkce_verifier_isValid = ::OpenAPI::fromJsonValue(m_pkce_verifier, json[QString("pkceVerifier")]);
    m_pkce_verifier_isSet = !json[QString("pkceVerifier")].isNull() && m_pkce_verifier_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIOauth2AuthCodeFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth2AuthCodeFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_auth_uri_isSet) {
        obj.insert(QString("authUri"), ::OpenAPI::toJsonValue(m_auth_uri));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret.isSet()) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_enable_pkce_isSet) {
        obj.insert(QString("enablePkce"), ::OpenAPI::toJsonValue(m_enable_pkce));
    }
    if (m_pkce_verifier_isSet) {
        obj.insert(QString("pkceVerifier"), ::OpenAPI::toJsonValue(m_pkce_verifier));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIOauth2AuthCodeFlow::getAuthCode() const {
    return m_auth_code;
}
void OAIOauth2AuthCodeFlow::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIOauth2AuthCodeFlow::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

QString OAIOauth2AuthCodeFlow::getAuthUri() const {
    return m_auth_uri;
}
void OAIOauth2AuthCodeFlow::setAuthUri(const QString &auth_uri) {
    m_auth_uri = auth_uri;
    m_auth_uri_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_auth_uri_Set() const{
    return m_auth_uri_isSet;
}

bool OAIOauth2AuthCodeFlow::is_auth_uri_Valid() const{
    return m_auth_uri_isValid;
}

QString OAIOauth2AuthCodeFlow::getClientId() const {
    return m_client_id;
}
void OAIOauth2AuthCodeFlow::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOauth2AuthCodeFlow::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAISecret OAIOauth2AuthCodeFlow::getClientSecret() const {
    return m_client_secret;
}
void OAIOauth2AuthCodeFlow::setClientSecret(const OAISecret &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIOauth2AuthCodeFlow::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIOauth2AuthCodeFlow::isEnablePkce() const {
    return m_enable_pkce;
}
void OAIOauth2AuthCodeFlow::setEnablePkce(const bool &enable_pkce) {
    m_enable_pkce = enable_pkce;
    m_enable_pkce_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_enable_pkce_Set() const{
    return m_enable_pkce_isSet;
}

bool OAIOauth2AuthCodeFlow::is_enable_pkce_Valid() const{
    return m_enable_pkce_isValid;
}

QString OAIOauth2AuthCodeFlow::getPkceVerifier() const {
    return m_pkce_verifier;
}
void OAIOauth2AuthCodeFlow::setPkceVerifier(const QString &pkce_verifier) {
    m_pkce_verifier = pkce_verifier;
    m_pkce_verifier_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_pkce_verifier_Set() const{
    return m_pkce_verifier_isSet;
}

bool OAIOauth2AuthCodeFlow::is_pkce_verifier_Valid() const{
    return m_pkce_verifier_isValid;
}

QString OAIOauth2AuthCodeFlow::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIOauth2AuthCodeFlow::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIOauth2AuthCodeFlow::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QList<QString> OAIOauth2AuthCodeFlow::getScopes() const {
    return m_scopes;
}
void OAIOauth2AuthCodeFlow::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIOauth2AuthCodeFlow::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIOauth2AuthCodeFlow::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIOauth2AuthCodeFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pkce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkce_verifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth2AuthCodeFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
