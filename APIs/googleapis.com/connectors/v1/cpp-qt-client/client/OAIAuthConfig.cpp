/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthConfig::OAIAuthConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthConfig::OAIAuthConfig() {
    this->initializeModel();
}

OAIAuthConfig::~OAIAuthConfig() {}

void OAIAuthConfig::initializeModel() {

    m_additional_variables_isSet = false;
    m_additional_variables_isValid = false;

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_oauth2_auth_code_flow_isSet = false;
    m_oauth2_auth_code_flow_isValid = false;

    m_oauth2_client_credentials_isSet = false;
    m_oauth2_client_credentials_isValid = false;

    m_oauth2_jwt_bearer_isSet = false;
    m_oauth2_jwt_bearer_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;

    m_user_password_isSet = false;
    m_user_password_isValid = false;
}

void OAIAuthConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthConfig::fromJsonObject(QJsonObject json) {

    m_additional_variables_isValid = ::OpenAPI::fromJsonValue(m_additional_variables, json[QString("additionalVariables")]);
    m_additional_variables_isSet = !json[QString("additionalVariables")].isNull() && m_additional_variables_isValid;

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("authKey")]);
    m_auth_key_isSet = !json[QString("authKey")].isNull() && m_auth_key_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_oauth2_auth_code_flow_isValid = ::OpenAPI::fromJsonValue(m_oauth2_auth_code_flow, json[QString("oauth2AuthCodeFlow")]);
    m_oauth2_auth_code_flow_isSet = !json[QString("oauth2AuthCodeFlow")].isNull() && m_oauth2_auth_code_flow_isValid;

    m_oauth2_client_credentials_isValid = ::OpenAPI::fromJsonValue(m_oauth2_client_credentials, json[QString("oauth2ClientCredentials")]);
    m_oauth2_client_credentials_isSet = !json[QString("oauth2ClientCredentials")].isNull() && m_oauth2_client_credentials_isValid;

    m_oauth2_jwt_bearer_isValid = ::OpenAPI::fromJsonValue(m_oauth2_jwt_bearer, json[QString("oauth2JwtBearer")]);
    m_oauth2_jwt_bearer_isSet = !json[QString("oauth2JwtBearer")].isNull() && m_oauth2_jwt_bearer_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("sshPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("sshPublicKey")].isNull() && m_ssh_public_key_isValid;

    m_user_password_isValid = ::OpenAPI::fromJsonValue(m_user_password, json[QString("userPassword")]);
    m_user_password_isSet = !json[QString("userPassword")].isNull() && m_user_password_isValid;
}

QString OAIAuthConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_variables.size() > 0) {
        obj.insert(QString("additionalVariables"), ::OpenAPI::toJsonValue(m_additional_variables));
    }
    if (m_auth_key_isSet) {
        obj.insert(QString("authKey"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_oauth2_auth_code_flow.isSet()) {
        obj.insert(QString("oauth2AuthCodeFlow"), ::OpenAPI::toJsonValue(m_oauth2_auth_code_flow));
    }
    if (m_oauth2_client_credentials.isSet()) {
        obj.insert(QString("oauth2ClientCredentials"), ::OpenAPI::toJsonValue(m_oauth2_client_credentials));
    }
    if (m_oauth2_jwt_bearer.isSet()) {
        obj.insert(QString("oauth2JwtBearer"), ::OpenAPI::toJsonValue(m_oauth2_jwt_bearer));
    }
    if (m_ssh_public_key.isSet()) {
        obj.insert(QString("sshPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    if (m_user_password.isSet()) {
        obj.insert(QString("userPassword"), ::OpenAPI::toJsonValue(m_user_password));
    }
    return obj;
}

QList<OAIConfigVariable> OAIAuthConfig::getAdditionalVariables() const {
    return m_additional_variables;
}
void OAIAuthConfig::setAdditionalVariables(const QList<OAIConfigVariable> &additional_variables) {
    m_additional_variables = additional_variables;
    m_additional_variables_isSet = true;
}

bool OAIAuthConfig::is_additional_variables_Set() const{
    return m_additional_variables_isSet;
}

bool OAIAuthConfig::is_additional_variables_Valid() const{
    return m_additional_variables_isValid;
}

QString OAIAuthConfig::getAuthKey() const {
    return m_auth_key;
}
void OAIAuthConfig::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIAuthConfig::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIAuthConfig::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

QString OAIAuthConfig::getAuthType() const {
    return m_auth_type;
}
void OAIAuthConfig::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIAuthConfig::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIAuthConfig::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

OAIOauth2AuthCodeFlow OAIAuthConfig::getOauth2AuthCodeFlow() const {
    return m_oauth2_auth_code_flow;
}
void OAIAuthConfig::setOauth2AuthCodeFlow(const OAIOauth2AuthCodeFlow &oauth2_auth_code_flow) {
    m_oauth2_auth_code_flow = oauth2_auth_code_flow;
    m_oauth2_auth_code_flow_isSet = true;
}

bool OAIAuthConfig::is_oauth2_auth_code_flow_Set() const{
    return m_oauth2_auth_code_flow_isSet;
}

bool OAIAuthConfig::is_oauth2_auth_code_flow_Valid() const{
    return m_oauth2_auth_code_flow_isValid;
}

OAIOauth2ClientCredentials OAIAuthConfig::getOauth2ClientCredentials() const {
    return m_oauth2_client_credentials;
}
void OAIAuthConfig::setOauth2ClientCredentials(const OAIOauth2ClientCredentials &oauth2_client_credentials) {
    m_oauth2_client_credentials = oauth2_client_credentials;
    m_oauth2_client_credentials_isSet = true;
}

bool OAIAuthConfig::is_oauth2_client_credentials_Set() const{
    return m_oauth2_client_credentials_isSet;
}

bool OAIAuthConfig::is_oauth2_client_credentials_Valid() const{
    return m_oauth2_client_credentials_isValid;
}

OAIOauth2JwtBearer OAIAuthConfig::getOauth2JwtBearer() const {
    return m_oauth2_jwt_bearer;
}
void OAIAuthConfig::setOauth2JwtBearer(const OAIOauth2JwtBearer &oauth2_jwt_bearer) {
    m_oauth2_jwt_bearer = oauth2_jwt_bearer;
    m_oauth2_jwt_bearer_isSet = true;
}

bool OAIAuthConfig::is_oauth2_jwt_bearer_Set() const{
    return m_oauth2_jwt_bearer_isSet;
}

bool OAIAuthConfig::is_oauth2_jwt_bearer_Valid() const{
    return m_oauth2_jwt_bearer_isValid;
}

OAISshPublicKey OAIAuthConfig::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAIAuthConfig::setSshPublicKey(const OAISshPublicKey &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAIAuthConfig::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAIAuthConfig::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

OAIUserPassword OAIAuthConfig::getUserPassword() const {
    return m_user_password;
}
void OAIAuthConfig::setUserPassword(const OAIUserPassword &user_password) {
    m_user_password = user_password;
    m_user_password_isSet = true;
}

bool OAIAuthConfig::is_user_password_Set() const{
    return m_user_password_isSet;
}

bool OAIAuthConfig::is_user_password_Valid() const{
    return m_user_password_isValid;
}

bool OAIAuthConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_auth_code_flow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_client_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_jwt_bearer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_password.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
