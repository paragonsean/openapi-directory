/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectorVersion.h
 *
 * ConnectorVersion indicates a specific version of a connector.
 */

#ifndef OAIConnectorVersion_H
#define OAIConnectorVersion_H

#include <QJsonObject>

#include "OAIAuthConfigTemplate.h"
#include "OAIConfigVariableTemplate.h"
#include "OAIConnectorInfraConfig.h"
#include "OAIDestinationConfigTemplate.h"
#include "OAIEgressControlConfig.h"
#include "OAIEventingConfigTemplate.h"
#include "OAIRoleGrant.h"
#include "OAISslConfigTemplate.h"
#include "OAISupportedRuntimeFeatures.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthConfigTemplate;
class OAIConfigVariableTemplate;
class OAIConnectorInfraConfig;
class OAIDestinationConfigTemplate;
class OAIEgressControlConfig;
class OAIEventingConfigTemplate;
class OAIRoleGrant;
class OAISslConfigTemplate;
class OAISupportedRuntimeFeatures;

class OAIConnectorVersion : public OAIObject {
public:
    OAIConnectorVersion();
    OAIConnectorVersion(QString json);
    ~OAIConnectorVersion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAuthConfigTemplate> getAuthConfigTemplates() const;
    void setAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &auth_config_templates);
    bool is_auth_config_templates_Set() const;
    bool is_auth_config_templates_Valid() const;

    QList<OAIConfigVariableTemplate> getConfigVariableTemplates() const;
    void setConfigVariableTemplates(const QList<OAIConfigVariableTemplate> &config_variable_templates);
    bool is_config_variable_templates_Set() const;
    bool is_config_variable_templates_Valid() const;

    OAIConnectorInfraConfig getConnectorInfraConfig() const;
    void setConnectorInfraConfig(const OAIConnectorInfraConfig &connector_infra_config);
    bool is_connector_infra_config_Set() const;
    bool is_connector_infra_config_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QList<OAIDestinationConfigTemplate> getDestinationConfigTemplates() const;
    void setDestinationConfigTemplates(const QList<OAIDestinationConfigTemplate> &destination_config_templates);
    bool is_destination_config_templates_Set() const;
    bool is_destination_config_templates_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIEgressControlConfig getEgressControlConfig() const;
    void setEgressControlConfig(const OAIEgressControlConfig &egress_control_config);
    bool is_egress_control_config_Set() const;
    bool is_egress_control_config_Valid() const;

    OAIEventingConfigTemplate getEventingConfigTemplate() const;
    void setEventingConfigTemplate(const OAIEventingConfigTemplate &eventing_config_template);
    bool is_eventing_config_template_Set() const;
    bool is_eventing_config_template_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLaunchStage() const;
    void setLaunchStage(const QString &launch_stage);
    bool is_launch_stage_Set() const;
    bool is_launch_stage_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getReleaseVersion() const;
    void setReleaseVersion(const QString &release_version);
    bool is_release_version_Set() const;
    bool is_release_version_Valid() const;

    OAIRoleGrant getRoleGrant() const;
    void setRoleGrant(const OAIRoleGrant &role_grant);
    bool is_role_grant_Set() const;
    bool is_role_grant_Valid() const;

    QList<OAIRoleGrant> getRoleGrants() const;
    void setRoleGrants(const QList<OAIRoleGrant> &role_grants);
    bool is_role_grants_Set() const;
    bool is_role_grants_Valid() const;

    OAISslConfigTemplate getSslConfigTemplate() const;
    void setSslConfigTemplate(const OAISslConfigTemplate &ssl_config_template);
    bool is_ssl_config_template_Set() const;
    bool is_ssl_config_template_Valid() const;

    OAISupportedRuntimeFeatures getSupportedRuntimeFeatures() const;
    void setSupportedRuntimeFeatures(const OAISupportedRuntimeFeatures &supported_runtime_features);
    bool is_supported_runtime_features_Set() const;
    bool is_supported_runtime_features_Valid() const;

    QList<QString> getUnsupportedConnectionTypes() const;
    void setUnsupportedConnectionTypes(const QList<QString> &unsupported_connection_types);
    bool is_unsupported_connection_types_Set() const;
    bool is_unsupported_connection_types_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAuthConfigTemplate> m_auth_config_templates;
    bool m_auth_config_templates_isSet;
    bool m_auth_config_templates_isValid;

    QList<OAIConfigVariableTemplate> m_config_variable_templates;
    bool m_config_variable_templates_isSet;
    bool m_config_variable_templates_isValid;

    OAIConnectorInfraConfig m_connector_infra_config;
    bool m_connector_infra_config_isSet;
    bool m_connector_infra_config_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QList<OAIDestinationConfigTemplate> m_destination_config_templates;
    bool m_destination_config_templates_isSet;
    bool m_destination_config_templates_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIEgressControlConfig m_egress_control_config;
    bool m_egress_control_config_isSet;
    bool m_egress_control_config_isValid;

    OAIEventingConfigTemplate m_eventing_config_template;
    bool m_eventing_config_template_isSet;
    bool m_eventing_config_template_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_launch_stage;
    bool m_launch_stage_isSet;
    bool m_launch_stage_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_release_version;
    bool m_release_version_isSet;
    bool m_release_version_isValid;

    OAIRoleGrant m_role_grant;
    bool m_role_grant_isSet;
    bool m_role_grant_isValid;

    QList<OAIRoleGrant> m_role_grants;
    bool m_role_grants_isSet;
    bool m_role_grants_isValid;

    OAISslConfigTemplate m_ssl_config_template;
    bool m_ssl_config_template_isSet;
    bool m_ssl_config_template_isValid;

    OAISupportedRuntimeFeatures m_supported_runtime_features;
    bool m_supported_runtime_features_isSet;
    bool m_supported_runtime_features_isValid;

    QList<QString> m_unsupported_connection_types;
    bool m_unsupported_connection_types_isSet;
    bool m_unsupported_connection_types_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectorVersion)

#endif // OAIConnectorVersion_H
