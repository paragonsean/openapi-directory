/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRuntimeConfig.h
 *
 * RuntimeConfig is the singleton resource of each location. It includes generic resource configs consumed by control plane and runtime plane like: pub/sub topic/subscription resource name, Cloud Storage location storing schema etc.
 */

#ifndef OAIRuntimeConfig_H
#define OAIRuntimeConfig_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRuntimeConfig : public OAIObject {
public:
    OAIRuntimeConfig();
    OAIRuntimeConfig(QString json);
    ~OAIRuntimeConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConndSubscription() const;
    void setConndSubscription(const QString &connd_subscription);
    bool is_connd_subscription_Set() const;
    bool is_connd_subscription_Valid() const;

    QString getConndTopic() const;
    void setConndTopic(const QString &connd_topic);
    bool is_connd_topic_Set() const;
    bool is_connd_topic_Valid() const;

    QString getControlPlaneSubscription() const;
    void setControlPlaneSubscription(const QString &control_plane_subscription);
    bool is_control_plane_subscription_Set() const;
    bool is_control_plane_subscription_Valid() const;

    QString getControlPlaneTopic() const;
    void setControlPlaneTopic(const QString &control_plane_topic);
    bool is_control_plane_topic_Set() const;
    bool is_control_plane_topic_Valid() const;

    QString getLocationId() const;
    void setLocationId(const QString &location_id);
    bool is_location_id_Set() const;
    bool is_location_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRuntimeEndpoint() const;
    void setRuntimeEndpoint(const QString &runtime_endpoint);
    bool is_runtime_endpoint_Set() const;
    bool is_runtime_endpoint_Valid() const;

    QString getSchemaGcsBucket() const;
    void setSchemaGcsBucket(const QString &schema_gcs_bucket);
    bool is_schema_gcs_bucket_Set() const;
    bool is_schema_gcs_bucket_Valid() const;

    QString getServiceDirectory() const;
    void setServiceDirectory(const QString &service_directory);
    bool is_service_directory_Set() const;
    bool is_service_directory_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connd_subscription;
    bool m_connd_subscription_isSet;
    bool m_connd_subscription_isValid;

    QString m_connd_topic;
    bool m_connd_topic_isSet;
    bool m_connd_topic_isValid;

    QString m_control_plane_subscription;
    bool m_control_plane_subscription_isSet;
    bool m_control_plane_subscription_isValid;

    QString m_control_plane_topic;
    bool m_control_plane_topic_isSet;
    bool m_control_plane_topic_isValid;

    QString m_location_id;
    bool m_location_id_isSet;
    bool m_location_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_runtime_endpoint;
    bool m_runtime_endpoint_isSet;
    bool m_runtime_endpoint_isValid;

    QString m_schema_gcs_bucket;
    bool m_schema_gcs_bucket_isSet;
    bool m_schema_gcs_bucket_isValid;

    QString m_service_directory;
    bool m_service_directory_isSet;
    bool m_service_directory_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRuntimeConfig)

#endif // OAIRuntimeConfig_H
