/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndPoint::OAIEndPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndPoint::OAIEndPoint() {
    this->initializeModel();
}

OAIEndPoint::~OAIEndPoint() {}

void OAIEndPoint::initializeModel() {

    m_endpoint_uri_isSet = false;
    m_endpoint_uri_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAIEndPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndPoint::fromJsonObject(QJsonObject json) {

    m_endpoint_uri_isValid = ::OpenAPI::fromJsonValue(m_endpoint_uri, json[QString("endpointUri")]);
    m_endpoint_uri_isSet = !json[QString("endpointUri")].isNull() && m_endpoint_uri_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;
}

QString OAIEndPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_uri_isSet) {
        obj.insert(QString("endpointUri"), ::OpenAPI::toJsonValue(m_endpoint_uri));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    return obj;
}

QString OAIEndPoint::getEndpointUri() const {
    return m_endpoint_uri;
}
void OAIEndPoint::setEndpointUri(const QString &endpoint_uri) {
    m_endpoint_uri = endpoint_uri;
    m_endpoint_uri_isSet = true;
}

bool OAIEndPoint::is_endpoint_uri_Set() const{
    return m_endpoint_uri_isSet;
}

bool OAIEndPoint::is_endpoint_uri_Valid() const{
    return m_endpoint_uri_isValid;
}

QList<OAIHeader> OAIEndPoint::getHeaders() const {
    return m_headers;
}
void OAIEndPoint::setHeaders(const QList<OAIHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIEndPoint::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIEndPoint::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIEndPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
