/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOauth2AuthCodeFlow.h
 *
 * Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
 */

#ifndef OAIOauth2AuthCodeFlow_H
#define OAIOauth2AuthCodeFlow_H

#include <QJsonObject>

#include "OAISecret.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISecret;

class OAIOauth2AuthCodeFlow : public OAIObject {
public:
    OAIOauth2AuthCodeFlow();
    OAIOauth2AuthCodeFlow(QString json);
    ~OAIOauth2AuthCodeFlow() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthCode() const;
    void setAuthCode(const QString &auth_code);
    bool is_auth_code_Set() const;
    bool is_auth_code_Valid() const;

    QString getAuthUri() const;
    void setAuthUri(const QString &auth_uri);
    bool is_auth_uri_Set() const;
    bool is_auth_uri_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    OAISecret getClientSecret() const;
    void setClientSecret(const OAISecret &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    bool isEnablePkce() const;
    void setEnablePkce(const bool &enable_pkce);
    bool is_enable_pkce_Set() const;
    bool is_enable_pkce_Valid() const;

    QString getPkceVerifier() const;
    void setPkceVerifier(const QString &pkce_verifier);
    bool is_pkce_verifier_Set() const;
    bool is_pkce_verifier_Valid() const;

    QString getRedirectUri() const;
    void setRedirectUri(const QString &redirect_uri);
    bool is_redirect_uri_Set() const;
    bool is_redirect_uri_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auth_code;
    bool m_auth_code_isSet;
    bool m_auth_code_isValid;

    QString m_auth_uri;
    bool m_auth_uri_isSet;
    bool m_auth_uri_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    OAISecret m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    bool m_enable_pkce;
    bool m_enable_pkce_isSet;
    bool m_enable_pkce_isValid;

    QString m_pkce_verifier;
    bool m_pkce_verifier_isSet;
    bool m_pkce_verifier_isValid;

    QString m_redirect_uri;
    bool m_redirect_uri_isSet;
    bool m_redirect_uri_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOauth2AuthCodeFlow)

#endif // OAIOauth2AuthCodeFlow_H
