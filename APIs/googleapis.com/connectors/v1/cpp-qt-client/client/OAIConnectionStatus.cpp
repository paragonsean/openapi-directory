/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionStatus::OAIConnectionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionStatus::OAIConnectionStatus() {
    this->initializeModel();
}

OAIConnectionStatus::~OAIConnectionStatus() {}

void OAIConnectionStatus::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIConnectionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionStatus::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIConnectionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIConnectionStatus::getDescription() const {
    return m_description;
}
void OAIConnectionStatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnectionStatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnectionStatus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConnectionStatus::getState() const {
    return m_state;
}
void OAIConnectionStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnectionStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnectionStatus::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConnectionStatus::getStatus() const {
    return m_status;
}
void OAIConnectionStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnectionStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnectionStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIConnectionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
