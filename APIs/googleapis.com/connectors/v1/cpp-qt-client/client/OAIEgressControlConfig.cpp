/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEgressControlConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEgressControlConfig::OAIEgressControlConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEgressControlConfig::OAIEgressControlConfig() {
    this->initializeModel();
}

OAIEgressControlConfig::~OAIEgressControlConfig() {}

void OAIEgressControlConfig::initializeModel() {

    m_backends_isSet = false;
    m_backends_isValid = false;

    m_extraction_rules_isSet = false;
    m_extraction_rules_isValid = false;
}

void OAIEgressControlConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEgressControlConfig::fromJsonObject(QJsonObject json) {

    m_backends_isValid = ::OpenAPI::fromJsonValue(m_backends, json[QString("backends")]);
    m_backends_isSet = !json[QString("backends")].isNull() && m_backends_isValid;

    m_extraction_rules_isValid = ::OpenAPI::fromJsonValue(m_extraction_rules, json[QString("extractionRules")]);
    m_extraction_rules_isSet = !json[QString("extractionRules")].isNull() && m_extraction_rules_isValid;
}

QString OAIEgressControlConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEgressControlConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_backends_isSet) {
        obj.insert(QString("backends"), ::OpenAPI::toJsonValue(m_backends));
    }
    if (m_extraction_rules.isSet()) {
        obj.insert(QString("extractionRules"), ::OpenAPI::toJsonValue(m_extraction_rules));
    }
    return obj;
}

QString OAIEgressControlConfig::getBackends() const {
    return m_backends;
}
void OAIEgressControlConfig::setBackends(const QString &backends) {
    m_backends = backends;
    m_backends_isSet = true;
}

bool OAIEgressControlConfig::is_backends_Set() const{
    return m_backends_isSet;
}

bool OAIEgressControlConfig::is_backends_Valid() const{
    return m_backends_isValid;
}

OAIExtractionRules OAIEgressControlConfig::getExtractionRules() const {
    return m_extraction_rules;
}
void OAIEgressControlConfig::setExtractionRules(const OAIExtractionRules &extraction_rules) {
    m_extraction_rules = extraction_rules;
    m_extraction_rules_isSet = true;
}

bool OAIEgressControlConfig::is_extraction_rules_Set() const{
    return m_extraction_rules_isSet;
}

bool OAIEgressControlConfig::is_extraction_rules_Valid() const{
    return m_extraction_rules_isValid;
}

bool OAIEgressControlConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extraction_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEgressControlConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
