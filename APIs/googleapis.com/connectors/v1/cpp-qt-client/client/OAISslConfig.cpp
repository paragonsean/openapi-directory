/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslConfig::OAISslConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslConfig::OAISslConfig() {
    this->initializeModel();
}

OAISslConfig::~OAISslConfig() {}

void OAISslConfig::initializeModel() {

    m_additional_variables_isSet = false;
    m_additional_variables_isValid = false;

    m_client_cert_type_isSet = false;
    m_client_cert_type_isValid = false;

    m_client_certificate_isSet = false;
    m_client_certificate_isValid = false;

    m_client_private_key_isSet = false;
    m_client_private_key_isValid = false;

    m_client_private_key_pass_isSet = false;
    m_client_private_key_pass_isValid = false;

    m_private_server_certificate_isSet = false;
    m_private_server_certificate_isValid = false;

    m_server_cert_type_isSet = false;
    m_server_cert_type_isValid = false;

    m_trust_model_isSet = false;
    m_trust_model_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_use_ssl_isSet = false;
    m_use_ssl_isValid = false;
}

void OAISslConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslConfig::fromJsonObject(QJsonObject json) {

    m_additional_variables_isValid = ::OpenAPI::fromJsonValue(m_additional_variables, json[QString("additionalVariables")]);
    m_additional_variables_isSet = !json[QString("additionalVariables")].isNull() && m_additional_variables_isValid;

    m_client_cert_type_isValid = ::OpenAPI::fromJsonValue(m_client_cert_type, json[QString("clientCertType")]);
    m_client_cert_type_isSet = !json[QString("clientCertType")].isNull() && m_client_cert_type_isValid;

    m_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_client_certificate, json[QString("clientCertificate")]);
    m_client_certificate_isSet = !json[QString("clientCertificate")].isNull() && m_client_certificate_isValid;

    m_client_private_key_isValid = ::OpenAPI::fromJsonValue(m_client_private_key, json[QString("clientPrivateKey")]);
    m_client_private_key_isSet = !json[QString("clientPrivateKey")].isNull() && m_client_private_key_isValid;

    m_client_private_key_pass_isValid = ::OpenAPI::fromJsonValue(m_client_private_key_pass, json[QString("clientPrivateKeyPass")]);
    m_client_private_key_pass_isSet = !json[QString("clientPrivateKeyPass")].isNull() && m_client_private_key_pass_isValid;

    m_private_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_private_server_certificate, json[QString("privateServerCertificate")]);
    m_private_server_certificate_isSet = !json[QString("privateServerCertificate")].isNull() && m_private_server_certificate_isValid;

    m_server_cert_type_isValid = ::OpenAPI::fromJsonValue(m_server_cert_type, json[QString("serverCertType")]);
    m_server_cert_type_isSet = !json[QString("serverCertType")].isNull() && m_server_cert_type_isValid;

    m_trust_model_isValid = ::OpenAPI::fromJsonValue(m_trust_model, json[QString("trustModel")]);
    m_trust_model_isSet = !json[QString("trustModel")].isNull() && m_trust_model_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_use_ssl_isValid = ::OpenAPI::fromJsonValue(m_use_ssl, json[QString("useSsl")]);
    m_use_ssl_isSet = !json[QString("useSsl")].isNull() && m_use_ssl_isValid;
}

QString OAISslConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_variables.size() > 0) {
        obj.insert(QString("additionalVariables"), ::OpenAPI::toJsonValue(m_additional_variables));
    }
    if (m_client_cert_type_isSet) {
        obj.insert(QString("clientCertType"), ::OpenAPI::toJsonValue(m_client_cert_type));
    }
    if (m_client_certificate.isSet()) {
        obj.insert(QString("clientCertificate"), ::OpenAPI::toJsonValue(m_client_certificate));
    }
    if (m_client_private_key.isSet()) {
        obj.insert(QString("clientPrivateKey"), ::OpenAPI::toJsonValue(m_client_private_key));
    }
    if (m_client_private_key_pass.isSet()) {
        obj.insert(QString("clientPrivateKeyPass"), ::OpenAPI::toJsonValue(m_client_private_key_pass));
    }
    if (m_private_server_certificate.isSet()) {
        obj.insert(QString("privateServerCertificate"), ::OpenAPI::toJsonValue(m_private_server_certificate));
    }
    if (m_server_cert_type_isSet) {
        obj.insert(QString("serverCertType"), ::OpenAPI::toJsonValue(m_server_cert_type));
    }
    if (m_trust_model_isSet) {
        obj.insert(QString("trustModel"), ::OpenAPI::toJsonValue(m_trust_model));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_use_ssl_isSet) {
        obj.insert(QString("useSsl"), ::OpenAPI::toJsonValue(m_use_ssl));
    }
    return obj;
}

QList<OAIConfigVariable> OAISslConfig::getAdditionalVariables() const {
    return m_additional_variables;
}
void OAISslConfig::setAdditionalVariables(const QList<OAIConfigVariable> &additional_variables) {
    m_additional_variables = additional_variables;
    m_additional_variables_isSet = true;
}

bool OAISslConfig::is_additional_variables_Set() const{
    return m_additional_variables_isSet;
}

bool OAISslConfig::is_additional_variables_Valid() const{
    return m_additional_variables_isValid;
}

QString OAISslConfig::getClientCertType() const {
    return m_client_cert_type;
}
void OAISslConfig::setClientCertType(const QString &client_cert_type) {
    m_client_cert_type = client_cert_type;
    m_client_cert_type_isSet = true;
}

bool OAISslConfig::is_client_cert_type_Set() const{
    return m_client_cert_type_isSet;
}

bool OAISslConfig::is_client_cert_type_Valid() const{
    return m_client_cert_type_isValid;
}

OAISecret OAISslConfig::getClientCertificate() const {
    return m_client_certificate;
}
void OAISslConfig::setClientCertificate(const OAISecret &client_certificate) {
    m_client_certificate = client_certificate;
    m_client_certificate_isSet = true;
}

bool OAISslConfig::is_client_certificate_Set() const{
    return m_client_certificate_isSet;
}

bool OAISslConfig::is_client_certificate_Valid() const{
    return m_client_certificate_isValid;
}

OAISecret OAISslConfig::getClientPrivateKey() const {
    return m_client_private_key;
}
void OAISslConfig::setClientPrivateKey(const OAISecret &client_private_key) {
    m_client_private_key = client_private_key;
    m_client_private_key_isSet = true;
}

bool OAISslConfig::is_client_private_key_Set() const{
    return m_client_private_key_isSet;
}

bool OAISslConfig::is_client_private_key_Valid() const{
    return m_client_private_key_isValid;
}

OAISecret OAISslConfig::getClientPrivateKeyPass() const {
    return m_client_private_key_pass;
}
void OAISslConfig::setClientPrivateKeyPass(const OAISecret &client_private_key_pass) {
    m_client_private_key_pass = client_private_key_pass;
    m_client_private_key_pass_isSet = true;
}

bool OAISslConfig::is_client_private_key_pass_Set() const{
    return m_client_private_key_pass_isSet;
}

bool OAISslConfig::is_client_private_key_pass_Valid() const{
    return m_client_private_key_pass_isValid;
}

OAISecret OAISslConfig::getPrivateServerCertificate() const {
    return m_private_server_certificate;
}
void OAISslConfig::setPrivateServerCertificate(const OAISecret &private_server_certificate) {
    m_private_server_certificate = private_server_certificate;
    m_private_server_certificate_isSet = true;
}

bool OAISslConfig::is_private_server_certificate_Set() const{
    return m_private_server_certificate_isSet;
}

bool OAISslConfig::is_private_server_certificate_Valid() const{
    return m_private_server_certificate_isValid;
}

QString OAISslConfig::getServerCertType() const {
    return m_server_cert_type;
}
void OAISslConfig::setServerCertType(const QString &server_cert_type) {
    m_server_cert_type = server_cert_type;
    m_server_cert_type_isSet = true;
}

bool OAISslConfig::is_server_cert_type_Set() const{
    return m_server_cert_type_isSet;
}

bool OAISslConfig::is_server_cert_type_Valid() const{
    return m_server_cert_type_isValid;
}

QString OAISslConfig::getTrustModel() const {
    return m_trust_model;
}
void OAISslConfig::setTrustModel(const QString &trust_model) {
    m_trust_model = trust_model;
    m_trust_model_isSet = true;
}

bool OAISslConfig::is_trust_model_Set() const{
    return m_trust_model_isSet;
}

bool OAISslConfig::is_trust_model_Valid() const{
    return m_trust_model_isValid;
}

QString OAISslConfig::getType() const {
    return m_type;
}
void OAISslConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISslConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAISslConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISslConfig::isUseSsl() const {
    return m_use_ssl;
}
void OAISslConfig::setUseSsl(const bool &use_ssl) {
    m_use_ssl = use_ssl;
    m_use_ssl_isSet = true;
}

bool OAISslConfig::is_use_ssl_Set() const{
    return m_use_ssl_isSet;
}

bool OAISslConfig::is_use_ssl_Valid() const{
    return m_use_ssl_isValid;
}

bool OAISslConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_private_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_private_key_pass.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_server_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
