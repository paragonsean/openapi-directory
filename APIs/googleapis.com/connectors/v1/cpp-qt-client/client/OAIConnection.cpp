/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_auth_config_isSet = false;
    m_auth_config_isValid = false;

    m_config_variables_isSet = false;
    m_config_variables_isValid = false;

    m_connection_revision_isSet = false;
    m_connection_revision_isValid = false;

    m_connector_version_isSet = false;
    m_connector_version_isValid = false;

    m_connector_version_infra_config_isSet = false;
    m_connector_version_infra_config_isValid = false;

    m_connector_version_launch_stage_isSet = false;
    m_connector_version_launch_stage_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_configs_isSet = false;
    m_destination_configs_isValid = false;

    m_envoy_image_location_isSet = false;
    m_envoy_image_location_isValid = false;

    m_eventing_config_isSet = false;
    m_eventing_config_isValid = false;

    m_eventing_enablement_type_isSet = false;
    m_eventing_enablement_type_isValid = false;

    m_eventing_runtime_data_isSet = false;
    m_eventing_runtime_data_isValid = false;

    m_image_location_isSet = false;
    m_image_location_isValid = false;

    m_is_trusted_tester_isSet = false;
    m_is_trusted_tester_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lock_config_isSet = false;
    m_lock_config_isValid = false;

    m_log_config_isSet = false;
    m_log_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_config_isSet = false;
    m_node_config_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_service_directory_isSet = false;
    m_service_directory_isValid = false;

    m_ssl_config_isSet = false;
    m_ssl_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_auth_config_isValid = ::OpenAPI::fromJsonValue(m_auth_config, json[QString("authConfig")]);
    m_auth_config_isSet = !json[QString("authConfig")].isNull() && m_auth_config_isValid;

    m_config_variables_isValid = ::OpenAPI::fromJsonValue(m_config_variables, json[QString("configVariables")]);
    m_config_variables_isSet = !json[QString("configVariables")].isNull() && m_config_variables_isValid;

    m_connection_revision_isValid = ::OpenAPI::fromJsonValue(m_connection_revision, json[QString("connectionRevision")]);
    m_connection_revision_isSet = !json[QString("connectionRevision")].isNull() && m_connection_revision_isValid;

    m_connector_version_isValid = ::OpenAPI::fromJsonValue(m_connector_version, json[QString("connectorVersion")]);
    m_connector_version_isSet = !json[QString("connectorVersion")].isNull() && m_connector_version_isValid;

    m_connector_version_infra_config_isValid = ::OpenAPI::fromJsonValue(m_connector_version_infra_config, json[QString("connectorVersionInfraConfig")]);
    m_connector_version_infra_config_isSet = !json[QString("connectorVersionInfraConfig")].isNull() && m_connector_version_infra_config_isValid;

    m_connector_version_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_connector_version_launch_stage, json[QString("connectorVersionLaunchStage")]);
    m_connector_version_launch_stage_isSet = !json[QString("connectorVersionLaunchStage")].isNull() && m_connector_version_launch_stage_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_configs_isValid = ::OpenAPI::fromJsonValue(m_destination_configs, json[QString("destinationConfigs")]);
    m_destination_configs_isSet = !json[QString("destinationConfigs")].isNull() && m_destination_configs_isValid;

    m_envoy_image_location_isValid = ::OpenAPI::fromJsonValue(m_envoy_image_location, json[QString("envoyImageLocation")]);
    m_envoy_image_location_isSet = !json[QString("envoyImageLocation")].isNull() && m_envoy_image_location_isValid;

    m_eventing_config_isValid = ::OpenAPI::fromJsonValue(m_eventing_config, json[QString("eventingConfig")]);
    m_eventing_config_isSet = !json[QString("eventingConfig")].isNull() && m_eventing_config_isValid;

    m_eventing_enablement_type_isValid = ::OpenAPI::fromJsonValue(m_eventing_enablement_type, json[QString("eventingEnablementType")]);
    m_eventing_enablement_type_isSet = !json[QString("eventingEnablementType")].isNull() && m_eventing_enablement_type_isValid;

    m_eventing_runtime_data_isValid = ::OpenAPI::fromJsonValue(m_eventing_runtime_data, json[QString("eventingRuntimeData")]);
    m_eventing_runtime_data_isSet = !json[QString("eventingRuntimeData")].isNull() && m_eventing_runtime_data_isValid;

    m_image_location_isValid = ::OpenAPI::fromJsonValue(m_image_location, json[QString("imageLocation")]);
    m_image_location_isSet = !json[QString("imageLocation")].isNull() && m_image_location_isValid;

    m_is_trusted_tester_isValid = ::OpenAPI::fromJsonValue(m_is_trusted_tester, json[QString("isTrustedTester")]);
    m_is_trusted_tester_isSet = !json[QString("isTrustedTester")].isNull() && m_is_trusted_tester_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lock_config_isValid = ::OpenAPI::fromJsonValue(m_lock_config, json[QString("lockConfig")]);
    m_lock_config_isSet = !json[QString("lockConfig")].isNull() && m_lock_config_isValid;

    m_log_config_isValid = ::OpenAPI::fromJsonValue(m_log_config, json[QString("logConfig")]);
    m_log_config_isSet = !json[QString("logConfig")].isNull() && m_log_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_config_isValid = ::OpenAPI::fromJsonValue(m_node_config, json[QString("nodeConfig")]);
    m_node_config_isSet = !json[QString("nodeConfig")].isNull() && m_node_config_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_service_directory_isValid = ::OpenAPI::fromJsonValue(m_service_directory, json[QString("serviceDirectory")]);
    m_service_directory_isSet = !json[QString("serviceDirectory")].isNull() && m_service_directory_isValid;

    m_ssl_config_isValid = ::OpenAPI::fromJsonValue(m_ssl_config, json[QString("sslConfig")]);
    m_ssl_config_isSet = !json[QString("sslConfig")].isNull() && m_ssl_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("subscriptionType")]);
    m_subscription_type_isSet = !json[QString("subscriptionType")].isNull() && m_subscription_type_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_config.isSet()) {
        obj.insert(QString("authConfig"), ::OpenAPI::toJsonValue(m_auth_config));
    }
    if (m_config_variables.size() > 0) {
        obj.insert(QString("configVariables"), ::OpenAPI::toJsonValue(m_config_variables));
    }
    if (m_connection_revision_isSet) {
        obj.insert(QString("connectionRevision"), ::OpenAPI::toJsonValue(m_connection_revision));
    }
    if (m_connector_version_isSet) {
        obj.insert(QString("connectorVersion"), ::OpenAPI::toJsonValue(m_connector_version));
    }
    if (m_connector_version_infra_config.isSet()) {
        obj.insert(QString("connectorVersionInfraConfig"), ::OpenAPI::toJsonValue(m_connector_version_infra_config));
    }
    if (m_connector_version_launch_stage_isSet) {
        obj.insert(QString("connectorVersionLaunchStage"), ::OpenAPI::toJsonValue(m_connector_version_launch_stage));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_configs.size() > 0) {
        obj.insert(QString("destinationConfigs"), ::OpenAPI::toJsonValue(m_destination_configs));
    }
    if (m_envoy_image_location_isSet) {
        obj.insert(QString("envoyImageLocation"), ::OpenAPI::toJsonValue(m_envoy_image_location));
    }
    if (m_eventing_config.isSet()) {
        obj.insert(QString("eventingConfig"), ::OpenAPI::toJsonValue(m_eventing_config));
    }
    if (m_eventing_enablement_type_isSet) {
        obj.insert(QString("eventingEnablementType"), ::OpenAPI::toJsonValue(m_eventing_enablement_type));
    }
    if (m_eventing_runtime_data.isSet()) {
        obj.insert(QString("eventingRuntimeData"), ::OpenAPI::toJsonValue(m_eventing_runtime_data));
    }
    if (m_image_location_isSet) {
        obj.insert(QString("imageLocation"), ::OpenAPI::toJsonValue(m_image_location));
    }
    if (m_is_trusted_tester_isSet) {
        obj.insert(QString("isTrustedTester"), ::OpenAPI::toJsonValue(m_is_trusted_tester));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lock_config.isSet()) {
        obj.insert(QString("lockConfig"), ::OpenAPI::toJsonValue(m_lock_config));
    }
    if (m_log_config.isSet()) {
        obj.insert(QString("logConfig"), ::OpenAPI::toJsonValue(m_log_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_config.isSet()) {
        obj.insert(QString("nodeConfig"), ::OpenAPI::toJsonValue(m_node_config));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_service_directory_isSet) {
        obj.insert(QString("serviceDirectory"), ::OpenAPI::toJsonValue(m_service_directory));
    }
    if (m_ssl_config.isSet()) {
        obj.insert(QString("sslConfig"), ::OpenAPI::toJsonValue(m_ssl_config));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_type_isSet) {
        obj.insert(QString("subscriptionType"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAuthConfig OAIConnection::getAuthConfig() const {
    return m_auth_config;
}
void OAIConnection::setAuthConfig(const OAIAuthConfig &auth_config) {
    m_auth_config = auth_config;
    m_auth_config_isSet = true;
}

bool OAIConnection::is_auth_config_Set() const{
    return m_auth_config_isSet;
}

bool OAIConnection::is_auth_config_Valid() const{
    return m_auth_config_isValid;
}

QList<OAIConfigVariable> OAIConnection::getConfigVariables() const {
    return m_config_variables;
}
void OAIConnection::setConfigVariables(const QList<OAIConfigVariable> &config_variables) {
    m_config_variables = config_variables;
    m_config_variables_isSet = true;
}

bool OAIConnection::is_config_variables_Set() const{
    return m_config_variables_isSet;
}

bool OAIConnection::is_config_variables_Valid() const{
    return m_config_variables_isValid;
}

QString OAIConnection::getConnectionRevision() const {
    return m_connection_revision;
}
void OAIConnection::setConnectionRevision(const QString &connection_revision) {
    m_connection_revision = connection_revision;
    m_connection_revision_isSet = true;
}

bool OAIConnection::is_connection_revision_Set() const{
    return m_connection_revision_isSet;
}

bool OAIConnection::is_connection_revision_Valid() const{
    return m_connection_revision_isValid;
}

QString OAIConnection::getConnectorVersion() const {
    return m_connector_version;
}
void OAIConnection::setConnectorVersion(const QString &connector_version) {
    m_connector_version = connector_version;
    m_connector_version_isSet = true;
}

bool OAIConnection::is_connector_version_Set() const{
    return m_connector_version_isSet;
}

bool OAIConnection::is_connector_version_Valid() const{
    return m_connector_version_isValid;
}

OAIConnectorVersionInfraConfig OAIConnection::getConnectorVersionInfraConfig() const {
    return m_connector_version_infra_config;
}
void OAIConnection::setConnectorVersionInfraConfig(const OAIConnectorVersionInfraConfig &connector_version_infra_config) {
    m_connector_version_infra_config = connector_version_infra_config;
    m_connector_version_infra_config_isSet = true;
}

bool OAIConnection::is_connector_version_infra_config_Set() const{
    return m_connector_version_infra_config_isSet;
}

bool OAIConnection::is_connector_version_infra_config_Valid() const{
    return m_connector_version_infra_config_isValid;
}

QString OAIConnection::getConnectorVersionLaunchStage() const {
    return m_connector_version_launch_stage;
}
void OAIConnection::setConnectorVersionLaunchStage(const QString &connector_version_launch_stage) {
    m_connector_version_launch_stage = connector_version_launch_stage;
    m_connector_version_launch_stage_isSet = true;
}

bool OAIConnection::is_connector_version_launch_stage_Set() const{
    return m_connector_version_launch_stage_isSet;
}

bool OAIConnection::is_connector_version_launch_stage_Valid() const{
    return m_connector_version_launch_stage_isValid;
}

QString OAIConnection::getCreateTime() const {
    return m_create_time;
}
void OAIConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIConnection::getDescription() const {
    return m_description;
}
void OAIConnection::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnection::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnection::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDestinationConfig> OAIConnection::getDestinationConfigs() const {
    return m_destination_configs;
}
void OAIConnection::setDestinationConfigs(const QList<OAIDestinationConfig> &destination_configs) {
    m_destination_configs = destination_configs;
    m_destination_configs_isSet = true;
}

bool OAIConnection::is_destination_configs_Set() const{
    return m_destination_configs_isSet;
}

bool OAIConnection::is_destination_configs_Valid() const{
    return m_destination_configs_isValid;
}

QString OAIConnection::getEnvoyImageLocation() const {
    return m_envoy_image_location;
}
void OAIConnection::setEnvoyImageLocation(const QString &envoy_image_location) {
    m_envoy_image_location = envoy_image_location;
    m_envoy_image_location_isSet = true;
}

bool OAIConnection::is_envoy_image_location_Set() const{
    return m_envoy_image_location_isSet;
}

bool OAIConnection::is_envoy_image_location_Valid() const{
    return m_envoy_image_location_isValid;
}

OAIEventingConfig OAIConnection::getEventingConfig() const {
    return m_eventing_config;
}
void OAIConnection::setEventingConfig(const OAIEventingConfig &eventing_config) {
    m_eventing_config = eventing_config;
    m_eventing_config_isSet = true;
}

bool OAIConnection::is_eventing_config_Set() const{
    return m_eventing_config_isSet;
}

bool OAIConnection::is_eventing_config_Valid() const{
    return m_eventing_config_isValid;
}

QString OAIConnection::getEventingEnablementType() const {
    return m_eventing_enablement_type;
}
void OAIConnection::setEventingEnablementType(const QString &eventing_enablement_type) {
    m_eventing_enablement_type = eventing_enablement_type;
    m_eventing_enablement_type_isSet = true;
}

bool OAIConnection::is_eventing_enablement_type_Set() const{
    return m_eventing_enablement_type_isSet;
}

bool OAIConnection::is_eventing_enablement_type_Valid() const{
    return m_eventing_enablement_type_isValid;
}

OAIEventingRuntimeData OAIConnection::getEventingRuntimeData() const {
    return m_eventing_runtime_data;
}
void OAIConnection::setEventingRuntimeData(const OAIEventingRuntimeData &eventing_runtime_data) {
    m_eventing_runtime_data = eventing_runtime_data;
    m_eventing_runtime_data_isSet = true;
}

bool OAIConnection::is_eventing_runtime_data_Set() const{
    return m_eventing_runtime_data_isSet;
}

bool OAIConnection::is_eventing_runtime_data_Valid() const{
    return m_eventing_runtime_data_isValid;
}

QString OAIConnection::getImageLocation() const {
    return m_image_location;
}
void OAIConnection::setImageLocation(const QString &image_location) {
    m_image_location = image_location;
    m_image_location_isSet = true;
}

bool OAIConnection::is_image_location_Set() const{
    return m_image_location_isSet;
}

bool OAIConnection::is_image_location_Valid() const{
    return m_image_location_isValid;
}

bool OAIConnection::isIsTrustedTester() const {
    return m_is_trusted_tester;
}
void OAIConnection::setIsTrustedTester(const bool &is_trusted_tester) {
    m_is_trusted_tester = is_trusted_tester;
    m_is_trusted_tester_isSet = true;
}

bool OAIConnection::is_is_trusted_tester_Set() const{
    return m_is_trusted_tester_isSet;
}

bool OAIConnection::is_is_trusted_tester_Valid() const{
    return m_is_trusted_tester_isValid;
}

QMap<QString, QString> OAIConnection::getLabels() const {
    return m_labels;
}
void OAIConnection::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIConnection::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIConnection::is_labels_Valid() const{
    return m_labels_isValid;
}

OAILockConfig OAIConnection::getLockConfig() const {
    return m_lock_config;
}
void OAIConnection::setLockConfig(const OAILockConfig &lock_config) {
    m_lock_config = lock_config;
    m_lock_config_isSet = true;
}

bool OAIConnection::is_lock_config_Set() const{
    return m_lock_config_isSet;
}

bool OAIConnection::is_lock_config_Valid() const{
    return m_lock_config_isValid;
}

OAIConnectorsLogConfig OAIConnection::getLogConfig() const {
    return m_log_config;
}
void OAIConnection::setLogConfig(const OAIConnectorsLogConfig &log_config) {
    m_log_config = log_config;
    m_log_config_isSet = true;
}

bool OAIConnection::is_log_config_Set() const{
    return m_log_config_isSet;
}

bool OAIConnection::is_log_config_Valid() const{
    return m_log_config_isValid;
}

QString OAIConnection::getName() const {
    return m_name;
}
void OAIConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnection::is_name_Valid() const{
    return m_name_isValid;
}

OAINodeConfig OAIConnection::getNodeConfig() const {
    return m_node_config;
}
void OAIConnection::setNodeConfig(const OAINodeConfig &node_config) {
    m_node_config = node_config;
    m_node_config_isSet = true;
}

bool OAIConnection::is_node_config_Set() const{
    return m_node_config_isSet;
}

bool OAIConnection::is_node_config_Valid() const{
    return m_node_config_isValid;
}

QString OAIConnection::getServiceAccount() const {
    return m_service_account;
}
void OAIConnection::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIConnection::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIConnection::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIConnection::getServiceDirectory() const {
    return m_service_directory;
}
void OAIConnection::setServiceDirectory(const QString &service_directory) {
    m_service_directory = service_directory;
    m_service_directory_isSet = true;
}

bool OAIConnection::is_service_directory_Set() const{
    return m_service_directory_isSet;
}

bool OAIConnection::is_service_directory_Valid() const{
    return m_service_directory_isValid;
}

OAISslConfig OAIConnection::getSslConfig() const {
    return m_ssl_config;
}
void OAIConnection::setSslConfig(const OAISslConfig &ssl_config) {
    m_ssl_config = ssl_config;
    m_ssl_config_isSet = true;
}

bool OAIConnection::is_ssl_config_Set() const{
    return m_ssl_config_isSet;
}

bool OAIConnection::is_ssl_config_Valid() const{
    return m_ssl_config_isValid;
}

OAIConnectionStatus OAIConnection::getStatus() const {
    return m_status;
}
void OAIConnection::setStatus(const OAIConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnection::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnection::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIConnection::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIConnection::setSubscriptionType(const QString &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIConnection::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIConnection::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

bool OAIConnection::isSuspended() const {
    return m_suspended;
}
void OAIConnection::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIConnection::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIConnection::is_suspended_Valid() const{
    return m_suspended_isValid;
}

QString OAIConnection::getUpdateTime() const {
    return m_update_time;
}
void OAIConnection::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConnection::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConnection::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_version_infra_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_version_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_envoy_image_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eventing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eventing_enablement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eventing_runtime_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_trusted_tester_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
