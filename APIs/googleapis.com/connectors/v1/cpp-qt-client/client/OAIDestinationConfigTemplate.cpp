/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationConfigTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationConfigTemplate::OAIDestinationConfigTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationConfigTemplate::OAIDestinationConfigTemplate() {
    this->initializeModel();
}

OAIDestinationConfigTemplate::~OAIDestinationConfigTemplate() {}

void OAIDestinationConfigTemplate::initializeModel() {

    m_default_port_isSet = false;
    m_default_port_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_advanced_isSet = false;
    m_is_advanced_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_port_field_type_isSet = false;
    m_port_field_type_isValid = false;

    m_regex_pattern_isSet = false;
    m_regex_pattern_isValid = false;
}

void OAIDestinationConfigTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationConfigTemplate::fromJsonObject(QJsonObject json) {

    m_default_port_isValid = ::OpenAPI::fromJsonValue(m_default_port, json[QString("defaultPort")]);
    m_default_port_isSet = !json[QString("defaultPort")].isNull() && m_default_port_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_advanced_isValid = ::OpenAPI::fromJsonValue(m_is_advanced, json[QString("isAdvanced")]);
    m_is_advanced_isSet = !json[QString("isAdvanced")].isNull() && m_is_advanced_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_port_field_type_isValid = ::OpenAPI::fromJsonValue(m_port_field_type, json[QString("portFieldType")]);
    m_port_field_type_isSet = !json[QString("portFieldType")].isNull() && m_port_field_type_isValid;

    m_regex_pattern_isValid = ::OpenAPI::fromJsonValue(m_regex_pattern, json[QString("regexPattern")]);
    m_regex_pattern_isSet = !json[QString("regexPattern")].isNull() && m_regex_pattern_isValid;
}

QString OAIDestinationConfigTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationConfigTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_default_port_isSet) {
        obj.insert(QString("defaultPort"), ::OpenAPI::toJsonValue(m_default_port));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_advanced_isSet) {
        obj.insert(QString("isAdvanced"), ::OpenAPI::toJsonValue(m_is_advanced));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_port_field_type_isSet) {
        obj.insert(QString("portFieldType"), ::OpenAPI::toJsonValue(m_port_field_type));
    }
    if (m_regex_pattern_isSet) {
        obj.insert(QString("regexPattern"), ::OpenAPI::toJsonValue(m_regex_pattern));
    }
    return obj;
}

qint32 OAIDestinationConfigTemplate::getDefaultPort() const {
    return m_default_port;
}
void OAIDestinationConfigTemplate::setDefaultPort(const qint32 &default_port) {
    m_default_port = default_port;
    m_default_port_isSet = true;
}

bool OAIDestinationConfigTemplate::is_default_port_Set() const{
    return m_default_port_isSet;
}

bool OAIDestinationConfigTemplate::is_default_port_Valid() const{
    return m_default_port_isValid;
}

QString OAIDestinationConfigTemplate::getDescription() const {
    return m_description;
}
void OAIDestinationConfigTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDestinationConfigTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDestinationConfigTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDestinationConfigTemplate::getDisplayName() const {
    return m_display_name;
}
void OAIDestinationConfigTemplate::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDestinationConfigTemplate::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDestinationConfigTemplate::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIDestinationConfigTemplate::isIsAdvanced() const {
    return m_is_advanced;
}
void OAIDestinationConfigTemplate::setIsAdvanced(const bool &is_advanced) {
    m_is_advanced = is_advanced;
    m_is_advanced_isSet = true;
}

bool OAIDestinationConfigTemplate::is_is_advanced_Set() const{
    return m_is_advanced_isSet;
}

bool OAIDestinationConfigTemplate::is_is_advanced_Valid() const{
    return m_is_advanced_isValid;
}

QString OAIDestinationConfigTemplate::getKey() const {
    return m_key;
}
void OAIDestinationConfigTemplate::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDestinationConfigTemplate::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDestinationConfigTemplate::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIDestinationConfigTemplate::getMax() const {
    return m_max;
}
void OAIDestinationConfigTemplate::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIDestinationConfigTemplate::is_max_Set() const{
    return m_max_isSet;
}

bool OAIDestinationConfigTemplate::is_max_Valid() const{
    return m_max_isValid;
}

qint32 OAIDestinationConfigTemplate::getMin() const {
    return m_min;
}
void OAIDestinationConfigTemplate::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIDestinationConfigTemplate::is_min_Set() const{
    return m_min_isSet;
}

bool OAIDestinationConfigTemplate::is_min_Valid() const{
    return m_min_isValid;
}

QString OAIDestinationConfigTemplate::getPortFieldType() const {
    return m_port_field_type;
}
void OAIDestinationConfigTemplate::setPortFieldType(const QString &port_field_type) {
    m_port_field_type = port_field_type;
    m_port_field_type_isSet = true;
}

bool OAIDestinationConfigTemplate::is_port_field_type_Set() const{
    return m_port_field_type_isSet;
}

bool OAIDestinationConfigTemplate::is_port_field_type_Valid() const{
    return m_port_field_type_isValid;
}

QString OAIDestinationConfigTemplate::getRegexPattern() const {
    return m_regex_pattern;
}
void OAIDestinationConfigTemplate::setRegexPattern(const QString &regex_pattern) {
    m_regex_pattern = regex_pattern;
    m_regex_pattern_isSet = true;
}

bool OAIDestinationConfigTemplate::is_regex_pattern_Set() const{
    return m_regex_pattern_isSet;
}

bool OAIDestinationConfigTemplate::is_regex_pattern_Valid() const{
    return m_regex_pattern_isValid;
}

bool OAIDestinationConfigTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_advanced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationConfigTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
