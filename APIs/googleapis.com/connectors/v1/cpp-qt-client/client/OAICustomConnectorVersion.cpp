/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomConnectorVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomConnectorVersion::OAICustomConnectorVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomConnectorVersion::OAICustomConnectorVersion() {
    this->initializeModel();
}

OAICustomConnectorVersion::~OAICustomConnectorVersion() {}

void OAICustomConnectorVersion::initializeModel() {

    m_auth_config_isSet = false;
    m_auth_config_isValid = false;

    m_backend_variable_templates_isSet = false;
    m_backend_variable_templates_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destination_configs_isSet = false;
    m_destination_configs_isValid = false;

    m_enable_backend_destination_config_isSet = false;
    m_enable_backend_destination_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_spec_location_isSet = false;
    m_spec_location_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICustomConnectorVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomConnectorVersion::fromJsonObject(QJsonObject json) {

    m_auth_config_isValid = ::OpenAPI::fromJsonValue(m_auth_config, json[QString("authConfig")]);
    m_auth_config_isSet = !json[QString("authConfig")].isNull() && m_auth_config_isValid;

    m_backend_variable_templates_isValid = ::OpenAPI::fromJsonValue(m_backend_variable_templates, json[QString("backendVariableTemplates")]);
    m_backend_variable_templates_isSet = !json[QString("backendVariableTemplates")].isNull() && m_backend_variable_templates_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destination_configs_isValid = ::OpenAPI::fromJsonValue(m_destination_configs, json[QString("destinationConfigs")]);
    m_destination_configs_isSet = !json[QString("destinationConfigs")].isNull() && m_destination_configs_isValid;

    m_enable_backend_destination_config_isValid = ::OpenAPI::fromJsonValue(m_enable_backend_destination_config, json[QString("enableBackendDestinationConfig")]);
    m_enable_backend_destination_config_isSet = !json[QString("enableBackendDestinationConfig")].isNull() && m_enable_backend_destination_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_spec_location_isValid = ::OpenAPI::fromJsonValue(m_spec_location, json[QString("specLocation")]);
    m_spec_location_isSet = !json[QString("specLocation")].isNull() && m_spec_location_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICustomConnectorVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomConnectorVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_config.isSet()) {
        obj.insert(QString("authConfig"), ::OpenAPI::toJsonValue(m_auth_config));
    }
    if (m_backend_variable_templates.size() > 0) {
        obj.insert(QString("backendVariableTemplates"), ::OpenAPI::toJsonValue(m_backend_variable_templates));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destination_configs.size() > 0) {
        obj.insert(QString("destinationConfigs"), ::OpenAPI::toJsonValue(m_destination_configs));
    }
    if (m_enable_backend_destination_config_isSet) {
        obj.insert(QString("enableBackendDestinationConfig"), ::OpenAPI::toJsonValue(m_enable_backend_destination_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_spec_location_isSet) {
        obj.insert(QString("specLocation"), ::OpenAPI::toJsonValue(m_spec_location));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAuthConfig OAICustomConnectorVersion::getAuthConfig() const {
    return m_auth_config;
}
void OAICustomConnectorVersion::setAuthConfig(const OAIAuthConfig &auth_config) {
    m_auth_config = auth_config;
    m_auth_config_isSet = true;
}

bool OAICustomConnectorVersion::is_auth_config_Set() const{
    return m_auth_config_isSet;
}

bool OAICustomConnectorVersion::is_auth_config_Valid() const{
    return m_auth_config_isValid;
}

QList<OAIConfigVariableTemplate> OAICustomConnectorVersion::getBackendVariableTemplates() const {
    return m_backend_variable_templates;
}
void OAICustomConnectorVersion::setBackendVariableTemplates(const QList<OAIConfigVariableTemplate> &backend_variable_templates) {
    m_backend_variable_templates = backend_variable_templates;
    m_backend_variable_templates_isSet = true;
}

bool OAICustomConnectorVersion::is_backend_variable_templates_Set() const{
    return m_backend_variable_templates_isSet;
}

bool OAICustomConnectorVersion::is_backend_variable_templates_Valid() const{
    return m_backend_variable_templates_isValid;
}

QString OAICustomConnectorVersion::getCreateTime() const {
    return m_create_time;
}
void OAICustomConnectorVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICustomConnectorVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICustomConnectorVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIDestinationConfig> OAICustomConnectorVersion::getDestinationConfigs() const {
    return m_destination_configs;
}
void OAICustomConnectorVersion::setDestinationConfigs(const QList<OAIDestinationConfig> &destination_configs) {
    m_destination_configs = destination_configs;
    m_destination_configs_isSet = true;
}

bool OAICustomConnectorVersion::is_destination_configs_Set() const{
    return m_destination_configs_isSet;
}

bool OAICustomConnectorVersion::is_destination_configs_Valid() const{
    return m_destination_configs_isValid;
}

bool OAICustomConnectorVersion::isEnableBackendDestinationConfig() const {
    return m_enable_backend_destination_config;
}
void OAICustomConnectorVersion::setEnableBackendDestinationConfig(const bool &enable_backend_destination_config) {
    m_enable_backend_destination_config = enable_backend_destination_config;
    m_enable_backend_destination_config_isSet = true;
}

bool OAICustomConnectorVersion::is_enable_backend_destination_config_Set() const{
    return m_enable_backend_destination_config_isSet;
}

bool OAICustomConnectorVersion::is_enable_backend_destination_config_Valid() const{
    return m_enable_backend_destination_config_isValid;
}

QMap<QString, QString> OAICustomConnectorVersion::getLabels() const {
    return m_labels;
}
void OAICustomConnectorVersion::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICustomConnectorVersion::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICustomConnectorVersion::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICustomConnectorVersion::getName() const {
    return m_name;
}
void OAICustomConnectorVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomConnectorVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomConnectorVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomConnectorVersion::getServiceAccount() const {
    return m_service_account;
}
void OAICustomConnectorVersion::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAICustomConnectorVersion::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAICustomConnectorVersion::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAICustomConnectorVersion::getSpecLocation() const {
    return m_spec_location;
}
void OAICustomConnectorVersion::setSpecLocation(const QString &spec_location) {
    m_spec_location = spec_location;
    m_spec_location_isSet = true;
}

bool OAICustomConnectorVersion::is_spec_location_Set() const{
    return m_spec_location_isSet;
}

bool OAICustomConnectorVersion::is_spec_location_Valid() const{
    return m_spec_location_isValid;
}

QString OAICustomConnectorVersion::getState() const {
    return m_state;
}
void OAICustomConnectorVersion::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICustomConnectorVersion::is_state_Set() const{
    return m_state_isSet;
}

bool OAICustomConnectorVersion::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICustomConnectorVersion::getUpdateTime() const {
    return m_update_time;
}
void OAICustomConnectorVersion::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICustomConnectorVersion::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICustomConnectorVersion::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICustomConnectorVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_variable_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_backend_destination_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomConnectorVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
