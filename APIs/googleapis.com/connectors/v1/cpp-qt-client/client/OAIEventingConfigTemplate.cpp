/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventingConfigTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventingConfigTemplate::OAIEventingConfigTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventingConfigTemplate::OAIEventingConfigTemplate() {
    this->initializeModel();
}

OAIEventingConfigTemplate::~OAIEventingConfigTemplate() {}

void OAIEventingConfigTemplate::initializeModel() {

    m_additional_variables_isSet = false;
    m_additional_variables_isValid = false;

    m_auth_config_templates_isSet = false;
    m_auth_config_templates_isValid = false;

    m_auto_refresh_isSet = false;
    m_auto_refresh_isValid = false;

    m_auto_registration_supported_isSet = false;
    m_auto_registration_supported_isValid = false;

    m_encryption_key_template_isSet = false;
    m_encryption_key_template_isValid = false;

    m_enrichment_supported_isSet = false;
    m_enrichment_supported_isValid = false;

    m_event_listener_type_isSet = false;
    m_event_listener_type_isValid = false;

    m_is_eventing_supported_isSet = false;
    m_is_eventing_supported_isValid = false;

    m_listener_auth_config_templates_isSet = false;
    m_listener_auth_config_templates_isValid = false;

    m_proxy_destination_config_isSet = false;
    m_proxy_destination_config_isValid = false;

    m_registration_destination_config_isSet = false;
    m_registration_destination_config_isValid = false;

    m_trigger_config_variables_isSet = false;
    m_trigger_config_variables_isValid = false;
}

void OAIEventingConfigTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventingConfigTemplate::fromJsonObject(QJsonObject json) {

    m_additional_variables_isValid = ::OpenAPI::fromJsonValue(m_additional_variables, json[QString("additionalVariables")]);
    m_additional_variables_isSet = !json[QString("additionalVariables")].isNull() && m_additional_variables_isValid;

    m_auth_config_templates_isValid = ::OpenAPI::fromJsonValue(m_auth_config_templates, json[QString("authConfigTemplates")]);
    m_auth_config_templates_isSet = !json[QString("authConfigTemplates")].isNull() && m_auth_config_templates_isValid;

    m_auto_refresh_isValid = ::OpenAPI::fromJsonValue(m_auto_refresh, json[QString("autoRefresh")]);
    m_auto_refresh_isSet = !json[QString("autoRefresh")].isNull() && m_auto_refresh_isValid;

    m_auto_registration_supported_isValid = ::OpenAPI::fromJsonValue(m_auto_registration_supported, json[QString("autoRegistrationSupported")]);
    m_auto_registration_supported_isSet = !json[QString("autoRegistrationSupported")].isNull() && m_auto_registration_supported_isValid;

    m_encryption_key_template_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_template, json[QString("encryptionKeyTemplate")]);
    m_encryption_key_template_isSet = !json[QString("encryptionKeyTemplate")].isNull() && m_encryption_key_template_isValid;

    m_enrichment_supported_isValid = ::OpenAPI::fromJsonValue(m_enrichment_supported, json[QString("enrichmentSupported")]);
    m_enrichment_supported_isSet = !json[QString("enrichmentSupported")].isNull() && m_enrichment_supported_isValid;

    m_event_listener_type_isValid = ::OpenAPI::fromJsonValue(m_event_listener_type, json[QString("eventListenerType")]);
    m_event_listener_type_isSet = !json[QString("eventListenerType")].isNull() && m_event_listener_type_isValid;

    m_is_eventing_supported_isValid = ::OpenAPI::fromJsonValue(m_is_eventing_supported, json[QString("isEventingSupported")]);
    m_is_eventing_supported_isSet = !json[QString("isEventingSupported")].isNull() && m_is_eventing_supported_isValid;

    m_listener_auth_config_templates_isValid = ::OpenAPI::fromJsonValue(m_listener_auth_config_templates, json[QString("listenerAuthConfigTemplates")]);
    m_listener_auth_config_templates_isSet = !json[QString("listenerAuthConfigTemplates")].isNull() && m_listener_auth_config_templates_isValid;

    m_proxy_destination_config_isValid = ::OpenAPI::fromJsonValue(m_proxy_destination_config, json[QString("proxyDestinationConfig")]);
    m_proxy_destination_config_isSet = !json[QString("proxyDestinationConfig")].isNull() && m_proxy_destination_config_isValid;

    m_registration_destination_config_isValid = ::OpenAPI::fromJsonValue(m_registration_destination_config, json[QString("registrationDestinationConfig")]);
    m_registration_destination_config_isSet = !json[QString("registrationDestinationConfig")].isNull() && m_registration_destination_config_isValid;

    m_trigger_config_variables_isValid = ::OpenAPI::fromJsonValue(m_trigger_config_variables, json[QString("triggerConfigVariables")]);
    m_trigger_config_variables_isSet = !json[QString("triggerConfigVariables")].isNull() && m_trigger_config_variables_isValid;
}

QString OAIEventingConfigTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventingConfigTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_variables.size() > 0) {
        obj.insert(QString("additionalVariables"), ::OpenAPI::toJsonValue(m_additional_variables));
    }
    if (m_auth_config_templates.size() > 0) {
        obj.insert(QString("authConfigTemplates"), ::OpenAPI::toJsonValue(m_auth_config_templates));
    }
    if (m_auto_refresh_isSet) {
        obj.insert(QString("autoRefresh"), ::OpenAPI::toJsonValue(m_auto_refresh));
    }
    if (m_auto_registration_supported_isSet) {
        obj.insert(QString("autoRegistrationSupported"), ::OpenAPI::toJsonValue(m_auto_registration_supported));
    }
    if (m_encryption_key_template.isSet()) {
        obj.insert(QString("encryptionKeyTemplate"), ::OpenAPI::toJsonValue(m_encryption_key_template));
    }
    if (m_enrichment_supported_isSet) {
        obj.insert(QString("enrichmentSupported"), ::OpenAPI::toJsonValue(m_enrichment_supported));
    }
    if (m_event_listener_type_isSet) {
        obj.insert(QString("eventListenerType"), ::OpenAPI::toJsonValue(m_event_listener_type));
    }
    if (m_is_eventing_supported_isSet) {
        obj.insert(QString("isEventingSupported"), ::OpenAPI::toJsonValue(m_is_eventing_supported));
    }
    if (m_listener_auth_config_templates.size() > 0) {
        obj.insert(QString("listenerAuthConfigTemplates"), ::OpenAPI::toJsonValue(m_listener_auth_config_templates));
    }
    if (m_proxy_destination_config.isSet()) {
        obj.insert(QString("proxyDestinationConfig"), ::OpenAPI::toJsonValue(m_proxy_destination_config));
    }
    if (m_registration_destination_config.isSet()) {
        obj.insert(QString("registrationDestinationConfig"), ::OpenAPI::toJsonValue(m_registration_destination_config));
    }
    if (m_trigger_config_variables.size() > 0) {
        obj.insert(QString("triggerConfigVariables"), ::OpenAPI::toJsonValue(m_trigger_config_variables));
    }
    return obj;
}

QList<OAIConfigVariableTemplate> OAIEventingConfigTemplate::getAdditionalVariables() const {
    return m_additional_variables;
}
void OAIEventingConfigTemplate::setAdditionalVariables(const QList<OAIConfigVariableTemplate> &additional_variables) {
    m_additional_variables = additional_variables;
    m_additional_variables_isSet = true;
}

bool OAIEventingConfigTemplate::is_additional_variables_Set() const{
    return m_additional_variables_isSet;
}

bool OAIEventingConfigTemplate::is_additional_variables_Valid() const{
    return m_additional_variables_isValid;
}

QList<OAIAuthConfigTemplate> OAIEventingConfigTemplate::getAuthConfigTemplates() const {
    return m_auth_config_templates;
}
void OAIEventingConfigTemplate::setAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &auth_config_templates) {
    m_auth_config_templates = auth_config_templates;
    m_auth_config_templates_isSet = true;
}

bool OAIEventingConfigTemplate::is_auth_config_templates_Set() const{
    return m_auth_config_templates_isSet;
}

bool OAIEventingConfigTemplate::is_auth_config_templates_Valid() const{
    return m_auth_config_templates_isValid;
}

bool OAIEventingConfigTemplate::isAutoRefresh() const {
    return m_auto_refresh;
}
void OAIEventingConfigTemplate::setAutoRefresh(const bool &auto_refresh) {
    m_auto_refresh = auto_refresh;
    m_auto_refresh_isSet = true;
}

bool OAIEventingConfigTemplate::is_auto_refresh_Set() const{
    return m_auto_refresh_isSet;
}

bool OAIEventingConfigTemplate::is_auto_refresh_Valid() const{
    return m_auto_refresh_isValid;
}

bool OAIEventingConfigTemplate::isAutoRegistrationSupported() const {
    return m_auto_registration_supported;
}
void OAIEventingConfigTemplate::setAutoRegistrationSupported(const bool &auto_registration_supported) {
    m_auto_registration_supported = auto_registration_supported;
    m_auto_registration_supported_isSet = true;
}

bool OAIEventingConfigTemplate::is_auto_registration_supported_Set() const{
    return m_auto_registration_supported_isSet;
}

bool OAIEventingConfigTemplate::is_auto_registration_supported_Valid() const{
    return m_auto_registration_supported_isValid;
}

OAIConfigVariableTemplate OAIEventingConfigTemplate::getEncryptionKeyTemplate() const {
    return m_encryption_key_template;
}
void OAIEventingConfigTemplate::setEncryptionKeyTemplate(const OAIConfigVariableTemplate &encryption_key_template) {
    m_encryption_key_template = encryption_key_template;
    m_encryption_key_template_isSet = true;
}

bool OAIEventingConfigTemplate::is_encryption_key_template_Set() const{
    return m_encryption_key_template_isSet;
}

bool OAIEventingConfigTemplate::is_encryption_key_template_Valid() const{
    return m_encryption_key_template_isValid;
}

bool OAIEventingConfigTemplate::isEnrichmentSupported() const {
    return m_enrichment_supported;
}
void OAIEventingConfigTemplate::setEnrichmentSupported(const bool &enrichment_supported) {
    m_enrichment_supported = enrichment_supported;
    m_enrichment_supported_isSet = true;
}

bool OAIEventingConfigTemplate::is_enrichment_supported_Set() const{
    return m_enrichment_supported_isSet;
}

bool OAIEventingConfigTemplate::is_enrichment_supported_Valid() const{
    return m_enrichment_supported_isValid;
}

QString OAIEventingConfigTemplate::getEventListenerType() const {
    return m_event_listener_type;
}
void OAIEventingConfigTemplate::setEventListenerType(const QString &event_listener_type) {
    m_event_listener_type = event_listener_type;
    m_event_listener_type_isSet = true;
}

bool OAIEventingConfigTemplate::is_event_listener_type_Set() const{
    return m_event_listener_type_isSet;
}

bool OAIEventingConfigTemplate::is_event_listener_type_Valid() const{
    return m_event_listener_type_isValid;
}

bool OAIEventingConfigTemplate::isIsEventingSupported() const {
    return m_is_eventing_supported;
}
void OAIEventingConfigTemplate::setIsEventingSupported(const bool &is_eventing_supported) {
    m_is_eventing_supported = is_eventing_supported;
    m_is_eventing_supported_isSet = true;
}

bool OAIEventingConfigTemplate::is_is_eventing_supported_Set() const{
    return m_is_eventing_supported_isSet;
}

bool OAIEventingConfigTemplate::is_is_eventing_supported_Valid() const{
    return m_is_eventing_supported_isValid;
}

QList<OAIAuthConfigTemplate> OAIEventingConfigTemplate::getListenerAuthConfigTemplates() const {
    return m_listener_auth_config_templates;
}
void OAIEventingConfigTemplate::setListenerAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &listener_auth_config_templates) {
    m_listener_auth_config_templates = listener_auth_config_templates;
    m_listener_auth_config_templates_isSet = true;
}

bool OAIEventingConfigTemplate::is_listener_auth_config_templates_Set() const{
    return m_listener_auth_config_templates_isSet;
}

bool OAIEventingConfigTemplate::is_listener_auth_config_templates_Valid() const{
    return m_listener_auth_config_templates_isValid;
}

OAIDestinationConfigTemplate OAIEventingConfigTemplate::getProxyDestinationConfig() const {
    return m_proxy_destination_config;
}
void OAIEventingConfigTemplate::setProxyDestinationConfig(const OAIDestinationConfigTemplate &proxy_destination_config) {
    m_proxy_destination_config = proxy_destination_config;
    m_proxy_destination_config_isSet = true;
}

bool OAIEventingConfigTemplate::is_proxy_destination_config_Set() const{
    return m_proxy_destination_config_isSet;
}

bool OAIEventingConfigTemplate::is_proxy_destination_config_Valid() const{
    return m_proxy_destination_config_isValid;
}

OAIDestinationConfigTemplate OAIEventingConfigTemplate::getRegistrationDestinationConfig() const {
    return m_registration_destination_config;
}
void OAIEventingConfigTemplate::setRegistrationDestinationConfig(const OAIDestinationConfigTemplate &registration_destination_config) {
    m_registration_destination_config = registration_destination_config;
    m_registration_destination_config_isSet = true;
}

bool OAIEventingConfigTemplate::is_registration_destination_config_Set() const{
    return m_registration_destination_config_isSet;
}

bool OAIEventingConfigTemplate::is_registration_destination_config_Valid() const{
    return m_registration_destination_config_isValid;
}

QList<OAIConfigVariableTemplate> OAIEventingConfigTemplate::getTriggerConfigVariables() const {
    return m_trigger_config_variables;
}
void OAIEventingConfigTemplate::setTriggerConfigVariables(const QList<OAIConfigVariableTemplate> &trigger_config_variables) {
    m_trigger_config_variables = trigger_config_variables;
    m_trigger_config_variables_isSet = true;
}

bool OAIEventingConfigTemplate::is_trigger_config_variables_Set() const{
    return m_trigger_config_variables_isSet;
}

bool OAIEventingConfigTemplate::is_trigger_config_variables_Valid() const{
    return m_trigger_config_variables_isValid;
}

bool OAIEventingConfigTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_config_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_refresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_registration_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_listener_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_eventing_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_auth_config_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_config_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventingConfigTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
