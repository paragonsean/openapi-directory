/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscription::OAIEventSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscription::OAIEventSubscription() {
    this->initializeModel();
}

OAIEventSubscription::~OAIEventSubscription() {}

void OAIEventSubscription::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_event_type_id_isSet = false;
    m_event_type_id_isValid = false;

    m_jms_isSet = false;
    m_jms_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscriber_isSet = false;
    m_subscriber_isValid = false;

    m_subscriber_link_isSet = false;
    m_subscriber_link_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIEventSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscription::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_event_type_id_isValid = ::OpenAPI::fromJsonValue(m_event_type_id, json[QString("eventTypeId")]);
    m_event_type_id_isSet = !json[QString("eventTypeId")].isNull() && m_event_type_id_isValid;

    m_jms_isValid = ::OpenAPI::fromJsonValue(m_jms, json[QString("jms")]);
    m_jms_isSet = !json[QString("jms")].isNull() && m_jms_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscriber_isValid = ::OpenAPI::fromJsonValue(m_subscriber, json[QString("subscriber")]);
    m_subscriber_isSet = !json[QString("subscriber")].isNull() && m_subscriber_isValid;

    m_subscriber_link_isValid = ::OpenAPI::fromJsonValue(m_subscriber_link, json[QString("subscriberLink")]);
    m_subscriber_link_isSet = !json[QString("subscriberLink")].isNull() && m_subscriber_link_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIEventSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_event_type_id_isSet) {
        obj.insert(QString("eventTypeId"), ::OpenAPI::toJsonValue(m_event_type_id));
    }
    if (m_jms.isSet()) {
        obj.insert(QString("jms"), ::OpenAPI::toJsonValue(m_jms));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscriber_isSet) {
        obj.insert(QString("subscriber"), ::OpenAPI::toJsonValue(m_subscriber));
    }
    if (m_subscriber_link_isSet) {
        obj.insert(QString("subscriberLink"), ::OpenAPI::toJsonValue(m_subscriber_link));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIEventSubscription::getCreateTime() const {
    return m_create_time;
}
void OAIEventSubscription::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEventSubscription::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEventSubscription::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIEventSubscriptionDestination OAIEventSubscription::getDestinations() const {
    return m_destinations;
}
void OAIEventSubscription::setDestinations(const OAIEventSubscriptionDestination &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIEventSubscription::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIEventSubscription::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIEventSubscription::getEventTypeId() const {
    return m_event_type_id;
}
void OAIEventSubscription::setEventTypeId(const QString &event_type_id) {
    m_event_type_id = event_type_id;
    m_event_type_id_isSet = true;
}

bool OAIEventSubscription::is_event_type_id_Set() const{
    return m_event_type_id_isSet;
}

bool OAIEventSubscription::is_event_type_id_Valid() const{
    return m_event_type_id_isValid;
}

OAIJMS OAIEventSubscription::getJms() const {
    return m_jms;
}
void OAIEventSubscription::setJms(const OAIJMS &jms) {
    m_jms = jms;
    m_jms_isSet = true;
}

bool OAIEventSubscription::is_jms_Set() const{
    return m_jms_isSet;
}

bool OAIEventSubscription::is_jms_Valid() const{
    return m_jms_isValid;
}

QString OAIEventSubscription::getName() const {
    return m_name;
}
void OAIEventSubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventSubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventSubscription::is_name_Valid() const{
    return m_name_isValid;
}

OAIEventSubscriptionStatus OAIEventSubscription::getStatus() const {
    return m_status;
}
void OAIEventSubscription::setStatus(const OAIEventSubscriptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventSubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventSubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEventSubscription::getSubscriber() const {
    return m_subscriber;
}
void OAIEventSubscription::setSubscriber(const QString &subscriber) {
    m_subscriber = subscriber;
    m_subscriber_isSet = true;
}

bool OAIEventSubscription::is_subscriber_Set() const{
    return m_subscriber_isSet;
}

bool OAIEventSubscription::is_subscriber_Valid() const{
    return m_subscriber_isValid;
}

QString OAIEventSubscription::getSubscriberLink() const {
    return m_subscriber_link;
}
void OAIEventSubscription::setSubscriberLink(const QString &subscriber_link) {
    m_subscriber_link = subscriber_link;
    m_subscriber_link_isSet = true;
}

bool OAIEventSubscription::is_subscriber_link_Set() const{
    return m_subscriber_link_isSet;
}

bool OAIEventSubscription::is_subscriber_link_Valid() const{
    return m_subscriber_link_isValid;
}

QString OAIEventSubscription::getUpdateTime() const {
    return m_update_time;
}
void OAIEventSubscription::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEventSubscription::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEventSubscription::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIEventSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
