/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigVariableTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigVariableTemplate::OAIConfigVariableTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigVariableTemplate::OAIConfigVariableTemplate() {
    this->initializeModel();
}

OAIConfigVariableTemplate::~OAIConfigVariableTemplate() {}

void OAIConfigVariableTemplate::initializeModel() {

    m_authorization_code_link_isSet = false;
    m_authorization_code_link_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enum_options_isSet = false;
    m_enum_options_isValid = false;

    m_is_advanced_isSet = false;
    m_is_advanced_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_required_condition_isSet = false;
    m_required_condition_isValid = false;

    m_role_grant_isSet = false;
    m_role_grant_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_validation_regex_isSet = false;
    m_validation_regex_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAIConfigVariableTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigVariableTemplate::fromJsonObject(QJsonObject json) {

    m_authorization_code_link_isValid = ::OpenAPI::fromJsonValue(m_authorization_code_link, json[QString("authorizationCodeLink")]);
    m_authorization_code_link_isSet = !json[QString("authorizationCodeLink")].isNull() && m_authorization_code_link_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enum_options_isValid = ::OpenAPI::fromJsonValue(m_enum_options, json[QString("enumOptions")]);
    m_enum_options_isSet = !json[QString("enumOptions")].isNull() && m_enum_options_isValid;

    m_is_advanced_isValid = ::OpenAPI::fromJsonValue(m_is_advanced, json[QString("isAdvanced")]);
    m_is_advanced_isSet = !json[QString("isAdvanced")].isNull() && m_is_advanced_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_required_condition_isValid = ::OpenAPI::fromJsonValue(m_required_condition, json[QString("requiredCondition")]);
    m_required_condition_isSet = !json[QString("requiredCondition")].isNull() && m_required_condition_isValid;

    m_role_grant_isValid = ::OpenAPI::fromJsonValue(m_role_grant, json[QString("roleGrant")]);
    m_role_grant_isSet = !json[QString("roleGrant")].isNull() && m_role_grant_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_validation_regex_isValid = ::OpenAPI::fromJsonValue(m_validation_regex, json[QString("validationRegex")]);
    m_validation_regex_isSet = !json[QString("validationRegex")].isNull() && m_validation_regex_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAIConfigVariableTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigVariableTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_code_link.isSet()) {
        obj.insert(QString("authorizationCodeLink"), ::OpenAPI::toJsonValue(m_authorization_code_link));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enum_options.size() > 0) {
        obj.insert(QString("enumOptions"), ::OpenAPI::toJsonValue(m_enum_options));
    }
    if (m_is_advanced_isSet) {
        obj.insert(QString("isAdvanced"), ::OpenAPI::toJsonValue(m_is_advanced));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_required_condition.isSet()) {
        obj.insert(QString("requiredCondition"), ::OpenAPI::toJsonValue(m_required_condition));
    }
    if (m_role_grant.isSet()) {
        obj.insert(QString("roleGrant"), ::OpenAPI::toJsonValue(m_role_grant));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_validation_regex_isSet) {
        obj.insert(QString("validationRegex"), ::OpenAPI::toJsonValue(m_validation_regex));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

OAIAuthorizationCodeLink OAIConfigVariableTemplate::getAuthorizationCodeLink() const {
    return m_authorization_code_link;
}
void OAIConfigVariableTemplate::setAuthorizationCodeLink(const OAIAuthorizationCodeLink &authorization_code_link) {
    m_authorization_code_link = authorization_code_link;
    m_authorization_code_link_isSet = true;
}

bool OAIConfigVariableTemplate::is_authorization_code_link_Set() const{
    return m_authorization_code_link_isSet;
}

bool OAIConfigVariableTemplate::is_authorization_code_link_Valid() const{
    return m_authorization_code_link_isValid;
}

QString OAIConfigVariableTemplate::getDescription() const {
    return m_description;
}
void OAIConfigVariableTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfigVariableTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfigVariableTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConfigVariableTemplate::getDisplayName() const {
    return m_display_name;
}
void OAIConfigVariableTemplate::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConfigVariableTemplate::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConfigVariableTemplate::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIEnumOption> OAIConfigVariableTemplate::getEnumOptions() const {
    return m_enum_options;
}
void OAIConfigVariableTemplate::setEnumOptions(const QList<OAIEnumOption> &enum_options) {
    m_enum_options = enum_options;
    m_enum_options_isSet = true;
}

bool OAIConfigVariableTemplate::is_enum_options_Set() const{
    return m_enum_options_isSet;
}

bool OAIConfigVariableTemplate::is_enum_options_Valid() const{
    return m_enum_options_isValid;
}

bool OAIConfigVariableTemplate::isIsAdvanced() const {
    return m_is_advanced;
}
void OAIConfigVariableTemplate::setIsAdvanced(const bool &is_advanced) {
    m_is_advanced = is_advanced;
    m_is_advanced_isSet = true;
}

bool OAIConfigVariableTemplate::is_is_advanced_Set() const{
    return m_is_advanced_isSet;
}

bool OAIConfigVariableTemplate::is_is_advanced_Valid() const{
    return m_is_advanced_isValid;
}

QString OAIConfigVariableTemplate::getKey() const {
    return m_key;
}
void OAIConfigVariableTemplate::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIConfigVariableTemplate::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConfigVariableTemplate::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIConfigVariableTemplate::getLocationType() const {
    return m_location_type;
}
void OAIConfigVariableTemplate::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIConfigVariableTemplate::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIConfigVariableTemplate::is_location_type_Valid() const{
    return m_location_type_isValid;
}

bool OAIConfigVariableTemplate::isRequired() const {
    return m_required;
}
void OAIConfigVariableTemplate::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIConfigVariableTemplate::is_required_Set() const{
    return m_required_isSet;
}

bool OAIConfigVariableTemplate::is_required_Valid() const{
    return m_required_isValid;
}

OAILogicalExpression OAIConfigVariableTemplate::getRequiredCondition() const {
    return m_required_condition;
}
void OAIConfigVariableTemplate::setRequiredCondition(const OAILogicalExpression &required_condition) {
    m_required_condition = required_condition;
    m_required_condition_isSet = true;
}

bool OAIConfigVariableTemplate::is_required_condition_Set() const{
    return m_required_condition_isSet;
}

bool OAIConfigVariableTemplate::is_required_condition_Valid() const{
    return m_required_condition_isValid;
}

OAIRoleGrant OAIConfigVariableTemplate::getRoleGrant() const {
    return m_role_grant;
}
void OAIConfigVariableTemplate::setRoleGrant(const OAIRoleGrant &role_grant) {
    m_role_grant = role_grant;
    m_role_grant_isSet = true;
}

bool OAIConfigVariableTemplate::is_role_grant_Set() const{
    return m_role_grant_isSet;
}

bool OAIConfigVariableTemplate::is_role_grant_Valid() const{
    return m_role_grant_isValid;
}

QString OAIConfigVariableTemplate::getState() const {
    return m_state;
}
void OAIConfigVariableTemplate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConfigVariableTemplate::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConfigVariableTemplate::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConfigVariableTemplate::getValidationRegex() const {
    return m_validation_regex;
}
void OAIConfigVariableTemplate::setValidationRegex(const QString &validation_regex) {
    m_validation_regex = validation_regex;
    m_validation_regex_isSet = true;
}

bool OAIConfigVariableTemplate::is_validation_regex_Set() const{
    return m_validation_regex_isSet;
}

bool OAIConfigVariableTemplate::is_validation_regex_Valid() const{
    return m_validation_regex_isValid;
}

QString OAIConfigVariableTemplate::getValueType() const {
    return m_value_type;
}
void OAIConfigVariableTemplate::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIConfigVariableTemplate::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIConfigVariableTemplate::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAIConfigVariableTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_code_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_advanced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_grant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigVariableTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
