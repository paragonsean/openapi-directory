/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeConfig::OAIRuntimeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeConfig::OAIRuntimeConfig() {
    this->initializeModel();
}

OAIRuntimeConfig::~OAIRuntimeConfig() {}

void OAIRuntimeConfig::initializeModel() {

    m_connd_subscription_isSet = false;
    m_connd_subscription_isValid = false;

    m_connd_topic_isSet = false;
    m_connd_topic_isValid = false;

    m_control_plane_subscription_isSet = false;
    m_control_plane_subscription_isValid = false;

    m_control_plane_topic_isSet = false;
    m_control_plane_topic_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_endpoint_isSet = false;
    m_runtime_endpoint_isValid = false;

    m_schema_gcs_bucket_isSet = false;
    m_schema_gcs_bucket_isValid = false;

    m_service_directory_isSet = false;
    m_service_directory_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRuntimeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeConfig::fromJsonObject(QJsonObject json) {

    m_connd_subscription_isValid = ::OpenAPI::fromJsonValue(m_connd_subscription, json[QString("conndSubscription")]);
    m_connd_subscription_isSet = !json[QString("conndSubscription")].isNull() && m_connd_subscription_isValid;

    m_connd_topic_isValid = ::OpenAPI::fromJsonValue(m_connd_topic, json[QString("conndTopic")]);
    m_connd_topic_isSet = !json[QString("conndTopic")].isNull() && m_connd_topic_isValid;

    m_control_plane_subscription_isValid = ::OpenAPI::fromJsonValue(m_control_plane_subscription, json[QString("controlPlaneSubscription")]);
    m_control_plane_subscription_isSet = !json[QString("controlPlaneSubscription")].isNull() && m_control_plane_subscription_isValid;

    m_control_plane_topic_isValid = ::OpenAPI::fromJsonValue(m_control_plane_topic, json[QString("controlPlaneTopic")]);
    m_control_plane_topic_isSet = !json[QString("controlPlaneTopic")].isNull() && m_control_plane_topic_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_endpoint_isValid = ::OpenAPI::fromJsonValue(m_runtime_endpoint, json[QString("runtimeEndpoint")]);
    m_runtime_endpoint_isSet = !json[QString("runtimeEndpoint")].isNull() && m_runtime_endpoint_isValid;

    m_schema_gcs_bucket_isValid = ::OpenAPI::fromJsonValue(m_schema_gcs_bucket, json[QString("schemaGcsBucket")]);
    m_schema_gcs_bucket_isSet = !json[QString("schemaGcsBucket")].isNull() && m_schema_gcs_bucket_isValid;

    m_service_directory_isValid = ::OpenAPI::fromJsonValue(m_service_directory, json[QString("serviceDirectory")]);
    m_service_directory_isSet = !json[QString("serviceDirectory")].isNull() && m_service_directory_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIRuntimeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_connd_subscription_isSet) {
        obj.insert(QString("conndSubscription"), ::OpenAPI::toJsonValue(m_connd_subscription));
    }
    if (m_connd_topic_isSet) {
        obj.insert(QString("conndTopic"), ::OpenAPI::toJsonValue(m_connd_topic));
    }
    if (m_control_plane_subscription_isSet) {
        obj.insert(QString("controlPlaneSubscription"), ::OpenAPI::toJsonValue(m_control_plane_subscription));
    }
    if (m_control_plane_topic_isSet) {
        obj.insert(QString("controlPlaneTopic"), ::OpenAPI::toJsonValue(m_control_plane_topic));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_endpoint_isSet) {
        obj.insert(QString("runtimeEndpoint"), ::OpenAPI::toJsonValue(m_runtime_endpoint));
    }
    if (m_schema_gcs_bucket_isSet) {
        obj.insert(QString("schemaGcsBucket"), ::OpenAPI::toJsonValue(m_schema_gcs_bucket));
    }
    if (m_service_directory_isSet) {
        obj.insert(QString("serviceDirectory"), ::OpenAPI::toJsonValue(m_service_directory));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIRuntimeConfig::getConndSubscription() const {
    return m_connd_subscription;
}
void OAIRuntimeConfig::setConndSubscription(const QString &connd_subscription) {
    m_connd_subscription = connd_subscription;
    m_connd_subscription_isSet = true;
}

bool OAIRuntimeConfig::is_connd_subscription_Set() const{
    return m_connd_subscription_isSet;
}

bool OAIRuntimeConfig::is_connd_subscription_Valid() const{
    return m_connd_subscription_isValid;
}

QString OAIRuntimeConfig::getConndTopic() const {
    return m_connd_topic;
}
void OAIRuntimeConfig::setConndTopic(const QString &connd_topic) {
    m_connd_topic = connd_topic;
    m_connd_topic_isSet = true;
}

bool OAIRuntimeConfig::is_connd_topic_Set() const{
    return m_connd_topic_isSet;
}

bool OAIRuntimeConfig::is_connd_topic_Valid() const{
    return m_connd_topic_isValid;
}

QString OAIRuntimeConfig::getControlPlaneSubscription() const {
    return m_control_plane_subscription;
}
void OAIRuntimeConfig::setControlPlaneSubscription(const QString &control_plane_subscription) {
    m_control_plane_subscription = control_plane_subscription;
    m_control_plane_subscription_isSet = true;
}

bool OAIRuntimeConfig::is_control_plane_subscription_Set() const{
    return m_control_plane_subscription_isSet;
}

bool OAIRuntimeConfig::is_control_plane_subscription_Valid() const{
    return m_control_plane_subscription_isValid;
}

QString OAIRuntimeConfig::getControlPlaneTopic() const {
    return m_control_plane_topic;
}
void OAIRuntimeConfig::setControlPlaneTopic(const QString &control_plane_topic) {
    m_control_plane_topic = control_plane_topic;
    m_control_plane_topic_isSet = true;
}

bool OAIRuntimeConfig::is_control_plane_topic_Set() const{
    return m_control_plane_topic_isSet;
}

bool OAIRuntimeConfig::is_control_plane_topic_Valid() const{
    return m_control_plane_topic_isValid;
}

QString OAIRuntimeConfig::getLocationId() const {
    return m_location_id;
}
void OAIRuntimeConfig::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIRuntimeConfig::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIRuntimeConfig::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIRuntimeConfig::getName() const {
    return m_name;
}
void OAIRuntimeConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuntimeConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuntimeConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRuntimeConfig::getRuntimeEndpoint() const {
    return m_runtime_endpoint;
}
void OAIRuntimeConfig::setRuntimeEndpoint(const QString &runtime_endpoint) {
    m_runtime_endpoint = runtime_endpoint;
    m_runtime_endpoint_isSet = true;
}

bool OAIRuntimeConfig::is_runtime_endpoint_Set() const{
    return m_runtime_endpoint_isSet;
}

bool OAIRuntimeConfig::is_runtime_endpoint_Valid() const{
    return m_runtime_endpoint_isValid;
}

QString OAIRuntimeConfig::getSchemaGcsBucket() const {
    return m_schema_gcs_bucket;
}
void OAIRuntimeConfig::setSchemaGcsBucket(const QString &schema_gcs_bucket) {
    m_schema_gcs_bucket = schema_gcs_bucket;
    m_schema_gcs_bucket_isSet = true;
}

bool OAIRuntimeConfig::is_schema_gcs_bucket_Set() const{
    return m_schema_gcs_bucket_isSet;
}

bool OAIRuntimeConfig::is_schema_gcs_bucket_Valid() const{
    return m_schema_gcs_bucket_isValid;
}

QString OAIRuntimeConfig::getServiceDirectory() const {
    return m_service_directory;
}
void OAIRuntimeConfig::setServiceDirectory(const QString &service_directory) {
    m_service_directory = service_directory;
    m_service_directory_isSet = true;
}

bool OAIRuntimeConfig::is_service_directory_Set() const{
    return m_service_directory_isSet;
}

bool OAIRuntimeConfig::is_service_directory_Valid() const{
    return m_service_directory_isValid;
}

QString OAIRuntimeConfig::getState() const {
    return m_state;
}
void OAIRuntimeConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRuntimeConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRuntimeConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRuntimeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connd_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connd_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_gcs_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
