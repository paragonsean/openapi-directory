/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuthConfig.h
 *
 * AuthConfig defines details of a authentication type.
 */

#ifndef OAIAuthConfig_H
#define OAIAuthConfig_H

#include <QJsonObject>

#include "OAIConfigVariable.h"
#include "OAIOauth2AuthCodeFlow.h"
#include "OAIOauth2ClientCredentials.h"
#include "OAIOauth2JwtBearer.h"
#include "OAISshPublicKey.h"
#include "OAIUserPassword.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfigVariable;
class OAIOauth2AuthCodeFlow;
class OAIOauth2ClientCredentials;
class OAIOauth2JwtBearer;
class OAISshPublicKey;
class OAIUserPassword;

class OAIAuthConfig : public OAIObject {
public:
    OAIAuthConfig();
    OAIAuthConfig(QString json);
    ~OAIAuthConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIConfigVariable> getAdditionalVariables() const;
    void setAdditionalVariables(const QList<OAIConfigVariable> &additional_variables);
    bool is_additional_variables_Set() const;
    bool is_additional_variables_Valid() const;

    QString getAuthKey() const;
    void setAuthKey(const QString &auth_key);
    bool is_auth_key_Set() const;
    bool is_auth_key_Valid() const;

    QString getAuthType() const;
    void setAuthType(const QString &auth_type);
    bool is_auth_type_Set() const;
    bool is_auth_type_Valid() const;

    OAIOauth2AuthCodeFlow getOauth2AuthCodeFlow() const;
    void setOauth2AuthCodeFlow(const OAIOauth2AuthCodeFlow &oauth2_auth_code_flow);
    bool is_oauth2_auth_code_flow_Set() const;
    bool is_oauth2_auth_code_flow_Valid() const;

    OAIOauth2ClientCredentials getOauth2ClientCredentials() const;
    void setOauth2ClientCredentials(const OAIOauth2ClientCredentials &oauth2_client_credentials);
    bool is_oauth2_client_credentials_Set() const;
    bool is_oauth2_client_credentials_Valid() const;

    OAIOauth2JwtBearer getOauth2JwtBearer() const;
    void setOauth2JwtBearer(const OAIOauth2JwtBearer &oauth2_jwt_bearer);
    bool is_oauth2_jwt_bearer_Set() const;
    bool is_oauth2_jwt_bearer_Valid() const;

    OAISshPublicKey getSshPublicKey() const;
    void setSshPublicKey(const OAISshPublicKey &ssh_public_key);
    bool is_ssh_public_key_Set() const;
    bool is_ssh_public_key_Valid() const;

    OAIUserPassword getUserPassword() const;
    void setUserPassword(const OAIUserPassword &user_password);
    bool is_user_password_Set() const;
    bool is_user_password_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIConfigVariable> m_additional_variables;
    bool m_additional_variables_isSet;
    bool m_additional_variables_isValid;

    QString m_auth_key;
    bool m_auth_key_isSet;
    bool m_auth_key_isValid;

    QString m_auth_type;
    bool m_auth_type_isSet;
    bool m_auth_type_isValid;

    OAIOauth2AuthCodeFlow m_oauth2_auth_code_flow;
    bool m_oauth2_auth_code_flow_isSet;
    bool m_oauth2_auth_code_flow_isValid;

    OAIOauth2ClientCredentials m_oauth2_client_credentials;
    bool m_oauth2_client_credentials_isSet;
    bool m_oauth2_client_credentials_isValid;

    OAIOauth2JwtBearer m_oauth2_jwt_bearer;
    bool m_oauth2_jwt_bearer_isSet;
    bool m_oauth2_jwt_bearer_isValid;

    OAISshPublicKey m_ssh_public_key;
    bool m_ssh_public_key_isSet;
    bool m_ssh_public_key_isValid;

    OAIUserPassword m_user_password;
    bool m_user_password_isSet;
    bool m_user_password_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuthConfig)

#endif // OAIAuthConfig_H
