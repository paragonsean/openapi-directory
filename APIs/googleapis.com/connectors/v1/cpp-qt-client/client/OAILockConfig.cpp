/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILockConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILockConfig::OAILockConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILockConfig::OAILockConfig() {
    this->initializeModel();
}

OAILockConfig::~OAILockConfig() {}

void OAILockConfig::initializeModel() {

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAILockConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILockConfig::fromJsonObject(QJsonObject json) {

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAILockConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILockConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

bool OAILockConfig::isLocked() const {
    return m_locked;
}
void OAILockConfig::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAILockConfig::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAILockConfig::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAILockConfig::getReason() const {
    return m_reason;
}
void OAILockConfig::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILockConfig::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILockConfig::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAILockConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILockConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
