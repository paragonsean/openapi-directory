/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthConfigTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthConfigTemplate::OAIAuthConfigTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthConfigTemplate::OAIAuthConfigTemplate() {
    this->initializeModel();
}

OAIAuthConfigTemplate::~OAIAuthConfigTemplate() {}

void OAIAuthConfigTemplate::initializeModel() {

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_config_variable_templates_isSet = false;
    m_config_variable_templates_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIAuthConfigTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthConfigTemplate::fromJsonObject(QJsonObject json) {

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("authKey")]);
    m_auth_key_isSet = !json[QString("authKey")].isNull() && m_auth_key_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_config_variable_templates_isValid = ::OpenAPI::fromJsonValue(m_config_variable_templates, json[QString("configVariableTemplates")]);
    m_config_variable_templates_isSet = !json[QString("configVariableTemplates")].isNull() && m_config_variable_templates_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;
}

QString OAIAuthConfigTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthConfigTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_key_isSet) {
        obj.insert(QString("authKey"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_config_variable_templates.size() > 0) {
        obj.insert(QString("configVariableTemplates"), ::OpenAPI::toJsonValue(m_config_variable_templates));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

QString OAIAuthConfigTemplate::getAuthKey() const {
    return m_auth_key;
}
void OAIAuthConfigTemplate::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIAuthConfigTemplate::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIAuthConfigTemplate::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

QString OAIAuthConfigTemplate::getAuthType() const {
    return m_auth_type;
}
void OAIAuthConfigTemplate::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIAuthConfigTemplate::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIAuthConfigTemplate::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QList<OAIConfigVariableTemplate> OAIAuthConfigTemplate::getConfigVariableTemplates() const {
    return m_config_variable_templates;
}
void OAIAuthConfigTemplate::setConfigVariableTemplates(const QList<OAIConfigVariableTemplate> &config_variable_templates) {
    m_config_variable_templates = config_variable_templates;
    m_config_variable_templates_isSet = true;
}

bool OAIAuthConfigTemplate::is_config_variable_templates_Set() const{
    return m_config_variable_templates_isSet;
}

bool OAIAuthConfigTemplate::is_config_variable_templates_Valid() const{
    return m_config_variable_templates_isValid;
}

QString OAIAuthConfigTemplate::getDescription() const {
    return m_description;
}
void OAIAuthConfigTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthConfigTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthConfigTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthConfigTemplate::getDisplayName() const {
    return m_display_name;
}
void OAIAuthConfigTemplate::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAuthConfigTemplate::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAuthConfigTemplate::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIAuthConfigTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_variable_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthConfigTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
