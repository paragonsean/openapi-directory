/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventingDetails::OAIEventingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventingDetails::OAIEventingDetails() {
    this->initializeModel();
}

OAIEventingDetails::~OAIEventingDetails() {}

void OAIEventingDetails::initializeModel() {

    m_custom_event_types_isSet = false;
    m_custom_event_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_documentation_link_isSet = false;
    m_documentation_link_isValid = false;

    m_icon_location_isSet = false;
    m_icon_location_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_search_tags_isSet = false;
    m_search_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventingDetails::fromJsonObject(QJsonObject json) {

    m_custom_event_types_isValid = ::OpenAPI::fromJsonValue(m_custom_event_types, json[QString("customEventTypes")]);
    m_custom_event_types_isSet = !json[QString("customEventTypes")].isNull() && m_custom_event_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_documentation_link_isValid = ::OpenAPI::fromJsonValue(m_documentation_link, json[QString("documentationLink")]);
    m_documentation_link_isSet = !json[QString("documentationLink")].isNull() && m_documentation_link_isValid;

    m_icon_location_isValid = ::OpenAPI::fromJsonValue(m_icon_location, json[QString("iconLocation")]);
    m_icon_location_isSet = !json[QString("iconLocation")].isNull() && m_icon_location_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_search_tags_isValid = ::OpenAPI::fromJsonValue(m_search_tags, json[QString("searchTags")]);
    m_search_tags_isSet = !json[QString("searchTags")].isNull() && m_search_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_event_types_isSet) {
        obj.insert(QString("customEventTypes"), ::OpenAPI::toJsonValue(m_custom_event_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_documentation_link_isSet) {
        obj.insert(QString("documentationLink"), ::OpenAPI::toJsonValue(m_documentation_link));
    }
    if (m_icon_location_isSet) {
        obj.insert(QString("iconLocation"), ::OpenAPI::toJsonValue(m_icon_location));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_search_tags.size() > 0) {
        obj.insert(QString("searchTags"), ::OpenAPI::toJsonValue(m_search_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIEventingDetails::isCustomEventTypes() const {
    return m_custom_event_types;
}
void OAIEventingDetails::setCustomEventTypes(const bool &custom_event_types) {
    m_custom_event_types = custom_event_types;
    m_custom_event_types_isSet = true;
}

bool OAIEventingDetails::is_custom_event_types_Set() const{
    return m_custom_event_types_isSet;
}

bool OAIEventingDetails::is_custom_event_types_Valid() const{
    return m_custom_event_types_isValid;
}

QString OAIEventingDetails::getDescription() const {
    return m_description;
}
void OAIEventingDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventingDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventingDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventingDetails::getDocumentationLink() const {
    return m_documentation_link;
}
void OAIEventingDetails::setDocumentationLink(const QString &documentation_link) {
    m_documentation_link = documentation_link;
    m_documentation_link_isSet = true;
}

bool OAIEventingDetails::is_documentation_link_Set() const{
    return m_documentation_link_isSet;
}

bool OAIEventingDetails::is_documentation_link_Valid() const{
    return m_documentation_link_isValid;
}

QString OAIEventingDetails::getIconLocation() const {
    return m_icon_location;
}
void OAIEventingDetails::setIconLocation(const QString &icon_location) {
    m_icon_location = icon_location;
    m_icon_location_isSet = true;
}

bool OAIEventingDetails::is_icon_location_Set() const{
    return m_icon_location_isSet;
}

bool OAIEventingDetails::is_icon_location_Valid() const{
    return m_icon_location_isValid;
}

QString OAIEventingDetails::getLaunchStage() const {
    return m_launch_stage;
}
void OAIEventingDetails::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIEventingDetails::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIEventingDetails::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIEventingDetails::getName() const {
    return m_name;
}
void OAIEventingDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventingDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventingDetails::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIEventingDetails::getSearchTags() const {
    return m_search_tags;
}
void OAIEventingDetails::setSearchTags(const QList<QString> &search_tags) {
    m_search_tags = search_tags;
    m_search_tags_isSet = true;
}

bool OAIEventingDetails::is_search_tags_Set() const{
    return m_search_tags_isSet;
}

bool OAIEventingDetails::is_search_tags_Valid() const{
    return m_search_tags_isValid;
}

QString OAIEventingDetails::getType() const {
    return m_type;
}
void OAIEventingDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventingDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventingDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_event_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
