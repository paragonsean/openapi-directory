/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventingConfig::OAIEventingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventingConfig::OAIEventingConfig() {
    this->initializeModel();
}

OAIEventingConfig::~OAIEventingConfig() {}

void OAIEventingConfig::initializeModel() {

    m_additional_variables_isSet = false;
    m_additional_variables_isValid = false;

    m_auth_config_isSet = false;
    m_auth_config_isValid = false;

    m_dead_letter_config_isSet = false;
    m_dead_letter_config_isValid = false;

    m_enrichment_enabled_isSet = false;
    m_enrichment_enabled_isValid = false;

    m_events_listener_ingress_endpoint_isSet = false;
    m_events_listener_ingress_endpoint_isValid = false;

    m_listener_auth_config_isSet = false;
    m_listener_auth_config_isValid = false;

    m_private_connectivity_enabled_isSet = false;
    m_private_connectivity_enabled_isValid = false;

    m_proxy_destination_config_isSet = false;
    m_proxy_destination_config_isValid = false;

    m_registration_destination_config_isSet = false;
    m_registration_destination_config_isValid = false;

    m_trigger_config_variables_isSet = false;
    m_trigger_config_variables_isValid = false;
}

void OAIEventingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventingConfig::fromJsonObject(QJsonObject json) {

    m_additional_variables_isValid = ::OpenAPI::fromJsonValue(m_additional_variables, json[QString("additionalVariables")]);
    m_additional_variables_isSet = !json[QString("additionalVariables")].isNull() && m_additional_variables_isValid;

    m_auth_config_isValid = ::OpenAPI::fromJsonValue(m_auth_config, json[QString("authConfig")]);
    m_auth_config_isSet = !json[QString("authConfig")].isNull() && m_auth_config_isValid;

    m_dead_letter_config_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_config, json[QString("deadLetterConfig")]);
    m_dead_letter_config_isSet = !json[QString("deadLetterConfig")].isNull() && m_dead_letter_config_isValid;

    m_enrichment_enabled_isValid = ::OpenAPI::fromJsonValue(m_enrichment_enabled, json[QString("enrichmentEnabled")]);
    m_enrichment_enabled_isSet = !json[QString("enrichmentEnabled")].isNull() && m_enrichment_enabled_isValid;

    m_events_listener_ingress_endpoint_isValid = ::OpenAPI::fromJsonValue(m_events_listener_ingress_endpoint, json[QString("eventsListenerIngressEndpoint")]);
    m_events_listener_ingress_endpoint_isSet = !json[QString("eventsListenerIngressEndpoint")].isNull() && m_events_listener_ingress_endpoint_isValid;

    m_listener_auth_config_isValid = ::OpenAPI::fromJsonValue(m_listener_auth_config, json[QString("listenerAuthConfig")]);
    m_listener_auth_config_isSet = !json[QString("listenerAuthConfig")].isNull() && m_listener_auth_config_isValid;

    m_private_connectivity_enabled_isValid = ::OpenAPI::fromJsonValue(m_private_connectivity_enabled, json[QString("privateConnectivityEnabled")]);
    m_private_connectivity_enabled_isSet = !json[QString("privateConnectivityEnabled")].isNull() && m_private_connectivity_enabled_isValid;

    m_proxy_destination_config_isValid = ::OpenAPI::fromJsonValue(m_proxy_destination_config, json[QString("proxyDestinationConfig")]);
    m_proxy_destination_config_isSet = !json[QString("proxyDestinationConfig")].isNull() && m_proxy_destination_config_isValid;

    m_registration_destination_config_isValid = ::OpenAPI::fromJsonValue(m_registration_destination_config, json[QString("registrationDestinationConfig")]);
    m_registration_destination_config_isSet = !json[QString("registrationDestinationConfig")].isNull() && m_registration_destination_config_isValid;

    m_trigger_config_variables_isValid = ::OpenAPI::fromJsonValue(m_trigger_config_variables, json[QString("triggerConfigVariables")]);
    m_trigger_config_variables_isSet = !json[QString("triggerConfigVariables")].isNull() && m_trigger_config_variables_isValid;
}

QString OAIEventingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_variables.size() > 0) {
        obj.insert(QString("additionalVariables"), ::OpenAPI::toJsonValue(m_additional_variables));
    }
    if (m_auth_config.isSet()) {
        obj.insert(QString("authConfig"), ::OpenAPI::toJsonValue(m_auth_config));
    }
    if (m_dead_letter_config.isSet()) {
        obj.insert(QString("deadLetterConfig"), ::OpenAPI::toJsonValue(m_dead_letter_config));
    }
    if (m_enrichment_enabled_isSet) {
        obj.insert(QString("enrichmentEnabled"), ::OpenAPI::toJsonValue(m_enrichment_enabled));
    }
    if (m_events_listener_ingress_endpoint_isSet) {
        obj.insert(QString("eventsListenerIngressEndpoint"), ::OpenAPI::toJsonValue(m_events_listener_ingress_endpoint));
    }
    if (m_listener_auth_config.isSet()) {
        obj.insert(QString("listenerAuthConfig"), ::OpenAPI::toJsonValue(m_listener_auth_config));
    }
    if (m_private_connectivity_enabled_isSet) {
        obj.insert(QString("privateConnectivityEnabled"), ::OpenAPI::toJsonValue(m_private_connectivity_enabled));
    }
    if (m_proxy_destination_config.isSet()) {
        obj.insert(QString("proxyDestinationConfig"), ::OpenAPI::toJsonValue(m_proxy_destination_config));
    }
    if (m_registration_destination_config.isSet()) {
        obj.insert(QString("registrationDestinationConfig"), ::OpenAPI::toJsonValue(m_registration_destination_config));
    }
    if (m_trigger_config_variables.size() > 0) {
        obj.insert(QString("triggerConfigVariables"), ::OpenAPI::toJsonValue(m_trigger_config_variables));
    }
    return obj;
}

QList<OAIConfigVariable> OAIEventingConfig::getAdditionalVariables() const {
    return m_additional_variables;
}
void OAIEventingConfig::setAdditionalVariables(const QList<OAIConfigVariable> &additional_variables) {
    m_additional_variables = additional_variables;
    m_additional_variables_isSet = true;
}

bool OAIEventingConfig::is_additional_variables_Set() const{
    return m_additional_variables_isSet;
}

bool OAIEventingConfig::is_additional_variables_Valid() const{
    return m_additional_variables_isValid;
}

OAIAuthConfig OAIEventingConfig::getAuthConfig() const {
    return m_auth_config;
}
void OAIEventingConfig::setAuthConfig(const OAIAuthConfig &auth_config) {
    m_auth_config = auth_config;
    m_auth_config_isSet = true;
}

bool OAIEventingConfig::is_auth_config_Set() const{
    return m_auth_config_isSet;
}

bool OAIEventingConfig::is_auth_config_Valid() const{
    return m_auth_config_isValid;
}

OAIDeadLetterConfig OAIEventingConfig::getDeadLetterConfig() const {
    return m_dead_letter_config;
}
void OAIEventingConfig::setDeadLetterConfig(const OAIDeadLetterConfig &dead_letter_config) {
    m_dead_letter_config = dead_letter_config;
    m_dead_letter_config_isSet = true;
}

bool OAIEventingConfig::is_dead_letter_config_Set() const{
    return m_dead_letter_config_isSet;
}

bool OAIEventingConfig::is_dead_letter_config_Valid() const{
    return m_dead_letter_config_isValid;
}

bool OAIEventingConfig::isEnrichmentEnabled() const {
    return m_enrichment_enabled;
}
void OAIEventingConfig::setEnrichmentEnabled(const bool &enrichment_enabled) {
    m_enrichment_enabled = enrichment_enabled;
    m_enrichment_enabled_isSet = true;
}

bool OAIEventingConfig::is_enrichment_enabled_Set() const{
    return m_enrichment_enabled_isSet;
}

bool OAIEventingConfig::is_enrichment_enabled_Valid() const{
    return m_enrichment_enabled_isValid;
}

QString OAIEventingConfig::getEventsListenerIngressEndpoint() const {
    return m_events_listener_ingress_endpoint;
}
void OAIEventingConfig::setEventsListenerIngressEndpoint(const QString &events_listener_ingress_endpoint) {
    m_events_listener_ingress_endpoint = events_listener_ingress_endpoint;
    m_events_listener_ingress_endpoint_isSet = true;
}

bool OAIEventingConfig::is_events_listener_ingress_endpoint_Set() const{
    return m_events_listener_ingress_endpoint_isSet;
}

bool OAIEventingConfig::is_events_listener_ingress_endpoint_Valid() const{
    return m_events_listener_ingress_endpoint_isValid;
}

OAIAuthConfig OAIEventingConfig::getListenerAuthConfig() const {
    return m_listener_auth_config;
}
void OAIEventingConfig::setListenerAuthConfig(const OAIAuthConfig &listener_auth_config) {
    m_listener_auth_config = listener_auth_config;
    m_listener_auth_config_isSet = true;
}

bool OAIEventingConfig::is_listener_auth_config_Set() const{
    return m_listener_auth_config_isSet;
}

bool OAIEventingConfig::is_listener_auth_config_Valid() const{
    return m_listener_auth_config_isValid;
}

bool OAIEventingConfig::isPrivateConnectivityEnabled() const {
    return m_private_connectivity_enabled;
}
void OAIEventingConfig::setPrivateConnectivityEnabled(const bool &private_connectivity_enabled) {
    m_private_connectivity_enabled = private_connectivity_enabled;
    m_private_connectivity_enabled_isSet = true;
}

bool OAIEventingConfig::is_private_connectivity_enabled_Set() const{
    return m_private_connectivity_enabled_isSet;
}

bool OAIEventingConfig::is_private_connectivity_enabled_Valid() const{
    return m_private_connectivity_enabled_isValid;
}

OAIDestinationConfig OAIEventingConfig::getProxyDestinationConfig() const {
    return m_proxy_destination_config;
}
void OAIEventingConfig::setProxyDestinationConfig(const OAIDestinationConfig &proxy_destination_config) {
    m_proxy_destination_config = proxy_destination_config;
    m_proxy_destination_config_isSet = true;
}

bool OAIEventingConfig::is_proxy_destination_config_Set() const{
    return m_proxy_destination_config_isSet;
}

bool OAIEventingConfig::is_proxy_destination_config_Valid() const{
    return m_proxy_destination_config_isValid;
}

OAIDestinationConfig OAIEventingConfig::getRegistrationDestinationConfig() const {
    return m_registration_destination_config;
}
void OAIEventingConfig::setRegistrationDestinationConfig(const OAIDestinationConfig &registration_destination_config) {
    m_registration_destination_config = registration_destination_config;
    m_registration_destination_config_isSet = true;
}

bool OAIEventingConfig::is_registration_destination_config_Set() const{
    return m_registration_destination_config_isSet;
}

bool OAIEventingConfig::is_registration_destination_config_Valid() const{
    return m_registration_destination_config_isValid;
}

QList<OAIConfigVariable> OAIEventingConfig::getTriggerConfigVariables() const {
    return m_trigger_config_variables;
}
void OAIEventingConfig::setTriggerConfigVariables(const QList<OAIConfigVariable> &trigger_config_variables) {
    m_trigger_config_variables = trigger_config_variables;
    m_trigger_config_variables_isSet = true;
}

bool OAIEventingConfig::is_trigger_config_variables_Set() const{
    return m_trigger_config_variables_isSet;
}

bool OAIEventingConfig::is_trigger_config_variables_Valid() const{
    return m_trigger_config_variables_isValid;
}

bool OAIEventingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrichment_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_listener_ingress_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_auth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_connectivity_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_config_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
