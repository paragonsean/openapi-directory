/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISshPublicKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISshPublicKey::OAISshPublicKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISshPublicKey::OAISshPublicKey() {
    this->initializeModel();
}

OAISshPublicKey::~OAISshPublicKey() {}

void OAISshPublicKey::initializeModel() {

    m_cert_type_isSet = false;
    m_cert_type_isValid = false;

    m_ssh_client_cert_isSet = false;
    m_ssh_client_cert_isValid = false;

    m_ssh_client_cert_pass_isSet = false;
    m_ssh_client_cert_pass_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISshPublicKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISshPublicKey::fromJsonObject(QJsonObject json) {

    m_cert_type_isValid = ::OpenAPI::fromJsonValue(m_cert_type, json[QString("certType")]);
    m_cert_type_isSet = !json[QString("certType")].isNull() && m_cert_type_isValid;

    m_ssh_client_cert_isValid = ::OpenAPI::fromJsonValue(m_ssh_client_cert, json[QString("sshClientCert")]);
    m_ssh_client_cert_isSet = !json[QString("sshClientCert")].isNull() && m_ssh_client_cert_isValid;

    m_ssh_client_cert_pass_isValid = ::OpenAPI::fromJsonValue(m_ssh_client_cert_pass, json[QString("sshClientCertPass")]);
    m_ssh_client_cert_pass_isSet = !json[QString("sshClientCertPass")].isNull() && m_ssh_client_cert_pass_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISshPublicKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISshPublicKey::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_type_isSet) {
        obj.insert(QString("certType"), ::OpenAPI::toJsonValue(m_cert_type));
    }
    if (m_ssh_client_cert.isSet()) {
        obj.insert(QString("sshClientCert"), ::OpenAPI::toJsonValue(m_ssh_client_cert));
    }
    if (m_ssh_client_cert_pass.isSet()) {
        obj.insert(QString("sshClientCertPass"), ::OpenAPI::toJsonValue(m_ssh_client_cert_pass));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISshPublicKey::getCertType() const {
    return m_cert_type;
}
void OAISshPublicKey::setCertType(const QString &cert_type) {
    m_cert_type = cert_type;
    m_cert_type_isSet = true;
}

bool OAISshPublicKey::is_cert_type_Set() const{
    return m_cert_type_isSet;
}

bool OAISshPublicKey::is_cert_type_Valid() const{
    return m_cert_type_isValid;
}

OAISecret OAISshPublicKey::getSshClientCert() const {
    return m_ssh_client_cert;
}
void OAISshPublicKey::setSshClientCert(const OAISecret &ssh_client_cert) {
    m_ssh_client_cert = ssh_client_cert;
    m_ssh_client_cert_isSet = true;
}

bool OAISshPublicKey::is_ssh_client_cert_Set() const{
    return m_ssh_client_cert_isSet;
}

bool OAISshPublicKey::is_ssh_client_cert_Valid() const{
    return m_ssh_client_cert_isValid;
}

OAISecret OAISshPublicKey::getSshClientCertPass() const {
    return m_ssh_client_cert_pass;
}
void OAISshPublicKey::setSshClientCertPass(const OAISecret &ssh_client_cert_pass) {
    m_ssh_client_cert_pass = ssh_client_cert_pass;
    m_ssh_client_cert_pass_isSet = true;
}

bool OAISshPublicKey::is_ssh_client_cert_pass_Set() const{
    return m_ssh_client_cert_pass_isSet;
}

bool OAISshPublicKey::is_ssh_client_cert_pass_Valid() const{
    return m_ssh_client_cert_pass_isValid;
}

QString OAISshPublicKey::getUsername() const {
    return m_username;
}
void OAISshPublicKey::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISshPublicKey::is_username_Set() const{
    return m_username_isSet;
}

bool OAISshPublicKey::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISshPublicKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_client_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_client_cert_pass.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISshPublicKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
