/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslConfigTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslConfigTemplate::OAISslConfigTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslConfigTemplate::OAISslConfigTemplate() {
    this->initializeModel();
}

OAISslConfigTemplate::~OAISslConfigTemplate() {}

void OAISslConfigTemplate::initializeModel() {

    m_additional_variables_isSet = false;
    m_additional_variables_isValid = false;

    m_client_cert_type_isSet = false;
    m_client_cert_type_isValid = false;

    m_is_tls_mandatory_isSet = false;
    m_is_tls_mandatory_isValid = false;

    m_server_cert_type_isSet = false;
    m_server_cert_type_isValid = false;

    m_ssl_type_isSet = false;
    m_ssl_type_isValid = false;
}

void OAISslConfigTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslConfigTemplate::fromJsonObject(QJsonObject json) {

    m_additional_variables_isValid = ::OpenAPI::fromJsonValue(m_additional_variables, json[QString("additionalVariables")]);
    m_additional_variables_isSet = !json[QString("additionalVariables")].isNull() && m_additional_variables_isValid;

    m_client_cert_type_isValid = ::OpenAPI::fromJsonValue(m_client_cert_type, json[QString("clientCertType")]);
    m_client_cert_type_isSet = !json[QString("clientCertType")].isNull() && m_client_cert_type_isValid;

    m_is_tls_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_tls_mandatory, json[QString("isTlsMandatory")]);
    m_is_tls_mandatory_isSet = !json[QString("isTlsMandatory")].isNull() && m_is_tls_mandatory_isValid;

    m_server_cert_type_isValid = ::OpenAPI::fromJsonValue(m_server_cert_type, json[QString("serverCertType")]);
    m_server_cert_type_isSet = !json[QString("serverCertType")].isNull() && m_server_cert_type_isValid;

    m_ssl_type_isValid = ::OpenAPI::fromJsonValue(m_ssl_type, json[QString("sslType")]);
    m_ssl_type_isSet = !json[QString("sslType")].isNull() && m_ssl_type_isValid;
}

QString OAISslConfigTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslConfigTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_variables.size() > 0) {
        obj.insert(QString("additionalVariables"), ::OpenAPI::toJsonValue(m_additional_variables));
    }
    if (m_client_cert_type.size() > 0) {
        obj.insert(QString("clientCertType"), ::OpenAPI::toJsonValue(m_client_cert_type));
    }
    if (m_is_tls_mandatory_isSet) {
        obj.insert(QString("isTlsMandatory"), ::OpenAPI::toJsonValue(m_is_tls_mandatory));
    }
    if (m_server_cert_type.size() > 0) {
        obj.insert(QString("serverCertType"), ::OpenAPI::toJsonValue(m_server_cert_type));
    }
    if (m_ssl_type_isSet) {
        obj.insert(QString("sslType"), ::OpenAPI::toJsonValue(m_ssl_type));
    }
    return obj;
}

QList<OAIConfigVariableTemplate> OAISslConfigTemplate::getAdditionalVariables() const {
    return m_additional_variables;
}
void OAISslConfigTemplate::setAdditionalVariables(const QList<OAIConfigVariableTemplate> &additional_variables) {
    m_additional_variables = additional_variables;
    m_additional_variables_isSet = true;
}

bool OAISslConfigTemplate::is_additional_variables_Set() const{
    return m_additional_variables_isSet;
}

bool OAISslConfigTemplate::is_additional_variables_Valid() const{
    return m_additional_variables_isValid;
}

QList<QString> OAISslConfigTemplate::getClientCertType() const {
    return m_client_cert_type;
}
void OAISslConfigTemplate::setClientCertType(const QList<QString> &client_cert_type) {
    m_client_cert_type = client_cert_type;
    m_client_cert_type_isSet = true;
}

bool OAISslConfigTemplate::is_client_cert_type_Set() const{
    return m_client_cert_type_isSet;
}

bool OAISslConfigTemplate::is_client_cert_type_Valid() const{
    return m_client_cert_type_isValid;
}

bool OAISslConfigTemplate::isIsTlsMandatory() const {
    return m_is_tls_mandatory;
}
void OAISslConfigTemplate::setIsTlsMandatory(const bool &is_tls_mandatory) {
    m_is_tls_mandatory = is_tls_mandatory;
    m_is_tls_mandatory_isSet = true;
}

bool OAISslConfigTemplate::is_is_tls_mandatory_Set() const{
    return m_is_tls_mandatory_isSet;
}

bool OAISslConfigTemplate::is_is_tls_mandatory_Valid() const{
    return m_is_tls_mandatory_isValid;
}

QList<QString> OAISslConfigTemplate::getServerCertType() const {
    return m_server_cert_type;
}
void OAISslConfigTemplate::setServerCertType(const QList<QString> &server_cert_type) {
    m_server_cert_type = server_cert_type;
    m_server_cert_type_isSet = true;
}

bool OAISslConfigTemplate::is_server_cert_type_Set() const{
    return m_server_cert_type_isSet;
}

bool OAISslConfigTemplate::is_server_cert_type_Valid() const{
    return m_server_cert_type_isValid;
}

QString OAISslConfigTemplate::getSslType() const {
    return m_ssl_type;
}
void OAISslConfigTemplate::setSslType(const QString &ssl_type) {
    m_ssl_type = ssl_type;
    m_ssl_type_isSet = true;
}

bool OAISslConfigTemplate::is_ssl_type_Set() const{
    return m_ssl_type_isSet;
}

bool OAISslConfigTemplate::is_ssl_type_Valid() const{
    return m_ssl_type_isValid;
}

bool OAISslConfigTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cert_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tls_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_cert_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslConfigTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
