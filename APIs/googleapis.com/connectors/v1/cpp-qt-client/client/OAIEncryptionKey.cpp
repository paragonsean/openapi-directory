/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionKey::OAIEncryptionKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionKey::OAIEncryptionKey() {
    this->initializeModel();
}

OAIEncryptionKey::~OAIEncryptionKey() {}

void OAIEncryptionKey::initializeModel() {

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEncryptionKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionKey::fromJsonObject(QJsonObject json) {

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEncryptionKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionKey::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEncryptionKey::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIEncryptionKey::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIEncryptionKey::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIEncryptionKey::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAIEncryptionKey::getType() const {
    return m_type;
}
void OAIEncryptionKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEncryptionKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEncryptionKey::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEncryptionKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
