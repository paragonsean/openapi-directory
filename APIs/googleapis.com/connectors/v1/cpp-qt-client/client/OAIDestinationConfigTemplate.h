/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationConfigTemplate.h
 *
 * DestinationConfigTemplate defines required destinations supported by the Connector.
 */

#ifndef OAIDestinationConfigTemplate_H
#define OAIDestinationConfigTemplate_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestinationConfigTemplate : public OAIObject {
public:
    OAIDestinationConfigTemplate();
    OAIDestinationConfigTemplate(QString json);
    ~OAIDestinationConfigTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDefaultPort() const;
    void setDefaultPort(const qint32 &default_port);
    bool is_default_port_Set() const;
    bool is_default_port_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isIsAdvanced() const;
    void setIsAdvanced(const bool &is_advanced);
    bool is_is_advanced_Set() const;
    bool is_is_advanced_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    qint32 getMax() const;
    void setMax(const qint32 &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    qint32 getMin() const;
    void setMin(const qint32 &min);
    bool is_min_Set() const;
    bool is_min_Valid() const;

    QString getPortFieldType() const;
    void setPortFieldType(const QString &port_field_type);
    bool is_port_field_type_Set() const;
    bool is_port_field_type_Valid() const;

    QString getRegexPattern() const;
    void setRegexPattern(const QString &regex_pattern);
    bool is_regex_pattern_Set() const;
    bool is_regex_pattern_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_default_port;
    bool m_default_port_isSet;
    bool m_default_port_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_is_advanced;
    bool m_is_advanced_isSet;
    bool m_is_advanced_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    qint32 m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    qint32 m_min;
    bool m_min_isSet;
    bool m_min_isValid;

    QString m_port_field_type;
    bool m_port_field_type_isSet;
    bool m_port_field_type_isValid;

    QString m_regex_pattern;
    bool m_regex_pattern_isSet;
    bool m_regex_pattern_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationConfigTemplate)

#endif // OAIDestinationConfigTemplate_H
