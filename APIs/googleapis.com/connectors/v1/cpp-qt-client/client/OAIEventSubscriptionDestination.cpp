/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscriptionDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscriptionDestination::OAIEventSubscriptionDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscriptionDestination::OAIEventSubscriptionDestination() {
    this->initializeModel();
}

OAIEventSubscriptionDestination::~OAIEventSubscriptionDestination() {}

void OAIEventSubscriptionDestination::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventSubscriptionDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscriptionDestination::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventSubscriptionDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscriptionDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIEndPoint OAIEventSubscriptionDestination::getEndpoint() const {
    return m_endpoint;
}
void OAIEventSubscriptionDestination::setEndpoint(const OAIEndPoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIEventSubscriptionDestination::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIEventSubscriptionDestination::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIEventSubscriptionDestination::getServiceAccount() const {
    return m_service_account;
}
void OAIEventSubscriptionDestination::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIEventSubscriptionDestination::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIEventSubscriptionDestination::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIEventSubscriptionDestination::getType() const {
    return m_type;
}
void OAIEventSubscriptionDestination::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventSubscriptionDestination::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventSubscriptionDestination::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventSubscriptionDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscriptionDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
