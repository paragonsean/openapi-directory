/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionSchemaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionSchemaMetadata::OAIConnectionSchemaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionSchemaMetadata::OAIConnectionSchemaMetadata() {
    this->initializeModel();
}

OAIConnectionSchemaMetadata::~OAIConnectionSchemaMetadata() {}

void OAIConnectionSchemaMetadata::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_refresh_time_isSet = false;
    m_refresh_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConnectionSchemaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionSchemaMetadata::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_refresh_time, json[QString("refreshTime")]);
    m_refresh_time_isSet = !json[QString("refreshTime")].isNull() && m_refresh_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConnectionSchemaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionSchemaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_refresh_time_isSet) {
        obj.insert(QString("refreshTime"), ::OpenAPI::toJsonValue(m_refresh_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAIConnectionSchemaMetadata::getActions() const {
    return m_actions;
}
void OAIConnectionSchemaMetadata::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIConnectionSchemaMetadata::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<QString> OAIConnectionSchemaMetadata::getEntities() const {
    return m_entities;
}
void OAIConnectionSchemaMetadata::setEntities(const QList<QString> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIConnectionSchemaMetadata::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIConnectionSchemaMetadata::getErrorMessage() const {
    return m_error_message;
}
void OAIConnectionSchemaMetadata::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIConnectionSchemaMetadata::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIConnectionSchemaMetadata::getName() const {
    return m_name;
}
void OAIConnectionSchemaMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionSchemaMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectionSchemaMetadata::getRefreshTime() const {
    return m_refresh_time;
}
void OAIConnectionSchemaMetadata::setRefreshTime(const QString &refresh_time) {
    m_refresh_time = refresh_time;
    m_refresh_time_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_refresh_time_Set() const{
    return m_refresh_time_isSet;
}

bool OAIConnectionSchemaMetadata::is_refresh_time_Valid() const{
    return m_refresh_time_isValid;
}

QString OAIConnectionSchemaMetadata::getState() const {
    return m_state;
}
void OAIConnectionSchemaMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnectionSchemaMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConnectionSchemaMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIConnectionSchemaMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConnectionSchemaMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConnectionSchemaMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConnectionSchemaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionSchemaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
