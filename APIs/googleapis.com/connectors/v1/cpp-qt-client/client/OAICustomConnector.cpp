/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomConnector::OAICustomConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomConnector::OAICustomConnector() {
    this->initializeModel();
}

OAICustomConnector::~OAICustomConnector() {}

void OAICustomConnector::initializeModel() {

    m_active_connector_versions_isSet = false;
    m_active_connector_versions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_connector_type_isSet = false;
    m_custom_connector_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICustomConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomConnector::fromJsonObject(QJsonObject json) {

    m_active_connector_versions_isValid = ::OpenAPI::fromJsonValue(m_active_connector_versions, json[QString("activeConnectorVersions")]);
    m_active_connector_versions_isSet = !json[QString("activeConnectorVersions")].isNull() && m_active_connector_versions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_connector_type_isValid = ::OpenAPI::fromJsonValue(m_custom_connector_type, json[QString("customConnectorType")]);
    m_custom_connector_type_isSet = !json[QString("customConnectorType")].isNull() && m_custom_connector_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICustomConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_active_connector_versions.size() > 0) {
        obj.insert(QString("activeConnectorVersions"), ::OpenAPI::toJsonValue(m_active_connector_versions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_connector_type_isSet) {
        obj.insert(QString("customConnectorType"), ::OpenAPI::toJsonValue(m_custom_connector_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAICustomConnector::getActiveConnectorVersions() const {
    return m_active_connector_versions;
}
void OAICustomConnector::setActiveConnectorVersions(const QList<QString> &active_connector_versions) {
    m_active_connector_versions = active_connector_versions;
    m_active_connector_versions_isSet = true;
}

bool OAICustomConnector::is_active_connector_versions_Set() const{
    return m_active_connector_versions_isSet;
}

bool OAICustomConnector::is_active_connector_versions_Valid() const{
    return m_active_connector_versions_isValid;
}

QString OAICustomConnector::getCreateTime() const {
    return m_create_time;
}
void OAICustomConnector::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICustomConnector::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICustomConnector::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICustomConnector::getCustomConnectorType() const {
    return m_custom_connector_type;
}
void OAICustomConnector::setCustomConnectorType(const QString &custom_connector_type) {
    m_custom_connector_type = custom_connector_type;
    m_custom_connector_type_isSet = true;
}

bool OAICustomConnector::is_custom_connector_type_Set() const{
    return m_custom_connector_type_isSet;
}

bool OAICustomConnector::is_custom_connector_type_Valid() const{
    return m_custom_connector_type_isValid;
}

QString OAICustomConnector::getDescription() const {
    return m_description;
}
void OAICustomConnector::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomConnector::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomConnector::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomConnector::getDisplayName() const {
    return m_display_name;
}
void OAICustomConnector::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICustomConnector::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICustomConnector::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAICustomConnector::getLabels() const {
    return m_labels;
}
void OAICustomConnector::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICustomConnector::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICustomConnector::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICustomConnector::getLogo() const {
    return m_logo;
}
void OAICustomConnector::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAICustomConnector::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAICustomConnector::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAICustomConnector::getName() const {
    return m_name;
}
void OAICustomConnector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomConnector::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomConnector::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomConnector::getUpdateTime() const {
    return m_update_time;
}
void OAICustomConnector::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICustomConnector::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICustomConnector::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICustomConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_connector_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_connector_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
