/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedZone::OAIManagedZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedZone::OAIManagedZone() {
    this->initializeModel();
}

OAIManagedZone::~OAIManagedZone() {}

void OAIManagedZone::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_target_project_isSet = false;
    m_target_project_isValid = false;

    m_target_vpc_isSet = false;
    m_target_vpc_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIManagedZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedZone::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("dns")]);
    m_dns_isSet = !json[QString("dns")].isNull() && m_dns_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_target_project_isValid = ::OpenAPI::fromJsonValue(m_target_project, json[QString("targetProject")]);
    m_target_project_isSet = !json[QString("targetProject")].isNull() && m_target_project_isValid;

    m_target_vpc_isValid = ::OpenAPI::fromJsonValue(m_target_vpc, json[QString("targetVpc")]);
    m_target_vpc_isSet = !json[QString("targetVpc")].isNull() && m_target_vpc_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIManagedZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedZone::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_isSet) {
        obj.insert(QString("dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_target_project_isSet) {
        obj.insert(QString("targetProject"), ::OpenAPI::toJsonValue(m_target_project));
    }
    if (m_target_vpc_isSet) {
        obj.insert(QString("targetVpc"), ::OpenAPI::toJsonValue(m_target_vpc));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIManagedZone::getCreateTime() const {
    return m_create_time;
}
void OAIManagedZone::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIManagedZone::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIManagedZone::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIManagedZone::getDescription() const {
    return m_description;
}
void OAIManagedZone::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIManagedZone::is_description_Set() const{
    return m_description_isSet;
}

bool OAIManagedZone::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIManagedZone::getDns() const {
    return m_dns;
}
void OAIManagedZone::setDns(const QString &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAIManagedZone::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAIManagedZone::is_dns_Valid() const{
    return m_dns_isValid;
}

QMap<QString, QString> OAIManagedZone::getLabels() const {
    return m_labels;
}
void OAIManagedZone::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIManagedZone::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIManagedZone::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIManagedZone::getName() const {
    return m_name;
}
void OAIManagedZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedZone::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedZone::getTargetProject() const {
    return m_target_project;
}
void OAIManagedZone::setTargetProject(const QString &target_project) {
    m_target_project = target_project;
    m_target_project_isSet = true;
}

bool OAIManagedZone::is_target_project_Set() const{
    return m_target_project_isSet;
}

bool OAIManagedZone::is_target_project_Valid() const{
    return m_target_project_isValid;
}

QString OAIManagedZone::getTargetVpc() const {
    return m_target_vpc;
}
void OAIManagedZone::setTargetVpc(const QString &target_vpc) {
    m_target_vpc = target_vpc;
    m_target_vpc_isSet = true;
}

bool OAIManagedZone::is_target_vpc_Set() const{
    return m_target_vpc_isSet;
}

bool OAIManagedZone::is_target_vpc_Valid() const{
    return m_target_vpc_isValid;
}

QString OAIManagedZone::getUpdateTime() const {
    return m_update_time;
}
void OAIManagedZone::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIManagedZone::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIManagedZone::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIManagedZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
