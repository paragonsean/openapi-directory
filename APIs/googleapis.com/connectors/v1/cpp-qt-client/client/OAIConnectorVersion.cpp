/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorVersion::OAIConnectorVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorVersion::OAIConnectorVersion() {
    this->initializeModel();
}

OAIConnectorVersion::~OAIConnectorVersion() {}

void OAIConnectorVersion::initializeModel() {

    m_auth_config_templates_isSet = false;
    m_auth_config_templates_isValid = false;

    m_config_variable_templates_isSet = false;
    m_config_variable_templates_isValid = false;

    m_connector_infra_config_isSet = false;
    m_connector_infra_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destination_config_templates_isSet = false;
    m_destination_config_templates_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_egress_control_config_isSet = false;
    m_egress_control_config_isValid = false;

    m_eventing_config_template_isSet = false;
    m_eventing_config_template_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_version_isSet = false;
    m_release_version_isValid = false;

    m_role_grant_isSet = false;
    m_role_grant_isValid = false;

    m_role_grants_isSet = false;
    m_role_grants_isValid = false;

    m_ssl_config_template_isSet = false;
    m_ssl_config_template_isValid = false;

    m_supported_runtime_features_isSet = false;
    m_supported_runtime_features_isValid = false;

    m_unsupported_connection_types_isSet = false;
    m_unsupported_connection_types_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConnectorVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorVersion::fromJsonObject(QJsonObject json) {

    m_auth_config_templates_isValid = ::OpenAPI::fromJsonValue(m_auth_config_templates, json[QString("authConfigTemplates")]);
    m_auth_config_templates_isSet = !json[QString("authConfigTemplates")].isNull() && m_auth_config_templates_isValid;

    m_config_variable_templates_isValid = ::OpenAPI::fromJsonValue(m_config_variable_templates, json[QString("configVariableTemplates")]);
    m_config_variable_templates_isSet = !json[QString("configVariableTemplates")].isNull() && m_config_variable_templates_isValid;

    m_connector_infra_config_isValid = ::OpenAPI::fromJsonValue(m_connector_infra_config, json[QString("connectorInfraConfig")]);
    m_connector_infra_config_isSet = !json[QString("connectorInfraConfig")].isNull() && m_connector_infra_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destination_config_templates_isValid = ::OpenAPI::fromJsonValue(m_destination_config_templates, json[QString("destinationConfigTemplates")]);
    m_destination_config_templates_isSet = !json[QString("destinationConfigTemplates")].isNull() && m_destination_config_templates_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_egress_control_config_isValid = ::OpenAPI::fromJsonValue(m_egress_control_config, json[QString("egressControlConfig")]);
    m_egress_control_config_isSet = !json[QString("egressControlConfig")].isNull() && m_egress_control_config_isValid;

    m_eventing_config_template_isValid = ::OpenAPI::fromJsonValue(m_eventing_config_template, json[QString("eventingConfigTemplate")]);
    m_eventing_config_template_isSet = !json[QString("eventingConfigTemplate")].isNull() && m_eventing_config_template_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_version_isValid = ::OpenAPI::fromJsonValue(m_release_version, json[QString("releaseVersion")]);
    m_release_version_isSet = !json[QString("releaseVersion")].isNull() && m_release_version_isValid;

    m_role_grant_isValid = ::OpenAPI::fromJsonValue(m_role_grant, json[QString("roleGrant")]);
    m_role_grant_isSet = !json[QString("roleGrant")].isNull() && m_role_grant_isValid;

    m_role_grants_isValid = ::OpenAPI::fromJsonValue(m_role_grants, json[QString("roleGrants")]);
    m_role_grants_isSet = !json[QString("roleGrants")].isNull() && m_role_grants_isValid;

    m_ssl_config_template_isValid = ::OpenAPI::fromJsonValue(m_ssl_config_template, json[QString("sslConfigTemplate")]);
    m_ssl_config_template_isSet = !json[QString("sslConfigTemplate")].isNull() && m_ssl_config_template_isValid;

    m_supported_runtime_features_isValid = ::OpenAPI::fromJsonValue(m_supported_runtime_features, json[QString("supportedRuntimeFeatures")]);
    m_supported_runtime_features_isSet = !json[QString("supportedRuntimeFeatures")].isNull() && m_supported_runtime_features_isValid;

    m_unsupported_connection_types_isValid = ::OpenAPI::fromJsonValue(m_unsupported_connection_types, json[QString("unsupportedConnectionTypes")]);
    m_unsupported_connection_types_isSet = !json[QString("unsupportedConnectionTypes")].isNull() && m_unsupported_connection_types_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConnectorVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_config_templates.size() > 0) {
        obj.insert(QString("authConfigTemplates"), ::OpenAPI::toJsonValue(m_auth_config_templates));
    }
    if (m_config_variable_templates.size() > 0) {
        obj.insert(QString("configVariableTemplates"), ::OpenAPI::toJsonValue(m_config_variable_templates));
    }
    if (m_connector_infra_config.isSet()) {
        obj.insert(QString("connectorInfraConfig"), ::OpenAPI::toJsonValue(m_connector_infra_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destination_config_templates.size() > 0) {
        obj.insert(QString("destinationConfigTemplates"), ::OpenAPI::toJsonValue(m_destination_config_templates));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_egress_control_config.isSet()) {
        obj.insert(QString("egressControlConfig"), ::OpenAPI::toJsonValue(m_egress_control_config));
    }
    if (m_eventing_config_template.isSet()) {
        obj.insert(QString("eventingConfigTemplate"), ::OpenAPI::toJsonValue(m_eventing_config_template));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_version_isSet) {
        obj.insert(QString("releaseVersion"), ::OpenAPI::toJsonValue(m_release_version));
    }
    if (m_role_grant.isSet()) {
        obj.insert(QString("roleGrant"), ::OpenAPI::toJsonValue(m_role_grant));
    }
    if (m_role_grants.size() > 0) {
        obj.insert(QString("roleGrants"), ::OpenAPI::toJsonValue(m_role_grants));
    }
    if (m_ssl_config_template.isSet()) {
        obj.insert(QString("sslConfigTemplate"), ::OpenAPI::toJsonValue(m_ssl_config_template));
    }
    if (m_supported_runtime_features.isSet()) {
        obj.insert(QString("supportedRuntimeFeatures"), ::OpenAPI::toJsonValue(m_supported_runtime_features));
    }
    if (m_unsupported_connection_types.size() > 0) {
        obj.insert(QString("unsupportedConnectionTypes"), ::OpenAPI::toJsonValue(m_unsupported_connection_types));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIAuthConfigTemplate> OAIConnectorVersion::getAuthConfigTemplates() const {
    return m_auth_config_templates;
}
void OAIConnectorVersion::setAuthConfigTemplates(const QList<OAIAuthConfigTemplate> &auth_config_templates) {
    m_auth_config_templates = auth_config_templates;
    m_auth_config_templates_isSet = true;
}

bool OAIConnectorVersion::is_auth_config_templates_Set() const{
    return m_auth_config_templates_isSet;
}

bool OAIConnectorVersion::is_auth_config_templates_Valid() const{
    return m_auth_config_templates_isValid;
}

QList<OAIConfigVariableTemplate> OAIConnectorVersion::getConfigVariableTemplates() const {
    return m_config_variable_templates;
}
void OAIConnectorVersion::setConfigVariableTemplates(const QList<OAIConfigVariableTemplate> &config_variable_templates) {
    m_config_variable_templates = config_variable_templates;
    m_config_variable_templates_isSet = true;
}

bool OAIConnectorVersion::is_config_variable_templates_Set() const{
    return m_config_variable_templates_isSet;
}

bool OAIConnectorVersion::is_config_variable_templates_Valid() const{
    return m_config_variable_templates_isValid;
}

OAIConnectorInfraConfig OAIConnectorVersion::getConnectorInfraConfig() const {
    return m_connector_infra_config;
}
void OAIConnectorVersion::setConnectorInfraConfig(const OAIConnectorInfraConfig &connector_infra_config) {
    m_connector_infra_config = connector_infra_config;
    m_connector_infra_config_isSet = true;
}

bool OAIConnectorVersion::is_connector_infra_config_Set() const{
    return m_connector_infra_config_isSet;
}

bool OAIConnectorVersion::is_connector_infra_config_Valid() const{
    return m_connector_infra_config_isValid;
}

QString OAIConnectorVersion::getCreateTime() const {
    return m_create_time;
}
void OAIConnectorVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConnectorVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConnectorVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIDestinationConfigTemplate> OAIConnectorVersion::getDestinationConfigTemplates() const {
    return m_destination_config_templates;
}
void OAIConnectorVersion::setDestinationConfigTemplates(const QList<OAIDestinationConfigTemplate> &destination_config_templates) {
    m_destination_config_templates = destination_config_templates;
    m_destination_config_templates_isSet = true;
}

bool OAIConnectorVersion::is_destination_config_templates_Set() const{
    return m_destination_config_templates_isSet;
}

bool OAIConnectorVersion::is_destination_config_templates_Valid() const{
    return m_destination_config_templates_isValid;
}

QString OAIConnectorVersion::getDisplayName() const {
    return m_display_name;
}
void OAIConnectorVersion::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnectorVersion::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnectorVersion::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEgressControlConfig OAIConnectorVersion::getEgressControlConfig() const {
    return m_egress_control_config;
}
void OAIConnectorVersion::setEgressControlConfig(const OAIEgressControlConfig &egress_control_config) {
    m_egress_control_config = egress_control_config;
    m_egress_control_config_isSet = true;
}

bool OAIConnectorVersion::is_egress_control_config_Set() const{
    return m_egress_control_config_isSet;
}

bool OAIConnectorVersion::is_egress_control_config_Valid() const{
    return m_egress_control_config_isValid;
}

OAIEventingConfigTemplate OAIConnectorVersion::getEventingConfigTemplate() const {
    return m_eventing_config_template;
}
void OAIConnectorVersion::setEventingConfigTemplate(const OAIEventingConfigTemplate &eventing_config_template) {
    m_eventing_config_template = eventing_config_template;
    m_eventing_config_template_isSet = true;
}

bool OAIConnectorVersion::is_eventing_config_template_Set() const{
    return m_eventing_config_template_isSet;
}

bool OAIConnectorVersion::is_eventing_config_template_Valid() const{
    return m_eventing_config_template_isValid;
}

QMap<QString, QString> OAIConnectorVersion::getLabels() const {
    return m_labels;
}
void OAIConnectorVersion::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIConnectorVersion::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIConnectorVersion::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIConnectorVersion::getLaunchStage() const {
    return m_launch_stage;
}
void OAIConnectorVersion::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIConnectorVersion::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIConnectorVersion::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIConnectorVersion::getName() const {
    return m_name;
}
void OAIConnectorVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectorVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectorVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectorVersion::getReleaseVersion() const {
    return m_release_version;
}
void OAIConnectorVersion::setReleaseVersion(const QString &release_version) {
    m_release_version = release_version;
    m_release_version_isSet = true;
}

bool OAIConnectorVersion::is_release_version_Set() const{
    return m_release_version_isSet;
}

bool OAIConnectorVersion::is_release_version_Valid() const{
    return m_release_version_isValid;
}

OAIRoleGrant OAIConnectorVersion::getRoleGrant() const {
    return m_role_grant;
}
void OAIConnectorVersion::setRoleGrant(const OAIRoleGrant &role_grant) {
    m_role_grant = role_grant;
    m_role_grant_isSet = true;
}

bool OAIConnectorVersion::is_role_grant_Set() const{
    return m_role_grant_isSet;
}

bool OAIConnectorVersion::is_role_grant_Valid() const{
    return m_role_grant_isValid;
}

QList<OAIRoleGrant> OAIConnectorVersion::getRoleGrants() const {
    return m_role_grants;
}
void OAIConnectorVersion::setRoleGrants(const QList<OAIRoleGrant> &role_grants) {
    m_role_grants = role_grants;
    m_role_grants_isSet = true;
}

bool OAIConnectorVersion::is_role_grants_Set() const{
    return m_role_grants_isSet;
}

bool OAIConnectorVersion::is_role_grants_Valid() const{
    return m_role_grants_isValid;
}

OAISslConfigTemplate OAIConnectorVersion::getSslConfigTemplate() const {
    return m_ssl_config_template;
}
void OAIConnectorVersion::setSslConfigTemplate(const OAISslConfigTemplate &ssl_config_template) {
    m_ssl_config_template = ssl_config_template;
    m_ssl_config_template_isSet = true;
}

bool OAIConnectorVersion::is_ssl_config_template_Set() const{
    return m_ssl_config_template_isSet;
}

bool OAIConnectorVersion::is_ssl_config_template_Valid() const{
    return m_ssl_config_template_isValid;
}

OAISupportedRuntimeFeatures OAIConnectorVersion::getSupportedRuntimeFeatures() const {
    return m_supported_runtime_features;
}
void OAIConnectorVersion::setSupportedRuntimeFeatures(const OAISupportedRuntimeFeatures &supported_runtime_features) {
    m_supported_runtime_features = supported_runtime_features;
    m_supported_runtime_features_isSet = true;
}

bool OAIConnectorVersion::is_supported_runtime_features_Set() const{
    return m_supported_runtime_features_isSet;
}

bool OAIConnectorVersion::is_supported_runtime_features_Valid() const{
    return m_supported_runtime_features_isValid;
}

QList<QString> OAIConnectorVersion::getUnsupportedConnectionTypes() const {
    return m_unsupported_connection_types;
}
void OAIConnectorVersion::setUnsupportedConnectionTypes(const QList<QString> &unsupported_connection_types) {
    m_unsupported_connection_types = unsupported_connection_types;
    m_unsupported_connection_types_isSet = true;
}

bool OAIConnectorVersion::is_unsupported_connection_types_Set() const{
    return m_unsupported_connection_types_isSet;
}

bool OAIConnectorVersion::is_unsupported_connection_types_Valid() const{
    return m_unsupported_connection_types_isValid;
}

QString OAIConnectorVersion::getUpdateTime() const {
    return m_update_time;
}
void OAIConnectorVersion::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConnectorVersion::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConnectorVersion::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConnectorVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_config_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_variable_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_infra_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_config_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_control_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eventing_config_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_grant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_config_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_runtime_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_connection_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
