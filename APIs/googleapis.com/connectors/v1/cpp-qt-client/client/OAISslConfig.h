/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISslConfig.h
 *
 * SSL Configuration of a connection
 */

#ifndef OAISslConfig_H
#define OAISslConfig_H

#include <QJsonObject>

#include "OAIConfigVariable.h"
#include "OAISecret.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfigVariable;
class OAISecret;

class OAISslConfig : public OAIObject {
public:
    OAISslConfig();
    OAISslConfig(QString json);
    ~OAISslConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIConfigVariable> getAdditionalVariables() const;
    void setAdditionalVariables(const QList<OAIConfigVariable> &additional_variables);
    bool is_additional_variables_Set() const;
    bool is_additional_variables_Valid() const;

    QString getClientCertType() const;
    void setClientCertType(const QString &client_cert_type);
    bool is_client_cert_type_Set() const;
    bool is_client_cert_type_Valid() const;

    OAISecret getClientCertificate() const;
    void setClientCertificate(const OAISecret &client_certificate);
    bool is_client_certificate_Set() const;
    bool is_client_certificate_Valid() const;

    OAISecret getClientPrivateKey() const;
    void setClientPrivateKey(const OAISecret &client_private_key);
    bool is_client_private_key_Set() const;
    bool is_client_private_key_Valid() const;

    OAISecret getClientPrivateKeyPass() const;
    void setClientPrivateKeyPass(const OAISecret &client_private_key_pass);
    bool is_client_private_key_pass_Set() const;
    bool is_client_private_key_pass_Valid() const;

    OAISecret getPrivateServerCertificate() const;
    void setPrivateServerCertificate(const OAISecret &private_server_certificate);
    bool is_private_server_certificate_Set() const;
    bool is_private_server_certificate_Valid() const;

    QString getServerCertType() const;
    void setServerCertType(const QString &server_cert_type);
    bool is_server_cert_type_Set() const;
    bool is_server_cert_type_Valid() const;

    QString getTrustModel() const;
    void setTrustModel(const QString &trust_model);
    bool is_trust_model_Set() const;
    bool is_trust_model_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isUseSsl() const;
    void setUseSsl(const bool &use_ssl);
    bool is_use_ssl_Set() const;
    bool is_use_ssl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIConfigVariable> m_additional_variables;
    bool m_additional_variables_isSet;
    bool m_additional_variables_isValid;

    QString m_client_cert_type;
    bool m_client_cert_type_isSet;
    bool m_client_cert_type_isValid;

    OAISecret m_client_certificate;
    bool m_client_certificate_isSet;
    bool m_client_certificate_isValid;

    OAISecret m_client_private_key;
    bool m_client_private_key_isSet;
    bool m_client_private_key_isValid;

    OAISecret m_client_private_key_pass;
    bool m_client_private_key_pass_isSet;
    bool m_client_private_key_pass_isValid;

    OAISecret m_private_server_certificate;
    bool m_private_server_certificate_isSet;
    bool m_private_server_certificate_isValid;

    QString m_server_cert_type;
    bool m_server_cert_type_isSet;
    bool m_server_cert_type_isValid;

    QString m_trust_model;
    bool m_trust_model_isSet;
    bool m_trust_model_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_use_ssl;
    bool m_use_ssl_isSet;
    bool m_use_ssl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISslConfig)

#endif // OAISslConfig_H
