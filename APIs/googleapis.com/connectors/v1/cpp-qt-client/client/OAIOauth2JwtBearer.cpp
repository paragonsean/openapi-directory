/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth2JwtBearer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth2JwtBearer::OAIOauth2JwtBearer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth2JwtBearer::OAIOauth2JwtBearer() {
    this->initializeModel();
}

OAIOauth2JwtBearer::~OAIOauth2JwtBearer() {}

void OAIOauth2JwtBearer::initializeModel() {

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_jwt_claims_isSet = false;
    m_jwt_claims_isValid = false;
}

void OAIOauth2JwtBearer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth2JwtBearer::fromJsonObject(QJsonObject json) {

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_jwt_claims_isValid = ::OpenAPI::fromJsonValue(m_jwt_claims, json[QString("jwtClaims")]);
    m_jwt_claims_isSet = !json[QString("jwtClaims")].isNull() && m_jwt_claims_isValid;
}

QString OAIOauth2JwtBearer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth2JwtBearer::asJsonObject() const {
    QJsonObject obj;
    if (m_client_key.isSet()) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_jwt_claims.isSet()) {
        obj.insert(QString("jwtClaims"), ::OpenAPI::toJsonValue(m_jwt_claims));
    }
    return obj;
}

OAISecret OAIOauth2JwtBearer::getClientKey() const {
    return m_client_key;
}
void OAIOauth2JwtBearer::setClientKey(const OAISecret &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAIOauth2JwtBearer::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAIOauth2JwtBearer::is_client_key_Valid() const{
    return m_client_key_isValid;
}

OAIJwtClaims OAIOauth2JwtBearer::getJwtClaims() const {
    return m_jwt_claims;
}
void OAIOauth2JwtBearer::setJwtClaims(const OAIJwtClaims &jwt_claims) {
    m_jwt_claims = jwt_claims;
    m_jwt_claims_isSet = true;
}

bool OAIOauth2JwtBearer::is_jwt_claims_Set() const{
    return m_jwt_claims_isSet;
}

bool OAIOauth2JwtBearer::is_jwt_claims_Valid() const{
    return m_jwt_claims_isValid;
}

bool OAIOauth2JwtBearer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth2JwtBearer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
