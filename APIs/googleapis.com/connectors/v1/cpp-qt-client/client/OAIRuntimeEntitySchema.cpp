/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeEntitySchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeEntitySchema::OAIRuntimeEntitySchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeEntitySchema::OAIRuntimeEntitySchema() {
    this->initializeModel();
}

OAIRuntimeEntitySchema::~OAIRuntimeEntitySchema() {}

void OAIRuntimeEntitySchema::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_json_schema_isSet = false;
    m_json_schema_isValid = false;
}

void OAIRuntimeEntitySchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeEntitySchema::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_json_schema_isValid = ::OpenAPI::fromJsonValue(m_json_schema, json[QString("jsonSchema")]);
    m_json_schema_isSet = !json[QString("jsonSchema")].isNull() && m_json_schema_isValid;
}

QString OAIRuntimeEntitySchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeEntitySchema::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_json_schema.isSet()) {
        obj.insert(QString("jsonSchema"), ::OpenAPI::toJsonValue(m_json_schema));
    }
    return obj;
}

QString OAIRuntimeEntitySchema::getEntity() const {
    return m_entity;
}
void OAIRuntimeEntitySchema::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIRuntimeEntitySchema::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIRuntimeEntitySchema::is_entity_Valid() const{
    return m_entity_isValid;
}

QList<OAIField> OAIRuntimeEntitySchema::getFields() const {
    return m_fields;
}
void OAIRuntimeEntitySchema::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIRuntimeEntitySchema::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIRuntimeEntitySchema::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIJsonSchema OAIRuntimeEntitySchema::getJsonSchema() const {
    return m_json_schema;
}
void OAIRuntimeEntitySchema::setJsonSchema(const OAIJsonSchema &json_schema) {
    m_json_schema = json_schema;
    m_json_schema_isSet = true;
}

bool OAIRuntimeEntitySchema::is_json_schema_Set() const{
    return m_json_schema_isSet;
}

bool OAIRuntimeEntitySchema::is_json_schema_Valid() const{
    return m_json_schema_isValid;
}

bool OAIRuntimeEntitySchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeEntitySchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
