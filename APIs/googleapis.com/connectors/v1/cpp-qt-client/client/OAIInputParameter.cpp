/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputParameter::OAIInputParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputParameter::OAIInputParameter() {
    this->initializeModel();
}

OAIInputParameter::~OAIInputParameter() {}

void OAIInputParameter::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_json_schema_isSet = false;
    m_json_schema_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;
}

void OAIInputParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputParameter::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_json_schema_isValid = ::OpenAPI::fromJsonValue(m_json_schema, json[QString("jsonSchema")]);
    m_json_schema_isSet = !json[QString("jsonSchema")].isNull() && m_json_schema_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;
}

QString OAIInputParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_json_schema.isSet()) {
        obj.insert(QString("jsonSchema"), ::OpenAPI::toJsonValue(m_json_schema));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    return obj;
}

QString OAIInputParameter::getDataType() const {
    return m_data_type;
}
void OAIInputParameter::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIInputParameter::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIInputParameter::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QJsonValue OAIInputParameter::getDefaultValue() const {
    return m_default_value;
}
void OAIInputParameter::setDefaultValue(const QJsonValue &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIInputParameter::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIInputParameter::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIInputParameter::getDescription() const {
    return m_description;
}
void OAIInputParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInputParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInputParameter::is_description_Valid() const{
    return m_description_isValid;
}

OAIJsonSchema OAIInputParameter::getJsonSchema() const {
    return m_json_schema;
}
void OAIInputParameter::setJsonSchema(const OAIJsonSchema &json_schema) {
    m_json_schema = json_schema;
    m_json_schema_isSet = true;
}

bool OAIInputParameter::is_json_schema_Set() const{
    return m_json_schema_isSet;
}

bool OAIInputParameter::is_json_schema_Valid() const{
    return m_json_schema_isValid;
}

bool OAIInputParameter::isNullable() const {
    return m_nullable;
}
void OAIInputParameter::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIInputParameter::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIInputParameter::is_nullable_Valid() const{
    return m_nullable_isValid;
}

QString OAIInputParameter::getParameter() const {
    return m_parameter;
}
void OAIInputParameter::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIInputParameter::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIInputParameter::is_parameter_Valid() const{
    return m_parameter_isValid;
}

bool OAIInputParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
