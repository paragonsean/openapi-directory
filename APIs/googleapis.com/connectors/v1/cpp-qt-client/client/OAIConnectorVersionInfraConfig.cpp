/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorVersionInfraConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorVersionInfraConfig::OAIConnectorVersionInfraConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorVersionInfraConfig::OAIConnectorVersionInfraConfig() {
    this->initializeModel();
}

OAIConnectorVersionInfraConfig::~OAIConnectorVersionInfraConfig() {}

void OAIConnectorVersionInfraConfig::initializeModel() {

    m_connection_ratelimit_window_seconds_isSet = false;
    m_connection_ratelimit_window_seconds_isValid = false;

    m_deployment_model_isSet = false;
    m_deployment_model_isValid = false;

    m_hpa_config_isSet = false;
    m_hpa_config_isValid = false;

    m_internalclient_ratelimit_threshold_isSet = false;
    m_internalclient_ratelimit_threshold_isValid = false;

    m_ratelimit_threshold_isSet = false;
    m_ratelimit_threshold_isValid = false;

    m_resource_limits_isSet = false;
    m_resource_limits_isValid = false;

    m_resource_requests_isSet = false;
    m_resource_requests_isValid = false;

    m_shared_deployment_isSet = false;
    m_shared_deployment_isValid = false;
}

void OAIConnectorVersionInfraConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorVersionInfraConfig::fromJsonObject(QJsonObject json) {

    m_connection_ratelimit_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_connection_ratelimit_window_seconds, json[QString("connectionRatelimitWindowSeconds")]);
    m_connection_ratelimit_window_seconds_isSet = !json[QString("connectionRatelimitWindowSeconds")].isNull() && m_connection_ratelimit_window_seconds_isValid;

    m_deployment_model_isValid = ::OpenAPI::fromJsonValue(m_deployment_model, json[QString("deploymentModel")]);
    m_deployment_model_isSet = !json[QString("deploymentModel")].isNull() && m_deployment_model_isValid;

    m_hpa_config_isValid = ::OpenAPI::fromJsonValue(m_hpa_config, json[QString("hpaConfig")]);
    m_hpa_config_isSet = !json[QString("hpaConfig")].isNull() && m_hpa_config_isValid;

    m_internalclient_ratelimit_threshold_isValid = ::OpenAPI::fromJsonValue(m_internalclient_ratelimit_threshold, json[QString("internalclientRatelimitThreshold")]);
    m_internalclient_ratelimit_threshold_isSet = !json[QString("internalclientRatelimitThreshold")].isNull() && m_internalclient_ratelimit_threshold_isValid;

    m_ratelimit_threshold_isValid = ::OpenAPI::fromJsonValue(m_ratelimit_threshold, json[QString("ratelimitThreshold")]);
    m_ratelimit_threshold_isSet = !json[QString("ratelimitThreshold")].isNull() && m_ratelimit_threshold_isValid;

    m_resource_limits_isValid = ::OpenAPI::fromJsonValue(m_resource_limits, json[QString("resourceLimits")]);
    m_resource_limits_isSet = !json[QString("resourceLimits")].isNull() && m_resource_limits_isValid;

    m_resource_requests_isValid = ::OpenAPI::fromJsonValue(m_resource_requests, json[QString("resourceRequests")]);
    m_resource_requests_isSet = !json[QString("resourceRequests")].isNull() && m_resource_requests_isValid;

    m_shared_deployment_isValid = ::OpenAPI::fromJsonValue(m_shared_deployment, json[QString("sharedDeployment")]);
    m_shared_deployment_isSet = !json[QString("sharedDeployment")].isNull() && m_shared_deployment_isValid;
}

QString OAIConnectorVersionInfraConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorVersionInfraConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_ratelimit_window_seconds_isSet) {
        obj.insert(QString("connectionRatelimitWindowSeconds"), ::OpenAPI::toJsonValue(m_connection_ratelimit_window_seconds));
    }
    if (m_deployment_model_isSet) {
        obj.insert(QString("deploymentModel"), ::OpenAPI::toJsonValue(m_deployment_model));
    }
    if (m_hpa_config.isSet()) {
        obj.insert(QString("hpaConfig"), ::OpenAPI::toJsonValue(m_hpa_config));
    }
    if (m_internalclient_ratelimit_threshold_isSet) {
        obj.insert(QString("internalclientRatelimitThreshold"), ::OpenAPI::toJsonValue(m_internalclient_ratelimit_threshold));
    }
    if (m_ratelimit_threshold_isSet) {
        obj.insert(QString("ratelimitThreshold"), ::OpenAPI::toJsonValue(m_ratelimit_threshold));
    }
    if (m_resource_limits.isSet()) {
        obj.insert(QString("resourceLimits"), ::OpenAPI::toJsonValue(m_resource_limits));
    }
    if (m_resource_requests.isSet()) {
        obj.insert(QString("resourceRequests"), ::OpenAPI::toJsonValue(m_resource_requests));
    }
    if (m_shared_deployment_isSet) {
        obj.insert(QString("sharedDeployment"), ::OpenAPI::toJsonValue(m_shared_deployment));
    }
    return obj;
}

QString OAIConnectorVersionInfraConfig::getConnectionRatelimitWindowSeconds() const {
    return m_connection_ratelimit_window_seconds;
}
void OAIConnectorVersionInfraConfig::setConnectionRatelimitWindowSeconds(const QString &connection_ratelimit_window_seconds) {
    m_connection_ratelimit_window_seconds = connection_ratelimit_window_seconds;
    m_connection_ratelimit_window_seconds_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_connection_ratelimit_window_seconds_Set() const{
    return m_connection_ratelimit_window_seconds_isSet;
}

bool OAIConnectorVersionInfraConfig::is_connection_ratelimit_window_seconds_Valid() const{
    return m_connection_ratelimit_window_seconds_isValid;
}

QString OAIConnectorVersionInfraConfig::getDeploymentModel() const {
    return m_deployment_model;
}
void OAIConnectorVersionInfraConfig::setDeploymentModel(const QString &deployment_model) {
    m_deployment_model = deployment_model;
    m_deployment_model_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_deployment_model_Set() const{
    return m_deployment_model_isSet;
}

bool OAIConnectorVersionInfraConfig::is_deployment_model_Valid() const{
    return m_deployment_model_isValid;
}

OAIHPAConfig OAIConnectorVersionInfraConfig::getHpaConfig() const {
    return m_hpa_config;
}
void OAIConnectorVersionInfraConfig::setHpaConfig(const OAIHPAConfig &hpa_config) {
    m_hpa_config = hpa_config;
    m_hpa_config_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_hpa_config_Set() const{
    return m_hpa_config_isSet;
}

bool OAIConnectorVersionInfraConfig::is_hpa_config_Valid() const{
    return m_hpa_config_isValid;
}

QString OAIConnectorVersionInfraConfig::getInternalclientRatelimitThreshold() const {
    return m_internalclient_ratelimit_threshold;
}
void OAIConnectorVersionInfraConfig::setInternalclientRatelimitThreshold(const QString &internalclient_ratelimit_threshold) {
    m_internalclient_ratelimit_threshold = internalclient_ratelimit_threshold;
    m_internalclient_ratelimit_threshold_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_internalclient_ratelimit_threshold_Set() const{
    return m_internalclient_ratelimit_threshold_isSet;
}

bool OAIConnectorVersionInfraConfig::is_internalclient_ratelimit_threshold_Valid() const{
    return m_internalclient_ratelimit_threshold_isValid;
}

QString OAIConnectorVersionInfraConfig::getRatelimitThreshold() const {
    return m_ratelimit_threshold;
}
void OAIConnectorVersionInfraConfig::setRatelimitThreshold(const QString &ratelimit_threshold) {
    m_ratelimit_threshold = ratelimit_threshold;
    m_ratelimit_threshold_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_ratelimit_threshold_Set() const{
    return m_ratelimit_threshold_isSet;
}

bool OAIConnectorVersionInfraConfig::is_ratelimit_threshold_Valid() const{
    return m_ratelimit_threshold_isValid;
}

OAIResourceLimits OAIConnectorVersionInfraConfig::getResourceLimits() const {
    return m_resource_limits;
}
void OAIConnectorVersionInfraConfig::setResourceLimits(const OAIResourceLimits &resource_limits) {
    m_resource_limits = resource_limits;
    m_resource_limits_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_resource_limits_Set() const{
    return m_resource_limits_isSet;
}

bool OAIConnectorVersionInfraConfig::is_resource_limits_Valid() const{
    return m_resource_limits_isValid;
}

OAIResourceRequests OAIConnectorVersionInfraConfig::getResourceRequests() const {
    return m_resource_requests;
}
void OAIConnectorVersionInfraConfig::setResourceRequests(const OAIResourceRequests &resource_requests) {
    m_resource_requests = resource_requests;
    m_resource_requests_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_resource_requests_Set() const{
    return m_resource_requests_isSet;
}

bool OAIConnectorVersionInfraConfig::is_resource_requests_Valid() const{
    return m_resource_requests_isValid;
}

QString OAIConnectorVersionInfraConfig::getSharedDeployment() const {
    return m_shared_deployment;
}
void OAIConnectorVersionInfraConfig::setSharedDeployment(const QString &shared_deployment) {
    m_shared_deployment = shared_deployment;
    m_shared_deployment_isSet = true;
}

bool OAIConnectorVersionInfraConfig::is_shared_deployment_Set() const{
    return m_shared_deployment_isSet;
}

bool OAIConnectorVersionInfraConfig::is_shared_deployment_Valid() const{
    return m_shared_deployment_isValid;
}

bool OAIConnectorVersionInfraConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_ratelimit_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpa_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internalclient_ratelimit_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratelimit_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorVersionInfraConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
