/**
 * Connectors API
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectorVersionInfraConfig.h
 *
 * This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version
 */

#ifndef OAIConnectorVersionInfraConfig_H
#define OAIConnectorVersionInfraConfig_H

#include <QJsonObject>

#include "OAIHPAConfig.h"
#include "OAIResourceLimits.h"
#include "OAIResourceRequests.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHPAConfig;
class OAIResourceLimits;
class OAIResourceRequests;

class OAIConnectorVersionInfraConfig : public OAIObject {
public:
    OAIConnectorVersionInfraConfig();
    OAIConnectorVersionInfraConfig(QString json);
    ~OAIConnectorVersionInfraConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionRatelimitWindowSeconds() const;
    void setConnectionRatelimitWindowSeconds(const QString &connection_ratelimit_window_seconds);
    bool is_connection_ratelimit_window_seconds_Set() const;
    bool is_connection_ratelimit_window_seconds_Valid() const;

    QString getDeploymentModel() const;
    void setDeploymentModel(const QString &deployment_model);
    bool is_deployment_model_Set() const;
    bool is_deployment_model_Valid() const;

    OAIHPAConfig getHpaConfig() const;
    void setHpaConfig(const OAIHPAConfig &hpa_config);
    bool is_hpa_config_Set() const;
    bool is_hpa_config_Valid() const;

    QString getInternalclientRatelimitThreshold() const;
    void setInternalclientRatelimitThreshold(const QString &internalclient_ratelimit_threshold);
    bool is_internalclient_ratelimit_threshold_Set() const;
    bool is_internalclient_ratelimit_threshold_Valid() const;

    QString getRatelimitThreshold() const;
    void setRatelimitThreshold(const QString &ratelimit_threshold);
    bool is_ratelimit_threshold_Set() const;
    bool is_ratelimit_threshold_Valid() const;

    OAIResourceLimits getResourceLimits() const;
    void setResourceLimits(const OAIResourceLimits &resource_limits);
    bool is_resource_limits_Set() const;
    bool is_resource_limits_Valid() const;

    OAIResourceRequests getResourceRequests() const;
    void setResourceRequests(const OAIResourceRequests &resource_requests);
    bool is_resource_requests_Set() const;
    bool is_resource_requests_Valid() const;

    QString getSharedDeployment() const;
    void setSharedDeployment(const QString &shared_deployment);
    bool is_shared_deployment_Set() const;
    bool is_shared_deployment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_ratelimit_window_seconds;
    bool m_connection_ratelimit_window_seconds_isSet;
    bool m_connection_ratelimit_window_seconds_isValid;

    QString m_deployment_model;
    bool m_deployment_model_isSet;
    bool m_deployment_model_isValid;

    OAIHPAConfig m_hpa_config;
    bool m_hpa_config_isSet;
    bool m_hpa_config_isValid;

    QString m_internalclient_ratelimit_threshold;
    bool m_internalclient_ratelimit_threshold_isSet;
    bool m_internalclient_ratelimit_threshold_isValid;

    QString m_ratelimit_threshold;
    bool m_ratelimit_threshold_isSet;
    bool m_ratelimit_threshold_isValid;

    OAIResourceLimits m_resource_limits;
    bool m_resource_limits_isSet;
    bool m_resource_limits_isValid;

    OAIResourceRequests m_resource_requests;
    bool m_resource_requests_isSet;
    bool m_resource_requests_isValid;

    QString m_shared_deployment;
    bool m_shared_deployment_isSet;
    bool m_shared_deployment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectorVersionInfraConfig)

#endif // OAIConnectorVersionInfraConfig_H
