# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end_point import EndPoint
from openapi_server import util


class EventSubscriptionDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: EndPoint=None, service_account: str=None, type: str=None):
        """EventSubscriptionDestination - a model defined in OpenAPI

        :param endpoint: The endpoint of this EventSubscriptionDestination.
        :param service_account: The service_account of this EventSubscriptionDestination.
        :param type: The type of this EventSubscriptionDestination.
        """
        self.openapi_types = {
            'endpoint': EndPoint,
            'service_account': str,
            'type': str
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'service_account': 'serviceAccount',
            'type': 'type'
        }

        self._endpoint = endpoint
        self._service_account = service_account
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscriptionDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscriptionDestination of this EventSubscriptionDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this EventSubscriptionDestination.


        :return: The endpoint of this EventSubscriptionDestination.
        :rtype: EndPoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this EventSubscriptionDestination.


        :param endpoint: The endpoint of this EventSubscriptionDestination.
        :type endpoint: EndPoint
        """

        self._endpoint = endpoint

    @property
    def service_account(self):
        """Gets the service_account of this EventSubscriptionDestination.

        Service account needed for runtime plane to trigger IP workflow.

        :return: The service_account of this EventSubscriptionDestination.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this EventSubscriptionDestination.

        Service account needed for runtime plane to trigger IP workflow.

        :param service_account: The service_account of this EventSubscriptionDestination.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def type(self):
        """Gets the type of this EventSubscriptionDestination.

        type of the destination

        :return: The type of this EventSubscriptionDestination.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventSubscriptionDestination.

        type of the destination

        :param type: The type of this EventSubscriptionDestination.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ENDPOINT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
