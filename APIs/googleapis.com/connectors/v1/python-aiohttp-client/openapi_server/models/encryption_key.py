# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_name: str=None, type: str=None):
        """EncryptionKey - a model defined in OpenAPI

        :param kms_key_name: The kms_key_name of this EncryptionKey.
        :param type: The type of this EncryptionKey.
        """
        self.openapi_types = {
            'kms_key_name': str,
            'type': str
        }

        self.attribute_map = {
            'kms_key_name': 'kmsKeyName',
            'type': 'type'
        }

        self._kms_key_name = kms_key_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionKey of this EncryptionKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this EncryptionKey.

        The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.

        :return: The kms_key_name of this EncryptionKey.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this EncryptionKey.

        The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.

        :param kms_key_name: The kms_key_name of this EncryptionKey.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def type(self):
        """Gets the type of this EncryptionKey.

        Type.

        :return: The type of this EncryptionKey.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EncryptionKey.

        Type.

        :param type: The type of this EncryptionKey.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "GOOGLE_MANAGED", "CUSTOMER_MANAGED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
