# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secret import Secret
from openapi_server import util


class Oauth2AuthCodeFlow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_code: str=None, auth_uri: str=None, client_id: str=None, client_secret: Secret=None, enable_pkce: bool=None, pkce_verifier: str=None, redirect_uri: str=None, scopes: List[str]=None):
        """Oauth2AuthCodeFlow - a model defined in OpenAPI

        :param auth_code: The auth_code of this Oauth2AuthCodeFlow.
        :param auth_uri: The auth_uri of this Oauth2AuthCodeFlow.
        :param client_id: The client_id of this Oauth2AuthCodeFlow.
        :param client_secret: The client_secret of this Oauth2AuthCodeFlow.
        :param enable_pkce: The enable_pkce of this Oauth2AuthCodeFlow.
        :param pkce_verifier: The pkce_verifier of this Oauth2AuthCodeFlow.
        :param redirect_uri: The redirect_uri of this Oauth2AuthCodeFlow.
        :param scopes: The scopes of this Oauth2AuthCodeFlow.
        """
        self.openapi_types = {
            'auth_code': str,
            'auth_uri': str,
            'client_id': str,
            'client_secret': Secret,
            'enable_pkce': bool,
            'pkce_verifier': str,
            'redirect_uri': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'auth_code': 'authCode',
            'auth_uri': 'authUri',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'enable_pkce': 'enablePkce',
            'pkce_verifier': 'pkceVerifier',
            'redirect_uri': 'redirectUri',
            'scopes': 'scopes'
        }

        self._auth_code = auth_code
        self._auth_uri = auth_uri
        self._client_id = client_id
        self._client_secret = client_secret
        self._enable_pkce = enable_pkce
        self._pkce_verifier = pkce_verifier
        self._redirect_uri = redirect_uri
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Oauth2AuthCodeFlow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Oauth2AuthCodeFlow of this Oauth2AuthCodeFlow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_code(self):
        """Gets the auth_code of this Oauth2AuthCodeFlow.

        Authorization code to be exchanged for access and refresh tokens.

        :return: The auth_code of this Oauth2AuthCodeFlow.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this Oauth2AuthCodeFlow.

        Authorization code to be exchanged for access and refresh tokens.

        :param auth_code: The auth_code of this Oauth2AuthCodeFlow.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def auth_uri(self):
        """Gets the auth_uri of this Oauth2AuthCodeFlow.

        Auth URL for Authorization Code Flow

        :return: The auth_uri of this Oauth2AuthCodeFlow.
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """Sets the auth_uri of this Oauth2AuthCodeFlow.

        Auth URL for Authorization Code Flow

        :param auth_uri: The auth_uri of this Oauth2AuthCodeFlow.
        :type auth_uri: str
        """

        self._auth_uri = auth_uri

    @property
    def client_id(self):
        """Gets the client_id of this Oauth2AuthCodeFlow.

        Client ID for user-provided OAuth app.

        :return: The client_id of this Oauth2AuthCodeFlow.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Oauth2AuthCodeFlow.

        Client ID for user-provided OAuth app.

        :param client_id: The client_id of this Oauth2AuthCodeFlow.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Oauth2AuthCodeFlow.


        :return: The client_secret of this Oauth2AuthCodeFlow.
        :rtype: Secret
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Oauth2AuthCodeFlow.


        :param client_secret: The client_secret of this Oauth2AuthCodeFlow.
        :type client_secret: Secret
        """

        self._client_secret = client_secret

    @property
    def enable_pkce(self):
        """Gets the enable_pkce of this Oauth2AuthCodeFlow.

        Whether to enable PKCE when the user performs the auth code flow.

        :return: The enable_pkce of this Oauth2AuthCodeFlow.
        :rtype: bool
        """
        return self._enable_pkce

    @enable_pkce.setter
    def enable_pkce(self, enable_pkce):
        """Sets the enable_pkce of this Oauth2AuthCodeFlow.

        Whether to enable PKCE when the user performs the auth code flow.

        :param enable_pkce: The enable_pkce of this Oauth2AuthCodeFlow.
        :type enable_pkce: bool
        """

        self._enable_pkce = enable_pkce

    @property
    def pkce_verifier(self):
        """Gets the pkce_verifier of this Oauth2AuthCodeFlow.

        PKCE verifier to be used during the auth code exchange.

        :return: The pkce_verifier of this Oauth2AuthCodeFlow.
        :rtype: str
        """
        return self._pkce_verifier

    @pkce_verifier.setter
    def pkce_verifier(self, pkce_verifier):
        """Sets the pkce_verifier of this Oauth2AuthCodeFlow.

        PKCE verifier to be used during the auth code exchange.

        :param pkce_verifier: The pkce_verifier of this Oauth2AuthCodeFlow.
        :type pkce_verifier: str
        """

        self._pkce_verifier = pkce_verifier

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Oauth2AuthCodeFlow.

        Redirect URI to be provided during the auth code exchange.

        :return: The redirect_uri of this Oauth2AuthCodeFlow.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Oauth2AuthCodeFlow.

        Redirect URI to be provided during the auth code exchange.

        :param redirect_uri: The redirect_uri of this Oauth2AuthCodeFlow.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def scopes(self):
        """Gets the scopes of this Oauth2AuthCodeFlow.

        Scopes the connection will request when the user performs the auth code flow.

        :return: The scopes of this Oauth2AuthCodeFlow.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Oauth2AuthCodeFlow.

        Scopes the connection will request when the user performs the auth code flow.

        :param scopes: The scopes of this Oauth2AuthCodeFlow.
        :type scopes: List[str]
        """

        self._scopes = scopes
