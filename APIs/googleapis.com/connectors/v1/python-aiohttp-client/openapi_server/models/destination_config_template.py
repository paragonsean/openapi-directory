# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationConfigTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_port: int=None, description: str=None, display_name: str=None, is_advanced: bool=None, key: str=None, max: int=None, min: int=None, port_field_type: str=None, regex_pattern: str=None):
        """DestinationConfigTemplate - a model defined in OpenAPI

        :param default_port: The default_port of this DestinationConfigTemplate.
        :param description: The description of this DestinationConfigTemplate.
        :param display_name: The display_name of this DestinationConfigTemplate.
        :param is_advanced: The is_advanced of this DestinationConfigTemplate.
        :param key: The key of this DestinationConfigTemplate.
        :param max: The max of this DestinationConfigTemplate.
        :param min: The min of this DestinationConfigTemplate.
        :param port_field_type: The port_field_type of this DestinationConfigTemplate.
        :param regex_pattern: The regex_pattern of this DestinationConfigTemplate.
        """
        self.openapi_types = {
            'default_port': int,
            'description': str,
            'display_name': str,
            'is_advanced': bool,
            'key': str,
            'max': int,
            'min': int,
            'port_field_type': str,
            'regex_pattern': str
        }

        self.attribute_map = {
            'default_port': 'defaultPort',
            'description': 'description',
            'display_name': 'displayName',
            'is_advanced': 'isAdvanced',
            'key': 'key',
            'max': 'max',
            'min': 'min',
            'port_field_type': 'portFieldType',
            'regex_pattern': 'regexPattern'
        }

        self._default_port = default_port
        self._description = description
        self._display_name = display_name
        self._is_advanced = is_advanced
        self._key = key
        self._max = max
        self._min = min
        self._port_field_type = port_field_type
        self._regex_pattern = regex_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConfigTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConfigTemplate of this DestinationConfigTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_port(self):
        """Gets the default_port of this DestinationConfigTemplate.

        The default port.

        :return: The default_port of this DestinationConfigTemplate.
        :rtype: int
        """
        return self._default_port

    @default_port.setter
    def default_port(self, default_port):
        """Sets the default_port of this DestinationConfigTemplate.

        The default port.

        :param default_port: The default_port of this DestinationConfigTemplate.
        :type default_port: int
        """

        self._default_port = default_port

    @property
    def description(self):
        """Gets the description of this DestinationConfigTemplate.

        Description.

        :return: The description of this DestinationConfigTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinationConfigTemplate.

        Description.

        :param description: The description of this DestinationConfigTemplate.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DestinationConfigTemplate.

        Display name of the parameter.

        :return: The display_name of this DestinationConfigTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DestinationConfigTemplate.

        Display name of the parameter.

        :param display_name: The display_name of this DestinationConfigTemplate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_advanced(self):
        """Gets the is_advanced of this DestinationConfigTemplate.

        Whether the current destination tempalate is part of Advanced settings

        :return: The is_advanced of this DestinationConfigTemplate.
        :rtype: bool
        """
        return self._is_advanced

    @is_advanced.setter
    def is_advanced(self, is_advanced):
        """Sets the is_advanced of this DestinationConfigTemplate.

        Whether the current destination tempalate is part of Advanced settings

        :param is_advanced: The is_advanced of this DestinationConfigTemplate.
        :type is_advanced: bool
        """

        self._is_advanced = is_advanced

    @property
    def key(self):
        """Gets the key of this DestinationConfigTemplate.

        Key of the destination.

        :return: The key of this DestinationConfigTemplate.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DestinationConfigTemplate.

        Key of the destination.

        :param key: The key of this DestinationConfigTemplate.
        :type key: str
        """

        self._key = key

    @property
    def max(self):
        """Gets the max of this DestinationConfigTemplate.

        The maximum number of destinations supported for this key.

        :return: The max of this DestinationConfigTemplate.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this DestinationConfigTemplate.

        The maximum number of destinations supported for this key.

        :param max: The max of this DestinationConfigTemplate.
        :type max: int
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this DestinationConfigTemplate.

        The minimum number of destinations supported for this key.

        :return: The min of this DestinationConfigTemplate.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this DestinationConfigTemplate.

        The minimum number of destinations supported for this key.

        :param min: The min of this DestinationConfigTemplate.
        :type min: int
        """

        self._min = min

    @property
    def port_field_type(self):
        """Gets the port_field_type of this DestinationConfigTemplate.

        Whether port number should be provided by customers.

        :return: The port_field_type of this DestinationConfigTemplate.
        :rtype: str
        """
        return self._port_field_type

    @port_field_type.setter
    def port_field_type(self, port_field_type):
        """Sets the port_field_type of this DestinationConfigTemplate.

        Whether port number should be provided by customers.

        :param port_field_type: The port_field_type of this DestinationConfigTemplate.
        :type port_field_type: str
        """
        allowed_values = ["FIELD_TYPE_UNSPECIFIED", "REQUIRED", "OPTIONAL", "NOT_USED"]  # noqa: E501
        if port_field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `port_field_type` ({0}), must be one of {1}"
                .format(port_field_type, allowed_values)
            )

        self._port_field_type = port_field_type

    @property
    def regex_pattern(self):
        """Gets the regex_pattern of this DestinationConfigTemplate.

        Regex pattern for host.

        :return: The regex_pattern of this DestinationConfigTemplate.
        :rtype: str
        """
        return self._regex_pattern

    @regex_pattern.setter
    def regex_pattern(self, regex_pattern):
        """Sets the regex_pattern of this DestinationConfigTemplate.

        Regex pattern for host.

        :param regex_pattern: The regex_pattern of this DestinationConfigTemplate.
        :type regex_pattern: str
        """

        self._regex_pattern = regex_pattern
