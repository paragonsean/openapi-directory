# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionSchemaMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, entities: List[str]=None, error_message: str=None, name: str=None, refresh_time: str=None, state: str=None, update_time: str=None):
        """ConnectionSchemaMetadata - a model defined in OpenAPI

        :param actions: The actions of this ConnectionSchemaMetadata.
        :param entities: The entities of this ConnectionSchemaMetadata.
        :param error_message: The error_message of this ConnectionSchemaMetadata.
        :param name: The name of this ConnectionSchemaMetadata.
        :param refresh_time: The refresh_time of this ConnectionSchemaMetadata.
        :param state: The state of this ConnectionSchemaMetadata.
        :param update_time: The update_time of this ConnectionSchemaMetadata.
        """
        self.openapi_types = {
            'actions': List[str],
            'entities': List[str],
            'error_message': str,
            'name': str,
            'refresh_time': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'entities': 'entities',
            'error_message': 'errorMessage',
            'name': 'name',
            'refresh_time': 'refreshTime',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._actions = actions
        self._entities = entities
        self._error_message = error_message
        self._name = name
        self._refresh_time = refresh_time
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionSchemaMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionSchemaMetadata of this ConnectionSchemaMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ConnectionSchemaMetadata.

        Output only. List of actions.

        :return: The actions of this ConnectionSchemaMetadata.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ConnectionSchemaMetadata.

        Output only. List of actions.

        :param actions: The actions of this ConnectionSchemaMetadata.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def entities(self):
        """Gets the entities of this ConnectionSchemaMetadata.

        Output only. List of entity names.

        :return: The entities of this ConnectionSchemaMetadata.
        :rtype: List[str]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this ConnectionSchemaMetadata.

        Output only. List of entity names.

        :param entities: The entities of this ConnectionSchemaMetadata.
        :type entities: List[str]
        """

        self._entities = entities

    @property
    def error_message(self):
        """Gets the error_message of this ConnectionSchemaMetadata.

        Error message for users.

        :return: The error_message of this ConnectionSchemaMetadata.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ConnectionSchemaMetadata.

        Error message for users.

        :param error_message: The error_message of this ConnectionSchemaMetadata.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def name(self):
        """Gets the name of this ConnectionSchemaMetadata.

        Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata

        :return: The name of this ConnectionSchemaMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionSchemaMetadata.

        Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata

        :param name: The name of this ConnectionSchemaMetadata.
        :type name: str
        """

        self._name = name

    @property
    def refresh_time(self):
        """Gets the refresh_time of this ConnectionSchemaMetadata.

        Output only. Timestamp when the connection runtime schema refresh was triggered.

        :return: The refresh_time of this ConnectionSchemaMetadata.
        :rtype: str
        """
        return self._refresh_time

    @refresh_time.setter
    def refresh_time(self, refresh_time):
        """Sets the refresh_time of this ConnectionSchemaMetadata.

        Output only. Timestamp when the connection runtime schema refresh was triggered.

        :param refresh_time: The refresh_time of this ConnectionSchemaMetadata.
        :type refresh_time: str
        """

        self._refresh_time = refresh_time

    @property
    def state(self):
        """Gets the state of this ConnectionSchemaMetadata.

        Output only. The current state of runtime schema.

        :return: The state of this ConnectionSchemaMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectionSchemaMetadata.

        Output only. The current state of runtime schema.

        :param state: The state of this ConnectionSchemaMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "REFRESHING", "UPDATED", "REFRESHING_SCHEMA_METADATA", "UPDATED_SCHEMA_METADATA", "REFRESH_SCHEMA_METADATA_FAILED", "REFRESHING_FULL_SCHEMA", "UPDATED_FULL_SCHEMA"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ConnectionSchemaMetadata.

        Output only. Timestamp when the connection runtime schema was updated.

        :return: The update_time of this ConnectionSchemaMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConnectionSchemaMetadata.

        Output only. Timestamp when the connection runtime schema was updated.

        :param update_time: The update_time of this ConnectionSchemaMetadata.
        :type update_time: str
        """

        self._update_time = update_time
