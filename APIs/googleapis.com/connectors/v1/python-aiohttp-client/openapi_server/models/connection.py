# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_config import AuthConfig
from openapi_server.models.config_variable import ConfigVariable
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.connector_version_infra_config import ConnectorVersionInfraConfig
from openapi_server.models.connectors_log_config import ConnectorsLogConfig
from openapi_server.models.destination_config import DestinationConfig
from openapi_server.models.eventing_config import EventingConfig
from openapi_server.models.eventing_runtime_data import EventingRuntimeData
from openapi_server.models.lock_config import LockConfig
from openapi_server.models.node_config import NodeConfig
from openapi_server.models.ssl_config import SslConfig
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_config: AuthConfig=None, config_variables: List[ConfigVariable]=None, connection_revision: str=None, connector_version: str=None, connector_version_infra_config: ConnectorVersionInfraConfig=None, connector_version_launch_stage: str=None, create_time: str=None, description: str=None, destination_configs: List[DestinationConfig]=None, envoy_image_location: str=None, eventing_config: EventingConfig=None, eventing_enablement_type: str=None, eventing_runtime_data: EventingRuntimeData=None, image_location: str=None, is_trusted_tester: bool=None, labels: Dict[str, str]=None, lock_config: LockConfig=None, log_config: ConnectorsLogConfig=None, name: str=None, node_config: NodeConfig=None, service_account: str=None, service_directory: str=None, ssl_config: SslConfig=None, status: ConnectionStatus=None, subscription_type: str=None, suspended: bool=None, update_time: str=None):
        """Connection - a model defined in OpenAPI

        :param auth_config: The auth_config of this Connection.
        :param config_variables: The config_variables of this Connection.
        :param connection_revision: The connection_revision of this Connection.
        :param connector_version: The connector_version of this Connection.
        :param connector_version_infra_config: The connector_version_infra_config of this Connection.
        :param connector_version_launch_stage: The connector_version_launch_stage of this Connection.
        :param create_time: The create_time of this Connection.
        :param description: The description of this Connection.
        :param destination_configs: The destination_configs of this Connection.
        :param envoy_image_location: The envoy_image_location of this Connection.
        :param eventing_config: The eventing_config of this Connection.
        :param eventing_enablement_type: The eventing_enablement_type of this Connection.
        :param eventing_runtime_data: The eventing_runtime_data of this Connection.
        :param image_location: The image_location of this Connection.
        :param is_trusted_tester: The is_trusted_tester of this Connection.
        :param labels: The labels of this Connection.
        :param lock_config: The lock_config of this Connection.
        :param log_config: The log_config of this Connection.
        :param name: The name of this Connection.
        :param node_config: The node_config of this Connection.
        :param service_account: The service_account of this Connection.
        :param service_directory: The service_directory of this Connection.
        :param ssl_config: The ssl_config of this Connection.
        :param status: The status of this Connection.
        :param subscription_type: The subscription_type of this Connection.
        :param suspended: The suspended of this Connection.
        :param update_time: The update_time of this Connection.
        """
        self.openapi_types = {
            'auth_config': AuthConfig,
            'config_variables': List[ConfigVariable],
            'connection_revision': str,
            'connector_version': str,
            'connector_version_infra_config': ConnectorVersionInfraConfig,
            'connector_version_launch_stage': str,
            'create_time': str,
            'description': str,
            'destination_configs': List[DestinationConfig],
            'envoy_image_location': str,
            'eventing_config': EventingConfig,
            'eventing_enablement_type': str,
            'eventing_runtime_data': EventingRuntimeData,
            'image_location': str,
            'is_trusted_tester': bool,
            'labels': Dict[str, str],
            'lock_config': LockConfig,
            'log_config': ConnectorsLogConfig,
            'name': str,
            'node_config': NodeConfig,
            'service_account': str,
            'service_directory': str,
            'ssl_config': SslConfig,
            'status': ConnectionStatus,
            'subscription_type': str,
            'suspended': bool,
            'update_time': str
        }

        self.attribute_map = {
            'auth_config': 'authConfig',
            'config_variables': 'configVariables',
            'connection_revision': 'connectionRevision',
            'connector_version': 'connectorVersion',
            'connector_version_infra_config': 'connectorVersionInfraConfig',
            'connector_version_launch_stage': 'connectorVersionLaunchStage',
            'create_time': 'createTime',
            'description': 'description',
            'destination_configs': 'destinationConfigs',
            'envoy_image_location': 'envoyImageLocation',
            'eventing_config': 'eventingConfig',
            'eventing_enablement_type': 'eventingEnablementType',
            'eventing_runtime_data': 'eventingRuntimeData',
            'image_location': 'imageLocation',
            'is_trusted_tester': 'isTrustedTester',
            'labels': 'labels',
            'lock_config': 'lockConfig',
            'log_config': 'logConfig',
            'name': 'name',
            'node_config': 'nodeConfig',
            'service_account': 'serviceAccount',
            'service_directory': 'serviceDirectory',
            'ssl_config': 'sslConfig',
            'status': 'status',
            'subscription_type': 'subscriptionType',
            'suspended': 'suspended',
            'update_time': 'updateTime'
        }

        self._auth_config = auth_config
        self._config_variables = config_variables
        self._connection_revision = connection_revision
        self._connector_version = connector_version
        self._connector_version_infra_config = connector_version_infra_config
        self._connector_version_launch_stage = connector_version_launch_stage
        self._create_time = create_time
        self._description = description
        self._destination_configs = destination_configs
        self._envoy_image_location = envoy_image_location
        self._eventing_config = eventing_config
        self._eventing_enablement_type = eventing_enablement_type
        self._eventing_runtime_data = eventing_runtime_data
        self._image_location = image_location
        self._is_trusted_tester = is_trusted_tester
        self._labels = labels
        self._lock_config = lock_config
        self._log_config = log_config
        self._name = name
        self._node_config = node_config
        self._service_account = service_account
        self._service_directory = service_directory
        self._ssl_config = ssl_config
        self._status = status
        self._subscription_type = subscription_type
        self._suspended = suspended
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connection of this Connection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_config(self):
        """Gets the auth_config of this Connection.


        :return: The auth_config of this Connection.
        :rtype: AuthConfig
        """
        return self._auth_config

    @auth_config.setter
    def auth_config(self, auth_config):
        """Sets the auth_config of this Connection.


        :param auth_config: The auth_config of this Connection.
        :type auth_config: AuthConfig
        """

        self._auth_config = auth_config

    @property
    def config_variables(self):
        """Gets the config_variables of this Connection.

        Optional. Configuration for configuring the connection with an external system.

        :return: The config_variables of this Connection.
        :rtype: List[ConfigVariable]
        """
        return self._config_variables

    @config_variables.setter
    def config_variables(self, config_variables):
        """Sets the config_variables of this Connection.

        Optional. Configuration for configuring the connection with an external system.

        :param config_variables: The config_variables of this Connection.
        :type config_variables: List[ConfigVariable]
        """

        self._config_variables = config_variables

    @property
    def connection_revision(self):
        """Gets the connection_revision of this Connection.

        Output only. Connection revision. This field is only updated when the connection is created or updated by User.

        :return: The connection_revision of this Connection.
        :rtype: str
        """
        return self._connection_revision

    @connection_revision.setter
    def connection_revision(self, connection_revision):
        """Sets the connection_revision of this Connection.

        Output only. Connection revision. This field is only updated when the connection is created or updated by User.

        :param connection_revision: The connection_revision of this Connection.
        :type connection_revision: str
        """

        self._connection_revision = connection_revision

    @property
    def connector_version(self):
        """Gets the connector_version of this Connection.

        Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.

        :return: The connector_version of this Connection.
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this Connection.

        Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.

        :param connector_version: The connector_version of this Connection.
        :type connector_version: str
        """

        self._connector_version = connector_version

    @property
    def connector_version_infra_config(self):
        """Gets the connector_version_infra_config of this Connection.


        :return: The connector_version_infra_config of this Connection.
        :rtype: ConnectorVersionInfraConfig
        """
        return self._connector_version_infra_config

    @connector_version_infra_config.setter
    def connector_version_infra_config(self, connector_version_infra_config):
        """Sets the connector_version_infra_config of this Connection.


        :param connector_version_infra_config: The connector_version_infra_config of this Connection.
        :type connector_version_infra_config: ConnectorVersionInfraConfig
        """

        self._connector_version_infra_config = connector_version_infra_config

    @property
    def connector_version_launch_stage(self):
        """Gets the connector_version_launch_stage of this Connection.

        Output only. Flag to mark the version indicating the launch stage.

        :return: The connector_version_launch_stage of this Connection.
        :rtype: str
        """
        return self._connector_version_launch_stage

    @connector_version_launch_stage.setter
    def connector_version_launch_stage(self, connector_version_launch_stage):
        """Sets the connector_version_launch_stage of this Connection.

        Output only. Flag to mark the version indicating the launch stage.

        :param connector_version_launch_stage: The connector_version_launch_stage of this Connection.
        :type connector_version_launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "PREVIEW", "GA", "DEPRECATED", "PRIVATE_PREVIEW"]  # noqa: E501
        if connector_version_launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_version_launch_stage` ({0}), must be one of {1}"
                .format(connector_version_launch_stage, allowed_values)
            )

        self._connector_version_launch_stage = connector_version_launch_stage

    @property
    def create_time(self):
        """Gets the create_time of this Connection.

        Output only. Created time.

        :return: The create_time of this Connection.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Connection.

        Output only. Created time.

        :param create_time: The create_time of this Connection.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Connection.

        Optional. Description of the resource.

        :return: The description of this Connection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connection.

        Optional. Description of the resource.

        :param description: The description of this Connection.
        :type description: str
        """

        self._description = description

    @property
    def destination_configs(self):
        """Gets the destination_configs of this Connection.

        Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).

        :return: The destination_configs of this Connection.
        :rtype: List[DestinationConfig]
        """
        return self._destination_configs

    @destination_configs.setter
    def destination_configs(self, destination_configs):
        """Sets the destination_configs of this Connection.

        Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).

        :param destination_configs: The destination_configs of this Connection.
        :type destination_configs: List[DestinationConfig]
        """

        self._destination_configs = destination_configs

    @property
    def envoy_image_location(self):
        """Gets the envoy_image_location of this Connection.

        Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}

        :return: The envoy_image_location of this Connection.
        :rtype: str
        """
        return self._envoy_image_location

    @envoy_image_location.setter
    def envoy_image_location(self, envoy_image_location):
        """Sets the envoy_image_location of this Connection.

        Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}

        :param envoy_image_location: The envoy_image_location of this Connection.
        :type envoy_image_location: str
        """

        self._envoy_image_location = envoy_image_location

    @property
    def eventing_config(self):
        """Gets the eventing_config of this Connection.


        :return: The eventing_config of this Connection.
        :rtype: EventingConfig
        """
        return self._eventing_config

    @eventing_config.setter
    def eventing_config(self, eventing_config):
        """Sets the eventing_config of this Connection.


        :param eventing_config: The eventing_config of this Connection.
        :type eventing_config: EventingConfig
        """

        self._eventing_config = eventing_config

    @property
    def eventing_enablement_type(self):
        """Gets the eventing_enablement_type of this Connection.

        Optional. Eventing enablement type. Will be nil if eventing is not enabled.

        :return: The eventing_enablement_type of this Connection.
        :rtype: str
        """
        return self._eventing_enablement_type

    @eventing_enablement_type.setter
    def eventing_enablement_type(self, eventing_enablement_type):
        """Sets the eventing_enablement_type of this Connection.

        Optional. Eventing enablement type. Will be nil if eventing is not enabled.

        :param eventing_enablement_type: The eventing_enablement_type of this Connection.
        :type eventing_enablement_type: str
        """
        allowed_values = ["EVENTING_ENABLEMENT_TYPE_UNSPECIFIED", "EVENTING_AND_CONNECTION", "ONLY_EVENTING"]  # noqa: E501
        if eventing_enablement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `eventing_enablement_type` ({0}), must be one of {1}"
                .format(eventing_enablement_type, allowed_values)
            )

        self._eventing_enablement_type = eventing_enablement_type

    @property
    def eventing_runtime_data(self):
        """Gets the eventing_runtime_data of this Connection.


        :return: The eventing_runtime_data of this Connection.
        :rtype: EventingRuntimeData
        """
        return self._eventing_runtime_data

    @eventing_runtime_data.setter
    def eventing_runtime_data(self, eventing_runtime_data):
        """Sets the eventing_runtime_data of this Connection.


        :param eventing_runtime_data: The eventing_runtime_data of this Connection.
        :type eventing_runtime_data: EventingRuntimeData
        """

        self._eventing_runtime_data = eventing_runtime_data

    @property
    def image_location(self):
        """Gets the image_location of this Connection.

        Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}

        :return: The image_location of this Connection.
        :rtype: str
        """
        return self._image_location

    @image_location.setter
    def image_location(self, image_location):
        """Sets the image_location of this Connection.

        Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}

        :param image_location: The image_location of this Connection.
        :type image_location: str
        """

        self._image_location = image_location

    @property
    def is_trusted_tester(self):
        """Gets the is_trusted_tester of this Connection.

        Output only. Is trusted tester program enabled for the project.

        :return: The is_trusted_tester of this Connection.
        :rtype: bool
        """
        return self._is_trusted_tester

    @is_trusted_tester.setter
    def is_trusted_tester(self, is_trusted_tester):
        """Sets the is_trusted_tester of this Connection.

        Output only. Is trusted tester program enabled for the project.

        :param is_trusted_tester: The is_trusted_tester of this Connection.
        :type is_trusted_tester: bool
        """

        self._is_trusted_tester = is_trusted_tester

    @property
    def labels(self):
        """Gets the labels of this Connection.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this Connection.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Connection.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this Connection.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lock_config(self):
        """Gets the lock_config of this Connection.


        :return: The lock_config of this Connection.
        :rtype: LockConfig
        """
        return self._lock_config

    @lock_config.setter
    def lock_config(self, lock_config):
        """Sets the lock_config of this Connection.


        :param lock_config: The lock_config of this Connection.
        :type lock_config: LockConfig
        """

        self._lock_config = lock_config

    @property
    def log_config(self):
        """Gets the log_config of this Connection.


        :return: The log_config of this Connection.
        :rtype: ConnectorsLogConfig
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config):
        """Sets the log_config of this Connection.


        :param log_config: The log_config of this Connection.
        :type log_config: ConnectorsLogConfig
        """

        self._log_config = log_config

    @property
    def name(self):
        """Gets the name of this Connection.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}

        :return: The name of this Connection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}

        :param name: The name of this Connection.
        :type name: str
        """

        self._name = name

    @property
    def node_config(self):
        """Gets the node_config of this Connection.


        :return: The node_config of this Connection.
        :rtype: NodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this Connection.


        :param node_config: The node_config of this Connection.
        :type node_config: NodeConfig
        """

        self._node_config = node_config

    @property
    def service_account(self):
        """Gets the service_account of this Connection.

        Optional. Service account needed for runtime plane to access Google Cloud resources.

        :return: The service_account of this Connection.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Connection.

        Optional. Service account needed for runtime plane to access Google Cloud resources.

        :param service_account: The service_account of this Connection.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def service_directory(self):
        """Gets the service_directory of this Connection.

        Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. \"projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors\"

        :return: The service_directory of this Connection.
        :rtype: str
        """
        return self._service_directory

    @service_directory.setter
    def service_directory(self, service_directory):
        """Sets the service_directory of this Connection.

        Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. \"projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors\"

        :param service_directory: The service_directory of this Connection.
        :type service_directory: str
        """

        self._service_directory = service_directory

    @property
    def ssl_config(self):
        """Gets the ssl_config of this Connection.


        :return: The ssl_config of this Connection.
        :rtype: SslConfig
        """
        return self._ssl_config

    @ssl_config.setter
    def ssl_config(self, ssl_config):
        """Sets the ssl_config of this Connection.


        :param ssl_config: The ssl_config of this Connection.
        :type ssl_config: SslConfig
        """

        self._ssl_config = ssl_config

    @property
    def status(self):
        """Gets the status of this Connection.


        :return: The status of this Connection.
        :rtype: ConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Connection.


        :param status: The status of this Connection.
        :type status: ConnectionStatus
        """

        self._status = status

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Connection.

        Output only. This subscription type enum states the subscription type of the project.

        :return: The subscription_type of this Connection.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Connection.

        Output only. This subscription type enum states the subscription type of the project.

        :param subscription_type: The subscription_type of this Connection.
        :type subscription_type: str
        """
        allowed_values = ["SUBSCRIPTION_TYPE_UNSPECIFIED", "PAY_G", "PAID"]  # noqa: E501
        if subscription_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_type` ({0}), must be one of {1}"
                .format(subscription_type, allowed_values)
            )

        self._subscription_type = subscription_type

    @property
    def suspended(self):
        """Gets the suspended of this Connection.

        Optional. Suspended indicates if a user has suspended a connection or not.

        :return: The suspended of this Connection.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this Connection.

        Optional. Suspended indicates if a user has suspended a connection or not.

        :param suspended: The suspended of this Connection.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def update_time(self):
        """Gets the update_time of this Connection.

        Output only. Updated time.

        :return: The update_time of this Connection.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Connection.

        Output only. Updated time.

        :param update_time: The update_time of this Connection.
        :type update_time: str
        """

        self._update_time = update_time
