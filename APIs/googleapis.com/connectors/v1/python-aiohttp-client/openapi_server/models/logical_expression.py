# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_comparison import FieldComparison
from openapi_server import util


class LogicalExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_comparisons: List[FieldComparison]=None, logical_expressions: List[LogicalExpression]=None, logical_operator: str=None):
        """LogicalExpression - a model defined in OpenAPI

        :param field_comparisons: The field_comparisons of this LogicalExpression.
        :param logical_expressions: The logical_expressions of this LogicalExpression.
        :param logical_operator: The logical_operator of this LogicalExpression.
        """
        self.openapi_types = {
            'field_comparisons': List[FieldComparison],
            'logical_expressions': List[LogicalExpression],
            'logical_operator': str
        }

        self.attribute_map = {
            'field_comparisons': 'fieldComparisons',
            'logical_expressions': 'logicalExpressions',
            'logical_operator': 'logicalOperator'
        }

        self._field_comparisons = field_comparisons
        self._logical_expressions = logical_expressions
        self._logical_operator = logical_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalExpression of this LogicalExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_comparisons(self):
        """Gets the field_comparisons of this LogicalExpression.

        A list of fields to be compared.

        :return: The field_comparisons of this LogicalExpression.
        :rtype: List[FieldComparison]
        """
        return self._field_comparisons

    @field_comparisons.setter
    def field_comparisons(self, field_comparisons):
        """Sets the field_comparisons of this LogicalExpression.

        A list of fields to be compared.

        :param field_comparisons: The field_comparisons of this LogicalExpression.
        :type field_comparisons: List[FieldComparison]
        """

        self._field_comparisons = field_comparisons

    @property
    def logical_expressions(self):
        """Gets the logical_expressions of this LogicalExpression.

        A list of nested conditions to be compared.

        :return: The logical_expressions of this LogicalExpression.
        :rtype: List[LogicalExpression]
        """
        return self._logical_expressions

    @logical_expressions.setter
    def logical_expressions(self, logical_expressions):
        """Sets the logical_expressions of this LogicalExpression.

        A list of nested conditions to be compared.

        :param logical_expressions: The logical_expressions of this LogicalExpression.
        :type logical_expressions: List[LogicalExpression]
        """

        self._logical_expressions = logical_expressions

    @property
    def logical_operator(self):
        """Gets the logical_operator of this LogicalExpression.

        The logical operator to use between the fields and conditions.

        :return: The logical_operator of this LogicalExpression.
        :rtype: str
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this LogicalExpression.

        The logical operator to use between the fields and conditions.

        :param logical_operator: The logical_operator of this LogicalExpression.
        :type logical_operator: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "AND", "OR"]  # noqa: E501
        if logical_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_operator` ({0}), must be one of {1}"
                .format(logical_operator, allowed_values)
            )

        self._logical_operator = logical_operator
