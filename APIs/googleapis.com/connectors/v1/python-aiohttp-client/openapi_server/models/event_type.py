# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, enriched_event_payload_schema: str=None, entity_type: str=None, event_payload_schema: str=None, event_type_id: str=None, id_path: str=None, name: str=None, update_time: str=None):
        """EventType - a model defined in OpenAPI

        :param create_time: The create_time of this EventType.
        :param enriched_event_payload_schema: The enriched_event_payload_schema of this EventType.
        :param entity_type: The entity_type of this EventType.
        :param event_payload_schema: The event_payload_schema of this EventType.
        :param event_type_id: The event_type_id of this EventType.
        :param id_path: The id_path of this EventType.
        :param name: The name of this EventType.
        :param update_time: The update_time of this EventType.
        """
        self.openapi_types = {
            'create_time': str,
            'enriched_event_payload_schema': str,
            'entity_type': str,
            'event_payload_schema': str,
            'event_type_id': str,
            'id_path': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'enriched_event_payload_schema': 'enrichedEventPayloadSchema',
            'entity_type': 'entityType',
            'event_payload_schema': 'eventPayloadSchema',
            'event_type_id': 'eventTypeId',
            'id_path': 'idPath',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._enriched_event_payload_schema = enriched_event_payload_schema
        self._entity_type = entity_type
        self._event_payload_schema = event_payload_schema
        self._event_type_id = event_type_id
        self._id_path = id_path
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventType of this EventType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this EventType.

        Output only. Created time.

        :return: The create_time of this EventType.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this EventType.

        Output only. Created time.

        :param create_time: The create_time of this EventType.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def enriched_event_payload_schema(self):
        """Gets the enriched_event_payload_schema of this EventType.

        Output only. Schema of the event payload after enriched. Will be null if read before send is not supported.

        :return: The enriched_event_payload_schema of this EventType.
        :rtype: str
        """
        return self._enriched_event_payload_schema

    @enriched_event_payload_schema.setter
    def enriched_event_payload_schema(self, enriched_event_payload_schema):
        """Sets the enriched_event_payload_schema of this EventType.

        Output only. Schema of the event payload after enriched. Will be null if read before send is not supported.

        :param enriched_event_payload_schema: The enriched_event_payload_schema of this EventType.
        :type enriched_event_payload_schema: str
        """

        self._enriched_event_payload_schema = enriched_event_payload_schema

    @property
    def entity_type(self):
        """Gets the entity_type of this EventType.

        Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature.

        :return: The entity_type of this EventType.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EventType.

        Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature.

        :param entity_type: The entity_type of this EventType.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def event_payload_schema(self):
        """Gets the event_payload_schema of this EventType.

        Output only. Schema of webhook event payload.

        :return: The event_payload_schema of this EventType.
        :rtype: str
        """
        return self._event_payload_schema

    @event_payload_schema.setter
    def event_payload_schema(self, event_payload_schema):
        """Sets the event_payload_schema of this EventType.

        Output only. Schema of webhook event payload.

        :param event_payload_schema: The event_payload_schema of this EventType.
        :type event_payload_schema: str
        """

        self._event_payload_schema = event_payload_schema

    @property
    def event_type_id(self):
        """Gets the event_type_id of this EventType.

        Output only. Event type id. Example: `ticket.created`.

        :return: The event_type_id of this EventType.
        :rtype: str
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this EventType.

        Output only. Event type id. Example: `ticket.created`.

        :param event_type_id: The event_type_id of this EventType.
        :type event_type_id: str
        """

        self._event_type_id = event_type_id

    @property
    def id_path(self):
        """Gets the id_path of this EventType.

        Output only. Id path denotes the path of id in webhook payload.

        :return: The id_path of this EventType.
        :rtype: str
        """
        return self._id_path

    @id_path.setter
    def id_path(self, id_path):
        """Sets the id_path of this EventType.

        Output only. Id path denotes the path of id in webhook payload.

        :param id_path: The id_path of this EventType.
        :type id_path: str
        """

        self._id_path = id_path

    @property
    def name(self):
        """Gets the name of this EventType.

        Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype} Only global location is supported for Connector resource.

        :return: The name of this EventType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventType.

        Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype} Only global location is supported for Connector resource.

        :param name: The name of this EventType.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this EventType.

        Output only. Updated time.

        :return: The update_time of this EventType.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this EventType.

        Output only. Updated time.

        :param update_time: The update_time of this EventType.
        :type update_time: str
        """

        self._update_time = update_time
