# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slo_eligibility import SloEligibility
from openapi_server import util


class PerSliSloEligibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligibilities: Dict[str, SloEligibility]=None):
        """PerSliSloEligibility - a model defined in OpenAPI

        :param eligibilities: The eligibilities of this PerSliSloEligibility.
        """
        self.openapi_types = {
            'eligibilities': Dict[str, SloEligibility]
        }

        self.attribute_map = {
            'eligibilities': 'eligibilities'
        }

        self._eligibilities = eligibilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerSliSloEligibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerSliSloEligibility of this PerSliSloEligibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligibilities(self):
        """Gets the eligibilities of this PerSliSloEligibility.

        An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.

        :return: The eligibilities of this PerSliSloEligibility.
        :rtype: Dict[str, SloEligibility]
        """
        return self._eligibilities

    @eligibilities.setter
    def eligibilities(self, eligibilities):
        """Sets the eligibilities of this PerSliSloEligibility.

        An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.

        :param eligibilities: The eligibilities of this PerSliSloEligibility.
        :type eligibilities: Dict[str, SloEligibility]
        """

        self._eligibilities = eligibilities
