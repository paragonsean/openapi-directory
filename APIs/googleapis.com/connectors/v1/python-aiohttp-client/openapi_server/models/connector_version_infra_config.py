# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hpa_config import HPAConfig
from openapi_server.models.resource_limits import ResourceLimits
from openapi_server.models.resource_requests import ResourceRequests
from openapi_server import util


class ConnectorVersionInfraConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_ratelimit_window_seconds: str=None, deployment_model: str=None, hpa_config: HPAConfig=None, internalclient_ratelimit_threshold: str=None, ratelimit_threshold: str=None, resource_limits: ResourceLimits=None, resource_requests: ResourceRequests=None, shared_deployment: str=None):
        """ConnectorVersionInfraConfig - a model defined in OpenAPI

        :param connection_ratelimit_window_seconds: The connection_ratelimit_window_seconds of this ConnectorVersionInfraConfig.
        :param deployment_model: The deployment_model of this ConnectorVersionInfraConfig.
        :param hpa_config: The hpa_config of this ConnectorVersionInfraConfig.
        :param internalclient_ratelimit_threshold: The internalclient_ratelimit_threshold of this ConnectorVersionInfraConfig.
        :param ratelimit_threshold: The ratelimit_threshold of this ConnectorVersionInfraConfig.
        :param resource_limits: The resource_limits of this ConnectorVersionInfraConfig.
        :param resource_requests: The resource_requests of this ConnectorVersionInfraConfig.
        :param shared_deployment: The shared_deployment of this ConnectorVersionInfraConfig.
        """
        self.openapi_types = {
            'connection_ratelimit_window_seconds': str,
            'deployment_model': str,
            'hpa_config': HPAConfig,
            'internalclient_ratelimit_threshold': str,
            'ratelimit_threshold': str,
            'resource_limits': ResourceLimits,
            'resource_requests': ResourceRequests,
            'shared_deployment': str
        }

        self.attribute_map = {
            'connection_ratelimit_window_seconds': 'connectionRatelimitWindowSeconds',
            'deployment_model': 'deploymentModel',
            'hpa_config': 'hpaConfig',
            'internalclient_ratelimit_threshold': 'internalclientRatelimitThreshold',
            'ratelimit_threshold': 'ratelimitThreshold',
            'resource_limits': 'resourceLimits',
            'resource_requests': 'resourceRequests',
            'shared_deployment': 'sharedDeployment'
        }

        self._connection_ratelimit_window_seconds = connection_ratelimit_window_seconds
        self._deployment_model = deployment_model
        self._hpa_config = hpa_config
        self._internalclient_ratelimit_threshold = internalclient_ratelimit_threshold
        self._ratelimit_threshold = ratelimit_threshold
        self._resource_limits = resource_limits
        self._resource_requests = resource_requests
        self._shared_deployment = shared_deployment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorVersionInfraConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorVersionInfraConfig of this ConnectorVersionInfraConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_ratelimit_window_seconds(self):
        """Gets the connection_ratelimit_window_seconds of this ConnectorVersionInfraConfig.

        Output only. The window used for ratelimiting runtime requests to connections.

        :return: The connection_ratelimit_window_seconds of this ConnectorVersionInfraConfig.
        :rtype: str
        """
        return self._connection_ratelimit_window_seconds

    @connection_ratelimit_window_seconds.setter
    def connection_ratelimit_window_seconds(self, connection_ratelimit_window_seconds):
        """Sets the connection_ratelimit_window_seconds of this ConnectorVersionInfraConfig.

        Output only. The window used for ratelimiting runtime requests to connections.

        :param connection_ratelimit_window_seconds: The connection_ratelimit_window_seconds of this ConnectorVersionInfraConfig.
        :type connection_ratelimit_window_seconds: str
        """

        self._connection_ratelimit_window_seconds = connection_ratelimit_window_seconds

    @property
    def deployment_model(self):
        """Gets the deployment_model of this ConnectorVersionInfraConfig.

        Optional. Indicates whether connector is deployed on GKE/CloudRun

        :return: The deployment_model of this ConnectorVersionInfraConfig.
        :rtype: str
        """
        return self._deployment_model

    @deployment_model.setter
    def deployment_model(self, deployment_model):
        """Sets the deployment_model of this ConnectorVersionInfraConfig.

        Optional. Indicates whether connector is deployed on GKE/CloudRun

        :param deployment_model: The deployment_model of this ConnectorVersionInfraConfig.
        :type deployment_model: str
        """
        allowed_values = ["DEPLOYMENT_MODEL_UNSPECIFIED", "GKE_MST", "CLOUD_RUN_MST"]  # noqa: E501
        if deployment_model not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_model` ({0}), must be one of {1}"
                .format(deployment_model, allowed_values)
            )

        self._deployment_model = deployment_model

    @property
    def hpa_config(self):
        """Gets the hpa_config of this ConnectorVersionInfraConfig.


        :return: The hpa_config of this ConnectorVersionInfraConfig.
        :rtype: HPAConfig
        """
        return self._hpa_config

    @hpa_config.setter
    def hpa_config(self, hpa_config):
        """Sets the hpa_config of this ConnectorVersionInfraConfig.


        :param hpa_config: The hpa_config of this ConnectorVersionInfraConfig.
        :type hpa_config: HPAConfig
        """

        self._hpa_config = hpa_config

    @property
    def internalclient_ratelimit_threshold(self):
        """Gets the internalclient_ratelimit_threshold of this ConnectorVersionInfraConfig.

        Output only. Max QPS supported for internal requests originating from Connd.

        :return: The internalclient_ratelimit_threshold of this ConnectorVersionInfraConfig.
        :rtype: str
        """
        return self._internalclient_ratelimit_threshold

    @internalclient_ratelimit_threshold.setter
    def internalclient_ratelimit_threshold(self, internalclient_ratelimit_threshold):
        """Sets the internalclient_ratelimit_threshold of this ConnectorVersionInfraConfig.

        Output only. Max QPS supported for internal requests originating from Connd.

        :param internalclient_ratelimit_threshold: The internalclient_ratelimit_threshold of this ConnectorVersionInfraConfig.
        :type internalclient_ratelimit_threshold: str
        """

        self._internalclient_ratelimit_threshold = internalclient_ratelimit_threshold

    @property
    def ratelimit_threshold(self):
        """Gets the ratelimit_threshold of this ConnectorVersionInfraConfig.

        Output only. Max QPS supported by the connector version before throttling of requests.

        :return: The ratelimit_threshold of this ConnectorVersionInfraConfig.
        :rtype: str
        """
        return self._ratelimit_threshold

    @ratelimit_threshold.setter
    def ratelimit_threshold(self, ratelimit_threshold):
        """Sets the ratelimit_threshold of this ConnectorVersionInfraConfig.

        Output only. Max QPS supported by the connector version before throttling of requests.

        :param ratelimit_threshold: The ratelimit_threshold of this ConnectorVersionInfraConfig.
        :type ratelimit_threshold: str
        """

        self._ratelimit_threshold = ratelimit_threshold

    @property
    def resource_limits(self):
        """Gets the resource_limits of this ConnectorVersionInfraConfig.


        :return: The resource_limits of this ConnectorVersionInfraConfig.
        :rtype: ResourceLimits
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this ConnectorVersionInfraConfig.


        :param resource_limits: The resource_limits of this ConnectorVersionInfraConfig.
        :type resource_limits: ResourceLimits
        """

        self._resource_limits = resource_limits

    @property
    def resource_requests(self):
        """Gets the resource_requests of this ConnectorVersionInfraConfig.


        :return: The resource_requests of this ConnectorVersionInfraConfig.
        :rtype: ResourceRequests
        """
        return self._resource_requests

    @resource_requests.setter
    def resource_requests(self, resource_requests):
        """Sets the resource_requests of this ConnectorVersionInfraConfig.


        :param resource_requests: The resource_requests of this ConnectorVersionInfraConfig.
        :type resource_requests: ResourceRequests
        """

        self._resource_requests = resource_requests

    @property
    def shared_deployment(self):
        """Gets the shared_deployment of this ConnectorVersionInfraConfig.

        Output only. The name of shared connector deployment.

        :return: The shared_deployment of this ConnectorVersionInfraConfig.
        :rtype: str
        """
        return self._shared_deployment

    @shared_deployment.setter
    def shared_deployment(self, shared_deployment):
        """Sets the shared_deployment of this ConnectorVersionInfraConfig.

        Output only. The name of shared connector deployment.

        :param shared_deployment: The shared_deployment of this ConnectorVersionInfraConfig.
        :type shared_deployment: str
        """

        self._shared_deployment = shared_deployment
