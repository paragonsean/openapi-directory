# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.maintenance_policy import MaintenancePolicy
from openapi_server import util


class MaintenanceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude: bool=None, is_rollback: bool=None, maintenance_policies: Dict[str, MaintenancePolicy]=None):
        """MaintenanceSettings - a model defined in OpenAPI

        :param exclude: The exclude of this MaintenanceSettings.
        :param is_rollback: The is_rollback of this MaintenanceSettings.
        :param maintenance_policies: The maintenance_policies of this MaintenanceSettings.
        """
        self.openapi_types = {
            'exclude': bool,
            'is_rollback': bool,
            'maintenance_policies': Dict[str, MaintenancePolicy]
        }

        self.attribute_map = {
            'exclude': 'exclude',
            'is_rollback': 'isRollback',
            'maintenance_policies': 'maintenancePolicies'
        }

        self._exclude = exclude
        self._is_rollback = is_rollback
        self._maintenance_policies = maintenance_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceSettings of this MaintenanceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude(self):
        """Gets the exclude of this MaintenanceSettings.

        Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.

        :return: The exclude of this MaintenanceSettings.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this MaintenanceSettings.

        Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.

        :param exclude: The exclude of this MaintenanceSettings.
        :type exclude: bool
        """

        self._exclude = exclude

    @property
    def is_rollback(self):
        """Gets the is_rollback of this MaintenanceSettings.

        Optional. If the update call is triggered from rollback, set the value as true.

        :return: The is_rollback of this MaintenanceSettings.
        :rtype: bool
        """
        return self._is_rollback

    @is_rollback.setter
    def is_rollback(self, is_rollback):
        """Sets the is_rollback of this MaintenanceSettings.

        Optional. If the update call is triggered from rollback, set the value as true.

        :param is_rollback: The is_rollback of this MaintenanceSettings.
        :type is_rollback: bool
        """

        self._is_rollback = is_rollback

    @property
    def maintenance_policies(self):
        """Gets the maintenance_policies of this MaintenanceSettings.

        Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name.

        :return: The maintenance_policies of this MaintenanceSettings.
        :rtype: Dict[str, MaintenancePolicy]
        """
        return self._maintenance_policies

    @maintenance_policies.setter
    def maintenance_policies(self, maintenance_policies):
        """Sets the maintenance_policies of this MaintenanceSettings.

        Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name.

        :param maintenance_policies: The maintenance_policies of this MaintenanceSettings.
        :type maintenance_policies: Dict[str, MaintenancePolicy]
        """

        self._maintenance_policies = maintenance_policies
