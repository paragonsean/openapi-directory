# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_config import AuthConfig
from openapi_server.models.config_variable import ConfigVariable
from openapi_server.models.dead_letter_config import DeadLetterConfig
from openapi_server.models.destination_config import DestinationConfig
from openapi_server import util


class EventingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_variables: List[ConfigVariable]=None, auth_config: AuthConfig=None, dead_letter_config: DeadLetterConfig=None, enrichment_enabled: bool=None, events_listener_ingress_endpoint: str=None, listener_auth_config: AuthConfig=None, private_connectivity_enabled: bool=None, proxy_destination_config: DestinationConfig=None, registration_destination_config: DestinationConfig=None, trigger_config_variables: List[ConfigVariable]=None):
        """EventingConfig - a model defined in OpenAPI

        :param additional_variables: The additional_variables of this EventingConfig.
        :param auth_config: The auth_config of this EventingConfig.
        :param dead_letter_config: The dead_letter_config of this EventingConfig.
        :param enrichment_enabled: The enrichment_enabled of this EventingConfig.
        :param events_listener_ingress_endpoint: The events_listener_ingress_endpoint of this EventingConfig.
        :param listener_auth_config: The listener_auth_config of this EventingConfig.
        :param private_connectivity_enabled: The private_connectivity_enabled of this EventingConfig.
        :param proxy_destination_config: The proxy_destination_config of this EventingConfig.
        :param registration_destination_config: The registration_destination_config of this EventingConfig.
        :param trigger_config_variables: The trigger_config_variables of this EventingConfig.
        """
        self.openapi_types = {
            'additional_variables': List[ConfigVariable],
            'auth_config': AuthConfig,
            'dead_letter_config': DeadLetterConfig,
            'enrichment_enabled': bool,
            'events_listener_ingress_endpoint': str,
            'listener_auth_config': AuthConfig,
            'private_connectivity_enabled': bool,
            'proxy_destination_config': DestinationConfig,
            'registration_destination_config': DestinationConfig,
            'trigger_config_variables': List[ConfigVariable]
        }

        self.attribute_map = {
            'additional_variables': 'additionalVariables',
            'auth_config': 'authConfig',
            'dead_letter_config': 'deadLetterConfig',
            'enrichment_enabled': 'enrichmentEnabled',
            'events_listener_ingress_endpoint': 'eventsListenerIngressEndpoint',
            'listener_auth_config': 'listenerAuthConfig',
            'private_connectivity_enabled': 'privateConnectivityEnabled',
            'proxy_destination_config': 'proxyDestinationConfig',
            'registration_destination_config': 'registrationDestinationConfig',
            'trigger_config_variables': 'triggerConfigVariables'
        }

        self._additional_variables = additional_variables
        self._auth_config = auth_config
        self._dead_letter_config = dead_letter_config
        self._enrichment_enabled = enrichment_enabled
        self._events_listener_ingress_endpoint = events_listener_ingress_endpoint
        self._listener_auth_config = listener_auth_config
        self._private_connectivity_enabled = private_connectivity_enabled
        self._proxy_destination_config = proxy_destination_config
        self._registration_destination_config = registration_destination_config
        self._trigger_config_variables = trigger_config_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventingConfig of this EventingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_variables(self):
        """Gets the additional_variables of this EventingConfig.

        Additional eventing related field values

        :return: The additional_variables of this EventingConfig.
        :rtype: List[ConfigVariable]
        """
        return self._additional_variables

    @additional_variables.setter
    def additional_variables(self, additional_variables):
        """Sets the additional_variables of this EventingConfig.

        Additional eventing related field values

        :param additional_variables: The additional_variables of this EventingConfig.
        :type additional_variables: List[ConfigVariable]
        """

        self._additional_variables = additional_variables

    @property
    def auth_config(self):
        """Gets the auth_config of this EventingConfig.


        :return: The auth_config of this EventingConfig.
        :rtype: AuthConfig
        """
        return self._auth_config

    @auth_config.setter
    def auth_config(self, auth_config):
        """Sets the auth_config of this EventingConfig.


        :param auth_config: The auth_config of this EventingConfig.
        :type auth_config: AuthConfig
        """

        self._auth_config = auth_config

    @property
    def dead_letter_config(self):
        """Gets the dead_letter_config of this EventingConfig.


        :return: The dead_letter_config of this EventingConfig.
        :rtype: DeadLetterConfig
        """
        return self._dead_letter_config

    @dead_letter_config.setter
    def dead_letter_config(self, dead_letter_config):
        """Sets the dead_letter_config of this EventingConfig.


        :param dead_letter_config: The dead_letter_config of this EventingConfig.
        :type dead_letter_config: DeadLetterConfig
        """

        self._dead_letter_config = dead_letter_config

    @property
    def enrichment_enabled(self):
        """Gets the enrichment_enabled of this EventingConfig.

        Enrichment Enabled.

        :return: The enrichment_enabled of this EventingConfig.
        :rtype: bool
        """
        return self._enrichment_enabled

    @enrichment_enabled.setter
    def enrichment_enabled(self, enrichment_enabled):
        """Sets the enrichment_enabled of this EventingConfig.

        Enrichment Enabled.

        :param enrichment_enabled: The enrichment_enabled of this EventingConfig.
        :type enrichment_enabled: bool
        """

        self._enrichment_enabled = enrichment_enabled

    @property
    def events_listener_ingress_endpoint(self):
        """Gets the events_listener_ingress_endpoint of this EventingConfig.

        Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.

        :return: The events_listener_ingress_endpoint of this EventingConfig.
        :rtype: str
        """
        return self._events_listener_ingress_endpoint

    @events_listener_ingress_endpoint.setter
    def events_listener_ingress_endpoint(self, events_listener_ingress_endpoint):
        """Sets the events_listener_ingress_endpoint of this EventingConfig.

        Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.

        :param events_listener_ingress_endpoint: The events_listener_ingress_endpoint of this EventingConfig.
        :type events_listener_ingress_endpoint: str
        """

        self._events_listener_ingress_endpoint = events_listener_ingress_endpoint

    @property
    def listener_auth_config(self):
        """Gets the listener_auth_config of this EventingConfig.


        :return: The listener_auth_config of this EventingConfig.
        :rtype: AuthConfig
        """
        return self._listener_auth_config

    @listener_auth_config.setter
    def listener_auth_config(self, listener_auth_config):
        """Sets the listener_auth_config of this EventingConfig.


        :param listener_auth_config: The listener_auth_config of this EventingConfig.
        :type listener_auth_config: AuthConfig
        """

        self._listener_auth_config = listener_auth_config

    @property
    def private_connectivity_enabled(self):
        """Gets the private_connectivity_enabled of this EventingConfig.

        Optional. Private Connectivity Enabled.

        :return: The private_connectivity_enabled of this EventingConfig.
        :rtype: bool
        """
        return self._private_connectivity_enabled

    @private_connectivity_enabled.setter
    def private_connectivity_enabled(self, private_connectivity_enabled):
        """Sets the private_connectivity_enabled of this EventingConfig.

        Optional. Private Connectivity Enabled.

        :param private_connectivity_enabled: The private_connectivity_enabled of this EventingConfig.
        :type private_connectivity_enabled: bool
        """

        self._private_connectivity_enabled = private_connectivity_enabled

    @property
    def proxy_destination_config(self):
        """Gets the proxy_destination_config of this EventingConfig.


        :return: The proxy_destination_config of this EventingConfig.
        :rtype: DestinationConfig
        """
        return self._proxy_destination_config

    @proxy_destination_config.setter
    def proxy_destination_config(self, proxy_destination_config):
        """Sets the proxy_destination_config of this EventingConfig.


        :param proxy_destination_config: The proxy_destination_config of this EventingConfig.
        :type proxy_destination_config: DestinationConfig
        """

        self._proxy_destination_config = proxy_destination_config

    @property
    def registration_destination_config(self):
        """Gets the registration_destination_config of this EventingConfig.


        :return: The registration_destination_config of this EventingConfig.
        :rtype: DestinationConfig
        """
        return self._registration_destination_config

    @registration_destination_config.setter
    def registration_destination_config(self, registration_destination_config):
        """Sets the registration_destination_config of this EventingConfig.


        :param registration_destination_config: The registration_destination_config of this EventingConfig.
        :type registration_destination_config: DestinationConfig
        """

        self._registration_destination_config = registration_destination_config

    @property
    def trigger_config_variables(self):
        """Gets the trigger_config_variables of this EventingConfig.

        Optional. Additional eventing related field values

        :return: The trigger_config_variables of this EventingConfig.
        :rtype: List[ConfigVariable]
        """
        return self._trigger_config_variables

    @trigger_config_variables.setter
    def trigger_config_variables(self, trigger_config_variables):
        """Sets the trigger_config_variables of this EventingConfig.

        Optional. Additional eventing related field values

        :param trigger_config_variables: The trigger_config_variables of this EventingConfig.
        :type trigger_config_variables: List[ConfigVariable]
        """

        self._trigger_config_variables = trigger_config_variables
