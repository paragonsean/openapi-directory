# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_type: str=None, kms_key_name: str=None):
        """EncryptionConfig - a model defined in OpenAPI

        :param encryption_type: The encryption_type of this EncryptionConfig.
        :param kms_key_name: The kms_key_name of this EncryptionConfig.
        """
        self.openapi_types = {
            'encryption_type': str,
            'kms_key_name': str
        }

        self.attribute_map = {
            'encryption_type': 'encryptionType',
            'kms_key_name': 'kmsKeyName'
        }

        self._encryption_type = encryption_type
        self._kms_key_name = kms_key_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionConfig of this EncryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_type(self):
        """Gets the encryption_type of this EncryptionConfig.

        Optional. Encryption type for the region.

        :return: The encryption_type of this EncryptionConfig.
        :rtype: str
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this EncryptionConfig.

        Optional. Encryption type for the region.

        :param encryption_type: The encryption_type of this EncryptionConfig.
        :type encryption_type: str
        """
        allowed_values = ["ENCRYPTION_TYPE_UNSPECIFIED", "GMEK", "CMEK"]  # noqa: E501
        if encryption_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_type` ({0}), must be one of {1}"
                .format(encryption_type, allowed_values)
            )

        self._encryption_type = encryption_type

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this EncryptionConfig.

        Optional. KMS crypto key. This field accepts identifiers of the form `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/ {crypto_key}`

        :return: The kms_key_name of this EncryptionConfig.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this EncryptionConfig.

        Optional. KMS crypto key. This field accepts identifiers of the form `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/ {crypto_key}`

        :param kms_key_name: The kms_key_name of this EncryptionConfig.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name
