# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_variable import ConfigVariable
from openapi_server.models.secret import Secret
from openapi_server import util


class SslConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_variables: List[ConfigVariable]=None, client_cert_type: str=None, client_certificate: Secret=None, client_private_key: Secret=None, client_private_key_pass: Secret=None, private_server_certificate: Secret=None, server_cert_type: str=None, trust_model: str=None, type: str=None, use_ssl: bool=None):
        """SslConfig - a model defined in OpenAPI

        :param additional_variables: The additional_variables of this SslConfig.
        :param client_cert_type: The client_cert_type of this SslConfig.
        :param client_certificate: The client_certificate of this SslConfig.
        :param client_private_key: The client_private_key of this SslConfig.
        :param client_private_key_pass: The client_private_key_pass of this SslConfig.
        :param private_server_certificate: The private_server_certificate of this SslConfig.
        :param server_cert_type: The server_cert_type of this SslConfig.
        :param trust_model: The trust_model of this SslConfig.
        :param type: The type of this SslConfig.
        :param use_ssl: The use_ssl of this SslConfig.
        """
        self.openapi_types = {
            'additional_variables': List[ConfigVariable],
            'client_cert_type': str,
            'client_certificate': Secret,
            'client_private_key': Secret,
            'client_private_key_pass': Secret,
            'private_server_certificate': Secret,
            'server_cert_type': str,
            'trust_model': str,
            'type': str,
            'use_ssl': bool
        }

        self.attribute_map = {
            'additional_variables': 'additionalVariables',
            'client_cert_type': 'clientCertType',
            'client_certificate': 'clientCertificate',
            'client_private_key': 'clientPrivateKey',
            'client_private_key_pass': 'clientPrivateKeyPass',
            'private_server_certificate': 'privateServerCertificate',
            'server_cert_type': 'serverCertType',
            'trust_model': 'trustModel',
            'type': 'type',
            'use_ssl': 'useSsl'
        }

        self._additional_variables = additional_variables
        self._client_cert_type = client_cert_type
        self._client_certificate = client_certificate
        self._client_private_key = client_private_key
        self._client_private_key_pass = client_private_key_pass
        self._private_server_certificate = private_server_certificate
        self._server_cert_type = server_cert_type
        self._trust_model = trust_model
        self._type = type
        self._use_ssl = use_ssl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslConfig of this SslConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_variables(self):
        """Gets the additional_variables of this SslConfig.

        Additional SSL related field values

        :return: The additional_variables of this SslConfig.
        :rtype: List[ConfigVariable]
        """
        return self._additional_variables

    @additional_variables.setter
    def additional_variables(self, additional_variables):
        """Sets the additional_variables of this SslConfig.

        Additional SSL related field values

        :param additional_variables: The additional_variables of this SslConfig.
        :type additional_variables: List[ConfigVariable]
        """

        self._additional_variables = additional_variables

    @property
    def client_cert_type(self):
        """Gets the client_cert_type of this SslConfig.

        Type of Client Cert (PEM/JKS/.. etc.)

        :return: The client_cert_type of this SslConfig.
        :rtype: str
        """
        return self._client_cert_type

    @client_cert_type.setter
    def client_cert_type(self, client_cert_type):
        """Sets the client_cert_type of this SslConfig.

        Type of Client Cert (PEM/JKS/.. etc.)

        :param client_cert_type: The client_cert_type of this SslConfig.
        :type client_cert_type: str
        """
        allowed_values = ["CERT_TYPE_UNSPECIFIED", "PEM"]  # noqa: E501
        if client_cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_cert_type` ({0}), must be one of {1}"
                .format(client_cert_type, allowed_values)
            )

        self._client_cert_type = client_cert_type

    @property
    def client_certificate(self):
        """Gets the client_certificate of this SslConfig.


        :return: The client_certificate of this SslConfig.
        :rtype: Secret
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this SslConfig.


        :param client_certificate: The client_certificate of this SslConfig.
        :type client_certificate: Secret
        """

        self._client_certificate = client_certificate

    @property
    def client_private_key(self):
        """Gets the client_private_key of this SslConfig.


        :return: The client_private_key of this SslConfig.
        :rtype: Secret
        """
        return self._client_private_key

    @client_private_key.setter
    def client_private_key(self, client_private_key):
        """Sets the client_private_key of this SslConfig.


        :param client_private_key: The client_private_key of this SslConfig.
        :type client_private_key: Secret
        """

        self._client_private_key = client_private_key

    @property
    def client_private_key_pass(self):
        """Gets the client_private_key_pass of this SslConfig.


        :return: The client_private_key_pass of this SslConfig.
        :rtype: Secret
        """
        return self._client_private_key_pass

    @client_private_key_pass.setter
    def client_private_key_pass(self, client_private_key_pass):
        """Sets the client_private_key_pass of this SslConfig.


        :param client_private_key_pass: The client_private_key_pass of this SslConfig.
        :type client_private_key_pass: Secret
        """

        self._client_private_key_pass = client_private_key_pass

    @property
    def private_server_certificate(self):
        """Gets the private_server_certificate of this SslConfig.


        :return: The private_server_certificate of this SslConfig.
        :rtype: Secret
        """
        return self._private_server_certificate

    @private_server_certificate.setter
    def private_server_certificate(self, private_server_certificate):
        """Sets the private_server_certificate of this SslConfig.


        :param private_server_certificate: The private_server_certificate of this SslConfig.
        :type private_server_certificate: Secret
        """

        self._private_server_certificate = private_server_certificate

    @property
    def server_cert_type(self):
        """Gets the server_cert_type of this SslConfig.

        Type of Server Cert (PEM/JKS/.. etc.)

        :return: The server_cert_type of this SslConfig.
        :rtype: str
        """
        return self._server_cert_type

    @server_cert_type.setter
    def server_cert_type(self, server_cert_type):
        """Sets the server_cert_type of this SslConfig.

        Type of Server Cert (PEM/JKS/.. etc.)

        :param server_cert_type: The server_cert_type of this SslConfig.
        :type server_cert_type: str
        """
        allowed_values = ["CERT_TYPE_UNSPECIFIED", "PEM"]  # noqa: E501
        if server_cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `server_cert_type` ({0}), must be one of {1}"
                .format(server_cert_type, allowed_values)
            )

        self._server_cert_type = server_cert_type

    @property
    def trust_model(self):
        """Gets the trust_model of this SslConfig.

        Trust Model of the SSL connection

        :return: The trust_model of this SslConfig.
        :rtype: str
        """
        return self._trust_model

    @trust_model.setter
    def trust_model(self, trust_model):
        """Sets the trust_model of this SslConfig.

        Trust Model of the SSL connection

        :param trust_model: The trust_model of this SslConfig.
        :type trust_model: str
        """
        allowed_values = ["PUBLIC", "PRIVATE", "INSECURE"]  # noqa: E501
        if trust_model not in allowed_values:
            raise ValueError(
                "Invalid value for `trust_model` ({0}), must be one of {1}"
                .format(trust_model, allowed_values)
            )

        self._trust_model = trust_model

    @property
    def type(self):
        """Gets the type of this SslConfig.

        Controls the ssl type for the given connector version.

        :return: The type of this SslConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SslConfig.

        Controls the ssl type for the given connector version.

        :param type: The type of this SslConfig.
        :type type: str
        """
        allowed_values = ["SSL_TYPE_UNSPECIFIED", "TLS", "MTLS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_ssl(self):
        """Gets the use_ssl of this SslConfig.

        Bool for enabling SSL

        :return: The use_ssl of this SslConfig.
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this SslConfig.

        Bool for enabling SSL

        :param use_ssl: The use_ssl of this SslConfig.
        :type use_ssl: bool
        """

        self._use_ssl = use_ssl
