# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedZone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, dns: str=None, labels: Dict[str, str]=None, name: str=None, target_project: str=None, target_vpc: str=None, update_time: str=None):
        """ManagedZone - a model defined in OpenAPI

        :param create_time: The create_time of this ManagedZone.
        :param description: The description of this ManagedZone.
        :param dns: The dns of this ManagedZone.
        :param labels: The labels of this ManagedZone.
        :param name: The name of this ManagedZone.
        :param target_project: The target_project of this ManagedZone.
        :param target_vpc: The target_vpc of this ManagedZone.
        :param update_time: The update_time of this ManagedZone.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'dns': str,
            'labels': Dict[str, str],
            'name': str,
            'target_project': str,
            'target_vpc': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'dns': 'dns',
            'labels': 'labels',
            'name': 'name',
            'target_project': 'targetProject',
            'target_vpc': 'targetVpc',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._dns = dns
        self._labels = labels
        self._name = name
        self._target_project = target_project
        self._target_vpc = target_vpc
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedZone of this ManagedZone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ManagedZone.

        Output only. Created time.

        :return: The create_time of this ManagedZone.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ManagedZone.

        Output only. Created time.

        :param create_time: The create_time of this ManagedZone.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ManagedZone.

        Optional. Description of the resource.

        :return: The description of this ManagedZone.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManagedZone.

        Optional. Description of the resource.

        :param description: The description of this ManagedZone.
        :type description: str
        """

        self._description = description

    @property
    def dns(self):
        """Gets the dns of this ManagedZone.

        Required. DNS Name of the resource

        :return: The dns of this ManagedZone.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this ManagedZone.

        Required. DNS Name of the resource

        :param dns: The dns of this ManagedZone.
        :type dns: str
        """

        self._dns = dns

    @property
    def labels(self):
        """Gets the labels of this ManagedZone.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this ManagedZone.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ManagedZone.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this ManagedZone.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ManagedZone.

        Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone}

        :return: The name of this ManagedZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedZone.

        Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone}

        :param name: The name of this ManagedZone.
        :type name: str
        """

        self._name = name

    @property
    def target_project(self):
        """Gets the target_project of this ManagedZone.

        Required. The name of the Target Project

        :return: The target_project of this ManagedZone.
        :rtype: str
        """
        return self._target_project

    @target_project.setter
    def target_project(self, target_project):
        """Sets the target_project of this ManagedZone.

        Required. The name of the Target Project

        :param target_project: The target_project of this ManagedZone.
        :type target_project: str
        """

        self._target_project = target_project

    @property
    def target_vpc(self):
        """Gets the target_vpc of this ManagedZone.

        Required. The name of the Target Project VPC Network

        :return: The target_vpc of this ManagedZone.
        :rtype: str
        """
        return self._target_vpc

    @target_vpc.setter
    def target_vpc(self, target_vpc):
        """Sets the target_vpc of this ManagedZone.

        Required. The name of the Target Project VPC Network

        :param target_vpc: The target_vpc of this ManagedZone.
        :type target_vpc: str
        """

        self._target_vpc = target_vpc

    @property
    def update_time(self):
        """Gets the update_time of this ManagedZone.

        Output only. Updated time.

        :return: The update_time of this ManagedZone.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ManagedZone.

        Output only. Updated time.

        :param update_time: The update_time of this ManagedZone.
        :type update_time: str
        """

        self._update_time = update_time
