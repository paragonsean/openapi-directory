# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_key import EncryptionKey
from openapi_server.models.secret import Secret
from openapi_server import util


class ConfigVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, encryption_key_value: EncryptionKey=None, int_value: str=None, key: str=None, secret_value: Secret=None, string_value: str=None):
        """ConfigVariable - a model defined in OpenAPI

        :param bool_value: The bool_value of this ConfigVariable.
        :param encryption_key_value: The encryption_key_value of this ConfigVariable.
        :param int_value: The int_value of this ConfigVariable.
        :param key: The key of this ConfigVariable.
        :param secret_value: The secret_value of this ConfigVariable.
        :param string_value: The string_value of this ConfigVariable.
        """
        self.openapi_types = {
            'bool_value': bool,
            'encryption_key_value': EncryptionKey,
            'int_value': str,
            'key': str,
            'secret_value': Secret,
            'string_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'encryption_key_value': 'encryptionKeyValue',
            'int_value': 'intValue',
            'key': 'key',
            'secret_value': 'secretValue',
            'string_value': 'stringValue'
        }

        self._bool_value = bool_value
        self._encryption_key_value = encryption_key_value
        self._int_value = int_value
        self._key = key
        self._secret_value = secret_value
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigVariable of this ConfigVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this ConfigVariable.

        Value is a bool.

        :return: The bool_value of this ConfigVariable.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this ConfigVariable.

        Value is a bool.

        :param bool_value: The bool_value of this ConfigVariable.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def encryption_key_value(self):
        """Gets the encryption_key_value of this ConfigVariable.


        :return: The encryption_key_value of this ConfigVariable.
        :rtype: EncryptionKey
        """
        return self._encryption_key_value

    @encryption_key_value.setter
    def encryption_key_value(self, encryption_key_value):
        """Sets the encryption_key_value of this ConfigVariable.


        :param encryption_key_value: The encryption_key_value of this ConfigVariable.
        :type encryption_key_value: EncryptionKey
        """

        self._encryption_key_value = encryption_key_value

    @property
    def int_value(self):
        """Gets the int_value of this ConfigVariable.

        Value is an integer

        :return: The int_value of this ConfigVariable.
        :rtype: str
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this ConfigVariable.

        Value is an integer

        :param int_value: The int_value of this ConfigVariable.
        :type int_value: str
        """

        self._int_value = int_value

    @property
    def key(self):
        """Gets the key of this ConfigVariable.

        Key of the config variable.

        :return: The key of this ConfigVariable.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConfigVariable.

        Key of the config variable.

        :param key: The key of this ConfigVariable.
        :type key: str
        """

        self._key = key

    @property
    def secret_value(self):
        """Gets the secret_value of this ConfigVariable.


        :return: The secret_value of this ConfigVariable.
        :rtype: Secret
        """
        return self._secret_value

    @secret_value.setter
    def secret_value(self, secret_value):
        """Sets the secret_value of this ConfigVariable.


        :param secret_value: The secret_value of this ConfigVariable.
        :type secret_value: Secret
        """

        self._secret_value = secret_value

    @property
    def string_value(self):
        """Gets the string_value of this ConfigVariable.

        Value is a string.

        :return: The string_value of this ConfigVariable.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this ConfigVariable.

        Value is a string.

        :param string_value: The string_value of this ConfigVariable.
        :type string_value: str
        """

        self._string_value = string_value
