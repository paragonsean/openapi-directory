# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_code_link import AuthorizationCodeLink
from openapi_server.models.enum_option import EnumOption
from openapi_server.models.logical_expression import LogicalExpression
from openapi_server.models.role_grant import RoleGrant
from openapi_server import util


class ConfigVariableTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_code_link: AuthorizationCodeLink=None, description: str=None, display_name: str=None, enum_options: List[EnumOption]=None, is_advanced: bool=None, key: str=None, location_type: str=None, required: bool=None, required_condition: LogicalExpression=None, role_grant: RoleGrant=None, state: str=None, validation_regex: str=None, value_type: str=None):
        """ConfigVariableTemplate - a model defined in OpenAPI

        :param authorization_code_link: The authorization_code_link of this ConfigVariableTemplate.
        :param description: The description of this ConfigVariableTemplate.
        :param display_name: The display_name of this ConfigVariableTemplate.
        :param enum_options: The enum_options of this ConfigVariableTemplate.
        :param is_advanced: The is_advanced of this ConfigVariableTemplate.
        :param key: The key of this ConfigVariableTemplate.
        :param location_type: The location_type of this ConfigVariableTemplate.
        :param required: The required of this ConfigVariableTemplate.
        :param required_condition: The required_condition of this ConfigVariableTemplate.
        :param role_grant: The role_grant of this ConfigVariableTemplate.
        :param state: The state of this ConfigVariableTemplate.
        :param validation_regex: The validation_regex of this ConfigVariableTemplate.
        :param value_type: The value_type of this ConfigVariableTemplate.
        """
        self.openapi_types = {
            'authorization_code_link': AuthorizationCodeLink,
            'description': str,
            'display_name': str,
            'enum_options': List[EnumOption],
            'is_advanced': bool,
            'key': str,
            'location_type': str,
            'required': bool,
            'required_condition': LogicalExpression,
            'role_grant': RoleGrant,
            'state': str,
            'validation_regex': str,
            'value_type': str
        }

        self.attribute_map = {
            'authorization_code_link': 'authorizationCodeLink',
            'description': 'description',
            'display_name': 'displayName',
            'enum_options': 'enumOptions',
            'is_advanced': 'isAdvanced',
            'key': 'key',
            'location_type': 'locationType',
            'required': 'required',
            'required_condition': 'requiredCondition',
            'role_grant': 'roleGrant',
            'state': 'state',
            'validation_regex': 'validationRegex',
            'value_type': 'valueType'
        }

        self._authorization_code_link = authorization_code_link
        self._description = description
        self._display_name = display_name
        self._enum_options = enum_options
        self._is_advanced = is_advanced
        self._key = key
        self._location_type = location_type
        self._required = required
        self._required_condition = required_condition
        self._role_grant = role_grant
        self._state = state
        self._validation_regex = validation_regex
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigVariableTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigVariableTemplate of this ConfigVariableTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_code_link(self):
        """Gets the authorization_code_link of this ConfigVariableTemplate.


        :return: The authorization_code_link of this ConfigVariableTemplate.
        :rtype: AuthorizationCodeLink
        """
        return self._authorization_code_link

    @authorization_code_link.setter
    def authorization_code_link(self, authorization_code_link):
        """Sets the authorization_code_link of this ConfigVariableTemplate.


        :param authorization_code_link: The authorization_code_link of this ConfigVariableTemplate.
        :type authorization_code_link: AuthorizationCodeLink
        """

        self._authorization_code_link = authorization_code_link

    @property
    def description(self):
        """Gets the description of this ConfigVariableTemplate.

        Description.

        :return: The description of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigVariableTemplate.

        Description.

        :param description: The description of this ConfigVariableTemplate.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ConfigVariableTemplate.

        Display name of the parameter.

        :return: The display_name of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConfigVariableTemplate.

        Display name of the parameter.

        :param display_name: The display_name of this ConfigVariableTemplate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enum_options(self):
        """Gets the enum_options of this ConfigVariableTemplate.

        Enum options. To be populated if `ValueType` is `ENUM`

        :return: The enum_options of this ConfigVariableTemplate.
        :rtype: List[EnumOption]
        """
        return self._enum_options

    @enum_options.setter
    def enum_options(self, enum_options):
        """Sets the enum_options of this ConfigVariableTemplate.

        Enum options. To be populated if `ValueType` is `ENUM`

        :param enum_options: The enum_options of this ConfigVariableTemplate.
        :type enum_options: List[EnumOption]
        """

        self._enum_options = enum_options

    @property
    def is_advanced(self):
        """Gets the is_advanced of this ConfigVariableTemplate.

        Indicates if current template is part of advanced settings

        :return: The is_advanced of this ConfigVariableTemplate.
        :rtype: bool
        """
        return self._is_advanced

    @is_advanced.setter
    def is_advanced(self, is_advanced):
        """Sets the is_advanced of this ConfigVariableTemplate.

        Indicates if current template is part of advanced settings

        :param is_advanced: The is_advanced of this ConfigVariableTemplate.
        :type is_advanced: bool
        """

        self._is_advanced = is_advanced

    @property
    def key(self):
        """Gets the key of this ConfigVariableTemplate.

        Key of the config variable.

        :return: The key of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConfigVariableTemplate.

        Key of the config variable.

        :param key: The key of this ConfigVariableTemplate.
        :type key: str
        """

        self._key = key

    @property
    def location_type(self):
        """Gets the location_type of this ConfigVariableTemplate.

        Optional. Location Tyep denotes where this value should be sent in BYOC connections.

        :return: The location_type of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this ConfigVariableTemplate.

        Optional. Location Tyep denotes where this value should be sent in BYOC connections.

        :param location_type: The location_type of this ConfigVariableTemplate.
        :type location_type: str
        """
        allowed_values = ["LOCATION_TYPE_UNSPECIFIED", "HEADER", "PAYLOAD", "QUERY_PARAM", "PATH_PARAM"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def required(self):
        """Gets the required of this ConfigVariableTemplate.

        Flag represents that this `ConfigVariable` must be provided for a connection.

        :return: The required of this ConfigVariableTemplate.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ConfigVariableTemplate.

        Flag represents that this `ConfigVariable` must be provided for a connection.

        :param required: The required of this ConfigVariableTemplate.
        :type required: bool
        """

        self._required = required

    @property
    def required_condition(self):
        """Gets the required_condition of this ConfigVariableTemplate.


        :return: The required_condition of this ConfigVariableTemplate.
        :rtype: LogicalExpression
        """
        return self._required_condition

    @required_condition.setter
    def required_condition(self, required_condition):
        """Sets the required_condition of this ConfigVariableTemplate.


        :param required_condition: The required_condition of this ConfigVariableTemplate.
        :type required_condition: LogicalExpression
        """

        self._required_condition = required_condition

    @property
    def role_grant(self):
        """Gets the role_grant of this ConfigVariableTemplate.


        :return: The role_grant of this ConfigVariableTemplate.
        :rtype: RoleGrant
        """
        return self._role_grant

    @role_grant.setter
    def role_grant(self, role_grant):
        """Sets the role_grant of this ConfigVariableTemplate.


        :param role_grant: The role_grant of this ConfigVariableTemplate.
        :type role_grant: RoleGrant
        """

        self._role_grant = role_grant

    @property
    def state(self):
        """Gets the state of this ConfigVariableTemplate.

        State of the config variable.

        :return: The state of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigVariableTemplate.

        State of the config variable.

        :param state: The state of this ConfigVariableTemplate.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DEPRECATED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def validation_regex(self):
        """Gets the validation_regex of this ConfigVariableTemplate.

        Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.

        :return: The validation_regex of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._validation_regex

    @validation_regex.setter
    def validation_regex(self, validation_regex):
        """Sets the validation_regex of this ConfigVariableTemplate.

        Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.

        :param validation_regex: The validation_regex of this ConfigVariableTemplate.
        :type validation_regex: str
        """

        self._validation_regex = validation_regex

    @property
    def value_type(self):
        """Gets the value_type of this ConfigVariableTemplate.

        Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.

        :return: The value_type of this ConfigVariableTemplate.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConfigVariableTemplate.

        Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.

        :param value_type: The value_type of this ConfigVariableTemplate.
        :type value_type: str
        """
        allowed_values = ["VALUE_TYPE_UNSPECIFIED", "STRING", "INT", "BOOL", "SECRET", "ENUM", "AUTHORIZATION_CODE", "ENCRYPTION_KEY"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
