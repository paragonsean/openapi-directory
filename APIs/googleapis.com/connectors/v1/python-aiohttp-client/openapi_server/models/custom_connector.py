# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomConnector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_connector_versions: List[str]=None, create_time: str=None, custom_connector_type: str=None, description: str=None, display_name: str=None, labels: Dict[str, str]=None, logo: str=None, name: str=None, update_time: str=None):
        """CustomConnector - a model defined in OpenAPI

        :param active_connector_versions: The active_connector_versions of this CustomConnector.
        :param create_time: The create_time of this CustomConnector.
        :param custom_connector_type: The custom_connector_type of this CustomConnector.
        :param description: The description of this CustomConnector.
        :param display_name: The display_name of this CustomConnector.
        :param labels: The labels of this CustomConnector.
        :param logo: The logo of this CustomConnector.
        :param name: The name of this CustomConnector.
        :param update_time: The update_time of this CustomConnector.
        """
        self.openapi_types = {
            'active_connector_versions': List[str],
            'create_time': str,
            'custom_connector_type': str,
            'description': str,
            'display_name': str,
            'labels': Dict[str, str],
            'logo': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'active_connector_versions': 'activeConnectorVersions',
            'create_time': 'createTime',
            'custom_connector_type': 'customConnectorType',
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'logo': 'logo',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._active_connector_versions = active_connector_versions
        self._create_time = create_time
        self._custom_connector_type = custom_connector_type
        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._logo = logo
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConnector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConnector of this CustomConnector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_connector_versions(self):
        """Gets the active_connector_versions of this CustomConnector.

        Optional. Active connector versions.

        :return: The active_connector_versions of this CustomConnector.
        :rtype: List[str]
        """
        return self._active_connector_versions

    @active_connector_versions.setter
    def active_connector_versions(self, active_connector_versions):
        """Sets the active_connector_versions of this CustomConnector.

        Optional. Active connector versions.

        :param active_connector_versions: The active_connector_versions of this CustomConnector.
        :type active_connector_versions: List[str]
        """

        self._active_connector_versions = active_connector_versions

    @property
    def create_time(self):
        """Gets the create_time of this CustomConnector.

        Output only. Created time.

        :return: The create_time of this CustomConnector.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CustomConnector.

        Output only. Created time.

        :param create_time: The create_time of this CustomConnector.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_connector_type(self):
        """Gets the custom_connector_type of this CustomConnector.

        Required. Type of the custom connector.

        :return: The custom_connector_type of this CustomConnector.
        :rtype: str
        """
        return self._custom_connector_type

    @custom_connector_type.setter
    def custom_connector_type(self, custom_connector_type):
        """Sets the custom_connector_type of this CustomConnector.

        Required. Type of the custom connector.

        :param custom_connector_type: The custom_connector_type of this CustomConnector.
        :type custom_connector_type: str
        """
        allowed_values = ["CUSTOM_CONNECTOR_TYPE_UNSPECIFIED", "OPEN_API", "PROTO"]  # noqa: E501
        if custom_connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_connector_type` ({0}), must be one of {1}"
                .format(custom_connector_type, allowed_values)
            )

        self._custom_connector_type = custom_connector_type

    @property
    def description(self):
        """Gets the description of this CustomConnector.

        Optional. Description of the resource.

        :return: The description of this CustomConnector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomConnector.

        Optional. Description of the resource.

        :param description: The description of this CustomConnector.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this CustomConnector.

        Optional. Display name.

        :return: The display_name of this CustomConnector.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CustomConnector.

        Optional. Display name.

        :param display_name: The display_name of this CustomConnector.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this CustomConnector.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this CustomConnector.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CustomConnector.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this CustomConnector.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def logo(self):
        """Gets the logo of this CustomConnector.

        Optional. Logo of the resource.

        :return: The logo of this CustomConnector.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CustomConnector.

        Optional. Logo of the resource.

        :param logo: The logo of this CustomConnector.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this CustomConnector.

        Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector}

        :return: The name of this CustomConnector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomConnector.

        Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector}

        :param name: The name of this CustomConnector.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this CustomConnector.

        Output only. Updated time.

        :return: The update_time of this CustomConnector.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CustomConnector.

        Output only. Updated time.

        :param update_time: The update_time of this CustomConnector.
        :type update_time: str
        """

        self._update_time = update_time
