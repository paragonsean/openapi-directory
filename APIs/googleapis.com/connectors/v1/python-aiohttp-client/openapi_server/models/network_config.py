# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, egress_ips: List[str]=None, egress_mode: str=None):
        """NetworkConfig - a model defined in OpenAPI

        :param egress_ips: The egress_ips of this NetworkConfig.
        :param egress_mode: The egress_mode of this NetworkConfig.
        """
        self.openapi_types = {
            'egress_ips': List[str],
            'egress_mode': str
        }

        self.attribute_map = {
            'egress_ips': 'egressIps',
            'egress_mode': 'egressMode'
        }

        self._egress_ips = egress_ips
        self._egress_mode = egress_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress_ips(self):
        """Gets the egress_ips of this NetworkConfig.

        Output only. Egress IPs

        :return: The egress_ips of this NetworkConfig.
        :rtype: List[str]
        """
        return self._egress_ips

    @egress_ips.setter
    def egress_ips(self, egress_ips):
        """Sets the egress_ips of this NetworkConfig.

        Output only. Egress IPs

        :param egress_ips: The egress_ips of this NetworkConfig.
        :type egress_ips: List[str]
        """

        self._egress_ips = egress_ips

    @property
    def egress_mode(self):
        """Gets the egress_mode of this NetworkConfig.

        Optional. Egress mode for the network.

        :return: The egress_mode of this NetworkConfig.
        :rtype: str
        """
        return self._egress_mode

    @egress_mode.setter
    def egress_mode(self, egress_mode):
        """Sets the egress_mode of this NetworkConfig.

        Optional. Egress mode for the network.

        :param egress_mode: The egress_mode of this NetworkConfig.
        :type egress_mode: str
        """
        allowed_values = ["NETWORK_EGRESS_MODE_UNSPECIFIED", "AUTO_IP", "STATIC_IP"]  # noqa: E501
        if egress_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `egress_mode` ({0}), must be one of {1}"
                .format(egress_mode, allowed_values)
            )

        self._egress_mode = egress_mode
