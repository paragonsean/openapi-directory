# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_subscription_destination import EventSubscriptionDestination
from openapi_server.models.event_subscription_status import EventSubscriptionStatus
from openapi_server.models.jms import JMS
from openapi_server import util


class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, destinations: EventSubscriptionDestination=None, event_type_id: str=None, jms: JMS=None, name: str=None, status: EventSubscriptionStatus=None, subscriber: str=None, subscriber_link: str=None, update_time: str=None):
        """EventSubscription - a model defined in OpenAPI

        :param create_time: The create_time of this EventSubscription.
        :param destinations: The destinations of this EventSubscription.
        :param event_type_id: The event_type_id of this EventSubscription.
        :param jms: The jms of this EventSubscription.
        :param name: The name of this EventSubscription.
        :param status: The status of this EventSubscription.
        :param subscriber: The subscriber of this EventSubscription.
        :param subscriber_link: The subscriber_link of this EventSubscription.
        :param update_time: The update_time of this EventSubscription.
        """
        self.openapi_types = {
            'create_time': str,
            'destinations': EventSubscriptionDestination,
            'event_type_id': str,
            'jms': JMS,
            'name': str,
            'status': EventSubscriptionStatus,
            'subscriber': str,
            'subscriber_link': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'destinations': 'destinations',
            'event_type_id': 'eventTypeId',
            'jms': 'jms',
            'name': 'name',
            'status': 'status',
            'subscriber': 'subscriber',
            'subscriber_link': 'subscriberLink',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._destinations = destinations
        self._event_type_id = event_type_id
        self._jms = jms
        self._name = name
        self._status = status
        self._subscriber = subscriber
        self._subscriber_link = subscriber_link
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscription of this EventSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this EventSubscription.

        Output only. Created time.

        :return: The create_time of this EventSubscription.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this EventSubscription.

        Output only. Created time.

        :param create_time: The create_time of this EventSubscription.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destinations(self):
        """Gets the destinations of this EventSubscription.


        :return: The destinations of this EventSubscription.
        :rtype: EventSubscriptionDestination
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this EventSubscription.


        :param destinations: The destinations of this EventSubscription.
        :type destinations: EventSubscriptionDestination
        """

        self._destinations = destinations

    @property
    def event_type_id(self):
        """Gets the event_type_id of this EventSubscription.

        Optional. Event type id of the event of current EventSubscription.

        :return: The event_type_id of this EventSubscription.
        :rtype: str
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this EventSubscription.

        Optional. Event type id of the event of current EventSubscription.

        :param event_type_id: The event_type_id of this EventSubscription.
        :type event_type_id: str
        """

        self._event_type_id = event_type_id

    @property
    def jms(self):
        """Gets the jms of this EventSubscription.


        :return: The jms of this EventSubscription.
        :rtype: JMS
        """
        return self._jms

    @jms.setter
    def jms(self, jms):
        """Sets the jms of this EventSubscription.


        :param jms: The jms of this EventSubscription.
        :type jms: JMS
        """

        self._jms = jms

    @property
    def name(self):
        """Gets the name of this EventSubscription.

        Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}

        :return: The name of this EventSubscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventSubscription.

        Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}

        :param name: The name of this EventSubscription.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this EventSubscription.


        :return: The status of this EventSubscription.
        :rtype: EventSubscriptionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventSubscription.


        :param status: The status of this EventSubscription.
        :type status: EventSubscriptionStatus
        """

        self._status = status

    @property
    def subscriber(self):
        """Gets the subscriber of this EventSubscription.

        Optional. name of the Subscriber for the current EventSubscription.

        :return: The subscriber of this EventSubscription.
        :rtype: str
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this EventSubscription.

        Optional. name of the Subscriber for the current EventSubscription.

        :param subscriber: The subscriber of this EventSubscription.
        :type subscriber: str
        """

        self._subscriber = subscriber

    @property
    def subscriber_link(self):
        """Gets the subscriber_link of this EventSubscription.

        Optional. Link for Subscriber of the current EventSubscription.

        :return: The subscriber_link of this EventSubscription.
        :rtype: str
        """
        return self._subscriber_link

    @subscriber_link.setter
    def subscriber_link(self, subscriber_link):
        """Sets the subscriber_link of this EventSubscription.

        Optional. Link for Subscriber of the current EventSubscription.

        :param subscriber_link: The subscriber_link of this EventSubscription.
        :type subscriber_link: str
        """

        self._subscriber_link = subscriber_link

    @property
    def update_time(self):
        """Gets the update_time of this EventSubscription.

        Output only. Updated time.

        :return: The update_time of this EventSubscription.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this EventSubscription.

        Output only. Updated time.

        :param update_time: The update_time of this EventSubscription.
        :type update_time: str
        """

        self._update_time = update_time
