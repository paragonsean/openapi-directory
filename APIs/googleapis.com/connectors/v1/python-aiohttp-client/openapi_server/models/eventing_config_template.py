# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_config_template import AuthConfigTemplate
from openapi_server.models.config_variable_template import ConfigVariableTemplate
from openapi_server.models.destination_config_template import DestinationConfigTemplate
from openapi_server import util


class EventingConfigTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_variables: List[ConfigVariableTemplate]=None, auth_config_templates: List[AuthConfigTemplate]=None, auto_refresh: bool=None, auto_registration_supported: bool=None, encryption_key_template: ConfigVariableTemplate=None, enrichment_supported: bool=None, event_listener_type: str=None, is_eventing_supported: bool=None, listener_auth_config_templates: List[AuthConfigTemplate]=None, proxy_destination_config: DestinationConfigTemplate=None, registration_destination_config: DestinationConfigTemplate=None, trigger_config_variables: List[ConfigVariableTemplate]=None):
        """EventingConfigTemplate - a model defined in OpenAPI

        :param additional_variables: The additional_variables of this EventingConfigTemplate.
        :param auth_config_templates: The auth_config_templates of this EventingConfigTemplate.
        :param auto_refresh: The auto_refresh of this EventingConfigTemplate.
        :param auto_registration_supported: The auto_registration_supported of this EventingConfigTemplate.
        :param encryption_key_template: The encryption_key_template of this EventingConfigTemplate.
        :param enrichment_supported: The enrichment_supported of this EventingConfigTemplate.
        :param event_listener_type: The event_listener_type of this EventingConfigTemplate.
        :param is_eventing_supported: The is_eventing_supported of this EventingConfigTemplate.
        :param listener_auth_config_templates: The listener_auth_config_templates of this EventingConfigTemplate.
        :param proxy_destination_config: The proxy_destination_config of this EventingConfigTemplate.
        :param registration_destination_config: The registration_destination_config of this EventingConfigTemplate.
        :param trigger_config_variables: The trigger_config_variables of this EventingConfigTemplate.
        """
        self.openapi_types = {
            'additional_variables': List[ConfigVariableTemplate],
            'auth_config_templates': List[AuthConfigTemplate],
            'auto_refresh': bool,
            'auto_registration_supported': bool,
            'encryption_key_template': ConfigVariableTemplate,
            'enrichment_supported': bool,
            'event_listener_type': str,
            'is_eventing_supported': bool,
            'listener_auth_config_templates': List[AuthConfigTemplate],
            'proxy_destination_config': DestinationConfigTemplate,
            'registration_destination_config': DestinationConfigTemplate,
            'trigger_config_variables': List[ConfigVariableTemplate]
        }

        self.attribute_map = {
            'additional_variables': 'additionalVariables',
            'auth_config_templates': 'authConfigTemplates',
            'auto_refresh': 'autoRefresh',
            'auto_registration_supported': 'autoRegistrationSupported',
            'encryption_key_template': 'encryptionKeyTemplate',
            'enrichment_supported': 'enrichmentSupported',
            'event_listener_type': 'eventListenerType',
            'is_eventing_supported': 'isEventingSupported',
            'listener_auth_config_templates': 'listenerAuthConfigTemplates',
            'proxy_destination_config': 'proxyDestinationConfig',
            'registration_destination_config': 'registrationDestinationConfig',
            'trigger_config_variables': 'triggerConfigVariables'
        }

        self._additional_variables = additional_variables
        self._auth_config_templates = auth_config_templates
        self._auto_refresh = auto_refresh
        self._auto_registration_supported = auto_registration_supported
        self._encryption_key_template = encryption_key_template
        self._enrichment_supported = enrichment_supported
        self._event_listener_type = event_listener_type
        self._is_eventing_supported = is_eventing_supported
        self._listener_auth_config_templates = listener_auth_config_templates
        self._proxy_destination_config = proxy_destination_config
        self._registration_destination_config = registration_destination_config
        self._trigger_config_variables = trigger_config_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventingConfigTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventingConfigTemplate of this EventingConfigTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_variables(self):
        """Gets the additional_variables of this EventingConfigTemplate.

        Additional fields that need to be rendered.

        :return: The additional_variables of this EventingConfigTemplate.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._additional_variables

    @additional_variables.setter
    def additional_variables(self, additional_variables):
        """Sets the additional_variables of this EventingConfigTemplate.

        Additional fields that need to be rendered.

        :param additional_variables: The additional_variables of this EventingConfigTemplate.
        :type additional_variables: List[ConfigVariableTemplate]
        """

        self._additional_variables = additional_variables

    @property
    def auth_config_templates(self):
        """Gets the auth_config_templates of this EventingConfigTemplate.

        AuthConfigTemplates represents the auth values for the webhook adapter.

        :return: The auth_config_templates of this EventingConfigTemplate.
        :rtype: List[AuthConfigTemplate]
        """
        return self._auth_config_templates

    @auth_config_templates.setter
    def auth_config_templates(self, auth_config_templates):
        """Sets the auth_config_templates of this EventingConfigTemplate.

        AuthConfigTemplates represents the auth values for the webhook adapter.

        :param auth_config_templates: The auth_config_templates of this EventingConfigTemplate.
        :type auth_config_templates: List[AuthConfigTemplate]
        """

        self._auth_config_templates = auth_config_templates

    @property
    def auto_refresh(self):
        """Gets the auto_refresh of this EventingConfigTemplate.

        Auto refresh to extend webhook life.

        :return: The auto_refresh of this EventingConfigTemplate.
        :rtype: bool
        """
        return self._auto_refresh

    @auto_refresh.setter
    def auto_refresh(self, auto_refresh):
        """Sets the auto_refresh of this EventingConfigTemplate.

        Auto refresh to extend webhook life.

        :param auto_refresh: The auto_refresh of this EventingConfigTemplate.
        :type auto_refresh: bool
        """

        self._auto_refresh = auto_refresh

    @property
    def auto_registration_supported(self):
        """Gets the auto_registration_supported of this EventingConfigTemplate.

        Auto Registration supported.

        :return: The auto_registration_supported of this EventingConfigTemplate.
        :rtype: bool
        """
        return self._auto_registration_supported

    @auto_registration_supported.setter
    def auto_registration_supported(self, auto_registration_supported):
        """Sets the auto_registration_supported of this EventingConfigTemplate.

        Auto Registration supported.

        :param auto_registration_supported: The auto_registration_supported of this EventingConfigTemplate.
        :type auto_registration_supported: bool
        """

        self._auto_registration_supported = auto_registration_supported

    @property
    def encryption_key_template(self):
        """Gets the encryption_key_template of this EventingConfigTemplate.


        :return: The encryption_key_template of this EventingConfigTemplate.
        :rtype: ConfigVariableTemplate
        """
        return self._encryption_key_template

    @encryption_key_template.setter
    def encryption_key_template(self, encryption_key_template):
        """Sets the encryption_key_template of this EventingConfigTemplate.


        :param encryption_key_template: The encryption_key_template of this EventingConfigTemplate.
        :type encryption_key_template: ConfigVariableTemplate
        """

        self._encryption_key_template = encryption_key_template

    @property
    def enrichment_supported(self):
        """Gets the enrichment_supported of this EventingConfigTemplate.

        Enrichment Supported.

        :return: The enrichment_supported of this EventingConfigTemplate.
        :rtype: bool
        """
        return self._enrichment_supported

    @enrichment_supported.setter
    def enrichment_supported(self, enrichment_supported):
        """Sets the enrichment_supported of this EventingConfigTemplate.

        Enrichment Supported.

        :param enrichment_supported: The enrichment_supported of this EventingConfigTemplate.
        :type enrichment_supported: bool
        """

        self._enrichment_supported = enrichment_supported

    @property
    def event_listener_type(self):
        """Gets the event_listener_type of this EventingConfigTemplate.

        The type of the event listener for a specific connector.

        :return: The event_listener_type of this EventingConfigTemplate.
        :rtype: str
        """
        return self._event_listener_type

    @event_listener_type.setter
    def event_listener_type(self, event_listener_type):
        """Sets the event_listener_type of this EventingConfigTemplate.

        The type of the event listener for a specific connector.

        :param event_listener_type: The event_listener_type of this EventingConfigTemplate.
        :type event_listener_type: str
        """
        allowed_values = ["EVENT_LISTENER_TYPE_UNSPECIFIED", "WEBHOOK_LISTENER", "JMS_LISTENER"]  # noqa: E501
        if event_listener_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_listener_type` ({0}), must be one of {1}"
                .format(event_listener_type, allowed_values)
            )

        self._event_listener_type = event_listener_type

    @property
    def is_eventing_supported(self):
        """Gets the is_eventing_supported of this EventingConfigTemplate.

        Is Eventing Supported.

        :return: The is_eventing_supported of this EventingConfigTemplate.
        :rtype: bool
        """
        return self._is_eventing_supported

    @is_eventing_supported.setter
    def is_eventing_supported(self, is_eventing_supported):
        """Sets the is_eventing_supported of this EventingConfigTemplate.

        Is Eventing Supported.

        :param is_eventing_supported: The is_eventing_supported of this EventingConfigTemplate.
        :type is_eventing_supported: bool
        """

        self._is_eventing_supported = is_eventing_supported

    @property
    def listener_auth_config_templates(self):
        """Gets the listener_auth_config_templates of this EventingConfigTemplate.

        ListenerAuthConfigTemplates represents the auth values for the event listener.

        :return: The listener_auth_config_templates of this EventingConfigTemplate.
        :rtype: List[AuthConfigTemplate]
        """
        return self._listener_auth_config_templates

    @listener_auth_config_templates.setter
    def listener_auth_config_templates(self, listener_auth_config_templates):
        """Sets the listener_auth_config_templates of this EventingConfigTemplate.

        ListenerAuthConfigTemplates represents the auth values for the event listener.

        :param listener_auth_config_templates: The listener_auth_config_templates of this EventingConfigTemplate.
        :type listener_auth_config_templates: List[AuthConfigTemplate]
        """

        self._listener_auth_config_templates = listener_auth_config_templates

    @property
    def proxy_destination_config(self):
        """Gets the proxy_destination_config of this EventingConfigTemplate.


        :return: The proxy_destination_config of this EventingConfigTemplate.
        :rtype: DestinationConfigTemplate
        """
        return self._proxy_destination_config

    @proxy_destination_config.setter
    def proxy_destination_config(self, proxy_destination_config):
        """Sets the proxy_destination_config of this EventingConfigTemplate.


        :param proxy_destination_config: The proxy_destination_config of this EventingConfigTemplate.
        :type proxy_destination_config: DestinationConfigTemplate
        """

        self._proxy_destination_config = proxy_destination_config

    @property
    def registration_destination_config(self):
        """Gets the registration_destination_config of this EventingConfigTemplate.


        :return: The registration_destination_config of this EventingConfigTemplate.
        :rtype: DestinationConfigTemplate
        """
        return self._registration_destination_config

    @registration_destination_config.setter
    def registration_destination_config(self, registration_destination_config):
        """Sets the registration_destination_config of this EventingConfigTemplate.


        :param registration_destination_config: The registration_destination_config of this EventingConfigTemplate.
        :type registration_destination_config: DestinationConfigTemplate
        """

        self._registration_destination_config = registration_destination_config

    @property
    def trigger_config_variables(self):
        """Gets the trigger_config_variables of this EventingConfigTemplate.

        Trigger Config fields that needs to be rendered

        :return: The trigger_config_variables of this EventingConfigTemplate.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._trigger_config_variables

    @trigger_config_variables.setter
    def trigger_config_variables(self, trigger_config_variables):
        """Sets the trigger_config_variables of this EventingConfigTemplate.

        Trigger Config fields that needs to be rendered

        :param trigger_config_variables: The trigger_config_variables of this EventingConfigTemplate.
        :type trigger_config_variables: List[ConfigVariableTemplate]
        """

        self._trigger_config_variables = trigger_config_variables
