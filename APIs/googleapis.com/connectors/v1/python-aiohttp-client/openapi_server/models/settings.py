# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, payg: bool=None, tenant_project_id: str=None, vpcsc: bool=None):
        """Settings - a model defined in OpenAPI

        :param name: The name of this Settings.
        :param payg: The payg of this Settings.
        :param tenant_project_id: The tenant_project_id of this Settings.
        :param vpcsc: The vpcsc of this Settings.
        """
        self.openapi_types = {
            'name': str,
            'payg': bool,
            'tenant_project_id': str,
            'vpcsc': bool
        }

        self.attribute_map = {
            'name': 'name',
            'payg': 'payg',
            'tenant_project_id': 'tenantProjectId',
            'vpcsc': 'vpcsc'
        }

        self._name = name
        self._payg = payg
        self._tenant_project_id = tenant_project_id
        self._vpcsc = vpcsc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Settings.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings}

        :return: The name of this Settings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Settings.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings}

        :param name: The name of this Settings.
        :type name: str
        """

        self._name = name

    @property
    def payg(self):
        """Gets the payg of this Settings.

        Output only. Flag indicates if user is in PayG model

        :return: The payg of this Settings.
        :rtype: bool
        """
        return self._payg

    @payg.setter
    def payg(self, payg):
        """Sets the payg of this Settings.

        Output only. Flag indicates if user is in PayG model

        :param payg: The payg of this Settings.
        :type payg: bool
        """

        self._payg = payg

    @property
    def tenant_project_id(self):
        """Gets the tenant_project_id of this Settings.

        Output only. Tenant project id of the consumer project.

        :return: The tenant_project_id of this Settings.
        :rtype: str
        """
        return self._tenant_project_id

    @tenant_project_id.setter
    def tenant_project_id(self, tenant_project_id):
        """Sets the tenant_project_id of this Settings.

        Output only. Tenant project id of the consumer project.

        :param tenant_project_id: The tenant_project_id of this Settings.
        :type tenant_project_id: str
        """

        self._tenant_project_id = tenant_project_id

    @property
    def vpcsc(self):
        """Gets the vpcsc of this Settings.

        Optional. Flag indicates whether vpc-sc is enabled.

        :return: The vpcsc of this Settings.
        :rtype: bool
        """
        return self._vpcsc

    @vpcsc.setter
    def vpcsc(self, vpcsc):
        """Sets the vpcsc of this Settings.

        Optional. Flag indicates whether vpc-sc is enabled.

        :param vpcsc: The vpcsc of this Settings.
        :type vpcsc: bool
        """

        self._vpcsc = vpcsc
