# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_id: str=None, source_type: str=None):
        """Source - a model defined in OpenAPI

        :param field_id: The field_id of this Source.
        :param source_type: The source_type of this Source.
        """
        self.openapi_types = {
            'field_id': str,
            'source_type': str
        }

        self.attribute_map = {
            'field_id': 'fieldId',
            'source_type': 'sourceType'
        }

        self._field_id = field_id
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_id(self):
        """Gets the field_id of this Source.

        Field identifier. For example config vaiable name.

        :return: The field_id of this Source.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this Source.

        Field identifier. For example config vaiable name.

        :param field_id: The field_id of this Source.
        :type field_id: str
        """

        self._field_id = field_id

    @property
    def source_type(self):
        """Gets the source_type of this Source.

        Type of the source.

        :return: The source_type of this Source.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Source.

        Type of the source.

        :param source_type: The source_type of this Source.
        :type source_type: str
        """
        allowed_values = ["SOURCE_TYPE_UNSPECIFIED", "CONFIG_VARIABLE"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
