# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eventing_status import EventingStatus
from openapi_server import util


class EventingRuntimeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events_listener_endpoint: str=None, events_listener_psc_sa: str=None, status: EventingStatus=None):
        """EventingRuntimeData - a model defined in OpenAPI

        :param events_listener_endpoint: The events_listener_endpoint of this EventingRuntimeData.
        :param events_listener_psc_sa: The events_listener_psc_sa of this EventingRuntimeData.
        :param status: The status of this EventingRuntimeData.
        """
        self.openapi_types = {
            'events_listener_endpoint': str,
            'events_listener_psc_sa': str,
            'status': EventingStatus
        }

        self.attribute_map = {
            'events_listener_endpoint': 'eventsListenerEndpoint',
            'events_listener_psc_sa': 'eventsListenerPscSa',
            'status': 'status'
        }

        self._events_listener_endpoint = events_listener_endpoint
        self._events_listener_psc_sa = events_listener_psc_sa
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventingRuntimeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventingRuntimeData of this EventingRuntimeData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events_listener_endpoint(self):
        """Gets the events_listener_endpoint of this EventingRuntimeData.

        Output only. Events listener endpoint. The value will populated after provisioning the events listener.

        :return: The events_listener_endpoint of this EventingRuntimeData.
        :rtype: str
        """
        return self._events_listener_endpoint

    @events_listener_endpoint.setter
    def events_listener_endpoint(self, events_listener_endpoint):
        """Sets the events_listener_endpoint of this EventingRuntimeData.

        Output only. Events listener endpoint. The value will populated after provisioning the events listener.

        :param events_listener_endpoint: The events_listener_endpoint of this EventingRuntimeData.
        :type events_listener_endpoint: str
        """

        self._events_listener_endpoint = events_listener_endpoint

    @property
    def events_listener_psc_sa(self):
        """Gets the events_listener_psc_sa of this EventingRuntimeData.

        Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.

        :return: The events_listener_psc_sa of this EventingRuntimeData.
        :rtype: str
        """
        return self._events_listener_psc_sa

    @events_listener_psc_sa.setter
    def events_listener_psc_sa(self, events_listener_psc_sa):
        """Sets the events_listener_psc_sa of this EventingRuntimeData.

        Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.

        :param events_listener_psc_sa: The events_listener_psc_sa of this EventingRuntimeData.
        :type events_listener_psc_sa: str
        """

        self._events_listener_psc_sa = events_listener_psc_sa

    @property
    def status(self):
        """Gets the status of this EventingRuntimeData.


        :return: The status of this EventingRuntimeData.
        :rtype: EventingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventingRuntimeData.


        :param status: The status of this EventingRuntimeData.
        :type status: EventingStatus
        """

        self._status = status
