# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_config import AuthConfig
from openapi_server.models.config_variable_template import ConfigVariableTemplate
from openapi_server.models.destination_config import DestinationConfig
from openapi_server import util


class CustomConnectorVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_config: AuthConfig=None, backend_variable_templates: List[ConfigVariableTemplate]=None, create_time: str=None, destination_configs: List[DestinationConfig]=None, enable_backend_destination_config: bool=None, labels: Dict[str, str]=None, name: str=None, service_account: str=None, spec_location: str=None, state: str=None, update_time: str=None):
        """CustomConnectorVersion - a model defined in OpenAPI

        :param auth_config: The auth_config of this CustomConnectorVersion.
        :param backend_variable_templates: The backend_variable_templates of this CustomConnectorVersion.
        :param create_time: The create_time of this CustomConnectorVersion.
        :param destination_configs: The destination_configs of this CustomConnectorVersion.
        :param enable_backend_destination_config: The enable_backend_destination_config of this CustomConnectorVersion.
        :param labels: The labels of this CustomConnectorVersion.
        :param name: The name of this CustomConnectorVersion.
        :param service_account: The service_account of this CustomConnectorVersion.
        :param spec_location: The spec_location of this CustomConnectorVersion.
        :param state: The state of this CustomConnectorVersion.
        :param update_time: The update_time of this CustomConnectorVersion.
        """
        self.openapi_types = {
            'auth_config': AuthConfig,
            'backend_variable_templates': List[ConfigVariableTemplate],
            'create_time': str,
            'destination_configs': List[DestinationConfig],
            'enable_backend_destination_config': bool,
            'labels': Dict[str, str],
            'name': str,
            'service_account': str,
            'spec_location': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'auth_config': 'authConfig',
            'backend_variable_templates': 'backendVariableTemplates',
            'create_time': 'createTime',
            'destination_configs': 'destinationConfigs',
            'enable_backend_destination_config': 'enableBackendDestinationConfig',
            'labels': 'labels',
            'name': 'name',
            'service_account': 'serviceAccount',
            'spec_location': 'specLocation',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._auth_config = auth_config
        self._backend_variable_templates = backend_variable_templates
        self._create_time = create_time
        self._destination_configs = destination_configs
        self._enable_backend_destination_config = enable_backend_destination_config
        self._labels = labels
        self._name = name
        self._service_account = service_account
        self._spec_location = spec_location
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConnectorVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConnectorVersion of this CustomConnectorVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_config(self):
        """Gets the auth_config of this CustomConnectorVersion.


        :return: The auth_config of this CustomConnectorVersion.
        :rtype: AuthConfig
        """
        return self._auth_config

    @auth_config.setter
    def auth_config(self, auth_config):
        """Sets the auth_config of this CustomConnectorVersion.


        :param auth_config: The auth_config of this CustomConnectorVersion.
        :type auth_config: AuthConfig
        """

        self._auth_config = auth_config

    @property
    def backend_variable_templates(self):
        """Gets the backend_variable_templates of this CustomConnectorVersion.

        Optional. Backend variables config templates. This translates to additional variable templates in connection.

        :return: The backend_variable_templates of this CustomConnectorVersion.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._backend_variable_templates

    @backend_variable_templates.setter
    def backend_variable_templates(self, backend_variable_templates):
        """Sets the backend_variable_templates of this CustomConnectorVersion.

        Optional. Backend variables config templates. This translates to additional variable templates in connection.

        :param backend_variable_templates: The backend_variable_templates of this CustomConnectorVersion.
        :type backend_variable_templates: List[ConfigVariableTemplate]
        """

        self._backend_variable_templates = backend_variable_templates

    @property
    def create_time(self):
        """Gets the create_time of this CustomConnectorVersion.

        Output only. Created time.

        :return: The create_time of this CustomConnectorVersion.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CustomConnectorVersion.

        Output only. Created time.

        :param create_time: The create_time of this CustomConnectorVersion.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destination_configs(self):
        """Gets the destination_configs of this CustomConnectorVersion.

        Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.

        :return: The destination_configs of this CustomConnectorVersion.
        :rtype: List[DestinationConfig]
        """
        return self._destination_configs

    @destination_configs.setter
    def destination_configs(self, destination_configs):
        """Sets the destination_configs of this CustomConnectorVersion.

        Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.

        :param destination_configs: The destination_configs of this CustomConnectorVersion.
        :type destination_configs: List[DestinationConfig]
        """

        self._destination_configs = destination_configs

    @property
    def enable_backend_destination_config(self):
        """Gets the enable_backend_destination_config of this CustomConnectorVersion.

        Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.

        :return: The enable_backend_destination_config of this CustomConnectorVersion.
        :rtype: bool
        """
        return self._enable_backend_destination_config

    @enable_backend_destination_config.setter
    def enable_backend_destination_config(self, enable_backend_destination_config):
        """Sets the enable_backend_destination_config of this CustomConnectorVersion.

        Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.

        :param enable_backend_destination_config: The enable_backend_destination_config of this CustomConnectorVersion.
        :type enable_backend_destination_config: bool
        """

        self._enable_backend_destination_config = enable_backend_destination_config

    @property
    def labels(self):
        """Gets the labels of this CustomConnectorVersion.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this CustomConnectorVersion.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CustomConnectorVersion.

        Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this CustomConnectorVersion.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CustomConnectorVersion.

        Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}

        :return: The name of this CustomConnectorVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomConnectorVersion.

        Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}

        :param name: The name of this CustomConnectorVersion.
        :type name: str
        """

        self._name = name

    @property
    def service_account(self):
        """Gets the service_account of this CustomConnectorVersion.

        Optional. Service account used by runtime plane to access auth config secrets.

        :return: The service_account of this CustomConnectorVersion.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this CustomConnectorVersion.

        Optional. Service account used by runtime plane to access auth config secrets.

        :param service_account: The service_account of this CustomConnectorVersion.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def spec_location(self):
        """Gets the spec_location of this CustomConnectorVersion.

        Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`

        :return: The spec_location of this CustomConnectorVersion.
        :rtype: str
        """
        return self._spec_location

    @spec_location.setter
    def spec_location(self, spec_location):
        """Sets the spec_location of this CustomConnectorVersion.

        Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`

        :param spec_location: The spec_location of this CustomConnectorVersion.
        :type spec_location: str
        """

        self._spec_location = spec_location

    @property
    def state(self):
        """Gets the state of this CustomConnectorVersion.

        Output only. State of the custom connector version.

        :return: The state of this CustomConnectorVersion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomConnectorVersion.

        Output only. State of the custom connector version.

        :param state: The state of this CustomConnectorVersion.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DEPRECATED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this CustomConnectorVersion.

        Output only. Updated time.

        :return: The update_time of this CustomConnectorVersion.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CustomConnectorVersion.

        Output only. Updated time.

        :param update_time: The update_time of this CustomConnectorVersion.
        :type update_time: str
        """

        self._update_time = update_time
