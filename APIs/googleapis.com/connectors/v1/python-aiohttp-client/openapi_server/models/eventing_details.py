# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_event_types: bool=None, description: str=None, documentation_link: str=None, icon_location: str=None, launch_stage: str=None, name: str=None, search_tags: List[str]=None, type: str=None):
        """EventingDetails - a model defined in OpenAPI

        :param custom_event_types: The custom_event_types of this EventingDetails.
        :param description: The description of this EventingDetails.
        :param documentation_link: The documentation_link of this EventingDetails.
        :param icon_location: The icon_location of this EventingDetails.
        :param launch_stage: The launch_stage of this EventingDetails.
        :param name: The name of this EventingDetails.
        :param search_tags: The search_tags of this EventingDetails.
        :param type: The type of this EventingDetails.
        """
        self.openapi_types = {
            'custom_event_types': bool,
            'description': str,
            'documentation_link': str,
            'icon_location': str,
            'launch_stage': str,
            'name': str,
            'search_tags': List[str],
            'type': str
        }

        self.attribute_map = {
            'custom_event_types': 'customEventTypes',
            'description': 'description',
            'documentation_link': 'documentationLink',
            'icon_location': 'iconLocation',
            'launch_stage': 'launchStage',
            'name': 'name',
            'search_tags': 'searchTags',
            'type': 'type'
        }

        self._custom_event_types = custom_event_types
        self._description = description
        self._documentation_link = documentation_link
        self._icon_location = icon_location
        self._launch_stage = launch_stage
        self._name = name
        self._search_tags = search_tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventingDetails of this EventingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_event_types(self):
        """Gets the custom_event_types of this EventingDetails.

        Output only. Custom Event Types.

        :return: The custom_event_types of this EventingDetails.
        :rtype: bool
        """
        return self._custom_event_types

    @custom_event_types.setter
    def custom_event_types(self, custom_event_types):
        """Sets the custom_event_types of this EventingDetails.

        Output only. Custom Event Types.

        :param custom_event_types: The custom_event_types of this EventingDetails.
        :type custom_event_types: bool
        """

        self._custom_event_types = custom_event_types

    @property
    def description(self):
        """Gets the description of this EventingDetails.

        Output only. Description.

        :return: The description of this EventingDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventingDetails.

        Output only. Description.

        :param description: The description of this EventingDetails.
        :type description: str
        """

        self._description = description

    @property
    def documentation_link(self):
        """Gets the documentation_link of this EventingDetails.

        Output only. Link to public documentation.

        :return: The documentation_link of this EventingDetails.
        :rtype: str
        """
        return self._documentation_link

    @documentation_link.setter
    def documentation_link(self, documentation_link):
        """Sets the documentation_link of this EventingDetails.

        Output only. Link to public documentation.

        :param documentation_link: The documentation_link of this EventingDetails.
        :type documentation_link: str
        """

        self._documentation_link = documentation_link

    @property
    def icon_location(self):
        """Gets the icon_location of this EventingDetails.

        Output only. Cloud storage location of the icon.

        :return: The icon_location of this EventingDetails.
        :rtype: str
        """
        return self._icon_location

    @icon_location.setter
    def icon_location(self, icon_location):
        """Sets the icon_location of this EventingDetails.

        Output only. Cloud storage location of the icon.

        :param icon_location: The icon_location of this EventingDetails.
        :type icon_location: str
        """

        self._icon_location = icon_location

    @property
    def launch_stage(self):
        """Gets the launch_stage of this EventingDetails.

        Output only. Eventing Launch Stage.

        :return: The launch_stage of this EventingDetails.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this EventingDetails.

        Output only. Eventing Launch Stage.

        :param launch_stage: The launch_stage of this EventingDetails.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "PREVIEW", "GA", "DEPRECATED", "PRIVATE_PREVIEW"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this EventingDetails.

        Output only. Name of the Eventing trigger.

        :return: The name of this EventingDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventingDetails.

        Output only. Name of the Eventing trigger.

        :param name: The name of this EventingDetails.
        :type name: str
        """

        self._name = name

    @property
    def search_tags(self):
        """Gets the search_tags of this EventingDetails.

        Output only. Array of search keywords.

        :return: The search_tags of this EventingDetails.
        :rtype: List[str]
        """
        return self._search_tags

    @search_tags.setter
    def search_tags(self, search_tags):
        """Sets the search_tags of this EventingDetails.

        Output only. Array of search keywords.

        :param search_tags: The search_tags of this EventingDetails.
        :type search_tags: List[str]
        """

        self._search_tags = search_tags

    @property
    def type(self):
        """Gets the type of this EventingDetails.

        Output only. The type of the event listener for a specific connector.

        :return: The type of this EventingDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventingDetails.

        Output only. The type of the event listener for a specific connector.

        :param type: The type of this EventingDetails.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "WEBHOOK", "JMS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
