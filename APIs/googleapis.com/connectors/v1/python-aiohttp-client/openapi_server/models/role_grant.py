# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource import Resource
from openapi_server import util


class RoleGrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, helper_text_template: str=None, principal: str=None, resource: Resource=None, roles: List[str]=None):
        """RoleGrant - a model defined in OpenAPI

        :param helper_text_template: The helper_text_template of this RoleGrant.
        :param principal: The principal of this RoleGrant.
        :param resource: The resource of this RoleGrant.
        :param roles: The roles of this RoleGrant.
        """
        self.openapi_types = {
            'helper_text_template': str,
            'principal': str,
            'resource': Resource,
            'roles': List[str]
        }

        self.attribute_map = {
            'helper_text_template': 'helperTextTemplate',
            'principal': 'principal',
            'resource': 'resource',
            'roles': 'roles'
        }

        self._helper_text_template = helper_text_template
        self._principal = principal
        self._resource = resource
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleGrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleGrant of this RoleGrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def helper_text_template(self):
        """Gets the helper_text_template of this RoleGrant.

        Template that UI can use to provide helper text to customers.

        :return: The helper_text_template of this RoleGrant.
        :rtype: str
        """
        return self._helper_text_template

    @helper_text_template.setter
    def helper_text_template(self, helper_text_template):
        """Sets the helper_text_template of this RoleGrant.

        Template that UI can use to provide helper text to customers.

        :param helper_text_template: The helper_text_template of this RoleGrant.
        :type helper_text_template: str
        """

        self._helper_text_template = helper_text_template

    @property
    def principal(self):
        """Gets the principal of this RoleGrant.

        Prinicipal/Identity for whom the role need to assigned.

        :return: The principal of this RoleGrant.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this RoleGrant.

        Prinicipal/Identity for whom the role need to assigned.

        :param principal: The principal of this RoleGrant.
        :type principal: str
        """
        allowed_values = ["PRINCIPAL_UNSPECIFIED", "CONNECTOR_SA"]  # noqa: E501
        if principal not in allowed_values:
            raise ValueError(
                "Invalid value for `principal` ({0}), must be one of {1}"
                .format(principal, allowed_values)
            )

        self._principal = principal

    @property
    def resource(self):
        """Gets the resource of this RoleGrant.


        :return: The resource of this RoleGrant.
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this RoleGrant.


        :param resource: The resource of this RoleGrant.
        :type resource: Resource
        """

        self._resource = resource

    @property
    def roles(self):
        """Gets the roles of this RoleGrant.

        List of roles that need to be granted.

        :return: The roles of this RoleGrant.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RoleGrant.

        List of roles that need to be granted.

        :param roles: The roles of this RoleGrant.
        :type roles: List[str]
        """

        self._roles = roles
