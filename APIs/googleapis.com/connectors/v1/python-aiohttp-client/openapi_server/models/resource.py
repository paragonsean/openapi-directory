# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path_template: str=None, type: str=None):
        """Resource - a model defined in OpenAPI

        :param path_template: The path_template of this Resource.
        :param type: The type of this Resource.
        """
        self.openapi_types = {
            'path_template': str,
            'type': str
        }

        self.attribute_map = {
            'path_template': 'pathTemplate',
            'type': 'type'
        }

        self._path_template = path_template
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_template(self):
        """Gets the path_template of this Resource.

        Template to uniquely represent a Google Cloud resource in a format IAM expects This is a template that can have references to other values provided in the config variable template.

        :return: The path_template of this Resource.
        :rtype: str
        """
        return self._path_template

    @path_template.setter
    def path_template(self, path_template):
        """Sets the path_template of this Resource.

        Template to uniquely represent a Google Cloud resource in a format IAM expects This is a template that can have references to other values provided in the config variable template.

        :param path_template: The path_template of this Resource.
        :type path_template: str
        """

        self._path_template = path_template

    @property
    def type(self):
        """Gets the type of this Resource.

        Different types of resource supported.

        :return: The type of this Resource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.

        Different types of resource supported.

        :param type: The type of this Resource.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "GCP_PROJECT", "GCP_RESOURCE", "GCP_SECRETMANAGER_SECRET", "GCP_SECRETMANAGER_SECRET_VERSION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
