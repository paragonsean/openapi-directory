# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaintenanceSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_reschedule: bool=None, end_time: str=None, rollout_management_policy: str=None, schedule_deadline_time: str=None, start_time: str=None):
        """MaintenanceSchedule - a model defined in OpenAPI

        :param can_reschedule: The can_reschedule of this MaintenanceSchedule.
        :param end_time: The end_time of this MaintenanceSchedule.
        :param rollout_management_policy: The rollout_management_policy of this MaintenanceSchedule.
        :param schedule_deadline_time: The schedule_deadline_time of this MaintenanceSchedule.
        :param start_time: The start_time of this MaintenanceSchedule.
        """
        self.openapi_types = {
            'can_reschedule': bool,
            'end_time': str,
            'rollout_management_policy': str,
            'schedule_deadline_time': str,
            'start_time': str
        }

        self.attribute_map = {
            'can_reschedule': 'canReschedule',
            'end_time': 'endTime',
            'rollout_management_policy': 'rolloutManagementPolicy',
            'schedule_deadline_time': 'scheduleDeadlineTime',
            'start_time': 'startTime'
        }

        self._can_reschedule = can_reschedule
        self._end_time = end_time
        self._rollout_management_policy = rollout_management_policy
        self._schedule_deadline_time = schedule_deadline_time
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceSchedule of this MaintenanceSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_reschedule(self):
        """Gets the can_reschedule of this MaintenanceSchedule.

        This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.

        :return: The can_reschedule of this MaintenanceSchedule.
        :rtype: bool
        """
        return self._can_reschedule

    @can_reschedule.setter
    def can_reschedule(self, can_reschedule):
        """Sets the can_reschedule of this MaintenanceSchedule.

        This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.

        :param can_reschedule: The can_reschedule of this MaintenanceSchedule.
        :type can_reschedule: bool
        """

        self._can_reschedule = can_reschedule

    @property
    def end_time(self):
        """Gets the end_time of this MaintenanceSchedule.

        The scheduled end time for the maintenance.

        :return: The end_time of this MaintenanceSchedule.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MaintenanceSchedule.

        The scheduled end time for the maintenance.

        :param end_time: The end_time of this MaintenanceSchedule.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def rollout_management_policy(self):
        """Gets the rollout_management_policy of this MaintenanceSchedule.

        The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.

        :return: The rollout_management_policy of this MaintenanceSchedule.
        :rtype: str
        """
        return self._rollout_management_policy

    @rollout_management_policy.setter
    def rollout_management_policy(self, rollout_management_policy):
        """Sets the rollout_management_policy of this MaintenanceSchedule.

        The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.

        :param rollout_management_policy: The rollout_management_policy of this MaintenanceSchedule.
        :type rollout_management_policy: str
        """

        self._rollout_management_policy = rollout_management_policy

    @property
    def schedule_deadline_time(self):
        """Gets the schedule_deadline_time of this MaintenanceSchedule.

        schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.

        :return: The schedule_deadline_time of this MaintenanceSchedule.
        :rtype: str
        """
        return self._schedule_deadline_time

    @schedule_deadline_time.setter
    def schedule_deadline_time(self, schedule_deadline_time):
        """Sets the schedule_deadline_time of this MaintenanceSchedule.

        schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.

        :param schedule_deadline_time: The schedule_deadline_time of this MaintenanceSchedule.
        :type schedule_deadline_time: str
        """

        self._schedule_deadline_time = schedule_deadline_time

    @property
    def start_time(self):
        """Gets the start_time of this MaintenanceSchedule.

        The scheduled start time for the maintenance.

        :return: The start_time of this MaintenanceSchedule.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MaintenanceSchedule.

        The scheduled start time for the maintenance.

        :param start_time: The start_time of this MaintenanceSchedule.
        :type start_time: str
        """

        self._start_time = start_time
