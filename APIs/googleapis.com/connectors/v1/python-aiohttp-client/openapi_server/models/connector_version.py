# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_config_template import AuthConfigTemplate
from openapi_server.models.config_variable_template import ConfigVariableTemplate
from openapi_server.models.connector_infra_config import ConnectorInfraConfig
from openapi_server.models.destination_config_template import DestinationConfigTemplate
from openapi_server.models.egress_control_config import EgressControlConfig
from openapi_server.models.eventing_config_template import EventingConfigTemplate
from openapi_server.models.role_grant import RoleGrant
from openapi_server.models.ssl_config_template import SslConfigTemplate
from openapi_server.models.supported_runtime_features import SupportedRuntimeFeatures
from openapi_server import util


class ConnectorVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_config_templates: List[AuthConfigTemplate]=None, config_variable_templates: List[ConfigVariableTemplate]=None, connector_infra_config: ConnectorInfraConfig=None, create_time: str=None, destination_config_templates: List[DestinationConfigTemplate]=None, display_name: str=None, egress_control_config: EgressControlConfig=None, eventing_config_template: EventingConfigTemplate=None, labels: Dict[str, str]=None, launch_stage: str=None, name: str=None, release_version: str=None, role_grant: RoleGrant=None, role_grants: List[RoleGrant]=None, ssl_config_template: SslConfigTemplate=None, supported_runtime_features: SupportedRuntimeFeatures=None, unsupported_connection_types: List[str]=None, update_time: str=None):
        """ConnectorVersion - a model defined in OpenAPI

        :param auth_config_templates: The auth_config_templates of this ConnectorVersion.
        :param config_variable_templates: The config_variable_templates of this ConnectorVersion.
        :param connector_infra_config: The connector_infra_config of this ConnectorVersion.
        :param create_time: The create_time of this ConnectorVersion.
        :param destination_config_templates: The destination_config_templates of this ConnectorVersion.
        :param display_name: The display_name of this ConnectorVersion.
        :param egress_control_config: The egress_control_config of this ConnectorVersion.
        :param eventing_config_template: The eventing_config_template of this ConnectorVersion.
        :param labels: The labels of this ConnectorVersion.
        :param launch_stage: The launch_stage of this ConnectorVersion.
        :param name: The name of this ConnectorVersion.
        :param release_version: The release_version of this ConnectorVersion.
        :param role_grant: The role_grant of this ConnectorVersion.
        :param role_grants: The role_grants of this ConnectorVersion.
        :param ssl_config_template: The ssl_config_template of this ConnectorVersion.
        :param supported_runtime_features: The supported_runtime_features of this ConnectorVersion.
        :param unsupported_connection_types: The unsupported_connection_types of this ConnectorVersion.
        :param update_time: The update_time of this ConnectorVersion.
        """
        self.openapi_types = {
            'auth_config_templates': List[AuthConfigTemplate],
            'config_variable_templates': List[ConfigVariableTemplate],
            'connector_infra_config': ConnectorInfraConfig,
            'create_time': str,
            'destination_config_templates': List[DestinationConfigTemplate],
            'display_name': str,
            'egress_control_config': EgressControlConfig,
            'eventing_config_template': EventingConfigTemplate,
            'labels': Dict[str, str],
            'launch_stage': str,
            'name': str,
            'release_version': str,
            'role_grant': RoleGrant,
            'role_grants': List[RoleGrant],
            'ssl_config_template': SslConfigTemplate,
            'supported_runtime_features': SupportedRuntimeFeatures,
            'unsupported_connection_types': List[str],
            'update_time': str
        }

        self.attribute_map = {
            'auth_config_templates': 'authConfigTemplates',
            'config_variable_templates': 'configVariableTemplates',
            'connector_infra_config': 'connectorInfraConfig',
            'create_time': 'createTime',
            'destination_config_templates': 'destinationConfigTemplates',
            'display_name': 'displayName',
            'egress_control_config': 'egressControlConfig',
            'eventing_config_template': 'eventingConfigTemplate',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'name': 'name',
            'release_version': 'releaseVersion',
            'role_grant': 'roleGrant',
            'role_grants': 'roleGrants',
            'ssl_config_template': 'sslConfigTemplate',
            'supported_runtime_features': 'supportedRuntimeFeatures',
            'unsupported_connection_types': 'unsupportedConnectionTypes',
            'update_time': 'updateTime'
        }

        self._auth_config_templates = auth_config_templates
        self._config_variable_templates = config_variable_templates
        self._connector_infra_config = connector_infra_config
        self._create_time = create_time
        self._destination_config_templates = destination_config_templates
        self._display_name = display_name
        self._egress_control_config = egress_control_config
        self._eventing_config_template = eventing_config_template
        self._labels = labels
        self._launch_stage = launch_stage
        self._name = name
        self._release_version = release_version
        self._role_grant = role_grant
        self._role_grants = role_grants
        self._ssl_config_template = ssl_config_template
        self._supported_runtime_features = supported_runtime_features
        self._unsupported_connection_types = unsupported_connection_types
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorVersion of this ConnectorVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_config_templates(self):
        """Gets the auth_config_templates of this ConnectorVersion.

        Output only. List of auth configs supported by the Connector Version.

        :return: The auth_config_templates of this ConnectorVersion.
        :rtype: List[AuthConfigTemplate]
        """
        return self._auth_config_templates

    @auth_config_templates.setter
    def auth_config_templates(self, auth_config_templates):
        """Sets the auth_config_templates of this ConnectorVersion.

        Output only. List of auth configs supported by the Connector Version.

        :param auth_config_templates: The auth_config_templates of this ConnectorVersion.
        :type auth_config_templates: List[AuthConfigTemplate]
        """

        self._auth_config_templates = auth_config_templates

    @property
    def config_variable_templates(self):
        """Gets the config_variable_templates of this ConnectorVersion.

        Output only. List of config variables needed to create a connection.

        :return: The config_variable_templates of this ConnectorVersion.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._config_variable_templates

    @config_variable_templates.setter
    def config_variable_templates(self, config_variable_templates):
        """Sets the config_variable_templates of this ConnectorVersion.

        Output only. List of config variables needed to create a connection.

        :param config_variable_templates: The config_variable_templates of this ConnectorVersion.
        :type config_variable_templates: List[ConfigVariableTemplate]
        """

        self._config_variable_templates = config_variable_templates

    @property
    def connector_infra_config(self):
        """Gets the connector_infra_config of this ConnectorVersion.


        :return: The connector_infra_config of this ConnectorVersion.
        :rtype: ConnectorInfraConfig
        """
        return self._connector_infra_config

    @connector_infra_config.setter
    def connector_infra_config(self, connector_infra_config):
        """Sets the connector_infra_config of this ConnectorVersion.


        :param connector_infra_config: The connector_infra_config of this ConnectorVersion.
        :type connector_infra_config: ConnectorInfraConfig
        """

        self._connector_infra_config = connector_infra_config

    @property
    def create_time(self):
        """Gets the create_time of this ConnectorVersion.

        Output only. Created time.

        :return: The create_time of this ConnectorVersion.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConnectorVersion.

        Output only. Created time.

        :param create_time: The create_time of this ConnectorVersion.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destination_config_templates(self):
        """Gets the destination_config_templates of this ConnectorVersion.

        Output only. List of destination configs needed to create a connection.

        :return: The destination_config_templates of this ConnectorVersion.
        :rtype: List[DestinationConfigTemplate]
        """
        return self._destination_config_templates

    @destination_config_templates.setter
    def destination_config_templates(self, destination_config_templates):
        """Sets the destination_config_templates of this ConnectorVersion.

        Output only. List of destination configs needed to create a connection.

        :param destination_config_templates: The destination_config_templates of this ConnectorVersion.
        :type destination_config_templates: List[DestinationConfigTemplate]
        """

        self._destination_config_templates = destination_config_templates

    @property
    def display_name(self):
        """Gets the display_name of this ConnectorVersion.

        Output only. Display name.

        :return: The display_name of this ConnectorVersion.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectorVersion.

        Output only. Display name.

        :param display_name: The display_name of this ConnectorVersion.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def egress_control_config(self):
        """Gets the egress_control_config of this ConnectorVersion.


        :return: The egress_control_config of this ConnectorVersion.
        :rtype: EgressControlConfig
        """
        return self._egress_control_config

    @egress_control_config.setter
    def egress_control_config(self, egress_control_config):
        """Sets the egress_control_config of this ConnectorVersion.


        :param egress_control_config: The egress_control_config of this ConnectorVersion.
        :type egress_control_config: EgressControlConfig
        """

        self._egress_control_config = egress_control_config

    @property
    def eventing_config_template(self):
        """Gets the eventing_config_template of this ConnectorVersion.


        :return: The eventing_config_template of this ConnectorVersion.
        :rtype: EventingConfigTemplate
        """
        return self._eventing_config_template

    @eventing_config_template.setter
    def eventing_config_template(self, eventing_config_template):
        """Sets the eventing_config_template of this ConnectorVersion.


        :param eventing_config_template: The eventing_config_template of this ConnectorVersion.
        :type eventing_config_template: EventingConfigTemplate
        """

        self._eventing_config_template = eventing_config_template

    @property
    def labels(self):
        """Gets the labels of this ConnectorVersion.

        Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this ConnectorVersion.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConnectorVersion.

        Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this ConnectorVersion.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this ConnectorVersion.

        Output only. Flag to mark the version indicating the launch stage.

        :return: The launch_stage of this ConnectorVersion.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this ConnectorVersion.

        Output only. Flag to mark the version indicating the launch stage.

        :param launch_stage: The launch_stage of this ConnectorVersion.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "PREVIEW", "GA", "DEPRECATED", "PRIVATE_PREVIEW"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this ConnectorVersion.

        Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource.

        :return: The name of this ConnectorVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorVersion.

        Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource.

        :param name: The name of this ConnectorVersion.
        :type name: str
        """

        self._name = name

    @property
    def release_version(self):
        """Gets the release_version of this ConnectorVersion.

        Output only. ReleaseVersion of the connector, for example: \"1.0.1-alpha\".

        :return: The release_version of this ConnectorVersion.
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this ConnectorVersion.

        Output only. ReleaseVersion of the connector, for example: \"1.0.1-alpha\".

        :param release_version: The release_version of this ConnectorVersion.
        :type release_version: str
        """

        self._release_version = release_version

    @property
    def role_grant(self):
        """Gets the role_grant of this ConnectorVersion.


        :return: The role_grant of this ConnectorVersion.
        :rtype: RoleGrant
        """
        return self._role_grant

    @role_grant.setter
    def role_grant(self, role_grant):
        """Sets the role_grant of this ConnectorVersion.


        :param role_grant: The role_grant of this ConnectorVersion.
        :type role_grant: RoleGrant
        """

        self._role_grant = role_grant

    @property
    def role_grants(self):
        """Gets the role_grants of this ConnectorVersion.

        Output only. Role grant configurations for this connector version.

        :return: The role_grants of this ConnectorVersion.
        :rtype: List[RoleGrant]
        """
        return self._role_grants

    @role_grants.setter
    def role_grants(self, role_grants):
        """Sets the role_grants of this ConnectorVersion.

        Output only. Role grant configurations for this connector version.

        :param role_grants: The role_grants of this ConnectorVersion.
        :type role_grants: List[RoleGrant]
        """

        self._role_grants = role_grants

    @property
    def ssl_config_template(self):
        """Gets the ssl_config_template of this ConnectorVersion.


        :return: The ssl_config_template of this ConnectorVersion.
        :rtype: SslConfigTemplate
        """
        return self._ssl_config_template

    @ssl_config_template.setter
    def ssl_config_template(self, ssl_config_template):
        """Sets the ssl_config_template of this ConnectorVersion.


        :param ssl_config_template: The ssl_config_template of this ConnectorVersion.
        :type ssl_config_template: SslConfigTemplate
        """

        self._ssl_config_template = ssl_config_template

    @property
    def supported_runtime_features(self):
        """Gets the supported_runtime_features of this ConnectorVersion.


        :return: The supported_runtime_features of this ConnectorVersion.
        :rtype: SupportedRuntimeFeatures
        """
        return self._supported_runtime_features

    @supported_runtime_features.setter
    def supported_runtime_features(self, supported_runtime_features):
        """Sets the supported_runtime_features of this ConnectorVersion.


        :param supported_runtime_features: The supported_runtime_features of this ConnectorVersion.
        :type supported_runtime_features: SupportedRuntimeFeatures
        """

        self._supported_runtime_features = supported_runtime_features

    @property
    def unsupported_connection_types(self):
        """Gets the unsupported_connection_types of this ConnectorVersion.

        Output only. Unsupported connection types.

        :return: The unsupported_connection_types of this ConnectorVersion.
        :rtype: List[str]
        """
        return self._unsupported_connection_types

    @unsupported_connection_types.setter
    def unsupported_connection_types(self, unsupported_connection_types):
        """Sets the unsupported_connection_types of this ConnectorVersion.

        Output only. Unsupported connection types.

        :param unsupported_connection_types: The unsupported_connection_types of this ConnectorVersion.
        :type unsupported_connection_types: List[str]
        """
        allowed_values = ["CONNECTION_TYPE_UNSPECIFIED", "CONNECTION_WITH_EVENTING", "ONLY_CONNECTION", "ONLY_EVENTING"]  # noqa: E501
        if not set(unsupported_connection_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `unsupported_connection_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(unsupported_connection_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._unsupported_connection_types = unsupported_connection_types

    @property
    def update_time(self):
        """Gets the update_time of this ConnectorVersion.

        Output only. Updated time.

        :return: The update_time of this ConnectorVersion.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConnectorVersion.

        Output only. Updated time.

        :param update_time: The update_time of this ConnectorVersion.
        :type update_time: str
        """

        self._update_time = update_time
