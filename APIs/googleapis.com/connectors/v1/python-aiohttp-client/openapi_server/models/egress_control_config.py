# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extraction_rules import ExtractionRules
from openapi_server import util


class EgressControlConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backends: str=None, extraction_rules: ExtractionRules=None):
        """EgressControlConfig - a model defined in OpenAPI

        :param backends: The backends of this EgressControlConfig.
        :param extraction_rules: The extraction_rules of this EgressControlConfig.
        """
        self.openapi_types = {
            'backends': str,
            'extraction_rules': ExtractionRules
        }

        self.attribute_map = {
            'backends': 'backends',
            'extraction_rules': 'extractionRules'
        }

        self._backends = backends
        self._extraction_rules = extraction_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EgressControlConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EgressControlConfig of this EgressControlConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backends(self):
        """Gets the backends of this EgressControlConfig.

        Static Comma separated backends which are common for all Connection resources. Supported formats for each backend are host:port or just host (host can be ip address or domain name).

        :return: The backends of this EgressControlConfig.
        :rtype: str
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this EgressControlConfig.

        Static Comma separated backends which are common for all Connection resources. Supported formats for each backend are host:port or just host (host can be ip address or domain name).

        :param backends: The backends of this EgressControlConfig.
        :type backends: str
        """

        self._backends = backends

    @property
    def extraction_rules(self):
        """Gets the extraction_rules of this EgressControlConfig.


        :return: The extraction_rules of this EgressControlConfig.
        :rtype: ExtractionRules
        """
        return self._extraction_rules

    @extraction_rules.setter
    def extraction_rules(self, extraction_rules):
        """Sets the extraction_rules of this EgressControlConfig.


        :param extraction_rules: The extraction_rules of this EgressControlConfig.
        :type extraction_rules: ExtractionRules
        """

        self._extraction_rules = extraction_rules
