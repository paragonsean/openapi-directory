# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_variable_template import ConfigVariableTemplate
from openapi_server import util


class SslConfigTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_variables: List[ConfigVariableTemplate]=None, client_cert_type: List[str]=None, is_tls_mandatory: bool=None, server_cert_type: List[str]=None, ssl_type: str=None):
        """SslConfigTemplate - a model defined in OpenAPI

        :param additional_variables: The additional_variables of this SslConfigTemplate.
        :param client_cert_type: The client_cert_type of this SslConfigTemplate.
        :param is_tls_mandatory: The is_tls_mandatory of this SslConfigTemplate.
        :param server_cert_type: The server_cert_type of this SslConfigTemplate.
        :param ssl_type: The ssl_type of this SslConfigTemplate.
        """
        self.openapi_types = {
            'additional_variables': List[ConfigVariableTemplate],
            'client_cert_type': List[str],
            'is_tls_mandatory': bool,
            'server_cert_type': List[str],
            'ssl_type': str
        }

        self.attribute_map = {
            'additional_variables': 'additionalVariables',
            'client_cert_type': 'clientCertType',
            'is_tls_mandatory': 'isTlsMandatory',
            'server_cert_type': 'serverCertType',
            'ssl_type': 'sslType'
        }

        self._additional_variables = additional_variables
        self._client_cert_type = client_cert_type
        self._is_tls_mandatory = is_tls_mandatory
        self._server_cert_type = server_cert_type
        self._ssl_type = ssl_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslConfigTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslConfigTemplate of this SslConfigTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_variables(self):
        """Gets the additional_variables of this SslConfigTemplate.

        Any additional fields that need to be rendered

        :return: The additional_variables of this SslConfigTemplate.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._additional_variables

    @additional_variables.setter
    def additional_variables(self, additional_variables):
        """Sets the additional_variables of this SslConfigTemplate.

        Any additional fields that need to be rendered

        :param additional_variables: The additional_variables of this SslConfigTemplate.
        :type additional_variables: List[ConfigVariableTemplate]
        """

        self._additional_variables = additional_variables

    @property
    def client_cert_type(self):
        """Gets the client_cert_type of this SslConfigTemplate.

        List of supported Client Cert Types

        :return: The client_cert_type of this SslConfigTemplate.
        :rtype: List[str]
        """
        return self._client_cert_type

    @client_cert_type.setter
    def client_cert_type(self, client_cert_type):
        """Sets the client_cert_type of this SslConfigTemplate.

        List of supported Client Cert Types

        :param client_cert_type: The client_cert_type of this SslConfigTemplate.
        :type client_cert_type: List[str]
        """
        allowed_values = ["CERT_TYPE_UNSPECIFIED", "PEM"]  # noqa: E501
        if not set(client_cert_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `client_cert_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(client_cert_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._client_cert_type = client_cert_type

    @property
    def is_tls_mandatory(self):
        """Gets the is_tls_mandatory of this SslConfigTemplate.

        Boolean for determining if the connector version mandates TLS.

        :return: The is_tls_mandatory of this SslConfigTemplate.
        :rtype: bool
        """
        return self._is_tls_mandatory

    @is_tls_mandatory.setter
    def is_tls_mandatory(self, is_tls_mandatory):
        """Sets the is_tls_mandatory of this SslConfigTemplate.

        Boolean for determining if the connector version mandates TLS.

        :param is_tls_mandatory: The is_tls_mandatory of this SslConfigTemplate.
        :type is_tls_mandatory: bool
        """

        self._is_tls_mandatory = is_tls_mandatory

    @property
    def server_cert_type(self):
        """Gets the server_cert_type of this SslConfigTemplate.

        List of supported Server Cert Types

        :return: The server_cert_type of this SslConfigTemplate.
        :rtype: List[str]
        """
        return self._server_cert_type

    @server_cert_type.setter
    def server_cert_type(self, server_cert_type):
        """Sets the server_cert_type of this SslConfigTemplate.

        List of supported Server Cert Types

        :param server_cert_type: The server_cert_type of this SslConfigTemplate.
        :type server_cert_type: List[str]
        """
        allowed_values = ["CERT_TYPE_UNSPECIFIED", "PEM"]  # noqa: E501
        if not set(server_cert_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `server_cert_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(server_cert_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._server_cert_type = server_cert_type

    @property
    def ssl_type(self):
        """Gets the ssl_type of this SslConfigTemplate.

        Controls the ssl type for the given connector version

        :return: The ssl_type of this SslConfigTemplate.
        :rtype: str
        """
        return self._ssl_type

    @ssl_type.setter
    def ssl_type(self, ssl_type):
        """Sets the ssl_type of this SslConfigTemplate.

        Controls the ssl type for the given connector version

        :param ssl_type: The ssl_type of this SslConfigTemplate.
        :type ssl_type: str
        """
        allowed_values = ["SSL_TYPE_UNSPECIFIED", "TLS", "MTLS"]  # noqa: E501
        if ssl_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_type` ({0}), must be one of {1}"
                .format(ssl_type, allowed_values)
            )

        self._ssl_type = ssl_type
