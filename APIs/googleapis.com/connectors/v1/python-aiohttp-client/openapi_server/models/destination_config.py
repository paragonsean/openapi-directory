# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination import Destination
from openapi_server import util


class DestinationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[Destination]=None, key: str=None):
        """DestinationConfig - a model defined in OpenAPI

        :param destinations: The destinations of this DestinationConfig.
        :param key: The key of this DestinationConfig.
        """
        self.openapi_types = {
            'destinations': List[Destination],
            'key': str
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'key': 'key'
        }

        self._destinations = destinations
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConfig of this DestinationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this DestinationConfig.

        The destinations for the key.

        :return: The destinations of this DestinationConfig.
        :rtype: List[Destination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this DestinationConfig.

        The destinations for the key.

        :param destinations: The destinations of this DestinationConfig.
        :type destinations: List[Destination]
        """

        self._destinations = destinations

    @property
    def key(self):
        """Gets the key of this DestinationConfig.

        The key is the destination identifier that is supported by the Connector.

        :return: The key of this DestinationConfig.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DestinationConfig.

        The key is the destination identifier that is supported by the Connector.

        :param key: The key of this DestinationConfig.
        :type key: str
        """

        self._key = key
