# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eventing_details import EventingDetails
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, documentation_uri: str=None, eventing_details: EventingDetails=None, external_uri: str=None, labels: Dict[str, str]=None, launch_stage: str=None, name: str=None, update_time: str=None, web_assets_location: str=None):
        """Connector - a model defined in OpenAPI

        :param create_time: The create_time of this Connector.
        :param description: The description of this Connector.
        :param display_name: The display_name of this Connector.
        :param documentation_uri: The documentation_uri of this Connector.
        :param eventing_details: The eventing_details of this Connector.
        :param external_uri: The external_uri of this Connector.
        :param labels: The labels of this Connector.
        :param launch_stage: The launch_stage of this Connector.
        :param name: The name of this Connector.
        :param update_time: The update_time of this Connector.
        :param web_assets_location: The web_assets_location of this Connector.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'documentation_uri': str,
            'eventing_details': EventingDetails,
            'external_uri': str,
            'labels': Dict[str, str],
            'launch_stage': str,
            'name': str,
            'update_time': str,
            'web_assets_location': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'documentation_uri': 'documentationUri',
            'eventing_details': 'eventingDetails',
            'external_uri': 'externalUri',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'name': 'name',
            'update_time': 'updateTime',
            'web_assets_location': 'webAssetsLocation'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._documentation_uri = documentation_uri
        self._eventing_details = eventing_details
        self._external_uri = external_uri
        self._labels = labels
        self._launch_stage = launch_stage
        self._name = name
        self._update_time = update_time
        self._web_assets_location = web_assets_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Connector.

        Output only. Created time.

        :return: The create_time of this Connector.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Connector.

        Output only. Created time.

        :param create_time: The create_time of this Connector.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Connector.

        Output only. Description of the resource.

        :return: The description of this Connector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connector.

        Output only. Description of the resource.

        :param description: The description of this Connector.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Connector.

        Output only. Display name.

        :return: The display_name of this Connector.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Connector.

        Output only. Display name.

        :param display_name: The display_name of this Connector.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def documentation_uri(self):
        """Gets the documentation_uri of this Connector.

        Output only. Link to documentation page.

        :return: The documentation_uri of this Connector.
        :rtype: str
        """
        return self._documentation_uri

    @documentation_uri.setter
    def documentation_uri(self, documentation_uri):
        """Sets the documentation_uri of this Connector.

        Output only. Link to documentation page.

        :param documentation_uri: The documentation_uri of this Connector.
        :type documentation_uri: str
        """

        self._documentation_uri = documentation_uri

    @property
    def eventing_details(self):
        """Gets the eventing_details of this Connector.


        :return: The eventing_details of this Connector.
        :rtype: EventingDetails
        """
        return self._eventing_details

    @eventing_details.setter
    def eventing_details(self, eventing_details):
        """Sets the eventing_details of this Connector.


        :param eventing_details: The eventing_details of this Connector.
        :type eventing_details: EventingDetails
        """

        self._eventing_details = eventing_details

    @property
    def external_uri(self):
        """Gets the external_uri of this Connector.

        Output only. Link to external page.

        :return: The external_uri of this Connector.
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this Connector.

        Output only. Link to external page.

        :param external_uri: The external_uri of this Connector.
        :type external_uri: str
        """

        self._external_uri = external_uri

    @property
    def labels(self):
        """Gets the labels of this Connector.

        Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this Connector.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Connector.

        Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this Connector.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this Connector.

        Output only. Flag to mark the version indicating the launch stage.

        :return: The launch_stage of this Connector.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this Connector.

        Output only. Flag to mark the version indicating the launch stage.

        :param launch_stage: The launch_stage of this Connector.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "PREVIEW", "GA", "DEPRECATED", "PRIVATE_PREVIEW"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this Connector.

        Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for Connector resource.

        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.

        Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for Connector resource.

        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this Connector.

        Output only. Updated time.

        :return: The update_time of this Connector.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Connector.

        Output only. Updated time.

        :param update_time: The update_time of this Connector.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def web_assets_location(self):
        """Gets the web_assets_location of this Connector.

        Output only. Cloud storage location of icons etc consumed by UI.

        :return: The web_assets_location of this Connector.
        :rtype: str
        """
        return self._web_assets_location

    @web_assets_location.setter
    def web_assets_location(self, web_assets_location):
        """Sets the web_assets_location of this Connector.

        Output only. Cloud storage location of icons etc consumed by UI.

        :param web_assets_location: The web_assets_location of this Connector.
        :type web_assets_location: str
        """

        self._web_assets_location = web_assets_location
