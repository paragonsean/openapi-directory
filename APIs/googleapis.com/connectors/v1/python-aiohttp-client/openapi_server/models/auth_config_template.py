# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_variable_template import ConfigVariableTemplate
from openapi_server import util


class AuthConfigTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_key: str=None, auth_type: str=None, config_variable_templates: List[ConfigVariableTemplate]=None, description: str=None, display_name: str=None):
        """AuthConfigTemplate - a model defined in OpenAPI

        :param auth_key: The auth_key of this AuthConfigTemplate.
        :param auth_type: The auth_type of this AuthConfigTemplate.
        :param config_variable_templates: The config_variable_templates of this AuthConfigTemplate.
        :param description: The description of this AuthConfigTemplate.
        :param display_name: The display_name of this AuthConfigTemplate.
        """
        self.openapi_types = {
            'auth_key': str,
            'auth_type': str,
            'config_variable_templates': List[ConfigVariableTemplate],
            'description': str,
            'display_name': str
        }

        self.attribute_map = {
            'auth_key': 'authKey',
            'auth_type': 'authType',
            'config_variable_templates': 'configVariableTemplates',
            'description': 'description',
            'display_name': 'displayName'
        }

        self._auth_key = auth_key
        self._auth_type = auth_type
        self._config_variable_templates = config_variable_templates
        self._description = description
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthConfigTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthConfigTemplate of this AuthConfigTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_key(self):
        """Gets the auth_key of this AuthConfigTemplate.

        Identifier key for auth config

        :return: The auth_key of this AuthConfigTemplate.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this AuthConfigTemplate.

        Identifier key for auth config

        :param auth_key: The auth_key of this AuthConfigTemplate.
        :type auth_key: str
        """

        self._auth_key = auth_key

    @property
    def auth_type(self):
        """Gets the auth_type of this AuthConfigTemplate.

        The type of authentication configured.

        :return: The auth_type of this AuthConfigTemplate.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AuthConfigTemplate.

        The type of authentication configured.

        :param auth_type: The auth_type of this AuthConfigTemplate.
        :type auth_type: str
        """
        allowed_values = ["AUTH_TYPE_UNSPECIFIED", "USER_PASSWORD", "OAUTH2_JWT_BEARER", "OAUTH2_CLIENT_CREDENTIALS", "SSH_PUBLIC_KEY", "OAUTH2_AUTH_CODE_FLOW", "GOOGLE_AUTHENTICATION"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def config_variable_templates(self):
        """Gets the config_variable_templates of this AuthConfigTemplate.

        Config variables to describe an `AuthConfig` for a `Connection`.

        :return: The config_variable_templates of this AuthConfigTemplate.
        :rtype: List[ConfigVariableTemplate]
        """
        return self._config_variable_templates

    @config_variable_templates.setter
    def config_variable_templates(self, config_variable_templates):
        """Sets the config_variable_templates of this AuthConfigTemplate.

        Config variables to describe an `AuthConfig` for a `Connection`.

        :param config_variable_templates: The config_variable_templates of this AuthConfigTemplate.
        :type config_variable_templates: List[ConfigVariableTemplate]
        """

        self._config_variable_templates = config_variable_templates

    @property
    def description(self):
        """Gets the description of this AuthConfigTemplate.

        Connector specific description for an authentication template.

        :return: The description of this AuthConfigTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthConfigTemplate.

        Connector specific description for an authentication template.

        :param description: The description of this AuthConfigTemplate.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AuthConfigTemplate.

        Display name for authentication template.

        :return: The display_name of this AuthConfigTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AuthConfigTemplate.

        Display name for authentication template.

        :param display_name: The display_name of this AuthConfigTemplate.
        :type display_name: str
        """

        self._display_name = display_name
