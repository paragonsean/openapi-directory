# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuntimeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connd_subscription: str=None, connd_topic: str=None, control_plane_subscription: str=None, control_plane_topic: str=None, location_id: str=None, name: str=None, runtime_endpoint: str=None, schema_gcs_bucket: str=None, service_directory: str=None, state: str=None):
        """RuntimeConfig - a model defined in OpenAPI

        :param connd_subscription: The connd_subscription of this RuntimeConfig.
        :param connd_topic: The connd_topic of this RuntimeConfig.
        :param control_plane_subscription: The control_plane_subscription of this RuntimeConfig.
        :param control_plane_topic: The control_plane_topic of this RuntimeConfig.
        :param location_id: The location_id of this RuntimeConfig.
        :param name: The name of this RuntimeConfig.
        :param runtime_endpoint: The runtime_endpoint of this RuntimeConfig.
        :param schema_gcs_bucket: The schema_gcs_bucket of this RuntimeConfig.
        :param service_directory: The service_directory of this RuntimeConfig.
        :param state: The state of this RuntimeConfig.
        """
        self.openapi_types = {
            'connd_subscription': str,
            'connd_topic': str,
            'control_plane_subscription': str,
            'control_plane_topic': str,
            'location_id': str,
            'name': str,
            'runtime_endpoint': str,
            'schema_gcs_bucket': str,
            'service_directory': str,
            'state': str
        }

        self.attribute_map = {
            'connd_subscription': 'conndSubscription',
            'connd_topic': 'conndTopic',
            'control_plane_subscription': 'controlPlaneSubscription',
            'control_plane_topic': 'controlPlaneTopic',
            'location_id': 'locationId',
            'name': 'name',
            'runtime_endpoint': 'runtimeEndpoint',
            'schema_gcs_bucket': 'schemaGcsBucket',
            'service_directory': 'serviceDirectory',
            'state': 'state'
        }

        self._connd_subscription = connd_subscription
        self._connd_topic = connd_topic
        self._control_plane_subscription = control_plane_subscription
        self._control_plane_topic = control_plane_topic
        self._location_id = location_id
        self._name = name
        self._runtime_endpoint = runtime_endpoint
        self._schema_gcs_bucket = schema_gcs_bucket
        self._service_directory = service_directory
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeConfig of this RuntimeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connd_subscription(self):
        """Gets the connd_subscription of this RuntimeConfig.

        Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}

        :return: The connd_subscription of this RuntimeConfig.
        :rtype: str
        """
        return self._connd_subscription

    @connd_subscription.setter
    def connd_subscription(self, connd_subscription):
        """Sets the connd_subscription of this RuntimeConfig.

        Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}

        :param connd_subscription: The connd_subscription of this RuntimeConfig.
        :type connd_subscription: str
        """

        self._connd_subscription = connd_subscription

    @property
    def connd_topic(self):
        """Gets the connd_topic of this RuntimeConfig.

        Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id}

        :return: The connd_topic of this RuntimeConfig.
        :rtype: str
        """
        return self._connd_topic

    @connd_topic.setter
    def connd_topic(self, connd_topic):
        """Sets the connd_topic of this RuntimeConfig.

        Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id}

        :param connd_topic: The connd_topic of this RuntimeConfig.
        :type connd_topic: str
        """

        self._connd_topic = connd_topic

    @property
    def control_plane_subscription(self):
        """Gets the control_plane_subscription of this RuntimeConfig.

        Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}

        :return: The control_plane_subscription of this RuntimeConfig.
        :rtype: str
        """
        return self._control_plane_subscription

    @control_plane_subscription.setter
    def control_plane_subscription(self, control_plane_subscription):
        """Sets the control_plane_subscription of this RuntimeConfig.

        Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}

        :param control_plane_subscription: The control_plane_subscription of this RuntimeConfig.
        :type control_plane_subscription: str
        """

        self._control_plane_subscription = control_plane_subscription

    @property
    def control_plane_topic(self):
        """Gets the control_plane_topic of this RuntimeConfig.

        Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id}

        :return: The control_plane_topic of this RuntimeConfig.
        :rtype: str
        """
        return self._control_plane_topic

    @control_plane_topic.setter
    def control_plane_topic(self, control_plane_topic):
        """Sets the control_plane_topic of this RuntimeConfig.

        Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id}

        :param control_plane_topic: The control_plane_topic of this RuntimeConfig.
        :type control_plane_topic: str
        """

        self._control_plane_topic = control_plane_topic

    @property
    def location_id(self):
        """Gets the location_id of this RuntimeConfig.

        Output only. location_id of the runtime location. E.g. \"us-west1\".

        :return: The location_id of this RuntimeConfig.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this RuntimeConfig.

        Output only. location_id of the runtime location. E.g. \"us-west1\".

        :param location_id: The location_id of this RuntimeConfig.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this RuntimeConfig.

        Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig

        :return: The name of this RuntimeConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeConfig.

        Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig

        :param name: The name of this RuntimeConfig.
        :type name: str
        """

        self._name = name

    @property
    def runtime_endpoint(self):
        """Gets the runtime_endpoint of this RuntimeConfig.

        Output only. The endpoint of the connectors runtime ingress.

        :return: The runtime_endpoint of this RuntimeConfig.
        :rtype: str
        """
        return self._runtime_endpoint

    @runtime_endpoint.setter
    def runtime_endpoint(self, runtime_endpoint):
        """Sets the runtime_endpoint of this RuntimeConfig.

        Output only. The endpoint of the connectors runtime ingress.

        :param runtime_endpoint: The runtime_endpoint of this RuntimeConfig.
        :type runtime_endpoint: str
        """

        self._runtime_endpoint = runtime_endpoint

    @property
    def schema_gcs_bucket(self):
        """Gets the schema_gcs_bucket of this RuntimeConfig.

        Output only. The Cloud Storage bucket that stores connector's schema reports.

        :return: The schema_gcs_bucket of this RuntimeConfig.
        :rtype: str
        """
        return self._schema_gcs_bucket

    @schema_gcs_bucket.setter
    def schema_gcs_bucket(self, schema_gcs_bucket):
        """Sets the schema_gcs_bucket of this RuntimeConfig.

        Output only. The Cloud Storage bucket that stores connector's schema reports.

        :param schema_gcs_bucket: The schema_gcs_bucket of this RuntimeConfig.
        :type schema_gcs_bucket: str
        """

        self._schema_gcs_bucket = schema_gcs_bucket

    @property
    def service_directory(self):
        """Gets the service_directory of this RuntimeConfig.

        Output only. The name of the Service Directory service name.

        :return: The service_directory of this RuntimeConfig.
        :rtype: str
        """
        return self._service_directory

    @service_directory.setter
    def service_directory(self, service_directory):
        """Sets the service_directory of this RuntimeConfig.

        Output only. The name of the Service Directory service name.

        :param service_directory: The service_directory of this RuntimeConfig.
        :type service_directory: str
        """

        self._service_directory = service_directory

    @property
    def state(self):
        """Gets the state of this RuntimeConfig.

        Output only. The state of the location.

        :return: The state of this RuntimeConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RuntimeConfig.

        Output only. The state of the location.

        :param state: The state of this RuntimeConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INACTIVE", "ACTIVATING", "ACTIVE", "CREATING", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
