# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server import util


class RegionalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_config: EncryptionConfig=None, name: str=None, network_config: NetworkConfig=None, provisioned: bool=None):
        """RegionalSettings - a model defined in OpenAPI

        :param encryption_config: The encryption_config of this RegionalSettings.
        :param name: The name of this RegionalSettings.
        :param network_config: The network_config of this RegionalSettings.
        :param provisioned: The provisioned of this RegionalSettings.
        """
        self.openapi_types = {
            'encryption_config': EncryptionConfig,
            'name': str,
            'network_config': NetworkConfig,
            'provisioned': bool
        }

        self.attribute_map = {
            'encryption_config': 'encryptionConfig',
            'name': 'name',
            'network_config': 'networkConfig',
            'provisioned': 'provisioned'
        }

        self._encryption_config = encryption_config
        self._name = name
        self._network_config = network_config
        self._provisioned = provisioned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalSettings of this RegionalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_config(self):
        """Gets the encryption_config of this RegionalSettings.


        :return: The encryption_config of this RegionalSettings.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this RegionalSettings.


        :param encryption_config: The encryption_config of this RegionalSettings.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def name(self):
        """Gets the name of this RegionalSettings.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings

        :return: The name of this RegionalSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegionalSettings.

        Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings

        :param name: The name of this RegionalSettings.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this RegionalSettings.


        :return: The network_config of this RegionalSettings.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this RegionalSettings.


        :param network_config: The network_config of this RegionalSettings.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def provisioned(self):
        """Gets the provisioned of this RegionalSettings.

        Output only. Specifies whether the region is provisioned.

        :return: The provisioned of this RegionalSettings.
        :rtype: bool
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this RegionalSettings.

        Output only. Specifies whether the region is provisioned.

        :param provisioned: The provisioned of this RegionalSettings.
        :type provisioned: bool
        """

        self._provisioned = provisioned
