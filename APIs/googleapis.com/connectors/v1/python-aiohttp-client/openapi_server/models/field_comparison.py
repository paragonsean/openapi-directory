# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldComparison(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, comparator: str=None, int_value: str=None, key: str=None, string_value: str=None):
        """FieldComparison - a model defined in OpenAPI

        :param bool_value: The bool_value of this FieldComparison.
        :param comparator: The comparator of this FieldComparison.
        :param int_value: The int_value of this FieldComparison.
        :param key: The key of this FieldComparison.
        :param string_value: The string_value of this FieldComparison.
        """
        self.openapi_types = {
            'bool_value': bool,
            'comparator': str,
            'int_value': str,
            'key': str,
            'string_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'comparator': 'comparator',
            'int_value': 'intValue',
            'key': 'key',
            'string_value': 'stringValue'
        }

        self._bool_value = bool_value
        self._comparator = comparator
        self._int_value = int_value
        self._key = key
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldComparison':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldComparison of this FieldComparison.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this FieldComparison.

        Boolean value

        :return: The bool_value of this FieldComparison.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this FieldComparison.

        Boolean value

        :param bool_value: The bool_value of this FieldComparison.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def comparator(self):
        """Gets the comparator of this FieldComparison.

        Comparator to use for comparing the field value.

        :return: The comparator of this FieldComparison.
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this FieldComparison.

        Comparator to use for comparing the field value.

        :param comparator: The comparator of this FieldComparison.
        :type comparator: str
        """
        allowed_values = ["COMPARATOR_UNSPECIFIED", "EQUALS", "NOT_EQUALS"]  # noqa: E501
        if comparator not in allowed_values:
            raise ValueError(
                "Invalid value for `comparator` ({0}), must be one of {1}"
                .format(comparator, allowed_values)
            )

        self._comparator = comparator

    @property
    def int_value(self):
        """Gets the int_value of this FieldComparison.

        Integer value

        :return: The int_value of this FieldComparison.
        :rtype: str
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this FieldComparison.

        Integer value

        :param int_value: The int_value of this FieldComparison.
        :type int_value: str
        """

        self._int_value = int_value

    @property
    def key(self):
        """Gets the key of this FieldComparison.

        Key of the field.

        :return: The key of this FieldComparison.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FieldComparison.

        Key of the field.

        :param key: The key of this FieldComparison.
        :type key: str
        """

        self._key = key

    @property
    def string_value(self):
        """Gets the string_value of this FieldComparison.

        String value

        :return: The string_value of this FieldComparison.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this FieldComparison.

        String value

        :param string_value: The string_value of this FieldComparison.
        :type string_value: str
        """

        self._string_value = string_value
