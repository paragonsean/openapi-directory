# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_variable import ConfigVariable
from openapi_server.models.oauth2_auth_code_flow import Oauth2AuthCodeFlow
from openapi_server.models.oauth2_client_credentials import Oauth2ClientCredentials
from openapi_server.models.oauth2_jwt_bearer import Oauth2JwtBearer
from openapi_server.models.ssh_public_key import SshPublicKey
from openapi_server.models.user_password import UserPassword
from openapi_server import util


class AuthConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_variables: List[ConfigVariable]=None, auth_key: str=None, auth_type: str=None, oauth2_auth_code_flow: Oauth2AuthCodeFlow=None, oauth2_client_credentials: Oauth2ClientCredentials=None, oauth2_jwt_bearer: Oauth2JwtBearer=None, ssh_public_key: SshPublicKey=None, user_password: UserPassword=None):
        """AuthConfig - a model defined in OpenAPI

        :param additional_variables: The additional_variables of this AuthConfig.
        :param auth_key: The auth_key of this AuthConfig.
        :param auth_type: The auth_type of this AuthConfig.
        :param oauth2_auth_code_flow: The oauth2_auth_code_flow of this AuthConfig.
        :param oauth2_client_credentials: The oauth2_client_credentials of this AuthConfig.
        :param oauth2_jwt_bearer: The oauth2_jwt_bearer of this AuthConfig.
        :param ssh_public_key: The ssh_public_key of this AuthConfig.
        :param user_password: The user_password of this AuthConfig.
        """
        self.openapi_types = {
            'additional_variables': List[ConfigVariable],
            'auth_key': str,
            'auth_type': str,
            'oauth2_auth_code_flow': Oauth2AuthCodeFlow,
            'oauth2_client_credentials': Oauth2ClientCredentials,
            'oauth2_jwt_bearer': Oauth2JwtBearer,
            'ssh_public_key': SshPublicKey,
            'user_password': UserPassword
        }

        self.attribute_map = {
            'additional_variables': 'additionalVariables',
            'auth_key': 'authKey',
            'auth_type': 'authType',
            'oauth2_auth_code_flow': 'oauth2AuthCodeFlow',
            'oauth2_client_credentials': 'oauth2ClientCredentials',
            'oauth2_jwt_bearer': 'oauth2JwtBearer',
            'ssh_public_key': 'sshPublicKey',
            'user_password': 'userPassword'
        }

        self._additional_variables = additional_variables
        self._auth_key = auth_key
        self._auth_type = auth_type
        self._oauth2_auth_code_flow = oauth2_auth_code_flow
        self._oauth2_client_credentials = oauth2_client_credentials
        self._oauth2_jwt_bearer = oauth2_jwt_bearer
        self._ssh_public_key = ssh_public_key
        self._user_password = user_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthConfig of this AuthConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_variables(self):
        """Gets the additional_variables of this AuthConfig.

        List containing additional auth configs.

        :return: The additional_variables of this AuthConfig.
        :rtype: List[ConfigVariable]
        """
        return self._additional_variables

    @additional_variables.setter
    def additional_variables(self, additional_variables):
        """Sets the additional_variables of this AuthConfig.

        List containing additional auth configs.

        :param additional_variables: The additional_variables of this AuthConfig.
        :type additional_variables: List[ConfigVariable]
        """

        self._additional_variables = additional_variables

    @property
    def auth_key(self):
        """Gets the auth_key of this AuthConfig.

        Identifier key for auth config

        :return: The auth_key of this AuthConfig.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this AuthConfig.

        Identifier key for auth config

        :param auth_key: The auth_key of this AuthConfig.
        :type auth_key: str
        """

        self._auth_key = auth_key

    @property
    def auth_type(self):
        """Gets the auth_type of this AuthConfig.

        The type of authentication configured.

        :return: The auth_type of this AuthConfig.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AuthConfig.

        The type of authentication configured.

        :param auth_type: The auth_type of this AuthConfig.
        :type auth_type: str
        """
        allowed_values = ["AUTH_TYPE_UNSPECIFIED", "USER_PASSWORD", "OAUTH2_JWT_BEARER", "OAUTH2_CLIENT_CREDENTIALS", "SSH_PUBLIC_KEY", "OAUTH2_AUTH_CODE_FLOW", "GOOGLE_AUTHENTICATION"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def oauth2_auth_code_flow(self):
        """Gets the oauth2_auth_code_flow of this AuthConfig.


        :return: The oauth2_auth_code_flow of this AuthConfig.
        :rtype: Oauth2AuthCodeFlow
        """
        return self._oauth2_auth_code_flow

    @oauth2_auth_code_flow.setter
    def oauth2_auth_code_flow(self, oauth2_auth_code_flow):
        """Sets the oauth2_auth_code_flow of this AuthConfig.


        :param oauth2_auth_code_flow: The oauth2_auth_code_flow of this AuthConfig.
        :type oauth2_auth_code_flow: Oauth2AuthCodeFlow
        """

        self._oauth2_auth_code_flow = oauth2_auth_code_flow

    @property
    def oauth2_client_credentials(self):
        """Gets the oauth2_client_credentials of this AuthConfig.


        :return: The oauth2_client_credentials of this AuthConfig.
        :rtype: Oauth2ClientCredentials
        """
        return self._oauth2_client_credentials

    @oauth2_client_credentials.setter
    def oauth2_client_credentials(self, oauth2_client_credentials):
        """Sets the oauth2_client_credentials of this AuthConfig.


        :param oauth2_client_credentials: The oauth2_client_credentials of this AuthConfig.
        :type oauth2_client_credentials: Oauth2ClientCredentials
        """

        self._oauth2_client_credentials = oauth2_client_credentials

    @property
    def oauth2_jwt_bearer(self):
        """Gets the oauth2_jwt_bearer of this AuthConfig.


        :return: The oauth2_jwt_bearer of this AuthConfig.
        :rtype: Oauth2JwtBearer
        """
        return self._oauth2_jwt_bearer

    @oauth2_jwt_bearer.setter
    def oauth2_jwt_bearer(self, oauth2_jwt_bearer):
        """Sets the oauth2_jwt_bearer of this AuthConfig.


        :param oauth2_jwt_bearer: The oauth2_jwt_bearer of this AuthConfig.
        :type oauth2_jwt_bearer: Oauth2JwtBearer
        """

        self._oauth2_jwt_bearer = oauth2_jwt_bearer

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this AuthConfig.


        :return: The ssh_public_key of this AuthConfig.
        :rtype: SshPublicKey
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this AuthConfig.


        :param ssh_public_key: The ssh_public_key of this AuthConfig.
        :type ssh_public_key: SshPublicKey
        """

        self._ssh_public_key = ssh_public_key

    @property
    def user_password(self):
        """Gets the user_password of this AuthConfig.


        :return: The user_password of this AuthConfig.
        :rtype: UserPassword
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this AuthConfig.


        :param user_password: The user_password of this AuthConfig.
        :type user_password: UserPassword
        """

        self._user_password = user_password
