/*
 * AdSense Management API
 * Accesses AdSense publishers' inventory and generates performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdsenseReportsGenerateResponseHeadersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdsenseReportsGenerateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:29.195629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdsenseReportsGenerateResponse {
  public static final String SERIALIZED_NAME_AVERAGES = "averages";
  @SerializedName(SERIALIZED_NAME_AVERAGES)
  private List<String> averages = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<AdsenseReportsGenerateResponseHeadersInner> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adsense#report";

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<List<String>> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TOTAL_MATCHED_ROWS = "totalMatchedRows";
  @SerializedName(SERIALIZED_NAME_TOTAL_MATCHED_ROWS)
  private String totalMatchedRows;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private List<String> totals = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public AdsenseReportsGenerateResponse() {
  }

  public AdsenseReportsGenerateResponse averages(List<String> averages) {
    this.averages = averages;
    return this;
  }

  public AdsenseReportsGenerateResponse addAveragesItem(String averagesItem) {
    if (this.averages == null) {
      this.averages = new ArrayList<>();
    }
    this.averages.add(averagesItem);
    return this;
  }

  /**
   * The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
   * @return averages
   */
  @javax.annotation.Nullable
  public List<String> getAverages() {
    return averages;
  }

  public void setAverages(List<String> averages) {
    this.averages = averages;
  }


  public AdsenseReportsGenerateResponse endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The requested end date in yyyy-mm-dd format.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public AdsenseReportsGenerateResponse headers(List<AdsenseReportsGenerateResponseHeadersInner> headers) {
    this.headers = headers;
    return this;
  }

  public AdsenseReportsGenerateResponse addHeadersItem(AdsenseReportsGenerateResponseHeadersInner headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<AdsenseReportsGenerateResponseHeadersInner> getHeaders() {
    return headers;
  }

  public void setHeaders(List<AdsenseReportsGenerateResponseHeadersInner> headers) {
    this.headers = headers;
  }


  public AdsenseReportsGenerateResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Kind this is, in this case adsense#report.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AdsenseReportsGenerateResponse rows(List<List<String>> rows) {
    this.rows = rows;
    return this;
  }

  public AdsenseReportsGenerateResponse addRowsItem(List<String> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<List<String>> getRows() {
    return rows;
  }

  public void setRows(List<List<String>> rows) {
    this.rows = rows;
  }


  public AdsenseReportsGenerateResponse startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The requested start date in yyyy-mm-dd format.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public AdsenseReportsGenerateResponse totalMatchedRows(String totalMatchedRows) {
    this.totalMatchedRows = totalMatchedRows;
    return this;
  }

  /**
   * The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.
   * @return totalMatchedRows
   */
  @javax.annotation.Nullable
  public String getTotalMatchedRows() {
    return totalMatchedRows;
  }

  public void setTotalMatchedRows(String totalMatchedRows) {
    this.totalMatchedRows = totalMatchedRows;
  }


  public AdsenseReportsGenerateResponse totals(List<String> totals) {
    this.totals = totals;
    return this;
  }

  public AdsenseReportsGenerateResponse addTotalsItem(String totalsItem) {
    if (this.totals == null) {
      this.totals = new ArrayList<>();
    }
    this.totals.add(totalsItem);
    return this;
  }

  /**
   * The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
   * @return totals
   */
  @javax.annotation.Nullable
  public List<String> getTotals() {
    return totals;
  }

  public void setTotals(List<String> totals) {
    this.totals = totals;
  }


  public AdsenseReportsGenerateResponse warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public AdsenseReportsGenerateResponse addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Any warnings associated with generation of the report.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdsenseReportsGenerateResponse adsenseReportsGenerateResponse = (AdsenseReportsGenerateResponse) o;
    return Objects.equals(this.averages, adsenseReportsGenerateResponse.averages) &&
        Objects.equals(this.endDate, adsenseReportsGenerateResponse.endDate) &&
        Objects.equals(this.headers, adsenseReportsGenerateResponse.headers) &&
        Objects.equals(this.kind, adsenseReportsGenerateResponse.kind) &&
        Objects.equals(this.rows, adsenseReportsGenerateResponse.rows) &&
        Objects.equals(this.startDate, adsenseReportsGenerateResponse.startDate) &&
        Objects.equals(this.totalMatchedRows, adsenseReportsGenerateResponse.totalMatchedRows) &&
        Objects.equals(this.totals, adsenseReportsGenerateResponse.totals) &&
        Objects.equals(this.warnings, adsenseReportsGenerateResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averages, endDate, headers, kind, rows, startDate, totalMatchedRows, totals, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdsenseReportsGenerateResponse {\n");
    sb.append("    averages: ").append(toIndentedString(averages)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    totalMatchedRows: ").append(toIndentedString(totalMatchedRows)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averages");
    openapiFields.add("endDate");
    openapiFields.add("headers");
    openapiFields.add("kind");
    openapiFields.add("rows");
    openapiFields.add("startDate");
    openapiFields.add("totalMatchedRows");
    openapiFields.add("totals");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdsenseReportsGenerateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdsenseReportsGenerateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdsenseReportsGenerateResponse is not found in the empty JSON string", AdsenseReportsGenerateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdsenseReportsGenerateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdsenseReportsGenerateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("averages") != null && !jsonObj.get("averages").isJsonNull() && !jsonObj.get("averages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `averages` to be an array in the JSON string but got `%s`", jsonObj.get("averages").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            AdsenseReportsGenerateResponseHeadersInner.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull() && !jsonObj.get("rows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("totalMatchedRows") != null && !jsonObj.get("totalMatchedRows").isJsonNull()) && !jsonObj.get("totalMatchedRows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalMatchedRows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalMatchedRows").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull() && !jsonObj.get("totals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `totals` to be an array in the JSON string but got `%s`", jsonObj.get("totals").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdsenseReportsGenerateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdsenseReportsGenerateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdsenseReportsGenerateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdsenseReportsGenerateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AdsenseReportsGenerateResponse>() {
           @Override
           public void write(JsonWriter out, AdsenseReportsGenerateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdsenseReportsGenerateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdsenseReportsGenerateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdsenseReportsGenerateResponse
   * @throws IOException if the JSON string is invalid with respect to AdsenseReportsGenerateResponse
   */
  public static AdsenseReportsGenerateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdsenseReportsGenerateResponse.class);
  }

  /**
   * Convert an instance of AdsenseReportsGenerateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

