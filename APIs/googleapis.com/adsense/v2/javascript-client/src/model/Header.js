/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Header model module.
 * @module model/Header
 * @version v2
 */
class Header {
    /**
     * Constructs a new <code>Header</code>.
     * The header information of the columns requested in the report.
     * @alias module:model/Header
     */
    constructor() { 
        
        Header.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Header</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Header} obj Optional instance to populate.
     * @return {module:model/Header} The populated <code>Header</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Header();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Header</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Header</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) of this column. Only present if the header type is METRIC_CURRENCY.
 * @member {String} currencyCode
 */
Header.prototype['currencyCode'] = undefined;

/**
 * Required. Name of the header.
 * @member {String} name
 */
Header.prototype['name'] = undefined;

/**
 * Required. Type of the header.
 * @member {module:model/Header.TypeEnum} type
 */
Header.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Header['TypeEnum'] = {

    /**
     * value: "HEADER_TYPE_UNSPECIFIED"
     * @const
     */
    "HEADER_TYPE_UNSPECIFIED": "HEADER_TYPE_UNSPECIFIED",

    /**
     * value: "DIMENSION"
     * @const
     */
    "DIMENSION": "DIMENSION",

    /**
     * value: "METRIC_TALLY"
     * @const
     */
    "METRIC_TALLY": "METRIC_TALLY",

    /**
     * value: "METRIC_RATIO"
     * @const
     */
    "METRIC_RATIO": "METRIC_RATIO",

    /**
     * value: "METRIC_CURRENCY"
     * @const
     */
    "METRIC_CURRENCY": "METRIC_CURRENCY",

    /**
     * value: "METRIC_MILLISECONDS"
     * @const
     */
    "METRIC_MILLISECONDS": "METRIC_MILLISECONDS",

    /**
     * value: "METRIC_DECIMAL"
     * @const
     */
    "METRIC_DECIMAL": "METRIC_DECIMAL"
};



export default Header;

