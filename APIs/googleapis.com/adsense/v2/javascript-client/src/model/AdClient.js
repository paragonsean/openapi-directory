/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdClient model module.
 * @module model/AdClient
 * @version v2
 */
class AdClient {
    /**
     * Constructs a new <code>AdClient</code>.
     * Representation of an ad client. An ad client represents a user&#39;s subscription with a specific AdSense product.
     * @alias module:model/AdClient
     */
    constructor() { 
        
        AdClient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdClient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdClient} obj Optional instance to populate.
     * @return {module:model/AdClient} The populated <code>AdClient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdClient();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productCode')) {
                obj['productCode'] = ApiClient.convertToType(data['productCode'], 'String');
            }
            if (data.hasOwnProperty('reportingDimensionId')) {
                obj['reportingDimensionId'] = ApiClient.convertToType(data['reportingDimensionId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdClient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdClient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['productCode'] && !(typeof data['productCode'] === 'string' || data['productCode'] instanceof String)) {
            throw new Error("Expected the field `productCode` to be a primitive type in the JSON string but got " + data['productCode']);
        }
        // ensure the json data is a string
        if (data['reportingDimensionId'] && !(typeof data['reportingDimensionId'] === 'string' || data['reportingDimensionId'] instanceof String)) {
            throw new Error("Expected the field `reportingDimensionId` to be a primitive type in the JSON string but got " + data['reportingDimensionId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Resource name of the ad client. Format: accounts/{account}/adclients/{adclient}
 * @member {String} name
 */
AdClient.prototype['name'] = undefined;

/**
 * Output only. Reporting product code of the ad client. For example, \"AFC\" for AdSense for Content. Corresponds to the `PRODUCT_CODE` dimension, and present only if the ad client supports reporting.
 * @member {String} productCode
 */
AdClient.prototype['productCode'] = undefined;

/**
 * Output only. Unique ID of the ad client as used in the `AD_CLIENT_ID` reporting dimension. Present only if the ad client supports reporting.
 * @member {String} reportingDimensionId
 */
AdClient.prototype['reportingDimensionId'] = undefined;

/**
 * Output only. State of the ad client.
 * @member {module:model/AdClient.StateEnum} state
 */
AdClient.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AdClient['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "GETTING_READY"
     * @const
     */
    "GETTING_READY": "GETTING_READY",

    /**
     * value: "REQUIRES_REVIEW"
     * @const
     */
    "REQUIRES_REVIEW": "REQUIRES_REVIEW"
};



export default AdClient;

