/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlChannel::OAIUrlChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlChannel::OAIUrlChannel() {
    this->initializeModel();
}

OAIUrlChannel::~OAIUrlChannel() {}

void OAIUrlChannel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reporting_dimension_id_isSet = false;
    m_reporting_dimension_id_isValid = false;

    m_uri_pattern_isSet = false;
    m_uri_pattern_isValid = false;
}

void OAIUrlChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlChannel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reporting_dimension_id_isValid = ::OpenAPI::fromJsonValue(m_reporting_dimension_id, json[QString("reportingDimensionId")]);
    m_reporting_dimension_id_isSet = !json[QString("reportingDimensionId")].isNull() && m_reporting_dimension_id_isValid;

    m_uri_pattern_isValid = ::OpenAPI::fromJsonValue(m_uri_pattern, json[QString("uriPattern")]);
    m_uri_pattern_isSet = !json[QString("uriPattern")].isNull() && m_uri_pattern_isValid;
}

QString OAIUrlChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reporting_dimension_id_isSet) {
        obj.insert(QString("reportingDimensionId"), ::OpenAPI::toJsonValue(m_reporting_dimension_id));
    }
    if (m_uri_pattern_isSet) {
        obj.insert(QString("uriPattern"), ::OpenAPI::toJsonValue(m_uri_pattern));
    }
    return obj;
}

QString OAIUrlChannel::getName() const {
    return m_name;
}
void OAIUrlChannel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUrlChannel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUrlChannel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUrlChannel::getReportingDimensionId() const {
    return m_reporting_dimension_id;
}
void OAIUrlChannel::setReportingDimensionId(const QString &reporting_dimension_id) {
    m_reporting_dimension_id = reporting_dimension_id;
    m_reporting_dimension_id_isSet = true;
}

bool OAIUrlChannel::is_reporting_dimension_id_Set() const{
    return m_reporting_dimension_id_isSet;
}

bool OAIUrlChannel::is_reporting_dimension_id_Valid() const{
    return m_reporting_dimension_id_isValid;
}

QString OAIUrlChannel::getUriPattern() const {
    return m_uri_pattern;
}
void OAIUrlChannel::setUriPattern(const QString &uri_pattern) {
    m_uri_pattern = uri_pattern;
    m_uri_pattern_isSet = true;
}

bool OAIUrlChannel::is_uri_pattern_Set() const{
    return m_uri_pattern_isSet;
}

bool OAIUrlChannel::is_uri_pattern_Valid() const{
    return m_uri_pattern_isValid;
}

bool OAIUrlChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_dimension_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
