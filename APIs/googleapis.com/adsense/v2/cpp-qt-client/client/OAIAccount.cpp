/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_tasks_isSet = false;
    m_pending_tasks_isValid = false;

    m_premium_isSet = false;
    m_premium_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_tasks_isValid = ::OpenAPI::fromJsonValue(m_pending_tasks, json[QString("pendingTasks")]);
    m_pending_tasks_isSet = !json[QString("pendingTasks")].isNull() && m_pending_tasks_isValid;

    m_premium_isValid = ::OpenAPI::fromJsonValue(m_premium, json[QString("premium")]);
    m_premium_isSet = !json[QString("premium")].isNull() && m_premium_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_tasks.size() > 0) {
        obj.insert(QString("pendingTasks"), ::OpenAPI::toJsonValue(m_pending_tasks));
    }
    if (m_premium_isSet) {
        obj.insert(QString("premium"), ::OpenAPI::toJsonValue(m_premium));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIAccount::getCreateTime() const {
    return m_create_time;
}
void OAIAccount::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAccount::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAccount::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAccount::getDisplayName() const {
    return m_display_name;
}
void OAIAccount::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAccount::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAccount::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAccount::getPendingTasks() const {
    return m_pending_tasks;
}
void OAIAccount::setPendingTasks(const QList<QString> &pending_tasks) {
    m_pending_tasks = pending_tasks;
    m_pending_tasks_isSet = true;
}

bool OAIAccount::is_pending_tasks_Set() const{
    return m_pending_tasks_isSet;
}

bool OAIAccount::is_pending_tasks_Valid() const{
    return m_pending_tasks_isValid;
}

bool OAIAccount::isPremium() const {
    return m_premium;
}
void OAIAccount::setPremium(const bool &premium) {
    m_premium = premium;
    m_premium_isSet = true;
}

bool OAIAccount::is_premium_Set() const{
    return m_premium_isSet;
}

bool OAIAccount::is_premium_Valid() const{
    return m_premium_isValid;
}

QString OAIAccount::getState() const {
    return m_state;
}
void OAIAccount::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccount::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccount::is_state_Valid() const{
    return m_state_isValid;
}

OAITimeZone OAIAccount::getTimeZone() const {
    return m_time_zone;
}
void OAIAccount::setTimeZone(const OAITimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIAccount::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIAccount::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
