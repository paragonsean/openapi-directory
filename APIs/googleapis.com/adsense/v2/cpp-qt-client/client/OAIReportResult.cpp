/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportResult::OAIReportResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportResult::OAIReportResult() {
    this->initializeModel();
}

OAIReportResult::~OAIReportResult() {}

void OAIReportResult::initializeModel() {

    m_averages_isSet = false;
    m_averages_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_total_matched_rows_isSet = false;
    m_total_matched_rows_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReportResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportResult::fromJsonObject(QJsonObject json) {

    m_averages_isValid = ::OpenAPI::fromJsonValue(m_averages, json[QString("averages")]);
    m_averages_isSet = !json[QString("averages")].isNull() && m_averages_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_total_matched_rows_isValid = ::OpenAPI::fromJsonValue(m_total_matched_rows, json[QString("totalMatchedRows")]);
    m_total_matched_rows_isSet = !json[QString("totalMatchedRows")].isNull() && m_total_matched_rows_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIReportResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportResult::asJsonObject() const {
    QJsonObject obj;
    if (m_averages.isSet()) {
        obj.insert(QString("averages"), ::OpenAPI::toJsonValue(m_averages));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_total_matched_rows_isSet) {
        obj.insert(QString("totalMatchedRows"), ::OpenAPI::toJsonValue(m_total_matched_rows));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIRow OAIReportResult::getAverages() const {
    return m_averages;
}
void OAIReportResult::setAverages(const OAIRow &averages) {
    m_averages = averages;
    m_averages_isSet = true;
}

bool OAIReportResult::is_averages_Set() const{
    return m_averages_isSet;
}

bool OAIReportResult::is_averages_Valid() const{
    return m_averages_isValid;
}

OAIDate OAIReportResult::getEndDate() const {
    return m_end_date;
}
void OAIReportResult::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIReportResult::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIReportResult::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIHeader> OAIReportResult::getHeaders() const {
    return m_headers;
}
void OAIReportResult::setHeaders(const QList<OAIHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIReportResult::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIReportResult::is_headers_Valid() const{
    return m_headers_isValid;
}

QList<OAIRow> OAIReportResult::getRows() const {
    return m_rows;
}
void OAIReportResult::setRows(const QList<OAIRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReportResult::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReportResult::is_rows_Valid() const{
    return m_rows_isValid;
}

OAIDate OAIReportResult::getStartDate() const {
    return m_start_date;
}
void OAIReportResult::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReportResult::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReportResult::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIReportResult::getTotalMatchedRows() const {
    return m_total_matched_rows;
}
void OAIReportResult::setTotalMatchedRows(const QString &total_matched_rows) {
    m_total_matched_rows = total_matched_rows;
    m_total_matched_rows_isSet = true;
}

bool OAIReportResult::is_total_matched_rows_Set() const{
    return m_total_matched_rows_isSet;
}

bool OAIReportResult::is_total_matched_rows_Valid() const{
    return m_total_matched_rows_isValid;
}

OAIRow OAIReportResult::getTotals() const {
    return m_totals;
}
void OAIReportResult::setTotals(const OAIRow &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIReportResult::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIReportResult::is_totals_Valid() const{
    return m_totals_isValid;
}

QList<QString> OAIReportResult::getWarnings() const {
    return m_warnings;
}
void OAIReportResult::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReportResult::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReportResult::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReportResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_averages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_matched_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
