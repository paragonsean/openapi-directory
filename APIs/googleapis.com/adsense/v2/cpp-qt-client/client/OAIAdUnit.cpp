/**
 * AdSense Management API
 * The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnit::OAIAdUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnit::OAIAdUnit() {
    this->initializeModel();
}

OAIAdUnit::~OAIAdUnit() {}

void OAIAdUnit::initializeModel() {

    m_content_ads_settings_isSet = false;
    m_content_ads_settings_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reporting_dimension_id_isSet = false;
    m_reporting_dimension_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAdUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnit::fromJsonObject(QJsonObject json) {

    m_content_ads_settings_isValid = ::OpenAPI::fromJsonValue(m_content_ads_settings, json[QString("contentAdsSettings")]);
    m_content_ads_settings_isSet = !json[QString("contentAdsSettings")].isNull() && m_content_ads_settings_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reporting_dimension_id_isValid = ::OpenAPI::fromJsonValue(m_reporting_dimension_id, json[QString("reportingDimensionId")]);
    m_reporting_dimension_id_isSet = !json[QString("reportingDimensionId")].isNull() && m_reporting_dimension_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAdUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_content_ads_settings.isSet()) {
        obj.insert(QString("contentAdsSettings"), ::OpenAPI::toJsonValue(m_content_ads_settings));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reporting_dimension_id_isSet) {
        obj.insert(QString("reportingDimensionId"), ::OpenAPI::toJsonValue(m_reporting_dimension_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIContentAdsSettings OAIAdUnit::getContentAdsSettings() const {
    return m_content_ads_settings;
}
void OAIAdUnit::setContentAdsSettings(const OAIContentAdsSettings &content_ads_settings) {
    m_content_ads_settings = content_ads_settings;
    m_content_ads_settings_isSet = true;
}

bool OAIAdUnit::is_content_ads_settings_Set() const{
    return m_content_ads_settings_isSet;
}

bool OAIAdUnit::is_content_ads_settings_Valid() const{
    return m_content_ads_settings_isValid;
}

QString OAIAdUnit::getDisplayName() const {
    return m_display_name;
}
void OAIAdUnit::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAdUnit::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAdUnit::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAdUnit::getName() const {
    return m_name;
}
void OAIAdUnit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdUnit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdUnit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdUnit::getReportingDimensionId() const {
    return m_reporting_dimension_id;
}
void OAIAdUnit::setReportingDimensionId(const QString &reporting_dimension_id) {
    m_reporting_dimension_id = reporting_dimension_id;
    m_reporting_dimension_id_isSet = true;
}

bool OAIAdUnit::is_reporting_dimension_id_Set() const{
    return m_reporting_dimension_id_isSet;
}

bool OAIAdUnit::is_reporting_dimension_id_Valid() const{
    return m_reporting_dimension_id_isValid;
}

QString OAIAdUnit::getState() const {
    return m_state;
}
void OAIAdUnit::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAdUnit::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAdUnit::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAdUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_ads_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_dimension_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
