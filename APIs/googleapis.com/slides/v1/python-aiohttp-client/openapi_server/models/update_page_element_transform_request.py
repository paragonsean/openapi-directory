# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affine_transform import AffineTransform
from openapi_server import util


class UpdatePageElementTransformRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_mode: str=None, object_id: str=None, transform: AffineTransform=None):
        """UpdatePageElementTransformRequest - a model defined in OpenAPI

        :param apply_mode: The apply_mode of this UpdatePageElementTransformRequest.
        :param object_id: The object_id of this UpdatePageElementTransformRequest.
        :param transform: The transform of this UpdatePageElementTransformRequest.
        """
        self.openapi_types = {
            'apply_mode': str,
            'object_id': str,
            'transform': AffineTransform
        }

        self.attribute_map = {
            'apply_mode': 'applyMode',
            'object_id': 'objectId',
            'transform': 'transform'
        }

        self._apply_mode = apply_mode
        self._object_id = object_id
        self._transform = transform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePageElementTransformRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePageElementTransformRequest of this UpdatePageElementTransformRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_mode(self):
        """Gets the apply_mode of this UpdatePageElementTransformRequest.

        The apply mode of the transform update.

        :return: The apply_mode of this UpdatePageElementTransformRequest.
        :rtype: str
        """
        return self._apply_mode

    @apply_mode.setter
    def apply_mode(self, apply_mode):
        """Sets the apply_mode of this UpdatePageElementTransformRequest.

        The apply mode of the transform update.

        :param apply_mode: The apply_mode of this UpdatePageElementTransformRequest.
        :type apply_mode: str
        """
        allowed_values = ["APPLY_MODE_UNSPECIFIED", "RELATIVE", "ABSOLUTE"]  # noqa: E501
        if apply_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `apply_mode` ({0}), must be one of {1}"
                .format(apply_mode, allowed_values)
            )

        self._apply_mode = apply_mode

    @property
    def object_id(self):
        """Gets the object_id of this UpdatePageElementTransformRequest.

        The object ID of the page element to update.

        :return: The object_id of this UpdatePageElementTransformRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this UpdatePageElementTransformRequest.

        The object ID of the page element to update.

        :param object_id: The object_id of this UpdatePageElementTransformRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def transform(self):
        """Gets the transform of this UpdatePageElementTransformRequest.


        :return: The transform of this UpdatePageElementTransformRequest.
        :rtype: AffineTransform
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this UpdatePageElementTransformRequest.


        :param transform: The transform of this UpdatePageElementTransformRequest.
        :type transform: AffineTransform
        """

        self._transform = transform
