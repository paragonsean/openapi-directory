# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSlidesPositionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insertion_index: int=None, slide_object_ids: List[str]=None):
        """UpdateSlidesPositionRequest - a model defined in OpenAPI

        :param insertion_index: The insertion_index of this UpdateSlidesPositionRequest.
        :param slide_object_ids: The slide_object_ids of this UpdateSlidesPositionRequest.
        """
        self.openapi_types = {
            'insertion_index': int,
            'slide_object_ids': List[str]
        }

        self.attribute_map = {
            'insertion_index': 'insertionIndex',
            'slide_object_ids': 'slideObjectIds'
        }

        self._insertion_index = insertion_index
        self._slide_object_ids = slide_object_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSlidesPositionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSlidesPositionRequest of this UpdateSlidesPositionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insertion_index(self):
        """Gets the insertion_index of this UpdateSlidesPositionRequest.

        The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.

        :return: The insertion_index of this UpdateSlidesPositionRequest.
        :rtype: int
        """
        return self._insertion_index

    @insertion_index.setter
    def insertion_index(self, insertion_index):
        """Sets the insertion_index of this UpdateSlidesPositionRequest.

        The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.

        :param insertion_index: The insertion_index of this UpdateSlidesPositionRequest.
        :type insertion_index: int
        """

        self._insertion_index = insertion_index

    @property
    def slide_object_ids(self):
        """Gets the slide_object_ids of this UpdateSlidesPositionRequest.

        The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.

        :return: The slide_object_ids of this UpdateSlidesPositionRequest.
        :rtype: List[str]
        """
        return self._slide_object_ids

    @slide_object_ids.setter
    def slide_object_ids(self, slide_object_ids):
        """Sets the slide_object_ids of this UpdateSlidesPositionRequest.

        The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.

        :param slide_object_ids: The slide_object_ids of this UpdateSlidesPositionRequest.
        :type slide_object_ids: List[str]
        """

        self._slide_object_ids = slide_object_ids
