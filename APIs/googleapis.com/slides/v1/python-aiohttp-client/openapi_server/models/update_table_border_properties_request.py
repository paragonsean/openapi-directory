# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_border_properties import TableBorderProperties
from openapi_server.models.table_range import TableRange
from openapi_server import util


class UpdateTableBorderPropertiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, border_position: str=None, fields: str=None, object_id: str=None, table_border_properties: TableBorderProperties=None, table_range: TableRange=None):
        """UpdateTableBorderPropertiesRequest - a model defined in OpenAPI

        :param border_position: The border_position of this UpdateTableBorderPropertiesRequest.
        :param fields: The fields of this UpdateTableBorderPropertiesRequest.
        :param object_id: The object_id of this UpdateTableBorderPropertiesRequest.
        :param table_border_properties: The table_border_properties of this UpdateTableBorderPropertiesRequest.
        :param table_range: The table_range of this UpdateTableBorderPropertiesRequest.
        """
        self.openapi_types = {
            'border_position': str,
            'fields': str,
            'object_id': str,
            'table_border_properties': TableBorderProperties,
            'table_range': TableRange
        }

        self.attribute_map = {
            'border_position': 'borderPosition',
            'fields': 'fields',
            'object_id': 'objectId',
            'table_border_properties': 'tableBorderProperties',
            'table_range': 'tableRange'
        }

        self._border_position = border_position
        self._fields = fields
        self._object_id = object_id
        self._table_border_properties = table_border_properties
        self._table_range = table_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTableBorderPropertiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTableBorderPropertiesRequest of this UpdateTableBorderPropertiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def border_position(self):
        """Gets the border_position of this UpdateTableBorderPropertiesRequest.

        The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.

        :return: The border_position of this UpdateTableBorderPropertiesRequest.
        :rtype: str
        """
        return self._border_position

    @border_position.setter
    def border_position(self, border_position):
        """Sets the border_position of this UpdateTableBorderPropertiesRequest.

        The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.

        :param border_position: The border_position of this UpdateTableBorderPropertiesRequest.
        :type border_position: str
        """
        allowed_values = ["ALL", "BOTTOM", "INNER", "INNER_HORIZONTAL", "INNER_VERTICAL", "LEFT", "OUTER", "RIGHT", "TOP"]  # noqa: E501
        if border_position not in allowed_values:
            raise ValueError(
                "Invalid value for `border_position` ({0}), must be one of {1}"
                .format(border_position, allowed_values)
            )

        self._border_position = border_position

    @property
    def fields(self):
        """Gets the fields of this UpdateTableBorderPropertiesRequest.

        The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `\"tableBorderFill.solidFill.color\"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

        :return: The fields of this UpdateTableBorderPropertiesRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateTableBorderPropertiesRequest.

        The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `\"tableBorderFill.solidFill.color\"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.

        :param fields: The fields of this UpdateTableBorderPropertiesRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def object_id(self):
        """Gets the object_id of this UpdateTableBorderPropertiesRequest.

        The object ID of the table.

        :return: The object_id of this UpdateTableBorderPropertiesRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this UpdateTableBorderPropertiesRequest.

        The object ID of the table.

        :param object_id: The object_id of this UpdateTableBorderPropertiesRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def table_border_properties(self):
        """Gets the table_border_properties of this UpdateTableBorderPropertiesRequest.


        :return: The table_border_properties of this UpdateTableBorderPropertiesRequest.
        :rtype: TableBorderProperties
        """
        return self._table_border_properties

    @table_border_properties.setter
    def table_border_properties(self, table_border_properties):
        """Sets the table_border_properties of this UpdateTableBorderPropertiesRequest.


        :param table_border_properties: The table_border_properties of this UpdateTableBorderPropertiesRequest.
        :type table_border_properties: TableBorderProperties
        """

        self._table_border_properties = table_border_properties

    @property
    def table_range(self):
        """Gets the table_range of this UpdateTableBorderPropertiesRequest.


        :return: The table_range of this UpdateTableBorderPropertiesRequest.
        :rtype: TableRange
        """
        return self._table_range

    @table_range.setter
    def table_range(self, table_range):
        """Sets the table_range of this UpdateTableBorderPropertiesRequest.


        :param table_range: The table_range of this UpdateTableBorderPropertiesRequest.
        :type table_range: TableRange
        """

        self._table_range = table_range
