# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.substring_match_criteria import SubstringMatchCriteria
from openapi_server import util


class ReplaceAllShapesWithSheetsChartRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chart_id: int=None, contains_text: SubstringMatchCriteria=None, linking_mode: str=None, page_object_ids: List[str]=None, spreadsheet_id: str=None):
        """ReplaceAllShapesWithSheetsChartRequest - a model defined in OpenAPI

        :param chart_id: The chart_id of this ReplaceAllShapesWithSheetsChartRequest.
        :param contains_text: The contains_text of this ReplaceAllShapesWithSheetsChartRequest.
        :param linking_mode: The linking_mode of this ReplaceAllShapesWithSheetsChartRequest.
        :param page_object_ids: The page_object_ids of this ReplaceAllShapesWithSheetsChartRequest.
        :param spreadsheet_id: The spreadsheet_id of this ReplaceAllShapesWithSheetsChartRequest.
        """
        self.openapi_types = {
            'chart_id': int,
            'contains_text': SubstringMatchCriteria,
            'linking_mode': str,
            'page_object_ids': List[str],
            'spreadsheet_id': str
        }

        self.attribute_map = {
            'chart_id': 'chartId',
            'contains_text': 'containsText',
            'linking_mode': 'linkingMode',
            'page_object_ids': 'pageObjectIds',
            'spreadsheet_id': 'spreadsheetId'
        }

        self._chart_id = chart_id
        self._contains_text = contains_text
        self._linking_mode = linking_mode
        self._page_object_ids = page_object_ids
        self._spreadsheet_id = spreadsheet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceAllShapesWithSheetsChartRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceAllShapesWithSheetsChartRequest of this ReplaceAllShapesWithSheetsChartRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chart_id(self):
        """Gets the chart_id of this ReplaceAllShapesWithSheetsChartRequest.

        The ID of the specific chart in the Google Sheets spreadsheet.

        :return: The chart_id of this ReplaceAllShapesWithSheetsChartRequest.
        :rtype: int
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this ReplaceAllShapesWithSheetsChartRequest.

        The ID of the specific chart in the Google Sheets spreadsheet.

        :param chart_id: The chart_id of this ReplaceAllShapesWithSheetsChartRequest.
        :type chart_id: int
        """

        self._chart_id = chart_id

    @property
    def contains_text(self):
        """Gets the contains_text of this ReplaceAllShapesWithSheetsChartRequest.


        :return: The contains_text of this ReplaceAllShapesWithSheetsChartRequest.
        :rtype: SubstringMatchCriteria
        """
        return self._contains_text

    @contains_text.setter
    def contains_text(self, contains_text):
        """Sets the contains_text of this ReplaceAllShapesWithSheetsChartRequest.


        :param contains_text: The contains_text of this ReplaceAllShapesWithSheetsChartRequest.
        :type contains_text: SubstringMatchCriteria
        """

        self._contains_text = contains_text

    @property
    def linking_mode(self):
        """Gets the linking_mode of this ReplaceAllShapesWithSheetsChartRequest.

        The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.

        :return: The linking_mode of this ReplaceAllShapesWithSheetsChartRequest.
        :rtype: str
        """
        return self._linking_mode

    @linking_mode.setter
    def linking_mode(self, linking_mode):
        """Sets the linking_mode of this ReplaceAllShapesWithSheetsChartRequest.

        The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.

        :param linking_mode: The linking_mode of this ReplaceAllShapesWithSheetsChartRequest.
        :type linking_mode: str
        """
        allowed_values = ["NOT_LINKED_IMAGE", "LINKED"]  # noqa: E501
        if linking_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `linking_mode` ({0}), must be one of {1}"
                .format(linking_mode, allowed_values)
            )

        self._linking_mode = linking_mode

    @property
    def page_object_ids(self):
        """Gets the page_object_ids of this ReplaceAllShapesWithSheetsChartRequest.

        If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.

        :return: The page_object_ids of this ReplaceAllShapesWithSheetsChartRequest.
        :rtype: List[str]
        """
        return self._page_object_ids

    @page_object_ids.setter
    def page_object_ids(self, page_object_ids):
        """Sets the page_object_ids of this ReplaceAllShapesWithSheetsChartRequest.

        If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.

        :param page_object_ids: The page_object_ids of this ReplaceAllShapesWithSheetsChartRequest.
        :type page_object_ids: List[str]
        """

        self._page_object_ids = page_object_ids

    @property
    def spreadsheet_id(self):
        """Gets the spreadsheet_id of this ReplaceAllShapesWithSheetsChartRequest.

        The ID of the Google Sheets spreadsheet that contains the chart.

        :return: The spreadsheet_id of this ReplaceAllShapesWithSheetsChartRequest.
        :rtype: str
        """
        return self._spreadsheet_id

    @spreadsheet_id.setter
    def spreadsheet_id(self, spreadsheet_id):
        """Sets the spreadsheet_id of this ReplaceAllShapesWithSheetsChartRequest.

        The ID of the Google Sheets spreadsheet that contains the chart.

        :param spreadsheet_id: The spreadsheet_id of this ReplaceAllShapesWithSheetsChartRequest.
        :type spreadsheet_id: str
        """

        self._spreadsheet_id = spreadsheet_id
