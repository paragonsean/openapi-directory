# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.page import Page
from openapi_server.models.size import Size
from openapi_server import util


class Presentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layouts: List[Page]=None, locale: str=None, masters: List[Page]=None, notes_master: Page=None, page_size: Size=None, presentation_id: str=None, revision_id: str=None, slides: List[Page]=None, title: str=None):
        """Presentation - a model defined in OpenAPI

        :param layouts: The layouts of this Presentation.
        :param locale: The locale of this Presentation.
        :param masters: The masters of this Presentation.
        :param notes_master: The notes_master of this Presentation.
        :param page_size: The page_size of this Presentation.
        :param presentation_id: The presentation_id of this Presentation.
        :param revision_id: The revision_id of this Presentation.
        :param slides: The slides of this Presentation.
        :param title: The title of this Presentation.
        """
        self.openapi_types = {
            'layouts': List[Page],
            'locale': str,
            'masters': List[Page],
            'notes_master': Page,
            'page_size': Size,
            'presentation_id': str,
            'revision_id': str,
            'slides': List[Page],
            'title': str
        }

        self.attribute_map = {
            'layouts': 'layouts',
            'locale': 'locale',
            'masters': 'masters',
            'notes_master': 'notesMaster',
            'page_size': 'pageSize',
            'presentation_id': 'presentationId',
            'revision_id': 'revisionId',
            'slides': 'slides',
            'title': 'title'
        }

        self._layouts = layouts
        self._locale = locale
        self._masters = masters
        self._notes_master = notes_master
        self._page_size = page_size
        self._presentation_id = presentation_id
        self._revision_id = revision_id
        self._slides = slides
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Presentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Presentation of this Presentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layouts(self):
        """Gets the layouts of this Presentation.

        The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.

        :return: The layouts of this Presentation.
        :rtype: List[Page]
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts):
        """Sets the layouts of this Presentation.

        The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.

        :param layouts: The layouts of this Presentation.
        :type layouts: List[Page]
        """

        self._layouts = layouts

    @property
    def locale(self):
        """Gets the locale of this Presentation.

        The locale of the presentation, as an IETF BCP 47 language tag.

        :return: The locale of this Presentation.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Presentation.

        The locale of the presentation, as an IETF BCP 47 language tag.

        :param locale: The locale of this Presentation.
        :type locale: str
        """

        self._locale = locale

    @property
    def masters(self):
        """Gets the masters of this Presentation.

        The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.

        :return: The masters of this Presentation.
        :rtype: List[Page]
        """
        return self._masters

    @masters.setter
    def masters(self, masters):
        """Sets the masters of this Presentation.

        The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.

        :param masters: The masters of this Presentation.
        :type masters: List[Page]
        """

        self._masters = masters

    @property
    def notes_master(self):
        """Gets the notes_master of this Presentation.


        :return: The notes_master of this Presentation.
        :rtype: Page
        """
        return self._notes_master

    @notes_master.setter
    def notes_master(self, notes_master):
        """Sets the notes_master of this Presentation.


        :param notes_master: The notes_master of this Presentation.
        :type notes_master: Page
        """

        self._notes_master = notes_master

    @property
    def page_size(self):
        """Gets the page_size of this Presentation.


        :return: The page_size of this Presentation.
        :rtype: Size
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Presentation.


        :param page_size: The page_size of this Presentation.
        :type page_size: Size
        """

        self._page_size = page_size

    @property
    def presentation_id(self):
        """Gets the presentation_id of this Presentation.

        The ID of the presentation.

        :return: The presentation_id of this Presentation.
        :rtype: str
        """
        return self._presentation_id

    @presentation_id.setter
    def presentation_id(self, presentation_id):
        """Sets the presentation_id of this Presentation.

        The ID of the presentation.

        :param presentation_id: The presentation_id of this Presentation.
        :type presentation_id: str
        """

        self._presentation_id = presentation_id

    @property
    def revision_id(self):
        """Gets the revision_id of this Presentation.

        Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :return: The revision_id of this Presentation.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Presentation.

        Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :param revision_id: The revision_id of this Presentation.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def slides(self):
        """Gets the slides of this Presentation.

        The slides in the presentation. A slide inherits properties from a slide layout.

        :return: The slides of this Presentation.
        :rtype: List[Page]
        """
        return self._slides

    @slides.setter
    def slides(self, slides):
        """Sets the slides of this Presentation.

        The slides in the presentation. A slide inherits properties from a slide layout.

        :param slides: The slides of this Presentation.
        :type slides: List[Page]
        """

        self._slides = slides

    @property
    def title(self):
        """Gets the title of this Presentation.

        The title of the presentation.

        :return: The title of this Presentation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Presentation.

        The title of the presentation.

        :param title: The title of this Presentation.
        :type title: str
        """

        self._title = title
