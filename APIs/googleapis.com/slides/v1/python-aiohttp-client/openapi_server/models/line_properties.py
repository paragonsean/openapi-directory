# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.line_connection import LineConnection
from openapi_server.models.line_fill import LineFill
from openapi_server.models.link import Link
from openapi_server import util


class LineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dash_style: str=None, end_arrow: str=None, end_connection: LineConnection=None, line_fill: LineFill=None, link: Link=None, start_arrow: str=None, start_connection: LineConnection=None, weight: Dimension=None):
        """LineProperties - a model defined in OpenAPI

        :param dash_style: The dash_style of this LineProperties.
        :param end_arrow: The end_arrow of this LineProperties.
        :param end_connection: The end_connection of this LineProperties.
        :param line_fill: The line_fill of this LineProperties.
        :param link: The link of this LineProperties.
        :param start_arrow: The start_arrow of this LineProperties.
        :param start_connection: The start_connection of this LineProperties.
        :param weight: The weight of this LineProperties.
        """
        self.openapi_types = {
            'dash_style': str,
            'end_arrow': str,
            'end_connection': LineConnection,
            'line_fill': LineFill,
            'link': Link,
            'start_arrow': str,
            'start_connection': LineConnection,
            'weight': Dimension
        }

        self.attribute_map = {
            'dash_style': 'dashStyle',
            'end_arrow': 'endArrow',
            'end_connection': 'endConnection',
            'line_fill': 'lineFill',
            'link': 'link',
            'start_arrow': 'startArrow',
            'start_connection': 'startConnection',
            'weight': 'weight'
        }

        self._dash_style = dash_style
        self._end_arrow = end_arrow
        self._end_connection = end_connection
        self._line_fill = line_fill
        self._link = link
        self._start_arrow = start_arrow
        self._start_connection = start_connection
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineProperties of this LineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dash_style(self):
        """Gets the dash_style of this LineProperties.

        The dash style of the line.

        :return: The dash_style of this LineProperties.
        :rtype: str
        """
        return self._dash_style

    @dash_style.setter
    def dash_style(self, dash_style):
        """Sets the dash_style of this LineProperties.

        The dash style of the line.

        :param dash_style: The dash_style of this LineProperties.
        :type dash_style: str
        """
        allowed_values = ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH", "DASH_DOT", "LONG_DASH", "LONG_DASH_DOT"]  # noqa: E501
        if dash_style not in allowed_values:
            raise ValueError(
                "Invalid value for `dash_style` ({0}), must be one of {1}"
                .format(dash_style, allowed_values)
            )

        self._dash_style = dash_style

    @property
    def end_arrow(self):
        """Gets the end_arrow of this LineProperties.

        The style of the arrow at the end of the line.

        :return: The end_arrow of this LineProperties.
        :rtype: str
        """
        return self._end_arrow

    @end_arrow.setter
    def end_arrow(self, end_arrow):
        """Sets the end_arrow of this LineProperties.

        The style of the arrow at the end of the line.

        :param end_arrow: The end_arrow of this LineProperties.
        :type end_arrow: str
        """
        allowed_values = ["ARROW_STYLE_UNSPECIFIED", "NONE", "STEALTH_ARROW", "FILL_ARROW", "FILL_CIRCLE", "FILL_SQUARE", "FILL_DIAMOND", "OPEN_ARROW", "OPEN_CIRCLE", "OPEN_SQUARE", "OPEN_DIAMOND"]  # noqa: E501
        if end_arrow not in allowed_values:
            raise ValueError(
                "Invalid value for `end_arrow` ({0}), must be one of {1}"
                .format(end_arrow, allowed_values)
            )

        self._end_arrow = end_arrow

    @property
    def end_connection(self):
        """Gets the end_connection of this LineProperties.


        :return: The end_connection of this LineProperties.
        :rtype: LineConnection
        """
        return self._end_connection

    @end_connection.setter
    def end_connection(self, end_connection):
        """Sets the end_connection of this LineProperties.


        :param end_connection: The end_connection of this LineProperties.
        :type end_connection: LineConnection
        """

        self._end_connection = end_connection

    @property
    def line_fill(self):
        """Gets the line_fill of this LineProperties.


        :return: The line_fill of this LineProperties.
        :rtype: LineFill
        """
        return self._line_fill

    @line_fill.setter
    def line_fill(self, line_fill):
        """Sets the line_fill of this LineProperties.


        :param line_fill: The line_fill of this LineProperties.
        :type line_fill: LineFill
        """

        self._line_fill = line_fill

    @property
    def link(self):
        """Gets the link of this LineProperties.


        :return: The link of this LineProperties.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this LineProperties.


        :param link: The link of this LineProperties.
        :type link: Link
        """

        self._link = link

    @property
    def start_arrow(self):
        """Gets the start_arrow of this LineProperties.

        The style of the arrow at the beginning of the line.

        :return: The start_arrow of this LineProperties.
        :rtype: str
        """
        return self._start_arrow

    @start_arrow.setter
    def start_arrow(self, start_arrow):
        """Sets the start_arrow of this LineProperties.

        The style of the arrow at the beginning of the line.

        :param start_arrow: The start_arrow of this LineProperties.
        :type start_arrow: str
        """
        allowed_values = ["ARROW_STYLE_UNSPECIFIED", "NONE", "STEALTH_ARROW", "FILL_ARROW", "FILL_CIRCLE", "FILL_SQUARE", "FILL_DIAMOND", "OPEN_ARROW", "OPEN_CIRCLE", "OPEN_SQUARE", "OPEN_DIAMOND"]  # noqa: E501
        if start_arrow not in allowed_values:
            raise ValueError(
                "Invalid value for `start_arrow` ({0}), must be one of {1}"
                .format(start_arrow, allowed_values)
            )

        self._start_arrow = start_arrow

    @property
    def start_connection(self):
        """Gets the start_connection of this LineProperties.


        :return: The start_connection of this LineProperties.
        :rtype: LineConnection
        """
        return self._start_connection

    @start_connection.setter
    def start_connection(self, start_connection):
        """Sets the start_connection of this LineProperties.


        :param start_connection: The start_connection of this LineProperties.
        :type start_connection: LineConnection
        """

        self._start_connection = start_connection

    @property
    def weight(self):
        """Gets the weight of this LineProperties.


        :return: The weight of this LineProperties.
        :rtype: Dimension
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this LineProperties.


        :param weight: The weight of this LineProperties.
        :type weight: Dimension
        """

        self._weight = weight
