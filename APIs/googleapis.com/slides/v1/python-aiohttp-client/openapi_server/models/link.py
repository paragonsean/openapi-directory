# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_object_id: str=None, relative_link: str=None, slide_index: int=None, url: str=None):
        """Link - a model defined in OpenAPI

        :param page_object_id: The page_object_id of this Link.
        :param relative_link: The relative_link of this Link.
        :param slide_index: The slide_index of this Link.
        :param url: The url of this Link.
        """
        self.openapi_types = {
            'page_object_id': str,
            'relative_link': str,
            'slide_index': int,
            'url': str
        }

        self.attribute_map = {
            'page_object_id': 'pageObjectId',
            'relative_link': 'relativeLink',
            'slide_index': 'slideIndex',
            'url': 'url'
        }

        self._page_object_id = page_object_id
        self._relative_link = relative_link
        self._slide_index = slide_index
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_object_id(self):
        """Gets the page_object_id of this Link.

        If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.

        :return: The page_object_id of this Link.
        :rtype: str
        """
        return self._page_object_id

    @page_object_id.setter
    def page_object_id(self, page_object_id):
        """Sets the page_object_id of this Link.

        If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.

        :param page_object_id: The page_object_id of this Link.
        :type page_object_id: str
        """

        self._page_object_id = page_object_id

    @property
    def relative_link(self):
        """Gets the relative_link of this Link.

        If set, indicates this is a link to a slide in this presentation, addressed by its position.

        :return: The relative_link of this Link.
        :rtype: str
        """
        return self._relative_link

    @relative_link.setter
    def relative_link(self, relative_link):
        """Sets the relative_link of this Link.

        If set, indicates this is a link to a slide in this presentation, addressed by its position.

        :param relative_link: The relative_link of this Link.
        :type relative_link: str
        """
        allowed_values = ["RELATIVE_SLIDE_LINK_UNSPECIFIED", "NEXT_SLIDE", "PREVIOUS_SLIDE", "FIRST_SLIDE", "LAST_SLIDE"]  # noqa: E501
        if relative_link not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_link` ({0}), must be one of {1}"
                .format(relative_link, allowed_values)
            )

        self._relative_link = relative_link

    @property
    def slide_index(self):
        """Gets the slide_index of this Link.

        If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.

        :return: The slide_index of this Link.
        :rtype: int
        """
        return self._slide_index

    @slide_index.setter
    def slide_index(self, slide_index):
        """Sets the slide_index of this Link.

        If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.

        :param slide_index: The slide_index of this Link.
        :type slide_index: int
        """

        self._slide_index = slide_index

    @property
    def url(self):
        """Gets the url of this Link.

        If set, indicates this is a link to the external web page at this URL.

        :return: The url of this Link.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Link.

        If set, indicates this is a link to the external web page at this URL.

        :param url: The url of this Link.
        :type url: str
        """

        self._url = url
