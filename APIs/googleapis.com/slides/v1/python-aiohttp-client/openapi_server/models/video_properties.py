# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.outline import Outline
from openapi_server import util


class VideoProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_play: bool=None, end: int=None, mute: bool=None, outline: Outline=None, start: int=None):
        """VideoProperties - a model defined in OpenAPI

        :param auto_play: The auto_play of this VideoProperties.
        :param end: The end of this VideoProperties.
        :param mute: The mute of this VideoProperties.
        :param outline: The outline of this VideoProperties.
        :param start: The start of this VideoProperties.
        """
        self.openapi_types = {
            'auto_play': bool,
            'end': int,
            'mute': bool,
            'outline': Outline,
            'start': int
        }

        self.attribute_map = {
            'auto_play': 'autoPlay',
            'end': 'end',
            'mute': 'mute',
            'outline': 'outline',
            'start': 'start'
        }

        self._auto_play = auto_play
        self._end = end
        self._mute = mute
        self._outline = outline
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoProperties of this VideoProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_play(self):
        """Gets the auto_play of this VideoProperties.

        Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.

        :return: The auto_play of this VideoProperties.
        :rtype: bool
        """
        return self._auto_play

    @auto_play.setter
    def auto_play(self, auto_play):
        """Sets the auto_play of this VideoProperties.

        Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.

        :param auto_play: The auto_play of this VideoProperties.
        :type auto_play: bool
        """

        self._auto_play = auto_play

    @property
    def end(self):
        """Gets the end of this VideoProperties.

        The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.

        :return: The end of this VideoProperties.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this VideoProperties.

        The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.

        :param end: The end of this VideoProperties.
        :type end: int
        """

        self._end = end

    @property
    def mute(self):
        """Gets the mute of this VideoProperties.

        Whether to mute the audio during video playback. Defaults to false.

        :return: The mute of this VideoProperties.
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this VideoProperties.

        Whether to mute the audio during video playback. Defaults to false.

        :param mute: The mute of this VideoProperties.
        :type mute: bool
        """

        self._mute = mute

    @property
    def outline(self):
        """Gets the outline of this VideoProperties.


        :return: The outline of this VideoProperties.
        :rtype: Outline
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this VideoProperties.


        :param outline: The outline of this VideoProperties.
        :type outline: Outline
        """

        self._outline = outline

    @property
    def start(self):
        """Gets the start of this VideoProperties.

        The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.

        :return: The start of this VideoProperties.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this VideoProperties.

        The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.

        :param start: The start of this VideoProperties.
        :type start: int
        """

        self._start = start
