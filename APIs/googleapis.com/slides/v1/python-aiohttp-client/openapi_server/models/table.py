# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_border_row import TableBorderRow
from openapi_server.models.table_column_properties import TableColumnProperties
from openapi_server.models.table_row import TableRow
from openapi_server import util


class Table(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: int=None, horizontal_border_rows: List[TableBorderRow]=None, rows: int=None, table_columns: List[TableColumnProperties]=None, table_rows: List[TableRow]=None, vertical_border_rows: List[TableBorderRow]=None):
        """Table - a model defined in OpenAPI

        :param columns: The columns of this Table.
        :param horizontal_border_rows: The horizontal_border_rows of this Table.
        :param rows: The rows of this Table.
        :param table_columns: The table_columns of this Table.
        :param table_rows: The table_rows of this Table.
        :param vertical_border_rows: The vertical_border_rows of this Table.
        """
        self.openapi_types = {
            'columns': int,
            'horizontal_border_rows': List[TableBorderRow],
            'rows': int,
            'table_columns': List[TableColumnProperties],
            'table_rows': List[TableRow],
            'vertical_border_rows': List[TableBorderRow]
        }

        self.attribute_map = {
            'columns': 'columns',
            'horizontal_border_rows': 'horizontalBorderRows',
            'rows': 'rows',
            'table_columns': 'tableColumns',
            'table_rows': 'tableRows',
            'vertical_border_rows': 'verticalBorderRows'
        }

        self._columns = columns
        self._horizontal_border_rows = horizontal_border_rows
        self._rows = rows
        self._table_columns = table_columns
        self._table_rows = table_rows
        self._vertical_border_rows = vertical_border_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Table of this Table.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this Table.

        Number of columns in the table.

        :return: The columns of this Table.
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Table.

        Number of columns in the table.

        :param columns: The columns of this Table.
        :type columns: int
        """

        self._columns = columns

    @property
    def horizontal_border_rows(self):
        """Gets the horizontal_border_rows of this Table.

        Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.

        :return: The horizontal_border_rows of this Table.
        :rtype: List[TableBorderRow]
        """
        return self._horizontal_border_rows

    @horizontal_border_rows.setter
    def horizontal_border_rows(self, horizontal_border_rows):
        """Sets the horizontal_border_rows of this Table.

        Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.

        :param horizontal_border_rows: The horizontal_border_rows of this Table.
        :type horizontal_border_rows: List[TableBorderRow]
        """

        self._horizontal_border_rows = horizontal_border_rows

    @property
    def rows(self):
        """Gets the rows of this Table.

        Number of rows in the table.

        :return: The rows of this Table.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Table.

        Number of rows in the table.

        :param rows: The rows of this Table.
        :type rows: int
        """

        self._rows = rows

    @property
    def table_columns(self):
        """Gets the table_columns of this Table.

        Properties of each column.

        :return: The table_columns of this Table.
        :rtype: List[TableColumnProperties]
        """
        return self._table_columns

    @table_columns.setter
    def table_columns(self, table_columns):
        """Sets the table_columns of this Table.

        Properties of each column.

        :param table_columns: The table_columns of this Table.
        :type table_columns: List[TableColumnProperties]
        """

        self._table_columns = table_columns

    @property
    def table_rows(self):
        """Gets the table_rows of this Table.

        Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.

        :return: The table_rows of this Table.
        :rtype: List[TableRow]
        """
        return self._table_rows

    @table_rows.setter
    def table_rows(self, table_rows):
        """Sets the table_rows of this Table.

        Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.

        :param table_rows: The table_rows of this Table.
        :type table_rows: List[TableRow]
        """

        self._table_rows = table_rows

    @property
    def vertical_border_rows(self):
        """Gets the vertical_border_rows of this Table.

        Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.

        :return: The vertical_border_rows of this Table.
        :rtype: List[TableBorderRow]
        """
        return self._vertical_border_rows

    @vertical_border_rows.setter
    def vertical_border_rows(self, vertical_border_rows):
        """Sets the vertical_border_rows of this Table.

        Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.

        :param vertical_border_rows: The vertical_border_rows of this Table.
        :type vertical_border_rows: List[TableBorderRow]
        """

        self._vertical_border_rows = vertical_border_rows
