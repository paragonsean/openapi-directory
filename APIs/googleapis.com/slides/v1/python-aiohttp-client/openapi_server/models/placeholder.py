# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Placeholder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, parent_object_id: str=None, type: str=None):
        """Placeholder - a model defined in OpenAPI

        :param index: The index of this Placeholder.
        :param parent_object_id: The parent_object_id of this Placeholder.
        :param type: The type of this Placeholder.
        """
        self.openapi_types = {
            'index': int,
            'parent_object_id': str,
            'type': str
        }

        self.attribute_map = {
            'index': 'index',
            'parent_object_id': 'parentObjectId',
            'type': 'type'
        }

        self._index = index
        self._parent_object_id = parent_object_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Placeholder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Placeholder of this Placeholder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this Placeholder.

        The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.

        :return: The index of this Placeholder.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Placeholder.

        The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.

        :param index: The index of this Placeholder.
        :type index: int
        """

        self._index = index

    @property
    def parent_object_id(self):
        """Gets the parent_object_id of this Placeholder.

        The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.

        :return: The parent_object_id of this Placeholder.
        :rtype: str
        """
        return self._parent_object_id

    @parent_object_id.setter
    def parent_object_id(self, parent_object_id):
        """Sets the parent_object_id of this Placeholder.

        The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.

        :param parent_object_id: The parent_object_id of this Placeholder.
        :type parent_object_id: str
        """

        self._parent_object_id = parent_object_id

    @property
    def type(self):
        """Gets the type of this Placeholder.

        The type of the placeholder.

        :return: The type of this Placeholder.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Placeholder.

        The type of the placeholder.

        :param type: The type of this Placeholder.
        :type type: str
        """
        allowed_values = ["NONE", "BODY", "CHART", "CLIP_ART", "CENTERED_TITLE", "DIAGRAM", "DATE_AND_TIME", "FOOTER", "HEADER", "MEDIA", "OBJECT", "PICTURE", "SLIDE_NUMBER", "SUBTITLE", "TABLE", "TITLE", "SLIDE_IMAGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
