# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line_properties import LineProperties
from openapi_server import util


class Line(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, line_category: str=None, line_properties: LineProperties=None, line_type: str=None):
        """Line - a model defined in OpenAPI

        :param line_category: The line_category of this Line.
        :param line_properties: The line_properties of this Line.
        :param line_type: The line_type of this Line.
        """
        self.openapi_types = {
            'line_category': str,
            'line_properties': LineProperties,
            'line_type': str
        }

        self.attribute_map = {
            'line_category': 'lineCategory',
            'line_properties': 'lineProperties',
            'line_type': 'lineType'
        }

        self._line_category = line_category
        self._line_properties = line_properties
        self._line_type = line_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Line':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Line of this Line.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_category(self):
        """Gets the line_category of this Line.

        The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.

        :return: The line_category of this Line.
        :rtype: str
        """
        return self._line_category

    @line_category.setter
    def line_category(self, line_category):
        """Sets the line_category of this Line.

        The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.

        :param line_category: The line_category of this Line.
        :type line_category: str
        """
        allowed_values = ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"]  # noqa: E501
        if line_category not in allowed_values:
            raise ValueError(
                "Invalid value for `line_category` ({0}), must be one of {1}"
                .format(line_category, allowed_values)
            )

        self._line_category = line_category

    @property
    def line_properties(self):
        """Gets the line_properties of this Line.


        :return: The line_properties of this Line.
        :rtype: LineProperties
        """
        return self._line_properties

    @line_properties.setter
    def line_properties(self, line_properties):
        """Sets the line_properties of this Line.


        :param line_properties: The line_properties of this Line.
        :type line_properties: LineProperties
        """

        self._line_properties = line_properties

    @property
    def line_type(self):
        """Gets the line_type of this Line.

        The type of the line.

        :return: The line_type of this Line.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this Line.

        The type of the line.

        :param line_type: The line_type of this Line.
        :type line_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "STRAIGHT_CONNECTOR_1", "BENT_CONNECTOR_2", "BENT_CONNECTOR_3", "BENT_CONNECTOR_4", "BENT_CONNECTOR_5", "CURVED_CONNECTOR_2", "CURVED_CONNECTOR_3", "CURVED_CONNECTOR_4", "CURVED_CONNECTOR_5", "STRAIGHT_LINE"]  # noqa: E501
        if line_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_type` ({0}), must be one of {1}"
                .format(line_type, allowed_values)
            )

        self._line_type = line_type
