# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layout_properties import LayoutProperties
from openapi_server.models.master_properties import MasterProperties
from openapi_server.models.notes_properties import NotesProperties
from openapi_server.models.page_element import PageElement
from openapi_server.models.page_properties import PageProperties
from openapi_server.models.slide_properties import SlideProperties
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout_properties: LayoutProperties=None, master_properties: MasterProperties=None, notes_properties: NotesProperties=None, object_id: str=None, page_elements: List[PageElement]=None, page_properties: PageProperties=None, page_type: str=None, revision_id: str=None, slide_properties: SlideProperties=None):
        """Page - a model defined in OpenAPI

        :param layout_properties: The layout_properties of this Page.
        :param master_properties: The master_properties of this Page.
        :param notes_properties: The notes_properties of this Page.
        :param object_id: The object_id of this Page.
        :param page_elements: The page_elements of this Page.
        :param page_properties: The page_properties of this Page.
        :param page_type: The page_type of this Page.
        :param revision_id: The revision_id of this Page.
        :param slide_properties: The slide_properties of this Page.
        """
        self.openapi_types = {
            'layout_properties': LayoutProperties,
            'master_properties': MasterProperties,
            'notes_properties': NotesProperties,
            'object_id': str,
            'page_elements': List[PageElement],
            'page_properties': PageProperties,
            'page_type': str,
            'revision_id': str,
            'slide_properties': SlideProperties
        }

        self.attribute_map = {
            'layout_properties': 'layoutProperties',
            'master_properties': 'masterProperties',
            'notes_properties': 'notesProperties',
            'object_id': 'objectId',
            'page_elements': 'pageElements',
            'page_properties': 'pageProperties',
            'page_type': 'pageType',
            'revision_id': 'revisionId',
            'slide_properties': 'slideProperties'
        }

        self._layout_properties = layout_properties
        self._master_properties = master_properties
        self._notes_properties = notes_properties
        self._object_id = object_id
        self._page_elements = page_elements
        self._page_properties = page_properties
        self._page_type = page_type
        self._revision_id = revision_id
        self._slide_properties = slide_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout_properties(self):
        """Gets the layout_properties of this Page.


        :return: The layout_properties of this Page.
        :rtype: LayoutProperties
        """
        return self._layout_properties

    @layout_properties.setter
    def layout_properties(self, layout_properties):
        """Sets the layout_properties of this Page.


        :param layout_properties: The layout_properties of this Page.
        :type layout_properties: LayoutProperties
        """

        self._layout_properties = layout_properties

    @property
    def master_properties(self):
        """Gets the master_properties of this Page.


        :return: The master_properties of this Page.
        :rtype: MasterProperties
        """
        return self._master_properties

    @master_properties.setter
    def master_properties(self, master_properties):
        """Sets the master_properties of this Page.


        :param master_properties: The master_properties of this Page.
        :type master_properties: MasterProperties
        """

        self._master_properties = master_properties

    @property
    def notes_properties(self):
        """Gets the notes_properties of this Page.


        :return: The notes_properties of this Page.
        :rtype: NotesProperties
        """
        return self._notes_properties

    @notes_properties.setter
    def notes_properties(self, notes_properties):
        """Sets the notes_properties of this Page.


        :param notes_properties: The notes_properties of this Page.
        :type notes_properties: NotesProperties
        """

        self._notes_properties = notes_properties

    @property
    def object_id(self):
        """Gets the object_id of this Page.

        The object ID for this page. Object IDs used by Page and PageElement share the same namespace.

        :return: The object_id of this Page.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Page.

        The object ID for this page. Object IDs used by Page and PageElement share the same namespace.

        :param object_id: The object_id of this Page.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def page_elements(self):
        """Gets the page_elements of this Page.

        The page elements rendered on the page.

        :return: The page_elements of this Page.
        :rtype: List[PageElement]
        """
        return self._page_elements

    @page_elements.setter
    def page_elements(self, page_elements):
        """Sets the page_elements of this Page.

        The page elements rendered on the page.

        :param page_elements: The page_elements of this Page.
        :type page_elements: List[PageElement]
        """

        self._page_elements = page_elements

    @property
    def page_properties(self):
        """Gets the page_properties of this Page.


        :return: The page_properties of this Page.
        :rtype: PageProperties
        """
        return self._page_properties

    @page_properties.setter
    def page_properties(self, page_properties):
        """Sets the page_properties of this Page.


        :param page_properties: The page_properties of this Page.
        :type page_properties: PageProperties
        """

        self._page_properties = page_properties

    @property
    def page_type(self):
        """Gets the page_type of this Page.

        The type of the page.

        :return: The page_type of this Page.
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this Page.

        The type of the page.

        :param page_type: The page_type of this Page.
        :type page_type: str
        """
        allowed_values = ["SLIDE", "MASTER", "LAYOUT", "NOTES", "NOTES_MASTER"]  # noqa: E501
        if page_type not in allowed_values:
            raise ValueError(
                "Invalid value for `page_type` ({0}), must be one of {1}"
                .format(page_type, allowed_values)
            )

        self._page_type = page_type

    @property
    def revision_id(self):
        """Gets the revision_id of this Page.

        Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :return: The revision_id of this Page.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Page.

        Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :param revision_id: The revision_id of this Page.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def slide_properties(self):
        """Gets the slide_properties of this Page.


        :return: The slide_properties of this Page.
        :rtype: SlideProperties
        """
        return self._slide_properties

    @slide_properties.setter
    def slide_properties(self, slide_properties):
        """Sets the slide_properties of this Page.


        :param slide_properties: The slide_properties of this Page.
        :type slide_properties: SlideProperties
        """

        self._slide_properties = slide_properties
