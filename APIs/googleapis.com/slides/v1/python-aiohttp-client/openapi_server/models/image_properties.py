# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crop_properties import CropProperties
from openapi_server.models.link import Link
from openapi_server.models.outline import Outline
from openapi_server.models.recolor import Recolor
from openapi_server.models.shadow import Shadow
from openapi_server import util


class ImageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brightness: float=None, contrast: float=None, crop_properties: CropProperties=None, link: Link=None, outline: Outline=None, recolor: Recolor=None, shadow: Shadow=None, transparency: float=None):
        """ImageProperties - a model defined in OpenAPI

        :param brightness: The brightness of this ImageProperties.
        :param contrast: The contrast of this ImageProperties.
        :param crop_properties: The crop_properties of this ImageProperties.
        :param link: The link of this ImageProperties.
        :param outline: The outline of this ImageProperties.
        :param recolor: The recolor of this ImageProperties.
        :param shadow: The shadow of this ImageProperties.
        :param transparency: The transparency of this ImageProperties.
        """
        self.openapi_types = {
            'brightness': float,
            'contrast': float,
            'crop_properties': CropProperties,
            'link': Link,
            'outline': Outline,
            'recolor': Recolor,
            'shadow': Shadow,
            'transparency': float
        }

        self.attribute_map = {
            'brightness': 'brightness',
            'contrast': 'contrast',
            'crop_properties': 'cropProperties',
            'link': 'link',
            'outline': 'outline',
            'recolor': 'recolor',
            'shadow': 'shadow',
            'transparency': 'transparency'
        }

        self._brightness = brightness
        self._contrast = contrast
        self._crop_properties = crop_properties
        self._link = link
        self._outline = outline
        self._recolor = recolor
        self._shadow = shadow
        self._transparency = transparency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageProperties of this ImageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brightness(self):
        """Gets the brightness of this ImageProperties.

        The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.

        :return: The brightness of this ImageProperties.
        :rtype: float
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this ImageProperties.

        The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.

        :param brightness: The brightness of this ImageProperties.
        :type brightness: float
        """

        self._brightness = brightness

    @property
    def contrast(self):
        """Gets the contrast of this ImageProperties.

        The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.

        :return: The contrast of this ImageProperties.
        :rtype: float
        """
        return self._contrast

    @contrast.setter
    def contrast(self, contrast):
        """Sets the contrast of this ImageProperties.

        The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.

        :param contrast: The contrast of this ImageProperties.
        :type contrast: float
        """

        self._contrast = contrast

    @property
    def crop_properties(self):
        """Gets the crop_properties of this ImageProperties.


        :return: The crop_properties of this ImageProperties.
        :rtype: CropProperties
        """
        return self._crop_properties

    @crop_properties.setter
    def crop_properties(self, crop_properties):
        """Sets the crop_properties of this ImageProperties.


        :param crop_properties: The crop_properties of this ImageProperties.
        :type crop_properties: CropProperties
        """

        self._crop_properties = crop_properties

    @property
    def link(self):
        """Gets the link of this ImageProperties.


        :return: The link of this ImageProperties.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ImageProperties.


        :param link: The link of this ImageProperties.
        :type link: Link
        """

        self._link = link

    @property
    def outline(self):
        """Gets the outline of this ImageProperties.


        :return: The outline of this ImageProperties.
        :rtype: Outline
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this ImageProperties.


        :param outline: The outline of this ImageProperties.
        :type outline: Outline
        """

        self._outline = outline

    @property
    def recolor(self):
        """Gets the recolor of this ImageProperties.


        :return: The recolor of this ImageProperties.
        :rtype: Recolor
        """
        return self._recolor

    @recolor.setter
    def recolor(self, recolor):
        """Sets the recolor of this ImageProperties.


        :param recolor: The recolor of this ImageProperties.
        :type recolor: Recolor
        """

        self._recolor = recolor

    @property
    def shadow(self):
        """Gets the shadow of this ImageProperties.


        :return: The shadow of this ImageProperties.
        :rtype: Shadow
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this ImageProperties.


        :param shadow: The shadow of this ImageProperties.
        :type shadow: Shadow
        """

        self._shadow = shadow

    @property
    def transparency(self):
        """Gets the transparency of this ImageProperties.

        The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.

        :return: The transparency of this ImageProperties.
        :rtype: float
        """
        return self._transparency

    @transparency.setter
    def transparency(self, transparency):
        """Sets the transparency of this ImageProperties.

        The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.

        :param transparency: The transparency of this ImageProperties.
        :type transparency: float
        """

        self._transparency = transparency
