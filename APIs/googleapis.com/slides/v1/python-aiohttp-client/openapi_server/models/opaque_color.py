# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rgb_color import RgbColor
from openapi_server import util


class OpaqueColor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rgb_color: RgbColor=None, theme_color: str=None):
        """OpaqueColor - a model defined in OpenAPI

        :param rgb_color: The rgb_color of this OpaqueColor.
        :param theme_color: The theme_color of this OpaqueColor.
        """
        self.openapi_types = {
            'rgb_color': RgbColor,
            'theme_color': str
        }

        self.attribute_map = {
            'rgb_color': 'rgbColor',
            'theme_color': 'themeColor'
        }

        self._rgb_color = rgb_color
        self._theme_color = theme_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpaqueColor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpaqueColor of this OpaqueColor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rgb_color(self):
        """Gets the rgb_color of this OpaqueColor.


        :return: The rgb_color of this OpaqueColor.
        :rtype: RgbColor
        """
        return self._rgb_color

    @rgb_color.setter
    def rgb_color(self, rgb_color):
        """Sets the rgb_color of this OpaqueColor.


        :param rgb_color: The rgb_color of this OpaqueColor.
        :type rgb_color: RgbColor
        """

        self._rgb_color = rgb_color

    @property
    def theme_color(self):
        """Gets the theme_color of this OpaqueColor.

        An opaque theme color.

        :return: The theme_color of this OpaqueColor.
        :rtype: str
        """
        return self._theme_color

    @theme_color.setter
    def theme_color(self, theme_color):
        """Sets the theme_color of this OpaqueColor.

        An opaque theme color.

        :param theme_color: The theme_color of this OpaqueColor.
        :type theme_color: str
        """
        allowed_values = ["THEME_COLOR_TYPE_UNSPECIFIED", "DARK1", "LIGHT1", "DARK2", "LIGHT2", "ACCENT1", "ACCENT2", "ACCENT3", "ACCENT4", "ACCENT5", "ACCENT6", "HYPERLINK", "FOLLOWED_HYPERLINK", "TEXT1", "BACKGROUND1", "TEXT2", "BACKGROUND2"]  # noqa: E501
        if theme_color not in allowed_values:
            raise ValueError(
                "Invalid value for `theme_color` ({0}), must be one of {1}"
                .format(theme_color, allowed_values)
            )

        self._theme_color = theme_color
