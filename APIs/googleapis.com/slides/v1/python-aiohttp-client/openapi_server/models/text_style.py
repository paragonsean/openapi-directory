# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.link import Link
from openapi_server.models.optional_color import OptionalColor
from openapi_server.models.weighted_font_family import WeightedFontFamily
from openapi_server import util


class TextStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: OptionalColor=None, baseline_offset: str=None, bold: bool=None, font_family: str=None, font_size: Dimension=None, foreground_color: OptionalColor=None, italic: bool=None, link: Link=None, small_caps: bool=None, strikethrough: bool=None, underline: bool=None, weighted_font_family: WeightedFontFamily=None):
        """TextStyle - a model defined in OpenAPI

        :param background_color: The background_color of this TextStyle.
        :param baseline_offset: The baseline_offset of this TextStyle.
        :param bold: The bold of this TextStyle.
        :param font_family: The font_family of this TextStyle.
        :param font_size: The font_size of this TextStyle.
        :param foreground_color: The foreground_color of this TextStyle.
        :param italic: The italic of this TextStyle.
        :param link: The link of this TextStyle.
        :param small_caps: The small_caps of this TextStyle.
        :param strikethrough: The strikethrough of this TextStyle.
        :param underline: The underline of this TextStyle.
        :param weighted_font_family: The weighted_font_family of this TextStyle.
        """
        self.openapi_types = {
            'background_color': OptionalColor,
            'baseline_offset': str,
            'bold': bool,
            'font_family': str,
            'font_size': Dimension,
            'foreground_color': OptionalColor,
            'italic': bool,
            'link': Link,
            'small_caps': bool,
            'strikethrough': bool,
            'underline': bool,
            'weighted_font_family': WeightedFontFamily
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'baseline_offset': 'baselineOffset',
            'bold': 'bold',
            'font_family': 'fontFamily',
            'font_size': 'fontSize',
            'foreground_color': 'foregroundColor',
            'italic': 'italic',
            'link': 'link',
            'small_caps': 'smallCaps',
            'strikethrough': 'strikethrough',
            'underline': 'underline',
            'weighted_font_family': 'weightedFontFamily'
        }

        self._background_color = background_color
        self._baseline_offset = baseline_offset
        self._bold = bold
        self._font_family = font_family
        self._font_size = font_size
        self._foreground_color = foreground_color
        self._italic = italic
        self._link = link
        self._small_caps = small_caps
        self._strikethrough = strikethrough
        self._underline = underline
        self._weighted_font_family = weighted_font_family

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextStyle of this TextStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this TextStyle.


        :return: The background_color of this TextStyle.
        :rtype: OptionalColor
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this TextStyle.


        :param background_color: The background_color of this TextStyle.
        :type background_color: OptionalColor
        """

        self._background_color = background_color

    @property
    def baseline_offset(self):
        """Gets the baseline_offset of this TextStyle.

        The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.

        :return: The baseline_offset of this TextStyle.
        :rtype: str
        """
        return self._baseline_offset

    @baseline_offset.setter
    def baseline_offset(self, baseline_offset):
        """Sets the baseline_offset of this TextStyle.

        The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.

        :param baseline_offset: The baseline_offset of this TextStyle.
        :type baseline_offset: str
        """
        allowed_values = ["BASELINE_OFFSET_UNSPECIFIED", "NONE", "SUPERSCRIPT", "SUBSCRIPT"]  # noqa: E501
        if baseline_offset not in allowed_values:
            raise ValueError(
                "Invalid value for `baseline_offset` ({0}), must be one of {1}"
                .format(baseline_offset, allowed_values)
            )

        self._baseline_offset = baseline_offset

    @property
    def bold(self):
        """Gets the bold of this TextStyle.

        Whether or not the text is rendered as bold.

        :return: The bold of this TextStyle.
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this TextStyle.

        Whether or not the text is rendered as bold.

        :param bold: The bold of this TextStyle.
        :type bold: bool
        """

        self._bold = bold

    @property
    def font_family(self):
        """Gets the font_family of this TextStyle.

        The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.

        :return: The font_family of this TextStyle.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this TextStyle.

        The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.

        :param font_family: The font_family of this TextStyle.
        :type font_family: str
        """

        self._font_family = font_family

    @property
    def font_size(self):
        """Gets the font_size of this TextStyle.


        :return: The font_size of this TextStyle.
        :rtype: Dimension
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this TextStyle.


        :param font_size: The font_size of this TextStyle.
        :type font_size: Dimension
        """

        self._font_size = font_size

    @property
    def foreground_color(self):
        """Gets the foreground_color of this TextStyle.


        :return: The foreground_color of this TextStyle.
        :rtype: OptionalColor
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this TextStyle.


        :param foreground_color: The foreground_color of this TextStyle.
        :type foreground_color: OptionalColor
        """

        self._foreground_color = foreground_color

    @property
    def italic(self):
        """Gets the italic of this TextStyle.

        Whether or not the text is italicized.

        :return: The italic of this TextStyle.
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this TextStyle.

        Whether or not the text is italicized.

        :param italic: The italic of this TextStyle.
        :type italic: bool
        """

        self._italic = italic

    @property
    def link(self):
        """Gets the link of this TextStyle.


        :return: The link of this TextStyle.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TextStyle.


        :param link: The link of this TextStyle.
        :type link: Link
        """

        self._link = link

    @property
    def small_caps(self):
        """Gets the small_caps of this TextStyle.

        Whether or not the text is in small capital letters.

        :return: The small_caps of this TextStyle.
        :rtype: bool
        """
        return self._small_caps

    @small_caps.setter
    def small_caps(self, small_caps):
        """Sets the small_caps of this TextStyle.

        Whether or not the text is in small capital letters.

        :param small_caps: The small_caps of this TextStyle.
        :type small_caps: bool
        """

        self._small_caps = small_caps

    @property
    def strikethrough(self):
        """Gets the strikethrough of this TextStyle.

        Whether or not the text is struck through.

        :return: The strikethrough of this TextStyle.
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this TextStyle.

        Whether or not the text is struck through.

        :param strikethrough: The strikethrough of this TextStyle.
        :type strikethrough: bool
        """

        self._strikethrough = strikethrough

    @property
    def underline(self):
        """Gets the underline of this TextStyle.

        Whether or not the text is underlined.

        :return: The underline of this TextStyle.
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this TextStyle.

        Whether or not the text is underlined.

        :param underline: The underline of this TextStyle.
        :type underline: bool
        """

        self._underline = underline

    @property
    def weighted_font_family(self):
        """Gets the weighted_font_family of this TextStyle.


        :return: The weighted_font_family of this TextStyle.
        :rtype: WeightedFontFamily
        """
        return self._weighted_font_family

    @weighted_font_family.setter
    def weighted_font_family(self, weighted_font_family):
        """Sets the weighted_font_family of this TextStyle.


        :param weighted_font_family: The weighted_font_family of this TextStyle.
        :type weighted_font_family: WeightedFontFamily
        """

        self._weighted_font_family = weighted_font_family
