# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeightedFontFamily(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, font_family: str=None, weight: int=None):
        """WeightedFontFamily - a model defined in OpenAPI

        :param font_family: The font_family of this WeightedFontFamily.
        :param weight: The weight of this WeightedFontFamily.
        """
        self.openapi_types = {
            'font_family': str,
            'weight': int
        }

        self.attribute_map = {
            'font_family': 'fontFamily',
            'weight': 'weight'
        }

        self._font_family = font_family
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeightedFontFamily':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeightedFontFamily of this WeightedFontFamily.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def font_family(self):
        """Gets the font_family of this WeightedFontFamily.

        The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.

        :return: The font_family of this WeightedFontFamily.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this WeightedFontFamily.

        The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.

        :param font_family: The font_family of this WeightedFontFamily.
        :type font_family: str
        """

        self._font_family = font_family

    @property
    def weight(self):
        """Gets the weight of this WeightedFontFamily.

        The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` (\"normal\").

        :return: The weight of this WeightedFontFamily.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WeightedFontFamily.

        The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` (\"normal\").

        :param weight: The weight of this WeightedFontFamily.
        :type weight: int
        """

        self._weight = weight
