# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.outline_fill import OutlineFill
from openapi_server import util


class Outline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dash_style: str=None, outline_fill: OutlineFill=None, property_state: str=None, weight: Dimension=None):
        """Outline - a model defined in OpenAPI

        :param dash_style: The dash_style of this Outline.
        :param outline_fill: The outline_fill of this Outline.
        :param property_state: The property_state of this Outline.
        :param weight: The weight of this Outline.
        """
        self.openapi_types = {
            'dash_style': str,
            'outline_fill': OutlineFill,
            'property_state': str,
            'weight': Dimension
        }

        self.attribute_map = {
            'dash_style': 'dashStyle',
            'outline_fill': 'outlineFill',
            'property_state': 'propertyState',
            'weight': 'weight'
        }

        self._dash_style = dash_style
        self._outline_fill = outline_fill
        self._property_state = property_state
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Outline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Outline of this Outline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dash_style(self):
        """Gets the dash_style of this Outline.

        The dash style of the outline.

        :return: The dash_style of this Outline.
        :rtype: str
        """
        return self._dash_style

    @dash_style.setter
    def dash_style(self, dash_style):
        """Sets the dash_style of this Outline.

        The dash style of the outline.

        :param dash_style: The dash_style of this Outline.
        :type dash_style: str
        """
        allowed_values = ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH", "DASH_DOT", "LONG_DASH", "LONG_DASH_DOT"]  # noqa: E501
        if dash_style not in allowed_values:
            raise ValueError(
                "Invalid value for `dash_style` ({0}), must be one of {1}"
                .format(dash_style, allowed_values)
            )

        self._dash_style = dash_style

    @property
    def outline_fill(self):
        """Gets the outline_fill of this Outline.


        :return: The outline_fill of this Outline.
        :rtype: OutlineFill
        """
        return self._outline_fill

    @outline_fill.setter
    def outline_fill(self, outline_fill):
        """Sets the outline_fill of this Outline.


        :param outline_fill: The outline_fill of this Outline.
        :type outline_fill: OutlineFill
        """

        self._outline_fill = outline_fill

    @property
    def property_state(self):
        """Gets the property_state of this Outline.

        The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.

        :return: The property_state of this Outline.
        :rtype: str
        """
        return self._property_state

    @property_state.setter
    def property_state(self, property_state):
        """Sets the property_state of this Outline.

        The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.

        :param property_state: The property_state of this Outline.
        :type property_state: str
        """
        allowed_values = ["RENDERED", "NOT_RENDERED", "INHERIT"]  # noqa: E501
        if property_state not in allowed_values:
            raise ValueError(
                "Invalid value for `property_state` ({0}), must be one of {1}"
                .format(property_state, allowed_values)
            )

        self._property_state = property_state

    @property
    def weight(self):
        """Gets the weight of this Outline.


        :return: The weight of this Outline.
        :rtype: Dimension
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Outline.


        :param weight: The weight of this Outline.
        :type weight: Dimension
        """

        self._weight = weight
