# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AffineTransform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scale_x: float=None, scale_y: float=None, shear_x: float=None, shear_y: float=None, translate_x: float=None, translate_y: float=None, unit: str=None):
        """AffineTransform - a model defined in OpenAPI

        :param scale_x: The scale_x of this AffineTransform.
        :param scale_y: The scale_y of this AffineTransform.
        :param shear_x: The shear_x of this AffineTransform.
        :param shear_y: The shear_y of this AffineTransform.
        :param translate_x: The translate_x of this AffineTransform.
        :param translate_y: The translate_y of this AffineTransform.
        :param unit: The unit of this AffineTransform.
        """
        self.openapi_types = {
            'scale_x': float,
            'scale_y': float,
            'shear_x': float,
            'shear_y': float,
            'translate_x': float,
            'translate_y': float,
            'unit': str
        }

        self.attribute_map = {
            'scale_x': 'scaleX',
            'scale_y': 'scaleY',
            'shear_x': 'shearX',
            'shear_y': 'shearY',
            'translate_x': 'translateX',
            'translate_y': 'translateY',
            'unit': 'unit'
        }

        self._scale_x = scale_x
        self._scale_y = scale_y
        self._shear_x = shear_x
        self._shear_y = shear_y
        self._translate_x = translate_x
        self._translate_y = translate_y
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AffineTransform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AffineTransform of this AffineTransform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scale_x(self):
        """Gets the scale_x of this AffineTransform.

        The X coordinate scaling element.

        :return: The scale_x of this AffineTransform.
        :rtype: float
        """
        return self._scale_x

    @scale_x.setter
    def scale_x(self, scale_x):
        """Sets the scale_x of this AffineTransform.

        The X coordinate scaling element.

        :param scale_x: The scale_x of this AffineTransform.
        :type scale_x: float
        """

        self._scale_x = scale_x

    @property
    def scale_y(self):
        """Gets the scale_y of this AffineTransform.

        The Y coordinate scaling element.

        :return: The scale_y of this AffineTransform.
        :rtype: float
        """
        return self._scale_y

    @scale_y.setter
    def scale_y(self, scale_y):
        """Sets the scale_y of this AffineTransform.

        The Y coordinate scaling element.

        :param scale_y: The scale_y of this AffineTransform.
        :type scale_y: float
        """

        self._scale_y = scale_y

    @property
    def shear_x(self):
        """Gets the shear_x of this AffineTransform.

        The X coordinate shearing element.

        :return: The shear_x of this AffineTransform.
        :rtype: float
        """
        return self._shear_x

    @shear_x.setter
    def shear_x(self, shear_x):
        """Sets the shear_x of this AffineTransform.

        The X coordinate shearing element.

        :param shear_x: The shear_x of this AffineTransform.
        :type shear_x: float
        """

        self._shear_x = shear_x

    @property
    def shear_y(self):
        """Gets the shear_y of this AffineTransform.

        The Y coordinate shearing element.

        :return: The shear_y of this AffineTransform.
        :rtype: float
        """
        return self._shear_y

    @shear_y.setter
    def shear_y(self, shear_y):
        """Sets the shear_y of this AffineTransform.

        The Y coordinate shearing element.

        :param shear_y: The shear_y of this AffineTransform.
        :type shear_y: float
        """

        self._shear_y = shear_y

    @property
    def translate_x(self):
        """Gets the translate_x of this AffineTransform.

        The X coordinate translation element.

        :return: The translate_x of this AffineTransform.
        :rtype: float
        """
        return self._translate_x

    @translate_x.setter
    def translate_x(self, translate_x):
        """Sets the translate_x of this AffineTransform.

        The X coordinate translation element.

        :param translate_x: The translate_x of this AffineTransform.
        :type translate_x: float
        """

        self._translate_x = translate_x

    @property
    def translate_y(self):
        """Gets the translate_y of this AffineTransform.

        The Y coordinate translation element.

        :return: The translate_y of this AffineTransform.
        :rtype: float
        """
        return self._translate_y

    @translate_y.setter
    def translate_y(self, translate_y):
        """Sets the translate_y of this AffineTransform.

        The Y coordinate translation element.

        :param translate_y: The translate_y of this AffineTransform.
        :type translate_y: float
        """

        self._translate_y = translate_y

    @property
    def unit(self):
        """Gets the unit of this AffineTransform.

        The units for translate elements.

        :return: The unit of this AffineTransform.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AffineTransform.

        The units for translate elements.

        :param unit: The unit of this AffineTransform.
        :type unit: str
        """
        allowed_values = ["UNIT_UNSPECIFIED", "EMU", "PT"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
