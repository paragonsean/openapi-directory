# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_style import TextStyle
from openapi_server import util


class AutoText(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, style: TextStyle=None, type: str=None):
        """AutoText - a model defined in OpenAPI

        :param content: The content of this AutoText.
        :param style: The style of this AutoText.
        :param type: The type of this AutoText.
        """
        self.openapi_types = {
            'content': str,
            'style': TextStyle,
            'type': str
        }

        self.attribute_map = {
            'content': 'content',
            'style': 'style',
            'type': 'type'
        }

        self._content = content
        self._style = style
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoText':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoText of this AutoText.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this AutoText.

        The rendered content of this auto text, if available.

        :return: The content of this AutoText.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AutoText.

        The rendered content of this auto text, if available.

        :param content: The content of this AutoText.
        :type content: str
        """

        self._content = content

    @property
    def style(self):
        """Gets the style of this AutoText.


        :return: The style of this AutoText.
        :rtype: TextStyle
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this AutoText.


        :param style: The style of this AutoText.
        :type style: TextStyle
        """

        self._style = style

    @property
    def type(self):
        """Gets the type of this AutoText.

        The type of this auto text.

        :return: The type of this AutoText.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutoText.

        The type of this auto text.

        :param type: The type of this AutoText.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "SLIDE_NUMBER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
