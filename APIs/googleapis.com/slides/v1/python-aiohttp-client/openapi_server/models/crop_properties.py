# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CropProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=None, bottom_offset: float=None, left_offset: float=None, right_offset: float=None, top_offset: float=None):
        """CropProperties - a model defined in OpenAPI

        :param angle: The angle of this CropProperties.
        :param bottom_offset: The bottom_offset of this CropProperties.
        :param left_offset: The left_offset of this CropProperties.
        :param right_offset: The right_offset of this CropProperties.
        :param top_offset: The top_offset of this CropProperties.
        """
        self.openapi_types = {
            'angle': float,
            'bottom_offset': float,
            'left_offset': float,
            'right_offset': float,
            'top_offset': float
        }

        self.attribute_map = {
            'angle': 'angle',
            'bottom_offset': 'bottomOffset',
            'left_offset': 'leftOffset',
            'right_offset': 'rightOffset',
            'top_offset': 'topOffset'
        }

        self._angle = angle
        self._bottom_offset = bottom_offset
        self._left_offset = left_offset
        self._right_offset = right_offset
        self._top_offset = top_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CropProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CropProperties of this CropProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this CropProperties.

        The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.

        :return: The angle of this CropProperties.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this CropProperties.

        The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.

        :param angle: The angle of this CropProperties.
        :type angle: float
        """

        self._angle = angle

    @property
    def bottom_offset(self):
        """Gets the bottom_offset of this CropProperties.

        The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.

        :return: The bottom_offset of this CropProperties.
        :rtype: float
        """
        return self._bottom_offset

    @bottom_offset.setter
    def bottom_offset(self, bottom_offset):
        """Sets the bottom_offset of this CropProperties.

        The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.

        :param bottom_offset: The bottom_offset of this CropProperties.
        :type bottom_offset: float
        """

        self._bottom_offset = bottom_offset

    @property
    def left_offset(self):
        """Gets the left_offset of this CropProperties.

        The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.

        :return: The left_offset of this CropProperties.
        :rtype: float
        """
        return self._left_offset

    @left_offset.setter
    def left_offset(self, left_offset):
        """Sets the left_offset of this CropProperties.

        The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.

        :param left_offset: The left_offset of this CropProperties.
        :type left_offset: float
        """

        self._left_offset = left_offset

    @property
    def right_offset(self):
        """Gets the right_offset of this CropProperties.

        The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.

        :return: The right_offset of this CropProperties.
        :rtype: float
        """
        return self._right_offset

    @right_offset.setter
    def right_offset(self, right_offset):
        """Sets the right_offset of this CropProperties.

        The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.

        :param right_offset: The right_offset of this CropProperties.
        :type right_offset: float
        """

        self._right_offset = right_offset

    @property
    def top_offset(self):
        """Gets the top_offset of this CropProperties.

        The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.

        :return: The top_offset of this CropProperties.
        :rtype: float
        """
        return self._top_offset

    @top_offset.setter
    def top_offset(self, top_offset):
        """Sets the top_offset of this CropProperties.

        The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.

        :param top_offset: The top_offset of this CropProperties.
        :type top_offset: float
        """

        self._top_offset = top_offset
