# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affine_transform import AffineTransform
from openapi_server.models.dimension import Dimension
from openapi_server.models.opaque_color import OpaqueColor
from openapi_server import util


class Shadow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, alpha: float=None, blur_radius: Dimension=None, color: OpaqueColor=None, property_state: str=None, rotate_with_shape: bool=None, transform: AffineTransform=None, type: str=None):
        """Shadow - a model defined in OpenAPI

        :param alignment: The alignment of this Shadow.
        :param alpha: The alpha of this Shadow.
        :param blur_radius: The blur_radius of this Shadow.
        :param color: The color of this Shadow.
        :param property_state: The property_state of this Shadow.
        :param rotate_with_shape: The rotate_with_shape of this Shadow.
        :param transform: The transform of this Shadow.
        :param type: The type of this Shadow.
        """
        self.openapi_types = {
            'alignment': str,
            'alpha': float,
            'blur_radius': Dimension,
            'color': OpaqueColor,
            'property_state': str,
            'rotate_with_shape': bool,
            'transform': AffineTransform,
            'type': str
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'alpha': 'alpha',
            'blur_radius': 'blurRadius',
            'color': 'color',
            'property_state': 'propertyState',
            'rotate_with_shape': 'rotateWithShape',
            'transform': 'transform',
            'type': 'type'
        }

        self._alignment = alignment
        self._alpha = alpha
        self._blur_radius = blur_radius
        self._color = color
        self._property_state = property_state
        self._rotate_with_shape = rotate_with_shape
        self._transform = transform
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shadow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shadow of this Shadow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this Shadow.

        The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.

        :return: The alignment of this Shadow.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this Shadow.

        The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.

        :param alignment: The alignment of this Shadow.
        :type alignment: str
        """
        allowed_values = ["RECTANGLE_POSITION_UNSPECIFIED", "TOP_LEFT", "TOP_CENTER", "TOP_RIGHT", "LEFT_CENTER", "CENTER", "RIGHT_CENTER", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def alpha(self):
        """Gets the alpha of this Shadow.

        The alpha of the shadow's color, from 0.0 to 1.0.

        :return: The alpha of this Shadow.
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this Shadow.

        The alpha of the shadow's color, from 0.0 to 1.0.

        :param alpha: The alpha of this Shadow.
        :type alpha: float
        """

        self._alpha = alpha

    @property
    def blur_radius(self):
        """Gets the blur_radius of this Shadow.


        :return: The blur_radius of this Shadow.
        :rtype: Dimension
        """
        return self._blur_radius

    @blur_radius.setter
    def blur_radius(self, blur_radius):
        """Sets the blur_radius of this Shadow.


        :param blur_radius: The blur_radius of this Shadow.
        :type blur_radius: Dimension
        """

        self._blur_radius = blur_radius

    @property
    def color(self):
        """Gets the color of this Shadow.


        :return: The color of this Shadow.
        :rtype: OpaqueColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Shadow.


        :param color: The color of this Shadow.
        :type color: OpaqueColor
        """

        self._color = color

    @property
    def property_state(self):
        """Gets the property_state of this Shadow.

        The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.

        :return: The property_state of this Shadow.
        :rtype: str
        """
        return self._property_state

    @property_state.setter
    def property_state(self, property_state):
        """Sets the property_state of this Shadow.

        The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.

        :param property_state: The property_state of this Shadow.
        :type property_state: str
        """
        allowed_values = ["RENDERED", "NOT_RENDERED", "INHERIT"]  # noqa: E501
        if property_state not in allowed_values:
            raise ValueError(
                "Invalid value for `property_state` ({0}), must be one of {1}"
                .format(property_state, allowed_values)
            )

        self._property_state = property_state

    @property
    def rotate_with_shape(self):
        """Gets the rotate_with_shape of this Shadow.

        Whether the shadow should rotate with the shape. This property is read-only.

        :return: The rotate_with_shape of this Shadow.
        :rtype: bool
        """
        return self._rotate_with_shape

    @rotate_with_shape.setter
    def rotate_with_shape(self, rotate_with_shape):
        """Sets the rotate_with_shape of this Shadow.

        Whether the shadow should rotate with the shape. This property is read-only.

        :param rotate_with_shape: The rotate_with_shape of this Shadow.
        :type rotate_with_shape: bool
        """

        self._rotate_with_shape = rotate_with_shape

    @property
    def transform(self):
        """Gets the transform of this Shadow.


        :return: The transform of this Shadow.
        :rtype: AffineTransform
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this Shadow.


        :param transform: The transform of this Shadow.
        :type transform: AffineTransform
        """

        self._transform = transform

    @property
    def type(self):
        """Gets the type of this Shadow.

        The type of the shadow. This property is read-only.

        :return: The type of this Shadow.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Shadow.

        The type of the shadow. This property is read-only.

        :param type: The type of this Shadow.
        :type type: str
        """
        allowed_values = ["SHADOW_TYPE_UNSPECIFIED", "OUTER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
