# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateLineCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, line_category: str=None, object_id: str=None):
        """UpdateLineCategoryRequest - a model defined in OpenAPI

        :param line_category: The line_category of this UpdateLineCategoryRequest.
        :param object_id: The object_id of this UpdateLineCategoryRequest.
        """
        self.openapi_types = {
            'line_category': str,
            'object_id': str
        }

        self.attribute_map = {
            'line_category': 'lineCategory',
            'object_id': 'objectId'
        }

        self._line_category = line_category
        self._object_id = object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLineCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLineCategoryRequest of this UpdateLineCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line_category(self):
        """Gets the line_category of this UpdateLineCategoryRequest.

        The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.

        :return: The line_category of this UpdateLineCategoryRequest.
        :rtype: str
        """
        return self._line_category

    @line_category.setter
    def line_category(self, line_category):
        """Sets the line_category of this UpdateLineCategoryRequest.

        The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.

        :param line_category: The line_category of this UpdateLineCategoryRequest.
        :type line_category: str
        """
        allowed_values = ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"]  # noqa: E501
        if line_category not in allowed_values:
            raise ValueError(
                "Invalid value for `line_category` ({0}), must be one of {1}"
                .format(line_category, allowed_values)
            )

        self._line_category = line_category

    @property
    def object_id(self):
        """Gets the object_id of this UpdateLineCategoryRequest.

        The object ID of the line the update is applied to. Only a line with a category indicating it is a \"connector\" can be updated. The line may be rerouted after updating its category.

        :return: The object_id of this UpdateLineCategoryRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this UpdateLineCategoryRequest.

        The object ID of the line the update is applied to. Only a line with a category indicating it is a \"connector\" can be updated. The line may be rerouted after updating its category.

        :param object_id: The object_id of this UpdateLineCategoryRequest.
        :type object_id: str
        """

        self._object_id = object_id
