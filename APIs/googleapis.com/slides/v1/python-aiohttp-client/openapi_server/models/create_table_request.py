# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.page_element_properties import PageElementProperties
from openapi_server import util


class CreateTableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: int=None, element_properties: PageElementProperties=None, object_id: str=None, rows: int=None):
        """CreateTableRequest - a model defined in OpenAPI

        :param columns: The columns of this CreateTableRequest.
        :param element_properties: The element_properties of this CreateTableRequest.
        :param object_id: The object_id of this CreateTableRequest.
        :param rows: The rows of this CreateTableRequest.
        """
        self.openapi_types = {
            'columns': int,
            'element_properties': PageElementProperties,
            'object_id': str,
            'rows': int
        }

        self.attribute_map = {
            'columns': 'columns',
            'element_properties': 'elementProperties',
            'object_id': 'objectId',
            'rows': 'rows'
        }

        self._columns = columns
        self._element_properties = element_properties
        self._object_id = object_id
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTableRequest of this CreateTableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this CreateTableRequest.

        Number of columns in the table.

        :return: The columns of this CreateTableRequest.
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this CreateTableRequest.

        Number of columns in the table.

        :param columns: The columns of this CreateTableRequest.
        :type columns: int
        """

        self._columns = columns

    @property
    def element_properties(self):
        """Gets the element_properties of this CreateTableRequest.


        :return: The element_properties of this CreateTableRequest.
        :rtype: PageElementProperties
        """
        return self._element_properties

    @element_properties.setter
    def element_properties(self, element_properties):
        """Sets the element_properties of this CreateTableRequest.


        :param element_properties: The element_properties of this CreateTableRequest.
        :type element_properties: PageElementProperties
        """

        self._element_properties = element_properties

    @property
    def object_id(self):
        """Gets the object_id of this CreateTableRequest.

        A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :return: The object_id of this CreateTableRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this CreateTableRequest.

        A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :param object_id: The object_id of this CreateTableRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def rows(self):
        """Gets the rows of this CreateTableRequest.

        Number of rows in the table.

        :return: The rows of this CreateTableRequest.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this CreateTableRequest.

        Number of rows in the table.

        :param rows: The rows of this CreateTableRequest.
        :type rows: int
        """

        self._rows = rows
