# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.page import Page
from openapi_server import util


class SlideProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_skipped: bool=None, layout_object_id: str=None, master_object_id: str=None, notes_page: Page=None):
        """SlideProperties - a model defined in OpenAPI

        :param is_skipped: The is_skipped of this SlideProperties.
        :param layout_object_id: The layout_object_id of this SlideProperties.
        :param master_object_id: The master_object_id of this SlideProperties.
        :param notes_page: The notes_page of this SlideProperties.
        """
        self.openapi_types = {
            'is_skipped': bool,
            'layout_object_id': str,
            'master_object_id': str,
            'notes_page': Page
        }

        self.attribute_map = {
            'is_skipped': 'isSkipped',
            'layout_object_id': 'layoutObjectId',
            'master_object_id': 'masterObjectId',
            'notes_page': 'notesPage'
        }

        self._is_skipped = is_skipped
        self._layout_object_id = layout_object_id
        self._master_object_id = master_object_id
        self._notes_page = notes_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlideProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlideProperties of this SlideProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_skipped(self):
        """Gets the is_skipped of this SlideProperties.

        Whether the slide is skipped in the presentation mode. Defaults to false.

        :return: The is_skipped of this SlideProperties.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this SlideProperties.

        Whether the slide is skipped in the presentation mode. Defaults to false.

        :param is_skipped: The is_skipped of this SlideProperties.
        :type is_skipped: bool
        """

        self._is_skipped = is_skipped

    @property
    def layout_object_id(self):
        """Gets the layout_object_id of this SlideProperties.

        The object ID of the layout that this slide is based on. This property is read-only.

        :return: The layout_object_id of this SlideProperties.
        :rtype: str
        """
        return self._layout_object_id

    @layout_object_id.setter
    def layout_object_id(self, layout_object_id):
        """Sets the layout_object_id of this SlideProperties.

        The object ID of the layout that this slide is based on. This property is read-only.

        :param layout_object_id: The layout_object_id of this SlideProperties.
        :type layout_object_id: str
        """

        self._layout_object_id = layout_object_id

    @property
    def master_object_id(self):
        """Gets the master_object_id of this SlideProperties.

        The object ID of the master that this slide is based on. This property is read-only.

        :return: The master_object_id of this SlideProperties.
        :rtype: str
        """
        return self._master_object_id

    @master_object_id.setter
    def master_object_id(self, master_object_id):
        """Sets the master_object_id of this SlideProperties.

        The object ID of the master that this slide is based on. This property is read-only.

        :param master_object_id: The master_object_id of this SlideProperties.
        :type master_object_id: str
        """

        self._master_object_id = master_object_id

    @property
    def notes_page(self):
        """Gets the notes_page of this SlideProperties.


        :return: The notes_page of this SlideProperties.
        :rtype: Page
        """
        return self._notes_page

    @notes_page.setter
    def notes_page(self, notes_page):
        """Sets the notes_page of this SlideProperties.


        :param notes_page: The notes_page of this SlideProperties.
        :type notes_page: Page
        """

        self._notes_page = notes_page
