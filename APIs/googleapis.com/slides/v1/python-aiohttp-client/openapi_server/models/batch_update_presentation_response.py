# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response import Response
from openapi_server.models.write_control import WriteControl
from openapi_server import util


class BatchUpdatePresentationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, presentation_id: str=None, replies: List[Response]=None, write_control: WriteControl=None):
        """BatchUpdatePresentationResponse - a model defined in OpenAPI

        :param presentation_id: The presentation_id of this BatchUpdatePresentationResponse.
        :param replies: The replies of this BatchUpdatePresentationResponse.
        :param write_control: The write_control of this BatchUpdatePresentationResponse.
        """
        self.openapi_types = {
            'presentation_id': str,
            'replies': List[Response],
            'write_control': WriteControl
        }

        self.attribute_map = {
            'presentation_id': 'presentationId',
            'replies': 'replies',
            'write_control': 'writeControl'
        }

        self._presentation_id = presentation_id
        self._replies = replies
        self._write_control = write_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdatePresentationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdatePresentationResponse of this BatchUpdatePresentationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def presentation_id(self):
        """Gets the presentation_id of this BatchUpdatePresentationResponse.

        The presentation the updates were applied to.

        :return: The presentation_id of this BatchUpdatePresentationResponse.
        :rtype: str
        """
        return self._presentation_id

    @presentation_id.setter
    def presentation_id(self, presentation_id):
        """Sets the presentation_id of this BatchUpdatePresentationResponse.

        The presentation the updates were applied to.

        :param presentation_id: The presentation_id of this BatchUpdatePresentationResponse.
        :type presentation_id: str
        """

        self._presentation_id = presentation_id

    @property
    def replies(self):
        """Gets the replies of this BatchUpdatePresentationResponse.

        The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.

        :return: The replies of this BatchUpdatePresentationResponse.
        :rtype: List[Response]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this BatchUpdatePresentationResponse.

        The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.

        :param replies: The replies of this BatchUpdatePresentationResponse.
        :type replies: List[Response]
        """

        self._replies = replies

    @property
    def write_control(self):
        """Gets the write_control of this BatchUpdatePresentationResponse.


        :return: The write_control of this BatchUpdatePresentationResponse.
        :rtype: WriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this BatchUpdatePresentationResponse.


        :param write_control: The write_control of this BatchUpdatePresentationResponse.
        :type write_control: WriteControl
        """

        self._write_control = write_control
