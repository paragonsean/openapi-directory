# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opaque_color import OpaqueColor
from openapi_server import util


class SolidFill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alpha: float=None, color: OpaqueColor=None):
        """SolidFill - a model defined in OpenAPI

        :param alpha: The alpha of this SolidFill.
        :param color: The color of this SolidFill.
        """
        self.openapi_types = {
            'alpha': float,
            'color': OpaqueColor
        }

        self.attribute_map = {
            'alpha': 'alpha',
            'color': 'color'
        }

        self._alpha = alpha
        self._color = color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolidFill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolidFill of this SolidFill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alpha(self):
        """Gets the alpha of this SolidFill.

        The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.

        :return: The alpha of this SolidFill.
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this SolidFill.

        The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.

        :param alpha: The alpha of this SolidFill.
        :type alpha: float
        """

        self._alpha = alpha

    @property
    def color(self):
        """Gets the color of this SolidFill.


        :return: The color of this SolidFill.
        :rtype: OpaqueColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SolidFill.


        :param color: The color of this SolidFill.
        :type color: OpaqueColor
        """

        self._color = color
