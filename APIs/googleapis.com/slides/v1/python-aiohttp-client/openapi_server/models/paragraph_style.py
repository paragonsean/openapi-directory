# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class ParagraphStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, direction: str=None, indent_end: Dimension=None, indent_first_line: Dimension=None, indent_start: Dimension=None, line_spacing: float=None, space_above: Dimension=None, space_below: Dimension=None, spacing_mode: str=None):
        """ParagraphStyle - a model defined in OpenAPI

        :param alignment: The alignment of this ParagraphStyle.
        :param direction: The direction of this ParagraphStyle.
        :param indent_end: The indent_end of this ParagraphStyle.
        :param indent_first_line: The indent_first_line of this ParagraphStyle.
        :param indent_start: The indent_start of this ParagraphStyle.
        :param line_spacing: The line_spacing of this ParagraphStyle.
        :param space_above: The space_above of this ParagraphStyle.
        :param space_below: The space_below of this ParagraphStyle.
        :param spacing_mode: The spacing_mode of this ParagraphStyle.
        """
        self.openapi_types = {
            'alignment': str,
            'direction': str,
            'indent_end': Dimension,
            'indent_first_line': Dimension,
            'indent_start': Dimension,
            'line_spacing': float,
            'space_above': Dimension,
            'space_below': Dimension,
            'spacing_mode': str
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'direction': 'direction',
            'indent_end': 'indentEnd',
            'indent_first_line': 'indentFirstLine',
            'indent_start': 'indentStart',
            'line_spacing': 'lineSpacing',
            'space_above': 'spaceAbove',
            'space_below': 'spaceBelow',
            'spacing_mode': 'spacingMode'
        }

        self._alignment = alignment
        self._direction = direction
        self._indent_end = indent_end
        self._indent_first_line = indent_first_line
        self._indent_start = indent_start
        self._line_spacing = line_spacing
        self._space_above = space_above
        self._space_below = space_below
        self._spacing_mode = spacing_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParagraphStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParagraphStyle of this ParagraphStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this ParagraphStyle.

        The text alignment for this paragraph.

        :return: The alignment of this ParagraphStyle.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this ParagraphStyle.

        The text alignment for this paragraph.

        :param alignment: The alignment of this ParagraphStyle.
        :type alignment: str
        """
        allowed_values = ["ALIGNMENT_UNSPECIFIED", "START", "CENTER", "END", "JUSTIFIED"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def direction(self):
        """Gets the direction of this ParagraphStyle.

        The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.

        :return: The direction of this ParagraphStyle.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ParagraphStyle.

        The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.

        :param direction: The direction of this ParagraphStyle.
        :type direction: str
        """
        allowed_values = ["TEXT_DIRECTION_UNSPECIFIED", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def indent_end(self):
        """Gets the indent_end of this ParagraphStyle.


        :return: The indent_end of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_end

    @indent_end.setter
    def indent_end(self, indent_end):
        """Sets the indent_end of this ParagraphStyle.


        :param indent_end: The indent_end of this ParagraphStyle.
        :type indent_end: Dimension
        """

        self._indent_end = indent_end

    @property
    def indent_first_line(self):
        """Gets the indent_first_line of this ParagraphStyle.


        :return: The indent_first_line of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_first_line

    @indent_first_line.setter
    def indent_first_line(self, indent_first_line):
        """Sets the indent_first_line of this ParagraphStyle.


        :param indent_first_line: The indent_first_line of this ParagraphStyle.
        :type indent_first_line: Dimension
        """

        self._indent_first_line = indent_first_line

    @property
    def indent_start(self):
        """Gets the indent_start of this ParagraphStyle.


        :return: The indent_start of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_start

    @indent_start.setter
    def indent_start(self, indent_start):
        """Sets the indent_start of this ParagraphStyle.


        :param indent_start: The indent_start of this ParagraphStyle.
        :type indent_start: Dimension
        """

        self._indent_start = indent_start

    @property
    def line_spacing(self):
        """Gets the line_spacing of this ParagraphStyle.

        The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.

        :return: The line_spacing of this ParagraphStyle.
        :rtype: float
        """
        return self._line_spacing

    @line_spacing.setter
    def line_spacing(self, line_spacing):
        """Sets the line_spacing of this ParagraphStyle.

        The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.

        :param line_spacing: The line_spacing of this ParagraphStyle.
        :type line_spacing: float
        """

        self._line_spacing = line_spacing

    @property
    def space_above(self):
        """Gets the space_above of this ParagraphStyle.


        :return: The space_above of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._space_above

    @space_above.setter
    def space_above(self, space_above):
        """Sets the space_above of this ParagraphStyle.


        :param space_above: The space_above of this ParagraphStyle.
        :type space_above: Dimension
        """

        self._space_above = space_above

    @property
    def space_below(self):
        """Gets the space_below of this ParagraphStyle.


        :return: The space_below of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._space_below

    @space_below.setter
    def space_below(self, space_below):
        """Sets the space_below of this ParagraphStyle.


        :param space_below: The space_below of this ParagraphStyle.
        :type space_below: Dimension
        """

        self._space_below = space_below

    @property
    def spacing_mode(self):
        """Gets the spacing_mode of this ParagraphStyle.

        The spacing mode for the paragraph.

        :return: The spacing_mode of this ParagraphStyle.
        :rtype: str
        """
        return self._spacing_mode

    @spacing_mode.setter
    def spacing_mode(self, spacing_mode):
        """Sets the spacing_mode of this ParagraphStyle.

        The spacing mode for the paragraph.

        :param spacing_mode: The spacing_mode of this ParagraphStyle.
        :type spacing_mode: str
        """
        allowed_values = ["SPACING_MODE_UNSPECIFIED", "NEVER_COLLAPSE", "COLLAPSE_LISTS"]  # noqa: E501
        if spacing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `spacing_mode` ({0}), must be one of {1}"
                .format(spacing_mode, allowed_values)
            )

        self._spacing_mode = spacing_mode
