# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DuplicateObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_id: str=None, object_ids: Dict[str, str]=None):
        """DuplicateObjectRequest - a model defined in OpenAPI

        :param object_id: The object_id of this DuplicateObjectRequest.
        :param object_ids: The object_ids of this DuplicateObjectRequest.
        """
        self.openapi_types = {
            'object_id': str,
            'object_ids': Dict[str, str]
        }

        self.attribute_map = {
            'object_id': 'objectId',
            'object_ids': 'objectIds'
        }

        self._object_id = object_id
        self._object_ids = object_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DuplicateObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DuplicateObjectRequest of this DuplicateObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_id(self):
        """Gets the object_id of this DuplicateObjectRequest.

        The ID of the object to duplicate.

        :return: The object_id of this DuplicateObjectRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this DuplicateObjectRequest.

        The ID of the object to duplicate.

        :param object_id: The object_id of this DuplicateObjectRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_ids(self):
        """Gets the object_ids of this DuplicateObjectRequest.

        The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.

        :return: The object_ids of this DuplicateObjectRequest.
        :rtype: Dict[str, str]
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this DuplicateObjectRequest.

        The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.

        :param object_ids: The object_ids of this DuplicateObjectRequest.
        :type object_ids: Dict[str, str]
        """

        self._object_ids = object_ids
