# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_properties import VideoProperties
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, source: str=None, url: str=None, video_properties: VideoProperties=None):
        """Video - a model defined in OpenAPI

        :param id: The id of this Video.
        :param source: The source of this Video.
        :param url: The url of this Video.
        :param video_properties: The video_properties of this Video.
        """
        self.openapi_types = {
            'id': str,
            'source': str,
            'url': str,
            'video_properties': VideoProperties
        }

        self.attribute_map = {
            'id': 'id',
            'source': 'source',
            'url': 'url',
            'video_properties': 'videoProperties'
        }

        self._id = id
        self._source = source
        self._url = url
        self._video_properties = video_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Video.

        The video source's unique identifier for this video.

        :return: The id of this Video.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Video.

        The video source's unique identifier for this video.

        :param id: The id of this Video.
        :type id: str
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this Video.

        The video source.

        :return: The source of this Video.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Video.

        The video source.

        :param source: The source of this Video.
        :type source: str
        """
        allowed_values = ["SOURCE_UNSPECIFIED", "YOUTUBE", "DRIVE"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def url(self):
        """Gets the url of this Video.

        An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.

        :return: The url of this Video.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Video.

        An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.

        :param url: The url of this Video.
        :type url: str
        """

        self._url = url

    @property
    def video_properties(self):
        """Gets the video_properties of this Video.


        :return: The video_properties of this Video.
        :rtype: VideoProperties
        """
        return self._video_properties

    @video_properties.setter
    def video_properties(self, video_properties):
        """Sets the video_properties of this Video.


        :param video_properties: The video_properties of this Video.
        :type video_properties: VideoProperties
        """

        self._video_properties = video_properties
