# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nesting_level import NestingLevel
from openapi_server import util


class List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list_id: str=None, nesting_level: Dict[str, NestingLevel]=None):
        """List - a model defined in OpenAPI

        :param list_id: The list_id of this List.
        :param nesting_level: The nesting_level of this List.
        """
        self.openapi_types = {
            'list_id': str,
            'nesting_level': Dict[str, NestingLevel]
        }

        self.attribute_map = {
            'list_id': 'listId',
            'nesting_level': 'nestingLevel'
        }

        self._list_id = list_id
        self._nesting_level = nesting_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List of this List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list_id(self):
        """Gets the list_id of this List.

        The ID of the list.

        :return: The list_id of this List.
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this List.

        The ID of the list.

        :param list_id: The list_id of this List.
        :type list_id: str
        """

        self._list_id = list_id

    @property
    def nesting_level(self):
        """Gets the nesting_level of this List.

        A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.

        :return: The nesting_level of this List.
        :rtype: Dict[str, NestingLevel]
        """
        return self._nesting_level

    @nesting_level.setter
    def nesting_level(self, nesting_level):
        """Sets the nesting_level of this List.

        A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.

        :param nesting_level: The nesting_level of this List.
        :type nesting_level: Dict[str, NestingLevel]
        """

        self._nesting_level = nesting_level
