# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePageElementsZOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, page_element_object_ids: List[str]=None):
        """UpdatePageElementsZOrderRequest - a model defined in OpenAPI

        :param operation: The operation of this UpdatePageElementsZOrderRequest.
        :param page_element_object_ids: The page_element_object_ids of this UpdatePageElementsZOrderRequest.
        """
        self.openapi_types = {
            'operation': str,
            'page_element_object_ids': List[str]
        }

        self.attribute_map = {
            'operation': 'operation',
            'page_element_object_ids': 'pageElementObjectIds'
        }

        self._operation = operation
        self._page_element_object_ids = page_element_object_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePageElementsZOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePageElementsZOrderRequest of this UpdatePageElementsZOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this UpdatePageElementsZOrderRequest.

        The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.

        :return: The operation of this UpdatePageElementsZOrderRequest.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this UpdatePageElementsZOrderRequest.

        The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.

        :param operation: The operation of this UpdatePageElementsZOrderRequest.
        :type operation: str
        """
        allowed_values = ["Z_ORDER_OPERATION_UNSPECIFIED", "BRING_TO_FRONT", "BRING_FORWARD", "SEND_BACKWARD", "SEND_TO_BACK"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def page_element_object_ids(self):
        """Gets the page_element_object_ids of this UpdatePageElementsZOrderRequest.

        The object IDs of the page elements to update. All the page elements must be on the same page and must not be grouped.

        :return: The page_element_object_ids of this UpdatePageElementsZOrderRequest.
        :rtype: List[str]
        """
        return self._page_element_object_ids

    @page_element_object_ids.setter
    def page_element_object_ids(self, page_element_object_ids):
        """Sets the page_element_object_ids of this UpdatePageElementsZOrderRequest.

        The object IDs of the page elements to update. All the page elements must be on the same page and must not be grouped.

        :param page_element_object_ids: The page_element_object_ids of this UpdatePageElementsZOrderRequest.
        :type page_element_object_ids: List[str]
        """

        self._page_element_object_ids = page_element_object_ids
