# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Range(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, start_index: int=None, type: str=None):
        """Range - a model defined in OpenAPI

        :param end_index: The end_index of this Range.
        :param start_index: The start_index of this Range.
        :param type: The type of this Range.
        """
        self.openapi_types = {
            'end_index': int,
            'start_index': int,
            'type': str
        }

        self.attribute_map = {
            'end_index': 'endIndex',
            'start_index': 'startIndex',
            'type': 'type'
        }

        self._end_index = end_index
        self._start_index = start_index
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Range':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Range of this Range.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this Range.

        The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.

        :return: The end_index of this Range.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this Range.

        The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.

        :param end_index: The end_index of this Range.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def start_index(self):
        """Gets the start_index of this Range.

        The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.

        :return: The start_index of this Range.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this Range.

        The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.

        :param start_index: The start_index of this Range.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def type(self):
        """Gets the type of this Range.

        The type of range.

        :return: The type of this Range.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Range.

        The type of range.

        :param type: The type of this Range.
        :type type: str
        """
        allowed_values = ["RANGE_TYPE_UNSPECIFIED", "FIXED_RANGE", "FROM_START_INDEX", "ALL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
