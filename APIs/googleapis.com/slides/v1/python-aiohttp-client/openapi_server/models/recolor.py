# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_stop import ColorStop
from openapi_server import util


class Recolor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, recolor_stops: List[ColorStop]=None):
        """Recolor - a model defined in OpenAPI

        :param name: The name of this Recolor.
        :param recolor_stops: The recolor_stops of this Recolor.
        """
        self.openapi_types = {
            'name': str,
            'recolor_stops': List[ColorStop]
        }

        self.attribute_map = {
            'name': 'name',
            'recolor_stops': 'recolorStops'
        }

        self._name = name
        self._recolor_stops = recolor_stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recolor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recolor of this Recolor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Recolor.

        The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.

        :return: The name of this Recolor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Recolor.

        The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.

        :param name: The name of this Recolor.
        :type name: str
        """
        allowed_values = ["NONE", "LIGHT1", "LIGHT2", "LIGHT3", "LIGHT4", "LIGHT5", "LIGHT6", "LIGHT7", "LIGHT8", "LIGHT9", "LIGHT10", "DARK1", "DARK2", "DARK3", "DARK4", "DARK5", "DARK6", "DARK7", "DARK8", "DARK9", "DARK10", "GRAYSCALE", "NEGATIVE", "SEPIA", "CUSTOM"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def recolor_stops(self):
        """Gets the recolor_stops of this Recolor.

        The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.

        :return: The recolor_stops of this Recolor.
        :rtype: List[ColorStop]
        """
        return self._recolor_stops

    @recolor_stops.setter
    def recolor_stops(self, recolor_stops):
        """Sets the recolor_stops of this Recolor.

        The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.

        :param recolor_stops: The recolor_stops of this Recolor.
        :type recolor_stops: List[ColorStop]
        """

        self._recolor_stops = recolor_stops
