# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_cell_location import TableCellLocation
from openapi_server import util


class InsertTableRowsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_location: TableCellLocation=None, insert_below: bool=None, number: int=None, table_object_id: str=None):
        """InsertTableRowsRequest - a model defined in OpenAPI

        :param cell_location: The cell_location of this InsertTableRowsRequest.
        :param insert_below: The insert_below of this InsertTableRowsRequest.
        :param number: The number of this InsertTableRowsRequest.
        :param table_object_id: The table_object_id of this InsertTableRowsRequest.
        """
        self.openapi_types = {
            'cell_location': TableCellLocation,
            'insert_below': bool,
            'number': int,
            'table_object_id': str
        }

        self.attribute_map = {
            'cell_location': 'cellLocation',
            'insert_below': 'insertBelow',
            'number': 'number',
            'table_object_id': 'tableObjectId'
        }

        self._cell_location = cell_location
        self._insert_below = insert_below
        self._number = number
        self._table_object_id = table_object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertTableRowsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertTableRowsRequest of this InsertTableRowsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_location(self):
        """Gets the cell_location of this InsertTableRowsRequest.


        :return: The cell_location of this InsertTableRowsRequest.
        :rtype: TableCellLocation
        """
        return self._cell_location

    @cell_location.setter
    def cell_location(self, cell_location):
        """Sets the cell_location of this InsertTableRowsRequest.


        :param cell_location: The cell_location of this InsertTableRowsRequest.
        :type cell_location: TableCellLocation
        """

        self._cell_location = cell_location

    @property
    def insert_below(self):
        """Gets the insert_below of this InsertTableRowsRequest.

        Whether to insert new rows below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.

        :return: The insert_below of this InsertTableRowsRequest.
        :rtype: bool
        """
        return self._insert_below

    @insert_below.setter
    def insert_below(self, insert_below):
        """Sets the insert_below of this InsertTableRowsRequest.

        Whether to insert new rows below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.

        :param insert_below: The insert_below of this InsertTableRowsRequest.
        :type insert_below: bool
        """

        self._insert_below = insert_below

    @property
    def number(self):
        """Gets the number of this InsertTableRowsRequest.

        The number of rows to be inserted. Maximum 20 per request.

        :return: The number of this InsertTableRowsRequest.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InsertTableRowsRequest.

        The number of rows to be inserted. Maximum 20 per request.

        :param number: The number of this InsertTableRowsRequest.
        :type number: int
        """

        self._number = number

    @property
    def table_object_id(self):
        """Gets the table_object_id of this InsertTableRowsRequest.

        The table to insert rows into.

        :return: The table_object_id of this InsertTableRowsRequest.
        :rtype: str
        """
        return self._table_object_id

    @table_object_id.setter
    def table_object_id(self, table_object_id):
        """Sets the table_object_id of this InsertTableRowsRequest.

        The table to insert rows into.

        :param table_object_id: The table_object_id of this InsertTableRowsRequest.
        :type table_object_id: str
        """

        self._table_object_id = table_object_id
