# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_cell_location import TableCellLocation
from openapi_server import util


class InsertTextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_location: TableCellLocation=None, insertion_index: int=None, object_id: str=None, text: str=None):
        """InsertTextRequest - a model defined in OpenAPI

        :param cell_location: The cell_location of this InsertTextRequest.
        :param insertion_index: The insertion_index of this InsertTextRequest.
        :param object_id: The object_id of this InsertTextRequest.
        :param text: The text of this InsertTextRequest.
        """
        self.openapi_types = {
            'cell_location': TableCellLocation,
            'insertion_index': int,
            'object_id': str,
            'text': str
        }

        self.attribute_map = {
            'cell_location': 'cellLocation',
            'insertion_index': 'insertionIndex',
            'object_id': 'objectId',
            'text': 'text'
        }

        self._cell_location = cell_location
        self._insertion_index = insertion_index
        self._object_id = object_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertTextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertTextRequest of this InsertTextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_location(self):
        """Gets the cell_location of this InsertTextRequest.


        :return: The cell_location of this InsertTextRequest.
        :rtype: TableCellLocation
        """
        return self._cell_location

    @cell_location.setter
    def cell_location(self, cell_location):
        """Sets the cell_location of this InsertTextRequest.


        :param cell_location: The cell_location of this InsertTextRequest.
        :type cell_location: TableCellLocation
        """

        self._cell_location = cell_location

    @property
    def insertion_index(self):
        """Gets the insertion_index of this InsertTextRequest.

        The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.

        :return: The insertion_index of this InsertTextRequest.
        :rtype: int
        """
        return self._insertion_index

    @insertion_index.setter
    def insertion_index(self, insertion_index):
        """Sets the insertion_index of this InsertTextRequest.

        The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.

        :param insertion_index: The insertion_index of this InsertTextRequest.
        :type insertion_index: int
        """

        self._insertion_index = insertion_index

    @property
    def object_id(self):
        """Gets the object_id of this InsertTextRequest.

        The object ID of the shape or table where the text will be inserted.

        :return: The object_id of this InsertTextRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InsertTextRequest.

        The object ID of the shape or table where the text will be inserted.

        :param object_id: The object_id of this InsertTextRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def text(self):
        """Gets the text of this InsertTextRequest.

        The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.

        :return: The text of this InsertTextRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InsertTextRequest.

        The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.

        :param text: The text of this InsertTextRequest.
        :type text: str
        """

        self._text = text
