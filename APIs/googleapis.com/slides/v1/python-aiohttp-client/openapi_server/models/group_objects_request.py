# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupObjectsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children_object_ids: List[str]=None, group_object_id: str=None):
        """GroupObjectsRequest - a model defined in OpenAPI

        :param children_object_ids: The children_object_ids of this GroupObjectsRequest.
        :param group_object_id: The group_object_id of this GroupObjectsRequest.
        """
        self.openapi_types = {
            'children_object_ids': List[str],
            'group_object_id': str
        }

        self.attribute_map = {
            'children_object_ids': 'childrenObjectIds',
            'group_object_id': 'groupObjectId'
        }

        self._children_object_ids = children_object_ids
        self._group_object_id = group_object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupObjectsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupObjectsRequest of this GroupObjectsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children_object_ids(self):
        """Gets the children_object_ids of this GroupObjectsRequest.

        The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.

        :return: The children_object_ids of this GroupObjectsRequest.
        :rtype: List[str]
        """
        return self._children_object_ids

    @children_object_ids.setter
    def children_object_ids(self, children_object_ids):
        """Sets the children_object_ids of this GroupObjectsRequest.

        The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.

        :param children_object_ids: The children_object_ids of this GroupObjectsRequest.
        :type children_object_ids: List[str]
        """

        self._children_object_ids = children_object_ids

    @property
    def group_object_id(self):
        """Gets the group_object_id of this GroupObjectsRequest.

        A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :return: The group_object_id of this GroupObjectsRequest.
        :rtype: str
        """
        return self._group_object_id

    @group_object_id.setter
    def group_object_id(self, group_object_id):
        """Sets the group_object_id of this GroupObjectsRequest.

        A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :param group_object_id: The group_object_id of this GroupObjectsRequest.
        :type group_object_id: str
        """

        self._group_object_id = group_object_id
