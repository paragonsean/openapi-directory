# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.substring_match_criteria import SubstringMatchCriteria
from openapi_server import util


class ReplaceAllShapesWithImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_text: SubstringMatchCriteria=None, image_replace_method: str=None, image_url: str=None, page_object_ids: List[str]=None, replace_method: str=None):
        """ReplaceAllShapesWithImageRequest - a model defined in OpenAPI

        :param contains_text: The contains_text of this ReplaceAllShapesWithImageRequest.
        :param image_replace_method: The image_replace_method of this ReplaceAllShapesWithImageRequest.
        :param image_url: The image_url of this ReplaceAllShapesWithImageRequest.
        :param page_object_ids: The page_object_ids of this ReplaceAllShapesWithImageRequest.
        :param replace_method: The replace_method of this ReplaceAllShapesWithImageRequest.
        """
        self.openapi_types = {
            'contains_text': SubstringMatchCriteria,
            'image_replace_method': str,
            'image_url': str,
            'page_object_ids': List[str],
            'replace_method': str
        }

        self.attribute_map = {
            'contains_text': 'containsText',
            'image_replace_method': 'imageReplaceMethod',
            'image_url': 'imageUrl',
            'page_object_ids': 'pageObjectIds',
            'replace_method': 'replaceMethod'
        }

        self._contains_text = contains_text
        self._image_replace_method = image_replace_method
        self._image_url = image_url
        self._page_object_ids = page_object_ids
        self._replace_method = replace_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceAllShapesWithImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceAllShapesWithImageRequest of this ReplaceAllShapesWithImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_text(self):
        """Gets the contains_text of this ReplaceAllShapesWithImageRequest.


        :return: The contains_text of this ReplaceAllShapesWithImageRequest.
        :rtype: SubstringMatchCriteria
        """
        return self._contains_text

    @contains_text.setter
    def contains_text(self, contains_text):
        """Sets the contains_text of this ReplaceAllShapesWithImageRequest.


        :param contains_text: The contains_text of this ReplaceAllShapesWithImageRequest.
        :type contains_text: SubstringMatchCriteria
        """

        self._contains_text = contains_text

    @property
    def image_replace_method(self):
        """Gets the image_replace_method of this ReplaceAllShapesWithImageRequest.

        The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.

        :return: The image_replace_method of this ReplaceAllShapesWithImageRequest.
        :rtype: str
        """
        return self._image_replace_method

    @image_replace_method.setter
    def image_replace_method(self, image_replace_method):
        """Sets the image_replace_method of this ReplaceAllShapesWithImageRequest.

        The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.

        :param image_replace_method: The image_replace_method of this ReplaceAllShapesWithImageRequest.
        :type image_replace_method: str
        """
        allowed_values = ["IMAGE_REPLACE_METHOD_UNSPECIFIED", "CENTER_INSIDE", "CENTER_CROP"]  # noqa: E501
        if image_replace_method not in allowed_values:
            raise ValueError(
                "Invalid value for `image_replace_method` ({0}), must be one of {1}"
                .format(image_replace_method, allowed_values)
            )

        self._image_replace_method = image_replace_method

    @property
    def image_url(self):
        """Gets the image_url of this ReplaceAllShapesWithImageRequest.

        The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.

        :return: The image_url of this ReplaceAllShapesWithImageRequest.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ReplaceAllShapesWithImageRequest.

        The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.

        :param image_url: The image_url of this ReplaceAllShapesWithImageRequest.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def page_object_ids(self):
        """Gets the page_object_ids of this ReplaceAllShapesWithImageRequest.

        If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.

        :return: The page_object_ids of this ReplaceAllShapesWithImageRequest.
        :rtype: List[str]
        """
        return self._page_object_ids

    @page_object_ids.setter
    def page_object_ids(self, page_object_ids):
        """Sets the page_object_ids of this ReplaceAllShapesWithImageRequest.

        If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.

        :param page_object_ids: The page_object_ids of this ReplaceAllShapesWithImageRequest.
        :type page_object_ids: List[str]
        """

        self._page_object_ids = page_object_ids

    @property
    def replace_method(self):
        """Gets the replace_method of this ReplaceAllShapesWithImageRequest.

        The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.

        :return: The replace_method of this ReplaceAllShapesWithImageRequest.
        :rtype: str
        """
        return self._replace_method

    @replace_method.setter
    def replace_method(self, replace_method):
        """Sets the replace_method of this ReplaceAllShapesWithImageRequest.

        The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.

        :param replace_method: The replace_method of this ReplaceAllShapesWithImageRequest.
        :type replace_method: str
        """
        allowed_values = ["CENTER_INSIDE", "CENTER_CROP"]  # noqa: E501
        if replace_method not in allowed_values:
            raise ValueError(
                "Invalid value for `replace_method` ({0}), must be one of {1}"
                .format(replace_method, allowed_values)
            )

        self._replace_method = replace_method
