# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autofit import Autofit
from openapi_server.models.link import Link
from openapi_server.models.outline import Outline
from openapi_server.models.shadow import Shadow
from openapi_server.models.shape_background_fill import ShapeBackgroundFill
from openapi_server import util


class ShapeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autofit: Autofit=None, content_alignment: str=None, link: Link=None, outline: Outline=None, shadow: Shadow=None, shape_background_fill: ShapeBackgroundFill=None):
        """ShapeProperties - a model defined in OpenAPI

        :param autofit: The autofit of this ShapeProperties.
        :param content_alignment: The content_alignment of this ShapeProperties.
        :param link: The link of this ShapeProperties.
        :param outline: The outline of this ShapeProperties.
        :param shadow: The shadow of this ShapeProperties.
        :param shape_background_fill: The shape_background_fill of this ShapeProperties.
        """
        self.openapi_types = {
            'autofit': Autofit,
            'content_alignment': str,
            'link': Link,
            'outline': Outline,
            'shadow': Shadow,
            'shape_background_fill': ShapeBackgroundFill
        }

        self.attribute_map = {
            'autofit': 'autofit',
            'content_alignment': 'contentAlignment',
            'link': 'link',
            'outline': 'outline',
            'shadow': 'shadow',
            'shape_background_fill': 'shapeBackgroundFill'
        }

        self._autofit = autofit
        self._content_alignment = content_alignment
        self._link = link
        self._outline = outline
        self._shadow = shadow
        self._shape_background_fill = shape_background_fill

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShapeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShapeProperties of this ShapeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autofit(self):
        """Gets the autofit of this ShapeProperties.


        :return: The autofit of this ShapeProperties.
        :rtype: Autofit
        """
        return self._autofit

    @autofit.setter
    def autofit(self, autofit):
        """Sets the autofit of this ShapeProperties.


        :param autofit: The autofit of this ShapeProperties.
        :type autofit: Autofit
        """

        self._autofit = autofit

    @property
    def content_alignment(self):
        """Gets the content_alignment of this ShapeProperties.

        The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.

        :return: The content_alignment of this ShapeProperties.
        :rtype: str
        """
        return self._content_alignment

    @content_alignment.setter
    def content_alignment(self, content_alignment):
        """Sets the content_alignment of this ShapeProperties.

        The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.

        :param content_alignment: The content_alignment of this ShapeProperties.
        :type content_alignment: str
        """
        allowed_values = ["CONTENT_ALIGNMENT_UNSPECIFIED", "CONTENT_ALIGNMENT_UNSUPPORTED", "TOP", "MIDDLE", "BOTTOM"]  # noqa: E501
        if content_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `content_alignment` ({0}), must be one of {1}"
                .format(content_alignment, allowed_values)
            )

        self._content_alignment = content_alignment

    @property
    def link(self):
        """Gets the link of this ShapeProperties.


        :return: The link of this ShapeProperties.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ShapeProperties.


        :param link: The link of this ShapeProperties.
        :type link: Link
        """

        self._link = link

    @property
    def outline(self):
        """Gets the outline of this ShapeProperties.


        :return: The outline of this ShapeProperties.
        :rtype: Outline
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this ShapeProperties.


        :param outline: The outline of this ShapeProperties.
        :type outline: Outline
        """

        self._outline = outline

    @property
    def shadow(self):
        """Gets the shadow of this ShapeProperties.


        :return: The shadow of this ShapeProperties.
        :rtype: Shadow
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this ShapeProperties.


        :param shadow: The shadow of this ShapeProperties.
        :type shadow: Shadow
        """

        self._shadow = shadow

    @property
    def shape_background_fill(self):
        """Gets the shape_background_fill of this ShapeProperties.


        :return: The shape_background_fill of this ShapeProperties.
        :rtype: ShapeBackgroundFill
        """
        return self._shape_background_fill

    @shape_background_fill.setter
    def shape_background_fill(self, shape_background_fill):
        """Sets the shape_background_fill of this ShapeProperties.


        :param shape_background_fill: The shape_background_fill of this ShapeProperties.
        :type shape_background_fill: ShapeBackgroundFill
        """

        self._shape_background_fill = shape_background_fill
