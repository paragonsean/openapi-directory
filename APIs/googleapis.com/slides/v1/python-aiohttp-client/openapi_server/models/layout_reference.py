# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LayoutReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout_id: str=None, predefined_layout: str=None):
        """LayoutReference - a model defined in OpenAPI

        :param layout_id: The layout_id of this LayoutReference.
        :param predefined_layout: The predefined_layout of this LayoutReference.
        """
        self.openapi_types = {
            'layout_id': str,
            'predefined_layout': str
        }

        self.attribute_map = {
            'layout_id': 'layoutId',
            'predefined_layout': 'predefinedLayout'
        }

        self._layout_id = layout_id
        self._predefined_layout = predefined_layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LayoutReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LayoutReference of this LayoutReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout_id(self):
        """Gets the layout_id of this LayoutReference.

        Layout ID: the object ID of one of the layouts in the presentation.

        :return: The layout_id of this LayoutReference.
        :rtype: str
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this LayoutReference.

        Layout ID: the object ID of one of the layouts in the presentation.

        :param layout_id: The layout_id of this LayoutReference.
        :type layout_id: str
        """

        self._layout_id = layout_id

    @property
    def predefined_layout(self):
        """Gets the predefined_layout of this LayoutReference.

        Predefined layout.

        :return: The predefined_layout of this LayoutReference.
        :rtype: str
        """
        return self._predefined_layout

    @predefined_layout.setter
    def predefined_layout(self, predefined_layout):
        """Sets the predefined_layout of this LayoutReference.

        Predefined layout.

        :param predefined_layout: The predefined_layout of this LayoutReference.
        :type predefined_layout: str
        """
        allowed_values = ["PREDEFINED_LAYOUT_UNSPECIFIED", "BLANK", "CAPTION_ONLY", "TITLE", "TITLE_AND_BODY", "TITLE_AND_TWO_COLUMNS", "TITLE_ONLY", "SECTION_HEADER", "SECTION_TITLE_AND_DESCRIPTION", "ONE_COLUMN_TEXT", "MAIN_POINT", "BIG_NUMBER"]  # noqa: E501
        if predefined_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `predefined_layout` ({0}), must be one of {1}"
                .format(predefined_layout, allowed_values)
            )

        self._predefined_layout = predefined_layout
