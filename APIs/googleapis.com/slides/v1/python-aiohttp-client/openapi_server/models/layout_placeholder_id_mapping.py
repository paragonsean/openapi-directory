# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.placeholder import Placeholder
from openapi_server import util


class LayoutPlaceholderIdMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout_placeholder: Placeholder=None, layout_placeholder_object_id: str=None, object_id: str=None):
        """LayoutPlaceholderIdMapping - a model defined in OpenAPI

        :param layout_placeholder: The layout_placeholder of this LayoutPlaceholderIdMapping.
        :param layout_placeholder_object_id: The layout_placeholder_object_id of this LayoutPlaceholderIdMapping.
        :param object_id: The object_id of this LayoutPlaceholderIdMapping.
        """
        self.openapi_types = {
            'layout_placeholder': Placeholder,
            'layout_placeholder_object_id': str,
            'object_id': str
        }

        self.attribute_map = {
            'layout_placeholder': 'layoutPlaceholder',
            'layout_placeholder_object_id': 'layoutPlaceholderObjectId',
            'object_id': 'objectId'
        }

        self._layout_placeholder = layout_placeholder
        self._layout_placeholder_object_id = layout_placeholder_object_id
        self._object_id = object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LayoutPlaceholderIdMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LayoutPlaceholderIdMapping of this LayoutPlaceholderIdMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout_placeholder(self):
        """Gets the layout_placeholder of this LayoutPlaceholderIdMapping.


        :return: The layout_placeholder of this LayoutPlaceholderIdMapping.
        :rtype: Placeholder
        """
        return self._layout_placeholder

    @layout_placeholder.setter
    def layout_placeholder(self, layout_placeholder):
        """Sets the layout_placeholder of this LayoutPlaceholderIdMapping.


        :param layout_placeholder: The layout_placeholder of this LayoutPlaceholderIdMapping.
        :type layout_placeholder: Placeholder
        """

        self._layout_placeholder = layout_placeholder

    @property
    def layout_placeholder_object_id(self):
        """Gets the layout_placeholder_object_id of this LayoutPlaceholderIdMapping.

        The object ID of the placeholder on a layout that will be applied to a slide.

        :return: The layout_placeholder_object_id of this LayoutPlaceholderIdMapping.
        :rtype: str
        """
        return self._layout_placeholder_object_id

    @layout_placeholder_object_id.setter
    def layout_placeholder_object_id(self, layout_placeholder_object_id):
        """Sets the layout_placeholder_object_id of this LayoutPlaceholderIdMapping.

        The object ID of the placeholder on a layout that will be applied to a slide.

        :param layout_placeholder_object_id: The layout_placeholder_object_id of this LayoutPlaceholderIdMapping.
        :type layout_placeholder_object_id: str
        """

        self._layout_placeholder_object_id = layout_placeholder_object_id

    @property
    def object_id(self):
        """Gets the object_id of this LayoutPlaceholderIdMapping.

        A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :return: The object_id of this LayoutPlaceholderIdMapping.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this LayoutPlaceholderIdMapping.

        A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :param object_id: The object_id of this LayoutPlaceholderIdMapping.
        :type object_id: str
        """

        self._object_id = object_id
