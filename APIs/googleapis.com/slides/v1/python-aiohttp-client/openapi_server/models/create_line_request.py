# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.page_element_properties import PageElementProperties
from openapi_server import util


class CreateLineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, element_properties: PageElementProperties=None, line_category: str=None, object_id: str=None):
        """CreateLineRequest - a model defined in OpenAPI

        :param category: The category of this CreateLineRequest.
        :param element_properties: The element_properties of this CreateLineRequest.
        :param line_category: The line_category of this CreateLineRequest.
        :param object_id: The object_id of this CreateLineRequest.
        """
        self.openapi_types = {
            'category': str,
            'element_properties': PageElementProperties,
            'line_category': str,
            'object_id': str
        }

        self.attribute_map = {
            'category': 'category',
            'element_properties': 'elementProperties',
            'line_category': 'lineCategory',
            'object_id': 'objectId'
        }

        self._category = category
        self._element_properties = element_properties
        self._line_category = line_category
        self._object_id = object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLineRequest of this CreateLineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CreateLineRequest.

        The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.

        :return: The category of this CreateLineRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateLineRequest.

        The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.

        :param category: The category of this CreateLineRequest.
        :type category: str
        """
        allowed_values = ["LINE_CATEGORY_UNSPECIFIED", "STRAIGHT", "BENT", "CURVED"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def element_properties(self):
        """Gets the element_properties of this CreateLineRequest.


        :return: The element_properties of this CreateLineRequest.
        :rtype: PageElementProperties
        """
        return self._element_properties

    @element_properties.setter
    def element_properties(self, element_properties):
        """Sets the element_properties of this CreateLineRequest.


        :param element_properties: The element_properties of this CreateLineRequest.
        :type element_properties: PageElementProperties
        """

        self._element_properties = element_properties

    @property
    def line_category(self):
        """Gets the line_category of this CreateLineRequest.

        The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.

        :return: The line_category of this CreateLineRequest.
        :rtype: str
        """
        return self._line_category

    @line_category.setter
    def line_category(self, line_category):
        """Sets the line_category of this CreateLineRequest.

        The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.

        :param line_category: The line_category of this CreateLineRequest.
        :type line_category: str
        """
        allowed_values = ["STRAIGHT", "BENT", "CURVED"]  # noqa: E501
        if line_category not in allowed_values:
            raise ValueError(
                "Invalid value for `line_category` ({0}), must be one of {1}"
                .format(line_category, allowed_values)
            )

        self._line_category = line_category

    @property
    def object_id(self):
        """Gets the object_id of this CreateLineRequest.

        A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :return: The object_id of this CreateLineRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this CreateLineRequest.

        A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.

        :param object_id: The object_id of this CreateLineRequest.
        :type object_id: str
        """

        self._object_id = object_id
