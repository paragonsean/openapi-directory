# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_text import AutoText
from openapi_server.models.paragraph_marker import ParagraphMarker
from openapi_server.models.text_run import TextRun
from openapi_server import util


class TextElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_text: AutoText=None, end_index: int=None, paragraph_marker: ParagraphMarker=None, start_index: int=None, text_run: TextRun=None):
        """TextElement - a model defined in OpenAPI

        :param auto_text: The auto_text of this TextElement.
        :param end_index: The end_index of this TextElement.
        :param paragraph_marker: The paragraph_marker of this TextElement.
        :param start_index: The start_index of this TextElement.
        :param text_run: The text_run of this TextElement.
        """
        self.openapi_types = {
            'auto_text': AutoText,
            'end_index': int,
            'paragraph_marker': ParagraphMarker,
            'start_index': int,
            'text_run': TextRun
        }

        self.attribute_map = {
            'auto_text': 'autoText',
            'end_index': 'endIndex',
            'paragraph_marker': 'paragraphMarker',
            'start_index': 'startIndex',
            'text_run': 'textRun'
        }

        self._auto_text = auto_text
        self._end_index = end_index
        self._paragraph_marker = paragraph_marker
        self._start_index = start_index
        self._text_run = text_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextElement of this TextElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_text(self):
        """Gets the auto_text of this TextElement.


        :return: The auto_text of this TextElement.
        :rtype: AutoText
        """
        return self._auto_text

    @auto_text.setter
    def auto_text(self, auto_text):
        """Sets the auto_text of this TextElement.


        :param auto_text: The auto_text of this TextElement.
        :type auto_text: AutoText
        """

        self._auto_text = auto_text

    @property
    def end_index(self):
        """Gets the end_index of this TextElement.

        The zero-based end index of this text element, exclusive, in Unicode code units.

        :return: The end_index of this TextElement.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this TextElement.

        The zero-based end index of this text element, exclusive, in Unicode code units.

        :param end_index: The end_index of this TextElement.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def paragraph_marker(self):
        """Gets the paragraph_marker of this TextElement.


        :return: The paragraph_marker of this TextElement.
        :rtype: ParagraphMarker
        """
        return self._paragraph_marker

    @paragraph_marker.setter
    def paragraph_marker(self, paragraph_marker):
        """Sets the paragraph_marker of this TextElement.


        :param paragraph_marker: The paragraph_marker of this TextElement.
        :type paragraph_marker: ParagraphMarker
        """

        self._paragraph_marker = paragraph_marker

    @property
    def start_index(self):
        """Gets the start_index of this TextElement.

        The zero-based start index of this text element, in Unicode code units.

        :return: The start_index of this TextElement.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this TextElement.

        The zero-based start index of this text element, in Unicode code units.

        :param start_index: The start_index of this TextElement.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def text_run(self):
        """Gets the text_run of this TextElement.


        :return: The text_run of this TextElement.
        :rtype: TextRun
        """
        return self._text_run

    @text_run.setter
    def text_run(self, text_run):
        """Sets the text_run of this TextElement.


        :param text_run: The text_run of this TextElement.
        :type text_run: TextRun
        """

        self._text_run = text_run
