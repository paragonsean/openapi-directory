/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchUpdatePresentationRequest from '../model/BatchUpdatePresentationRequest';
import BatchUpdatePresentationResponse from '../model/BatchUpdatePresentationResponse';
import Page from '../model/Page';
import Presentation from '../model/Presentation';
import Thumbnail from '../model/Thumbnail';

/**
* Presentations service.
* @module api/PresentationsApi
* @version v1
*/
export default class PresentationsApi {

    /**
    * Constructs a new PresentationsApi. 
    * @alias module:api/PresentationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the slidesPresentationsBatchUpdate operation.
     * @callback module:api/PresentationsApi~slidesPresentationsBatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdatePresentationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
     * @param {String} presentationId The presentation to apply the updates to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdatePresentationRequest} [batchUpdatePresentationRequest] 
     * @param {module:api/PresentationsApi~slidesPresentationsBatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdatePresentationResponse}
     */
    slidesPresentationsBatchUpdate(presentationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdatePresentationRequest'];
      // verify the required parameter 'presentationId' is set
      if (presentationId === undefined || presentationId === null) {
        throw new Error("Missing the required parameter 'presentationId' when calling slidesPresentationsBatchUpdate");
      }

      let pathParams = {
        'presentationId': presentationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdatePresentationResponse;
      return this.apiClient.callApi(
        '/v1/presentations/{presentationId}:batchUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slidesPresentationsCreate operation.
     * @callback module:api/PresentationsApi~slidesPresentationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Presentation} [presentation] 
     * @param {module:api/PresentationsApi~slidesPresentationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presentation}
     */
    slidesPresentationsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['presentation'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Presentation;
      return this.apiClient.callApi(
        '/v1/presentations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slidesPresentationsGet operation.
     * @callback module:api/PresentationsApi~slidesPresentationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest version of the specified presentation.
     * @param {String} presentationId The ID of the presentation to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/PresentationsApi~slidesPresentationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presentation}
     */
    slidesPresentationsGet(presentationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'presentationId' is set
      if (presentationId === undefined || presentationId === null) {
        throw new Error("Missing the required parameter 'presentationId' when calling slidesPresentationsGet");
      }

      let pathParams = {
        'presentationId': presentationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Presentation;
      return this.apiClient.callApi(
        '/v1/presentations/{presentationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slidesPresentationsPagesGet operation.
     * @callback module:api/PresentationsApi~slidesPresentationsPagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Page} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the latest version of the specified page in the presentation.
     * @param {String} presentationId The ID of the presentation to retrieve.
     * @param {String} pageObjectId The object ID of the page to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/PresentationsApi~slidesPresentationsPagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Page}
     */
    slidesPresentationsPagesGet(presentationId, pageObjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'presentationId' is set
      if (presentationId === undefined || presentationId === null) {
        throw new Error("Missing the required parameter 'presentationId' when calling slidesPresentationsPagesGet");
      }
      // verify the required parameter 'pageObjectId' is set
      if (pageObjectId === undefined || pageObjectId === null) {
        throw new Error("Missing the required parameter 'pageObjectId' when calling slidesPresentationsPagesGet");
      }

      let pathParams = {
        'presentationId': presentationId,
        'pageObjectId': pageObjectId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Page;
      return this.apiClient.callApi(
        '/v1/presentations/{presentationId}/pages/{pageObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slidesPresentationsPagesGetThumbnail operation.
     * @callback module:api/PresentationsApi~slidesPresentationsPagesGetThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Thumbnail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
     * @param {String} presentationId The ID of the presentation to retrieve.
     * @param {String} pageObjectId The object ID of the page whose thumbnail to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [thumbnailPropertiesMimeType] The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.
     * @param {module:model/String} [thumbnailPropertiesThumbnailSize] The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.
     * @param {module:api/PresentationsApi~slidesPresentationsPagesGetThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Thumbnail}
     */
    slidesPresentationsPagesGetThumbnail(presentationId, pageObjectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'presentationId' is set
      if (presentationId === undefined || presentationId === null) {
        throw new Error("Missing the required parameter 'presentationId' when calling slidesPresentationsPagesGetThumbnail");
      }
      // verify the required parameter 'pageObjectId' is set
      if (pageObjectId === undefined || pageObjectId === null) {
        throw new Error("Missing the required parameter 'pageObjectId' when calling slidesPresentationsPagesGetThumbnail");
      }

      let pathParams = {
        'presentationId': presentationId,
        'pageObjectId': pageObjectId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'thumbnailProperties.mimeType': opts['thumbnailPropertiesMimeType'],
        'thumbnailProperties.thumbnailSize': opts['thumbnailPropertiesThumbnailSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Thumbnail;
      return this.apiClient.callApi(
        '/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
