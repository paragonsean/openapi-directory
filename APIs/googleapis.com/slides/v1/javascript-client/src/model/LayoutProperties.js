/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LayoutProperties model module.
 * @module model/LayoutProperties
 * @version v1
 */
class LayoutProperties {
    /**
     * Constructs a new <code>LayoutProperties</code>.
     * The properties of Page are only relevant for pages with page_type LAYOUT.
     * @alias module:model/LayoutProperties
     */
    constructor() { 
        
        LayoutProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LayoutProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LayoutProperties} obj Optional instance to populate.
     * @return {module:model/LayoutProperties} The populated <code>LayoutProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LayoutProperties();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('masterObjectId')) {
                obj['masterObjectId'] = ApiClient.convertToType(data['masterObjectId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LayoutProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LayoutProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['masterObjectId'] && !(typeof data['masterObjectId'] === 'string' || data['masterObjectId'] instanceof String)) {
            throw new Error("Expected the field `masterObjectId` to be a primitive type in the JSON string but got " + data['masterObjectId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The human-readable name of the layout.
 * @member {String} displayName
 */
LayoutProperties.prototype['displayName'] = undefined;

/**
 * The object ID of the master that this layout is based on.
 * @member {String} masterObjectId
 */
LayoutProperties.prototype['masterObjectId'] = undefined;

/**
 * The name of the layout.
 * @member {String} name
 */
LayoutProperties.prototype['name'] = undefined;






export default LayoutProperties;

