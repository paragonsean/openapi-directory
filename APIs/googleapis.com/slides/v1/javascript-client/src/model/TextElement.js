/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoText from './AutoText';
import ParagraphMarker from './ParagraphMarker';
import TextRun from './TextRun';

/**
 * The TextElement model module.
 * @module model/TextElement
 * @version v1
 */
class TextElement {
    /**
     * Constructs a new <code>TextElement</code>.
     * A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.
     * @alias module:model/TextElement
     */
    constructor() { 
        
        TextElement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextElement} obj Optional instance to populate.
     * @return {module:model/TextElement} The populated <code>TextElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextElement();

            if (data.hasOwnProperty('autoText')) {
                obj['autoText'] = AutoText.constructFromObject(data['autoText']);
            }
            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('paragraphMarker')) {
                obj['paragraphMarker'] = ParagraphMarker.constructFromObject(data['paragraphMarker']);
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('textRun')) {
                obj['textRun'] = TextRun.constructFromObject(data['textRun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextElement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoText`
        if (data['autoText']) { // data not null
          AutoText.validateJSON(data['autoText']);
        }
        // validate the optional field `paragraphMarker`
        if (data['paragraphMarker']) { // data not null
          ParagraphMarker.validateJSON(data['paragraphMarker']);
        }
        // validate the optional field `textRun`
        if (data['textRun']) { // data not null
          TextRun.validateJSON(data['textRun']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoText} autoText
 */
TextElement.prototype['autoText'] = undefined;

/**
 * The zero-based end index of this text element, exclusive, in Unicode code units.
 * @member {Number} endIndex
 */
TextElement.prototype['endIndex'] = undefined;

/**
 * @member {module:model/ParagraphMarker} paragraphMarker
 */
TextElement.prototype['paragraphMarker'] = undefined;

/**
 * The zero-based start index of this text element, in Unicode code units.
 * @member {Number} startIndex
 */
TextElement.prototype['startIndex'] = undefined;

/**
 * @member {module:model/TextRun} textRun
 */
TextElement.prototype['textRun'] = undefined;






export default TextElement;

