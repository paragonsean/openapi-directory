/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableCellLocation from './TableCellLocation';

/**
 * The InsertTextRequest model module.
 * @module model/InsertTextRequest
 * @version v1
 */
class InsertTextRequest {
    /**
     * Constructs a new <code>InsertTextRequest</code>.
     * Inserts text into a shape or a table cell.
     * @alias module:model/InsertTextRequest
     */
    constructor() { 
        
        InsertTextRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsertTextRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsertTextRequest} obj Optional instance to populate.
     * @return {module:model/InsertTextRequest} The populated <code>InsertTextRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsertTextRequest();

            if (data.hasOwnProperty('cellLocation')) {
                obj['cellLocation'] = TableCellLocation.constructFromObject(data['cellLocation']);
            }
            if (data.hasOwnProperty('insertionIndex')) {
                obj['insertionIndex'] = ApiClient.convertToType(data['insertionIndex'], 'Number');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsertTextRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsertTextRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cellLocation`
        if (data['cellLocation']) { // data not null
          TableCellLocation.validateJSON(data['cellLocation']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/TableCellLocation} cellLocation
 */
InsertTextRequest.prototype['cellLocation'] = undefined;

/**
 * The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.
 * @member {Number} insertionIndex
 */
InsertTextRequest.prototype['insertionIndex'] = undefined;

/**
 * The object ID of the shape or table where the text will be inserted.
 * @member {String} objectId
 */
InsertTextRequest.prototype['objectId'] = undefined;

/**
 * The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
 * @member {String} text
 */
InsertTextRequest.prototype['text'] = undefined;






export default InsertTextRequest;

