/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffineTransform from './AffineTransform';
import Group from './Group';
import Image from './Image';
import Line from './Line';
import Shape from './Shape';
import SheetsChart from './SheetsChart';
import Size from './Size';
import Table from './Table';
import Video from './Video';
import WordArt from './WordArt';

/**
 * The PageElement model module.
 * @module model/PageElement
 * @version v1
 */
class PageElement {
    /**
     * Constructs a new <code>PageElement</code>.
     * A visual element rendered on a page.
     * @alias module:model/PageElement
     */
    constructor() { 
        
        PageElement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageElement} obj Optional instance to populate.
     * @return {module:model/PageElement} The populated <code>PageElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageElement();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('elementGroup')) {
                obj['elementGroup'] = Group.constructFromObject(data['elementGroup']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = Line.constructFromObject(data['line']);
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = Shape.constructFromObject(data['shape']);
            }
            if (data.hasOwnProperty('sheetsChart')) {
                obj['sheetsChart'] = SheetsChart.constructFromObject(data['sheetsChart']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = Table.constructFromObject(data['table']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = AffineTransform.constructFromObject(data['transform']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = Video.constructFromObject(data['video']);
            }
            if (data.hasOwnProperty('wordArt')) {
                obj['wordArt'] = WordArt.constructFromObject(data['wordArt']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageElement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `elementGroup`
        if (data['elementGroup']) { // data not null
          Group.validateJSON(data['elementGroup']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // validate the optional field `line`
        if (data['line']) { // data not null
          Line.validateJSON(data['line']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // validate the optional field `shape`
        if (data['shape']) { // data not null
          Shape.validateJSON(data['shape']);
        }
        // validate the optional field `sheetsChart`
        if (data['sheetsChart']) { // data not null
          SheetsChart.validateJSON(data['sheetsChart']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // validate the optional field `table`
        if (data['table']) { // data not null
          Table.validateJSON(data['table']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          AffineTransform.validateJSON(data['transform']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          Video.validateJSON(data['video']);
        }
        // validate the optional field `wordArt`
        if (data['wordArt']) { // data not null
          WordArt.validateJSON(data['wordArt']);
        }

        return true;
    }


}



/**
 * The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
 * @member {String} description
 */
PageElement.prototype['description'] = undefined;

/**
 * @member {module:model/Group} elementGroup
 */
PageElement.prototype['elementGroup'] = undefined;

/**
 * @member {module:model/Image} image
 */
PageElement.prototype['image'] = undefined;

/**
 * @member {module:model/Line} line
 */
PageElement.prototype['line'] = undefined;

/**
 * The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
 * @member {String} objectId
 */
PageElement.prototype['objectId'] = undefined;

/**
 * @member {module:model/Shape} shape
 */
PageElement.prototype['shape'] = undefined;

/**
 * @member {module:model/SheetsChart} sheetsChart
 */
PageElement.prototype['sheetsChart'] = undefined;

/**
 * @member {module:model/Size} size
 */
PageElement.prototype['size'] = undefined;

/**
 * @member {module:model/Table} table
 */
PageElement.prototype['table'] = undefined;

/**
 * The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
 * @member {String} title
 */
PageElement.prototype['title'] = undefined;

/**
 * @member {module:model/AffineTransform} transform
 */
PageElement.prototype['transform'] = undefined;

/**
 * @member {module:model/Video} video
 */
PageElement.prototype['video'] = undefined;

/**
 * @member {module:model/WordArt} wordArt
 */
PageElement.prototype['wordArt'] = undefined;






export default PageElement;

