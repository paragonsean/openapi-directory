/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AffineTransform model module.
 * @module model/AffineTransform
 * @version v1
 */
class AffineTransform {
    /**
     * Constructs a new <code>AffineTransform</code>.
     * AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x&#39;, y&#39;) according to: x&#39; x &#x3D; shear_y scale_y translate_y 1 [ 1 ] After transformation, x&#39; &#x3D; scale_x * x + shear_x * y + translate_x; y&#39; &#x3D; scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
     * @alias module:model/AffineTransform
     */
    constructor() { 
        
        AffineTransform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AffineTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AffineTransform} obj Optional instance to populate.
     * @return {module:model/AffineTransform} The populated <code>AffineTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AffineTransform();

            if (data.hasOwnProperty('scaleX')) {
                obj['scaleX'] = ApiClient.convertToType(data['scaleX'], 'Number');
            }
            if (data.hasOwnProperty('scaleY')) {
                obj['scaleY'] = ApiClient.convertToType(data['scaleY'], 'Number');
            }
            if (data.hasOwnProperty('shearX')) {
                obj['shearX'] = ApiClient.convertToType(data['shearX'], 'Number');
            }
            if (data.hasOwnProperty('shearY')) {
                obj['shearY'] = ApiClient.convertToType(data['shearY'], 'Number');
            }
            if (data.hasOwnProperty('translateX')) {
                obj['translateX'] = ApiClient.convertToType(data['translateX'], 'Number');
            }
            if (data.hasOwnProperty('translateY')) {
                obj['translateY'] = ApiClient.convertToType(data['translateY'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AffineTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AffineTransform</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * The X coordinate scaling element.
 * @member {Number} scaleX
 */
AffineTransform.prototype['scaleX'] = undefined;

/**
 * The Y coordinate scaling element.
 * @member {Number} scaleY
 */
AffineTransform.prototype['scaleY'] = undefined;

/**
 * The X coordinate shearing element.
 * @member {Number} shearX
 */
AffineTransform.prototype['shearX'] = undefined;

/**
 * The Y coordinate shearing element.
 * @member {Number} shearY
 */
AffineTransform.prototype['shearY'] = undefined;

/**
 * The X coordinate translation element.
 * @member {Number} translateX
 */
AffineTransform.prototype['translateX'] = undefined;

/**
 * The Y coordinate translation element.
 * @member {Number} translateY
 */
AffineTransform.prototype['translateY'] = undefined;

/**
 * The units for translate elements.
 * @member {module:model/AffineTransform.UnitEnum} unit
 */
AffineTransform.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
AffineTransform['UnitEnum'] = {

    /**
     * value: "UNIT_UNSPECIFIED"
     * @const
     */
    "UNIT_UNSPECIFIED": "UNIT_UNSPECIFIED",

    /**
     * value: "EMU"
     * @const
     */
    "EMU": "EMU",

    /**
     * value: "PT"
     * @const
     */
    "PT": "PT"
};



export default AffineTransform;

