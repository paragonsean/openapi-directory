/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubstringMatchCriteria from './SubstringMatchCriteria';

/**
 * The ReplaceAllShapesWithImageRequest model module.
 * @module model/ReplaceAllShapesWithImageRequest
 * @version v1
 */
class ReplaceAllShapesWithImageRequest {
    /**
     * Constructs a new <code>ReplaceAllShapesWithImageRequest</code>.
     * Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
     * @alias module:model/ReplaceAllShapesWithImageRequest
     */
    constructor() { 
        
        ReplaceAllShapesWithImageRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplaceAllShapesWithImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplaceAllShapesWithImageRequest} obj Optional instance to populate.
     * @return {module:model/ReplaceAllShapesWithImageRequest} The populated <code>ReplaceAllShapesWithImageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplaceAllShapesWithImageRequest();

            if (data.hasOwnProperty('containsText')) {
                obj['containsText'] = SubstringMatchCriteria.constructFromObject(data['containsText']);
            }
            if (data.hasOwnProperty('imageReplaceMethod')) {
                obj['imageReplaceMethod'] = ApiClient.convertToType(data['imageReplaceMethod'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('pageObjectIds')) {
                obj['pageObjectIds'] = ApiClient.convertToType(data['pageObjectIds'], ['String']);
            }
            if (data.hasOwnProperty('replaceMethod')) {
                obj['replaceMethod'] = ApiClient.convertToType(data['replaceMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplaceAllShapesWithImageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplaceAllShapesWithImageRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `containsText`
        if (data['containsText']) { // data not null
          SubstringMatchCriteria.validateJSON(data['containsText']);
        }
        // ensure the json data is a string
        if (data['imageReplaceMethod'] && !(typeof data['imageReplaceMethod'] === 'string' || data['imageReplaceMethod'] instanceof String)) {
            throw new Error("Expected the field `imageReplaceMethod` to be a primitive type in the JSON string but got " + data['imageReplaceMethod']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageObjectIds'])) {
            throw new Error("Expected the field `pageObjectIds` to be an array in the JSON data but got " + data['pageObjectIds']);
        }
        // ensure the json data is a string
        if (data['replaceMethod'] && !(typeof data['replaceMethod'] === 'string' || data['replaceMethod'] instanceof String)) {
            throw new Error("Expected the field `replaceMethod` to be a primitive type in the JSON string but got " + data['replaceMethod']);
        }

        return true;
    }


}



/**
 * @member {module:model/SubstringMatchCriteria} containsText
 */
ReplaceAllShapesWithImageRequest.prototype['containsText'] = undefined;

/**
 * The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.
 * @member {module:model/ReplaceAllShapesWithImageRequest.ImageReplaceMethodEnum} imageReplaceMethod
 */
ReplaceAllShapesWithImageRequest.prototype['imageReplaceMethod'] = undefined;

/**
 * The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.
 * @member {String} imageUrl
 */
ReplaceAllShapesWithImageRequest.prototype['imageUrl'] = undefined;

/**
 * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
 * @member {Array.<String>} pageObjectIds
 */
ReplaceAllShapesWithImageRequest.prototype['pageObjectIds'] = undefined;

/**
 * The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.
 * @member {module:model/ReplaceAllShapesWithImageRequest.ReplaceMethodEnum} replaceMethod
 */
ReplaceAllShapesWithImageRequest.prototype['replaceMethod'] = undefined;





/**
 * Allowed values for the <code>imageReplaceMethod</code> property.
 * @enum {String}
 * @readonly
 */
ReplaceAllShapesWithImageRequest['ImageReplaceMethodEnum'] = {

    /**
     * value: "IMAGE_REPLACE_METHOD_UNSPECIFIED"
     * @const
     */
    "IMAGE_REPLACE_METHOD_UNSPECIFIED": "IMAGE_REPLACE_METHOD_UNSPECIFIED",

    /**
     * value: "CENTER_INSIDE"
     * @const
     */
    "CENTER_INSIDE": "CENTER_INSIDE",

    /**
     * value: "CENTER_CROP"
     * @const
     */
    "CENTER_CROP": "CENTER_CROP"
};


/**
 * Allowed values for the <code>replaceMethod</code> property.
 * @enum {String}
 * @readonly
 */
ReplaceAllShapesWithImageRequest['ReplaceMethodEnum'] = {

    /**
     * value: "CENTER_INSIDE"
     * @const
     */
    "INSIDE": "CENTER_INSIDE",

    /**
     * value: "CENTER_CROP"
     * @const
     */
    "CROP": "CENTER_CROP"
};



export default ReplaceAllShapesWithImageRequest;

