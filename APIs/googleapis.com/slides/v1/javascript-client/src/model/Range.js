/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Range model module.
 * @module model/Range
 * @version v1
 */
class Range {
    /**
     * Constructs a new <code>Range</code>.
     * Specifies a contiguous range of an indexed collection, such as characters in text.
     * @alias module:model/Range
     */
    constructor() { 
        
        Range.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Range</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Range} obj Optional instance to populate.
     * @return {module:model/Range} The populated <code>Range</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Range();

            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Range</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Range</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.
 * @member {Number} endIndex
 */
Range.prototype['endIndex'] = undefined;

/**
 * The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
 * @member {Number} startIndex
 */
Range.prototype['startIndex'] = undefined;

/**
 * The type of range.
 * @member {module:model/Range.TypeEnum} type
 */
Range.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Range['TypeEnum'] = {

    /**
     * value: "RANGE_TYPE_UNSPECIFIED"
     * @const
     */
    "RANGE_TYPE_UNSPECIFIED": "RANGE_TYPE_UNSPECIFIED",

    /**
     * value: "FIXED_RANGE"
     * @const
     */
    "FIXED_RANGE": "FIXED_RANGE",

    /**
     * value: "FROM_START_INDEX"
     * @const
     */
    "FROM_START_INDEX": "FROM_START_INDEX",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default Range;

