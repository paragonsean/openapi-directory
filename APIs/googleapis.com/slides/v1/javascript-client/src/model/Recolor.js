/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColorStop from './ColorStop';

/**
 * The Recolor model module.
 * @module model/Recolor
 * @version v1
 */
class Recolor {
    /**
     * Constructs a new <code>Recolor</code>.
     * A recolor effect applied on an image.
     * @alias module:model/Recolor
     */
    constructor() { 
        
        Recolor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Recolor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recolor} obj Optional instance to populate.
     * @return {module:model/Recolor} The populated <code>Recolor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recolor();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recolorStops')) {
                obj['recolorStops'] = ApiClient.convertToType(data['recolorStops'], [ColorStop]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recolor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recolor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['recolorStops']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recolorStops'])) {
                throw new Error("Expected the field `recolorStops` to be an array in the JSON data but got " + data['recolorStops']);
            }
            // validate the optional field `recolorStops` (array)
            for (const item of data['recolorStops']) {
                ColorStop.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.
 * @member {module:model/Recolor.NameEnum} name
 */
Recolor.prototype['name'] = undefined;

/**
 * The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.
 * @member {Array.<module:model/ColorStop>} recolorStops
 */
Recolor.prototype['recolorStops'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
Recolor['NameEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "LIGHT1"
     * @const
     */
    "LIGHT1": "LIGHT1",

    /**
     * value: "LIGHT2"
     * @const
     */
    "LIGHT2": "LIGHT2",

    /**
     * value: "LIGHT3"
     * @const
     */
    "LIGHT3": "LIGHT3",

    /**
     * value: "LIGHT4"
     * @const
     */
    "LIGHT4": "LIGHT4",

    /**
     * value: "LIGHT5"
     * @const
     */
    "LIGHT5": "LIGHT5",

    /**
     * value: "LIGHT6"
     * @const
     */
    "LIGHT6": "LIGHT6",

    /**
     * value: "LIGHT7"
     * @const
     */
    "LIGHT7": "LIGHT7",

    /**
     * value: "LIGHT8"
     * @const
     */
    "LIGHT8": "LIGHT8",

    /**
     * value: "LIGHT9"
     * @const
     */
    "LIGHT9": "LIGHT9",

    /**
     * value: "LIGHT10"
     * @const
     */
    "LIGHT10": "LIGHT10",

    /**
     * value: "DARK1"
     * @const
     */
    "DARK1": "DARK1",

    /**
     * value: "DARK2"
     * @const
     */
    "DARK2": "DARK2",

    /**
     * value: "DARK3"
     * @const
     */
    "DARK3": "DARK3",

    /**
     * value: "DARK4"
     * @const
     */
    "DARK4": "DARK4",

    /**
     * value: "DARK5"
     * @const
     */
    "DARK5": "DARK5",

    /**
     * value: "DARK6"
     * @const
     */
    "DARK6": "DARK6",

    /**
     * value: "DARK7"
     * @const
     */
    "DARK7": "DARK7",

    /**
     * value: "DARK8"
     * @const
     */
    "DARK8": "DARK8",

    /**
     * value: "DARK9"
     * @const
     */
    "DARK9": "DARK9",

    /**
     * value: "DARK10"
     * @const
     */
    "DARK10": "DARK10",

    /**
     * value: "GRAYSCALE"
     * @const
     */
    "GRAYSCALE": "GRAYSCALE",

    /**
     * value: "NEGATIVE"
     * @const
     */
    "NEGATIVE": "NEGATIVE",

    /**
     * value: "SEPIA"
     * @const
     */
    "SEPIA": "SEPIA",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default Recolor;

