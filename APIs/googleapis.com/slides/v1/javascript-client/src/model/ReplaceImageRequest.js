/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReplaceImageRequest model module.
 * @module model/ReplaceImageRequest
 * @version v1
 */
class ReplaceImageRequest {
    /**
     * Constructs a new <code>ReplaceImageRequest</code>.
     * Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image.
     * @alias module:model/ReplaceImageRequest
     */
    constructor() { 
        
        ReplaceImageRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplaceImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplaceImageRequest} obj Optional instance to populate.
     * @return {module:model/ReplaceImageRequest} The populated <code>ReplaceImageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplaceImageRequest();

            if (data.hasOwnProperty('imageObjectId')) {
                obj['imageObjectId'] = ApiClient.convertToType(data['imageObjectId'], 'String');
            }
            if (data.hasOwnProperty('imageReplaceMethod')) {
                obj['imageReplaceMethod'] = ApiClient.convertToType(data['imageReplaceMethod'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplaceImageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplaceImageRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageObjectId'] && !(typeof data['imageObjectId'] === 'string' || data['imageObjectId'] instanceof String)) {
            throw new Error("Expected the field `imageObjectId` to be a primitive type in the JSON string but got " + data['imageObjectId']);
        }
        // ensure the json data is a string
        if (data['imageReplaceMethod'] && !(typeof data['imageReplaceMethod'] === 'string' || data['imageReplaceMethod'] instanceof String)) {
            throw new Error("Expected the field `imageReplaceMethod` to be a primitive type in the JSON string but got " + data['imageReplaceMethod']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
 * @member {String} imageObjectId
 */
ReplaceImageRequest.prototype['imageObjectId'] = undefined;

/**
 * The replacement method.
 * @member {module:model/ReplaceImageRequest.ImageReplaceMethodEnum} imageReplaceMethod
 */
ReplaceImageRequest.prototype['imageReplaceMethod'] = undefined;

/**
 * The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URL can't surpass 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
 * @member {String} url
 */
ReplaceImageRequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>imageReplaceMethod</code> property.
 * @enum {String}
 * @readonly
 */
ReplaceImageRequest['ImageReplaceMethodEnum'] = {

    /**
     * value: "IMAGE_REPLACE_METHOD_UNSPECIFIED"
     * @const
     */
    "IMAGE_REPLACE_METHOD_UNSPECIFIED": "IMAGE_REPLACE_METHOD_UNSPECIFIED",

    /**
     * value: "CENTER_INSIDE"
     * @const
     */
    "CENTER_INSIDE": "CENTER_INSIDE",

    /**
     * value: "CENTER_CROP"
     * @const
     */
    "CENTER_CROP": "CENTER_CROP"
};



export default ReplaceImageRequest;

