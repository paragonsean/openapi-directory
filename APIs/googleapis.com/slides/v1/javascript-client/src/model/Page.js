/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LayoutProperties from './LayoutProperties';
import MasterProperties from './MasterProperties';
import NotesProperties from './NotesProperties';
import PageElement from './PageElement';
import PageProperties from './PageProperties';
import SlideProperties from './SlideProperties';

/**
 * The Page model module.
 * @module model/Page
 * @version v1
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * A page in a presentation.
     * @alias module:model/Page
     */
    constructor() { 
        
        Page.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Page} obj Optional instance to populate.
     * @return {module:model/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();

            if (data.hasOwnProperty('layoutProperties')) {
                obj['layoutProperties'] = LayoutProperties.constructFromObject(data['layoutProperties']);
            }
            if (data.hasOwnProperty('masterProperties')) {
                obj['masterProperties'] = MasterProperties.constructFromObject(data['masterProperties']);
            }
            if (data.hasOwnProperty('notesProperties')) {
                obj['notesProperties'] = NotesProperties.constructFromObject(data['notesProperties']);
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('pageElements')) {
                obj['pageElements'] = ApiClient.convertToType(data['pageElements'], [PageElement]);
            }
            if (data.hasOwnProperty('pageProperties')) {
                obj['pageProperties'] = PageProperties.constructFromObject(data['pageProperties']);
            }
            if (data.hasOwnProperty('pageType')) {
                obj['pageType'] = ApiClient.convertToType(data['pageType'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('slideProperties')) {
                obj['slideProperties'] = SlideProperties.constructFromObject(data['slideProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        // validate the optional field `layoutProperties`
        if (data['layoutProperties']) { // data not null
          LayoutProperties.validateJSON(data['layoutProperties']);
        }
        // validate the optional field `masterProperties`
        if (data['masterProperties']) { // data not null
          MasterProperties.validateJSON(data['masterProperties']);
        }
        // validate the optional field `notesProperties`
        if (data['notesProperties']) { // data not null
          NotesProperties.validateJSON(data['notesProperties']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        if (data['pageElements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pageElements'])) {
                throw new Error("Expected the field `pageElements` to be an array in the JSON data but got " + data['pageElements']);
            }
            // validate the optional field `pageElements` (array)
            for (const item of data['pageElements']) {
                PageElement.validateJSON(item);
            };
        }
        // validate the optional field `pageProperties`
        if (data['pageProperties']) { // data not null
          PageProperties.validateJSON(data['pageProperties']);
        }
        // ensure the json data is a string
        if (data['pageType'] && !(typeof data['pageType'] === 'string' || data['pageType'] instanceof String)) {
            throw new Error("Expected the field `pageType` to be a primitive type in the JSON string but got " + data['pageType']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // validate the optional field `slideProperties`
        if (data['slideProperties']) { // data not null
          SlideProperties.validateJSON(data['slideProperties']);
        }

        return true;
    }


}



/**
 * @member {module:model/LayoutProperties} layoutProperties
 */
Page.prototype['layoutProperties'] = undefined;

/**
 * @member {module:model/MasterProperties} masterProperties
 */
Page.prototype['masterProperties'] = undefined;

/**
 * @member {module:model/NotesProperties} notesProperties
 */
Page.prototype['notesProperties'] = undefined;

/**
 * The object ID for this page. Object IDs used by Page and PageElement share the same namespace.
 * @member {String} objectId
 */
Page.prototype['objectId'] = undefined;

/**
 * The page elements rendered on the page.
 * @member {Array.<module:model/PageElement>} pageElements
 */
Page.prototype['pageElements'] = undefined;

/**
 * @member {module:model/PageProperties} pageProperties
 */
Page.prototype['pageProperties'] = undefined;

/**
 * The type of the page.
 * @member {module:model/Page.PageTypeEnum} pageType
 */
Page.prototype['pageType'] = undefined;

/**
 * Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
 * @member {String} revisionId
 */
Page.prototype['revisionId'] = undefined;

/**
 * @member {module:model/SlideProperties} slideProperties
 */
Page.prototype['slideProperties'] = undefined;





/**
 * Allowed values for the <code>pageType</code> property.
 * @enum {String}
 * @readonly
 */
Page['PageTypeEnum'] = {

    /**
     * value: "SLIDE"
     * @const
     */
    "SLIDE": "SLIDE",

    /**
     * value: "MASTER"
     * @const
     */
    "MASTER": "MASTER",

    /**
     * value: "LAYOUT"
     * @const
     */
    "LAYOUT": "LAYOUT",

    /**
     * value: "NOTES"
     * @const
     */
    "NOTES": "NOTES",

    /**
     * value: "NOTES_MASTER"
     * @const
     */
    "NOTES_MASTER": "NOTES_MASTER"
};



export default Page;

