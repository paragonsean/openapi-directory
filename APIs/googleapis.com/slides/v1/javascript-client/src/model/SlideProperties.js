/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Page from './Page';

/**
 * The SlideProperties model module.
 * @module model/SlideProperties
 * @version v1
 */
class SlideProperties {
    /**
     * Constructs a new <code>SlideProperties</code>.
     * The properties of Page that are only relevant for pages with page_type SLIDE.
     * @alias module:model/SlideProperties
     */
    constructor() { 
        
        SlideProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideProperties} obj Optional instance to populate.
     * @return {module:model/SlideProperties} The populated <code>SlideProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideProperties();

            if (data.hasOwnProperty('isSkipped')) {
                obj['isSkipped'] = ApiClient.convertToType(data['isSkipped'], 'Boolean');
            }
            if (data.hasOwnProperty('layoutObjectId')) {
                obj['layoutObjectId'] = ApiClient.convertToType(data['layoutObjectId'], 'String');
            }
            if (data.hasOwnProperty('masterObjectId')) {
                obj['masterObjectId'] = ApiClient.convertToType(data['masterObjectId'], 'String');
            }
            if (data.hasOwnProperty('notesPage')) {
                obj['notesPage'] = Page.constructFromObject(data['notesPage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['layoutObjectId'] && !(typeof data['layoutObjectId'] === 'string' || data['layoutObjectId'] instanceof String)) {
            throw new Error("Expected the field `layoutObjectId` to be a primitive type in the JSON string but got " + data['layoutObjectId']);
        }
        // ensure the json data is a string
        if (data['masterObjectId'] && !(typeof data['masterObjectId'] === 'string' || data['masterObjectId'] instanceof String)) {
            throw new Error("Expected the field `masterObjectId` to be a primitive type in the JSON string but got " + data['masterObjectId']);
        }
        // validate the optional field `notesPage`
        if (data['notesPage']) { // data not null
          Page.validateJSON(data['notesPage']);
        }

        return true;
    }


}



/**
 * Whether the slide is skipped in the presentation mode. Defaults to false.
 * @member {Boolean} isSkipped
 */
SlideProperties.prototype['isSkipped'] = undefined;

/**
 * The object ID of the layout that this slide is based on. This property is read-only.
 * @member {String} layoutObjectId
 */
SlideProperties.prototype['layoutObjectId'] = undefined;

/**
 * The object ID of the master that this slide is based on. This property is read-only.
 * @member {String} masterObjectId
 */
SlideProperties.prototype['masterObjectId'] = undefined;

/**
 * @member {module:model/Page} notesPage
 */
SlideProperties.prototype['notesPage'] = undefined;






export default SlideProperties;

