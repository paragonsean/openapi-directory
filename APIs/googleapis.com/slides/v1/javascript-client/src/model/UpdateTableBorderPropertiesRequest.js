/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableBorderProperties from './TableBorderProperties';
import TableRange from './TableRange';

/**
 * The UpdateTableBorderPropertiesRequest model module.
 * @module model/UpdateTableBorderPropertiesRequest
 * @version v1
 */
class UpdateTableBorderPropertiesRequest {
    /**
     * Constructs a new <code>UpdateTableBorderPropertiesRequest</code>.
     * Updates the properties of the table borders in a Table.
     * @alias module:model/UpdateTableBorderPropertiesRequest
     */
    constructor() { 
        
        UpdateTableBorderPropertiesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateTableBorderPropertiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTableBorderPropertiesRequest} obj Optional instance to populate.
     * @return {module:model/UpdateTableBorderPropertiesRequest} The populated <code>UpdateTableBorderPropertiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTableBorderPropertiesRequest();

            if (data.hasOwnProperty('borderPosition')) {
                obj['borderPosition'] = ApiClient.convertToType(data['borderPosition'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('tableBorderProperties')) {
                obj['tableBorderProperties'] = TableBorderProperties.constructFromObject(data['tableBorderProperties']);
            }
            if (data.hasOwnProperty('tableRange')) {
                obj['tableRange'] = TableRange.constructFromObject(data['tableRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateTableBorderPropertiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateTableBorderPropertiesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['borderPosition'] && !(typeof data['borderPosition'] === 'string' || data['borderPosition'] instanceof String)) {
            throw new Error("Expected the field `borderPosition` to be a primitive type in the JSON string but got " + data['borderPosition']);
        }
        // ensure the json data is a string
        if (data['fields'] && !(typeof data['fields'] === 'string' || data['fields'] instanceof String)) {
            throw new Error("Expected the field `fields` to be a primitive type in the JSON string but got " + data['fields']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // validate the optional field `tableBorderProperties`
        if (data['tableBorderProperties']) { // data not null
          TableBorderProperties.validateJSON(data['tableBorderProperties']);
        }
        // validate the optional field `tableRange`
        if (data['tableRange']) { // data not null
          TableRange.validateJSON(data['tableRange']);
        }

        return true;
    }


}



/**
 * The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
 * @member {module:model/UpdateTableBorderPropertiesRequest.BorderPositionEnum} borderPosition
 */
UpdateTableBorderPropertiesRequest.prototype['borderPosition'] = undefined;

/**
 * The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `\"tableBorderFill.solidFill.color\"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
 * @member {String} fields
 */
UpdateTableBorderPropertiesRequest.prototype['fields'] = undefined;

/**
 * The object ID of the table.
 * @member {String} objectId
 */
UpdateTableBorderPropertiesRequest.prototype['objectId'] = undefined;

/**
 * @member {module:model/TableBorderProperties} tableBorderProperties
 */
UpdateTableBorderPropertiesRequest.prototype['tableBorderProperties'] = undefined;

/**
 * @member {module:model/TableRange} tableRange
 */
UpdateTableBorderPropertiesRequest.prototype['tableRange'] = undefined;





/**
 * Allowed values for the <code>borderPosition</code> property.
 * @enum {String}
 * @readonly
 */
UpdateTableBorderPropertiesRequest['BorderPositionEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM",

    /**
     * value: "INNER"
     * @const
     */
    "INNER": "INNER",

    /**
     * value: "INNER_HORIZONTAL"
     * @const
     */
    "INNER_HORIZONTAL": "INNER_HORIZONTAL",

    /**
     * value: "INNER_VERTICAL"
     * @const
     */
    "INNER_VERTICAL": "INNER_VERTICAL",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "OUTER"
     * @const
     */
    "OUTER": "OUTER",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP"
};



export default UpdateTableBorderPropertiesRequest;

