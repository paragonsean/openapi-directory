/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PageElementProperties from './PageElementProperties';

/**
 * The CreateLineRequest model module.
 * @module model/CreateLineRequest
 * @version v1
 */
class CreateLineRequest {
    /**
     * Constructs a new <code>CreateLineRequest</code>.
     * Creates a line.
     * @alias module:model/CreateLineRequest
     */
    constructor() { 
        
        CreateLineRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateLineRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLineRequest} obj Optional instance to populate.
     * @return {module:model/CreateLineRequest} The populated <code>CreateLineRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLineRequest();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('elementProperties')) {
                obj['elementProperties'] = PageElementProperties.constructFromObject(data['elementProperties']);
            }
            if (data.hasOwnProperty('lineCategory')) {
                obj['lineCategory'] = ApiClient.convertToType(data['lineCategory'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLineRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLineRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `elementProperties`
        if (data['elementProperties']) { // data not null
          PageElementProperties.validateJSON(data['elementProperties']);
        }
        // ensure the json data is a string
        if (data['lineCategory'] && !(typeof data['lineCategory'] === 'string' || data['lineCategory'] instanceof String)) {
            throw new Error("Expected the field `lineCategory` to be a primitive type in the JSON string but got " + data['lineCategory']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }

        return true;
    }


}



/**
 * The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.
 * @member {module:model/CreateLineRequest.CategoryEnum} category
 */
CreateLineRequest.prototype['category'] = undefined;

/**
 * @member {module:model/PageElementProperties} elementProperties
 */
CreateLineRequest.prototype['elementProperties'] = undefined;

/**
 * The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.
 * @member {module:model/CreateLineRequest.LineCategoryEnum} lineCategory
 */
CreateLineRequest.prototype['lineCategory'] = undefined;

/**
 * A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
 * @member {String} objectId
 */
CreateLineRequest.prototype['objectId'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
CreateLineRequest['CategoryEnum'] = {

    /**
     * value: "LINE_CATEGORY_UNSPECIFIED"
     * @const
     */
    "LINE_CATEGORY_UNSPECIFIED": "LINE_CATEGORY_UNSPECIFIED",

    /**
     * value: "STRAIGHT"
     * @const
     */
    "STRAIGHT": "STRAIGHT",

    /**
     * value: "BENT"
     * @const
     */
    "BENT": "BENT",

    /**
     * value: "CURVED"
     * @const
     */
    "CURVED": "CURVED"
};


/**
 * Allowed values for the <code>lineCategory</code> property.
 * @enum {String}
 * @readonly
 */
CreateLineRequest['LineCategoryEnum'] = {

    /**
     * value: "STRAIGHT"
     * @const
     */
    "STRAIGHT": "STRAIGHT",

    /**
     * value: "BENT"
     * @const
     */
    "BENT": "BENT",

    /**
     * value: "CURVED"
     * @const
     */
    "CURVED": "CURVED"
};



export default CreateLineRequest;

