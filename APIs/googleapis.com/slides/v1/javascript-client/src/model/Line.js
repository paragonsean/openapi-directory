/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LineProperties from './LineProperties';

/**
 * The Line model module.
 * @module model/Line
 * @version v1
 */
class Line {
    /**
     * Constructs a new <code>Line</code>.
     * A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
     * @alias module:model/Line
     */
    constructor() { 
        
        Line.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Line</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Line} obj Optional instance to populate.
     * @return {module:model/Line} The populated <code>Line</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Line();

            if (data.hasOwnProperty('lineCategory')) {
                obj['lineCategory'] = ApiClient.convertToType(data['lineCategory'], 'String');
            }
            if (data.hasOwnProperty('lineProperties')) {
                obj['lineProperties'] = LineProperties.constructFromObject(data['lineProperties']);
            }
            if (data.hasOwnProperty('lineType')) {
                obj['lineType'] = ApiClient.convertToType(data['lineType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Line</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Line</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lineCategory'] && !(typeof data['lineCategory'] === 'string' || data['lineCategory'] instanceof String)) {
            throw new Error("Expected the field `lineCategory` to be a primitive type in the JSON string but got " + data['lineCategory']);
        }
        // validate the optional field `lineProperties`
        if (data['lineProperties']) { // data not null
          LineProperties.validateJSON(data['lineProperties']);
        }
        // ensure the json data is a string
        if (data['lineType'] && !(typeof data['lineType'] === 'string' || data['lineType'] instanceof String)) {
            throw new Error("Expected the field `lineType` to be a primitive type in the JSON string but got " + data['lineType']);
        }

        return true;
    }


}



/**
 * The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
 * @member {module:model/Line.LineCategoryEnum} lineCategory
 */
Line.prototype['lineCategory'] = undefined;

/**
 * @member {module:model/LineProperties} lineProperties
 */
Line.prototype['lineProperties'] = undefined;

/**
 * The type of the line.
 * @member {module:model/Line.LineTypeEnum} lineType
 */
Line.prototype['lineType'] = undefined;





/**
 * Allowed values for the <code>lineCategory</code> property.
 * @enum {String}
 * @readonly
 */
Line['LineCategoryEnum'] = {

    /**
     * value: "LINE_CATEGORY_UNSPECIFIED"
     * @const
     */
    "LINE_CATEGORY_UNSPECIFIED": "LINE_CATEGORY_UNSPECIFIED",

    /**
     * value: "STRAIGHT"
     * @const
     */
    "STRAIGHT": "STRAIGHT",

    /**
     * value: "BENT"
     * @const
     */
    "BENT": "BENT",

    /**
     * value: "CURVED"
     * @const
     */
    "CURVED": "CURVED"
};


/**
 * Allowed values for the <code>lineType</code> property.
 * @enum {String}
 * @readonly
 */
Line['LineTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "STRAIGHT_CONNECTOR_1"
     * @const
     */
    "STRAIGHT_CONNECTOR_1": "STRAIGHT_CONNECTOR_1",

    /**
     * value: "BENT_CONNECTOR_2"
     * @const
     */
    "BENT_CONNECTOR_2": "BENT_CONNECTOR_2",

    /**
     * value: "BENT_CONNECTOR_3"
     * @const
     */
    "BENT_CONNECTOR_3": "BENT_CONNECTOR_3",

    /**
     * value: "BENT_CONNECTOR_4"
     * @const
     */
    "BENT_CONNECTOR_4": "BENT_CONNECTOR_4",

    /**
     * value: "BENT_CONNECTOR_5"
     * @const
     */
    "BENT_CONNECTOR_5": "BENT_CONNECTOR_5",

    /**
     * value: "CURVED_CONNECTOR_2"
     * @const
     */
    "CURVED_CONNECTOR_2": "CURVED_CONNECTOR_2",

    /**
     * value: "CURVED_CONNECTOR_3"
     * @const
     */
    "CURVED_CONNECTOR_3": "CURVED_CONNECTOR_3",

    /**
     * value: "CURVED_CONNECTOR_4"
     * @const
     */
    "CURVED_CONNECTOR_4": "CURVED_CONNECTOR_4",

    /**
     * value: "CURVED_CONNECTOR_5"
     * @const
     */
    "CURVED_CONNECTOR_5": "CURVED_CONNECTOR_5",

    /**
     * value: "STRAIGHT_LINE"
     * @const
     */
    "STRAIGHT_LINE": "STRAIGHT_LINE"
};



export default Line;

