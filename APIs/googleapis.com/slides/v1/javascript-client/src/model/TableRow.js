/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import TableCell from './TableCell';
import TableRowProperties from './TableRowProperties';

/**
 * The TableRow model module.
 * @module model/TableRow
 * @version v1
 */
class TableRow {
    /**
     * Constructs a new <code>TableRow</code>.
     * Properties and contents of each row in a table.
     * @alias module:model/TableRow
     */
    constructor() { 
        
        TableRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableRow} obj Optional instance to populate.
     * @return {module:model/TableRow} The populated <code>TableRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableRow();

            if (data.hasOwnProperty('rowHeight')) {
                obj['rowHeight'] = Dimension.constructFromObject(data['rowHeight']);
            }
            if (data.hasOwnProperty('tableCells')) {
                obj['tableCells'] = ApiClient.convertToType(data['tableCells'], [TableCell]);
            }
            if (data.hasOwnProperty('tableRowProperties')) {
                obj['tableRowProperties'] = TableRowProperties.constructFromObject(data['tableRowProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableRow</code>.
     */
    static validateJSON(data) {
        // validate the optional field `rowHeight`
        if (data['rowHeight']) { // data not null
          Dimension.validateJSON(data['rowHeight']);
        }
        if (data['tableCells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tableCells'])) {
                throw new Error("Expected the field `tableCells` to be an array in the JSON data but got " + data['tableCells']);
            }
            // validate the optional field `tableCells` (array)
            for (const item of data['tableCells']) {
                TableCell.validateJSON(item);
            };
        }
        // validate the optional field `tableRowProperties`
        if (data['tableRowProperties']) { // data not null
          TableRowProperties.validateJSON(data['tableRowProperties']);
        }

        return true;
    }


}



/**
 * @member {module:model/Dimension} rowHeight
 */
TableRow.prototype['rowHeight'] = undefined;

/**
 * Properties and contents of each cell. Cells that span multiple columns are represented only once with a column_span greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.
 * @member {Array.<module:model/TableCell>} tableCells
 */
TableRow.prototype['tableCells'] = undefined;

/**
 * @member {module:model/TableRowProperties} tableRowProperties
 */
TableRow.prototype['tableRowProperties'] = undefined;






export default TableRow;

