/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PageElementProperties from './PageElementProperties';

/**
 * The CreateSheetsChartRequest model module.
 * @module model/CreateSheetsChartRequest
 * @version v1
 */
class CreateSheetsChartRequest {
    /**
     * Constructs a new <code>CreateSheetsChartRequest</code>.
     * Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
     * @alias module:model/CreateSheetsChartRequest
     */
    constructor() { 
        
        CreateSheetsChartRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateSheetsChartRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSheetsChartRequest} obj Optional instance to populate.
     * @return {module:model/CreateSheetsChartRequest} The populated <code>CreateSheetsChartRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSheetsChartRequest();

            if (data.hasOwnProperty('chartId')) {
                obj['chartId'] = ApiClient.convertToType(data['chartId'], 'Number');
            }
            if (data.hasOwnProperty('elementProperties')) {
                obj['elementProperties'] = PageElementProperties.constructFromObject(data['elementProperties']);
            }
            if (data.hasOwnProperty('linkingMode')) {
                obj['linkingMode'] = ApiClient.convertToType(data['linkingMode'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('spreadsheetId')) {
                obj['spreadsheetId'] = ApiClient.convertToType(data['spreadsheetId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSheetsChartRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSheetsChartRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `elementProperties`
        if (data['elementProperties']) { // data not null
          PageElementProperties.validateJSON(data['elementProperties']);
        }
        // ensure the json data is a string
        if (data['linkingMode'] && !(typeof data['linkingMode'] === 'string' || data['linkingMode'] instanceof String)) {
            throw new Error("Expected the field `linkingMode` to be a primitive type in the JSON string but got " + data['linkingMode']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['spreadsheetId'] && !(typeof data['spreadsheetId'] === 'string' || data['spreadsheetId'] instanceof String)) {
            throw new Error("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got " + data['spreadsheetId']);
        }

        return true;
    }


}



/**
 * The ID of the specific chart in the Google Sheets spreadsheet.
 * @member {Number} chartId
 */
CreateSheetsChartRequest.prototype['chartId'] = undefined;

/**
 * @member {module:model/PageElementProperties} elementProperties
 */
CreateSheetsChartRequest.prototype['elementProperties'] = undefined;

/**
 * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
 * @member {module:model/CreateSheetsChartRequest.LinkingModeEnum} linkingMode
 */
CreateSheetsChartRequest.prototype['linkingMode'] = undefined;

/**
 * A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
 * @member {String} objectId
 */
CreateSheetsChartRequest.prototype['objectId'] = undefined;

/**
 * The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
 * @member {String} spreadsheetId
 */
CreateSheetsChartRequest.prototype['spreadsheetId'] = undefined;





/**
 * Allowed values for the <code>linkingMode</code> property.
 * @enum {String}
 * @readonly
 */
CreateSheetsChartRequest['LinkingModeEnum'] = {

    /**
     * value: "NOT_LINKED_IMAGE"
     * @const
     */
    "NOT_LINKED_IMAGE": "NOT_LINKED_IMAGE",

    /**
     * value: "LINKED"
     * @const
     */
    "LINKED": "LINKED"
};



export default CreateSheetsChartRequest;

