/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LineConnection model module.
 * @module model/LineConnection
 * @version v1
 */
class LineConnection {
    /**
     * Constructs a new <code>LineConnection</code>.
     * The properties for one end of a Line connection.
     * @alias module:model/LineConnection
     */
    constructor() { 
        
        LineConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineConnection} obj Optional instance to populate.
     * @return {module:model/LineConnection} The populated <code>LineConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineConnection();

            if (data.hasOwnProperty('connectedObjectId')) {
                obj['connectedObjectId'] = ApiClient.convertToType(data['connectedObjectId'], 'String');
            }
            if (data.hasOwnProperty('connectionSiteIndex')) {
                obj['connectionSiteIndex'] = ApiClient.convertToType(data['connectionSiteIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectedObjectId'] && !(typeof data['connectedObjectId'] === 'string' || data['connectedObjectId'] instanceof String)) {
            throw new Error("Expected the field `connectedObjectId` to be a primitive type in the JSON string but got " + data['connectedObjectId']);
        }

        return true;
    }


}



/**
 * The object ID of the connected page element. Some page elements, such as groups, tables, and lines do not have connection sites and therefore cannot be connected to a connector line.
 * @member {String} connectedObjectId
 */
LineConnection.prototype['connectedObjectId'] = undefined;

/**
 * The index of the connection site on the connected page element. In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the \"cnx\" attribute in section 20.1.9.9 and Annex H. \"Predefined DrawingML Shape and Text Geometries\" of \"Office Open XML File Formats-Fundamentals and Markup Language Reference\", part 1 of [ECMA-376 5th edition] (http://www.ecma-international.org/publications/standards/Ecma-376.htm). The position of each connection site can also be viewed from Slides editor.
 * @member {Number} connectionSiteIndex
 */
LineConnection.prototype['connectionSiteIndex'] = undefined;






export default LineConnection;

