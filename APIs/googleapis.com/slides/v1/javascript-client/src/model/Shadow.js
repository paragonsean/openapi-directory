/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffineTransform from './AffineTransform';
import Dimension from './Dimension';
import OpaqueColor from './OpaqueColor';

/**
 * The Shadow model module.
 * @module model/Shadow
 * @version v1
 */
class Shadow {
    /**
     * Constructs a new <code>Shadow</code>.
     * The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
     * @alias module:model/Shadow
     */
    constructor() { 
        
        Shadow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Shadow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shadow} obj Optional instance to populate.
     * @return {module:model/Shadow} The populated <code>Shadow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shadow();

            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
            if (data.hasOwnProperty('alpha')) {
                obj['alpha'] = ApiClient.convertToType(data['alpha'], 'Number');
            }
            if (data.hasOwnProperty('blurRadius')) {
                obj['blurRadius'] = Dimension.constructFromObject(data['blurRadius']);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = OpaqueColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('propertyState')) {
                obj['propertyState'] = ApiClient.convertToType(data['propertyState'], 'String');
            }
            if (data.hasOwnProperty('rotateWithShape')) {
                obj['rotateWithShape'] = ApiClient.convertToType(data['rotateWithShape'], 'Boolean');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = AffineTransform.constructFromObject(data['transform']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shadow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shadow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alignment'] && !(typeof data['alignment'] === 'string' || data['alignment'] instanceof String)) {
            throw new Error("Expected the field `alignment` to be a primitive type in the JSON string but got " + data['alignment']);
        }
        // validate the optional field `blurRadius`
        if (data['blurRadius']) { // data not null
          Dimension.validateJSON(data['blurRadius']);
        }
        // validate the optional field `color`
        if (data['color']) { // data not null
          OpaqueColor.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['propertyState'] && !(typeof data['propertyState'] === 'string' || data['propertyState'] instanceof String)) {
            throw new Error("Expected the field `propertyState` to be a primitive type in the JSON string but got " + data['propertyState']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          AffineTransform.validateJSON(data['transform']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
 * @member {module:model/Shadow.AlignmentEnum} alignment
 */
Shadow.prototype['alignment'] = undefined;

/**
 * The alpha of the shadow's color, from 0.0 to 1.0.
 * @member {Number} alpha
 */
Shadow.prototype['alpha'] = undefined;

/**
 * @member {module:model/Dimension} blurRadius
 */
Shadow.prototype['blurRadius'] = undefined;

/**
 * @member {module:model/OpaqueColor} color
 */
Shadow.prototype['color'] = undefined;

/**
 * The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
 * @member {module:model/Shadow.PropertyStateEnum} propertyState
 */
Shadow.prototype['propertyState'] = undefined;

/**
 * Whether the shadow should rotate with the shape. This property is read-only.
 * @member {Boolean} rotateWithShape
 */
Shadow.prototype['rotateWithShape'] = undefined;

/**
 * @member {module:model/AffineTransform} transform
 */
Shadow.prototype['transform'] = undefined;

/**
 * The type of the shadow. This property is read-only.
 * @member {module:model/Shadow.TypeEnum} type
 */
Shadow.prototype['type'] = undefined;





/**
 * Allowed values for the <code>alignment</code> property.
 * @enum {String}
 * @readonly
 */
Shadow['AlignmentEnum'] = {

    /**
     * value: "RECTANGLE_POSITION_UNSPECIFIED"
     * @const
     */
    "RECTANGLE_POSITION_UNSPECIFIED": "RECTANGLE_POSITION_UNSPECIFIED",

    /**
     * value: "TOP_LEFT"
     * @const
     */
    "TOP_LEFT": "TOP_LEFT",

    /**
     * value: "TOP_CENTER"
     * @const
     */
    "TOP_CENTER": "TOP_CENTER",

    /**
     * value: "TOP_RIGHT"
     * @const
     */
    "TOP_RIGHT": "TOP_RIGHT",

    /**
     * value: "LEFT_CENTER"
     * @const
     */
    "LEFT_CENTER": "LEFT_CENTER",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "RIGHT_CENTER"
     * @const
     */
    "RIGHT_CENTER": "RIGHT_CENTER",

    /**
     * value: "BOTTOM_LEFT"
     * @const
     */
    "BOTTOM_LEFT": "BOTTOM_LEFT",

    /**
     * value: "BOTTOM_CENTER"
     * @const
     */
    "BOTTOM_CENTER": "BOTTOM_CENTER",

    /**
     * value: "BOTTOM_RIGHT"
     * @const
     */
    "BOTTOM_RIGHT": "BOTTOM_RIGHT"
};


/**
 * Allowed values for the <code>propertyState</code> property.
 * @enum {String}
 * @readonly
 */
Shadow['PropertyStateEnum'] = {

    /**
     * value: "RENDERED"
     * @const
     */
    "RENDERED": "RENDERED",

    /**
     * value: "NOT_RENDERED"
     * @const
     */
    "NOT_RENDERED": "NOT_RENDERED",

    /**
     * value: "INHERIT"
     * @const
     */
    "INHERIT": "INHERIT"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Shadow['TypeEnum'] = {

    /**
     * value: "SHADOW_TYPE_UNSPECIFIED"
     * @const
     */
    "SHADOW_TYPE_UNSPECIFIED": "SHADOW_TYPE_UNSPECIFIED",

    /**
     * value: "OUTER"
     * @const
     */
    "OUTER": "OUTER"
};



export default Shadow;

