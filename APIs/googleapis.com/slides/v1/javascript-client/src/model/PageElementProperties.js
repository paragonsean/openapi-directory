/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffineTransform from './AffineTransform';
import Size from './Size';

/**
 * The PageElementProperties model module.
 * @module model/PageElementProperties
 * @version v1
 */
class PageElementProperties {
    /**
     * Constructs a new <code>PageElementProperties</code>.
     * Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both &#x60;size&#x60; and &#x60;transform&#x60;, but the visual size will be unchanged.
     * @alias module:model/PageElementProperties
     */
    constructor() { 
        
        PageElementProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageElementProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageElementProperties} obj Optional instance to populate.
     * @return {module:model/PageElementProperties} The populated <code>PageElementProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageElementProperties();

            if (data.hasOwnProperty('pageObjectId')) {
                obj['pageObjectId'] = ApiClient.convertToType(data['pageObjectId'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = AffineTransform.constructFromObject(data['transform']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageElementProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageElementProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pageObjectId'] && !(typeof data['pageObjectId'] === 'string' || data['pageObjectId'] instanceof String)) {
            throw new Error("Expected the field `pageObjectId` to be a primitive type in the JSON string but got " + data['pageObjectId']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          AffineTransform.validateJSON(data['transform']);
        }

        return true;
    }


}



/**
 * The object ID of the page where the element is located.
 * @member {String} pageObjectId
 */
PageElementProperties.prototype['pageObjectId'] = undefined;

/**
 * @member {module:model/Size} size
 */
PageElementProperties.prototype['size'] = undefined;

/**
 * @member {module:model/AffineTransform} transform
 */
PageElementProperties.prototype['transform'] = undefined;






export default PageElementProperties;

