/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupObjectsRequest model module.
 * @module model/GroupObjectsRequest
 * @version v1
 */
class GroupObjectsRequest {
    /**
     * Constructs a new <code>GroupObjectsRequest</code>.
     * Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
     * @alias module:model/GroupObjectsRequest
     */
    constructor() { 
        
        GroupObjectsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupObjectsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupObjectsRequest} obj Optional instance to populate.
     * @return {module:model/GroupObjectsRequest} The populated <code>GroupObjectsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupObjectsRequest();

            if (data.hasOwnProperty('childrenObjectIds')) {
                obj['childrenObjectIds'] = ApiClient.convertToType(data['childrenObjectIds'], ['String']);
            }
            if (data.hasOwnProperty('groupObjectId')) {
                obj['groupObjectId'] = ApiClient.convertToType(data['groupObjectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupObjectsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupObjectsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['childrenObjectIds'])) {
            throw new Error("Expected the field `childrenObjectIds` to be an array in the JSON data but got " + data['childrenObjectIds']);
        }
        // ensure the json data is a string
        if (data['groupObjectId'] && !(typeof data['groupObjectId'] === 'string' || data['groupObjectId'] instanceof String)) {
            throw new Error("Expected the field `groupObjectId` to be a primitive type in the JSON string but got " + data['groupObjectId']);
        }

        return true;
    }


}



/**
 * The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.
 * @member {Array.<String>} childrenObjectIds
 */
GroupObjectsRequest.prototype['childrenObjectIds'] = undefined;

/**
 * A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
 * @member {String} groupObjectId
 */
GroupObjectsRequest.prototype['groupObjectId'] = undefined;






export default GroupObjectsRequest;

