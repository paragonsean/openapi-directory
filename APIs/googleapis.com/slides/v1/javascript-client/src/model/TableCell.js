/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableCellLocation from './TableCellLocation';
import TableCellProperties from './TableCellProperties';
import TextContent from './TextContent';

/**
 * The TableCell model module.
 * @module model/TableCell
 * @version v1
 */
class TableCell {
    /**
     * Constructs a new <code>TableCell</code>.
     * Properties and contents of each table cell.
     * @alias module:model/TableCell
     */
    constructor() { 
        
        TableCell.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableCell</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableCell} obj Optional instance to populate.
     * @return {module:model/TableCell} The populated <code>TableCell</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableCell();

            if (data.hasOwnProperty('columnSpan')) {
                obj['columnSpan'] = ApiClient.convertToType(data['columnSpan'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = TableCellLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('rowSpan')) {
                obj['rowSpan'] = ApiClient.convertToType(data['rowSpan'], 'Number');
            }
            if (data.hasOwnProperty('tableCellProperties')) {
                obj['tableCellProperties'] = TableCellProperties.constructFromObject(data['tableCellProperties']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = TextContent.constructFromObject(data['text']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableCell</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableCell</code>.
     */
    static validateJSON(data) {
        // validate the optional field `location`
        if (data['location']) { // data not null
          TableCellLocation.validateJSON(data['location']);
        }
        // validate the optional field `tableCellProperties`
        if (data['tableCellProperties']) { // data not null
          TableCellProperties.validateJSON(data['tableCellProperties']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          TextContent.validateJSON(data['text']);
        }

        return true;
    }


}



/**
 * Column span of the cell.
 * @member {Number} columnSpan
 */
TableCell.prototype['columnSpan'] = undefined;

/**
 * @member {module:model/TableCellLocation} location
 */
TableCell.prototype['location'] = undefined;

/**
 * Row span of the cell.
 * @member {Number} rowSpan
 */
TableCell.prototype['rowSpan'] = undefined;

/**
 * @member {module:model/TableCellProperties} tableCellProperties
 */
TableCell.prototype['tableCellProperties'] = undefined;

/**
 * @member {module:model/TextContent} text
 */
TableCell.prototype['text'] = undefined;






export default TableCell;

