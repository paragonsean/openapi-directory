/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Placeholder model module.
 * @module model/Placeholder
 * @version v1
 */
class Placeholder {
    /**
     * Constructs a new <code>Placeholder</code>.
     * The placeholder information that uniquely identifies a placeholder shape.
     * @alias module:model/Placeholder
     */
    constructor() { 
        
        Placeholder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Placeholder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Placeholder} obj Optional instance to populate.
     * @return {module:model/Placeholder} The populated <code>Placeholder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Placeholder();

            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('parentObjectId')) {
                obj['parentObjectId'] = ApiClient.convertToType(data['parentObjectId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Placeholder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Placeholder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['parentObjectId'] && !(typeof data['parentObjectId'] === 'string' || data['parentObjectId'] instanceof String)) {
            throw new Error("Expected the field `parentObjectId` to be a primitive type in the JSON string but got " + data['parentObjectId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.
 * @member {Number} index
 */
Placeholder.prototype['index'] = undefined;

/**
 * The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.
 * @member {String} parentObjectId
 */
Placeholder.prototype['parentObjectId'] = undefined;

/**
 * The type of the placeholder.
 * @member {module:model/Placeholder.TypeEnum} type
 */
Placeholder.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Placeholder['TypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "BODY"
     * @const
     */
    "BODY": "BODY",

    /**
     * value: "CHART"
     * @const
     */
    "CHART": "CHART",

    /**
     * value: "CLIP_ART"
     * @const
     */
    "CLIP_ART": "CLIP_ART",

    /**
     * value: "CENTERED_TITLE"
     * @const
     */
    "CENTERED_TITLE": "CENTERED_TITLE",

    /**
     * value: "DIAGRAM"
     * @const
     */
    "DIAGRAM": "DIAGRAM",

    /**
     * value: "DATE_AND_TIME"
     * @const
     */
    "DATE_AND_TIME": "DATE_AND_TIME",

    /**
     * value: "FOOTER"
     * @const
     */
    "FOOTER": "FOOTER",

    /**
     * value: "HEADER"
     * @const
     */
    "HEADER": "HEADER",

    /**
     * value: "MEDIA"
     * @const
     */
    "MEDIA": "MEDIA",

    /**
     * value: "OBJECT"
     * @const
     */
    "OBJECT": "OBJECT",

    /**
     * value: "PICTURE"
     * @const
     */
    "PICTURE": "PICTURE",

    /**
     * value: "SLIDE_NUMBER"
     * @const
     */
    "SLIDE_NUMBER": "SLIDE_NUMBER",

    /**
     * value: "SUBTITLE"
     * @const
     */
    "SUBTITLE": "SUBTITLE",

    /**
     * value: "TABLE"
     * @const
     */
    "TABLE": "TABLE",

    /**
     * value: "TITLE"
     * @const
     */
    "TITLE": "TITLE",

    /**
     * value: "SLIDE_IMAGE"
     * @const
     */
    "SLIDE_IMAGE": "SLIDE_IMAGE"
};



export default Placeholder;

