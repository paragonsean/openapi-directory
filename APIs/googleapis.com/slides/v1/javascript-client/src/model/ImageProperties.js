/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CropProperties from './CropProperties';
import Link from './Link';
import Outline from './Outline';
import Recolor from './Recolor';
import Shadow from './Shadow';

/**
 * The ImageProperties model module.
 * @module model/ImageProperties
 * @version v1
 */
class ImageProperties {
    /**
     * Constructs a new <code>ImageProperties</code>.
     * The properties of the Image.
     * @alias module:model/ImageProperties
     */
    constructor() { 
        
        ImageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageProperties} obj Optional instance to populate.
     * @return {module:model/ImageProperties} The populated <code>ImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageProperties();

            if (data.hasOwnProperty('brightness')) {
                obj['brightness'] = ApiClient.convertToType(data['brightness'], 'Number');
            }
            if (data.hasOwnProperty('contrast')) {
                obj['contrast'] = ApiClient.convertToType(data['contrast'], 'Number');
            }
            if (data.hasOwnProperty('cropProperties')) {
                obj['cropProperties'] = CropProperties.constructFromObject(data['cropProperties']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('outline')) {
                obj['outline'] = Outline.constructFromObject(data['outline']);
            }
            if (data.hasOwnProperty('recolor')) {
                obj['recolor'] = Recolor.constructFromObject(data['recolor']);
            }
            if (data.hasOwnProperty('shadow')) {
                obj['shadow'] = Shadow.constructFromObject(data['shadow']);
            }
            if (data.hasOwnProperty('transparency')) {
                obj['transparency'] = ApiClient.convertToType(data['transparency'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cropProperties`
        if (data['cropProperties']) { // data not null
          CropProperties.validateJSON(data['cropProperties']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // validate the optional field `outline`
        if (data['outline']) { // data not null
          Outline.validateJSON(data['outline']);
        }
        // validate the optional field `recolor`
        if (data['recolor']) { // data not null
          Recolor.validateJSON(data['recolor']);
        }
        // validate the optional field `shadow`
        if (data['shadow']) { // data not null
          Shadow.validateJSON(data['shadow']);
        }

        return true;
    }


}



/**
 * The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
 * @member {Number} brightness
 */
ImageProperties.prototype['brightness'] = undefined;

/**
 * The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
 * @member {Number} contrast
 */
ImageProperties.prototype['contrast'] = undefined;

/**
 * @member {module:model/CropProperties} cropProperties
 */
ImageProperties.prototype['cropProperties'] = undefined;

/**
 * @member {module:model/Link} link
 */
ImageProperties.prototype['link'] = undefined;

/**
 * @member {module:model/Outline} outline
 */
ImageProperties.prototype['outline'] = undefined;

/**
 * @member {module:model/Recolor} recolor
 */
ImageProperties.prototype['recolor'] = undefined;

/**
 * @member {module:model/Shadow} shadow
 */
ImageProperties.prototype['shadow'] = undefined;

/**
 * The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.
 * @member {Number} transparency
 */
ImageProperties.prototype['transparency'] = undefined;






export default ImageProperties;

