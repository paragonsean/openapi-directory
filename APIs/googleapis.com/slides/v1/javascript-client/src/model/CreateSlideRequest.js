/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LayoutPlaceholderIdMapping from './LayoutPlaceholderIdMapping';
import LayoutReference from './LayoutReference';

/**
 * The CreateSlideRequest model module.
 * @module model/CreateSlideRequest
 * @version v1
 */
class CreateSlideRequest {
    /**
     * Constructs a new <code>CreateSlideRequest</code>.
     * Creates a slide.
     * @alias module:model/CreateSlideRequest
     */
    constructor() { 
        
        CreateSlideRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateSlideRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSlideRequest} obj Optional instance to populate.
     * @return {module:model/CreateSlideRequest} The populated <code>CreateSlideRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSlideRequest();

            if (data.hasOwnProperty('insertionIndex')) {
                obj['insertionIndex'] = ApiClient.convertToType(data['insertionIndex'], 'Number');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('placeholderIdMappings')) {
                obj['placeholderIdMappings'] = ApiClient.convertToType(data['placeholderIdMappings'], [LayoutPlaceholderIdMapping]);
            }
            if (data.hasOwnProperty('slideLayoutReference')) {
                obj['slideLayoutReference'] = LayoutReference.constructFromObject(data['slideLayoutReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSlideRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSlideRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        if (data['placeholderIdMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['placeholderIdMappings'])) {
                throw new Error("Expected the field `placeholderIdMappings` to be an array in the JSON data but got " + data['placeholderIdMappings']);
            }
            // validate the optional field `placeholderIdMappings` (array)
            for (const item of data['placeholderIdMappings']) {
                LayoutPlaceholderIdMapping.validateJSON(item);
            };
        }
        // validate the optional field `slideLayoutReference`
        if (data['slideLayoutReference']) { // data not null
          LayoutReference.validateJSON(data['slideLayoutReference']);
        }

        return true;
    }


}



/**
 * The optional zero-based index indicating where to insert the slides. If you don't specify an index, the slide is created at the end.
 * @member {Number} insertionIndex
 */
CreateSlideRequest.prototype['insertionIndex'] = undefined;

/**
 * A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive. If you don't specify an ID, a unique one is generated.
 * @member {String} objectId
 */
CreateSlideRequest.prototype['objectId'] = undefined;

/**
 * An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slide_layout_reference` is specified.
 * @member {Array.<module:model/LayoutPlaceholderIdMapping>} placeholderIdMappings
 */
CreateSlideRequest.prototype['placeholderIdMappings'] = undefined;

/**
 * @member {module:model/LayoutReference} slideLayoutReference
 */
CreateSlideRequest.prototype['slideLayoutReference'] = undefined;






export default CreateSlideRequest;

