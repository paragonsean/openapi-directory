/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RgbColor from './RgbColor';

/**
 * The OpaqueColor model module.
 * @module model/OpaqueColor
 * @version v1
 */
class OpaqueColor {
    /**
     * Constructs a new <code>OpaqueColor</code>.
     * A themeable solid color value.
     * @alias module:model/OpaqueColor
     */
    constructor() { 
        
        OpaqueColor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OpaqueColor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpaqueColor} obj Optional instance to populate.
     * @return {module:model/OpaqueColor} The populated <code>OpaqueColor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpaqueColor();

            if (data.hasOwnProperty('rgbColor')) {
                obj['rgbColor'] = RgbColor.constructFromObject(data['rgbColor']);
            }
            if (data.hasOwnProperty('themeColor')) {
                obj['themeColor'] = ApiClient.convertToType(data['themeColor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpaqueColor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpaqueColor</code>.
     */
    static validateJSON(data) {
        // validate the optional field `rgbColor`
        if (data['rgbColor']) { // data not null
          RgbColor.validateJSON(data['rgbColor']);
        }
        // ensure the json data is a string
        if (data['themeColor'] && !(typeof data['themeColor'] === 'string' || data['themeColor'] instanceof String)) {
            throw new Error("Expected the field `themeColor` to be a primitive type in the JSON string but got " + data['themeColor']);
        }

        return true;
    }


}



/**
 * @member {module:model/RgbColor} rgbColor
 */
OpaqueColor.prototype['rgbColor'] = undefined;

/**
 * An opaque theme color.
 * @member {module:model/OpaqueColor.ThemeColorEnum} themeColor
 */
OpaqueColor.prototype['themeColor'] = undefined;





/**
 * Allowed values for the <code>themeColor</code> property.
 * @enum {String}
 * @readonly
 */
OpaqueColor['ThemeColorEnum'] = {

    /**
     * value: "THEME_COLOR_TYPE_UNSPECIFIED"
     * @const
     */
    "THEME_COLOR_TYPE_UNSPECIFIED": "THEME_COLOR_TYPE_UNSPECIFIED",

    /**
     * value: "DARK1"
     * @const
     */
    "DARK1": "DARK1",

    /**
     * value: "LIGHT1"
     * @const
     */
    "LIGHT1": "LIGHT1",

    /**
     * value: "DARK2"
     * @const
     */
    "DARK2": "DARK2",

    /**
     * value: "LIGHT2"
     * @const
     */
    "LIGHT2": "LIGHT2",

    /**
     * value: "ACCENT1"
     * @const
     */
    "ACCENT1": "ACCENT1",

    /**
     * value: "ACCENT2"
     * @const
     */
    "ACCENT2": "ACCENT2",

    /**
     * value: "ACCENT3"
     * @const
     */
    "ACCENT3": "ACCENT3",

    /**
     * value: "ACCENT4"
     * @const
     */
    "ACCENT4": "ACCENT4",

    /**
     * value: "ACCENT5"
     * @const
     */
    "ACCENT5": "ACCENT5",

    /**
     * value: "ACCENT6"
     * @const
     */
    "ACCENT6": "ACCENT6",

    /**
     * value: "HYPERLINK"
     * @const
     */
    "HYPERLINK": "HYPERLINK",

    /**
     * value: "FOLLOWED_HYPERLINK"
     * @const
     */
    "FOLLOWED_HYPERLINK": "FOLLOWED_HYPERLINK",

    /**
     * value: "TEXT1"
     * @const
     */
    "TEXT1": "TEXT1",

    /**
     * value: "BACKGROUND1"
     * @const
     */
    "BACKGROUND1": "BACKGROUND1",

    /**
     * value: "TEXT2"
     * @const
     */
    "TEXT2": "TEXT2",

    /**
     * value: "BACKGROUND2"
     * @const
     */
    "BACKGROUND2": "BACKGROUND2"
};



export default OpaqueColor;

