/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableBorderRow from './TableBorderRow';
import TableColumnProperties from './TableColumnProperties';
import TableRow from './TableRow';

/**
 * The Table model module.
 * @module model/Table
 * @version v1
 */
class Table {
    /**
     * Constructs a new <code>Table</code>.
     * A PageElement kind representing a table.
     * @alias module:model/Table
     */
    constructor() { 
        
        Table.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Table</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Table} obj Optional instance to populate.
     * @return {module:model/Table} The populated <code>Table</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Table();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], 'Number');
            }
            if (data.hasOwnProperty('horizontalBorderRows')) {
                obj['horizontalBorderRows'] = ApiClient.convertToType(data['horizontalBorderRows'], [TableBorderRow]);
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], 'Number');
            }
            if (data.hasOwnProperty('tableColumns')) {
                obj['tableColumns'] = ApiClient.convertToType(data['tableColumns'], [TableColumnProperties]);
            }
            if (data.hasOwnProperty('tableRows')) {
                obj['tableRows'] = ApiClient.convertToType(data['tableRows'], [TableRow]);
            }
            if (data.hasOwnProperty('verticalBorderRows')) {
                obj['verticalBorderRows'] = ApiClient.convertToType(data['verticalBorderRows'], [TableBorderRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Table</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Table</code>.
     */
    static validateJSON(data) {
        if (data['horizontalBorderRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['horizontalBorderRows'])) {
                throw new Error("Expected the field `horizontalBorderRows` to be an array in the JSON data but got " + data['horizontalBorderRows']);
            }
            // validate the optional field `horizontalBorderRows` (array)
            for (const item of data['horizontalBorderRows']) {
                TableBorderRow.validateJSON(item);
            };
        }
        if (data['tableColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tableColumns'])) {
                throw new Error("Expected the field `tableColumns` to be an array in the JSON data but got " + data['tableColumns']);
            }
            // validate the optional field `tableColumns` (array)
            for (const item of data['tableColumns']) {
                TableColumnProperties.validateJSON(item);
            };
        }
        if (data['tableRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tableRows'])) {
                throw new Error("Expected the field `tableRows` to be an array in the JSON data but got " + data['tableRows']);
            }
            // validate the optional field `tableRows` (array)
            for (const item of data['tableRows']) {
                TableRow.validateJSON(item);
            };
        }
        if (data['verticalBorderRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['verticalBorderRows'])) {
                throw new Error("Expected the field `verticalBorderRows` to be an array in the JSON data but got " + data['verticalBorderRows']);
            }
            // validate the optional field `verticalBorderRows` (array)
            for (const item of data['verticalBorderRows']) {
                TableBorderRow.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Number of columns in the table.
 * @member {Number} columns
 */
Table.prototype['columns'] = undefined;

/**
 * Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.
 * @member {Array.<module:model/TableBorderRow>} horizontalBorderRows
 */
Table.prototype['horizontalBorderRows'] = undefined;

/**
 * Number of rows in the table.
 * @member {Number} rows
 */
Table.prototype['rows'] = undefined;

/**
 * Properties of each column.
 * @member {Array.<module:model/TableColumnProperties>} tableColumns
 */
Table.prototype['tableColumns'] = undefined;

/**
 * Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.
 * @member {Array.<module:model/TableRow>} tableRows
 */
Table.prototype['tableRows'] = undefined;

/**
 * Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.
 * @member {Array.<module:model/TableBorderRow>} verticalBorderRows
 */
Table.prototype['verticalBorderRows'] = undefined;






export default Table;

