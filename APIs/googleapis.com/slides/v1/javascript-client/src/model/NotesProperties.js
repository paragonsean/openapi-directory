/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotesProperties model module.
 * @module model/NotesProperties
 * @version v1
 */
class NotesProperties {
    /**
     * Constructs a new <code>NotesProperties</code>.
     * The properties of Page that are only relevant for pages with page_type NOTES.
     * @alias module:model/NotesProperties
     */
    constructor() { 
        
        NotesProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotesProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotesProperties} obj Optional instance to populate.
     * @return {module:model/NotesProperties} The populated <code>NotesProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotesProperties();

            if (data.hasOwnProperty('speakerNotesObjectId')) {
                obj['speakerNotesObjectId'] = ApiClient.convertToType(data['speakerNotesObjectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotesProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotesProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['speakerNotesObjectId'] && !(typeof data['speakerNotesObjectId'] === 'string' || data['speakerNotesObjectId'] instanceof String)) {
            throw new Error("Expected the field `speakerNotesObjectId` to be a primitive type in the JSON string but got " + data['speakerNotesObjectId']);
        }

        return true;
    }


}



/**
 * The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID.
 * @member {String} speakerNotesObjectId
 */
NotesProperties.prototype['speakerNotesObjectId'] = undefined;






export default NotesProperties;

