/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableCellBackgroundFill from './TableCellBackgroundFill';

/**
 * The TableCellProperties model module.
 * @module model/TableCellProperties
 * @version v1
 */
class TableCellProperties {
    /**
     * Constructs a new <code>TableCellProperties</code>.
     * The properties of the TableCell.
     * @alias module:model/TableCellProperties
     */
    constructor() { 
        
        TableCellProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableCellProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableCellProperties} obj Optional instance to populate.
     * @return {module:model/TableCellProperties} The populated <code>TableCellProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableCellProperties();

            if (data.hasOwnProperty('contentAlignment')) {
                obj['contentAlignment'] = ApiClient.convertToType(data['contentAlignment'], 'String');
            }
            if (data.hasOwnProperty('tableCellBackgroundFill')) {
                obj['tableCellBackgroundFill'] = TableCellBackgroundFill.constructFromObject(data['tableCellBackgroundFill']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableCellProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableCellProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentAlignment'] && !(typeof data['contentAlignment'] === 'string' || data['contentAlignment'] instanceof String)) {
            throw new Error("Expected the field `contentAlignment` to be a primitive type in the JSON string but got " + data['contentAlignment']);
        }
        // validate the optional field `tableCellBackgroundFill`
        if (data['tableCellBackgroundFill']) { // data not null
          TableCellBackgroundFill.validateJSON(data['tableCellBackgroundFill']);
        }

        return true;
    }


}



/**
 * The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.
 * @member {module:model/TableCellProperties.ContentAlignmentEnum} contentAlignment
 */
TableCellProperties.prototype['contentAlignment'] = undefined;

/**
 * @member {module:model/TableCellBackgroundFill} tableCellBackgroundFill
 */
TableCellProperties.prototype['tableCellBackgroundFill'] = undefined;





/**
 * Allowed values for the <code>contentAlignment</code> property.
 * @enum {String}
 * @readonly
 */
TableCellProperties['ContentAlignmentEnum'] = {

    /**
     * value: "CONTENT_ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSPECIFIED": "CONTENT_ALIGNMENT_UNSPECIFIED",

    /**
     * value: "CONTENT_ALIGNMENT_UNSUPPORTED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSUPPORTED": "CONTENT_ALIGNMENT_UNSUPPORTED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "MIDDLE"
     * @const
     */
    "MIDDLE": "MIDDLE",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM"
};



export default TableCellProperties;

