/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Link model module.
 * @module model/Link
 * @version v1
 */
class Link {
    /**
     * Constructs a new <code>Link</code>.
     * A hypertext link.
     * @alias module:model/Link
     */
    constructor() { 
        
        Link.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Link</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Link} obj Optional instance to populate.
     * @return {module:model/Link} The populated <code>Link</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Link();

            if (data.hasOwnProperty('pageObjectId')) {
                obj['pageObjectId'] = ApiClient.convertToType(data['pageObjectId'], 'String');
            }
            if (data.hasOwnProperty('relativeLink')) {
                obj['relativeLink'] = ApiClient.convertToType(data['relativeLink'], 'String');
            }
            if (data.hasOwnProperty('slideIndex')) {
                obj['slideIndex'] = ApiClient.convertToType(data['slideIndex'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Link</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Link</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pageObjectId'] && !(typeof data['pageObjectId'] === 'string' || data['pageObjectId'] instanceof String)) {
            throw new Error("Expected the field `pageObjectId` to be a primitive type in the JSON string but got " + data['pageObjectId']);
        }
        // ensure the json data is a string
        if (data['relativeLink'] && !(typeof data['relativeLink'] === 'string' || data['relativeLink'] instanceof String)) {
            throw new Error("Expected the field `relativeLink` to be a primitive type in the JSON string but got " + data['relativeLink']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.
 * @member {String} pageObjectId
 */
Link.prototype['pageObjectId'] = undefined;

/**
 * If set, indicates this is a link to a slide in this presentation, addressed by its position.
 * @member {module:model/Link.RelativeLinkEnum} relativeLink
 */
Link.prototype['relativeLink'] = undefined;

/**
 * If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.
 * @member {Number} slideIndex
 */
Link.prototype['slideIndex'] = undefined;

/**
 * If set, indicates this is a link to the external web page at this URL.
 * @member {String} url
 */
Link.prototype['url'] = undefined;





/**
 * Allowed values for the <code>relativeLink</code> property.
 * @enum {String}
 * @readonly
 */
Link['RelativeLinkEnum'] = {

    /**
     * value: "RELATIVE_SLIDE_LINK_UNSPECIFIED"
     * @const
     */
    "RELATIVE_SLIDE_LINK_UNSPECIFIED": "RELATIVE_SLIDE_LINK_UNSPECIFIED",

    /**
     * value: "NEXT_SLIDE"
     * @const
     */
    "NEXT_SLIDE": "NEXT_SLIDE",

    /**
     * value: "PREVIOUS_SLIDE"
     * @const
     */
    "PREVIOUS_SLIDE": "PREVIOUS_SLIDE",

    /**
     * value: "FIRST_SLIDE"
     * @const
     */
    "FIRST_SLIDE": "FIRST_SLIDE",

    /**
     * value: "LAST_SLIDE"
     * @const
     */
    "LAST_SLIDE": "LAST_SLIDE"
};



export default Link;

