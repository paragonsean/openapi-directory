/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The ParagraphStyle model module.
 * @module model/ParagraphStyle
 * @version v1
 */
class ParagraphStyle {
    /**
     * Constructs a new <code>ParagraphStyle</code>.
     * Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
     * @alias module:model/ParagraphStyle
     */
    constructor() { 
        
        ParagraphStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParagraphStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParagraphStyle} obj Optional instance to populate.
     * @return {module:model/ParagraphStyle} The populated <code>ParagraphStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParagraphStyle();

            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('indentEnd')) {
                obj['indentEnd'] = Dimension.constructFromObject(data['indentEnd']);
            }
            if (data.hasOwnProperty('indentFirstLine')) {
                obj['indentFirstLine'] = Dimension.constructFromObject(data['indentFirstLine']);
            }
            if (data.hasOwnProperty('indentStart')) {
                obj['indentStart'] = Dimension.constructFromObject(data['indentStart']);
            }
            if (data.hasOwnProperty('lineSpacing')) {
                obj['lineSpacing'] = ApiClient.convertToType(data['lineSpacing'], 'Number');
            }
            if (data.hasOwnProperty('spaceAbove')) {
                obj['spaceAbove'] = Dimension.constructFromObject(data['spaceAbove']);
            }
            if (data.hasOwnProperty('spaceBelow')) {
                obj['spaceBelow'] = Dimension.constructFromObject(data['spaceBelow']);
            }
            if (data.hasOwnProperty('spacingMode')) {
                obj['spacingMode'] = ApiClient.convertToType(data['spacingMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParagraphStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParagraphStyle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alignment'] && !(typeof data['alignment'] === 'string' || data['alignment'] instanceof String)) {
            throw new Error("Expected the field `alignment` to be a primitive type in the JSON string but got " + data['alignment']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // validate the optional field `indentEnd`
        if (data['indentEnd']) { // data not null
          Dimension.validateJSON(data['indentEnd']);
        }
        // validate the optional field `indentFirstLine`
        if (data['indentFirstLine']) { // data not null
          Dimension.validateJSON(data['indentFirstLine']);
        }
        // validate the optional field `indentStart`
        if (data['indentStart']) { // data not null
          Dimension.validateJSON(data['indentStart']);
        }
        // validate the optional field `spaceAbove`
        if (data['spaceAbove']) { // data not null
          Dimension.validateJSON(data['spaceAbove']);
        }
        // validate the optional field `spaceBelow`
        if (data['spaceBelow']) { // data not null
          Dimension.validateJSON(data['spaceBelow']);
        }
        // ensure the json data is a string
        if (data['spacingMode'] && !(typeof data['spacingMode'] === 'string' || data['spacingMode'] instanceof String)) {
            throw new Error("Expected the field `spacingMode` to be a primitive type in the JSON string but got " + data['spacingMode']);
        }

        return true;
    }


}



/**
 * The text alignment for this paragraph.
 * @member {module:model/ParagraphStyle.AlignmentEnum} alignment
 */
ParagraphStyle.prototype['alignment'] = undefined;

/**
 * The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
 * @member {module:model/ParagraphStyle.DirectionEnum} direction
 */
ParagraphStyle.prototype['direction'] = undefined;

/**
 * @member {module:model/Dimension} indentEnd
 */
ParagraphStyle.prototype['indentEnd'] = undefined;

/**
 * @member {module:model/Dimension} indentFirstLine
 */
ParagraphStyle.prototype['indentFirstLine'] = undefined;

/**
 * @member {module:model/Dimension} indentStart
 */
ParagraphStyle.prototype['indentStart'] = undefined;

/**
 * The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
 * @member {Number} lineSpacing
 */
ParagraphStyle.prototype['lineSpacing'] = undefined;

/**
 * @member {module:model/Dimension} spaceAbove
 */
ParagraphStyle.prototype['spaceAbove'] = undefined;

/**
 * @member {module:model/Dimension} spaceBelow
 */
ParagraphStyle.prototype['spaceBelow'] = undefined;

/**
 * The spacing mode for the paragraph.
 * @member {module:model/ParagraphStyle.SpacingModeEnum} spacingMode
 */
ParagraphStyle.prototype['spacingMode'] = undefined;





/**
 * Allowed values for the <code>alignment</code> property.
 * @enum {String}
 * @readonly
 */
ParagraphStyle['AlignmentEnum'] = {

    /**
     * value: "ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "ALIGNMENT_UNSPECIFIED": "ALIGNMENT_UNSPECIFIED",

    /**
     * value: "START"
     * @const
     */
    "START": "START",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER",

    /**
     * value: "END"
     * @const
     */
    "END": "END",

    /**
     * value: "JUSTIFIED"
     * @const
     */
    "JUSTIFIED": "JUSTIFIED"
};


/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
ParagraphStyle['DirectionEnum'] = {

    /**
     * value: "TEXT_DIRECTION_UNSPECIFIED"
     * @const
     */
    "TEXT_DIRECTION_UNSPECIFIED": "TEXT_DIRECTION_UNSPECIFIED",

    /**
     * value: "LEFT_TO_RIGHT"
     * @const
     */
    "LEFT_TO_RIGHT": "LEFT_TO_RIGHT",

    /**
     * value: "RIGHT_TO_LEFT"
     * @const
     */
    "RIGHT_TO_LEFT": "RIGHT_TO_LEFT"
};


/**
 * Allowed values for the <code>spacingMode</code> property.
 * @enum {String}
 * @readonly
 */
ParagraphStyle['SpacingModeEnum'] = {

    /**
     * value: "SPACING_MODE_UNSPECIFIED"
     * @const
     */
    "SPACING_MODE_UNSPECIFIED": "SPACING_MODE_UNSPECIFIED",

    /**
     * value: "NEVER_COLLAPSE"
     * @const
     */
    "NEVER_COLLAPSE": "NEVER_COLLAPSE",

    /**
     * value: "COLLAPSE_LISTS"
     * @const
     */
    "COLLAPSE_LISTS": "COLLAPSE_LISTS"
};



export default ParagraphStyle;

