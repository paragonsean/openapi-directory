/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Placeholder from './Placeholder';

/**
 * The LayoutPlaceholderIdMapping model module.
 * @module model/LayoutPlaceholderIdMapping
 * @version v1
 */
class LayoutPlaceholderIdMapping {
    /**
     * Constructs a new <code>LayoutPlaceholderIdMapping</code>.
     * The user-specified ID mapping for a placeholder that will be created on a slide from a specified layout.
     * @alias module:model/LayoutPlaceholderIdMapping
     */
    constructor() { 
        
        LayoutPlaceholderIdMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LayoutPlaceholderIdMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LayoutPlaceholderIdMapping} obj Optional instance to populate.
     * @return {module:model/LayoutPlaceholderIdMapping} The populated <code>LayoutPlaceholderIdMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LayoutPlaceholderIdMapping();

            if (data.hasOwnProperty('layoutPlaceholder')) {
                obj['layoutPlaceholder'] = Placeholder.constructFromObject(data['layoutPlaceholder']);
            }
            if (data.hasOwnProperty('layoutPlaceholderObjectId')) {
                obj['layoutPlaceholderObjectId'] = ApiClient.convertToType(data['layoutPlaceholderObjectId'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LayoutPlaceholderIdMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LayoutPlaceholderIdMapping</code>.
     */
    static validateJSON(data) {
        // validate the optional field `layoutPlaceholder`
        if (data['layoutPlaceholder']) { // data not null
          Placeholder.validateJSON(data['layoutPlaceholder']);
        }
        // ensure the json data is a string
        if (data['layoutPlaceholderObjectId'] && !(typeof data['layoutPlaceholderObjectId'] === 'string' || data['layoutPlaceholderObjectId'] instanceof String)) {
            throw new Error("Expected the field `layoutPlaceholderObjectId` to be a primitive type in the JSON string but got " + data['layoutPlaceholderObjectId']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Placeholder} layoutPlaceholder
 */
LayoutPlaceholderIdMapping.prototype['layoutPlaceholder'] = undefined;

/**
 * The object ID of the placeholder on a layout that will be applied to a slide.
 * @member {String} layoutPlaceholderObjectId
 */
LayoutPlaceholderIdMapping.prototype['layoutPlaceholderObjectId'] = undefined;

/**
 * A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
 * @member {String} objectId
 */
LayoutPlaceholderIdMapping.prototype['objectId'] = undefined;






export default LayoutPlaceholderIdMapping;

