/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import LineConnection from './LineConnection';
import LineFill from './LineFill';
import Link from './Link';

/**
 * The LineProperties model module.
 * @module model/LineProperties
 * @version v1
 */
class LineProperties {
    /**
     * Constructs a new <code>LineProperties</code>.
     * The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
     * @alias module:model/LineProperties
     */
    constructor() { 
        
        LineProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineProperties} obj Optional instance to populate.
     * @return {module:model/LineProperties} The populated <code>LineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineProperties();

            if (data.hasOwnProperty('dashStyle')) {
                obj['dashStyle'] = ApiClient.convertToType(data['dashStyle'], 'String');
            }
            if (data.hasOwnProperty('endArrow')) {
                obj['endArrow'] = ApiClient.convertToType(data['endArrow'], 'String');
            }
            if (data.hasOwnProperty('endConnection')) {
                obj['endConnection'] = LineConnection.constructFromObject(data['endConnection']);
            }
            if (data.hasOwnProperty('lineFill')) {
                obj['lineFill'] = LineFill.constructFromObject(data['lineFill']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('startArrow')) {
                obj['startArrow'] = ApiClient.convertToType(data['startArrow'], 'String');
            }
            if (data.hasOwnProperty('startConnection')) {
                obj['startConnection'] = LineConnection.constructFromObject(data['startConnection']);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = Dimension.constructFromObject(data['weight']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dashStyle'] && !(typeof data['dashStyle'] === 'string' || data['dashStyle'] instanceof String)) {
            throw new Error("Expected the field `dashStyle` to be a primitive type in the JSON string but got " + data['dashStyle']);
        }
        // ensure the json data is a string
        if (data['endArrow'] && !(typeof data['endArrow'] === 'string' || data['endArrow'] instanceof String)) {
            throw new Error("Expected the field `endArrow` to be a primitive type in the JSON string but got " + data['endArrow']);
        }
        // validate the optional field `endConnection`
        if (data['endConnection']) { // data not null
          LineConnection.validateJSON(data['endConnection']);
        }
        // validate the optional field `lineFill`
        if (data['lineFill']) { // data not null
          LineFill.validateJSON(data['lineFill']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // ensure the json data is a string
        if (data['startArrow'] && !(typeof data['startArrow'] === 'string' || data['startArrow'] instanceof String)) {
            throw new Error("Expected the field `startArrow` to be a primitive type in the JSON string but got " + data['startArrow']);
        }
        // validate the optional field `startConnection`
        if (data['startConnection']) { // data not null
          LineConnection.validateJSON(data['startConnection']);
        }
        // validate the optional field `weight`
        if (data['weight']) { // data not null
          Dimension.validateJSON(data['weight']);
        }

        return true;
    }


}



/**
 * The dash style of the line.
 * @member {module:model/LineProperties.DashStyleEnum} dashStyle
 */
LineProperties.prototype['dashStyle'] = undefined;

/**
 * The style of the arrow at the end of the line.
 * @member {module:model/LineProperties.EndArrowEnum} endArrow
 */
LineProperties.prototype['endArrow'] = undefined;

/**
 * @member {module:model/LineConnection} endConnection
 */
LineProperties.prototype['endConnection'] = undefined;

/**
 * @member {module:model/LineFill} lineFill
 */
LineProperties.prototype['lineFill'] = undefined;

/**
 * @member {module:model/Link} link
 */
LineProperties.prototype['link'] = undefined;

/**
 * The style of the arrow at the beginning of the line.
 * @member {module:model/LineProperties.StartArrowEnum} startArrow
 */
LineProperties.prototype['startArrow'] = undefined;

/**
 * @member {module:model/LineConnection} startConnection
 */
LineProperties.prototype['startConnection'] = undefined;

/**
 * @member {module:model/Dimension} weight
 */
LineProperties.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>dashStyle</code> property.
 * @enum {String}
 * @readonly
 */
LineProperties['DashStyleEnum'] = {

    /**
     * value: "DASH_STYLE_UNSPECIFIED"
     * @const
     */
    "DASH_STYLE_UNSPECIFIED": "DASH_STYLE_UNSPECIFIED",

    /**
     * value: "SOLID"
     * @const
     */
    "SOLID": "SOLID",

    /**
     * value: "DOT"
     * @const
     */
    "DOT": "DOT",

    /**
     * value: "DASH"
     * @const
     */
    "DASH": "DASH",

    /**
     * value: "DASH_DOT"
     * @const
     */
    "DASH_DOT": "DASH_DOT",

    /**
     * value: "LONG_DASH"
     * @const
     */
    "LONG_DASH": "LONG_DASH",

    /**
     * value: "LONG_DASH_DOT"
     * @const
     */
    "LONG_DASH_DOT": "LONG_DASH_DOT"
};


/**
 * Allowed values for the <code>endArrow</code> property.
 * @enum {String}
 * @readonly
 */
LineProperties['EndArrowEnum'] = {

    /**
     * value: "ARROW_STYLE_UNSPECIFIED"
     * @const
     */
    "ARROW_STYLE_UNSPECIFIED": "ARROW_STYLE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "STEALTH_ARROW"
     * @const
     */
    "STEALTH_ARROW": "STEALTH_ARROW",

    /**
     * value: "FILL_ARROW"
     * @const
     */
    "FILL_ARROW": "FILL_ARROW",

    /**
     * value: "FILL_CIRCLE"
     * @const
     */
    "FILL_CIRCLE": "FILL_CIRCLE",

    /**
     * value: "FILL_SQUARE"
     * @const
     */
    "FILL_SQUARE": "FILL_SQUARE",

    /**
     * value: "FILL_DIAMOND"
     * @const
     */
    "FILL_DIAMOND": "FILL_DIAMOND",

    /**
     * value: "OPEN_ARROW"
     * @const
     */
    "OPEN_ARROW": "OPEN_ARROW",

    /**
     * value: "OPEN_CIRCLE"
     * @const
     */
    "OPEN_CIRCLE": "OPEN_CIRCLE",

    /**
     * value: "OPEN_SQUARE"
     * @const
     */
    "OPEN_SQUARE": "OPEN_SQUARE",

    /**
     * value: "OPEN_DIAMOND"
     * @const
     */
    "OPEN_DIAMOND": "OPEN_DIAMOND"
};


/**
 * Allowed values for the <code>startArrow</code> property.
 * @enum {String}
 * @readonly
 */
LineProperties['StartArrowEnum'] = {

    /**
     * value: "ARROW_STYLE_UNSPECIFIED"
     * @const
     */
    "ARROW_STYLE_UNSPECIFIED": "ARROW_STYLE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "STEALTH_ARROW"
     * @const
     */
    "STEALTH_ARROW": "STEALTH_ARROW",

    /**
     * value: "FILL_ARROW"
     * @const
     */
    "FILL_ARROW": "FILL_ARROW",

    /**
     * value: "FILL_CIRCLE"
     * @const
     */
    "FILL_CIRCLE": "FILL_CIRCLE",

    /**
     * value: "FILL_SQUARE"
     * @const
     */
    "FILL_SQUARE": "FILL_SQUARE",

    /**
     * value: "FILL_DIAMOND"
     * @const
     */
    "FILL_DIAMOND": "FILL_DIAMOND",

    /**
     * value: "OPEN_ARROW"
     * @const
     */
    "OPEN_ARROW": "OPEN_ARROW",

    /**
     * value: "OPEN_CIRCLE"
     * @const
     */
    "OPEN_CIRCLE": "OPEN_CIRCLE",

    /**
     * value: "OPEN_SQUARE"
     * @const
     */
    "OPEN_SQUARE": "OPEN_SQUARE",

    /**
     * value: "OPEN_DIAMOND"
     * @const
     */
    "OPEN_DIAMOND": "OPEN_DIAMOND"
};



export default LineProperties;

