/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Size from './Size';

/**
 * The StretchedPictureFill model module.
 * @module model/StretchedPictureFill
 * @version v1
 */
class StretchedPictureFill {
    /**
     * Constructs a new <code>StretchedPictureFill</code>.
     * The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.
     * @alias module:model/StretchedPictureFill
     */
    constructor() { 
        
        StretchedPictureFill.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StretchedPictureFill</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StretchedPictureFill} obj Optional instance to populate.
     * @return {module:model/StretchedPictureFill} The populated <code>StretchedPictureFill</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StretchedPictureFill();

            if (data.hasOwnProperty('contentUrl')) {
                obj['contentUrl'] = ApiClient.convertToType(data['contentUrl'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StretchedPictureFill</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StretchedPictureFill</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentUrl'] && !(typeof data['contentUrl'] === 'string' || data['contentUrl'] instanceof String)) {
            throw new Error("Expected the field `contentUrl` to be a primitive type in the JSON string but got " + data['contentUrl']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }

        return true;
    }


}



/**
 * Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.
 * @member {String} contentUrl
 */
StretchedPictureFill.prototype['contentUrl'] = undefined;

/**
 * @member {module:model/Size} size
 */
StretchedPictureFill.prototype['size'] = undefined;






export default StretchedPictureFill;

