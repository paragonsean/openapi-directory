/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableCellLocation from './TableCellLocation';

/**
 * The InsertTableColumnsRequest model module.
 * @module model/InsertTableColumnsRequest
 * @version v1
 */
class InsertTableColumnsRequest {
    /**
     * Constructs a new <code>InsertTableColumnsRequest</code>.
     * Inserts columns into a table. Other columns in the table will be resized to fit the new column.
     * @alias module:model/InsertTableColumnsRequest
     */
    constructor() { 
        
        InsertTableColumnsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsertTableColumnsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsertTableColumnsRequest} obj Optional instance to populate.
     * @return {module:model/InsertTableColumnsRequest} The populated <code>InsertTableColumnsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsertTableColumnsRequest();

            if (data.hasOwnProperty('cellLocation')) {
                obj['cellLocation'] = TableCellLocation.constructFromObject(data['cellLocation']);
            }
            if (data.hasOwnProperty('insertRight')) {
                obj['insertRight'] = ApiClient.convertToType(data['insertRight'], 'Boolean');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('tableObjectId')) {
                obj['tableObjectId'] = ApiClient.convertToType(data['tableObjectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsertTableColumnsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsertTableColumnsRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cellLocation`
        if (data['cellLocation']) { // data not null
          TableCellLocation.validateJSON(data['cellLocation']);
        }
        // ensure the json data is a string
        if (data['tableObjectId'] && !(typeof data['tableObjectId'] === 'string' || data['tableObjectId'] instanceof String)) {
            throw new Error("Expected the field `tableObjectId` to be a primitive type in the JSON string but got " + data['tableObjectId']);
        }

        return true;
    }


}



/**
 * @member {module:model/TableCellLocation} cellLocation
 */
InsertTableColumnsRequest.prototype['cellLocation'] = undefined;

/**
 * Whether to insert new columns to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
 * @member {Boolean} insertRight
 */
InsertTableColumnsRequest.prototype['insertRight'] = undefined;

/**
 * The number of columns to be inserted. Maximum 20 per request.
 * @member {Number} number
 */
InsertTableColumnsRequest.prototype['number'] = undefined;

/**
 * The table to insert columns into.
 * @member {String} tableObjectId
 */
InsertTableColumnsRequest.prototype['tableObjectId'] = undefined;






export default InsertTableColumnsRequest;

