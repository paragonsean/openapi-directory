/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoProperties from './VideoProperties';

/**
 * The Video model module.
 * @module model/Video
 * @version v1
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * A PageElement kind representing a video.
     * @alias module:model/Video
     */
    constructor() { 
        
        Video.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('videoProperties')) {
                obj['videoProperties'] = VideoProperties.constructFromObject(data['videoProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `videoProperties`
        if (data['videoProperties']) { // data not null
          VideoProperties.validateJSON(data['videoProperties']);
        }

        return true;
    }


}



/**
 * The video source's unique identifier for this video.
 * @member {String} id
 */
Video.prototype['id'] = undefined;

/**
 * The video source.
 * @member {module:model/Video.SourceEnum} source
 */
Video.prototype['source'] = undefined;

/**
 * An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.
 * @member {String} url
 */
Video.prototype['url'] = undefined;

/**
 * @member {module:model/VideoProperties} videoProperties
 */
Video.prototype['videoProperties'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
Video['SourceEnum'] = {

    /**
     * value: "SOURCE_UNSPECIFIED"
     * @const
     */
    "SOURCE_UNSPECIFIED": "SOURCE_UNSPECIFIED",

    /**
     * value: "YOUTUBE"
     * @const
     */
    "YOUTUBE": "YOUTUBE",

    /**
     * value: "DRIVE"
     * @const
     */
    "DRIVE": "DRIVE"
};



export default Video;

