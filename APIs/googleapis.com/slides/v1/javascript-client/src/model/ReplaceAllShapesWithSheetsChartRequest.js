/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubstringMatchCriteria from './SubstringMatchCriteria';

/**
 * The ReplaceAllShapesWithSheetsChartRequest model module.
 * @module model/ReplaceAllShapesWithSheetsChartRequest
 * @version v1
 */
class ReplaceAllShapesWithSheetsChartRequest {
    /**
     * Constructs a new <code>ReplaceAllShapesWithSheetsChartRequest</code>.
     * Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
     * @alias module:model/ReplaceAllShapesWithSheetsChartRequest
     */
    constructor() { 
        
        ReplaceAllShapesWithSheetsChartRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplaceAllShapesWithSheetsChartRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplaceAllShapesWithSheetsChartRequest} obj Optional instance to populate.
     * @return {module:model/ReplaceAllShapesWithSheetsChartRequest} The populated <code>ReplaceAllShapesWithSheetsChartRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplaceAllShapesWithSheetsChartRequest();

            if (data.hasOwnProperty('chartId')) {
                obj['chartId'] = ApiClient.convertToType(data['chartId'], 'Number');
            }
            if (data.hasOwnProperty('containsText')) {
                obj['containsText'] = SubstringMatchCriteria.constructFromObject(data['containsText']);
            }
            if (data.hasOwnProperty('linkingMode')) {
                obj['linkingMode'] = ApiClient.convertToType(data['linkingMode'], 'String');
            }
            if (data.hasOwnProperty('pageObjectIds')) {
                obj['pageObjectIds'] = ApiClient.convertToType(data['pageObjectIds'], ['String']);
            }
            if (data.hasOwnProperty('spreadsheetId')) {
                obj['spreadsheetId'] = ApiClient.convertToType(data['spreadsheetId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplaceAllShapesWithSheetsChartRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplaceAllShapesWithSheetsChartRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `containsText`
        if (data['containsText']) { // data not null
          SubstringMatchCriteria.validateJSON(data['containsText']);
        }
        // ensure the json data is a string
        if (data['linkingMode'] && !(typeof data['linkingMode'] === 'string' || data['linkingMode'] instanceof String)) {
            throw new Error("Expected the field `linkingMode` to be a primitive type in the JSON string but got " + data['linkingMode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageObjectIds'])) {
            throw new Error("Expected the field `pageObjectIds` to be an array in the JSON data but got " + data['pageObjectIds']);
        }
        // ensure the json data is a string
        if (data['spreadsheetId'] && !(typeof data['spreadsheetId'] === 'string' || data['spreadsheetId'] instanceof String)) {
            throw new Error("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got " + data['spreadsheetId']);
        }

        return true;
    }


}



/**
 * The ID of the specific chart in the Google Sheets spreadsheet.
 * @member {Number} chartId
 */
ReplaceAllShapesWithSheetsChartRequest.prototype['chartId'] = undefined;

/**
 * @member {module:model/SubstringMatchCriteria} containsText
 */
ReplaceAllShapesWithSheetsChartRequest.prototype['containsText'] = undefined;

/**
 * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
 * @member {module:model/ReplaceAllShapesWithSheetsChartRequest.LinkingModeEnum} linkingMode
 */
ReplaceAllShapesWithSheetsChartRequest.prototype['linkingMode'] = undefined;

/**
 * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
 * @member {Array.<String>} pageObjectIds
 */
ReplaceAllShapesWithSheetsChartRequest.prototype['pageObjectIds'] = undefined;

/**
 * The ID of the Google Sheets spreadsheet that contains the chart.
 * @member {String} spreadsheetId
 */
ReplaceAllShapesWithSheetsChartRequest.prototype['spreadsheetId'] = undefined;





/**
 * Allowed values for the <code>linkingMode</code> property.
 * @enum {String}
 * @readonly
 */
ReplaceAllShapesWithSheetsChartRequest['LinkingModeEnum'] = {

    /**
     * value: "NOT_LINKED_IMAGE"
     * @const
     */
    "NOT_LINKED_IMAGE": "NOT_LINKED_IMAGE",

    /**
     * value: "LINKED"
     * @const
     */
    "LINKED": "LINKED"
};



export default ReplaceAllShapesWithSheetsChartRequest;

