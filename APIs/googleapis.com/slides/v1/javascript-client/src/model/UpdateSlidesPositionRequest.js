/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSlidesPositionRequest model module.
 * @module model/UpdateSlidesPositionRequest
 * @version v1
 */
class UpdateSlidesPositionRequest {
    /**
     * Constructs a new <code>UpdateSlidesPositionRequest</code>.
     * Updates the position of slides in the presentation.
     * @alias module:model/UpdateSlidesPositionRequest
     */
    constructor() { 
        
        UpdateSlidesPositionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateSlidesPositionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSlidesPositionRequest} obj Optional instance to populate.
     * @return {module:model/UpdateSlidesPositionRequest} The populated <code>UpdateSlidesPositionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSlidesPositionRequest();

            if (data.hasOwnProperty('insertionIndex')) {
                obj['insertionIndex'] = ApiClient.convertToType(data['insertionIndex'], 'Number');
            }
            if (data.hasOwnProperty('slideObjectIds')) {
                obj['slideObjectIds'] = ApiClient.convertToType(data['slideObjectIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSlidesPositionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSlidesPositionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['slideObjectIds'])) {
            throw new Error("Expected the field `slideObjectIds` to be an array in the JSON data but got " + data['slideObjectIds']);
        }

        return true;
    }


}



/**
 * The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.
 * @member {Number} insertionIndex
 */
UpdateSlidesPositionRequest.prototype['insertionIndex'] = undefined;

/**
 * The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.
 * @member {Array.<String>} slideObjectIds
 */
UpdateSlidesPositionRequest.prototype['slideObjectIds'] = undefined;






export default UpdateSlidesPositionRequest;

