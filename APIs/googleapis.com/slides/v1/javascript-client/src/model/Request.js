/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateImageRequest from './CreateImageRequest';
import CreateLineRequest from './CreateLineRequest';
import CreateParagraphBulletsRequest from './CreateParagraphBulletsRequest';
import CreateShapeRequest from './CreateShapeRequest';
import CreateSheetsChartRequest from './CreateSheetsChartRequest';
import CreateSlideRequest from './CreateSlideRequest';
import CreateTableRequest from './CreateTableRequest';
import CreateVideoRequest from './CreateVideoRequest';
import DeleteObjectRequest from './DeleteObjectRequest';
import DeleteParagraphBulletsRequest from './DeleteParagraphBulletsRequest';
import DeleteTableColumnRequest from './DeleteTableColumnRequest';
import DeleteTableRowRequest from './DeleteTableRowRequest';
import DeleteTextRequest from './DeleteTextRequest';
import DuplicateObjectRequest from './DuplicateObjectRequest';
import GroupObjectsRequest from './GroupObjectsRequest';
import InsertTableColumnsRequest from './InsertTableColumnsRequest';
import InsertTableRowsRequest from './InsertTableRowsRequest';
import InsertTextRequest from './InsertTextRequest';
import MergeTableCellsRequest from './MergeTableCellsRequest';
import RefreshSheetsChartRequest from './RefreshSheetsChartRequest';
import ReplaceAllShapesWithImageRequest from './ReplaceAllShapesWithImageRequest';
import ReplaceAllShapesWithSheetsChartRequest from './ReplaceAllShapesWithSheetsChartRequest';
import ReplaceAllTextRequest from './ReplaceAllTextRequest';
import ReplaceImageRequest from './ReplaceImageRequest';
import RerouteLineRequest from './RerouteLineRequest';
import UngroupObjectsRequest from './UngroupObjectsRequest';
import UnmergeTableCellsRequest from './UnmergeTableCellsRequest';
import UpdateImagePropertiesRequest from './UpdateImagePropertiesRequest';
import UpdateLineCategoryRequest from './UpdateLineCategoryRequest';
import UpdateLinePropertiesRequest from './UpdateLinePropertiesRequest';
import UpdatePageElementAltTextRequest from './UpdatePageElementAltTextRequest';
import UpdatePageElementTransformRequest from './UpdatePageElementTransformRequest';
import UpdatePageElementsZOrderRequest from './UpdatePageElementsZOrderRequest';
import UpdatePagePropertiesRequest from './UpdatePagePropertiesRequest';
import UpdateParagraphStyleRequest from './UpdateParagraphStyleRequest';
import UpdateShapePropertiesRequest from './UpdateShapePropertiesRequest';
import UpdateSlidePropertiesRequest from './UpdateSlidePropertiesRequest';
import UpdateSlidesPositionRequest from './UpdateSlidesPositionRequest';
import UpdateTableBorderPropertiesRequest from './UpdateTableBorderPropertiesRequest';
import UpdateTableCellPropertiesRequest from './UpdateTableCellPropertiesRequest';
import UpdateTableColumnPropertiesRequest from './UpdateTableColumnPropertiesRequest';
import UpdateTableRowPropertiesRequest from './UpdateTableRowPropertiesRequest';
import UpdateTextStyleRequest from './UpdateTextStyleRequest';
import UpdateVideoPropertiesRequest from './UpdateVideoPropertiesRequest';

/**
 * The Request model module.
 * @module model/Request
 * @version v1
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * A single kind of update to apply to a presentation.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('createImage')) {
                obj['createImage'] = CreateImageRequest.constructFromObject(data['createImage']);
            }
            if (data.hasOwnProperty('createLine')) {
                obj['createLine'] = CreateLineRequest.constructFromObject(data['createLine']);
            }
            if (data.hasOwnProperty('createParagraphBullets')) {
                obj['createParagraphBullets'] = CreateParagraphBulletsRequest.constructFromObject(data['createParagraphBullets']);
            }
            if (data.hasOwnProperty('createShape')) {
                obj['createShape'] = CreateShapeRequest.constructFromObject(data['createShape']);
            }
            if (data.hasOwnProperty('createSheetsChart')) {
                obj['createSheetsChart'] = CreateSheetsChartRequest.constructFromObject(data['createSheetsChart']);
            }
            if (data.hasOwnProperty('createSlide')) {
                obj['createSlide'] = CreateSlideRequest.constructFromObject(data['createSlide']);
            }
            if (data.hasOwnProperty('createTable')) {
                obj['createTable'] = CreateTableRequest.constructFromObject(data['createTable']);
            }
            if (data.hasOwnProperty('createVideo')) {
                obj['createVideo'] = CreateVideoRequest.constructFromObject(data['createVideo']);
            }
            if (data.hasOwnProperty('deleteObject')) {
                obj['deleteObject'] = DeleteObjectRequest.constructFromObject(data['deleteObject']);
            }
            if (data.hasOwnProperty('deleteParagraphBullets')) {
                obj['deleteParagraphBullets'] = DeleteParagraphBulletsRequest.constructFromObject(data['deleteParagraphBullets']);
            }
            if (data.hasOwnProperty('deleteTableColumn')) {
                obj['deleteTableColumn'] = DeleteTableColumnRequest.constructFromObject(data['deleteTableColumn']);
            }
            if (data.hasOwnProperty('deleteTableRow')) {
                obj['deleteTableRow'] = DeleteTableRowRequest.constructFromObject(data['deleteTableRow']);
            }
            if (data.hasOwnProperty('deleteText')) {
                obj['deleteText'] = DeleteTextRequest.constructFromObject(data['deleteText']);
            }
            if (data.hasOwnProperty('duplicateObject')) {
                obj['duplicateObject'] = DuplicateObjectRequest.constructFromObject(data['duplicateObject']);
            }
            if (data.hasOwnProperty('groupObjects')) {
                obj['groupObjects'] = GroupObjectsRequest.constructFromObject(data['groupObjects']);
            }
            if (data.hasOwnProperty('insertTableColumns')) {
                obj['insertTableColumns'] = InsertTableColumnsRequest.constructFromObject(data['insertTableColumns']);
            }
            if (data.hasOwnProperty('insertTableRows')) {
                obj['insertTableRows'] = InsertTableRowsRequest.constructFromObject(data['insertTableRows']);
            }
            if (data.hasOwnProperty('insertText')) {
                obj['insertText'] = InsertTextRequest.constructFromObject(data['insertText']);
            }
            if (data.hasOwnProperty('mergeTableCells')) {
                obj['mergeTableCells'] = MergeTableCellsRequest.constructFromObject(data['mergeTableCells']);
            }
            if (data.hasOwnProperty('refreshSheetsChart')) {
                obj['refreshSheetsChart'] = RefreshSheetsChartRequest.constructFromObject(data['refreshSheetsChart']);
            }
            if (data.hasOwnProperty('replaceAllShapesWithImage')) {
                obj['replaceAllShapesWithImage'] = ReplaceAllShapesWithImageRequest.constructFromObject(data['replaceAllShapesWithImage']);
            }
            if (data.hasOwnProperty('replaceAllShapesWithSheetsChart')) {
                obj['replaceAllShapesWithSheetsChart'] = ReplaceAllShapesWithSheetsChartRequest.constructFromObject(data['replaceAllShapesWithSheetsChart']);
            }
            if (data.hasOwnProperty('replaceAllText')) {
                obj['replaceAllText'] = ReplaceAllTextRequest.constructFromObject(data['replaceAllText']);
            }
            if (data.hasOwnProperty('replaceImage')) {
                obj['replaceImage'] = ReplaceImageRequest.constructFromObject(data['replaceImage']);
            }
            if (data.hasOwnProperty('rerouteLine')) {
                obj['rerouteLine'] = RerouteLineRequest.constructFromObject(data['rerouteLine']);
            }
            if (data.hasOwnProperty('ungroupObjects')) {
                obj['ungroupObjects'] = UngroupObjectsRequest.constructFromObject(data['ungroupObjects']);
            }
            if (data.hasOwnProperty('unmergeTableCells')) {
                obj['unmergeTableCells'] = UnmergeTableCellsRequest.constructFromObject(data['unmergeTableCells']);
            }
            if (data.hasOwnProperty('updateImageProperties')) {
                obj['updateImageProperties'] = UpdateImagePropertiesRequest.constructFromObject(data['updateImageProperties']);
            }
            if (data.hasOwnProperty('updateLineCategory')) {
                obj['updateLineCategory'] = UpdateLineCategoryRequest.constructFromObject(data['updateLineCategory']);
            }
            if (data.hasOwnProperty('updateLineProperties')) {
                obj['updateLineProperties'] = UpdateLinePropertiesRequest.constructFromObject(data['updateLineProperties']);
            }
            if (data.hasOwnProperty('updatePageElementAltText')) {
                obj['updatePageElementAltText'] = UpdatePageElementAltTextRequest.constructFromObject(data['updatePageElementAltText']);
            }
            if (data.hasOwnProperty('updatePageElementTransform')) {
                obj['updatePageElementTransform'] = UpdatePageElementTransformRequest.constructFromObject(data['updatePageElementTransform']);
            }
            if (data.hasOwnProperty('updatePageElementsZOrder')) {
                obj['updatePageElementsZOrder'] = UpdatePageElementsZOrderRequest.constructFromObject(data['updatePageElementsZOrder']);
            }
            if (data.hasOwnProperty('updatePageProperties')) {
                obj['updatePageProperties'] = UpdatePagePropertiesRequest.constructFromObject(data['updatePageProperties']);
            }
            if (data.hasOwnProperty('updateParagraphStyle')) {
                obj['updateParagraphStyle'] = UpdateParagraphStyleRequest.constructFromObject(data['updateParagraphStyle']);
            }
            if (data.hasOwnProperty('updateShapeProperties')) {
                obj['updateShapeProperties'] = UpdateShapePropertiesRequest.constructFromObject(data['updateShapeProperties']);
            }
            if (data.hasOwnProperty('updateSlideProperties')) {
                obj['updateSlideProperties'] = UpdateSlidePropertiesRequest.constructFromObject(data['updateSlideProperties']);
            }
            if (data.hasOwnProperty('updateSlidesPosition')) {
                obj['updateSlidesPosition'] = UpdateSlidesPositionRequest.constructFromObject(data['updateSlidesPosition']);
            }
            if (data.hasOwnProperty('updateTableBorderProperties')) {
                obj['updateTableBorderProperties'] = UpdateTableBorderPropertiesRequest.constructFromObject(data['updateTableBorderProperties']);
            }
            if (data.hasOwnProperty('updateTableCellProperties')) {
                obj['updateTableCellProperties'] = UpdateTableCellPropertiesRequest.constructFromObject(data['updateTableCellProperties']);
            }
            if (data.hasOwnProperty('updateTableColumnProperties')) {
                obj['updateTableColumnProperties'] = UpdateTableColumnPropertiesRequest.constructFromObject(data['updateTableColumnProperties']);
            }
            if (data.hasOwnProperty('updateTableRowProperties')) {
                obj['updateTableRowProperties'] = UpdateTableRowPropertiesRequest.constructFromObject(data['updateTableRowProperties']);
            }
            if (data.hasOwnProperty('updateTextStyle')) {
                obj['updateTextStyle'] = UpdateTextStyleRequest.constructFromObject(data['updateTextStyle']);
            }
            if (data.hasOwnProperty('updateVideoProperties')) {
                obj['updateVideoProperties'] = UpdateVideoPropertiesRequest.constructFromObject(data['updateVideoProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // validate the optional field `createImage`
        if (data['createImage']) { // data not null
          CreateImageRequest.validateJSON(data['createImage']);
        }
        // validate the optional field `createLine`
        if (data['createLine']) { // data not null
          CreateLineRequest.validateJSON(data['createLine']);
        }
        // validate the optional field `createParagraphBullets`
        if (data['createParagraphBullets']) { // data not null
          CreateParagraphBulletsRequest.validateJSON(data['createParagraphBullets']);
        }
        // validate the optional field `createShape`
        if (data['createShape']) { // data not null
          CreateShapeRequest.validateJSON(data['createShape']);
        }
        // validate the optional field `createSheetsChart`
        if (data['createSheetsChart']) { // data not null
          CreateSheetsChartRequest.validateJSON(data['createSheetsChart']);
        }
        // validate the optional field `createSlide`
        if (data['createSlide']) { // data not null
          CreateSlideRequest.validateJSON(data['createSlide']);
        }
        // validate the optional field `createTable`
        if (data['createTable']) { // data not null
          CreateTableRequest.validateJSON(data['createTable']);
        }
        // validate the optional field `createVideo`
        if (data['createVideo']) { // data not null
          CreateVideoRequest.validateJSON(data['createVideo']);
        }
        // validate the optional field `deleteObject`
        if (data['deleteObject']) { // data not null
          DeleteObjectRequest.validateJSON(data['deleteObject']);
        }
        // validate the optional field `deleteParagraphBullets`
        if (data['deleteParagraphBullets']) { // data not null
          DeleteParagraphBulletsRequest.validateJSON(data['deleteParagraphBullets']);
        }
        // validate the optional field `deleteTableColumn`
        if (data['deleteTableColumn']) { // data not null
          DeleteTableColumnRequest.validateJSON(data['deleteTableColumn']);
        }
        // validate the optional field `deleteTableRow`
        if (data['deleteTableRow']) { // data not null
          DeleteTableRowRequest.validateJSON(data['deleteTableRow']);
        }
        // validate the optional field `deleteText`
        if (data['deleteText']) { // data not null
          DeleteTextRequest.validateJSON(data['deleteText']);
        }
        // validate the optional field `duplicateObject`
        if (data['duplicateObject']) { // data not null
          DuplicateObjectRequest.validateJSON(data['duplicateObject']);
        }
        // validate the optional field `groupObjects`
        if (data['groupObjects']) { // data not null
          GroupObjectsRequest.validateJSON(data['groupObjects']);
        }
        // validate the optional field `insertTableColumns`
        if (data['insertTableColumns']) { // data not null
          InsertTableColumnsRequest.validateJSON(data['insertTableColumns']);
        }
        // validate the optional field `insertTableRows`
        if (data['insertTableRows']) { // data not null
          InsertTableRowsRequest.validateJSON(data['insertTableRows']);
        }
        // validate the optional field `insertText`
        if (data['insertText']) { // data not null
          InsertTextRequest.validateJSON(data['insertText']);
        }
        // validate the optional field `mergeTableCells`
        if (data['mergeTableCells']) { // data not null
          MergeTableCellsRequest.validateJSON(data['mergeTableCells']);
        }
        // validate the optional field `refreshSheetsChart`
        if (data['refreshSheetsChart']) { // data not null
          RefreshSheetsChartRequest.validateJSON(data['refreshSheetsChart']);
        }
        // validate the optional field `replaceAllShapesWithImage`
        if (data['replaceAllShapesWithImage']) { // data not null
          ReplaceAllShapesWithImageRequest.validateJSON(data['replaceAllShapesWithImage']);
        }
        // validate the optional field `replaceAllShapesWithSheetsChart`
        if (data['replaceAllShapesWithSheetsChart']) { // data not null
          ReplaceAllShapesWithSheetsChartRequest.validateJSON(data['replaceAllShapesWithSheetsChart']);
        }
        // validate the optional field `replaceAllText`
        if (data['replaceAllText']) { // data not null
          ReplaceAllTextRequest.validateJSON(data['replaceAllText']);
        }
        // validate the optional field `replaceImage`
        if (data['replaceImage']) { // data not null
          ReplaceImageRequest.validateJSON(data['replaceImage']);
        }
        // validate the optional field `rerouteLine`
        if (data['rerouteLine']) { // data not null
          RerouteLineRequest.validateJSON(data['rerouteLine']);
        }
        // validate the optional field `ungroupObjects`
        if (data['ungroupObjects']) { // data not null
          UngroupObjectsRequest.validateJSON(data['ungroupObjects']);
        }
        // validate the optional field `unmergeTableCells`
        if (data['unmergeTableCells']) { // data not null
          UnmergeTableCellsRequest.validateJSON(data['unmergeTableCells']);
        }
        // validate the optional field `updateImageProperties`
        if (data['updateImageProperties']) { // data not null
          UpdateImagePropertiesRequest.validateJSON(data['updateImageProperties']);
        }
        // validate the optional field `updateLineCategory`
        if (data['updateLineCategory']) { // data not null
          UpdateLineCategoryRequest.validateJSON(data['updateLineCategory']);
        }
        // validate the optional field `updateLineProperties`
        if (data['updateLineProperties']) { // data not null
          UpdateLinePropertiesRequest.validateJSON(data['updateLineProperties']);
        }
        // validate the optional field `updatePageElementAltText`
        if (data['updatePageElementAltText']) { // data not null
          UpdatePageElementAltTextRequest.validateJSON(data['updatePageElementAltText']);
        }
        // validate the optional field `updatePageElementTransform`
        if (data['updatePageElementTransform']) { // data not null
          UpdatePageElementTransformRequest.validateJSON(data['updatePageElementTransform']);
        }
        // validate the optional field `updatePageElementsZOrder`
        if (data['updatePageElementsZOrder']) { // data not null
          UpdatePageElementsZOrderRequest.validateJSON(data['updatePageElementsZOrder']);
        }
        // validate the optional field `updatePageProperties`
        if (data['updatePageProperties']) { // data not null
          UpdatePagePropertiesRequest.validateJSON(data['updatePageProperties']);
        }
        // validate the optional field `updateParagraphStyle`
        if (data['updateParagraphStyle']) { // data not null
          UpdateParagraphStyleRequest.validateJSON(data['updateParagraphStyle']);
        }
        // validate the optional field `updateShapeProperties`
        if (data['updateShapeProperties']) { // data not null
          UpdateShapePropertiesRequest.validateJSON(data['updateShapeProperties']);
        }
        // validate the optional field `updateSlideProperties`
        if (data['updateSlideProperties']) { // data not null
          UpdateSlidePropertiesRequest.validateJSON(data['updateSlideProperties']);
        }
        // validate the optional field `updateSlidesPosition`
        if (data['updateSlidesPosition']) { // data not null
          UpdateSlidesPositionRequest.validateJSON(data['updateSlidesPosition']);
        }
        // validate the optional field `updateTableBorderProperties`
        if (data['updateTableBorderProperties']) { // data not null
          UpdateTableBorderPropertiesRequest.validateJSON(data['updateTableBorderProperties']);
        }
        // validate the optional field `updateTableCellProperties`
        if (data['updateTableCellProperties']) { // data not null
          UpdateTableCellPropertiesRequest.validateJSON(data['updateTableCellProperties']);
        }
        // validate the optional field `updateTableColumnProperties`
        if (data['updateTableColumnProperties']) { // data not null
          UpdateTableColumnPropertiesRequest.validateJSON(data['updateTableColumnProperties']);
        }
        // validate the optional field `updateTableRowProperties`
        if (data['updateTableRowProperties']) { // data not null
          UpdateTableRowPropertiesRequest.validateJSON(data['updateTableRowProperties']);
        }
        // validate the optional field `updateTextStyle`
        if (data['updateTextStyle']) { // data not null
          UpdateTextStyleRequest.validateJSON(data['updateTextStyle']);
        }
        // validate the optional field `updateVideoProperties`
        if (data['updateVideoProperties']) { // data not null
          UpdateVideoPropertiesRequest.validateJSON(data['updateVideoProperties']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateImageRequest} createImage
 */
Request.prototype['createImage'] = undefined;

/**
 * @member {module:model/CreateLineRequest} createLine
 */
Request.prototype['createLine'] = undefined;

/**
 * @member {module:model/CreateParagraphBulletsRequest} createParagraphBullets
 */
Request.prototype['createParagraphBullets'] = undefined;

/**
 * @member {module:model/CreateShapeRequest} createShape
 */
Request.prototype['createShape'] = undefined;

/**
 * @member {module:model/CreateSheetsChartRequest} createSheetsChart
 */
Request.prototype['createSheetsChart'] = undefined;

/**
 * @member {module:model/CreateSlideRequest} createSlide
 */
Request.prototype['createSlide'] = undefined;

/**
 * @member {module:model/CreateTableRequest} createTable
 */
Request.prototype['createTable'] = undefined;

/**
 * @member {module:model/CreateVideoRequest} createVideo
 */
Request.prototype['createVideo'] = undefined;

/**
 * @member {module:model/DeleteObjectRequest} deleteObject
 */
Request.prototype['deleteObject'] = undefined;

/**
 * @member {module:model/DeleteParagraphBulletsRequest} deleteParagraphBullets
 */
Request.prototype['deleteParagraphBullets'] = undefined;

/**
 * @member {module:model/DeleteTableColumnRequest} deleteTableColumn
 */
Request.prototype['deleteTableColumn'] = undefined;

/**
 * @member {module:model/DeleteTableRowRequest} deleteTableRow
 */
Request.prototype['deleteTableRow'] = undefined;

/**
 * @member {module:model/DeleteTextRequest} deleteText
 */
Request.prototype['deleteText'] = undefined;

/**
 * @member {module:model/DuplicateObjectRequest} duplicateObject
 */
Request.prototype['duplicateObject'] = undefined;

/**
 * @member {module:model/GroupObjectsRequest} groupObjects
 */
Request.prototype['groupObjects'] = undefined;

/**
 * @member {module:model/InsertTableColumnsRequest} insertTableColumns
 */
Request.prototype['insertTableColumns'] = undefined;

/**
 * @member {module:model/InsertTableRowsRequest} insertTableRows
 */
Request.prototype['insertTableRows'] = undefined;

/**
 * @member {module:model/InsertTextRequest} insertText
 */
Request.prototype['insertText'] = undefined;

/**
 * @member {module:model/MergeTableCellsRequest} mergeTableCells
 */
Request.prototype['mergeTableCells'] = undefined;

/**
 * @member {module:model/RefreshSheetsChartRequest} refreshSheetsChart
 */
Request.prototype['refreshSheetsChart'] = undefined;

/**
 * @member {module:model/ReplaceAllShapesWithImageRequest} replaceAllShapesWithImage
 */
Request.prototype['replaceAllShapesWithImage'] = undefined;

/**
 * @member {module:model/ReplaceAllShapesWithSheetsChartRequest} replaceAllShapesWithSheetsChart
 */
Request.prototype['replaceAllShapesWithSheetsChart'] = undefined;

/**
 * @member {module:model/ReplaceAllTextRequest} replaceAllText
 */
Request.prototype['replaceAllText'] = undefined;

/**
 * @member {module:model/ReplaceImageRequest} replaceImage
 */
Request.prototype['replaceImage'] = undefined;

/**
 * @member {module:model/RerouteLineRequest} rerouteLine
 */
Request.prototype['rerouteLine'] = undefined;

/**
 * @member {module:model/UngroupObjectsRequest} ungroupObjects
 */
Request.prototype['ungroupObjects'] = undefined;

/**
 * @member {module:model/UnmergeTableCellsRequest} unmergeTableCells
 */
Request.prototype['unmergeTableCells'] = undefined;

/**
 * @member {module:model/UpdateImagePropertiesRequest} updateImageProperties
 */
Request.prototype['updateImageProperties'] = undefined;

/**
 * @member {module:model/UpdateLineCategoryRequest} updateLineCategory
 */
Request.prototype['updateLineCategory'] = undefined;

/**
 * @member {module:model/UpdateLinePropertiesRequest} updateLineProperties
 */
Request.prototype['updateLineProperties'] = undefined;

/**
 * @member {module:model/UpdatePageElementAltTextRequest} updatePageElementAltText
 */
Request.prototype['updatePageElementAltText'] = undefined;

/**
 * @member {module:model/UpdatePageElementTransformRequest} updatePageElementTransform
 */
Request.prototype['updatePageElementTransform'] = undefined;

/**
 * @member {module:model/UpdatePageElementsZOrderRequest} updatePageElementsZOrder
 */
Request.prototype['updatePageElementsZOrder'] = undefined;

/**
 * @member {module:model/UpdatePagePropertiesRequest} updatePageProperties
 */
Request.prototype['updatePageProperties'] = undefined;

/**
 * @member {module:model/UpdateParagraphStyleRequest} updateParagraphStyle
 */
Request.prototype['updateParagraphStyle'] = undefined;

/**
 * @member {module:model/UpdateShapePropertiesRequest} updateShapeProperties
 */
Request.prototype['updateShapeProperties'] = undefined;

/**
 * @member {module:model/UpdateSlidePropertiesRequest} updateSlideProperties
 */
Request.prototype['updateSlideProperties'] = undefined;

/**
 * @member {module:model/UpdateSlidesPositionRequest} updateSlidesPosition
 */
Request.prototype['updateSlidesPosition'] = undefined;

/**
 * @member {module:model/UpdateTableBorderPropertiesRequest} updateTableBorderProperties
 */
Request.prototype['updateTableBorderProperties'] = undefined;

/**
 * @member {module:model/UpdateTableCellPropertiesRequest} updateTableCellProperties
 */
Request.prototype['updateTableCellProperties'] = undefined;

/**
 * @member {module:model/UpdateTableColumnPropertiesRequest} updateTableColumnProperties
 */
Request.prototype['updateTableColumnProperties'] = undefined;

/**
 * @member {module:model/UpdateTableRowPropertiesRequest} updateTableRowProperties
 */
Request.prototype['updateTableRowProperties'] = undefined;

/**
 * @member {module:model/UpdateTextStyleRequest} updateTextStyle
 */
Request.prototype['updateTextStyle'] = undefined;

/**
 * @member {module:model/UpdateVideoPropertiesRequest} updateVideoProperties
 */
Request.prototype['updateVideoProperties'] = undefined;






export default Request;

