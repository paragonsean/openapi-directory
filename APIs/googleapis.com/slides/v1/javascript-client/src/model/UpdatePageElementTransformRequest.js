/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffineTransform from './AffineTransform';

/**
 * The UpdatePageElementTransformRequest model module.
 * @module model/UpdatePageElementTransformRequest
 * @version v1
 */
class UpdatePageElementTransformRequest {
    /**
     * Constructs a new <code>UpdatePageElementTransformRequest</code>.
     * Updates the transform of a page element. Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for PageElement.transform for more details.
     * @alias module:model/UpdatePageElementTransformRequest
     */
    constructor() { 
        
        UpdatePageElementTransformRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatePageElementTransformRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePageElementTransformRequest} obj Optional instance to populate.
     * @return {module:model/UpdatePageElementTransformRequest} The populated <code>UpdatePageElementTransformRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePageElementTransformRequest();

            if (data.hasOwnProperty('applyMode')) {
                obj['applyMode'] = ApiClient.convertToType(data['applyMode'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = AffineTransform.constructFromObject(data['transform']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePageElementTransformRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePageElementTransformRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applyMode'] && !(typeof data['applyMode'] === 'string' || data['applyMode'] instanceof String)) {
            throw new Error("Expected the field `applyMode` to be a primitive type in the JSON string but got " + data['applyMode']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          AffineTransform.validateJSON(data['transform']);
        }

        return true;
    }


}



/**
 * The apply mode of the transform update.
 * @member {module:model/UpdatePageElementTransformRequest.ApplyModeEnum} applyMode
 */
UpdatePageElementTransformRequest.prototype['applyMode'] = undefined;

/**
 * The object ID of the page element to update.
 * @member {String} objectId
 */
UpdatePageElementTransformRequest.prototype['objectId'] = undefined;

/**
 * @member {module:model/AffineTransform} transform
 */
UpdatePageElementTransformRequest.prototype['transform'] = undefined;





/**
 * Allowed values for the <code>applyMode</code> property.
 * @enum {String}
 * @readonly
 */
UpdatePageElementTransformRequest['ApplyModeEnum'] = {

    /**
     * value: "APPLY_MODE_UNSPECIFIED"
     * @const
     */
    "APPLY_MODE_UNSPECIFIED": "APPLY_MODE_UNSPECIFIED",

    /**
     * value: "RELATIVE"
     * @const
     */
    "RELATIVE": "RELATIVE",

    /**
     * value: "ABSOLUTE"
     * @const
     */
    "ABSOLUTE": "ABSOLUTE"
};



export default UpdatePageElementTransformRequest;

