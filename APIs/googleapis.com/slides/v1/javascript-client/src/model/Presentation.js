/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Page from './Page';
import Size from './Size';

/**
 * The Presentation model module.
 * @module model/Presentation
 * @version v1
 */
class Presentation {
    /**
     * Constructs a new <code>Presentation</code>.
     * A Google Slides presentation.
     * @alias module:model/Presentation
     */
    constructor() { 
        
        Presentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Presentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Presentation} obj Optional instance to populate.
     * @return {module:model/Presentation} The populated <code>Presentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Presentation();

            if (data.hasOwnProperty('layouts')) {
                obj['layouts'] = ApiClient.convertToType(data['layouts'], [Page]);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('masters')) {
                obj['masters'] = ApiClient.convertToType(data['masters'], [Page]);
            }
            if (data.hasOwnProperty('notesMaster')) {
                obj['notesMaster'] = Page.constructFromObject(data['notesMaster']);
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = Size.constructFromObject(data['pageSize']);
            }
            if (data.hasOwnProperty('presentationId')) {
                obj['presentationId'] = ApiClient.convertToType(data['presentationId'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('slides')) {
                obj['slides'] = ApiClient.convertToType(data['slides'], [Page]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Presentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Presentation</code>.
     */
    static validateJSON(data) {
        if (data['layouts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layouts'])) {
                throw new Error("Expected the field `layouts` to be an array in the JSON data but got " + data['layouts']);
            }
            // validate the optional field `layouts` (array)
            for (const item of data['layouts']) {
                Page.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        if (data['masters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['masters'])) {
                throw new Error("Expected the field `masters` to be an array in the JSON data but got " + data['masters']);
            }
            // validate the optional field `masters` (array)
            for (const item of data['masters']) {
                Page.validateJSON(item);
            };
        }
        // validate the optional field `notesMaster`
        if (data['notesMaster']) { // data not null
          Page.validateJSON(data['notesMaster']);
        }
        // validate the optional field `pageSize`
        if (data['pageSize']) { // data not null
          Size.validateJSON(data['pageSize']);
        }
        // ensure the json data is a string
        if (data['presentationId'] && !(typeof data['presentationId'] === 'string' || data['presentationId'] instanceof String)) {
            throw new Error("Expected the field `presentationId` to be a primitive type in the JSON string but got " + data['presentationId']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        if (data['slides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slides'])) {
                throw new Error("Expected the field `slides` to be an array in the JSON data but got " + data['slides']);
            }
            // validate the optional field `slides` (array)
            for (const item of data['slides']) {
                Page.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.
 * @member {Array.<module:model/Page>} layouts
 */
Presentation.prototype['layouts'] = undefined;

/**
 * The locale of the presentation, as an IETF BCP 47 language tag.
 * @member {String} locale
 */
Presentation.prototype['locale'] = undefined;

/**
 * The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.
 * @member {Array.<module:model/Page>} masters
 */
Presentation.prototype['masters'] = undefined;

/**
 * @member {module:model/Page} notesMaster
 */
Presentation.prototype['notesMaster'] = undefined;

/**
 * @member {module:model/Size} pageSize
 */
Presentation.prototype['pageSize'] = undefined;

/**
 * The ID of the presentation.
 * @member {String} presentationId
 */
Presentation.prototype['presentationId'] = undefined;

/**
 * Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
 * @member {String} revisionId
 */
Presentation.prototype['revisionId'] = undefined;

/**
 * The slides in the presentation. A slide inherits properties from a slide layout.
 * @member {Array.<module:model/Page>} slides
 */
Presentation.prototype['slides'] = undefined;

/**
 * The title of the presentation.
 * @member {String} title
 */
Presentation.prototype['title'] = undefined;






export default Presentation;

