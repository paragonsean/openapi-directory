/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import Link from './Link';
import OptionalColor from './OptionalColor';
import WeightedFontFamily from './WeightedFontFamily';

/**
 * The TextStyle model module.
 * @module model/TextStyle
 * @version v1
 */
class TextStyle {
    /**
     * Constructs a new <code>TextStyle</code>.
     * Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
     * @alias module:model/TextStyle
     */
    constructor() { 
        
        TextStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextStyle} obj Optional instance to populate.
     * @return {module:model/TextStyle} The populated <code>TextStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextStyle();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = OptionalColor.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('baselineOffset')) {
                obj['baselineOffset'] = ApiClient.convertToType(data['baselineOffset'], 'String');
            }
            if (data.hasOwnProperty('bold')) {
                obj['bold'] = ApiClient.convertToType(data['bold'], 'Boolean');
            }
            if (data.hasOwnProperty('fontFamily')) {
                obj['fontFamily'] = ApiClient.convertToType(data['fontFamily'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = Dimension.constructFromObject(data['fontSize']);
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = OptionalColor.constructFromObject(data['foregroundColor']);
            }
            if (data.hasOwnProperty('italic')) {
                obj['italic'] = ApiClient.convertToType(data['italic'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('smallCaps')) {
                obj['smallCaps'] = ApiClient.convertToType(data['smallCaps'], 'Boolean');
            }
            if (data.hasOwnProperty('strikethrough')) {
                obj['strikethrough'] = ApiClient.convertToType(data['strikethrough'], 'Boolean');
            }
            if (data.hasOwnProperty('underline')) {
                obj['underline'] = ApiClient.convertToType(data['underline'], 'Boolean');
            }
            if (data.hasOwnProperty('weightedFontFamily')) {
                obj['weightedFontFamily'] = WeightedFontFamily.constructFromObject(data['weightedFontFamily']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextStyle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          OptionalColor.validateJSON(data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['baselineOffset'] && !(typeof data['baselineOffset'] === 'string' || data['baselineOffset'] instanceof String)) {
            throw new Error("Expected the field `baselineOffset` to be a primitive type in the JSON string but got " + data['baselineOffset']);
        }
        // ensure the json data is a string
        if (data['fontFamily'] && !(typeof data['fontFamily'] === 'string' || data['fontFamily'] instanceof String)) {
            throw new Error("Expected the field `fontFamily` to be a primitive type in the JSON string but got " + data['fontFamily']);
        }
        // validate the optional field `fontSize`
        if (data['fontSize']) { // data not null
          Dimension.validateJSON(data['fontSize']);
        }
        // validate the optional field `foregroundColor`
        if (data['foregroundColor']) { // data not null
          OptionalColor.validateJSON(data['foregroundColor']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // validate the optional field `weightedFontFamily`
        if (data['weightedFontFamily']) { // data not null
          WeightedFontFamily.validateJSON(data['weightedFontFamily']);
        }

        return true;
    }


}



/**
 * @member {module:model/OptionalColor} backgroundColor
 */
TextStyle.prototype['backgroundColor'] = undefined;

/**
 * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
 * @member {module:model/TextStyle.BaselineOffsetEnum} baselineOffset
 */
TextStyle.prototype['baselineOffset'] = undefined;

/**
 * Whether or not the text is rendered as bold.
 * @member {Boolean} bold
 */
TextStyle.prototype['bold'] = undefined;

/**
 * The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.
 * @member {String} fontFamily
 */
TextStyle.prototype['fontFamily'] = undefined;

/**
 * @member {module:model/Dimension} fontSize
 */
TextStyle.prototype['fontSize'] = undefined;

/**
 * @member {module:model/OptionalColor} foregroundColor
 */
TextStyle.prototype['foregroundColor'] = undefined;

/**
 * Whether or not the text is italicized.
 * @member {Boolean} italic
 */
TextStyle.prototype['italic'] = undefined;

/**
 * @member {module:model/Link} link
 */
TextStyle.prototype['link'] = undefined;

/**
 * Whether or not the text is in small capital letters.
 * @member {Boolean} smallCaps
 */
TextStyle.prototype['smallCaps'] = undefined;

/**
 * Whether or not the text is struck through.
 * @member {Boolean} strikethrough
 */
TextStyle.prototype['strikethrough'] = undefined;

/**
 * Whether or not the text is underlined.
 * @member {Boolean} underline
 */
TextStyle.prototype['underline'] = undefined;

/**
 * @member {module:model/WeightedFontFamily} weightedFontFamily
 */
TextStyle.prototype['weightedFontFamily'] = undefined;





/**
 * Allowed values for the <code>baselineOffset</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['BaselineOffsetEnum'] = {

    /**
     * value: "BASELINE_OFFSET_UNSPECIFIED"
     * @const
     */
    "BASELINE_OFFSET_UNSPECIFIED": "BASELINE_OFFSET_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "SUPERSCRIPT"
     * @const
     */
    "SUPERSCRIPT": "SUPERSCRIPT",

    /**
     * value: "SUBSCRIPT"
     * @const
     */
    "SUBSCRIPT": "SUBSCRIPT"
};



export default TextStyle;

