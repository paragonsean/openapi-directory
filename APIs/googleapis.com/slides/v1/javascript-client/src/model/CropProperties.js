/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CropProperties model module.
 * @module model/CropProperties
 * @version v1
 */
class CropProperties {
    /**
     * Constructs a new <code>CropProperties</code>.
     * The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object&#39;s original bounding rectangle towards inside, relative to the object&#39;s original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object&#39;s original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object&#39;s original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.
     * @alias module:model/CropProperties
     */
    constructor() { 
        
        CropProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CropProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CropProperties} obj Optional instance to populate.
     * @return {module:model/CropProperties} The populated <code>CropProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CropProperties();

            if (data.hasOwnProperty('angle')) {
                obj['angle'] = ApiClient.convertToType(data['angle'], 'Number');
            }
            if (data.hasOwnProperty('bottomOffset')) {
                obj['bottomOffset'] = ApiClient.convertToType(data['bottomOffset'], 'Number');
            }
            if (data.hasOwnProperty('leftOffset')) {
                obj['leftOffset'] = ApiClient.convertToType(data['leftOffset'], 'Number');
            }
            if (data.hasOwnProperty('rightOffset')) {
                obj['rightOffset'] = ApiClient.convertToType(data['rightOffset'], 'Number');
            }
            if (data.hasOwnProperty('topOffset')) {
                obj['topOffset'] = ApiClient.convertToType(data['topOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CropProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CropProperties</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.
 * @member {Number} angle
 */
CropProperties.prototype['angle'] = undefined;

/**
 * The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.
 * @member {Number} bottomOffset
 */
CropProperties.prototype['bottomOffset'] = undefined;

/**
 * The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.
 * @member {Number} leftOffset
 */
CropProperties.prototype['leftOffset'] = undefined;

/**
 * The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.
 * @member {Number} rightOffset
 */
CropProperties.prototype['rightOffset'] = undefined;

/**
 * The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.
 * @member {Number} topOffset
 */
CropProperties.prototype['topOffset'] = undefined;






export default CropProperties;

