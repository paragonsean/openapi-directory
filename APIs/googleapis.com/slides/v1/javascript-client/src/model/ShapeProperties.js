/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Autofit from './Autofit';
import Link from './Link';
import Outline from './Outline';
import Shadow from './Shadow';
import ShapeBackgroundFill from './ShapeBackgroundFill';

/**
 * The ShapeProperties model module.
 * @module model/ShapeProperties
 * @version v1
 */
class ShapeProperties {
    /**
     * Constructs a new <code>ShapeProperties</code>.
     * The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
     * @alias module:model/ShapeProperties
     */
    constructor() { 
        
        ShapeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShapeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShapeProperties} obj Optional instance to populate.
     * @return {module:model/ShapeProperties} The populated <code>ShapeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShapeProperties();

            if (data.hasOwnProperty('autofit')) {
                obj['autofit'] = Autofit.constructFromObject(data['autofit']);
            }
            if (data.hasOwnProperty('contentAlignment')) {
                obj['contentAlignment'] = ApiClient.convertToType(data['contentAlignment'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('outline')) {
                obj['outline'] = Outline.constructFromObject(data['outline']);
            }
            if (data.hasOwnProperty('shadow')) {
                obj['shadow'] = Shadow.constructFromObject(data['shadow']);
            }
            if (data.hasOwnProperty('shapeBackgroundFill')) {
                obj['shapeBackgroundFill'] = ShapeBackgroundFill.constructFromObject(data['shapeBackgroundFill']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShapeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShapeProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autofit`
        if (data['autofit']) { // data not null
          Autofit.validateJSON(data['autofit']);
        }
        // ensure the json data is a string
        if (data['contentAlignment'] && !(typeof data['contentAlignment'] === 'string' || data['contentAlignment'] instanceof String)) {
            throw new Error("Expected the field `contentAlignment` to be a primitive type in the JSON string but got " + data['contentAlignment']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // validate the optional field `outline`
        if (data['outline']) { // data not null
          Outline.validateJSON(data['outline']);
        }
        // validate the optional field `shadow`
        if (data['shadow']) { // data not null
          Shadow.validateJSON(data['shadow']);
        }
        // validate the optional field `shapeBackgroundFill`
        if (data['shapeBackgroundFill']) { // data not null
          ShapeBackgroundFill.validateJSON(data['shapeBackgroundFill']);
        }

        return true;
    }


}



/**
 * @member {module:model/Autofit} autofit
 */
ShapeProperties.prototype['autofit'] = undefined;

/**
 * The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
 * @member {module:model/ShapeProperties.ContentAlignmentEnum} contentAlignment
 */
ShapeProperties.prototype['contentAlignment'] = undefined;

/**
 * @member {module:model/Link} link
 */
ShapeProperties.prototype['link'] = undefined;

/**
 * @member {module:model/Outline} outline
 */
ShapeProperties.prototype['outline'] = undefined;

/**
 * @member {module:model/Shadow} shadow
 */
ShapeProperties.prototype['shadow'] = undefined;

/**
 * @member {module:model/ShapeBackgroundFill} shapeBackgroundFill
 */
ShapeProperties.prototype['shapeBackgroundFill'] = undefined;





/**
 * Allowed values for the <code>contentAlignment</code> property.
 * @enum {String}
 * @readonly
 */
ShapeProperties['ContentAlignmentEnum'] = {

    /**
     * value: "CONTENT_ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSPECIFIED": "CONTENT_ALIGNMENT_UNSPECIFIED",

    /**
     * value: "CONTENT_ALIGNMENT_UNSUPPORTED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSUPPORTED": "CONTENT_ALIGNMENT_UNSUPPORTED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "MIDDLE"
     * @const
     */
    "MIDDLE": "MIDDLE",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM"
};



export default ShapeProperties;

