/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateImageResponse from './CreateImageResponse';
import CreateLineResponse from './CreateLineResponse';
import CreateShapeResponse from './CreateShapeResponse';
import CreateSheetsChartResponse from './CreateSheetsChartResponse';
import CreateSlideResponse from './CreateSlideResponse';
import CreateTableResponse from './CreateTableResponse';
import CreateVideoResponse from './CreateVideoResponse';
import DuplicateObjectResponse from './DuplicateObjectResponse';
import GroupObjectsResponse from './GroupObjectsResponse';
import ReplaceAllShapesWithImageResponse from './ReplaceAllShapesWithImageResponse';
import ReplaceAllShapesWithSheetsChartResponse from './ReplaceAllShapesWithSheetsChartResponse';
import ReplaceAllTextResponse from './ReplaceAllTextResponse';

/**
 * The Response model module.
 * @module model/Response
 * @version v1
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * A single response from an update.
     * @alias module:model/Response
     */
    constructor() { 
        
        Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('createImage')) {
                obj['createImage'] = CreateImageResponse.constructFromObject(data['createImage']);
            }
            if (data.hasOwnProperty('createLine')) {
                obj['createLine'] = CreateLineResponse.constructFromObject(data['createLine']);
            }
            if (data.hasOwnProperty('createShape')) {
                obj['createShape'] = CreateShapeResponse.constructFromObject(data['createShape']);
            }
            if (data.hasOwnProperty('createSheetsChart')) {
                obj['createSheetsChart'] = CreateSheetsChartResponse.constructFromObject(data['createSheetsChart']);
            }
            if (data.hasOwnProperty('createSlide')) {
                obj['createSlide'] = CreateSlideResponse.constructFromObject(data['createSlide']);
            }
            if (data.hasOwnProperty('createTable')) {
                obj['createTable'] = CreateTableResponse.constructFromObject(data['createTable']);
            }
            if (data.hasOwnProperty('createVideo')) {
                obj['createVideo'] = CreateVideoResponse.constructFromObject(data['createVideo']);
            }
            if (data.hasOwnProperty('duplicateObject')) {
                obj['duplicateObject'] = DuplicateObjectResponse.constructFromObject(data['duplicateObject']);
            }
            if (data.hasOwnProperty('groupObjects')) {
                obj['groupObjects'] = GroupObjectsResponse.constructFromObject(data['groupObjects']);
            }
            if (data.hasOwnProperty('replaceAllShapesWithImage')) {
                obj['replaceAllShapesWithImage'] = ReplaceAllShapesWithImageResponse.constructFromObject(data['replaceAllShapesWithImage']);
            }
            if (data.hasOwnProperty('replaceAllShapesWithSheetsChart')) {
                obj['replaceAllShapesWithSheetsChart'] = ReplaceAllShapesWithSheetsChartResponse.constructFromObject(data['replaceAllShapesWithSheetsChart']);
            }
            if (data.hasOwnProperty('replaceAllText')) {
                obj['replaceAllText'] = ReplaceAllTextResponse.constructFromObject(data['replaceAllText']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `createImage`
        if (data['createImage']) { // data not null
          CreateImageResponse.validateJSON(data['createImage']);
        }
        // validate the optional field `createLine`
        if (data['createLine']) { // data not null
          CreateLineResponse.validateJSON(data['createLine']);
        }
        // validate the optional field `createShape`
        if (data['createShape']) { // data not null
          CreateShapeResponse.validateJSON(data['createShape']);
        }
        // validate the optional field `createSheetsChart`
        if (data['createSheetsChart']) { // data not null
          CreateSheetsChartResponse.validateJSON(data['createSheetsChart']);
        }
        // validate the optional field `createSlide`
        if (data['createSlide']) { // data not null
          CreateSlideResponse.validateJSON(data['createSlide']);
        }
        // validate the optional field `createTable`
        if (data['createTable']) { // data not null
          CreateTableResponse.validateJSON(data['createTable']);
        }
        // validate the optional field `createVideo`
        if (data['createVideo']) { // data not null
          CreateVideoResponse.validateJSON(data['createVideo']);
        }
        // validate the optional field `duplicateObject`
        if (data['duplicateObject']) { // data not null
          DuplicateObjectResponse.validateJSON(data['duplicateObject']);
        }
        // validate the optional field `groupObjects`
        if (data['groupObjects']) { // data not null
          GroupObjectsResponse.validateJSON(data['groupObjects']);
        }
        // validate the optional field `replaceAllShapesWithImage`
        if (data['replaceAllShapesWithImage']) { // data not null
          ReplaceAllShapesWithImageResponse.validateJSON(data['replaceAllShapesWithImage']);
        }
        // validate the optional field `replaceAllShapesWithSheetsChart`
        if (data['replaceAllShapesWithSheetsChart']) { // data not null
          ReplaceAllShapesWithSheetsChartResponse.validateJSON(data['replaceAllShapesWithSheetsChart']);
        }
        // validate the optional field `replaceAllText`
        if (data['replaceAllText']) { // data not null
          ReplaceAllTextResponse.validateJSON(data['replaceAllText']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateImageResponse} createImage
 */
Response.prototype['createImage'] = undefined;

/**
 * @member {module:model/CreateLineResponse} createLine
 */
Response.prototype['createLine'] = undefined;

/**
 * @member {module:model/CreateShapeResponse} createShape
 */
Response.prototype['createShape'] = undefined;

/**
 * @member {module:model/CreateSheetsChartResponse} createSheetsChart
 */
Response.prototype['createSheetsChart'] = undefined;

/**
 * @member {module:model/CreateSlideResponse} createSlide
 */
Response.prototype['createSlide'] = undefined;

/**
 * @member {module:model/CreateTableResponse} createTable
 */
Response.prototype['createTable'] = undefined;

/**
 * @member {module:model/CreateVideoResponse} createVideo
 */
Response.prototype['createVideo'] = undefined;

/**
 * @member {module:model/DuplicateObjectResponse} duplicateObject
 */
Response.prototype['duplicateObject'] = undefined;

/**
 * @member {module:model/GroupObjectsResponse} groupObjects
 */
Response.prototype['groupObjects'] = undefined;

/**
 * @member {module:model/ReplaceAllShapesWithImageResponse} replaceAllShapesWithImage
 */
Response.prototype['replaceAllShapesWithImage'] = undefined;

/**
 * @member {module:model/ReplaceAllShapesWithSheetsChartResponse} replaceAllShapesWithSheetsChart
 */
Response.prototype['replaceAllShapesWithSheetsChart'] = undefined;

/**
 * @member {module:model/ReplaceAllTextResponse} replaceAllText
 */
Response.prototype['replaceAllText'] = undefined;






export default Response;

