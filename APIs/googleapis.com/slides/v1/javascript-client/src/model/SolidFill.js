/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpaqueColor from './OpaqueColor';

/**
 * The SolidFill model module.
 * @module model/SolidFill
 * @version v1
 */
class SolidFill {
    /**
     * Constructs a new <code>SolidFill</code>.
     * A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
     * @alias module:model/SolidFill
     */
    constructor() { 
        
        SolidFill.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SolidFill</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolidFill} obj Optional instance to populate.
     * @return {module:model/SolidFill} The populated <code>SolidFill</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolidFill();

            if (data.hasOwnProperty('alpha')) {
                obj['alpha'] = ApiClient.convertToType(data['alpha'], 'Number');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = OpaqueColor.constructFromObject(data['color']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolidFill</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolidFill</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          OpaqueColor.validateJSON(data['color']);
        }

        return true;
    }


}



/**
 * The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.
 * @member {Number} alpha
 */
SolidFill.prototype['alpha'] = undefined;

/**
 * @member {module:model/OpaqueColor} color
 */
SolidFill.prototype['color'] = undefined;






export default SolidFill;

