/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThemeColorPair from './ThemeColorPair';

/**
 * The ColorScheme model module.
 * @module model/ColorScheme
 * @version v1
 */
class ColorScheme {
    /**
     * Constructs a new <code>ColorScheme</code>.
     * The palette of predefined colors for a page.
     * @alias module:model/ColorScheme
     */
    constructor() { 
        
        ColorScheme.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColorScheme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColorScheme} obj Optional instance to populate.
     * @return {module:model/ColorScheme} The populated <code>ColorScheme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColorScheme();

            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [ThemeColorPair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColorScheme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColorScheme</code>.
     */
    static validateJSON(data) {
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                ThemeColorPair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ThemeColorType and corresponding concrete color pairs.
 * @member {Array.<module:model/ThemeColorPair>} colors
 */
ColorScheme.prototype['colors'] = undefined;






export default ColorScheme;

