/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LayoutReference model module.
 * @module model/LayoutReference
 * @version v1
 */
class LayoutReference {
    /**
     * Constructs a new <code>LayoutReference</code>.
     * Slide layout reference. This may reference either: - A predefined layout - One of the layouts in the presentation.
     * @alias module:model/LayoutReference
     */
    constructor() { 
        
        LayoutReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LayoutReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LayoutReference} obj Optional instance to populate.
     * @return {module:model/LayoutReference} The populated <code>LayoutReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LayoutReference();

            if (data.hasOwnProperty('layoutId')) {
                obj['layoutId'] = ApiClient.convertToType(data['layoutId'], 'String');
            }
            if (data.hasOwnProperty('predefinedLayout')) {
                obj['predefinedLayout'] = ApiClient.convertToType(data['predefinedLayout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LayoutReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LayoutReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['layoutId'] && !(typeof data['layoutId'] === 'string' || data['layoutId'] instanceof String)) {
            throw new Error("Expected the field `layoutId` to be a primitive type in the JSON string but got " + data['layoutId']);
        }
        // ensure the json data is a string
        if (data['predefinedLayout'] && !(typeof data['predefinedLayout'] === 'string' || data['predefinedLayout'] instanceof String)) {
            throw new Error("Expected the field `predefinedLayout` to be a primitive type in the JSON string but got " + data['predefinedLayout']);
        }

        return true;
    }


}



/**
 * Layout ID: the object ID of one of the layouts in the presentation.
 * @member {String} layoutId
 */
LayoutReference.prototype['layoutId'] = undefined;

/**
 * Predefined layout.
 * @member {module:model/LayoutReference.PredefinedLayoutEnum} predefinedLayout
 */
LayoutReference.prototype['predefinedLayout'] = undefined;





/**
 * Allowed values for the <code>predefinedLayout</code> property.
 * @enum {String}
 * @readonly
 */
LayoutReference['PredefinedLayoutEnum'] = {

    /**
     * value: "PREDEFINED_LAYOUT_UNSPECIFIED"
     * @const
     */
    "PREDEFINED_LAYOUT_UNSPECIFIED": "PREDEFINED_LAYOUT_UNSPECIFIED",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK",

    /**
     * value: "CAPTION_ONLY"
     * @const
     */
    "CAPTION_ONLY": "CAPTION_ONLY",

    /**
     * value: "TITLE"
     * @const
     */
    "TITLE": "TITLE",

    /**
     * value: "TITLE_AND_BODY"
     * @const
     */
    "TITLE_AND_BODY": "TITLE_AND_BODY",

    /**
     * value: "TITLE_AND_TWO_COLUMNS"
     * @const
     */
    "TITLE_AND_TWO_COLUMNS": "TITLE_AND_TWO_COLUMNS",

    /**
     * value: "TITLE_ONLY"
     * @const
     */
    "TITLE_ONLY": "TITLE_ONLY",

    /**
     * value: "SECTION_HEADER"
     * @const
     */
    "SECTION_HEADER": "SECTION_HEADER",

    /**
     * value: "SECTION_TITLE_AND_DESCRIPTION"
     * @const
     */
    "SECTION_TITLE_AND_DESCRIPTION": "SECTION_TITLE_AND_DESCRIPTION",

    /**
     * value: "ONE_COLUMN_TEXT"
     * @const
     */
    "ONE_COLUMN_TEXT": "ONE_COLUMN_TEXT",

    /**
     * value: "MAIN_POINT"
     * @const
     */
    "MAIN_POINT": "MAIN_POINT",

    /**
     * value: "BIG_NUMBER"
     * @const
     */
    "BIG_NUMBER": "BIG_NUMBER"
};



export default LayoutReference;

