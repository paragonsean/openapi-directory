/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of Page that are only relevant for pages with page_type NOTES.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotesProperties {
  public static final String SERIALIZED_NAME_SPEAKER_NOTES_OBJECT_ID = "speakerNotesObjectId";
  @SerializedName(SERIALIZED_NAME_SPEAKER_NOTES_OBJECT_ID)
  private String speakerNotesObjectId;

  public NotesProperties() {
  }

  public NotesProperties speakerNotesObjectId(String speakerNotesObjectId) {
    this.speakerNotesObjectId = speakerNotesObjectId;
    return this;
  }

  /**
   * The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The &#x60;GetPresentation&#x60; or &#x60;GetPage&#x60; action will always return the latest object ID.
   * @return speakerNotesObjectId
   */
  @javax.annotation.Nullable
  public String getSpeakerNotesObjectId() {
    return speakerNotesObjectId;
  }

  public void setSpeakerNotesObjectId(String speakerNotesObjectId) {
    this.speakerNotesObjectId = speakerNotesObjectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotesProperties notesProperties = (NotesProperties) o;
    return Objects.equals(this.speakerNotesObjectId, notesProperties.speakerNotesObjectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(speakerNotesObjectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotesProperties {\n");
    sb.append("    speakerNotesObjectId: ").append(toIndentedString(speakerNotesObjectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("speakerNotesObjectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotesProperties is not found in the empty JSON string", NotesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("speakerNotesObjectId") != null && !jsonObj.get("speakerNotesObjectId").isJsonNull()) && !jsonObj.get("speakerNotesObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `speakerNotesObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("speakerNotesObjectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NotesProperties>() {
           @Override
           public void write(JsonWriter out, NotesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotesProperties
   * @throws IOException if the JSON string is invalid with respect to NotesProperties
   */
  public static NotesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotesProperties.class);
  }

  /**
   * Convert an instance of NotesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

