/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SheetsChartProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A PageElement kind representing a linked chart embedded from Google Sheets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SheetsChart {
  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private Integer chartId;

  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_SHEETS_CHART_PROPERTIES = "sheetsChartProperties";
  @SerializedName(SERIALIZED_NAME_SHEETS_CHART_PROPERTIES)
  private SheetsChartProperties sheetsChartProperties;

  public static final String SERIALIZED_NAME_SPREADSHEET_ID = "spreadsheetId";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_ID)
  private String spreadsheetId;

  public SheetsChart() {
  }

  public SheetsChart chartId(Integer chartId) {
    this.chartId = chartId;
    return this;
  }

  /**
   * The ID of the specific chart in the Google Sheets spreadsheet that is embedded.
   * @return chartId
   */
  @javax.annotation.Nullable
  public Integer getChartId() {
    return chartId;
  }

  public void setChartId(Integer chartId) {
    this.chartId = chartId;
  }


  public SheetsChart contentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  /**
   * The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation&#39;s sharing settings change.
   * @return contentUrl
   */
  @javax.annotation.Nullable
  public String getContentUrl() {
    return contentUrl;
  }

  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }


  public SheetsChart sheetsChartProperties(SheetsChartProperties sheetsChartProperties) {
    this.sheetsChartProperties = sheetsChartProperties;
    return this;
  }

  /**
   * Get sheetsChartProperties
   * @return sheetsChartProperties
   */
  @javax.annotation.Nullable
  public SheetsChartProperties getSheetsChartProperties() {
    return sheetsChartProperties;
  }

  public void setSheetsChartProperties(SheetsChartProperties sheetsChartProperties) {
    this.sheetsChartProperties = sheetsChartProperties;
  }


  public SheetsChart spreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
    return this;
  }

  /**
   * The ID of the Google Sheets spreadsheet that contains the source chart.
   * @return spreadsheetId
   */
  @javax.annotation.Nullable
  public String getSpreadsheetId() {
    return spreadsheetId;
  }

  public void setSpreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SheetsChart sheetsChart = (SheetsChart) o;
    return Objects.equals(this.chartId, sheetsChart.chartId) &&
        Objects.equals(this.contentUrl, sheetsChart.contentUrl) &&
        Objects.equals(this.sheetsChartProperties, sheetsChart.sheetsChartProperties) &&
        Objects.equals(this.spreadsheetId, sheetsChart.spreadsheetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartId, contentUrl, sheetsChartProperties, spreadsheetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SheetsChart {\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    sheetsChartProperties: ").append(toIndentedString(sheetsChartProperties)).append("\n");
    sb.append("    spreadsheetId: ").append(toIndentedString(spreadsheetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chartId");
    openapiFields.add("contentUrl");
    openapiFields.add("sheetsChartProperties");
    openapiFields.add("spreadsheetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SheetsChart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SheetsChart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SheetsChart is not found in the empty JSON string", SheetsChart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SheetsChart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SheetsChart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentUrl") != null && !jsonObj.get("contentUrl").isJsonNull()) && !jsonObj.get("contentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentUrl").toString()));
      }
      // validate the optional field `sheetsChartProperties`
      if (jsonObj.get("sheetsChartProperties") != null && !jsonObj.get("sheetsChartProperties").isJsonNull()) {
        SheetsChartProperties.validateJsonElement(jsonObj.get("sheetsChartProperties"));
      }
      if ((jsonObj.get("spreadsheetId") != null && !jsonObj.get("spreadsheetId").isJsonNull()) && !jsonObj.get("spreadsheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SheetsChart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SheetsChart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SheetsChart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SheetsChart.class));

       return (TypeAdapter<T>) new TypeAdapter<SheetsChart>() {
           @Override
           public void write(JsonWriter out, SheetsChart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SheetsChart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SheetsChart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SheetsChart
   * @throws IOException if the JSON string is invalid with respect to SheetsChart
   */
  public static SheetsChart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SheetsChart.class);
  }

  /**
   * Convert an instance of SheetsChart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

