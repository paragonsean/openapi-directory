/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateImageResponse;
import org.openapitools.client.model.CreateLineResponse;
import org.openapitools.client.model.CreateShapeResponse;
import org.openapitools.client.model.CreateSheetsChartResponse;
import org.openapitools.client.model.CreateSlideResponse;
import org.openapitools.client.model.CreateTableResponse;
import org.openapitools.client.model.CreateVideoResponse;
import org.openapitools.client.model.DuplicateObjectResponse;
import org.openapitools.client.model.GroupObjectsResponse;
import org.openapitools.client.model.ReplaceAllShapesWithImageResponse;
import org.openapitools.client.model.ReplaceAllShapesWithSheetsChartResponse;
import org.openapitools.client.model.ReplaceAllTextResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single response from an update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response {
  public static final String SERIALIZED_NAME_CREATE_IMAGE = "createImage";
  @SerializedName(SERIALIZED_NAME_CREATE_IMAGE)
  private CreateImageResponse createImage;

  public static final String SERIALIZED_NAME_CREATE_LINE = "createLine";
  @SerializedName(SERIALIZED_NAME_CREATE_LINE)
  private CreateLineResponse createLine;

  public static final String SERIALIZED_NAME_CREATE_SHAPE = "createShape";
  @SerializedName(SERIALIZED_NAME_CREATE_SHAPE)
  private CreateShapeResponse createShape;

  public static final String SERIALIZED_NAME_CREATE_SHEETS_CHART = "createSheetsChart";
  @SerializedName(SERIALIZED_NAME_CREATE_SHEETS_CHART)
  private CreateSheetsChartResponse createSheetsChart;

  public static final String SERIALIZED_NAME_CREATE_SLIDE = "createSlide";
  @SerializedName(SERIALIZED_NAME_CREATE_SLIDE)
  private CreateSlideResponse createSlide;

  public static final String SERIALIZED_NAME_CREATE_TABLE = "createTable";
  @SerializedName(SERIALIZED_NAME_CREATE_TABLE)
  private CreateTableResponse createTable;

  public static final String SERIALIZED_NAME_CREATE_VIDEO = "createVideo";
  @SerializedName(SERIALIZED_NAME_CREATE_VIDEO)
  private CreateVideoResponse createVideo;

  public static final String SERIALIZED_NAME_DUPLICATE_OBJECT = "duplicateObject";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_OBJECT)
  private DuplicateObjectResponse duplicateObject;

  public static final String SERIALIZED_NAME_GROUP_OBJECTS = "groupObjects";
  @SerializedName(SERIALIZED_NAME_GROUP_OBJECTS)
  private GroupObjectsResponse groupObjects;

  public static final String SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_IMAGE = "replaceAllShapesWithImage";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_IMAGE)
  private ReplaceAllShapesWithImageResponse replaceAllShapesWithImage;

  public static final String SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_SHEETS_CHART = "replaceAllShapesWithSheetsChart";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_SHEETS_CHART)
  private ReplaceAllShapesWithSheetsChartResponse replaceAllShapesWithSheetsChart;

  public static final String SERIALIZED_NAME_REPLACE_ALL_TEXT = "replaceAllText";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_TEXT)
  private ReplaceAllTextResponse replaceAllText;

  public Response() {
  }

  public Response createImage(CreateImageResponse createImage) {
    this.createImage = createImage;
    return this;
  }

  /**
   * Get createImage
   * @return createImage
   */
  @javax.annotation.Nullable
  public CreateImageResponse getCreateImage() {
    return createImage;
  }

  public void setCreateImage(CreateImageResponse createImage) {
    this.createImage = createImage;
  }


  public Response createLine(CreateLineResponse createLine) {
    this.createLine = createLine;
    return this;
  }

  /**
   * Get createLine
   * @return createLine
   */
  @javax.annotation.Nullable
  public CreateLineResponse getCreateLine() {
    return createLine;
  }

  public void setCreateLine(CreateLineResponse createLine) {
    this.createLine = createLine;
  }


  public Response createShape(CreateShapeResponse createShape) {
    this.createShape = createShape;
    return this;
  }

  /**
   * Get createShape
   * @return createShape
   */
  @javax.annotation.Nullable
  public CreateShapeResponse getCreateShape() {
    return createShape;
  }

  public void setCreateShape(CreateShapeResponse createShape) {
    this.createShape = createShape;
  }


  public Response createSheetsChart(CreateSheetsChartResponse createSheetsChart) {
    this.createSheetsChart = createSheetsChart;
    return this;
  }

  /**
   * Get createSheetsChart
   * @return createSheetsChart
   */
  @javax.annotation.Nullable
  public CreateSheetsChartResponse getCreateSheetsChart() {
    return createSheetsChart;
  }

  public void setCreateSheetsChart(CreateSheetsChartResponse createSheetsChart) {
    this.createSheetsChart = createSheetsChart;
  }


  public Response createSlide(CreateSlideResponse createSlide) {
    this.createSlide = createSlide;
    return this;
  }

  /**
   * Get createSlide
   * @return createSlide
   */
  @javax.annotation.Nullable
  public CreateSlideResponse getCreateSlide() {
    return createSlide;
  }

  public void setCreateSlide(CreateSlideResponse createSlide) {
    this.createSlide = createSlide;
  }


  public Response createTable(CreateTableResponse createTable) {
    this.createTable = createTable;
    return this;
  }

  /**
   * Get createTable
   * @return createTable
   */
  @javax.annotation.Nullable
  public CreateTableResponse getCreateTable() {
    return createTable;
  }

  public void setCreateTable(CreateTableResponse createTable) {
    this.createTable = createTable;
  }


  public Response createVideo(CreateVideoResponse createVideo) {
    this.createVideo = createVideo;
    return this;
  }

  /**
   * Get createVideo
   * @return createVideo
   */
  @javax.annotation.Nullable
  public CreateVideoResponse getCreateVideo() {
    return createVideo;
  }

  public void setCreateVideo(CreateVideoResponse createVideo) {
    this.createVideo = createVideo;
  }


  public Response duplicateObject(DuplicateObjectResponse duplicateObject) {
    this.duplicateObject = duplicateObject;
    return this;
  }

  /**
   * Get duplicateObject
   * @return duplicateObject
   */
  @javax.annotation.Nullable
  public DuplicateObjectResponse getDuplicateObject() {
    return duplicateObject;
  }

  public void setDuplicateObject(DuplicateObjectResponse duplicateObject) {
    this.duplicateObject = duplicateObject;
  }


  public Response groupObjects(GroupObjectsResponse groupObjects) {
    this.groupObjects = groupObjects;
    return this;
  }

  /**
   * Get groupObjects
   * @return groupObjects
   */
  @javax.annotation.Nullable
  public GroupObjectsResponse getGroupObjects() {
    return groupObjects;
  }

  public void setGroupObjects(GroupObjectsResponse groupObjects) {
    this.groupObjects = groupObjects;
  }


  public Response replaceAllShapesWithImage(ReplaceAllShapesWithImageResponse replaceAllShapesWithImage) {
    this.replaceAllShapesWithImage = replaceAllShapesWithImage;
    return this;
  }

  /**
   * Get replaceAllShapesWithImage
   * @return replaceAllShapesWithImage
   */
  @javax.annotation.Nullable
  public ReplaceAllShapesWithImageResponse getReplaceAllShapesWithImage() {
    return replaceAllShapesWithImage;
  }

  public void setReplaceAllShapesWithImage(ReplaceAllShapesWithImageResponse replaceAllShapesWithImage) {
    this.replaceAllShapesWithImage = replaceAllShapesWithImage;
  }


  public Response replaceAllShapesWithSheetsChart(ReplaceAllShapesWithSheetsChartResponse replaceAllShapesWithSheetsChart) {
    this.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart;
    return this;
  }

  /**
   * Get replaceAllShapesWithSheetsChart
   * @return replaceAllShapesWithSheetsChart
   */
  @javax.annotation.Nullable
  public ReplaceAllShapesWithSheetsChartResponse getReplaceAllShapesWithSheetsChart() {
    return replaceAllShapesWithSheetsChart;
  }

  public void setReplaceAllShapesWithSheetsChart(ReplaceAllShapesWithSheetsChartResponse replaceAllShapesWithSheetsChart) {
    this.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart;
  }


  public Response replaceAllText(ReplaceAllTextResponse replaceAllText) {
    this.replaceAllText = replaceAllText;
    return this;
  }

  /**
   * Get replaceAllText
   * @return replaceAllText
   */
  @javax.annotation.Nullable
  public ReplaceAllTextResponse getReplaceAllText() {
    return replaceAllText;
  }

  public void setReplaceAllText(ReplaceAllTextResponse replaceAllText) {
    this.replaceAllText = replaceAllText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.createImage, response.createImage) &&
        Objects.equals(this.createLine, response.createLine) &&
        Objects.equals(this.createShape, response.createShape) &&
        Objects.equals(this.createSheetsChart, response.createSheetsChart) &&
        Objects.equals(this.createSlide, response.createSlide) &&
        Objects.equals(this.createTable, response.createTable) &&
        Objects.equals(this.createVideo, response.createVideo) &&
        Objects.equals(this.duplicateObject, response.duplicateObject) &&
        Objects.equals(this.groupObjects, response.groupObjects) &&
        Objects.equals(this.replaceAllShapesWithImage, response.replaceAllShapesWithImage) &&
        Objects.equals(this.replaceAllShapesWithSheetsChart, response.replaceAllShapesWithSheetsChart) &&
        Objects.equals(this.replaceAllText, response.replaceAllText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createImage, createLine, createShape, createSheetsChart, createSlide, createTable, createVideo, duplicateObject, groupObjects, replaceAllShapesWithImage, replaceAllShapesWithSheetsChart, replaceAllText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    createImage: ").append(toIndentedString(createImage)).append("\n");
    sb.append("    createLine: ").append(toIndentedString(createLine)).append("\n");
    sb.append("    createShape: ").append(toIndentedString(createShape)).append("\n");
    sb.append("    createSheetsChart: ").append(toIndentedString(createSheetsChart)).append("\n");
    sb.append("    createSlide: ").append(toIndentedString(createSlide)).append("\n");
    sb.append("    createTable: ").append(toIndentedString(createTable)).append("\n");
    sb.append("    createVideo: ").append(toIndentedString(createVideo)).append("\n");
    sb.append("    duplicateObject: ").append(toIndentedString(duplicateObject)).append("\n");
    sb.append("    groupObjects: ").append(toIndentedString(groupObjects)).append("\n");
    sb.append("    replaceAllShapesWithImage: ").append(toIndentedString(replaceAllShapesWithImage)).append("\n");
    sb.append("    replaceAllShapesWithSheetsChart: ").append(toIndentedString(replaceAllShapesWithSheetsChart)).append("\n");
    sb.append("    replaceAllText: ").append(toIndentedString(replaceAllText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createImage");
    openapiFields.add("createLine");
    openapiFields.add("createShape");
    openapiFields.add("createSheetsChart");
    openapiFields.add("createSlide");
    openapiFields.add("createTable");
    openapiFields.add("createVideo");
    openapiFields.add("duplicateObject");
    openapiFields.add("groupObjects");
    openapiFields.add("replaceAllShapesWithImage");
    openapiFields.add("replaceAllShapesWithSheetsChart");
    openapiFields.add("replaceAllText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createImage`
      if (jsonObj.get("createImage") != null && !jsonObj.get("createImage").isJsonNull()) {
        CreateImageResponse.validateJsonElement(jsonObj.get("createImage"));
      }
      // validate the optional field `createLine`
      if (jsonObj.get("createLine") != null && !jsonObj.get("createLine").isJsonNull()) {
        CreateLineResponse.validateJsonElement(jsonObj.get("createLine"));
      }
      // validate the optional field `createShape`
      if (jsonObj.get("createShape") != null && !jsonObj.get("createShape").isJsonNull()) {
        CreateShapeResponse.validateJsonElement(jsonObj.get("createShape"));
      }
      // validate the optional field `createSheetsChart`
      if (jsonObj.get("createSheetsChart") != null && !jsonObj.get("createSheetsChart").isJsonNull()) {
        CreateSheetsChartResponse.validateJsonElement(jsonObj.get("createSheetsChart"));
      }
      // validate the optional field `createSlide`
      if (jsonObj.get("createSlide") != null && !jsonObj.get("createSlide").isJsonNull()) {
        CreateSlideResponse.validateJsonElement(jsonObj.get("createSlide"));
      }
      // validate the optional field `createTable`
      if (jsonObj.get("createTable") != null && !jsonObj.get("createTable").isJsonNull()) {
        CreateTableResponse.validateJsonElement(jsonObj.get("createTable"));
      }
      // validate the optional field `createVideo`
      if (jsonObj.get("createVideo") != null && !jsonObj.get("createVideo").isJsonNull()) {
        CreateVideoResponse.validateJsonElement(jsonObj.get("createVideo"));
      }
      // validate the optional field `duplicateObject`
      if (jsonObj.get("duplicateObject") != null && !jsonObj.get("duplicateObject").isJsonNull()) {
        DuplicateObjectResponse.validateJsonElement(jsonObj.get("duplicateObject"));
      }
      // validate the optional field `groupObjects`
      if (jsonObj.get("groupObjects") != null && !jsonObj.get("groupObjects").isJsonNull()) {
        GroupObjectsResponse.validateJsonElement(jsonObj.get("groupObjects"));
      }
      // validate the optional field `replaceAllShapesWithImage`
      if (jsonObj.get("replaceAllShapesWithImage") != null && !jsonObj.get("replaceAllShapesWithImage").isJsonNull()) {
        ReplaceAllShapesWithImageResponse.validateJsonElement(jsonObj.get("replaceAllShapesWithImage"));
      }
      // validate the optional field `replaceAllShapesWithSheetsChart`
      if (jsonObj.get("replaceAllShapesWithSheetsChart") != null && !jsonObj.get("replaceAllShapesWithSheetsChart").isJsonNull()) {
        ReplaceAllShapesWithSheetsChartResponse.validateJsonElement(jsonObj.get("replaceAllShapesWithSheetsChart"));
      }
      // validate the optional field `replaceAllText`
      if (jsonObj.get("replaceAllText") != null && !jsonObj.get("replaceAllText").isJsonNull()) {
        ReplaceAllTextResponse.validateJsonElement(jsonObj.get("replaceAllText"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Response>() {
           @Override
           public void write(JsonWriter out, Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

