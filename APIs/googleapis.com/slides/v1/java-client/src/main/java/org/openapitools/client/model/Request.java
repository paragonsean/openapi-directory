/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateImageRequest;
import org.openapitools.client.model.CreateLineRequest;
import org.openapitools.client.model.CreateParagraphBulletsRequest;
import org.openapitools.client.model.CreateShapeRequest;
import org.openapitools.client.model.CreateSheetsChartRequest;
import org.openapitools.client.model.CreateSlideRequest;
import org.openapitools.client.model.CreateTableRequest;
import org.openapitools.client.model.CreateVideoRequest;
import org.openapitools.client.model.DeleteObjectRequest;
import org.openapitools.client.model.DeleteParagraphBulletsRequest;
import org.openapitools.client.model.DeleteTableColumnRequest;
import org.openapitools.client.model.DeleteTableRowRequest;
import org.openapitools.client.model.DeleteTextRequest;
import org.openapitools.client.model.DuplicateObjectRequest;
import org.openapitools.client.model.GroupObjectsRequest;
import org.openapitools.client.model.InsertTableColumnsRequest;
import org.openapitools.client.model.InsertTableRowsRequest;
import org.openapitools.client.model.InsertTextRequest;
import org.openapitools.client.model.MergeTableCellsRequest;
import org.openapitools.client.model.RefreshSheetsChartRequest;
import org.openapitools.client.model.ReplaceAllShapesWithImageRequest;
import org.openapitools.client.model.ReplaceAllShapesWithSheetsChartRequest;
import org.openapitools.client.model.ReplaceAllTextRequest;
import org.openapitools.client.model.ReplaceImageRequest;
import org.openapitools.client.model.RerouteLineRequest;
import org.openapitools.client.model.UngroupObjectsRequest;
import org.openapitools.client.model.UnmergeTableCellsRequest;
import org.openapitools.client.model.UpdateImagePropertiesRequest;
import org.openapitools.client.model.UpdateLineCategoryRequest;
import org.openapitools.client.model.UpdateLinePropertiesRequest;
import org.openapitools.client.model.UpdatePageElementAltTextRequest;
import org.openapitools.client.model.UpdatePageElementTransformRequest;
import org.openapitools.client.model.UpdatePageElementsZOrderRequest;
import org.openapitools.client.model.UpdatePagePropertiesRequest;
import org.openapitools.client.model.UpdateParagraphStyleRequest;
import org.openapitools.client.model.UpdateShapePropertiesRequest;
import org.openapitools.client.model.UpdateSlidePropertiesRequest;
import org.openapitools.client.model.UpdateSlidesPositionRequest;
import org.openapitools.client.model.UpdateTableBorderPropertiesRequest;
import org.openapitools.client.model.UpdateTableCellPropertiesRequest;
import org.openapitools.client.model.UpdateTableColumnPropertiesRequest;
import org.openapitools.client.model.UpdateTableRowPropertiesRequest;
import org.openapitools.client.model.UpdateTextStyleRequest;
import org.openapitools.client.model.UpdateVideoPropertiesRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single kind of update to apply to a presentation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Request {
  public static final String SERIALIZED_NAME_CREATE_IMAGE = "createImage";
  @SerializedName(SERIALIZED_NAME_CREATE_IMAGE)
  private CreateImageRequest createImage;

  public static final String SERIALIZED_NAME_CREATE_LINE = "createLine";
  @SerializedName(SERIALIZED_NAME_CREATE_LINE)
  private CreateLineRequest createLine;

  public static final String SERIALIZED_NAME_CREATE_PARAGRAPH_BULLETS = "createParagraphBullets";
  @SerializedName(SERIALIZED_NAME_CREATE_PARAGRAPH_BULLETS)
  private CreateParagraphBulletsRequest createParagraphBullets;

  public static final String SERIALIZED_NAME_CREATE_SHAPE = "createShape";
  @SerializedName(SERIALIZED_NAME_CREATE_SHAPE)
  private CreateShapeRequest createShape;

  public static final String SERIALIZED_NAME_CREATE_SHEETS_CHART = "createSheetsChart";
  @SerializedName(SERIALIZED_NAME_CREATE_SHEETS_CHART)
  private CreateSheetsChartRequest createSheetsChart;

  public static final String SERIALIZED_NAME_CREATE_SLIDE = "createSlide";
  @SerializedName(SERIALIZED_NAME_CREATE_SLIDE)
  private CreateSlideRequest createSlide;

  public static final String SERIALIZED_NAME_CREATE_TABLE = "createTable";
  @SerializedName(SERIALIZED_NAME_CREATE_TABLE)
  private CreateTableRequest createTable;

  public static final String SERIALIZED_NAME_CREATE_VIDEO = "createVideo";
  @SerializedName(SERIALIZED_NAME_CREATE_VIDEO)
  private CreateVideoRequest createVideo;

  public static final String SERIALIZED_NAME_DELETE_OBJECT = "deleteObject";
  @SerializedName(SERIALIZED_NAME_DELETE_OBJECT)
  private DeleteObjectRequest deleteObject;

  public static final String SERIALIZED_NAME_DELETE_PARAGRAPH_BULLETS = "deleteParagraphBullets";
  @SerializedName(SERIALIZED_NAME_DELETE_PARAGRAPH_BULLETS)
  private DeleteParagraphBulletsRequest deleteParagraphBullets;

  public static final String SERIALIZED_NAME_DELETE_TABLE_COLUMN = "deleteTableColumn";
  @SerializedName(SERIALIZED_NAME_DELETE_TABLE_COLUMN)
  private DeleteTableColumnRequest deleteTableColumn;

  public static final String SERIALIZED_NAME_DELETE_TABLE_ROW = "deleteTableRow";
  @SerializedName(SERIALIZED_NAME_DELETE_TABLE_ROW)
  private DeleteTableRowRequest deleteTableRow;

  public static final String SERIALIZED_NAME_DELETE_TEXT = "deleteText";
  @SerializedName(SERIALIZED_NAME_DELETE_TEXT)
  private DeleteTextRequest deleteText;

  public static final String SERIALIZED_NAME_DUPLICATE_OBJECT = "duplicateObject";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_OBJECT)
  private DuplicateObjectRequest duplicateObject;

  public static final String SERIALIZED_NAME_GROUP_OBJECTS = "groupObjects";
  @SerializedName(SERIALIZED_NAME_GROUP_OBJECTS)
  private GroupObjectsRequest groupObjects;

  public static final String SERIALIZED_NAME_INSERT_TABLE_COLUMNS = "insertTableColumns";
  @SerializedName(SERIALIZED_NAME_INSERT_TABLE_COLUMNS)
  private InsertTableColumnsRequest insertTableColumns;

  public static final String SERIALIZED_NAME_INSERT_TABLE_ROWS = "insertTableRows";
  @SerializedName(SERIALIZED_NAME_INSERT_TABLE_ROWS)
  private InsertTableRowsRequest insertTableRows;

  public static final String SERIALIZED_NAME_INSERT_TEXT = "insertText";
  @SerializedName(SERIALIZED_NAME_INSERT_TEXT)
  private InsertTextRequest insertText;

  public static final String SERIALIZED_NAME_MERGE_TABLE_CELLS = "mergeTableCells";
  @SerializedName(SERIALIZED_NAME_MERGE_TABLE_CELLS)
  private MergeTableCellsRequest mergeTableCells;

  public static final String SERIALIZED_NAME_REFRESH_SHEETS_CHART = "refreshSheetsChart";
  @SerializedName(SERIALIZED_NAME_REFRESH_SHEETS_CHART)
  private RefreshSheetsChartRequest refreshSheetsChart;

  public static final String SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_IMAGE = "replaceAllShapesWithImage";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_IMAGE)
  private ReplaceAllShapesWithImageRequest replaceAllShapesWithImage;

  public static final String SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_SHEETS_CHART = "replaceAllShapesWithSheetsChart";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_SHAPES_WITH_SHEETS_CHART)
  private ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChart;

  public static final String SERIALIZED_NAME_REPLACE_ALL_TEXT = "replaceAllText";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_TEXT)
  private ReplaceAllTextRequest replaceAllText;

  public static final String SERIALIZED_NAME_REPLACE_IMAGE = "replaceImage";
  @SerializedName(SERIALIZED_NAME_REPLACE_IMAGE)
  private ReplaceImageRequest replaceImage;

  public static final String SERIALIZED_NAME_REROUTE_LINE = "rerouteLine";
  @SerializedName(SERIALIZED_NAME_REROUTE_LINE)
  private RerouteLineRequest rerouteLine;

  public static final String SERIALIZED_NAME_UNGROUP_OBJECTS = "ungroupObjects";
  @SerializedName(SERIALIZED_NAME_UNGROUP_OBJECTS)
  private UngroupObjectsRequest ungroupObjects;

  public static final String SERIALIZED_NAME_UNMERGE_TABLE_CELLS = "unmergeTableCells";
  @SerializedName(SERIALIZED_NAME_UNMERGE_TABLE_CELLS)
  private UnmergeTableCellsRequest unmergeTableCells;

  public static final String SERIALIZED_NAME_UPDATE_IMAGE_PROPERTIES = "updateImageProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_IMAGE_PROPERTIES)
  private UpdateImagePropertiesRequest updateImageProperties;

  public static final String SERIALIZED_NAME_UPDATE_LINE_CATEGORY = "updateLineCategory";
  @SerializedName(SERIALIZED_NAME_UPDATE_LINE_CATEGORY)
  private UpdateLineCategoryRequest updateLineCategory;

  public static final String SERIALIZED_NAME_UPDATE_LINE_PROPERTIES = "updateLineProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_LINE_PROPERTIES)
  private UpdateLinePropertiesRequest updateLineProperties;

  public static final String SERIALIZED_NAME_UPDATE_PAGE_ELEMENT_ALT_TEXT = "updatePageElementAltText";
  @SerializedName(SERIALIZED_NAME_UPDATE_PAGE_ELEMENT_ALT_TEXT)
  private UpdatePageElementAltTextRequest updatePageElementAltText;

  public static final String SERIALIZED_NAME_UPDATE_PAGE_ELEMENT_TRANSFORM = "updatePageElementTransform";
  @SerializedName(SERIALIZED_NAME_UPDATE_PAGE_ELEMENT_TRANSFORM)
  private UpdatePageElementTransformRequest updatePageElementTransform;

  public static final String SERIALIZED_NAME_UPDATE_PAGE_ELEMENTS_Z_ORDER = "updatePageElementsZOrder";
  @SerializedName(SERIALIZED_NAME_UPDATE_PAGE_ELEMENTS_Z_ORDER)
  private UpdatePageElementsZOrderRequest updatePageElementsZOrder;

  public static final String SERIALIZED_NAME_UPDATE_PAGE_PROPERTIES = "updatePageProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_PAGE_PROPERTIES)
  private UpdatePagePropertiesRequest updatePageProperties;

  public static final String SERIALIZED_NAME_UPDATE_PARAGRAPH_STYLE = "updateParagraphStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_PARAGRAPH_STYLE)
  private UpdateParagraphStyleRequest updateParagraphStyle;

  public static final String SERIALIZED_NAME_UPDATE_SHAPE_PROPERTIES = "updateShapeProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_SHAPE_PROPERTIES)
  private UpdateShapePropertiesRequest updateShapeProperties;

  public static final String SERIALIZED_NAME_UPDATE_SLIDE_PROPERTIES = "updateSlideProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_SLIDE_PROPERTIES)
  private UpdateSlidePropertiesRequest updateSlideProperties;

  public static final String SERIALIZED_NAME_UPDATE_SLIDES_POSITION = "updateSlidesPosition";
  @SerializedName(SERIALIZED_NAME_UPDATE_SLIDES_POSITION)
  private UpdateSlidesPositionRequest updateSlidesPosition;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_BORDER_PROPERTIES = "updateTableBorderProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_BORDER_PROPERTIES)
  private UpdateTableBorderPropertiesRequest updateTableBorderProperties;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_CELL_PROPERTIES = "updateTableCellProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_CELL_PROPERTIES)
  private UpdateTableCellPropertiesRequest updateTableCellProperties;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_COLUMN_PROPERTIES = "updateTableColumnProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_COLUMN_PROPERTIES)
  private UpdateTableColumnPropertiesRequest updateTableColumnProperties;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_ROW_PROPERTIES = "updateTableRowProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_ROW_PROPERTIES)
  private UpdateTableRowPropertiesRequest updateTableRowProperties;

  public static final String SERIALIZED_NAME_UPDATE_TEXT_STYLE = "updateTextStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_TEXT_STYLE)
  private UpdateTextStyleRequest updateTextStyle;

  public static final String SERIALIZED_NAME_UPDATE_VIDEO_PROPERTIES = "updateVideoProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_VIDEO_PROPERTIES)
  private UpdateVideoPropertiesRequest updateVideoProperties;

  public Request() {
  }

  public Request createImage(CreateImageRequest createImage) {
    this.createImage = createImage;
    return this;
  }

  /**
   * Get createImage
   * @return createImage
   */
  @javax.annotation.Nullable
  public CreateImageRequest getCreateImage() {
    return createImage;
  }

  public void setCreateImage(CreateImageRequest createImage) {
    this.createImage = createImage;
  }


  public Request createLine(CreateLineRequest createLine) {
    this.createLine = createLine;
    return this;
  }

  /**
   * Get createLine
   * @return createLine
   */
  @javax.annotation.Nullable
  public CreateLineRequest getCreateLine() {
    return createLine;
  }

  public void setCreateLine(CreateLineRequest createLine) {
    this.createLine = createLine;
  }


  public Request createParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
    this.createParagraphBullets = createParagraphBullets;
    return this;
  }

  /**
   * Get createParagraphBullets
   * @return createParagraphBullets
   */
  @javax.annotation.Nullable
  public CreateParagraphBulletsRequest getCreateParagraphBullets() {
    return createParagraphBullets;
  }

  public void setCreateParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
    this.createParagraphBullets = createParagraphBullets;
  }


  public Request createShape(CreateShapeRequest createShape) {
    this.createShape = createShape;
    return this;
  }

  /**
   * Get createShape
   * @return createShape
   */
  @javax.annotation.Nullable
  public CreateShapeRequest getCreateShape() {
    return createShape;
  }

  public void setCreateShape(CreateShapeRequest createShape) {
    this.createShape = createShape;
  }


  public Request createSheetsChart(CreateSheetsChartRequest createSheetsChart) {
    this.createSheetsChart = createSheetsChart;
    return this;
  }

  /**
   * Get createSheetsChart
   * @return createSheetsChart
   */
  @javax.annotation.Nullable
  public CreateSheetsChartRequest getCreateSheetsChart() {
    return createSheetsChart;
  }

  public void setCreateSheetsChart(CreateSheetsChartRequest createSheetsChart) {
    this.createSheetsChart = createSheetsChart;
  }


  public Request createSlide(CreateSlideRequest createSlide) {
    this.createSlide = createSlide;
    return this;
  }

  /**
   * Get createSlide
   * @return createSlide
   */
  @javax.annotation.Nullable
  public CreateSlideRequest getCreateSlide() {
    return createSlide;
  }

  public void setCreateSlide(CreateSlideRequest createSlide) {
    this.createSlide = createSlide;
  }


  public Request createTable(CreateTableRequest createTable) {
    this.createTable = createTable;
    return this;
  }

  /**
   * Get createTable
   * @return createTable
   */
  @javax.annotation.Nullable
  public CreateTableRequest getCreateTable() {
    return createTable;
  }

  public void setCreateTable(CreateTableRequest createTable) {
    this.createTable = createTable;
  }


  public Request createVideo(CreateVideoRequest createVideo) {
    this.createVideo = createVideo;
    return this;
  }

  /**
   * Get createVideo
   * @return createVideo
   */
  @javax.annotation.Nullable
  public CreateVideoRequest getCreateVideo() {
    return createVideo;
  }

  public void setCreateVideo(CreateVideoRequest createVideo) {
    this.createVideo = createVideo;
  }


  public Request deleteObject(DeleteObjectRequest deleteObject) {
    this.deleteObject = deleteObject;
    return this;
  }

  /**
   * Get deleteObject
   * @return deleteObject
   */
  @javax.annotation.Nullable
  public DeleteObjectRequest getDeleteObject() {
    return deleteObject;
  }

  public void setDeleteObject(DeleteObjectRequest deleteObject) {
    this.deleteObject = deleteObject;
  }


  public Request deleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
    this.deleteParagraphBullets = deleteParagraphBullets;
    return this;
  }

  /**
   * Get deleteParagraphBullets
   * @return deleteParagraphBullets
   */
  @javax.annotation.Nullable
  public DeleteParagraphBulletsRequest getDeleteParagraphBullets() {
    return deleteParagraphBullets;
  }

  public void setDeleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
    this.deleteParagraphBullets = deleteParagraphBullets;
  }


  public Request deleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
    this.deleteTableColumn = deleteTableColumn;
    return this;
  }

  /**
   * Get deleteTableColumn
   * @return deleteTableColumn
   */
  @javax.annotation.Nullable
  public DeleteTableColumnRequest getDeleteTableColumn() {
    return deleteTableColumn;
  }

  public void setDeleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
    this.deleteTableColumn = deleteTableColumn;
  }


  public Request deleteTableRow(DeleteTableRowRequest deleteTableRow) {
    this.deleteTableRow = deleteTableRow;
    return this;
  }

  /**
   * Get deleteTableRow
   * @return deleteTableRow
   */
  @javax.annotation.Nullable
  public DeleteTableRowRequest getDeleteTableRow() {
    return deleteTableRow;
  }

  public void setDeleteTableRow(DeleteTableRowRequest deleteTableRow) {
    this.deleteTableRow = deleteTableRow;
  }


  public Request deleteText(DeleteTextRequest deleteText) {
    this.deleteText = deleteText;
    return this;
  }

  /**
   * Get deleteText
   * @return deleteText
   */
  @javax.annotation.Nullable
  public DeleteTextRequest getDeleteText() {
    return deleteText;
  }

  public void setDeleteText(DeleteTextRequest deleteText) {
    this.deleteText = deleteText;
  }


  public Request duplicateObject(DuplicateObjectRequest duplicateObject) {
    this.duplicateObject = duplicateObject;
    return this;
  }

  /**
   * Get duplicateObject
   * @return duplicateObject
   */
  @javax.annotation.Nullable
  public DuplicateObjectRequest getDuplicateObject() {
    return duplicateObject;
  }

  public void setDuplicateObject(DuplicateObjectRequest duplicateObject) {
    this.duplicateObject = duplicateObject;
  }


  public Request groupObjects(GroupObjectsRequest groupObjects) {
    this.groupObjects = groupObjects;
    return this;
  }

  /**
   * Get groupObjects
   * @return groupObjects
   */
  @javax.annotation.Nullable
  public GroupObjectsRequest getGroupObjects() {
    return groupObjects;
  }

  public void setGroupObjects(GroupObjectsRequest groupObjects) {
    this.groupObjects = groupObjects;
  }


  public Request insertTableColumns(InsertTableColumnsRequest insertTableColumns) {
    this.insertTableColumns = insertTableColumns;
    return this;
  }

  /**
   * Get insertTableColumns
   * @return insertTableColumns
   */
  @javax.annotation.Nullable
  public InsertTableColumnsRequest getInsertTableColumns() {
    return insertTableColumns;
  }

  public void setInsertTableColumns(InsertTableColumnsRequest insertTableColumns) {
    this.insertTableColumns = insertTableColumns;
  }


  public Request insertTableRows(InsertTableRowsRequest insertTableRows) {
    this.insertTableRows = insertTableRows;
    return this;
  }

  /**
   * Get insertTableRows
   * @return insertTableRows
   */
  @javax.annotation.Nullable
  public InsertTableRowsRequest getInsertTableRows() {
    return insertTableRows;
  }

  public void setInsertTableRows(InsertTableRowsRequest insertTableRows) {
    this.insertTableRows = insertTableRows;
  }


  public Request insertText(InsertTextRequest insertText) {
    this.insertText = insertText;
    return this;
  }

  /**
   * Get insertText
   * @return insertText
   */
  @javax.annotation.Nullable
  public InsertTextRequest getInsertText() {
    return insertText;
  }

  public void setInsertText(InsertTextRequest insertText) {
    this.insertText = insertText;
  }


  public Request mergeTableCells(MergeTableCellsRequest mergeTableCells) {
    this.mergeTableCells = mergeTableCells;
    return this;
  }

  /**
   * Get mergeTableCells
   * @return mergeTableCells
   */
  @javax.annotation.Nullable
  public MergeTableCellsRequest getMergeTableCells() {
    return mergeTableCells;
  }

  public void setMergeTableCells(MergeTableCellsRequest mergeTableCells) {
    this.mergeTableCells = mergeTableCells;
  }


  public Request refreshSheetsChart(RefreshSheetsChartRequest refreshSheetsChart) {
    this.refreshSheetsChart = refreshSheetsChart;
    return this;
  }

  /**
   * Get refreshSheetsChart
   * @return refreshSheetsChart
   */
  @javax.annotation.Nullable
  public RefreshSheetsChartRequest getRefreshSheetsChart() {
    return refreshSheetsChart;
  }

  public void setRefreshSheetsChart(RefreshSheetsChartRequest refreshSheetsChart) {
    this.refreshSheetsChart = refreshSheetsChart;
  }


  public Request replaceAllShapesWithImage(ReplaceAllShapesWithImageRequest replaceAllShapesWithImage) {
    this.replaceAllShapesWithImage = replaceAllShapesWithImage;
    return this;
  }

  /**
   * Get replaceAllShapesWithImage
   * @return replaceAllShapesWithImage
   */
  @javax.annotation.Nullable
  public ReplaceAllShapesWithImageRequest getReplaceAllShapesWithImage() {
    return replaceAllShapesWithImage;
  }

  public void setReplaceAllShapesWithImage(ReplaceAllShapesWithImageRequest replaceAllShapesWithImage) {
    this.replaceAllShapesWithImage = replaceAllShapesWithImage;
  }


  public Request replaceAllShapesWithSheetsChart(ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChart) {
    this.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart;
    return this;
  }

  /**
   * Get replaceAllShapesWithSheetsChart
   * @return replaceAllShapesWithSheetsChart
   */
  @javax.annotation.Nullable
  public ReplaceAllShapesWithSheetsChartRequest getReplaceAllShapesWithSheetsChart() {
    return replaceAllShapesWithSheetsChart;
  }

  public void setReplaceAllShapesWithSheetsChart(ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChart) {
    this.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart;
  }


  public Request replaceAllText(ReplaceAllTextRequest replaceAllText) {
    this.replaceAllText = replaceAllText;
    return this;
  }

  /**
   * Get replaceAllText
   * @return replaceAllText
   */
  @javax.annotation.Nullable
  public ReplaceAllTextRequest getReplaceAllText() {
    return replaceAllText;
  }

  public void setReplaceAllText(ReplaceAllTextRequest replaceAllText) {
    this.replaceAllText = replaceAllText;
  }


  public Request replaceImage(ReplaceImageRequest replaceImage) {
    this.replaceImage = replaceImage;
    return this;
  }

  /**
   * Get replaceImage
   * @return replaceImage
   */
  @javax.annotation.Nullable
  public ReplaceImageRequest getReplaceImage() {
    return replaceImage;
  }

  public void setReplaceImage(ReplaceImageRequest replaceImage) {
    this.replaceImage = replaceImage;
  }


  public Request rerouteLine(RerouteLineRequest rerouteLine) {
    this.rerouteLine = rerouteLine;
    return this;
  }

  /**
   * Get rerouteLine
   * @return rerouteLine
   */
  @javax.annotation.Nullable
  public RerouteLineRequest getRerouteLine() {
    return rerouteLine;
  }

  public void setRerouteLine(RerouteLineRequest rerouteLine) {
    this.rerouteLine = rerouteLine;
  }


  public Request ungroupObjects(UngroupObjectsRequest ungroupObjects) {
    this.ungroupObjects = ungroupObjects;
    return this;
  }

  /**
   * Get ungroupObjects
   * @return ungroupObjects
   */
  @javax.annotation.Nullable
  public UngroupObjectsRequest getUngroupObjects() {
    return ungroupObjects;
  }

  public void setUngroupObjects(UngroupObjectsRequest ungroupObjects) {
    this.ungroupObjects = ungroupObjects;
  }


  public Request unmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
    this.unmergeTableCells = unmergeTableCells;
    return this;
  }

  /**
   * Get unmergeTableCells
   * @return unmergeTableCells
   */
  @javax.annotation.Nullable
  public UnmergeTableCellsRequest getUnmergeTableCells() {
    return unmergeTableCells;
  }

  public void setUnmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
    this.unmergeTableCells = unmergeTableCells;
  }


  public Request updateImageProperties(UpdateImagePropertiesRequest updateImageProperties) {
    this.updateImageProperties = updateImageProperties;
    return this;
  }

  /**
   * Get updateImageProperties
   * @return updateImageProperties
   */
  @javax.annotation.Nullable
  public UpdateImagePropertiesRequest getUpdateImageProperties() {
    return updateImageProperties;
  }

  public void setUpdateImageProperties(UpdateImagePropertiesRequest updateImageProperties) {
    this.updateImageProperties = updateImageProperties;
  }


  public Request updateLineCategory(UpdateLineCategoryRequest updateLineCategory) {
    this.updateLineCategory = updateLineCategory;
    return this;
  }

  /**
   * Get updateLineCategory
   * @return updateLineCategory
   */
  @javax.annotation.Nullable
  public UpdateLineCategoryRequest getUpdateLineCategory() {
    return updateLineCategory;
  }

  public void setUpdateLineCategory(UpdateLineCategoryRequest updateLineCategory) {
    this.updateLineCategory = updateLineCategory;
  }


  public Request updateLineProperties(UpdateLinePropertiesRequest updateLineProperties) {
    this.updateLineProperties = updateLineProperties;
    return this;
  }

  /**
   * Get updateLineProperties
   * @return updateLineProperties
   */
  @javax.annotation.Nullable
  public UpdateLinePropertiesRequest getUpdateLineProperties() {
    return updateLineProperties;
  }

  public void setUpdateLineProperties(UpdateLinePropertiesRequest updateLineProperties) {
    this.updateLineProperties = updateLineProperties;
  }


  public Request updatePageElementAltText(UpdatePageElementAltTextRequest updatePageElementAltText) {
    this.updatePageElementAltText = updatePageElementAltText;
    return this;
  }

  /**
   * Get updatePageElementAltText
   * @return updatePageElementAltText
   */
  @javax.annotation.Nullable
  public UpdatePageElementAltTextRequest getUpdatePageElementAltText() {
    return updatePageElementAltText;
  }

  public void setUpdatePageElementAltText(UpdatePageElementAltTextRequest updatePageElementAltText) {
    this.updatePageElementAltText = updatePageElementAltText;
  }


  public Request updatePageElementTransform(UpdatePageElementTransformRequest updatePageElementTransform) {
    this.updatePageElementTransform = updatePageElementTransform;
    return this;
  }

  /**
   * Get updatePageElementTransform
   * @return updatePageElementTransform
   */
  @javax.annotation.Nullable
  public UpdatePageElementTransformRequest getUpdatePageElementTransform() {
    return updatePageElementTransform;
  }

  public void setUpdatePageElementTransform(UpdatePageElementTransformRequest updatePageElementTransform) {
    this.updatePageElementTransform = updatePageElementTransform;
  }


  public Request updatePageElementsZOrder(UpdatePageElementsZOrderRequest updatePageElementsZOrder) {
    this.updatePageElementsZOrder = updatePageElementsZOrder;
    return this;
  }

  /**
   * Get updatePageElementsZOrder
   * @return updatePageElementsZOrder
   */
  @javax.annotation.Nullable
  public UpdatePageElementsZOrderRequest getUpdatePageElementsZOrder() {
    return updatePageElementsZOrder;
  }

  public void setUpdatePageElementsZOrder(UpdatePageElementsZOrderRequest updatePageElementsZOrder) {
    this.updatePageElementsZOrder = updatePageElementsZOrder;
  }


  public Request updatePageProperties(UpdatePagePropertiesRequest updatePageProperties) {
    this.updatePageProperties = updatePageProperties;
    return this;
  }

  /**
   * Get updatePageProperties
   * @return updatePageProperties
   */
  @javax.annotation.Nullable
  public UpdatePagePropertiesRequest getUpdatePageProperties() {
    return updatePageProperties;
  }

  public void setUpdatePageProperties(UpdatePagePropertiesRequest updatePageProperties) {
    this.updatePageProperties = updatePageProperties;
  }


  public Request updateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
    this.updateParagraphStyle = updateParagraphStyle;
    return this;
  }

  /**
   * Get updateParagraphStyle
   * @return updateParagraphStyle
   */
  @javax.annotation.Nullable
  public UpdateParagraphStyleRequest getUpdateParagraphStyle() {
    return updateParagraphStyle;
  }

  public void setUpdateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
    this.updateParagraphStyle = updateParagraphStyle;
  }


  public Request updateShapeProperties(UpdateShapePropertiesRequest updateShapeProperties) {
    this.updateShapeProperties = updateShapeProperties;
    return this;
  }

  /**
   * Get updateShapeProperties
   * @return updateShapeProperties
   */
  @javax.annotation.Nullable
  public UpdateShapePropertiesRequest getUpdateShapeProperties() {
    return updateShapeProperties;
  }

  public void setUpdateShapeProperties(UpdateShapePropertiesRequest updateShapeProperties) {
    this.updateShapeProperties = updateShapeProperties;
  }


  public Request updateSlideProperties(UpdateSlidePropertiesRequest updateSlideProperties) {
    this.updateSlideProperties = updateSlideProperties;
    return this;
  }

  /**
   * Get updateSlideProperties
   * @return updateSlideProperties
   */
  @javax.annotation.Nullable
  public UpdateSlidePropertiesRequest getUpdateSlideProperties() {
    return updateSlideProperties;
  }

  public void setUpdateSlideProperties(UpdateSlidePropertiesRequest updateSlideProperties) {
    this.updateSlideProperties = updateSlideProperties;
  }


  public Request updateSlidesPosition(UpdateSlidesPositionRequest updateSlidesPosition) {
    this.updateSlidesPosition = updateSlidesPosition;
    return this;
  }

  /**
   * Get updateSlidesPosition
   * @return updateSlidesPosition
   */
  @javax.annotation.Nullable
  public UpdateSlidesPositionRequest getUpdateSlidesPosition() {
    return updateSlidesPosition;
  }

  public void setUpdateSlidesPosition(UpdateSlidesPositionRequest updateSlidesPosition) {
    this.updateSlidesPosition = updateSlidesPosition;
  }


  public Request updateTableBorderProperties(UpdateTableBorderPropertiesRequest updateTableBorderProperties) {
    this.updateTableBorderProperties = updateTableBorderProperties;
    return this;
  }

  /**
   * Get updateTableBorderProperties
   * @return updateTableBorderProperties
   */
  @javax.annotation.Nullable
  public UpdateTableBorderPropertiesRequest getUpdateTableBorderProperties() {
    return updateTableBorderProperties;
  }

  public void setUpdateTableBorderProperties(UpdateTableBorderPropertiesRequest updateTableBorderProperties) {
    this.updateTableBorderProperties = updateTableBorderProperties;
  }


  public Request updateTableCellProperties(UpdateTableCellPropertiesRequest updateTableCellProperties) {
    this.updateTableCellProperties = updateTableCellProperties;
    return this;
  }

  /**
   * Get updateTableCellProperties
   * @return updateTableCellProperties
   */
  @javax.annotation.Nullable
  public UpdateTableCellPropertiesRequest getUpdateTableCellProperties() {
    return updateTableCellProperties;
  }

  public void setUpdateTableCellProperties(UpdateTableCellPropertiesRequest updateTableCellProperties) {
    this.updateTableCellProperties = updateTableCellProperties;
  }


  public Request updateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
    this.updateTableColumnProperties = updateTableColumnProperties;
    return this;
  }

  /**
   * Get updateTableColumnProperties
   * @return updateTableColumnProperties
   */
  @javax.annotation.Nullable
  public UpdateTableColumnPropertiesRequest getUpdateTableColumnProperties() {
    return updateTableColumnProperties;
  }

  public void setUpdateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
    this.updateTableColumnProperties = updateTableColumnProperties;
  }


  public Request updateTableRowProperties(UpdateTableRowPropertiesRequest updateTableRowProperties) {
    this.updateTableRowProperties = updateTableRowProperties;
    return this;
  }

  /**
   * Get updateTableRowProperties
   * @return updateTableRowProperties
   */
  @javax.annotation.Nullable
  public UpdateTableRowPropertiesRequest getUpdateTableRowProperties() {
    return updateTableRowProperties;
  }

  public void setUpdateTableRowProperties(UpdateTableRowPropertiesRequest updateTableRowProperties) {
    this.updateTableRowProperties = updateTableRowProperties;
  }


  public Request updateTextStyle(UpdateTextStyleRequest updateTextStyle) {
    this.updateTextStyle = updateTextStyle;
    return this;
  }

  /**
   * Get updateTextStyle
   * @return updateTextStyle
   */
  @javax.annotation.Nullable
  public UpdateTextStyleRequest getUpdateTextStyle() {
    return updateTextStyle;
  }

  public void setUpdateTextStyle(UpdateTextStyleRequest updateTextStyle) {
    this.updateTextStyle = updateTextStyle;
  }


  public Request updateVideoProperties(UpdateVideoPropertiesRequest updateVideoProperties) {
    this.updateVideoProperties = updateVideoProperties;
    return this;
  }

  /**
   * Get updateVideoProperties
   * @return updateVideoProperties
   */
  @javax.annotation.Nullable
  public UpdateVideoPropertiesRequest getUpdateVideoProperties() {
    return updateVideoProperties;
  }

  public void setUpdateVideoProperties(UpdateVideoPropertiesRequest updateVideoProperties) {
    this.updateVideoProperties = updateVideoProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.createImage, request.createImage) &&
        Objects.equals(this.createLine, request.createLine) &&
        Objects.equals(this.createParagraphBullets, request.createParagraphBullets) &&
        Objects.equals(this.createShape, request.createShape) &&
        Objects.equals(this.createSheetsChart, request.createSheetsChart) &&
        Objects.equals(this.createSlide, request.createSlide) &&
        Objects.equals(this.createTable, request.createTable) &&
        Objects.equals(this.createVideo, request.createVideo) &&
        Objects.equals(this.deleteObject, request.deleteObject) &&
        Objects.equals(this.deleteParagraphBullets, request.deleteParagraphBullets) &&
        Objects.equals(this.deleteTableColumn, request.deleteTableColumn) &&
        Objects.equals(this.deleteTableRow, request.deleteTableRow) &&
        Objects.equals(this.deleteText, request.deleteText) &&
        Objects.equals(this.duplicateObject, request.duplicateObject) &&
        Objects.equals(this.groupObjects, request.groupObjects) &&
        Objects.equals(this.insertTableColumns, request.insertTableColumns) &&
        Objects.equals(this.insertTableRows, request.insertTableRows) &&
        Objects.equals(this.insertText, request.insertText) &&
        Objects.equals(this.mergeTableCells, request.mergeTableCells) &&
        Objects.equals(this.refreshSheetsChart, request.refreshSheetsChart) &&
        Objects.equals(this.replaceAllShapesWithImage, request.replaceAllShapesWithImage) &&
        Objects.equals(this.replaceAllShapesWithSheetsChart, request.replaceAllShapesWithSheetsChart) &&
        Objects.equals(this.replaceAllText, request.replaceAllText) &&
        Objects.equals(this.replaceImage, request.replaceImage) &&
        Objects.equals(this.rerouteLine, request.rerouteLine) &&
        Objects.equals(this.ungroupObjects, request.ungroupObjects) &&
        Objects.equals(this.unmergeTableCells, request.unmergeTableCells) &&
        Objects.equals(this.updateImageProperties, request.updateImageProperties) &&
        Objects.equals(this.updateLineCategory, request.updateLineCategory) &&
        Objects.equals(this.updateLineProperties, request.updateLineProperties) &&
        Objects.equals(this.updatePageElementAltText, request.updatePageElementAltText) &&
        Objects.equals(this.updatePageElementTransform, request.updatePageElementTransform) &&
        Objects.equals(this.updatePageElementsZOrder, request.updatePageElementsZOrder) &&
        Objects.equals(this.updatePageProperties, request.updatePageProperties) &&
        Objects.equals(this.updateParagraphStyle, request.updateParagraphStyle) &&
        Objects.equals(this.updateShapeProperties, request.updateShapeProperties) &&
        Objects.equals(this.updateSlideProperties, request.updateSlideProperties) &&
        Objects.equals(this.updateSlidesPosition, request.updateSlidesPosition) &&
        Objects.equals(this.updateTableBorderProperties, request.updateTableBorderProperties) &&
        Objects.equals(this.updateTableCellProperties, request.updateTableCellProperties) &&
        Objects.equals(this.updateTableColumnProperties, request.updateTableColumnProperties) &&
        Objects.equals(this.updateTableRowProperties, request.updateTableRowProperties) &&
        Objects.equals(this.updateTextStyle, request.updateTextStyle) &&
        Objects.equals(this.updateVideoProperties, request.updateVideoProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createImage, createLine, createParagraphBullets, createShape, createSheetsChart, createSlide, createTable, createVideo, deleteObject, deleteParagraphBullets, deleteTableColumn, deleteTableRow, deleteText, duplicateObject, groupObjects, insertTableColumns, insertTableRows, insertText, mergeTableCells, refreshSheetsChart, replaceAllShapesWithImage, replaceAllShapesWithSheetsChart, replaceAllText, replaceImage, rerouteLine, ungroupObjects, unmergeTableCells, updateImageProperties, updateLineCategory, updateLineProperties, updatePageElementAltText, updatePageElementTransform, updatePageElementsZOrder, updatePageProperties, updateParagraphStyle, updateShapeProperties, updateSlideProperties, updateSlidesPosition, updateTableBorderProperties, updateTableCellProperties, updateTableColumnProperties, updateTableRowProperties, updateTextStyle, updateVideoProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    createImage: ").append(toIndentedString(createImage)).append("\n");
    sb.append("    createLine: ").append(toIndentedString(createLine)).append("\n");
    sb.append("    createParagraphBullets: ").append(toIndentedString(createParagraphBullets)).append("\n");
    sb.append("    createShape: ").append(toIndentedString(createShape)).append("\n");
    sb.append("    createSheetsChart: ").append(toIndentedString(createSheetsChart)).append("\n");
    sb.append("    createSlide: ").append(toIndentedString(createSlide)).append("\n");
    sb.append("    createTable: ").append(toIndentedString(createTable)).append("\n");
    sb.append("    createVideo: ").append(toIndentedString(createVideo)).append("\n");
    sb.append("    deleteObject: ").append(toIndentedString(deleteObject)).append("\n");
    sb.append("    deleteParagraphBullets: ").append(toIndentedString(deleteParagraphBullets)).append("\n");
    sb.append("    deleteTableColumn: ").append(toIndentedString(deleteTableColumn)).append("\n");
    sb.append("    deleteTableRow: ").append(toIndentedString(deleteTableRow)).append("\n");
    sb.append("    deleteText: ").append(toIndentedString(deleteText)).append("\n");
    sb.append("    duplicateObject: ").append(toIndentedString(duplicateObject)).append("\n");
    sb.append("    groupObjects: ").append(toIndentedString(groupObjects)).append("\n");
    sb.append("    insertTableColumns: ").append(toIndentedString(insertTableColumns)).append("\n");
    sb.append("    insertTableRows: ").append(toIndentedString(insertTableRows)).append("\n");
    sb.append("    insertText: ").append(toIndentedString(insertText)).append("\n");
    sb.append("    mergeTableCells: ").append(toIndentedString(mergeTableCells)).append("\n");
    sb.append("    refreshSheetsChart: ").append(toIndentedString(refreshSheetsChart)).append("\n");
    sb.append("    replaceAllShapesWithImage: ").append(toIndentedString(replaceAllShapesWithImage)).append("\n");
    sb.append("    replaceAllShapesWithSheetsChart: ").append(toIndentedString(replaceAllShapesWithSheetsChart)).append("\n");
    sb.append("    replaceAllText: ").append(toIndentedString(replaceAllText)).append("\n");
    sb.append("    replaceImage: ").append(toIndentedString(replaceImage)).append("\n");
    sb.append("    rerouteLine: ").append(toIndentedString(rerouteLine)).append("\n");
    sb.append("    ungroupObjects: ").append(toIndentedString(ungroupObjects)).append("\n");
    sb.append("    unmergeTableCells: ").append(toIndentedString(unmergeTableCells)).append("\n");
    sb.append("    updateImageProperties: ").append(toIndentedString(updateImageProperties)).append("\n");
    sb.append("    updateLineCategory: ").append(toIndentedString(updateLineCategory)).append("\n");
    sb.append("    updateLineProperties: ").append(toIndentedString(updateLineProperties)).append("\n");
    sb.append("    updatePageElementAltText: ").append(toIndentedString(updatePageElementAltText)).append("\n");
    sb.append("    updatePageElementTransform: ").append(toIndentedString(updatePageElementTransform)).append("\n");
    sb.append("    updatePageElementsZOrder: ").append(toIndentedString(updatePageElementsZOrder)).append("\n");
    sb.append("    updatePageProperties: ").append(toIndentedString(updatePageProperties)).append("\n");
    sb.append("    updateParagraphStyle: ").append(toIndentedString(updateParagraphStyle)).append("\n");
    sb.append("    updateShapeProperties: ").append(toIndentedString(updateShapeProperties)).append("\n");
    sb.append("    updateSlideProperties: ").append(toIndentedString(updateSlideProperties)).append("\n");
    sb.append("    updateSlidesPosition: ").append(toIndentedString(updateSlidesPosition)).append("\n");
    sb.append("    updateTableBorderProperties: ").append(toIndentedString(updateTableBorderProperties)).append("\n");
    sb.append("    updateTableCellProperties: ").append(toIndentedString(updateTableCellProperties)).append("\n");
    sb.append("    updateTableColumnProperties: ").append(toIndentedString(updateTableColumnProperties)).append("\n");
    sb.append("    updateTableRowProperties: ").append(toIndentedString(updateTableRowProperties)).append("\n");
    sb.append("    updateTextStyle: ").append(toIndentedString(updateTextStyle)).append("\n");
    sb.append("    updateVideoProperties: ").append(toIndentedString(updateVideoProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createImage");
    openapiFields.add("createLine");
    openapiFields.add("createParagraphBullets");
    openapiFields.add("createShape");
    openapiFields.add("createSheetsChart");
    openapiFields.add("createSlide");
    openapiFields.add("createTable");
    openapiFields.add("createVideo");
    openapiFields.add("deleteObject");
    openapiFields.add("deleteParagraphBullets");
    openapiFields.add("deleteTableColumn");
    openapiFields.add("deleteTableRow");
    openapiFields.add("deleteText");
    openapiFields.add("duplicateObject");
    openapiFields.add("groupObjects");
    openapiFields.add("insertTableColumns");
    openapiFields.add("insertTableRows");
    openapiFields.add("insertText");
    openapiFields.add("mergeTableCells");
    openapiFields.add("refreshSheetsChart");
    openapiFields.add("replaceAllShapesWithImage");
    openapiFields.add("replaceAllShapesWithSheetsChart");
    openapiFields.add("replaceAllText");
    openapiFields.add("replaceImage");
    openapiFields.add("rerouteLine");
    openapiFields.add("ungroupObjects");
    openapiFields.add("unmergeTableCells");
    openapiFields.add("updateImageProperties");
    openapiFields.add("updateLineCategory");
    openapiFields.add("updateLineProperties");
    openapiFields.add("updatePageElementAltText");
    openapiFields.add("updatePageElementTransform");
    openapiFields.add("updatePageElementsZOrder");
    openapiFields.add("updatePageProperties");
    openapiFields.add("updateParagraphStyle");
    openapiFields.add("updateShapeProperties");
    openapiFields.add("updateSlideProperties");
    openapiFields.add("updateSlidesPosition");
    openapiFields.add("updateTableBorderProperties");
    openapiFields.add("updateTableCellProperties");
    openapiFields.add("updateTableColumnProperties");
    openapiFields.add("updateTableRowProperties");
    openapiFields.add("updateTextStyle");
    openapiFields.add("updateVideoProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createImage`
      if (jsonObj.get("createImage") != null && !jsonObj.get("createImage").isJsonNull()) {
        CreateImageRequest.validateJsonElement(jsonObj.get("createImage"));
      }
      // validate the optional field `createLine`
      if (jsonObj.get("createLine") != null && !jsonObj.get("createLine").isJsonNull()) {
        CreateLineRequest.validateJsonElement(jsonObj.get("createLine"));
      }
      // validate the optional field `createParagraphBullets`
      if (jsonObj.get("createParagraphBullets") != null && !jsonObj.get("createParagraphBullets").isJsonNull()) {
        CreateParagraphBulletsRequest.validateJsonElement(jsonObj.get("createParagraphBullets"));
      }
      // validate the optional field `createShape`
      if (jsonObj.get("createShape") != null && !jsonObj.get("createShape").isJsonNull()) {
        CreateShapeRequest.validateJsonElement(jsonObj.get("createShape"));
      }
      // validate the optional field `createSheetsChart`
      if (jsonObj.get("createSheetsChart") != null && !jsonObj.get("createSheetsChart").isJsonNull()) {
        CreateSheetsChartRequest.validateJsonElement(jsonObj.get("createSheetsChart"));
      }
      // validate the optional field `createSlide`
      if (jsonObj.get("createSlide") != null && !jsonObj.get("createSlide").isJsonNull()) {
        CreateSlideRequest.validateJsonElement(jsonObj.get("createSlide"));
      }
      // validate the optional field `createTable`
      if (jsonObj.get("createTable") != null && !jsonObj.get("createTable").isJsonNull()) {
        CreateTableRequest.validateJsonElement(jsonObj.get("createTable"));
      }
      // validate the optional field `createVideo`
      if (jsonObj.get("createVideo") != null && !jsonObj.get("createVideo").isJsonNull()) {
        CreateVideoRequest.validateJsonElement(jsonObj.get("createVideo"));
      }
      // validate the optional field `deleteObject`
      if (jsonObj.get("deleteObject") != null && !jsonObj.get("deleteObject").isJsonNull()) {
        DeleteObjectRequest.validateJsonElement(jsonObj.get("deleteObject"));
      }
      // validate the optional field `deleteParagraphBullets`
      if (jsonObj.get("deleteParagraphBullets") != null && !jsonObj.get("deleteParagraphBullets").isJsonNull()) {
        DeleteParagraphBulletsRequest.validateJsonElement(jsonObj.get("deleteParagraphBullets"));
      }
      // validate the optional field `deleteTableColumn`
      if (jsonObj.get("deleteTableColumn") != null && !jsonObj.get("deleteTableColumn").isJsonNull()) {
        DeleteTableColumnRequest.validateJsonElement(jsonObj.get("deleteTableColumn"));
      }
      // validate the optional field `deleteTableRow`
      if (jsonObj.get("deleteTableRow") != null && !jsonObj.get("deleteTableRow").isJsonNull()) {
        DeleteTableRowRequest.validateJsonElement(jsonObj.get("deleteTableRow"));
      }
      // validate the optional field `deleteText`
      if (jsonObj.get("deleteText") != null && !jsonObj.get("deleteText").isJsonNull()) {
        DeleteTextRequest.validateJsonElement(jsonObj.get("deleteText"));
      }
      // validate the optional field `duplicateObject`
      if (jsonObj.get("duplicateObject") != null && !jsonObj.get("duplicateObject").isJsonNull()) {
        DuplicateObjectRequest.validateJsonElement(jsonObj.get("duplicateObject"));
      }
      // validate the optional field `groupObjects`
      if (jsonObj.get("groupObjects") != null && !jsonObj.get("groupObjects").isJsonNull()) {
        GroupObjectsRequest.validateJsonElement(jsonObj.get("groupObjects"));
      }
      // validate the optional field `insertTableColumns`
      if (jsonObj.get("insertTableColumns") != null && !jsonObj.get("insertTableColumns").isJsonNull()) {
        InsertTableColumnsRequest.validateJsonElement(jsonObj.get("insertTableColumns"));
      }
      // validate the optional field `insertTableRows`
      if (jsonObj.get("insertTableRows") != null && !jsonObj.get("insertTableRows").isJsonNull()) {
        InsertTableRowsRequest.validateJsonElement(jsonObj.get("insertTableRows"));
      }
      // validate the optional field `insertText`
      if (jsonObj.get("insertText") != null && !jsonObj.get("insertText").isJsonNull()) {
        InsertTextRequest.validateJsonElement(jsonObj.get("insertText"));
      }
      // validate the optional field `mergeTableCells`
      if (jsonObj.get("mergeTableCells") != null && !jsonObj.get("mergeTableCells").isJsonNull()) {
        MergeTableCellsRequest.validateJsonElement(jsonObj.get("mergeTableCells"));
      }
      // validate the optional field `refreshSheetsChart`
      if (jsonObj.get("refreshSheetsChart") != null && !jsonObj.get("refreshSheetsChart").isJsonNull()) {
        RefreshSheetsChartRequest.validateJsonElement(jsonObj.get("refreshSheetsChart"));
      }
      // validate the optional field `replaceAllShapesWithImage`
      if (jsonObj.get("replaceAllShapesWithImage") != null && !jsonObj.get("replaceAllShapesWithImage").isJsonNull()) {
        ReplaceAllShapesWithImageRequest.validateJsonElement(jsonObj.get("replaceAllShapesWithImage"));
      }
      // validate the optional field `replaceAllShapesWithSheetsChart`
      if (jsonObj.get("replaceAllShapesWithSheetsChart") != null && !jsonObj.get("replaceAllShapesWithSheetsChart").isJsonNull()) {
        ReplaceAllShapesWithSheetsChartRequest.validateJsonElement(jsonObj.get("replaceAllShapesWithSheetsChart"));
      }
      // validate the optional field `replaceAllText`
      if (jsonObj.get("replaceAllText") != null && !jsonObj.get("replaceAllText").isJsonNull()) {
        ReplaceAllTextRequest.validateJsonElement(jsonObj.get("replaceAllText"));
      }
      // validate the optional field `replaceImage`
      if (jsonObj.get("replaceImage") != null && !jsonObj.get("replaceImage").isJsonNull()) {
        ReplaceImageRequest.validateJsonElement(jsonObj.get("replaceImage"));
      }
      // validate the optional field `rerouteLine`
      if (jsonObj.get("rerouteLine") != null && !jsonObj.get("rerouteLine").isJsonNull()) {
        RerouteLineRequest.validateJsonElement(jsonObj.get("rerouteLine"));
      }
      // validate the optional field `ungroupObjects`
      if (jsonObj.get("ungroupObjects") != null && !jsonObj.get("ungroupObjects").isJsonNull()) {
        UngroupObjectsRequest.validateJsonElement(jsonObj.get("ungroupObjects"));
      }
      // validate the optional field `unmergeTableCells`
      if (jsonObj.get("unmergeTableCells") != null && !jsonObj.get("unmergeTableCells").isJsonNull()) {
        UnmergeTableCellsRequest.validateJsonElement(jsonObj.get("unmergeTableCells"));
      }
      // validate the optional field `updateImageProperties`
      if (jsonObj.get("updateImageProperties") != null && !jsonObj.get("updateImageProperties").isJsonNull()) {
        UpdateImagePropertiesRequest.validateJsonElement(jsonObj.get("updateImageProperties"));
      }
      // validate the optional field `updateLineCategory`
      if (jsonObj.get("updateLineCategory") != null && !jsonObj.get("updateLineCategory").isJsonNull()) {
        UpdateLineCategoryRequest.validateJsonElement(jsonObj.get("updateLineCategory"));
      }
      // validate the optional field `updateLineProperties`
      if (jsonObj.get("updateLineProperties") != null && !jsonObj.get("updateLineProperties").isJsonNull()) {
        UpdateLinePropertiesRequest.validateJsonElement(jsonObj.get("updateLineProperties"));
      }
      // validate the optional field `updatePageElementAltText`
      if (jsonObj.get("updatePageElementAltText") != null && !jsonObj.get("updatePageElementAltText").isJsonNull()) {
        UpdatePageElementAltTextRequest.validateJsonElement(jsonObj.get("updatePageElementAltText"));
      }
      // validate the optional field `updatePageElementTransform`
      if (jsonObj.get("updatePageElementTransform") != null && !jsonObj.get("updatePageElementTransform").isJsonNull()) {
        UpdatePageElementTransformRequest.validateJsonElement(jsonObj.get("updatePageElementTransform"));
      }
      // validate the optional field `updatePageElementsZOrder`
      if (jsonObj.get("updatePageElementsZOrder") != null && !jsonObj.get("updatePageElementsZOrder").isJsonNull()) {
        UpdatePageElementsZOrderRequest.validateJsonElement(jsonObj.get("updatePageElementsZOrder"));
      }
      // validate the optional field `updatePageProperties`
      if (jsonObj.get("updatePageProperties") != null && !jsonObj.get("updatePageProperties").isJsonNull()) {
        UpdatePagePropertiesRequest.validateJsonElement(jsonObj.get("updatePageProperties"));
      }
      // validate the optional field `updateParagraphStyle`
      if (jsonObj.get("updateParagraphStyle") != null && !jsonObj.get("updateParagraphStyle").isJsonNull()) {
        UpdateParagraphStyleRequest.validateJsonElement(jsonObj.get("updateParagraphStyle"));
      }
      // validate the optional field `updateShapeProperties`
      if (jsonObj.get("updateShapeProperties") != null && !jsonObj.get("updateShapeProperties").isJsonNull()) {
        UpdateShapePropertiesRequest.validateJsonElement(jsonObj.get("updateShapeProperties"));
      }
      // validate the optional field `updateSlideProperties`
      if (jsonObj.get("updateSlideProperties") != null && !jsonObj.get("updateSlideProperties").isJsonNull()) {
        UpdateSlidePropertiesRequest.validateJsonElement(jsonObj.get("updateSlideProperties"));
      }
      // validate the optional field `updateSlidesPosition`
      if (jsonObj.get("updateSlidesPosition") != null && !jsonObj.get("updateSlidesPosition").isJsonNull()) {
        UpdateSlidesPositionRequest.validateJsonElement(jsonObj.get("updateSlidesPosition"));
      }
      // validate the optional field `updateTableBorderProperties`
      if (jsonObj.get("updateTableBorderProperties") != null && !jsonObj.get("updateTableBorderProperties").isJsonNull()) {
        UpdateTableBorderPropertiesRequest.validateJsonElement(jsonObj.get("updateTableBorderProperties"));
      }
      // validate the optional field `updateTableCellProperties`
      if (jsonObj.get("updateTableCellProperties") != null && !jsonObj.get("updateTableCellProperties").isJsonNull()) {
        UpdateTableCellPropertiesRequest.validateJsonElement(jsonObj.get("updateTableCellProperties"));
      }
      // validate the optional field `updateTableColumnProperties`
      if (jsonObj.get("updateTableColumnProperties") != null && !jsonObj.get("updateTableColumnProperties").isJsonNull()) {
        UpdateTableColumnPropertiesRequest.validateJsonElement(jsonObj.get("updateTableColumnProperties"));
      }
      // validate the optional field `updateTableRowProperties`
      if (jsonObj.get("updateTableRowProperties") != null && !jsonObj.get("updateTableRowProperties").isJsonNull()) {
        UpdateTableRowPropertiesRequest.validateJsonElement(jsonObj.get("updateTableRowProperties"));
      }
      // validate the optional field `updateTextStyle`
      if (jsonObj.get("updateTextStyle") != null && !jsonObj.get("updateTextStyle").isJsonNull()) {
        UpdateTextStyleRequest.validateJsonElement(jsonObj.get("updateTextStyle"));
      }
      // validate the optional field `updateVideoProperties`
      if (jsonObj.get("updateVideoProperties") != null && !jsonObj.get("updateVideoProperties").isJsonNull()) {
        UpdateVideoPropertiesRequest.validateJsonElement(jsonObj.get("updateVideoProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Request
   * @throws IOException if the JSON string is invalid with respect to Request
   */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

  /**
   * Convert an instance of Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

