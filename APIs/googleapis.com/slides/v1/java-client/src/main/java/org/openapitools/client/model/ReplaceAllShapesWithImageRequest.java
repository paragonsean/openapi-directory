/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubstringMatchCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceAllShapesWithImageRequest {
  public static final String SERIALIZED_NAME_CONTAINS_TEXT = "containsText";
  @SerializedName(SERIALIZED_NAME_CONTAINS_TEXT)
  private SubstringMatchCriteria containsText;

  /**
   * The image replace method. If you specify both a &#x60;replace_method&#x60; and an &#x60;image_replace_method&#x60;, the &#x60;image_replace_method&#x60; takes precedence. If you do not specify a value for &#x60;image_replace_method&#x60;, but specify a value for &#x60;replace_method&#x60;, then the specified &#x60;replace_method&#x60; value is used. If you do not specify either, then CENTER_INSIDE is used.
   */
  @JsonAdapter(ImageReplaceMethodEnum.Adapter.class)
  public enum ImageReplaceMethodEnum {
    IMAGE_REPLACE_METHOD_UNSPECIFIED("IMAGE_REPLACE_METHOD_UNSPECIFIED"),
    
    CENTER_INSIDE("CENTER_INSIDE"),
    
    CENTER_CROP("CENTER_CROP");

    private String value;

    ImageReplaceMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageReplaceMethodEnum fromValue(String value) {
      for (ImageReplaceMethodEnum b : ImageReplaceMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageReplaceMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageReplaceMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageReplaceMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageReplaceMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageReplaceMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_REPLACE_METHOD = "imageReplaceMethod";
  @SerializedName(SERIALIZED_NAME_IMAGE_REPLACE_METHOD)
  private ImageReplaceMethodEnum imageReplaceMethod;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PAGE_OBJECT_IDS = "pageObjectIds";
  @SerializedName(SERIALIZED_NAME_PAGE_OBJECT_IDS)
  private List<String> pageObjectIds = new ArrayList<>();

  /**
   * The replace method. *Deprecated*: use &#x60;image_replace_method&#x60; instead. If you specify both a &#x60;replace_method&#x60; and an &#x60;image_replace_method&#x60;, the &#x60;image_replace_method&#x60; takes precedence.
   */
  @JsonAdapter(ReplaceMethodEnum.Adapter.class)
  public enum ReplaceMethodEnum {
    INSIDE("CENTER_INSIDE"),
    
    CROP("CENTER_CROP");

    private String value;

    ReplaceMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplaceMethodEnum fromValue(String value) {
      for (ReplaceMethodEnum b : ReplaceMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplaceMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplaceMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplaceMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplaceMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplaceMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLACE_METHOD = "replaceMethod";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REPLACE_METHOD)
  private ReplaceMethodEnum replaceMethod;

  public ReplaceAllShapesWithImageRequest() {
  }

  public ReplaceAllShapesWithImageRequest containsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
    return this;
  }

  /**
   * Get containsText
   * @return containsText
   */
  @javax.annotation.Nullable
  public SubstringMatchCriteria getContainsText() {
    return containsText;
  }

  public void setContainsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
  }


  public ReplaceAllShapesWithImageRequest imageReplaceMethod(ImageReplaceMethodEnum imageReplaceMethod) {
    this.imageReplaceMethod = imageReplaceMethod;
    return this;
  }

  /**
   * The image replace method. If you specify both a &#x60;replace_method&#x60; and an &#x60;image_replace_method&#x60;, the &#x60;image_replace_method&#x60; takes precedence. If you do not specify a value for &#x60;image_replace_method&#x60;, but specify a value for &#x60;replace_method&#x60;, then the specified &#x60;replace_method&#x60; value is used. If you do not specify either, then CENTER_INSIDE is used.
   * @return imageReplaceMethod
   */
  @javax.annotation.Nullable
  public ImageReplaceMethodEnum getImageReplaceMethod() {
    return imageReplaceMethod;
  }

  public void setImageReplaceMethod(ImageReplaceMethodEnum imageReplaceMethod) {
    this.imageReplaceMethod = imageReplaceMethod;
  }


  public ReplaceAllShapesWithImageRequest imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ReplaceAllShapesWithImageRequest pageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
    return this;
  }

  public ReplaceAllShapesWithImageRequest addPageObjectIdsItem(String pageObjectIdsItem) {
    if (this.pageObjectIds == null) {
      this.pageObjectIds = new ArrayList<>();
    }
    this.pageObjectIds.add(pageObjectIdsItem);
    return this;
  }

  /**
   * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn&#39;t exist in the presentation.
   * @return pageObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getPageObjectIds() {
    return pageObjectIds;
  }

  public void setPageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
  }


  @Deprecated
  public ReplaceAllShapesWithImageRequest replaceMethod(ReplaceMethodEnum replaceMethod) {
    this.replaceMethod = replaceMethod;
    return this;
  }

  /**
   * The replace method. *Deprecated*: use &#x60;image_replace_method&#x60; instead. If you specify both a &#x60;replace_method&#x60; and an &#x60;image_replace_method&#x60;, the &#x60;image_replace_method&#x60; takes precedence.
   * @return replaceMethod
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ReplaceMethodEnum getReplaceMethod() {
    return replaceMethod;
  }

  @Deprecated
  public void setReplaceMethod(ReplaceMethodEnum replaceMethod) {
    this.replaceMethod = replaceMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceAllShapesWithImageRequest replaceAllShapesWithImageRequest = (ReplaceAllShapesWithImageRequest) o;
    return Objects.equals(this.containsText, replaceAllShapesWithImageRequest.containsText) &&
        Objects.equals(this.imageReplaceMethod, replaceAllShapesWithImageRequest.imageReplaceMethod) &&
        Objects.equals(this.imageUrl, replaceAllShapesWithImageRequest.imageUrl) &&
        Objects.equals(this.pageObjectIds, replaceAllShapesWithImageRequest.pageObjectIds) &&
        Objects.equals(this.replaceMethod, replaceAllShapesWithImageRequest.replaceMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsText, imageReplaceMethod, imageUrl, pageObjectIds, replaceMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceAllShapesWithImageRequest {\n");
    sb.append("    containsText: ").append(toIndentedString(containsText)).append("\n");
    sb.append("    imageReplaceMethod: ").append(toIndentedString(imageReplaceMethod)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    pageObjectIds: ").append(toIndentedString(pageObjectIds)).append("\n");
    sb.append("    replaceMethod: ").append(toIndentedString(replaceMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containsText");
    openapiFields.add("imageReplaceMethod");
    openapiFields.add("imageUrl");
    openapiFields.add("pageObjectIds");
    openapiFields.add("replaceMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceAllShapesWithImageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceAllShapesWithImageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceAllShapesWithImageRequest is not found in the empty JSON string", ReplaceAllShapesWithImageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceAllShapesWithImageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceAllShapesWithImageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containsText`
      if (jsonObj.get("containsText") != null && !jsonObj.get("containsText").isJsonNull()) {
        SubstringMatchCriteria.validateJsonElement(jsonObj.get("containsText"));
      }
      if ((jsonObj.get("imageReplaceMethod") != null && !jsonObj.get("imageReplaceMethod").isJsonNull()) && !jsonObj.get("imageReplaceMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageReplaceMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageReplaceMethod").toString()));
      }
      // validate the optional field `imageReplaceMethod`
      if (jsonObj.get("imageReplaceMethod") != null && !jsonObj.get("imageReplaceMethod").isJsonNull()) {
        ImageReplaceMethodEnum.validateJsonElement(jsonObj.get("imageReplaceMethod"));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pageObjectIds") != null && !jsonObj.get("pageObjectIds").isJsonNull() && !jsonObj.get("pageObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("pageObjectIds").toString()));
      }
      if ((jsonObj.get("replaceMethod") != null && !jsonObj.get("replaceMethod").isJsonNull()) && !jsonObj.get("replaceMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaceMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaceMethod").toString()));
      }
      // validate the optional field `replaceMethod`
      if (jsonObj.get("replaceMethod") != null && !jsonObj.get("replaceMethod").isJsonNull()) {
        ReplaceMethodEnum.validateJsonElement(jsonObj.get("replaceMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceAllShapesWithImageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceAllShapesWithImageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceAllShapesWithImageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceAllShapesWithImageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceAllShapesWithImageRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceAllShapesWithImageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceAllShapesWithImageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceAllShapesWithImageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceAllShapesWithImageRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceAllShapesWithImageRequest
   */
  public static ReplaceAllShapesWithImageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceAllShapesWithImageRequest.class);
  }

  /**
   * Convert an instance of ReplaceAllShapesWithImageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

