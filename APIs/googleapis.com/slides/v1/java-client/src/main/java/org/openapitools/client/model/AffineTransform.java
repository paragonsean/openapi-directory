/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x&#39;, y&#39;) according to: x&#39; x &#x3D; shear_y scale_y translate_y 1 [ 1 ] After transformation, x&#39; &#x3D; scale_x * x + shear_x * y + translate_x; y&#39; &#x3D; scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AffineTransform {
  public static final String SERIALIZED_NAME_SCALE_X = "scaleX";
  @SerializedName(SERIALIZED_NAME_SCALE_X)
  private Double scaleX;

  public static final String SERIALIZED_NAME_SCALE_Y = "scaleY";
  @SerializedName(SERIALIZED_NAME_SCALE_Y)
  private Double scaleY;

  public static final String SERIALIZED_NAME_SHEAR_X = "shearX";
  @SerializedName(SERIALIZED_NAME_SHEAR_X)
  private Double shearX;

  public static final String SERIALIZED_NAME_SHEAR_Y = "shearY";
  @SerializedName(SERIALIZED_NAME_SHEAR_Y)
  private Double shearY;

  public static final String SERIALIZED_NAME_TRANSLATE_X = "translateX";
  @SerializedName(SERIALIZED_NAME_TRANSLATE_X)
  private Double translateX;

  public static final String SERIALIZED_NAME_TRANSLATE_Y = "translateY";
  @SerializedName(SERIALIZED_NAME_TRANSLATE_Y)
  private Double translateY;

  /**
   * The units for translate elements.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    UNIT_UNSPECIFIED("UNIT_UNSPECIFIED"),
    
    EMU("EMU"),
    
    PT("PT");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public AffineTransform() {
  }

  public AffineTransform scaleX(Double scaleX) {
    this.scaleX = scaleX;
    return this;
  }

  /**
   * The X coordinate scaling element.
   * @return scaleX
   */
  @javax.annotation.Nullable
  public Double getScaleX() {
    return scaleX;
  }

  public void setScaleX(Double scaleX) {
    this.scaleX = scaleX;
  }


  public AffineTransform scaleY(Double scaleY) {
    this.scaleY = scaleY;
    return this;
  }

  /**
   * The Y coordinate scaling element.
   * @return scaleY
   */
  @javax.annotation.Nullable
  public Double getScaleY() {
    return scaleY;
  }

  public void setScaleY(Double scaleY) {
    this.scaleY = scaleY;
  }


  public AffineTransform shearX(Double shearX) {
    this.shearX = shearX;
    return this;
  }

  /**
   * The X coordinate shearing element.
   * @return shearX
   */
  @javax.annotation.Nullable
  public Double getShearX() {
    return shearX;
  }

  public void setShearX(Double shearX) {
    this.shearX = shearX;
  }


  public AffineTransform shearY(Double shearY) {
    this.shearY = shearY;
    return this;
  }

  /**
   * The Y coordinate shearing element.
   * @return shearY
   */
  @javax.annotation.Nullable
  public Double getShearY() {
    return shearY;
  }

  public void setShearY(Double shearY) {
    this.shearY = shearY;
  }


  public AffineTransform translateX(Double translateX) {
    this.translateX = translateX;
    return this;
  }

  /**
   * The X coordinate translation element.
   * @return translateX
   */
  @javax.annotation.Nullable
  public Double getTranslateX() {
    return translateX;
  }

  public void setTranslateX(Double translateX) {
    this.translateX = translateX;
  }


  public AffineTransform translateY(Double translateY) {
    this.translateY = translateY;
    return this;
  }

  /**
   * The Y coordinate translation element.
   * @return translateY
   */
  @javax.annotation.Nullable
  public Double getTranslateY() {
    return translateY;
  }

  public void setTranslateY(Double translateY) {
    this.translateY = translateY;
  }


  public AffineTransform unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The units for translate elements.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffineTransform affineTransform = (AffineTransform) o;
    return Objects.equals(this.scaleX, affineTransform.scaleX) &&
        Objects.equals(this.scaleY, affineTransform.scaleY) &&
        Objects.equals(this.shearX, affineTransform.shearX) &&
        Objects.equals(this.shearY, affineTransform.shearY) &&
        Objects.equals(this.translateX, affineTransform.translateX) &&
        Objects.equals(this.translateY, affineTransform.translateY) &&
        Objects.equals(this.unit, affineTransform.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scaleX, scaleY, shearX, shearY, translateX, translateY, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffineTransform {\n");
    sb.append("    scaleX: ").append(toIndentedString(scaleX)).append("\n");
    sb.append("    scaleY: ").append(toIndentedString(scaleY)).append("\n");
    sb.append("    shearX: ").append(toIndentedString(shearX)).append("\n");
    sb.append("    shearY: ").append(toIndentedString(shearY)).append("\n");
    sb.append("    translateX: ").append(toIndentedString(translateX)).append("\n");
    sb.append("    translateY: ").append(toIndentedString(translateY)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scaleX");
    openapiFields.add("scaleY");
    openapiFields.add("shearX");
    openapiFields.add("shearY");
    openapiFields.add("translateX");
    openapiFields.add("translateY");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AffineTransform
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AffineTransform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffineTransform is not found in the empty JSON string", AffineTransform.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AffineTransform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffineTransform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffineTransform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffineTransform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffineTransform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffineTransform.class));

       return (TypeAdapter<T>) new TypeAdapter<AffineTransform>() {
           @Override
           public void write(JsonWriter out, AffineTransform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffineTransform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AffineTransform given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AffineTransform
   * @throws IOException if the JSON string is invalid with respect to AffineTransform
   */
  public static AffineTransform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffineTransform.class);
  }

  /**
   * Convert an instance of AffineTransform to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

