/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupObjectsRequest {
  public static final String SERIALIZED_NAME_CHILDREN_OBJECT_IDS = "childrenObjectIds";
  @SerializedName(SERIALIZED_NAME_CHILDREN_OBJECT_IDS)
  private List<String> childrenObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_OBJECT_ID = "groupObjectId";
  @SerializedName(SERIALIZED_NAME_GROUP_OBJECT_ID)
  private String groupObjectId;

  public GroupObjectsRequest() {
  }

  public GroupObjectsRequest childrenObjectIds(List<String> childrenObjectIds) {
    this.childrenObjectIds = childrenObjectIds;
    return this;
  }

  public GroupObjectsRequest addChildrenObjectIdsItem(String childrenObjectIdsItem) {
    if (this.childrenObjectIds == null) {
      this.childrenObjectIds = new ArrayList<>();
    }
    this.childrenObjectIds.add(childrenObjectIdsItem);
    return this;
  }

  /**
   * The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.
   * @return childrenObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getChildrenObjectIds() {
    return childrenObjectIds;
  }

  public void setChildrenObjectIds(List<String> childrenObjectIds) {
    this.childrenObjectIds = childrenObjectIds;
  }


  public GroupObjectsRequest groupObjectId(String groupObjectId) {
    this.groupObjectId = groupObjectId;
    return this;
  }

  /**
   * A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex &#x60;[a-zA-Z0-9_]&#x60;); remaining characters may include those as well as a hyphen or colon (matches regex &#x60;[a-zA-Z0-9_-:]&#x60;). The length of the ID must not be less than 5 or greater than 50. If you don&#39;t specify an ID, a unique one is generated.
   * @return groupObjectId
   */
  @javax.annotation.Nullable
  public String getGroupObjectId() {
    return groupObjectId;
  }

  public void setGroupObjectId(String groupObjectId) {
    this.groupObjectId = groupObjectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupObjectsRequest groupObjectsRequest = (GroupObjectsRequest) o;
    return Objects.equals(this.childrenObjectIds, groupObjectsRequest.childrenObjectIds) &&
        Objects.equals(this.groupObjectId, groupObjectsRequest.groupObjectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childrenObjectIds, groupObjectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupObjectsRequest {\n");
    sb.append("    childrenObjectIds: ").append(toIndentedString(childrenObjectIds)).append("\n");
    sb.append("    groupObjectId: ").append(toIndentedString(groupObjectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childrenObjectIds");
    openapiFields.add("groupObjectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupObjectsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupObjectsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupObjectsRequest is not found in the empty JSON string", GroupObjectsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupObjectsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupObjectsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childrenObjectIds") != null && !jsonObj.get("childrenObjectIds").isJsonNull() && !jsonObj.get("childrenObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childrenObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("childrenObjectIds").toString()));
      }
      if ((jsonObj.get("groupObjectId") != null && !jsonObj.get("groupObjectId").isJsonNull()) && !jsonObj.get("groupObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupObjectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupObjectsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupObjectsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupObjectsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupObjectsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupObjectsRequest>() {
           @Override
           public void write(JsonWriter out, GroupObjectsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupObjectsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupObjectsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupObjectsRequest
   * @throws IOException if the JSON string is invalid with respect to GroupObjectsRequest
   */
  public static GroupObjectsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupObjectsRequest.class);
  }

  /**
   * Convert an instance of GroupObjectsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

