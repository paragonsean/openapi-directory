/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.OutlineFill;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Outline {
  /**
   * The dash style of the outline.
   */
  @JsonAdapter(DashStyleEnum.Adapter.class)
  public enum DashStyleEnum {
    DASH_STYLE_UNSPECIFIED("DASH_STYLE_UNSPECIFIED"),
    
    SOLID("SOLID"),
    
    DOT("DOT"),
    
    DASH("DASH"),
    
    DASH_DOT("DASH_DOT"),
    
    LONG_DASH("LONG_DASH"),
    
    LONG_DASH_DOT("LONG_DASH_DOT");

    private String value;

    DashStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DashStyleEnum fromValue(String value) {
      for (DashStyleEnum b : DashStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DashStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DashStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DashStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DashStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DashStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DASH_STYLE = "dashStyle";
  @SerializedName(SERIALIZED_NAME_DASH_STYLE)
  private DashStyleEnum dashStyle;

  public static final String SERIALIZED_NAME_OUTLINE_FILL = "outlineFill";
  @SerializedName(SERIALIZED_NAME_OUTLINE_FILL)
  private OutlineFill outlineFill;

  /**
   * The outline property state. Updating the outline on a page element will implicitly update this field to &#x60;RENDERED&#x60;, unless another value is specified in the same request. To have no outline on a page element, set this field to &#x60;NOT_RENDERED&#x60;. In this case, any other outline fields set in the same request will be ignored.
   */
  @JsonAdapter(PropertyStateEnum.Adapter.class)
  public enum PropertyStateEnum {
    RENDERED("RENDERED"),
    
    NOT_RENDERED("NOT_RENDERED"),
    
    INHERIT("INHERIT");

    private String value;

    PropertyStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyStateEnum fromValue(String value) {
      for (PropertyStateEnum b : PropertyStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_STATE = "propertyState";
  @SerializedName(SERIALIZED_NAME_PROPERTY_STATE)
  private PropertyStateEnum propertyState;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Dimension weight;

  public Outline() {
  }

  public Outline dashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
    return this;
  }

  /**
   * The dash style of the outline.
   * @return dashStyle
   */
  @javax.annotation.Nullable
  public DashStyleEnum getDashStyle() {
    return dashStyle;
  }

  public void setDashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
  }


  public Outline outlineFill(OutlineFill outlineFill) {
    this.outlineFill = outlineFill;
    return this;
  }

  /**
   * Get outlineFill
   * @return outlineFill
   */
  @javax.annotation.Nullable
  public OutlineFill getOutlineFill() {
    return outlineFill;
  }

  public void setOutlineFill(OutlineFill outlineFill) {
    this.outlineFill = outlineFill;
  }


  public Outline propertyState(PropertyStateEnum propertyState) {
    this.propertyState = propertyState;
    return this;
  }

  /**
   * The outline property state. Updating the outline on a page element will implicitly update this field to &#x60;RENDERED&#x60;, unless another value is specified in the same request. To have no outline on a page element, set this field to &#x60;NOT_RENDERED&#x60;. In this case, any other outline fields set in the same request will be ignored.
   * @return propertyState
   */
  @javax.annotation.Nullable
  public PropertyStateEnum getPropertyState() {
    return propertyState;
  }

  public void setPropertyState(PropertyStateEnum propertyState) {
    this.propertyState = propertyState;
  }


  public Outline weight(Dimension weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Dimension getWeight() {
    return weight;
  }

  public void setWeight(Dimension weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Outline outline = (Outline) o;
    return Objects.equals(this.dashStyle, outline.dashStyle) &&
        Objects.equals(this.outlineFill, outline.outlineFill) &&
        Objects.equals(this.propertyState, outline.propertyState) &&
        Objects.equals(this.weight, outline.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dashStyle, outlineFill, propertyState, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Outline {\n");
    sb.append("    dashStyle: ").append(toIndentedString(dashStyle)).append("\n");
    sb.append("    outlineFill: ").append(toIndentedString(outlineFill)).append("\n");
    sb.append("    propertyState: ").append(toIndentedString(propertyState)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dashStyle");
    openapiFields.add("outlineFill");
    openapiFields.add("propertyState");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Outline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Outline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Outline is not found in the empty JSON string", Outline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Outline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Outline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) && !jsonObj.get("dashStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashStyle").toString()));
      }
      // validate the optional field `dashStyle`
      if (jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) {
        DashStyleEnum.validateJsonElement(jsonObj.get("dashStyle"));
      }
      // validate the optional field `outlineFill`
      if (jsonObj.get("outlineFill") != null && !jsonObj.get("outlineFill").isJsonNull()) {
        OutlineFill.validateJsonElement(jsonObj.get("outlineFill"));
      }
      if ((jsonObj.get("propertyState") != null && !jsonObj.get("propertyState").isJsonNull()) && !jsonObj.get("propertyState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyState").toString()));
      }
      // validate the optional field `propertyState`
      if (jsonObj.get("propertyState") != null && !jsonObj.get("propertyState").isJsonNull()) {
        PropertyStateEnum.validateJsonElement(jsonObj.get("propertyState"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Outline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Outline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Outline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Outline.class));

       return (TypeAdapter<T>) new TypeAdapter<Outline>() {
           @Override
           public void write(JsonWriter out, Outline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Outline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Outline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Outline
   * @throws IOException if the JSON string is invalid with respect to Outline
   */
  public static Outline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Outline.class);
  }

  /**
   * Convert an instance of Outline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

