/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LayoutPlaceholderIdMapping;
import org.openapitools.client.model.LayoutReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates a slide.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSlideRequest {
  public static final String SERIALIZED_NAME_INSERTION_INDEX = "insertionIndex";
  @SerializedName(SERIALIZED_NAME_INSERTION_INDEX)
  private Integer insertionIndex;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_PLACEHOLDER_ID_MAPPINGS = "placeholderIdMappings";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER_ID_MAPPINGS)
  private List<LayoutPlaceholderIdMapping> placeholderIdMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLIDE_LAYOUT_REFERENCE = "slideLayoutReference";
  @SerializedName(SERIALIZED_NAME_SLIDE_LAYOUT_REFERENCE)
  private LayoutReference slideLayoutReference;

  public CreateSlideRequest() {
  }

  public CreateSlideRequest insertionIndex(Integer insertionIndex) {
    this.insertionIndex = insertionIndex;
    return this;
  }

  /**
   * The optional zero-based index indicating where to insert the slides. If you don&#39;t specify an index, the slide is created at the end.
   * @return insertionIndex
   */
  @javax.annotation.Nullable
  public Integer getInsertionIndex() {
    return insertionIndex;
  }

  public void setInsertionIndex(Integer insertionIndex) {
    this.insertionIndex = insertionIndex;
  }


  public CreateSlideRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex &#x60;[a-zA-Z0-9_]&#x60;); remaining characters may include those as well as a hyphen or colon (matches regex &#x60;[a-zA-Z0-9_-:]&#x60;). The ID length must be between 5 and 50 characters, inclusive. If you don&#39;t specify an ID, a unique one is generated.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public CreateSlideRequest placeholderIdMappings(List<LayoutPlaceholderIdMapping> placeholderIdMappings) {
    this.placeholderIdMappings = placeholderIdMappings;
    return this;
  }

  public CreateSlideRequest addPlaceholderIdMappingsItem(LayoutPlaceholderIdMapping placeholderIdMappingsItem) {
    if (this.placeholderIdMappings == null) {
      this.placeholderIdMappings = new ArrayList<>();
    }
    this.placeholderIdMappings.add(placeholderIdMappingsItem);
    return this;
  }

  /**
   * An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when &#x60;slide_layout_reference&#x60; is specified.
   * @return placeholderIdMappings
   */
  @javax.annotation.Nullable
  public List<LayoutPlaceholderIdMapping> getPlaceholderIdMappings() {
    return placeholderIdMappings;
  }

  public void setPlaceholderIdMappings(List<LayoutPlaceholderIdMapping> placeholderIdMappings) {
    this.placeholderIdMappings = placeholderIdMappings;
  }


  public CreateSlideRequest slideLayoutReference(LayoutReference slideLayoutReference) {
    this.slideLayoutReference = slideLayoutReference;
    return this;
  }

  /**
   * Get slideLayoutReference
   * @return slideLayoutReference
   */
  @javax.annotation.Nullable
  public LayoutReference getSlideLayoutReference() {
    return slideLayoutReference;
  }

  public void setSlideLayoutReference(LayoutReference slideLayoutReference) {
    this.slideLayoutReference = slideLayoutReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSlideRequest createSlideRequest = (CreateSlideRequest) o;
    return Objects.equals(this.insertionIndex, createSlideRequest.insertionIndex) &&
        Objects.equals(this.objectId, createSlideRequest.objectId) &&
        Objects.equals(this.placeholderIdMappings, createSlideRequest.placeholderIdMappings) &&
        Objects.equals(this.slideLayoutReference, createSlideRequest.slideLayoutReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insertionIndex, objectId, placeholderIdMappings, slideLayoutReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSlideRequest {\n");
    sb.append("    insertionIndex: ").append(toIndentedString(insertionIndex)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    placeholderIdMappings: ").append(toIndentedString(placeholderIdMappings)).append("\n");
    sb.append("    slideLayoutReference: ").append(toIndentedString(slideLayoutReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("insertionIndex");
    openapiFields.add("objectId");
    openapiFields.add("placeholderIdMappings");
    openapiFields.add("slideLayoutReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSlideRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSlideRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSlideRequest is not found in the empty JSON string", CreateSlideRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSlideRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSlideRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if (jsonObj.get("placeholderIdMappings") != null && !jsonObj.get("placeholderIdMappings").isJsonNull()) {
        JsonArray jsonArrayplaceholderIdMappings = jsonObj.getAsJsonArray("placeholderIdMappings");
        if (jsonArrayplaceholderIdMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("placeholderIdMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `placeholderIdMappings` to be an array in the JSON string but got `%s`", jsonObj.get("placeholderIdMappings").toString()));
          }

          // validate the optional field `placeholderIdMappings` (array)
          for (int i = 0; i < jsonArrayplaceholderIdMappings.size(); i++) {
            LayoutPlaceholderIdMapping.validateJsonElement(jsonArrayplaceholderIdMappings.get(i));
          };
        }
      }
      // validate the optional field `slideLayoutReference`
      if (jsonObj.get("slideLayoutReference") != null && !jsonObj.get("slideLayoutReference").isJsonNull()) {
        LayoutReference.validateJsonElement(jsonObj.get("slideLayoutReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSlideRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSlideRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSlideRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSlideRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSlideRequest>() {
           @Override
           public void write(JsonWriter out, CreateSlideRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSlideRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSlideRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSlideRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSlideRequest
   */
  public static CreateSlideRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSlideRequest.class);
  }

  /**
   * Convert an instance of CreateSlideRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

