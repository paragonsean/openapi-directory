/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PageElementProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSheetsChartRequest {
  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private Integer chartId;

  public static final String SERIALIZED_NAME_ELEMENT_PROPERTIES = "elementProperties";
  @SerializedName(SERIALIZED_NAME_ELEMENT_PROPERTIES)
  private PageElementProperties elementProperties;

  /**
   * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
   */
  @JsonAdapter(LinkingModeEnum.Adapter.class)
  public enum LinkingModeEnum {
    NOT_LINKED_IMAGE("NOT_LINKED_IMAGE"),
    
    LINKED("LINKED");

    private String value;

    LinkingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkingModeEnum fromValue(String value) {
      for (LinkingModeEnum b : LinkingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINKING_MODE = "linkingMode";
  @SerializedName(SERIALIZED_NAME_LINKING_MODE)
  private LinkingModeEnum linkingMode;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_SPREADSHEET_ID = "spreadsheetId";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_ID)
  private String spreadsheetId;

  public CreateSheetsChartRequest() {
  }

  public CreateSheetsChartRequest chartId(Integer chartId) {
    this.chartId = chartId;
    return this;
  }

  /**
   * The ID of the specific chart in the Google Sheets spreadsheet.
   * @return chartId
   */
  @javax.annotation.Nullable
  public Integer getChartId() {
    return chartId;
  }

  public void setChartId(Integer chartId) {
    this.chartId = chartId;
  }


  public CreateSheetsChartRequest elementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
    return this;
  }

  /**
   * Get elementProperties
   * @return elementProperties
   */
  @javax.annotation.Nullable
  public PageElementProperties getElementProperties() {
    return elementProperties;
  }

  public void setElementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
  }


  public CreateSheetsChartRequest linkingMode(LinkingModeEnum linkingMode) {
    this.linkingMode = linkingMode;
    return this;
  }

  /**
   * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
   * @return linkingMode
   */
  @javax.annotation.Nullable
  public LinkingModeEnum getLinkingMode() {
    return linkingMode;
  }

  public void setLinkingMode(LinkingModeEnum linkingMode) {
    this.linkingMode = linkingMode;
  }


  public CreateSheetsChartRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public CreateSheetsChartRequest spreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
    return this;
  }

  /**
   * The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
   * @return spreadsheetId
   */
  @javax.annotation.Nullable
  public String getSpreadsheetId() {
    return spreadsheetId;
  }

  public void setSpreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSheetsChartRequest createSheetsChartRequest = (CreateSheetsChartRequest) o;
    return Objects.equals(this.chartId, createSheetsChartRequest.chartId) &&
        Objects.equals(this.elementProperties, createSheetsChartRequest.elementProperties) &&
        Objects.equals(this.linkingMode, createSheetsChartRequest.linkingMode) &&
        Objects.equals(this.objectId, createSheetsChartRequest.objectId) &&
        Objects.equals(this.spreadsheetId, createSheetsChartRequest.spreadsheetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartId, elementProperties, linkingMode, objectId, spreadsheetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSheetsChartRequest {\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    elementProperties: ").append(toIndentedString(elementProperties)).append("\n");
    sb.append("    linkingMode: ").append(toIndentedString(linkingMode)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    spreadsheetId: ").append(toIndentedString(spreadsheetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chartId");
    openapiFields.add("elementProperties");
    openapiFields.add("linkingMode");
    openapiFields.add("objectId");
    openapiFields.add("spreadsheetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSheetsChartRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSheetsChartRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSheetsChartRequest is not found in the empty JSON string", CreateSheetsChartRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSheetsChartRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSheetsChartRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `elementProperties`
      if (jsonObj.get("elementProperties") != null && !jsonObj.get("elementProperties").isJsonNull()) {
        PageElementProperties.validateJsonElement(jsonObj.get("elementProperties"));
      }
      if ((jsonObj.get("linkingMode") != null && !jsonObj.get("linkingMode").isJsonNull()) && !jsonObj.get("linkingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkingMode").toString()));
      }
      // validate the optional field `linkingMode`
      if (jsonObj.get("linkingMode") != null && !jsonObj.get("linkingMode").isJsonNull()) {
        LinkingModeEnum.validateJsonElement(jsonObj.get("linkingMode"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if ((jsonObj.get("spreadsheetId") != null && !jsonObj.get("spreadsheetId").isJsonNull()) && !jsonObj.get("spreadsheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSheetsChartRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSheetsChartRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSheetsChartRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSheetsChartRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSheetsChartRequest>() {
           @Override
           public void write(JsonWriter out, CreateSheetsChartRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSheetsChartRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSheetsChartRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSheetsChartRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSheetsChartRequest
   */
  public static CreateSheetsChartRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSheetsChartRequest.class);
  }

  /**
   * Convert an instance of CreateSheetsChartRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

