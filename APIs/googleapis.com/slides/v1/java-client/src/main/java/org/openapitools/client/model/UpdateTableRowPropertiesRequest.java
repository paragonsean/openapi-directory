/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TableRowProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the properties of a Table row.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTableRowPropertiesRequest {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private String fields;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_ROW_INDICES = "rowIndices";
  @SerializedName(SERIALIZED_NAME_ROW_INDICES)
  private List<Integer> rowIndices = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABLE_ROW_PROPERTIES = "tableRowProperties";
  @SerializedName(SERIALIZED_NAME_TABLE_ROW_PROPERTIES)
  private TableRowProperties tableRowProperties;

  public UpdateTableRowPropertiesRequest() {
  }

  public UpdateTableRowPropertiesRequest fields(String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * The fields that should be updated. At least one field must be specified. The root &#x60;tableRowProperties&#x60; is implied and should not be specified. A single &#x60;\&quot;*\&quot;&#x60; can be used as short-hand for listing every field. For example to update the minimum row height, set &#x60;fields&#x60; to &#x60;\&quot;min_row_height\&quot;&#x60;. If &#39;\&quot;min_row_height\&quot;&#39; is included in the field mask but the property is left unset, the minimum row height will default to 0.
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(String fields) {
    this.fields = fields;
  }


  public UpdateTableRowPropertiesRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The object ID of the table.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public UpdateTableRowPropertiesRequest rowIndices(List<Integer> rowIndices) {
    this.rowIndices = rowIndices;
    return this;
  }

  public UpdateTableRowPropertiesRequest addRowIndicesItem(Integer rowIndicesItem) {
    if (this.rowIndices == null) {
      this.rowIndices = new ArrayList<>();
    }
    this.rowIndices.add(rowIndicesItem);
    return this;
  }

  /**
   * The list of zero-based indices specifying which rows to update. If no indices are provided, all rows in the table will be updated.
   * @return rowIndices
   */
  @javax.annotation.Nullable
  public List<Integer> getRowIndices() {
    return rowIndices;
  }

  public void setRowIndices(List<Integer> rowIndices) {
    this.rowIndices = rowIndices;
  }


  public UpdateTableRowPropertiesRequest tableRowProperties(TableRowProperties tableRowProperties) {
    this.tableRowProperties = tableRowProperties;
    return this;
  }

  /**
   * Get tableRowProperties
   * @return tableRowProperties
   */
  @javax.annotation.Nullable
  public TableRowProperties getTableRowProperties() {
    return tableRowProperties;
  }

  public void setTableRowProperties(TableRowProperties tableRowProperties) {
    this.tableRowProperties = tableRowProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTableRowPropertiesRequest updateTableRowPropertiesRequest = (UpdateTableRowPropertiesRequest) o;
    return Objects.equals(this.fields, updateTableRowPropertiesRequest.fields) &&
        Objects.equals(this.objectId, updateTableRowPropertiesRequest.objectId) &&
        Objects.equals(this.rowIndices, updateTableRowPropertiesRequest.rowIndices) &&
        Objects.equals(this.tableRowProperties, updateTableRowPropertiesRequest.tableRowProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, objectId, rowIndices, tableRowProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTableRowPropertiesRequest {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    rowIndices: ").append(toIndentedString(rowIndices)).append("\n");
    sb.append("    tableRowProperties: ").append(toIndentedString(tableRowProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("objectId");
    openapiFields.add("rowIndices");
    openapiFields.add("tableRowProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTableRowPropertiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTableRowPropertiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTableRowPropertiesRequest is not found in the empty JSON string", UpdateTableRowPropertiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTableRowPropertiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTableRowPropertiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rowIndices") != null && !jsonObj.get("rowIndices").isJsonNull() && !jsonObj.get("rowIndices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowIndices` to be an array in the JSON string but got `%s`", jsonObj.get("rowIndices").toString()));
      }
      // validate the optional field `tableRowProperties`
      if (jsonObj.get("tableRowProperties") != null && !jsonObj.get("tableRowProperties").isJsonNull()) {
        TableRowProperties.validateJsonElement(jsonObj.get("tableRowProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTableRowPropertiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTableRowPropertiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTableRowPropertiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTableRowPropertiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTableRowPropertiesRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTableRowPropertiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTableRowPropertiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTableRowPropertiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTableRowPropertiesRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTableRowPropertiesRequest
   */
  public static UpdateTableRowPropertiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTableRowPropertiesRequest.class);
  }

  /**
   * Convert an instance of UpdateTableRowPropertiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

