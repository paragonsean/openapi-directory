/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CropProperties;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Outline;
import org.openapitools.client.model.Recolor;
import org.openapitools.client.model.Shadow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageProperties {
  public static final String SERIALIZED_NAME_BRIGHTNESS = "brightness";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS)
  private Float brightness;

  public static final String SERIALIZED_NAME_CONTRAST = "contrast";
  @SerializedName(SERIALIZED_NAME_CONTRAST)
  private Float contrast;

  public static final String SERIALIZED_NAME_CROP_PROPERTIES = "cropProperties";
  @SerializedName(SERIALIZED_NAME_CROP_PROPERTIES)
  private CropProperties cropProperties;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Link link;

  public static final String SERIALIZED_NAME_OUTLINE = "outline";
  @SerializedName(SERIALIZED_NAME_OUTLINE)
  private Outline outline;

  public static final String SERIALIZED_NAME_RECOLOR = "recolor";
  @SerializedName(SERIALIZED_NAME_RECOLOR)
  private Recolor recolor;

  public static final String SERIALIZED_NAME_SHADOW = "shadow";
  @SerializedName(SERIALIZED_NAME_SHADOW)
  private Shadow shadow;

  public static final String SERIALIZED_NAME_TRANSPARENCY = "transparency";
  @SerializedName(SERIALIZED_NAME_TRANSPARENCY)
  private Float transparency;

  public ImageProperties() {
  }

  public ImageProperties brightness(Float brightness) {
    this.brightness = brightness;
    return this;
  }

  /**
   * The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
   * @return brightness
   */
  @javax.annotation.Nullable
  public Float getBrightness() {
    return brightness;
  }

  public void setBrightness(Float brightness) {
    this.brightness = brightness;
  }


  public ImageProperties contrast(Float contrast) {
    this.contrast = contrast;
    return this;
  }

  /**
   * The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
   * @return contrast
   */
  @javax.annotation.Nullable
  public Float getContrast() {
    return contrast;
  }

  public void setContrast(Float contrast) {
    this.contrast = contrast;
  }


  public ImageProperties cropProperties(CropProperties cropProperties) {
    this.cropProperties = cropProperties;
    return this;
  }

  /**
   * Get cropProperties
   * @return cropProperties
   */
  @javax.annotation.Nullable
  public CropProperties getCropProperties() {
    return cropProperties;
  }

  public void setCropProperties(CropProperties cropProperties) {
    this.cropProperties = cropProperties;
  }


  public ImageProperties link(Link link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Link getLink() {
    return link;
  }

  public void setLink(Link link) {
    this.link = link;
  }


  public ImageProperties outline(Outline outline) {
    this.outline = outline;
    return this;
  }

  /**
   * Get outline
   * @return outline
   */
  @javax.annotation.Nullable
  public Outline getOutline() {
    return outline;
  }

  public void setOutline(Outline outline) {
    this.outline = outline;
  }


  public ImageProperties recolor(Recolor recolor) {
    this.recolor = recolor;
    return this;
  }

  /**
   * Get recolor
   * @return recolor
   */
  @javax.annotation.Nullable
  public Recolor getRecolor() {
    return recolor;
  }

  public void setRecolor(Recolor recolor) {
    this.recolor = recolor;
  }


  public ImageProperties shadow(Shadow shadow) {
    this.shadow = shadow;
    return this;
  }

  /**
   * Get shadow
   * @return shadow
   */
  @javax.annotation.Nullable
  public Shadow getShadow() {
    return shadow;
  }

  public void setShadow(Shadow shadow) {
    this.shadow = shadow;
  }


  public ImageProperties transparency(Float transparency) {
    this.transparency = transparency;
    return this;
  }

  /**
   * The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.
   * @return transparency
   */
  @javax.annotation.Nullable
  public Float getTransparency() {
    return transparency;
  }

  public void setTransparency(Float transparency) {
    this.transparency = transparency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageProperties imageProperties = (ImageProperties) o;
    return Objects.equals(this.brightness, imageProperties.brightness) &&
        Objects.equals(this.contrast, imageProperties.contrast) &&
        Objects.equals(this.cropProperties, imageProperties.cropProperties) &&
        Objects.equals(this.link, imageProperties.link) &&
        Objects.equals(this.outline, imageProperties.outline) &&
        Objects.equals(this.recolor, imageProperties.recolor) &&
        Objects.equals(this.shadow, imageProperties.shadow) &&
        Objects.equals(this.transparency, imageProperties.transparency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brightness, contrast, cropProperties, link, outline, recolor, shadow, transparency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageProperties {\n");
    sb.append("    brightness: ").append(toIndentedString(brightness)).append("\n");
    sb.append("    contrast: ").append(toIndentedString(contrast)).append("\n");
    sb.append("    cropProperties: ").append(toIndentedString(cropProperties)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    outline: ").append(toIndentedString(outline)).append("\n");
    sb.append("    recolor: ").append(toIndentedString(recolor)).append("\n");
    sb.append("    shadow: ").append(toIndentedString(shadow)).append("\n");
    sb.append("    transparency: ").append(toIndentedString(transparency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brightness");
    openapiFields.add("contrast");
    openapiFields.add("cropProperties");
    openapiFields.add("link");
    openapiFields.add("outline");
    openapiFields.add("recolor");
    openapiFields.add("shadow");
    openapiFields.add("transparency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageProperties is not found in the empty JSON string", ImageProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cropProperties`
      if (jsonObj.get("cropProperties") != null && !jsonObj.get("cropProperties").isJsonNull()) {
        CropProperties.validateJsonElement(jsonObj.get("cropProperties"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("link"));
      }
      // validate the optional field `outline`
      if (jsonObj.get("outline") != null && !jsonObj.get("outline").isJsonNull()) {
        Outline.validateJsonElement(jsonObj.get("outline"));
      }
      // validate the optional field `recolor`
      if (jsonObj.get("recolor") != null && !jsonObj.get("recolor").isJsonNull()) {
        Recolor.validateJsonElement(jsonObj.get("recolor"));
      }
      // validate the optional field `shadow`
      if (jsonObj.get("shadow") != null && !jsonObj.get("shadow").isJsonNull()) {
        Shadow.validateJsonElement(jsonObj.get("shadow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageProperties>() {
           @Override
           public void write(JsonWriter out, ImageProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageProperties
   * @throws IOException if the JSON string is invalid with respect to ImageProperties
   */
  public static ImageProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageProperties.class);
  }

  /**
   * Convert an instance of ImageProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

