/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Page;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of Page that are only relevant for pages with page_type SLIDE.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideProperties {
  public static final String SERIALIZED_NAME_IS_SKIPPED = "isSkipped";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPED)
  private Boolean isSkipped;

  public static final String SERIALIZED_NAME_LAYOUT_OBJECT_ID = "layoutObjectId";
  @SerializedName(SERIALIZED_NAME_LAYOUT_OBJECT_ID)
  private String layoutObjectId;

  public static final String SERIALIZED_NAME_MASTER_OBJECT_ID = "masterObjectId";
  @SerializedName(SERIALIZED_NAME_MASTER_OBJECT_ID)
  private String masterObjectId;

  public static final String SERIALIZED_NAME_NOTES_PAGE = "notesPage";
  @SerializedName(SERIALIZED_NAME_NOTES_PAGE)
  private Page notesPage;

  public SlideProperties() {
  }

  public SlideProperties isSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
    return this;
  }

  /**
   * Whether the slide is skipped in the presentation mode. Defaults to false.
   * @return isSkipped
   */
  @javax.annotation.Nullable
  public Boolean getIsSkipped() {
    return isSkipped;
  }

  public void setIsSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
  }


  public SlideProperties layoutObjectId(String layoutObjectId) {
    this.layoutObjectId = layoutObjectId;
    return this;
  }

  /**
   * The object ID of the layout that this slide is based on. This property is read-only.
   * @return layoutObjectId
   */
  @javax.annotation.Nullable
  public String getLayoutObjectId() {
    return layoutObjectId;
  }

  public void setLayoutObjectId(String layoutObjectId) {
    this.layoutObjectId = layoutObjectId;
  }


  public SlideProperties masterObjectId(String masterObjectId) {
    this.masterObjectId = masterObjectId;
    return this;
  }

  /**
   * The object ID of the master that this slide is based on. This property is read-only.
   * @return masterObjectId
   */
  @javax.annotation.Nullable
  public String getMasterObjectId() {
    return masterObjectId;
  }

  public void setMasterObjectId(String masterObjectId) {
    this.masterObjectId = masterObjectId;
  }


  public SlideProperties notesPage(Page notesPage) {
    this.notesPage = notesPage;
    return this;
  }

  /**
   * Get notesPage
   * @return notesPage
   */
  @javax.annotation.Nullable
  public Page getNotesPage() {
    return notesPage;
  }

  public void setNotesPage(Page notesPage) {
    this.notesPage = notesPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideProperties slideProperties = (SlideProperties) o;
    return Objects.equals(this.isSkipped, slideProperties.isSkipped) &&
        Objects.equals(this.layoutObjectId, slideProperties.layoutObjectId) &&
        Objects.equals(this.masterObjectId, slideProperties.masterObjectId) &&
        Objects.equals(this.notesPage, slideProperties.notesPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSkipped, layoutObjectId, masterObjectId, notesPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideProperties {\n");
    sb.append("    isSkipped: ").append(toIndentedString(isSkipped)).append("\n");
    sb.append("    layoutObjectId: ").append(toIndentedString(layoutObjectId)).append("\n");
    sb.append("    masterObjectId: ").append(toIndentedString(masterObjectId)).append("\n");
    sb.append("    notesPage: ").append(toIndentedString(notesPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isSkipped");
    openapiFields.add("layoutObjectId");
    openapiFields.add("masterObjectId");
    openapiFields.add("notesPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideProperties is not found in the empty JSON string", SlideProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("layoutObjectId") != null && !jsonObj.get("layoutObjectId").isJsonNull()) && !jsonObj.get("layoutObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layoutObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layoutObjectId").toString()));
      }
      if ((jsonObj.get("masterObjectId") != null && !jsonObj.get("masterObjectId").isJsonNull()) && !jsonObj.get("masterObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterObjectId").toString()));
      }
      // validate the optional field `notesPage`
      if (jsonObj.get("notesPage") != null && !jsonObj.get("notesPage").isJsonNull()) {
        Page.validateJsonElement(jsonObj.get("notesPage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideProperties>() {
           @Override
           public void write(JsonWriter out, SlideProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideProperties
   * @throws IOException if the JSON string is invalid with respect to SlideProperties
   */
  public static SlideProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideProperties.class);
  }

  /**
   * Convert an instance of SlideProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

