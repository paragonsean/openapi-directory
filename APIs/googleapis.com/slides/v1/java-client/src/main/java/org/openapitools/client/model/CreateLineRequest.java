/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PageElementProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates a line.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLineRequest {
  /**
   * The category of the line to be created. The exact line type created is determined based on the category and how it&#39;s routed to connect to other page elements. If you specify both a &#x60;category&#x60; and a &#x60;line_category&#x60;, the &#x60;category&#x60; takes precedence. If you do not specify a value for &#x60;category&#x60;, but specify a value for &#x60;line_category&#x60;, then the specified &#x60;line_category&#x60; value is used. If you do not specify either, then STRAIGHT is used.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    LINE_CATEGORY_UNSPECIFIED("LINE_CATEGORY_UNSPECIFIED"),
    
    STRAIGHT("STRAIGHT"),
    
    BENT("BENT"),
    
    CURVED("CURVED");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_ELEMENT_PROPERTIES = "elementProperties";
  @SerializedName(SERIALIZED_NAME_ELEMENT_PROPERTIES)
  private PageElementProperties elementProperties;

  /**
   * The category of the line to be created. *Deprecated*: use &#x60;category&#x60; instead. The exact line type created is determined based on the category and how it&#39;s routed to connect to other page elements. If you specify both a &#x60;category&#x60; and a &#x60;line_category&#x60;, the &#x60;category&#x60; takes precedence.
   */
  @JsonAdapter(LineCategoryEnum.Adapter.class)
  public enum LineCategoryEnum {
    STRAIGHT("STRAIGHT"),
    
    BENT("BENT"),
    
    CURVED("CURVED");

    private String value;

    LineCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineCategoryEnum fromValue(String value) {
      for (LineCategoryEnum b : LineCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_CATEGORY = "lineCategory";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LINE_CATEGORY)
  private LineCategoryEnum lineCategory;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public CreateLineRequest() {
  }

  public CreateLineRequest category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the line to be created. The exact line type created is determined based on the category and how it&#39;s routed to connect to other page elements. If you specify both a &#x60;category&#x60; and a &#x60;line_category&#x60;, the &#x60;category&#x60; takes precedence. If you do not specify a value for &#x60;category&#x60;, but specify a value for &#x60;line_category&#x60;, then the specified &#x60;line_category&#x60; value is used. If you do not specify either, then STRAIGHT is used.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public CreateLineRequest elementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
    return this;
  }

  /**
   * Get elementProperties
   * @return elementProperties
   */
  @javax.annotation.Nullable
  public PageElementProperties getElementProperties() {
    return elementProperties;
  }

  public void setElementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
  }


  @Deprecated
  public CreateLineRequest lineCategory(LineCategoryEnum lineCategory) {
    this.lineCategory = lineCategory;
    return this;
  }

  /**
   * The category of the line to be created. *Deprecated*: use &#x60;category&#x60; instead. The exact line type created is determined based on the category and how it&#39;s routed to connect to other page elements. If you specify both a &#x60;category&#x60; and a &#x60;line_category&#x60;, the &#x60;category&#x60; takes precedence.
   * @return lineCategory
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public LineCategoryEnum getLineCategory() {
    return lineCategory;
  }

  @Deprecated
  public void setLineCategory(LineCategoryEnum lineCategory) {
    this.lineCategory = lineCategory;
  }


  public CreateLineRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex &#x60;[a-zA-Z0-9_]&#x60;); remaining characters may include those as well as a hyphen or colon (matches regex &#x60;[a-zA-Z0-9_-:]&#x60;). The length of the ID must not be less than 5 or greater than 50. If you don&#39;t specify an ID, a unique one is generated.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLineRequest createLineRequest = (CreateLineRequest) o;
    return Objects.equals(this.category, createLineRequest.category) &&
        Objects.equals(this.elementProperties, createLineRequest.elementProperties) &&
        Objects.equals(this.lineCategory, createLineRequest.lineCategory) &&
        Objects.equals(this.objectId, createLineRequest.objectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, elementProperties, lineCategory, objectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLineRequest {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    elementProperties: ").append(toIndentedString(elementProperties)).append("\n");
    sb.append("    lineCategory: ").append(toIndentedString(lineCategory)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("elementProperties");
    openapiFields.add("lineCategory");
    openapiFields.add("objectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLineRequest is not found in the empty JSON string", CreateLineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `elementProperties`
      if (jsonObj.get("elementProperties") != null && !jsonObj.get("elementProperties").isJsonNull()) {
        PageElementProperties.validateJsonElement(jsonObj.get("elementProperties"));
      }
      if ((jsonObj.get("lineCategory") != null && !jsonObj.get("lineCategory").isJsonNull()) && !jsonObj.get("lineCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineCategory").toString()));
      }
      // validate the optional field `lineCategory`
      if (jsonObj.get("lineCategory") != null && !jsonObj.get("lineCategory").isJsonNull()) {
        LineCategoryEnum.validateJsonElement(jsonObj.get("lineCategory"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLineRequest>() {
           @Override
           public void write(JsonWriter out, CreateLineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLineRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLineRequest
   */
  public static CreateLineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLineRequest.class);
  }

  /**
   * Convert an instance of CreateLineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

