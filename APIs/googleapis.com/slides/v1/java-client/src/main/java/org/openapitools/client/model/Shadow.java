/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AffineTransform;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.OpaqueColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shadow {
  /**
   * The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
   */
  @JsonAdapter(AlignmentEnum.Adapter.class)
  public enum AlignmentEnum {
    RECTANGLE_POSITION_UNSPECIFIED("RECTANGLE_POSITION_UNSPECIFIED"),
    
    TOP_LEFT("TOP_LEFT"),
    
    TOP_CENTER("TOP_CENTER"),
    
    TOP_RIGHT("TOP_RIGHT"),
    
    LEFT_CENTER("LEFT_CENTER"),
    
    CENTER("CENTER"),
    
    RIGHT_CENTER("RIGHT_CENTER"),
    
    BOTTOM_LEFT("BOTTOM_LEFT"),
    
    BOTTOM_CENTER("BOTTOM_CENTER"),
    
    BOTTOM_RIGHT("BOTTOM_RIGHT");

    private String value;

    AlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignmentEnum fromValue(String value) {
      for (AlignmentEnum b : AlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALIGNMENT = "alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private AlignmentEnum alignment;

  public static final String SERIALIZED_NAME_ALPHA = "alpha";
  @SerializedName(SERIALIZED_NAME_ALPHA)
  private Float alpha;

  public static final String SERIALIZED_NAME_BLUR_RADIUS = "blurRadius";
  @SerializedName(SERIALIZED_NAME_BLUR_RADIUS)
  private Dimension blurRadius;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private OpaqueColor color;

  /**
   * The shadow property state. Updating the shadow on a page element will implicitly update this field to &#x60;RENDERED&#x60;, unless another value is specified in the same request. To have no shadow on a page element, set this field to &#x60;NOT_RENDERED&#x60;. In this case, any other shadow fields set in the same request will be ignored.
   */
  @JsonAdapter(PropertyStateEnum.Adapter.class)
  public enum PropertyStateEnum {
    RENDERED("RENDERED"),
    
    NOT_RENDERED("NOT_RENDERED"),
    
    INHERIT("INHERIT");

    private String value;

    PropertyStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyStateEnum fromValue(String value) {
      for (PropertyStateEnum b : PropertyStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_STATE = "propertyState";
  @SerializedName(SERIALIZED_NAME_PROPERTY_STATE)
  private PropertyStateEnum propertyState;

  public static final String SERIALIZED_NAME_ROTATE_WITH_SHAPE = "rotateWithShape";
  @SerializedName(SERIALIZED_NAME_ROTATE_WITH_SHAPE)
  private Boolean rotateWithShape;

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private AffineTransform transform;

  /**
   * The type of the shadow. This property is read-only.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SHADOW_TYPE_UNSPECIFIED("SHADOW_TYPE_UNSPECIFIED"),
    
    OUTER("OUTER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Shadow() {
  }

  public Shadow alignment(AlignmentEnum alignment) {
    this.alignment = alignment;
    return this;
  }

  /**
   * The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
   * @return alignment
   */
  @javax.annotation.Nullable
  public AlignmentEnum getAlignment() {
    return alignment;
  }

  public void setAlignment(AlignmentEnum alignment) {
    this.alignment = alignment;
  }


  public Shadow alpha(Float alpha) {
    this.alpha = alpha;
    return this;
  }

  /**
   * The alpha of the shadow&#39;s color, from 0.0 to 1.0.
   * @return alpha
   */
  @javax.annotation.Nullable
  public Float getAlpha() {
    return alpha;
  }

  public void setAlpha(Float alpha) {
    this.alpha = alpha;
  }


  public Shadow blurRadius(Dimension blurRadius) {
    this.blurRadius = blurRadius;
    return this;
  }

  /**
   * Get blurRadius
   * @return blurRadius
   */
  @javax.annotation.Nullable
  public Dimension getBlurRadius() {
    return blurRadius;
  }

  public void setBlurRadius(Dimension blurRadius) {
    this.blurRadius = blurRadius;
  }


  public Shadow color(OpaqueColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public OpaqueColor getColor() {
    return color;
  }

  public void setColor(OpaqueColor color) {
    this.color = color;
  }


  public Shadow propertyState(PropertyStateEnum propertyState) {
    this.propertyState = propertyState;
    return this;
  }

  /**
   * The shadow property state. Updating the shadow on a page element will implicitly update this field to &#x60;RENDERED&#x60;, unless another value is specified in the same request. To have no shadow on a page element, set this field to &#x60;NOT_RENDERED&#x60;. In this case, any other shadow fields set in the same request will be ignored.
   * @return propertyState
   */
  @javax.annotation.Nullable
  public PropertyStateEnum getPropertyState() {
    return propertyState;
  }

  public void setPropertyState(PropertyStateEnum propertyState) {
    this.propertyState = propertyState;
  }


  public Shadow rotateWithShape(Boolean rotateWithShape) {
    this.rotateWithShape = rotateWithShape;
    return this;
  }

  /**
   * Whether the shadow should rotate with the shape. This property is read-only.
   * @return rotateWithShape
   */
  @javax.annotation.Nullable
  public Boolean getRotateWithShape() {
    return rotateWithShape;
  }

  public void setRotateWithShape(Boolean rotateWithShape) {
    this.rotateWithShape = rotateWithShape;
  }


  public Shadow transform(AffineTransform transform) {
    this.transform = transform;
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public AffineTransform getTransform() {
    return transform;
  }

  public void setTransform(AffineTransform transform) {
    this.transform = transform;
  }


  public Shadow type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the shadow. This property is read-only.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shadow shadow = (Shadow) o;
    return Objects.equals(this.alignment, shadow.alignment) &&
        Objects.equals(this.alpha, shadow.alpha) &&
        Objects.equals(this.blurRadius, shadow.blurRadius) &&
        Objects.equals(this.color, shadow.color) &&
        Objects.equals(this.propertyState, shadow.propertyState) &&
        Objects.equals(this.rotateWithShape, shadow.rotateWithShape) &&
        Objects.equals(this.transform, shadow.transform) &&
        Objects.equals(this.type, shadow.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, alpha, blurRadius, color, propertyState, rotateWithShape, transform, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shadow {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    alpha: ").append(toIndentedString(alpha)).append("\n");
    sb.append("    blurRadius: ").append(toIndentedString(blurRadius)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    propertyState: ").append(toIndentedString(propertyState)).append("\n");
    sb.append("    rotateWithShape: ").append(toIndentedString(rotateWithShape)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alignment");
    openapiFields.add("alpha");
    openapiFields.add("blurRadius");
    openapiFields.add("color");
    openapiFields.add("propertyState");
    openapiFields.add("rotateWithShape");
    openapiFields.add("transform");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shadow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shadow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shadow is not found in the empty JSON string", Shadow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shadow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shadow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) && !jsonObj.get("alignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignment").toString()));
      }
      // validate the optional field `alignment`
      if (jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) {
        AlignmentEnum.validateJsonElement(jsonObj.get("alignment"));
      }
      // validate the optional field `blurRadius`
      if (jsonObj.get("blurRadius") != null && !jsonObj.get("blurRadius").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("blurRadius"));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        OpaqueColor.validateJsonElement(jsonObj.get("color"));
      }
      if ((jsonObj.get("propertyState") != null && !jsonObj.get("propertyState").isJsonNull()) && !jsonObj.get("propertyState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyState").toString()));
      }
      // validate the optional field `propertyState`
      if (jsonObj.get("propertyState") != null && !jsonObj.get("propertyState").isJsonNull()) {
        PropertyStateEnum.validateJsonElement(jsonObj.get("propertyState"));
      }
      // validate the optional field `transform`
      if (jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) {
        AffineTransform.validateJsonElement(jsonObj.get("transform"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shadow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shadow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shadow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shadow.class));

       return (TypeAdapter<T>) new TypeAdapter<Shadow>() {
           @Override
           public void write(JsonWriter out, Shadow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shadow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shadow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shadow
   * @throws IOException if the JSON string is invalid with respect to Shadow
   */
  public static Shadow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shadow.class);
  }

  /**
   * Convert an instance of Shadow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

