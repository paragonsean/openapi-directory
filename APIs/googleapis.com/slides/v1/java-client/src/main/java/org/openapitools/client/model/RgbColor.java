/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An RGB color.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RgbColor {
  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  private Float blue;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  private Float green;

  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  private Float red;

  public RgbColor() {
  }

  public RgbColor blue(Float blue) {
    this.blue = blue;
    return this;
  }

  /**
   * The blue component of the color, from 0.0 to 1.0.
   * @return blue
   */
  @javax.annotation.Nullable
  public Float getBlue() {
    return blue;
  }

  public void setBlue(Float blue) {
    this.blue = blue;
  }


  public RgbColor green(Float green) {
    this.green = green;
    return this;
  }

  /**
   * The green component of the color, from 0.0 to 1.0.
   * @return green
   */
  @javax.annotation.Nullable
  public Float getGreen() {
    return green;
  }

  public void setGreen(Float green) {
    this.green = green;
  }


  public RgbColor red(Float red) {
    this.red = red;
    return this;
  }

  /**
   * The red component of the color, from 0.0 to 1.0.
   * @return red
   */
  @javax.annotation.Nullable
  public Float getRed() {
    return red;
  }

  public void setRed(Float red) {
    this.red = red;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RgbColor rgbColor = (RgbColor) o;
    return Objects.equals(this.blue, rgbColor.blue) &&
        Objects.equals(this.green, rgbColor.green) &&
        Objects.equals(this.red, rgbColor.red);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blue, green, red);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RgbColor {\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blue");
    openapiFields.add("green");
    openapiFields.add("red");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RgbColor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RgbColor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RgbColor is not found in the empty JSON string", RgbColor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RgbColor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RgbColor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RgbColor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RgbColor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RgbColor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RgbColor.class));

       return (TypeAdapter<T>) new TypeAdapter<RgbColor>() {
           @Override
           public void write(JsonWriter out, RgbColor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RgbColor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RgbColor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RgbColor
   * @throws IOException if the JSON string is invalid with respect to RgbColor
   */
  public static RgbColor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RgbColor.class);
  }

  /**
   * Convert an instance of RgbColor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

