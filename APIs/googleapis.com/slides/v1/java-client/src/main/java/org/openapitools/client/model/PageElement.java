/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AffineTransform;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Line;
import org.openapitools.client.model.Shape;
import org.openapitools.client.model.SheetsChart;
import org.openapitools.client.model.Size;
import org.openapitools.client.model.Table;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.WordArt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A visual element rendered on a page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PageElement {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ELEMENT_GROUP = "elementGroup";
  @SerializedName(SERIALIZED_NAME_ELEMENT_GROUP)
  private Group elementGroup;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Line line;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private Shape shape;

  public static final String SERIALIZED_NAME_SHEETS_CHART = "sheetsChart";
  @SerializedName(SERIALIZED_NAME_SHEETS_CHART)
  private SheetsChart sheetsChart;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private Table table;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private AffineTransform transform;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private Video video;

  public static final String SERIALIZED_NAME_WORD_ART = "wordArt";
  @SerializedName(SERIALIZED_NAME_WORD_ART)
  private WordArt wordArt;

  public PageElement() {
  }

  public PageElement description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PageElement elementGroup(Group elementGroup) {
    this.elementGroup = elementGroup;
    return this;
  }

  /**
   * Get elementGroup
   * @return elementGroup
   */
  @javax.annotation.Nullable
  public Group getElementGroup() {
    return elementGroup;
  }

  public void setElementGroup(Group elementGroup) {
    this.elementGroup = elementGroup;
  }


  public PageElement image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public PageElement line(Line line) {
    this.line = line;
    return this;
  }

  /**
   * Get line
   * @return line
   */
  @javax.annotation.Nullable
  public Line getLine() {
    return line;
  }

  public void setLine(Line line) {
    this.line = line;
  }


  public PageElement objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public PageElement shape(Shape shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nullable
  public Shape getShape() {
    return shape;
  }

  public void setShape(Shape shape) {
    this.shape = shape;
  }


  public PageElement sheetsChart(SheetsChart sheetsChart) {
    this.sheetsChart = sheetsChart;
    return this;
  }

  /**
   * Get sheetsChart
   * @return sheetsChart
   */
  @javax.annotation.Nullable
  public SheetsChart getSheetsChart() {
    return sheetsChart;
  }

  public void setSheetsChart(SheetsChart sheetsChart) {
    this.sheetsChart = sheetsChart;
  }


  public PageElement size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public PageElement table(Table table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public Table getTable() {
    return table;
  }

  public void setTable(Table table) {
    this.table = table;
  }


  public PageElement title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PageElement transform(AffineTransform transform) {
    this.transform = transform;
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public AffineTransform getTransform() {
    return transform;
  }

  public void setTransform(AffineTransform transform) {
    this.transform = transform;
  }


  public PageElement video(Video video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public Video getVideo() {
    return video;
  }

  public void setVideo(Video video) {
    this.video = video;
  }


  public PageElement wordArt(WordArt wordArt) {
    this.wordArt = wordArt;
    return this;
  }

  /**
   * Get wordArt
   * @return wordArt
   */
  @javax.annotation.Nullable
  public WordArt getWordArt() {
    return wordArt;
  }

  public void setWordArt(WordArt wordArt) {
    this.wordArt = wordArt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageElement pageElement = (PageElement) o;
    return Objects.equals(this.description, pageElement.description) &&
        Objects.equals(this.elementGroup, pageElement.elementGroup) &&
        Objects.equals(this.image, pageElement.image) &&
        Objects.equals(this.line, pageElement.line) &&
        Objects.equals(this.objectId, pageElement.objectId) &&
        Objects.equals(this.shape, pageElement.shape) &&
        Objects.equals(this.sheetsChart, pageElement.sheetsChart) &&
        Objects.equals(this.size, pageElement.size) &&
        Objects.equals(this.table, pageElement.table) &&
        Objects.equals(this.title, pageElement.title) &&
        Objects.equals(this.transform, pageElement.transform) &&
        Objects.equals(this.video, pageElement.video) &&
        Objects.equals(this.wordArt, pageElement.wordArt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, elementGroup, image, line, objectId, shape, sheetsChart, size, table, title, transform, video, wordArt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageElement {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    elementGroup: ").append(toIndentedString(elementGroup)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    sheetsChart: ").append(toIndentedString(sheetsChart)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("    wordArt: ").append(toIndentedString(wordArt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("elementGroup");
    openapiFields.add("image");
    openapiFields.add("line");
    openapiFields.add("objectId");
    openapiFields.add("shape");
    openapiFields.add("sheetsChart");
    openapiFields.add("size");
    openapiFields.add("table");
    openapiFields.add("title");
    openapiFields.add("transform");
    openapiFields.add("video");
    openapiFields.add("wordArt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageElement is not found in the empty JSON string", PageElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `elementGroup`
      if (jsonObj.get("elementGroup") != null && !jsonObj.get("elementGroup").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("elementGroup"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `line`
      if (jsonObj.get("line") != null && !jsonObj.get("line").isJsonNull()) {
        Line.validateJsonElement(jsonObj.get("line"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      // validate the optional field `shape`
      if (jsonObj.get("shape") != null && !jsonObj.get("shape").isJsonNull()) {
        Shape.validateJsonElement(jsonObj.get("shape"));
      }
      // validate the optional field `sheetsChart`
      if (jsonObj.get("sheetsChart") != null && !jsonObj.get("sheetsChart").isJsonNull()) {
        SheetsChart.validateJsonElement(jsonObj.get("sheetsChart"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        Table.validateJsonElement(jsonObj.get("table"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `transform`
      if (jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) {
        AffineTransform.validateJsonElement(jsonObj.get("transform"));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        Video.validateJsonElement(jsonObj.get("video"));
      }
      // validate the optional field `wordArt`
      if (jsonObj.get("wordArt") != null && !jsonObj.get("wordArt").isJsonNull()) {
        WordArt.validateJsonElement(jsonObj.get("wordArt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageElement.class));

       return (TypeAdapter<T>) new TypeAdapter<PageElement>() {
           @Override
           public void write(JsonWriter out, PageElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageElement
   * @throws IOException if the JSON string is invalid with respect to PageElement
   */
  public static PageElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageElement.class);
  }

  /**
   * Convert an instance of PageElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

