/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Placeholder;
import org.openapitools.client.model.ShapeProperties;
import org.openapitools.client.model.TextContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A PageElement kind representing a generic shape that does not have a more specific classification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shape {
  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private Placeholder placeholder;

  public static final String SERIALIZED_NAME_SHAPE_PROPERTIES = "shapeProperties";
  @SerializedName(SERIALIZED_NAME_SHAPE_PROPERTIES)
  private ShapeProperties shapeProperties;

  /**
   * The type of the shape.
   */
  @JsonAdapter(ShapeTypeEnum.Adapter.class)
  public enum ShapeTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    TEXT_BOX("TEXT_BOX"),
    
    RECTANGLE("RECTANGLE"),
    
    ROUND_RECTANGLE("ROUND_RECTANGLE"),
    
    ELLIPSE("ELLIPSE"),
    
    ARC("ARC"),
    
    BENT_ARROW("BENT_ARROW"),
    
    BENT_UP_ARROW("BENT_UP_ARROW"),
    
    BEVEL("BEVEL"),
    
    BLOCK_ARC("BLOCK_ARC"),
    
    BRACE_PAIR("BRACE_PAIR"),
    
    BRACKET_PAIR("BRACKET_PAIR"),
    
    CAN("CAN"),
    
    CHEVRON("CHEVRON"),
    
    CHORD("CHORD"),
    
    CLOUD("CLOUD"),
    
    CORNER("CORNER"),
    
    CUBE("CUBE"),
    
    CURVED_DOWN_ARROW("CURVED_DOWN_ARROW"),
    
    CURVED_LEFT_ARROW("CURVED_LEFT_ARROW"),
    
    CURVED_RIGHT_ARROW("CURVED_RIGHT_ARROW"),
    
    CURVED_UP_ARROW("CURVED_UP_ARROW"),
    
    DECAGON("DECAGON"),
    
    DIAGONAL_STRIPE("DIAGONAL_STRIPE"),
    
    DIAMOND("DIAMOND"),
    
    DODECAGON("DODECAGON"),
    
    DONUT("DONUT"),
    
    DOUBLE_WAVE("DOUBLE_WAVE"),
    
    DOWN_ARROW("DOWN_ARROW"),
    
    DOWN_ARROW_CALLOUT("DOWN_ARROW_CALLOUT"),
    
    FOLDED_CORNER("FOLDED_CORNER"),
    
    FRAME("FRAME"),
    
    HALF_FRAME("HALF_FRAME"),
    
    HEART("HEART"),
    
    HEPTAGON("HEPTAGON"),
    
    HEXAGON("HEXAGON"),
    
    HOME_PLATE("HOME_PLATE"),
    
    HORIZONTAL_SCROLL("HORIZONTAL_SCROLL"),
    
    IRREGULAR_SEAL_1("IRREGULAR_SEAL_1"),
    
    IRREGULAR_SEAL_2("IRREGULAR_SEAL_2"),
    
    LEFT_ARROW("LEFT_ARROW"),
    
    LEFT_ARROW_CALLOUT("LEFT_ARROW_CALLOUT"),
    
    LEFT_BRACE("LEFT_BRACE"),
    
    LEFT_BRACKET("LEFT_BRACKET"),
    
    LEFT_RIGHT_ARROW("LEFT_RIGHT_ARROW"),
    
    LEFT_RIGHT_ARROW_CALLOUT("LEFT_RIGHT_ARROW_CALLOUT"),
    
    LEFT_RIGHT_UP_ARROW("LEFT_RIGHT_UP_ARROW"),
    
    LEFT_UP_ARROW("LEFT_UP_ARROW"),
    
    LIGHTNING_BOLT("LIGHTNING_BOLT"),
    
    MATH_DIVIDE("MATH_DIVIDE"),
    
    MATH_EQUAL("MATH_EQUAL"),
    
    MATH_MINUS("MATH_MINUS"),
    
    MATH_MULTIPLY("MATH_MULTIPLY"),
    
    MATH_NOT_EQUAL("MATH_NOT_EQUAL"),
    
    MATH_PLUS("MATH_PLUS"),
    
    MOON("MOON"),
    
    NO_SMOKING("NO_SMOKING"),
    
    NOTCHED_RIGHT_ARROW("NOTCHED_RIGHT_ARROW"),
    
    OCTAGON("OCTAGON"),
    
    PARALLELOGRAM("PARALLELOGRAM"),
    
    PENTAGON("PENTAGON"),
    
    PIE("PIE"),
    
    PLAQUE("PLAQUE"),
    
    PLUS("PLUS"),
    
    QUAD_ARROW("QUAD_ARROW"),
    
    QUAD_ARROW_CALLOUT("QUAD_ARROW_CALLOUT"),
    
    RIBBON("RIBBON"),
    
    RIBBON_2("RIBBON_2"),
    
    RIGHT_ARROW("RIGHT_ARROW"),
    
    RIGHT_ARROW_CALLOUT("RIGHT_ARROW_CALLOUT"),
    
    RIGHT_BRACE("RIGHT_BRACE"),
    
    RIGHT_BRACKET("RIGHT_BRACKET"),
    
    ROUND_1_RECTANGLE("ROUND_1_RECTANGLE"),
    
    ROUND_2_DIAGONAL_RECTANGLE("ROUND_2_DIAGONAL_RECTANGLE"),
    
    ROUND_2_SAME_RECTANGLE("ROUND_2_SAME_RECTANGLE"),
    
    RIGHT_TRIANGLE("RIGHT_TRIANGLE"),
    
    SMILEY_FACE("SMILEY_FACE"),
    
    SNIP_1_RECTANGLE("SNIP_1_RECTANGLE"),
    
    SNIP_2_DIAGONAL_RECTANGLE("SNIP_2_DIAGONAL_RECTANGLE"),
    
    SNIP_2_SAME_RECTANGLE("SNIP_2_SAME_RECTANGLE"),
    
    SNIP_ROUND_RECTANGLE("SNIP_ROUND_RECTANGLE"),
    
    STAR_10("STAR_10"),
    
    STAR_12("STAR_12"),
    
    STAR_16("STAR_16"),
    
    STAR_24("STAR_24"),
    
    STAR_32("STAR_32"),
    
    STAR_4("STAR_4"),
    
    STAR_5("STAR_5"),
    
    STAR_6("STAR_6"),
    
    STAR_7("STAR_7"),
    
    STAR_8("STAR_8"),
    
    STRIPED_RIGHT_ARROW("STRIPED_RIGHT_ARROW"),
    
    SUN("SUN"),
    
    TRAPEZOID("TRAPEZOID"),
    
    TRIANGLE("TRIANGLE"),
    
    UP_ARROW("UP_ARROW"),
    
    UP_ARROW_CALLOUT("UP_ARROW_CALLOUT"),
    
    UP_DOWN_ARROW("UP_DOWN_ARROW"),
    
    UTURN_ARROW("UTURN_ARROW"),
    
    VERTICAL_SCROLL("VERTICAL_SCROLL"),
    
    WAVE("WAVE"),
    
    WEDGE_ELLIPSE_CALLOUT("WEDGE_ELLIPSE_CALLOUT"),
    
    WEDGE_RECTANGLE_CALLOUT("WEDGE_RECTANGLE_CALLOUT"),
    
    WEDGE_ROUND_RECTANGLE_CALLOUT("WEDGE_ROUND_RECTANGLE_CALLOUT"),
    
    FLOW_CHART_ALTERNATE_PROCESS("FLOW_CHART_ALTERNATE_PROCESS"),
    
    FLOW_CHART_COLLATE("FLOW_CHART_COLLATE"),
    
    FLOW_CHART_CONNECTOR("FLOW_CHART_CONNECTOR"),
    
    FLOW_CHART_DECISION("FLOW_CHART_DECISION"),
    
    FLOW_CHART_DELAY("FLOW_CHART_DELAY"),
    
    FLOW_CHART_DISPLAY("FLOW_CHART_DISPLAY"),
    
    FLOW_CHART_DOCUMENT("FLOW_CHART_DOCUMENT"),
    
    FLOW_CHART_EXTRACT("FLOW_CHART_EXTRACT"),
    
    FLOW_CHART_INPUT_OUTPUT("FLOW_CHART_INPUT_OUTPUT"),
    
    FLOW_CHART_INTERNAL_STORAGE("FLOW_CHART_INTERNAL_STORAGE"),
    
    FLOW_CHART_MAGNETIC_DISK("FLOW_CHART_MAGNETIC_DISK"),
    
    FLOW_CHART_MAGNETIC_DRUM("FLOW_CHART_MAGNETIC_DRUM"),
    
    FLOW_CHART_MAGNETIC_TAPE("FLOW_CHART_MAGNETIC_TAPE"),
    
    FLOW_CHART_MANUAL_INPUT("FLOW_CHART_MANUAL_INPUT"),
    
    FLOW_CHART_MANUAL_OPERATION("FLOW_CHART_MANUAL_OPERATION"),
    
    FLOW_CHART_MERGE("FLOW_CHART_MERGE"),
    
    FLOW_CHART_MULTIDOCUMENT("FLOW_CHART_MULTIDOCUMENT"),
    
    FLOW_CHART_OFFLINE_STORAGE("FLOW_CHART_OFFLINE_STORAGE"),
    
    FLOW_CHART_OFFPAGE_CONNECTOR("FLOW_CHART_OFFPAGE_CONNECTOR"),
    
    FLOW_CHART_ONLINE_STORAGE("FLOW_CHART_ONLINE_STORAGE"),
    
    FLOW_CHART_OR("FLOW_CHART_OR"),
    
    FLOW_CHART_PREDEFINED_PROCESS("FLOW_CHART_PREDEFINED_PROCESS"),
    
    FLOW_CHART_PREPARATION("FLOW_CHART_PREPARATION"),
    
    FLOW_CHART_PROCESS("FLOW_CHART_PROCESS"),
    
    FLOW_CHART_PUNCHED_CARD("FLOW_CHART_PUNCHED_CARD"),
    
    FLOW_CHART_PUNCHED_TAPE("FLOW_CHART_PUNCHED_TAPE"),
    
    FLOW_CHART_SORT("FLOW_CHART_SORT"),
    
    FLOW_CHART_SUMMING_JUNCTION("FLOW_CHART_SUMMING_JUNCTION"),
    
    FLOW_CHART_TERMINATOR("FLOW_CHART_TERMINATOR"),
    
    ARROW_EAST("ARROW_EAST"),
    
    ARROW_NORTH_EAST("ARROW_NORTH_EAST"),
    
    ARROW_NORTH("ARROW_NORTH"),
    
    SPEECH("SPEECH"),
    
    STARBURST("STARBURST"),
    
    TEARDROP("TEARDROP"),
    
    ELLIPSE_RIBBON("ELLIPSE_RIBBON"),
    
    ELLIPSE_RIBBON_2("ELLIPSE_RIBBON_2"),
    
    CLOUD_CALLOUT("CLOUD_CALLOUT"),
    
    CUSTOM("CUSTOM");

    private String value;

    ShapeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeTypeEnum fromValue(String value) {
      for (ShapeTypeEnum b : ShapeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE_TYPE = "shapeType";
  @SerializedName(SERIALIZED_NAME_SHAPE_TYPE)
  private ShapeTypeEnum shapeType;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private TextContent text;

  public Shape() {
  }

  public Shape placeholder(Placeholder placeholder) {
    this.placeholder = placeholder;
    return this;
  }

  /**
   * Get placeholder
   * @return placeholder
   */
  @javax.annotation.Nullable
  public Placeholder getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(Placeholder placeholder) {
    this.placeholder = placeholder;
  }


  public Shape shapeProperties(ShapeProperties shapeProperties) {
    this.shapeProperties = shapeProperties;
    return this;
  }

  /**
   * Get shapeProperties
   * @return shapeProperties
   */
  @javax.annotation.Nullable
  public ShapeProperties getShapeProperties() {
    return shapeProperties;
  }

  public void setShapeProperties(ShapeProperties shapeProperties) {
    this.shapeProperties = shapeProperties;
  }


  public Shape shapeType(ShapeTypeEnum shapeType) {
    this.shapeType = shapeType;
    return this;
  }

  /**
   * The type of the shape.
   * @return shapeType
   */
  @javax.annotation.Nullable
  public ShapeTypeEnum getShapeType() {
    return shapeType;
  }

  public void setShapeType(ShapeTypeEnum shapeType) {
    this.shapeType = shapeType;
  }


  public Shape text(TextContent text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public TextContent getText() {
    return text;
  }

  public void setText(TextContent text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shape shape = (Shape) o;
    return Objects.equals(this.placeholder, shape.placeholder) &&
        Objects.equals(this.shapeProperties, shape.shapeProperties) &&
        Objects.equals(this.shapeType, shape.shapeType) &&
        Objects.equals(this.text, shape.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placeholder, shapeProperties, shapeType, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shape {\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    shapeProperties: ").append(toIndentedString(shapeProperties)).append("\n");
    sb.append("    shapeType: ").append(toIndentedString(shapeType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("placeholder");
    openapiFields.add("shapeProperties");
    openapiFields.add("shapeType");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shape
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shape.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shape is not found in the empty JSON string", Shape.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shape.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shape` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `placeholder`
      if (jsonObj.get("placeholder") != null && !jsonObj.get("placeholder").isJsonNull()) {
        Placeholder.validateJsonElement(jsonObj.get("placeholder"));
      }
      // validate the optional field `shapeProperties`
      if (jsonObj.get("shapeProperties") != null && !jsonObj.get("shapeProperties").isJsonNull()) {
        ShapeProperties.validateJsonElement(jsonObj.get("shapeProperties"));
      }
      if ((jsonObj.get("shapeType") != null && !jsonObj.get("shapeType").isJsonNull()) && !jsonObj.get("shapeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeType").toString()));
      }
      // validate the optional field `shapeType`
      if (jsonObj.get("shapeType") != null && !jsonObj.get("shapeType").isJsonNull()) {
        ShapeTypeEnum.validateJsonElement(jsonObj.get("shapeType"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        TextContent.validateJsonElement(jsonObj.get("text"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shape.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shape' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shape> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shape.class));

       return (TypeAdapter<T>) new TypeAdapter<Shape>() {
           @Override
           public void write(JsonWriter out, Shape value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shape read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shape given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shape
   * @throws IOException if the JSON string is invalid with respect to Shape
   */
  public static Shape fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shape.class);
  }

  /**
   * Convert an instance of Shape to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

