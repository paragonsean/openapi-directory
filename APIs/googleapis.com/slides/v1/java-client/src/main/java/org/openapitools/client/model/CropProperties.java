/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object&#39;s original bounding rectangle towards inside, relative to the object&#39;s original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object&#39;s original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object&#39;s original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CropProperties {
  public static final String SERIALIZED_NAME_ANGLE = "angle";
  @SerializedName(SERIALIZED_NAME_ANGLE)
  private Float angle;

  public static final String SERIALIZED_NAME_BOTTOM_OFFSET = "bottomOffset";
  @SerializedName(SERIALIZED_NAME_BOTTOM_OFFSET)
  private Float bottomOffset;

  public static final String SERIALIZED_NAME_LEFT_OFFSET = "leftOffset";
  @SerializedName(SERIALIZED_NAME_LEFT_OFFSET)
  private Float leftOffset;

  public static final String SERIALIZED_NAME_RIGHT_OFFSET = "rightOffset";
  @SerializedName(SERIALIZED_NAME_RIGHT_OFFSET)
  private Float rightOffset;

  public static final String SERIALIZED_NAME_TOP_OFFSET = "topOffset";
  @SerializedName(SERIALIZED_NAME_TOP_OFFSET)
  private Float topOffset;

  public CropProperties() {
  }

  public CropProperties angle(Float angle) {
    this.angle = angle;
    return this;
  }

  /**
   * The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.
   * @return angle
   */
  @javax.annotation.Nullable
  public Float getAngle() {
    return angle;
  }

  public void setAngle(Float angle) {
    this.angle = angle;
  }


  public CropProperties bottomOffset(Float bottomOffset) {
    this.bottomOffset = bottomOffset;
    return this;
  }

  /**
   * The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object&#39;s original height.
   * @return bottomOffset
   */
  @javax.annotation.Nullable
  public Float getBottomOffset() {
    return bottomOffset;
  }

  public void setBottomOffset(Float bottomOffset) {
    this.bottomOffset = bottomOffset;
  }


  public CropProperties leftOffset(Float leftOffset) {
    this.leftOffset = leftOffset;
    return this;
  }

  /**
   * The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object&#39;s original width.
   * @return leftOffset
   */
  @javax.annotation.Nullable
  public Float getLeftOffset() {
    return leftOffset;
  }

  public void setLeftOffset(Float leftOffset) {
    this.leftOffset = leftOffset;
  }


  public CropProperties rightOffset(Float rightOffset) {
    this.rightOffset = rightOffset;
    return this;
  }

  /**
   * The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object&#39;s original width.
   * @return rightOffset
   */
  @javax.annotation.Nullable
  public Float getRightOffset() {
    return rightOffset;
  }

  public void setRightOffset(Float rightOffset) {
    this.rightOffset = rightOffset;
  }


  public CropProperties topOffset(Float topOffset) {
    this.topOffset = topOffset;
    return this;
  }

  /**
   * The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object&#39;s original height.
   * @return topOffset
   */
  @javax.annotation.Nullable
  public Float getTopOffset() {
    return topOffset;
  }

  public void setTopOffset(Float topOffset) {
    this.topOffset = topOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CropProperties cropProperties = (CropProperties) o;
    return Objects.equals(this.angle, cropProperties.angle) &&
        Objects.equals(this.bottomOffset, cropProperties.bottomOffset) &&
        Objects.equals(this.leftOffset, cropProperties.leftOffset) &&
        Objects.equals(this.rightOffset, cropProperties.rightOffset) &&
        Objects.equals(this.topOffset, cropProperties.topOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angle, bottomOffset, leftOffset, rightOffset, topOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CropProperties {\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    bottomOffset: ").append(toIndentedString(bottomOffset)).append("\n");
    sb.append("    leftOffset: ").append(toIndentedString(leftOffset)).append("\n");
    sb.append("    rightOffset: ").append(toIndentedString(rightOffset)).append("\n");
    sb.append("    topOffset: ").append(toIndentedString(topOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angle");
    openapiFields.add("bottomOffset");
    openapiFields.add("leftOffset");
    openapiFields.add("rightOffset");
    openapiFields.add("topOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CropProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CropProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CropProperties is not found in the empty JSON string", CropProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CropProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CropProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CropProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CropProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CropProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CropProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CropProperties>() {
           @Override
           public void write(JsonWriter out, CropProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CropProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CropProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CropProperties
   * @throws IOException if the JSON string is invalid with respect to CropProperties
   */
  public static CropProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CropProperties.class);
  }

  /**
   * Convert an instance of CropProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

