/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubstringMatchCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceAllShapesWithSheetsChartRequest {
  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private Integer chartId;

  public static final String SERIALIZED_NAME_CONTAINS_TEXT = "containsText";
  @SerializedName(SERIALIZED_NAME_CONTAINS_TEXT)
  private SubstringMatchCriteria containsText;

  /**
   * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
   */
  @JsonAdapter(LinkingModeEnum.Adapter.class)
  public enum LinkingModeEnum {
    NOT_LINKED_IMAGE("NOT_LINKED_IMAGE"),
    
    LINKED("LINKED");

    private String value;

    LinkingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkingModeEnum fromValue(String value) {
      for (LinkingModeEnum b : LinkingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINKING_MODE = "linkingMode";
  @SerializedName(SERIALIZED_NAME_LINKING_MODE)
  private LinkingModeEnum linkingMode;

  public static final String SERIALIZED_NAME_PAGE_OBJECT_IDS = "pageObjectIds";
  @SerializedName(SERIALIZED_NAME_PAGE_OBJECT_IDS)
  private List<String> pageObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPREADSHEET_ID = "spreadsheetId";
  @SerializedName(SERIALIZED_NAME_SPREADSHEET_ID)
  private String spreadsheetId;

  public ReplaceAllShapesWithSheetsChartRequest() {
  }

  public ReplaceAllShapesWithSheetsChartRequest chartId(Integer chartId) {
    this.chartId = chartId;
    return this;
  }

  /**
   * The ID of the specific chart in the Google Sheets spreadsheet.
   * @return chartId
   */
  @javax.annotation.Nullable
  public Integer getChartId() {
    return chartId;
  }

  public void setChartId(Integer chartId) {
    this.chartId = chartId;
  }


  public ReplaceAllShapesWithSheetsChartRequest containsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
    return this;
  }

  /**
   * Get containsText
   * @return containsText
   */
  @javax.annotation.Nullable
  public SubstringMatchCriteria getContainsText() {
    return containsText;
  }

  public void setContainsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
  }


  public ReplaceAllShapesWithSheetsChartRequest linkingMode(LinkingModeEnum linkingMode) {
    this.linkingMode = linkingMode;
    return this;
  }

  /**
   * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
   * @return linkingMode
   */
  @javax.annotation.Nullable
  public LinkingModeEnum getLinkingMode() {
    return linkingMode;
  }

  public void setLinkingMode(LinkingModeEnum linkingMode) {
    this.linkingMode = linkingMode;
  }


  public ReplaceAllShapesWithSheetsChartRequest pageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
    return this;
  }

  public ReplaceAllShapesWithSheetsChartRequest addPageObjectIdsItem(String pageObjectIdsItem) {
    if (this.pageObjectIds == null) {
      this.pageObjectIds = new ArrayList<>();
    }
    this.pageObjectIds.add(pageObjectIdsItem);
    return this;
  }

  /**
   * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn&#39;t exist in the presentation.
   * @return pageObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getPageObjectIds() {
    return pageObjectIds;
  }

  public void setPageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
  }


  public ReplaceAllShapesWithSheetsChartRequest spreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
    return this;
  }

  /**
   * The ID of the Google Sheets spreadsheet that contains the chart.
   * @return spreadsheetId
   */
  @javax.annotation.Nullable
  public String getSpreadsheetId() {
    return spreadsheetId;
  }

  public void setSpreadsheetId(String spreadsheetId) {
    this.spreadsheetId = spreadsheetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChartRequest = (ReplaceAllShapesWithSheetsChartRequest) o;
    return Objects.equals(this.chartId, replaceAllShapesWithSheetsChartRequest.chartId) &&
        Objects.equals(this.containsText, replaceAllShapesWithSheetsChartRequest.containsText) &&
        Objects.equals(this.linkingMode, replaceAllShapesWithSheetsChartRequest.linkingMode) &&
        Objects.equals(this.pageObjectIds, replaceAllShapesWithSheetsChartRequest.pageObjectIds) &&
        Objects.equals(this.spreadsheetId, replaceAllShapesWithSheetsChartRequest.spreadsheetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartId, containsText, linkingMode, pageObjectIds, spreadsheetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceAllShapesWithSheetsChartRequest {\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    containsText: ").append(toIndentedString(containsText)).append("\n");
    sb.append("    linkingMode: ").append(toIndentedString(linkingMode)).append("\n");
    sb.append("    pageObjectIds: ").append(toIndentedString(pageObjectIds)).append("\n");
    sb.append("    spreadsheetId: ").append(toIndentedString(spreadsheetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chartId");
    openapiFields.add("containsText");
    openapiFields.add("linkingMode");
    openapiFields.add("pageObjectIds");
    openapiFields.add("spreadsheetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceAllShapesWithSheetsChartRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceAllShapesWithSheetsChartRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceAllShapesWithSheetsChartRequest is not found in the empty JSON string", ReplaceAllShapesWithSheetsChartRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceAllShapesWithSheetsChartRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceAllShapesWithSheetsChartRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containsText`
      if (jsonObj.get("containsText") != null && !jsonObj.get("containsText").isJsonNull()) {
        SubstringMatchCriteria.validateJsonElement(jsonObj.get("containsText"));
      }
      if ((jsonObj.get("linkingMode") != null && !jsonObj.get("linkingMode").isJsonNull()) && !jsonObj.get("linkingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkingMode").toString()));
      }
      // validate the optional field `linkingMode`
      if (jsonObj.get("linkingMode") != null && !jsonObj.get("linkingMode").isJsonNull()) {
        LinkingModeEnum.validateJsonElement(jsonObj.get("linkingMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pageObjectIds") != null && !jsonObj.get("pageObjectIds").isJsonNull() && !jsonObj.get("pageObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("pageObjectIds").toString()));
      }
      if ((jsonObj.get("spreadsheetId") != null && !jsonObj.get("spreadsheetId").isJsonNull()) && !jsonObj.get("spreadsheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spreadsheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spreadsheetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceAllShapesWithSheetsChartRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceAllShapesWithSheetsChartRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceAllShapesWithSheetsChartRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceAllShapesWithSheetsChartRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceAllShapesWithSheetsChartRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceAllShapesWithSheetsChartRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceAllShapesWithSheetsChartRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceAllShapesWithSheetsChartRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceAllShapesWithSheetsChartRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceAllShapesWithSheetsChartRequest
   */
  public static ReplaceAllShapesWithSheetsChartRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceAllShapesWithSheetsChartRequest.class);
  }

  /**
   * Convert an instance of ReplaceAllShapesWithSheetsChartRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

