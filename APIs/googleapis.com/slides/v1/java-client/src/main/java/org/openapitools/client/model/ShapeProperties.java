/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Autofit;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.Outline;
import org.openapitools.client.model.Shadow;
import org.openapitools.client.model.ShapeBackgroundFill;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShapeProperties {
  public static final String SERIALIZED_NAME_AUTOFIT = "autofit";
  @SerializedName(SERIALIZED_NAME_AUTOFIT)
  private Autofit autofit;

  /**
   * The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
   */
  @JsonAdapter(ContentAlignmentEnum.Adapter.class)
  public enum ContentAlignmentEnum {
    CONTENT_ALIGNMENT_UNSPECIFIED("CONTENT_ALIGNMENT_UNSPECIFIED"),
    
    CONTENT_ALIGNMENT_UNSUPPORTED("CONTENT_ALIGNMENT_UNSUPPORTED"),
    
    TOP("TOP"),
    
    MIDDLE("MIDDLE"),
    
    BOTTOM("BOTTOM");

    private String value;

    ContentAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentAlignmentEnum fromValue(String value) {
      for (ContentAlignmentEnum b : ContentAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_ALIGNMENT = "contentAlignment";
  @SerializedName(SERIALIZED_NAME_CONTENT_ALIGNMENT)
  private ContentAlignmentEnum contentAlignment;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Link link;

  public static final String SERIALIZED_NAME_OUTLINE = "outline";
  @SerializedName(SERIALIZED_NAME_OUTLINE)
  private Outline outline;

  public static final String SERIALIZED_NAME_SHADOW = "shadow";
  @SerializedName(SERIALIZED_NAME_SHADOW)
  private Shadow shadow;

  public static final String SERIALIZED_NAME_SHAPE_BACKGROUND_FILL = "shapeBackgroundFill";
  @SerializedName(SERIALIZED_NAME_SHAPE_BACKGROUND_FILL)
  private ShapeBackgroundFill shapeBackgroundFill;

  public ShapeProperties() {
  }

  public ShapeProperties autofit(Autofit autofit) {
    this.autofit = autofit;
    return this;
  }

  /**
   * Get autofit
   * @return autofit
   */
  @javax.annotation.Nullable
  public Autofit getAutofit() {
    return autofit;
  }

  public void setAutofit(Autofit autofit) {
    this.autofit = autofit;
  }


  public ShapeProperties contentAlignment(ContentAlignmentEnum contentAlignment) {
    this.contentAlignment = contentAlignment;
    return this;
  }

  /**
   * The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
   * @return contentAlignment
   */
  @javax.annotation.Nullable
  public ContentAlignmentEnum getContentAlignment() {
    return contentAlignment;
  }

  public void setContentAlignment(ContentAlignmentEnum contentAlignment) {
    this.contentAlignment = contentAlignment;
  }


  public ShapeProperties link(Link link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Link getLink() {
    return link;
  }

  public void setLink(Link link) {
    this.link = link;
  }


  public ShapeProperties outline(Outline outline) {
    this.outline = outline;
    return this;
  }

  /**
   * Get outline
   * @return outline
   */
  @javax.annotation.Nullable
  public Outline getOutline() {
    return outline;
  }

  public void setOutline(Outline outline) {
    this.outline = outline;
  }


  public ShapeProperties shadow(Shadow shadow) {
    this.shadow = shadow;
    return this;
  }

  /**
   * Get shadow
   * @return shadow
   */
  @javax.annotation.Nullable
  public Shadow getShadow() {
    return shadow;
  }

  public void setShadow(Shadow shadow) {
    this.shadow = shadow;
  }


  public ShapeProperties shapeBackgroundFill(ShapeBackgroundFill shapeBackgroundFill) {
    this.shapeBackgroundFill = shapeBackgroundFill;
    return this;
  }

  /**
   * Get shapeBackgroundFill
   * @return shapeBackgroundFill
   */
  @javax.annotation.Nullable
  public ShapeBackgroundFill getShapeBackgroundFill() {
    return shapeBackgroundFill;
  }

  public void setShapeBackgroundFill(ShapeBackgroundFill shapeBackgroundFill) {
    this.shapeBackgroundFill = shapeBackgroundFill;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShapeProperties shapeProperties = (ShapeProperties) o;
    return Objects.equals(this.autofit, shapeProperties.autofit) &&
        Objects.equals(this.contentAlignment, shapeProperties.contentAlignment) &&
        Objects.equals(this.link, shapeProperties.link) &&
        Objects.equals(this.outline, shapeProperties.outline) &&
        Objects.equals(this.shadow, shapeProperties.shadow) &&
        Objects.equals(this.shapeBackgroundFill, shapeProperties.shapeBackgroundFill);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autofit, contentAlignment, link, outline, shadow, shapeBackgroundFill);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShapeProperties {\n");
    sb.append("    autofit: ").append(toIndentedString(autofit)).append("\n");
    sb.append("    contentAlignment: ").append(toIndentedString(contentAlignment)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    outline: ").append(toIndentedString(outline)).append("\n");
    sb.append("    shadow: ").append(toIndentedString(shadow)).append("\n");
    sb.append("    shapeBackgroundFill: ").append(toIndentedString(shapeBackgroundFill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autofit");
    openapiFields.add("contentAlignment");
    openapiFields.add("link");
    openapiFields.add("outline");
    openapiFields.add("shadow");
    openapiFields.add("shapeBackgroundFill");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShapeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShapeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShapeProperties is not found in the empty JSON string", ShapeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShapeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShapeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autofit`
      if (jsonObj.get("autofit") != null && !jsonObj.get("autofit").isJsonNull()) {
        Autofit.validateJsonElement(jsonObj.get("autofit"));
      }
      if ((jsonObj.get("contentAlignment") != null && !jsonObj.get("contentAlignment").isJsonNull()) && !jsonObj.get("contentAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAlignment").toString()));
      }
      // validate the optional field `contentAlignment`
      if (jsonObj.get("contentAlignment") != null && !jsonObj.get("contentAlignment").isJsonNull()) {
        ContentAlignmentEnum.validateJsonElement(jsonObj.get("contentAlignment"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("link"));
      }
      // validate the optional field `outline`
      if (jsonObj.get("outline") != null && !jsonObj.get("outline").isJsonNull()) {
        Outline.validateJsonElement(jsonObj.get("outline"));
      }
      // validate the optional field `shadow`
      if (jsonObj.get("shadow") != null && !jsonObj.get("shadow").isJsonNull()) {
        Shadow.validateJsonElement(jsonObj.get("shadow"));
      }
      // validate the optional field `shapeBackgroundFill`
      if (jsonObj.get("shapeBackgroundFill") != null && !jsonObj.get("shapeBackgroundFill").isJsonNull()) {
        ShapeBackgroundFill.validateJsonElement(jsonObj.get("shapeBackgroundFill"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShapeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShapeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShapeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShapeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ShapeProperties>() {
           @Override
           public void write(JsonWriter out, ShapeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShapeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShapeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShapeProperties
   * @throws IOException if the JSON string is invalid with respect to ShapeProperties
   */
  public static ShapeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShapeProperties.class);
  }

  /**
   * Convert an instance of ShapeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

