/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.LineConnection;
import org.openapitools.client.model.LineFill;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineProperties {
  /**
   * The dash style of the line.
   */
  @JsonAdapter(DashStyleEnum.Adapter.class)
  public enum DashStyleEnum {
    DASH_STYLE_UNSPECIFIED("DASH_STYLE_UNSPECIFIED"),
    
    SOLID("SOLID"),
    
    DOT("DOT"),
    
    DASH("DASH"),
    
    DASH_DOT("DASH_DOT"),
    
    LONG_DASH("LONG_DASH"),
    
    LONG_DASH_DOT("LONG_DASH_DOT");

    private String value;

    DashStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DashStyleEnum fromValue(String value) {
      for (DashStyleEnum b : DashStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DashStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DashStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DashStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DashStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DashStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DASH_STYLE = "dashStyle";
  @SerializedName(SERIALIZED_NAME_DASH_STYLE)
  private DashStyleEnum dashStyle;

  /**
   * The style of the arrow at the end of the line.
   */
  @JsonAdapter(EndArrowEnum.Adapter.class)
  public enum EndArrowEnum {
    ARROW_STYLE_UNSPECIFIED("ARROW_STYLE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    STEALTH_ARROW("STEALTH_ARROW"),
    
    FILL_ARROW("FILL_ARROW"),
    
    FILL_CIRCLE("FILL_CIRCLE"),
    
    FILL_SQUARE("FILL_SQUARE"),
    
    FILL_DIAMOND("FILL_DIAMOND"),
    
    OPEN_ARROW("OPEN_ARROW"),
    
    OPEN_CIRCLE("OPEN_CIRCLE"),
    
    OPEN_SQUARE("OPEN_SQUARE"),
    
    OPEN_DIAMOND("OPEN_DIAMOND");

    private String value;

    EndArrowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndArrowEnum fromValue(String value) {
      for (EndArrowEnum b : EndArrowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndArrowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndArrowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndArrowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndArrowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndArrowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_END_ARROW = "endArrow";
  @SerializedName(SERIALIZED_NAME_END_ARROW)
  private EndArrowEnum endArrow;

  public static final String SERIALIZED_NAME_END_CONNECTION = "endConnection";
  @SerializedName(SERIALIZED_NAME_END_CONNECTION)
  private LineConnection endConnection;

  public static final String SERIALIZED_NAME_LINE_FILL = "lineFill";
  @SerializedName(SERIALIZED_NAME_LINE_FILL)
  private LineFill lineFill;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Link link;

  /**
   * The style of the arrow at the beginning of the line.
   */
  @JsonAdapter(StartArrowEnum.Adapter.class)
  public enum StartArrowEnum {
    ARROW_STYLE_UNSPECIFIED("ARROW_STYLE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    STEALTH_ARROW("STEALTH_ARROW"),
    
    FILL_ARROW("FILL_ARROW"),
    
    FILL_CIRCLE("FILL_CIRCLE"),
    
    FILL_SQUARE("FILL_SQUARE"),
    
    FILL_DIAMOND("FILL_DIAMOND"),
    
    OPEN_ARROW("OPEN_ARROW"),
    
    OPEN_CIRCLE("OPEN_CIRCLE"),
    
    OPEN_SQUARE("OPEN_SQUARE"),
    
    OPEN_DIAMOND("OPEN_DIAMOND");

    private String value;

    StartArrowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartArrowEnum fromValue(String value) {
      for (StartArrowEnum b : StartArrowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartArrowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartArrowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartArrowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartArrowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StartArrowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_START_ARROW = "startArrow";
  @SerializedName(SERIALIZED_NAME_START_ARROW)
  private StartArrowEnum startArrow;

  public static final String SERIALIZED_NAME_START_CONNECTION = "startConnection";
  @SerializedName(SERIALIZED_NAME_START_CONNECTION)
  private LineConnection startConnection;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Dimension weight;

  public LineProperties() {
  }

  public LineProperties dashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
    return this;
  }

  /**
   * The dash style of the line.
   * @return dashStyle
   */
  @javax.annotation.Nullable
  public DashStyleEnum getDashStyle() {
    return dashStyle;
  }

  public void setDashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
  }


  public LineProperties endArrow(EndArrowEnum endArrow) {
    this.endArrow = endArrow;
    return this;
  }

  /**
   * The style of the arrow at the end of the line.
   * @return endArrow
   */
  @javax.annotation.Nullable
  public EndArrowEnum getEndArrow() {
    return endArrow;
  }

  public void setEndArrow(EndArrowEnum endArrow) {
    this.endArrow = endArrow;
  }


  public LineProperties endConnection(LineConnection endConnection) {
    this.endConnection = endConnection;
    return this;
  }

  /**
   * Get endConnection
   * @return endConnection
   */
  @javax.annotation.Nullable
  public LineConnection getEndConnection() {
    return endConnection;
  }

  public void setEndConnection(LineConnection endConnection) {
    this.endConnection = endConnection;
  }


  public LineProperties lineFill(LineFill lineFill) {
    this.lineFill = lineFill;
    return this;
  }

  /**
   * Get lineFill
   * @return lineFill
   */
  @javax.annotation.Nullable
  public LineFill getLineFill() {
    return lineFill;
  }

  public void setLineFill(LineFill lineFill) {
    this.lineFill = lineFill;
  }


  public LineProperties link(Link link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Link getLink() {
    return link;
  }

  public void setLink(Link link) {
    this.link = link;
  }


  public LineProperties startArrow(StartArrowEnum startArrow) {
    this.startArrow = startArrow;
    return this;
  }

  /**
   * The style of the arrow at the beginning of the line.
   * @return startArrow
   */
  @javax.annotation.Nullable
  public StartArrowEnum getStartArrow() {
    return startArrow;
  }

  public void setStartArrow(StartArrowEnum startArrow) {
    this.startArrow = startArrow;
  }


  public LineProperties startConnection(LineConnection startConnection) {
    this.startConnection = startConnection;
    return this;
  }

  /**
   * Get startConnection
   * @return startConnection
   */
  @javax.annotation.Nullable
  public LineConnection getStartConnection() {
    return startConnection;
  }

  public void setStartConnection(LineConnection startConnection) {
    this.startConnection = startConnection;
  }


  public LineProperties weight(Dimension weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Dimension getWeight() {
    return weight;
  }

  public void setWeight(Dimension weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineProperties lineProperties = (LineProperties) o;
    return Objects.equals(this.dashStyle, lineProperties.dashStyle) &&
        Objects.equals(this.endArrow, lineProperties.endArrow) &&
        Objects.equals(this.endConnection, lineProperties.endConnection) &&
        Objects.equals(this.lineFill, lineProperties.lineFill) &&
        Objects.equals(this.link, lineProperties.link) &&
        Objects.equals(this.startArrow, lineProperties.startArrow) &&
        Objects.equals(this.startConnection, lineProperties.startConnection) &&
        Objects.equals(this.weight, lineProperties.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dashStyle, endArrow, endConnection, lineFill, link, startArrow, startConnection, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineProperties {\n");
    sb.append("    dashStyle: ").append(toIndentedString(dashStyle)).append("\n");
    sb.append("    endArrow: ").append(toIndentedString(endArrow)).append("\n");
    sb.append("    endConnection: ").append(toIndentedString(endConnection)).append("\n");
    sb.append("    lineFill: ").append(toIndentedString(lineFill)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    startArrow: ").append(toIndentedString(startArrow)).append("\n");
    sb.append("    startConnection: ").append(toIndentedString(startConnection)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dashStyle");
    openapiFields.add("endArrow");
    openapiFields.add("endConnection");
    openapiFields.add("lineFill");
    openapiFields.add("link");
    openapiFields.add("startArrow");
    openapiFields.add("startConnection");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineProperties is not found in the empty JSON string", LineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) && !jsonObj.get("dashStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashStyle").toString()));
      }
      // validate the optional field `dashStyle`
      if (jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) {
        DashStyleEnum.validateJsonElement(jsonObj.get("dashStyle"));
      }
      if ((jsonObj.get("endArrow") != null && !jsonObj.get("endArrow").isJsonNull()) && !jsonObj.get("endArrow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endArrow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endArrow").toString()));
      }
      // validate the optional field `endArrow`
      if (jsonObj.get("endArrow") != null && !jsonObj.get("endArrow").isJsonNull()) {
        EndArrowEnum.validateJsonElement(jsonObj.get("endArrow"));
      }
      // validate the optional field `endConnection`
      if (jsonObj.get("endConnection") != null && !jsonObj.get("endConnection").isJsonNull()) {
        LineConnection.validateJsonElement(jsonObj.get("endConnection"));
      }
      // validate the optional field `lineFill`
      if (jsonObj.get("lineFill") != null && !jsonObj.get("lineFill").isJsonNull()) {
        LineFill.validateJsonElement(jsonObj.get("lineFill"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("link"));
      }
      if ((jsonObj.get("startArrow") != null && !jsonObj.get("startArrow").isJsonNull()) && !jsonObj.get("startArrow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startArrow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startArrow").toString()));
      }
      // validate the optional field `startArrow`
      if (jsonObj.get("startArrow") != null && !jsonObj.get("startArrow").isJsonNull()) {
        StartArrowEnum.validateJsonElement(jsonObj.get("startArrow"));
      }
      // validate the optional field `startConnection`
      if (jsonObj.get("startConnection") != null && !jsonObj.get("startConnection").isJsonNull()) {
        LineConnection.validateJsonElement(jsonObj.get("startConnection"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LineProperties>() {
           @Override
           public void write(JsonWriter out, LineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineProperties
   * @throws IOException if the JSON string is invalid with respect to LineProperties
   */
  public static LineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineProperties.class);
  }

  /**
   * Convert an instance of LineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

