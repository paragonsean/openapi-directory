/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The autofit properties of a Shape.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Autofit {
  /**
   * The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
   */
  @JsonAdapter(AutofitTypeEnum.Adapter.class)
  public enum AutofitTypeEnum {
    AUTOFIT_TYPE_UNSPECIFIED("AUTOFIT_TYPE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    TEXT_AUTOFIT("TEXT_AUTOFIT"),
    
    SHAPE_AUTOFIT("SHAPE_AUTOFIT");

    private String value;

    AutofitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutofitTypeEnum fromValue(String value) {
      for (AutofitTypeEnum b : AutofitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutofitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutofitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutofitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutofitTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutofitTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOFIT_TYPE = "autofitType";
  @SerializedName(SERIALIZED_NAME_AUTOFIT_TYPE)
  private AutofitTypeEnum autofitType;

  public static final String SERIALIZED_NAME_FONT_SCALE = "fontScale";
  @SerializedName(SERIALIZED_NAME_FONT_SCALE)
  private Float fontScale;

  public static final String SERIALIZED_NAME_LINE_SPACING_REDUCTION = "lineSpacingReduction";
  @SerializedName(SERIALIZED_NAME_LINE_SPACING_REDUCTION)
  private Float lineSpacingReduction;

  public Autofit() {
  }

  public Autofit autofitType(AutofitTypeEnum autofitType) {
    this.autofitType = autofitType;
    return this;
  }

  /**
   * The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
   * @return autofitType
   */
  @javax.annotation.Nullable
  public AutofitTypeEnum getAutofitType() {
    return autofitType;
  }

  public void setAutofitType(AutofitTypeEnum autofitType) {
    this.autofitType = autofitType;
  }


  public Autofit fontScale(Float fontScale) {
    this.fontScale = fontScale;
    return this;
  }

  /**
   * The font scale applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 1. For TEXT_AUTOFIT, this value multiplied by the font_size gives the font size that is rendered in the editor. This property is read-only.
   * @return fontScale
   */
  @javax.annotation.Nullable
  public Float getFontScale() {
    return fontScale;
  }

  public void setFontScale(Float fontScale) {
    this.fontScale = fontScale;
  }


  public Autofit lineSpacingReduction(Float lineSpacingReduction) {
    this.lineSpacingReduction = lineSpacingReduction;
    return this;
  }

  /**
   * The line spacing reduction applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 0. For TEXT_AUTOFIT, this value subtracted from the line_spacing gives the line spacing that is rendered in the editor. This property is read-only.
   * @return lineSpacingReduction
   */
  @javax.annotation.Nullable
  public Float getLineSpacingReduction() {
    return lineSpacingReduction;
  }

  public void setLineSpacingReduction(Float lineSpacingReduction) {
    this.lineSpacingReduction = lineSpacingReduction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Autofit autofit = (Autofit) o;
    return Objects.equals(this.autofitType, autofit.autofitType) &&
        Objects.equals(this.fontScale, autofit.fontScale) &&
        Objects.equals(this.lineSpacingReduction, autofit.lineSpacingReduction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autofitType, fontScale, lineSpacingReduction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Autofit {\n");
    sb.append("    autofitType: ").append(toIndentedString(autofitType)).append("\n");
    sb.append("    fontScale: ").append(toIndentedString(fontScale)).append("\n");
    sb.append("    lineSpacingReduction: ").append(toIndentedString(lineSpacingReduction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autofitType");
    openapiFields.add("fontScale");
    openapiFields.add("lineSpacingReduction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Autofit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Autofit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Autofit is not found in the empty JSON string", Autofit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Autofit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Autofit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autofitType") != null && !jsonObj.get("autofitType").isJsonNull()) && !jsonObj.get("autofitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autofitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autofitType").toString()));
      }
      // validate the optional field `autofitType`
      if (jsonObj.get("autofitType") != null && !jsonObj.get("autofitType").isJsonNull()) {
        AutofitTypeEnum.validateJsonElement(jsonObj.get("autofitType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Autofit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Autofit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Autofit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Autofit.class));

       return (TypeAdapter<T>) new TypeAdapter<Autofit>() {
           @Override
           public void write(JsonWriter out, Autofit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Autofit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Autofit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Autofit
   * @throws IOException if the JSON string is invalid with respect to Autofit
   */
  public static Autofit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Autofit.class);
  }

  /**
   * Convert an instance of Autofit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

