/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubstringMatchCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces all instances of text matching a criteria with replace text.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceAllTextRequest {
  public static final String SERIALIZED_NAME_CONTAINS_TEXT = "containsText";
  @SerializedName(SERIALIZED_NAME_CONTAINS_TEXT)
  private SubstringMatchCriteria containsText;

  public static final String SERIALIZED_NAME_PAGE_OBJECT_IDS = "pageObjectIds";
  @SerializedName(SERIALIZED_NAME_PAGE_OBJECT_IDS)
  private List<String> pageObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLACE_TEXT = "replaceText";
  @SerializedName(SERIALIZED_NAME_REPLACE_TEXT)
  private String replaceText;

  public ReplaceAllTextRequest() {
  }

  public ReplaceAllTextRequest containsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
    return this;
  }

  /**
   * Get containsText
   * @return containsText
   */
  @javax.annotation.Nullable
  public SubstringMatchCriteria getContainsText() {
    return containsText;
  }

  public void setContainsText(SubstringMatchCriteria containsText) {
    this.containsText = containsText;
  }


  public ReplaceAllTextRequest pageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
    return this;
  }

  public ReplaceAllTextRequest addPageObjectIdsItem(String pageObjectIdsItem) {
    if (this.pageObjectIds == null) {
      this.pageObjectIds = new ArrayList<>();
    }
    this.pageObjectIds.add(pageObjectIdsItem);
    return this;
  }

  /**
   * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes master, or if a page with that object ID doesn&#39;t exist in the presentation.
   * @return pageObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getPageObjectIds() {
    return pageObjectIds;
  }

  public void setPageObjectIds(List<String> pageObjectIds) {
    this.pageObjectIds = pageObjectIds;
  }


  public ReplaceAllTextRequest replaceText(String replaceText) {
    this.replaceText = replaceText;
    return this;
  }

  /**
   * The text that will replace the matched text.
   * @return replaceText
   */
  @javax.annotation.Nullable
  public String getReplaceText() {
    return replaceText;
  }

  public void setReplaceText(String replaceText) {
    this.replaceText = replaceText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceAllTextRequest replaceAllTextRequest = (ReplaceAllTextRequest) o;
    return Objects.equals(this.containsText, replaceAllTextRequest.containsText) &&
        Objects.equals(this.pageObjectIds, replaceAllTextRequest.pageObjectIds) &&
        Objects.equals(this.replaceText, replaceAllTextRequest.replaceText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsText, pageObjectIds, replaceText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceAllTextRequest {\n");
    sb.append("    containsText: ").append(toIndentedString(containsText)).append("\n");
    sb.append("    pageObjectIds: ").append(toIndentedString(pageObjectIds)).append("\n");
    sb.append("    replaceText: ").append(toIndentedString(replaceText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containsText");
    openapiFields.add("pageObjectIds");
    openapiFields.add("replaceText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceAllTextRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceAllTextRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceAllTextRequest is not found in the empty JSON string", ReplaceAllTextRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceAllTextRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceAllTextRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containsText`
      if (jsonObj.get("containsText") != null && !jsonObj.get("containsText").isJsonNull()) {
        SubstringMatchCriteria.validateJsonElement(jsonObj.get("containsText"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pageObjectIds") != null && !jsonObj.get("pageObjectIds").isJsonNull() && !jsonObj.get("pageObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("pageObjectIds").toString()));
      }
      if ((jsonObj.get("replaceText") != null && !jsonObj.get("replaceText").isJsonNull()) && !jsonObj.get("replaceText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replaceText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replaceText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceAllTextRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceAllTextRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceAllTextRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceAllTextRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceAllTextRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceAllTextRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceAllTextRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceAllTextRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceAllTextRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceAllTextRequest
   */
  public static ReplaceAllTextRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceAllTextRequest.class);
  }

  /**
   * Convert an instance of ReplaceAllTextRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

