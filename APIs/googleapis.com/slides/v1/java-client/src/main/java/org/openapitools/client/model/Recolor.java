/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ColorStop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A recolor effect applied on an image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recolor {
  /**
   * The name of the recolor effect. The name is determined from the &#x60;recolor_stops&#x60; by matching the gradient against the colors in the page&#39;s current color scheme. This property is read-only.
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    NONE("NONE"),
    
    LIGHT1("LIGHT1"),
    
    LIGHT2("LIGHT2"),
    
    LIGHT3("LIGHT3"),
    
    LIGHT4("LIGHT4"),
    
    LIGHT5("LIGHT5"),
    
    LIGHT6("LIGHT6"),
    
    LIGHT7("LIGHT7"),
    
    LIGHT8("LIGHT8"),
    
    LIGHT9("LIGHT9"),
    
    LIGHT10("LIGHT10"),
    
    DARK1("DARK1"),
    
    DARK2("DARK2"),
    
    DARK3("DARK3"),
    
    DARK4("DARK4"),
    
    DARK5("DARK5"),
    
    DARK6("DARK6"),
    
    DARK7("DARK7"),
    
    DARK8("DARK8"),
    
    DARK9("DARK9"),
    
    DARK10("DARK10"),
    
    GRAYSCALE("GRAYSCALE"),
    
    NEGATIVE("NEGATIVE"),
    
    SEPIA("SEPIA"),
    
    CUSTOM("CUSTOM");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_RECOLOR_STOPS = "recolorStops";
  @SerializedName(SERIALIZED_NAME_RECOLOR_STOPS)
  private List<ColorStop> recolorStops = new ArrayList<>();

  public Recolor() {
  }

  public Recolor name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the recolor effect. The name is determined from the &#x60;recolor_stops&#x60; by matching the gradient against the colors in the page&#39;s current color scheme. This property is read-only.
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }


  public Recolor recolorStops(List<ColorStop> recolorStops) {
    this.recolorStops = recolorStops;
    return this;
  }

  public Recolor addRecolorStopsItem(ColorStop recolorStopsItem) {
    if (this.recolorStops == null) {
      this.recolorStops = new ArrayList<>();
    }
    this.recolorStops.add(recolorStopsItem);
    return this;
  }

  /**
   * The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.
   * @return recolorStops
   */
  @javax.annotation.Nullable
  public List<ColorStop> getRecolorStops() {
    return recolorStops;
  }

  public void setRecolorStops(List<ColorStop> recolorStops) {
    this.recolorStops = recolorStops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recolor recolor = (Recolor) o;
    return Objects.equals(this.name, recolor.name) &&
        Objects.equals(this.recolorStops, recolor.recolorStops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, recolorStops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recolor {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recolorStops: ").append(toIndentedString(recolorStops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("recolorStops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recolor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recolor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recolor is not found in the empty JSON string", Recolor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recolor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recolor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
      if (jsonObj.get("recolorStops") != null && !jsonObj.get("recolorStops").isJsonNull()) {
        JsonArray jsonArrayrecolorStops = jsonObj.getAsJsonArray("recolorStops");
        if (jsonArrayrecolorStops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recolorStops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recolorStops` to be an array in the JSON string but got `%s`", jsonObj.get("recolorStops").toString()));
          }

          // validate the optional field `recolorStops` (array)
          for (int i = 0; i < jsonArrayrecolorStops.size(); i++) {
            ColorStop.validateJsonElement(jsonArrayrecolorStops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recolor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recolor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recolor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recolor.class));

       return (TypeAdapter<T>) new TypeAdapter<Recolor>() {
           @Override
           public void write(JsonWriter out, Recolor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recolor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recolor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recolor
   * @throws IOException if the JSON string is invalid with respect to Recolor
   */
  public static Recolor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recolor.class);
  }

  /**
   * Convert an instance of Recolor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

