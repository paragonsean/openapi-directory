/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the position of slides in the presentation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSlidesPositionRequest {
  public static final String SERIALIZED_NAME_INSERTION_INDEX = "insertionIndex";
  @SerializedName(SERIALIZED_NAME_INSERTION_INDEX)
  private Integer insertionIndex;

  public static final String SERIALIZED_NAME_SLIDE_OBJECT_IDS = "slideObjectIds";
  @SerializedName(SERIALIZED_NAME_SLIDE_OBJECT_IDS)
  private List<String> slideObjectIds = new ArrayList<>();

  public UpdateSlidesPositionRequest() {
  }

  public UpdateSlidesPositionRequest insertionIndex(Integer insertionIndex) {
    this.insertionIndex = insertionIndex;
    return this;
  }

  /**
   * The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.
   * @return insertionIndex
   */
  @javax.annotation.Nullable
  public Integer getInsertionIndex() {
    return insertionIndex;
  }

  public void setInsertionIndex(Integer insertionIndex) {
    this.insertionIndex = insertionIndex;
  }


  public UpdateSlidesPositionRequest slideObjectIds(List<String> slideObjectIds) {
    this.slideObjectIds = slideObjectIds;
    return this;
  }

  public UpdateSlidesPositionRequest addSlideObjectIdsItem(String slideObjectIdsItem) {
    if (this.slideObjectIds == null) {
      this.slideObjectIds = new ArrayList<>();
    }
    this.slideObjectIds.add(slideObjectIdsItem);
    return this;
  }

  /**
   * The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.
   * @return slideObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getSlideObjectIds() {
    return slideObjectIds;
  }

  public void setSlideObjectIds(List<String> slideObjectIds) {
    this.slideObjectIds = slideObjectIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSlidesPositionRequest updateSlidesPositionRequest = (UpdateSlidesPositionRequest) o;
    return Objects.equals(this.insertionIndex, updateSlidesPositionRequest.insertionIndex) &&
        Objects.equals(this.slideObjectIds, updateSlidesPositionRequest.slideObjectIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insertionIndex, slideObjectIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSlidesPositionRequest {\n");
    sb.append("    insertionIndex: ").append(toIndentedString(insertionIndex)).append("\n");
    sb.append("    slideObjectIds: ").append(toIndentedString(slideObjectIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("insertionIndex");
    openapiFields.add("slideObjectIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSlidesPositionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSlidesPositionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSlidesPositionRequest is not found in the empty JSON string", UpdateSlidesPositionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSlidesPositionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSlidesPositionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("slideObjectIds") != null && !jsonObj.get("slideObjectIds").isJsonNull() && !jsonObj.get("slideObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("slideObjectIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSlidesPositionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSlidesPositionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSlidesPositionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSlidesPositionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSlidesPositionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSlidesPositionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSlidesPositionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSlidesPositionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSlidesPositionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSlidesPositionRequest
   */
  public static UpdateSlidesPositionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSlidesPositionRequest.class);
  }

  /**
   * Convert an instance of UpdateSlidesPositionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

