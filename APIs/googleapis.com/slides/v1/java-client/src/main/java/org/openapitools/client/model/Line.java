/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LineProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Line {
  /**
   * The category of the line. It matches the &#x60;category&#x60; specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
   */
  @JsonAdapter(LineCategoryEnum.Adapter.class)
  public enum LineCategoryEnum {
    LINE_CATEGORY_UNSPECIFIED("LINE_CATEGORY_UNSPECIFIED"),
    
    STRAIGHT("STRAIGHT"),
    
    BENT("BENT"),
    
    CURVED("CURVED");

    private String value;

    LineCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineCategoryEnum fromValue(String value) {
      for (LineCategoryEnum b : LineCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_CATEGORY = "lineCategory";
  @SerializedName(SERIALIZED_NAME_LINE_CATEGORY)
  private LineCategoryEnum lineCategory;

  public static final String SERIALIZED_NAME_LINE_PROPERTIES = "lineProperties";
  @SerializedName(SERIALIZED_NAME_LINE_PROPERTIES)
  private LineProperties lineProperties;

  /**
   * The type of the line.
   */
  @JsonAdapter(LineTypeEnum.Adapter.class)
  public enum LineTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    STRAIGHT_CONNECTOR_1("STRAIGHT_CONNECTOR_1"),
    
    BENT_CONNECTOR_2("BENT_CONNECTOR_2"),
    
    BENT_CONNECTOR_3("BENT_CONNECTOR_3"),
    
    BENT_CONNECTOR_4("BENT_CONNECTOR_4"),
    
    BENT_CONNECTOR_5("BENT_CONNECTOR_5"),
    
    CURVED_CONNECTOR_2("CURVED_CONNECTOR_2"),
    
    CURVED_CONNECTOR_3("CURVED_CONNECTOR_3"),
    
    CURVED_CONNECTOR_4("CURVED_CONNECTOR_4"),
    
    CURVED_CONNECTOR_5("CURVED_CONNECTOR_5"),
    
    STRAIGHT_LINE("STRAIGHT_LINE");

    private String value;

    LineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineTypeEnum fromValue(String value) {
      for (LineTypeEnum b : LineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_TYPE = "lineType";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE)
  private LineTypeEnum lineType;

  public Line() {
  }

  public Line lineCategory(LineCategoryEnum lineCategory) {
    this.lineCategory = lineCategory;
    return this;
  }

  /**
   * The category of the line. It matches the &#x60;category&#x60; specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
   * @return lineCategory
   */
  @javax.annotation.Nullable
  public LineCategoryEnum getLineCategory() {
    return lineCategory;
  }

  public void setLineCategory(LineCategoryEnum lineCategory) {
    this.lineCategory = lineCategory;
  }


  public Line lineProperties(LineProperties lineProperties) {
    this.lineProperties = lineProperties;
    return this;
  }

  /**
   * Get lineProperties
   * @return lineProperties
   */
  @javax.annotation.Nullable
  public LineProperties getLineProperties() {
    return lineProperties;
  }

  public void setLineProperties(LineProperties lineProperties) {
    this.lineProperties = lineProperties;
  }


  public Line lineType(LineTypeEnum lineType) {
    this.lineType = lineType;
    return this;
  }

  /**
   * The type of the line.
   * @return lineType
   */
  @javax.annotation.Nullable
  public LineTypeEnum getLineType() {
    return lineType;
  }

  public void setLineType(LineTypeEnum lineType) {
    this.lineType = lineType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Line line = (Line) o;
    return Objects.equals(this.lineCategory, line.lineCategory) &&
        Objects.equals(this.lineProperties, line.lineProperties) &&
        Objects.equals(this.lineType, line.lineType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineCategory, lineProperties, lineType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Line {\n");
    sb.append("    lineCategory: ").append(toIndentedString(lineCategory)).append("\n");
    sb.append("    lineProperties: ").append(toIndentedString(lineProperties)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lineCategory");
    openapiFields.add("lineProperties");
    openapiFields.add("lineType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Line
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Line.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Line is not found in the empty JSON string", Line.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Line.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Line` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lineCategory") != null && !jsonObj.get("lineCategory").isJsonNull()) && !jsonObj.get("lineCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineCategory").toString()));
      }
      // validate the optional field `lineCategory`
      if (jsonObj.get("lineCategory") != null && !jsonObj.get("lineCategory").isJsonNull()) {
        LineCategoryEnum.validateJsonElement(jsonObj.get("lineCategory"));
      }
      // validate the optional field `lineProperties`
      if (jsonObj.get("lineProperties") != null && !jsonObj.get("lineProperties").isJsonNull()) {
        LineProperties.validateJsonElement(jsonObj.get("lineProperties"));
      }
      if ((jsonObj.get("lineType") != null && !jsonObj.get("lineType").isJsonNull()) && !jsonObj.get("lineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineType").toString()));
      }
      // validate the optional field `lineType`
      if (jsonObj.get("lineType") != null && !jsonObj.get("lineType").isJsonNull()) {
        LineTypeEnum.validateJsonElement(jsonObj.get("lineType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Line.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Line' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Line> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Line.class));

       return (TypeAdapter<T>) new TypeAdapter<Line>() {
           @Override
           public void write(JsonWriter out, Line value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Line read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Line given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Line
   * @throws IOException if the JSON string is invalid with respect to Line
   */
  public static Line fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Line.class);
  }

  /**
   * Convert an instance of Line to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

