/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LayoutProperties;
import org.openapitools.client.model.MasterProperties;
import org.openapitools.client.model.NotesProperties;
import org.openapitools.client.model.PageElement;
import org.openapitools.client.model.PageProperties;
import org.openapitools.client.model.SlideProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A page in a presentation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Page {
  public static final String SERIALIZED_NAME_LAYOUT_PROPERTIES = "layoutProperties";
  @SerializedName(SERIALIZED_NAME_LAYOUT_PROPERTIES)
  private LayoutProperties layoutProperties;

  public static final String SERIALIZED_NAME_MASTER_PROPERTIES = "masterProperties";
  @SerializedName(SERIALIZED_NAME_MASTER_PROPERTIES)
  private MasterProperties masterProperties;

  public static final String SERIALIZED_NAME_NOTES_PROPERTIES = "notesProperties";
  @SerializedName(SERIALIZED_NAME_NOTES_PROPERTIES)
  private NotesProperties notesProperties;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_PAGE_ELEMENTS = "pageElements";
  @SerializedName(SERIALIZED_NAME_PAGE_ELEMENTS)
  private List<PageElement> pageElements = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_PROPERTIES = "pageProperties";
  @SerializedName(SERIALIZED_NAME_PAGE_PROPERTIES)
  private PageProperties pageProperties;

  /**
   * The type of the page.
   */
  @JsonAdapter(PageTypeEnum.Adapter.class)
  public enum PageTypeEnum {
    SLIDE("SLIDE"),
    
    MASTER("MASTER"),
    
    LAYOUT("LAYOUT"),
    
    NOTES("NOTES"),
    
    NOTES_MASTER("NOTES_MASTER");

    private String value;

    PageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PageTypeEnum fromValue(String value) {
      for (PageTypeEnum b : PageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAGE_TYPE = "pageType";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private PageTypeEnum pageType;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_SLIDE_PROPERTIES = "slideProperties";
  @SerializedName(SERIALIZED_NAME_SLIDE_PROPERTIES)
  private SlideProperties slideProperties;

  public Page() {
  }

  public Page layoutProperties(LayoutProperties layoutProperties) {
    this.layoutProperties = layoutProperties;
    return this;
  }

  /**
   * Get layoutProperties
   * @return layoutProperties
   */
  @javax.annotation.Nullable
  public LayoutProperties getLayoutProperties() {
    return layoutProperties;
  }

  public void setLayoutProperties(LayoutProperties layoutProperties) {
    this.layoutProperties = layoutProperties;
  }


  public Page masterProperties(MasterProperties masterProperties) {
    this.masterProperties = masterProperties;
    return this;
  }

  /**
   * Get masterProperties
   * @return masterProperties
   */
  @javax.annotation.Nullable
  public MasterProperties getMasterProperties() {
    return masterProperties;
  }

  public void setMasterProperties(MasterProperties masterProperties) {
    this.masterProperties = masterProperties;
  }


  public Page notesProperties(NotesProperties notesProperties) {
    this.notesProperties = notesProperties;
    return this;
  }

  /**
   * Get notesProperties
   * @return notesProperties
   */
  @javax.annotation.Nullable
  public NotesProperties getNotesProperties() {
    return notesProperties;
  }

  public void setNotesProperties(NotesProperties notesProperties) {
    this.notesProperties = notesProperties;
  }


  public Page objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The object ID for this page. Object IDs used by Page and PageElement share the same namespace.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public Page pageElements(List<PageElement> pageElements) {
    this.pageElements = pageElements;
    return this;
  }

  public Page addPageElementsItem(PageElement pageElementsItem) {
    if (this.pageElements == null) {
      this.pageElements = new ArrayList<>();
    }
    this.pageElements.add(pageElementsItem);
    return this;
  }

  /**
   * The page elements rendered on the page.
   * @return pageElements
   */
  @javax.annotation.Nullable
  public List<PageElement> getPageElements() {
    return pageElements;
  }

  public void setPageElements(List<PageElement> pageElements) {
    this.pageElements = pageElements;
  }


  public Page pageProperties(PageProperties pageProperties) {
    this.pageProperties = pageProperties;
    return this;
  }

  /**
   * Get pageProperties
   * @return pageProperties
   */
  @javax.annotation.Nullable
  public PageProperties getPageProperties() {
    return pageProperties;
  }

  public void setPageProperties(PageProperties pageProperties) {
    this.pageProperties = pageProperties;
  }


  public Page pageType(PageTypeEnum pageType) {
    this.pageType = pageType;
    return this;
  }

  /**
   * The type of the page.
   * @return pageType
   */
  @javax.annotation.Nullable
  public PageTypeEnum getPageType() {
    return pageType;
  }

  public void setPageType(PageTypeEnum pageType) {
    this.pageType = pageType;
  }


  public Page revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn&#39;t changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public Page slideProperties(SlideProperties slideProperties) {
    this.slideProperties = slideProperties;
    return this;
  }

  /**
   * Get slideProperties
   * @return slideProperties
   */
  @javax.annotation.Nullable
  public SlideProperties getSlideProperties() {
    return slideProperties;
  }

  public void setSlideProperties(SlideProperties slideProperties) {
    this.slideProperties = slideProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Page page = (Page) o;
    return Objects.equals(this.layoutProperties, page.layoutProperties) &&
        Objects.equals(this.masterProperties, page.masterProperties) &&
        Objects.equals(this.notesProperties, page.notesProperties) &&
        Objects.equals(this.objectId, page.objectId) &&
        Objects.equals(this.pageElements, page.pageElements) &&
        Objects.equals(this.pageProperties, page.pageProperties) &&
        Objects.equals(this.pageType, page.pageType) &&
        Objects.equals(this.revisionId, page.revisionId) &&
        Objects.equals(this.slideProperties, page.slideProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layoutProperties, masterProperties, notesProperties, objectId, pageElements, pageProperties, pageType, revisionId, slideProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Page {\n");
    sb.append("    layoutProperties: ").append(toIndentedString(layoutProperties)).append("\n");
    sb.append("    masterProperties: ").append(toIndentedString(masterProperties)).append("\n");
    sb.append("    notesProperties: ").append(toIndentedString(notesProperties)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    pageElements: ").append(toIndentedString(pageElements)).append("\n");
    sb.append("    pageProperties: ").append(toIndentedString(pageProperties)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    slideProperties: ").append(toIndentedString(slideProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("layoutProperties");
    openapiFields.add("masterProperties");
    openapiFields.add("notesProperties");
    openapiFields.add("objectId");
    openapiFields.add("pageElements");
    openapiFields.add("pageProperties");
    openapiFields.add("pageType");
    openapiFields.add("revisionId");
    openapiFields.add("slideProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Page
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Page.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Page is not found in the empty JSON string", Page.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Page.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Page` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `layoutProperties`
      if (jsonObj.get("layoutProperties") != null && !jsonObj.get("layoutProperties").isJsonNull()) {
        LayoutProperties.validateJsonElement(jsonObj.get("layoutProperties"));
      }
      // validate the optional field `masterProperties`
      if (jsonObj.get("masterProperties") != null && !jsonObj.get("masterProperties").isJsonNull()) {
        MasterProperties.validateJsonElement(jsonObj.get("masterProperties"));
      }
      // validate the optional field `notesProperties`
      if (jsonObj.get("notesProperties") != null && !jsonObj.get("notesProperties").isJsonNull()) {
        NotesProperties.validateJsonElement(jsonObj.get("notesProperties"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if (jsonObj.get("pageElements") != null && !jsonObj.get("pageElements").isJsonNull()) {
        JsonArray jsonArraypageElements = jsonObj.getAsJsonArray("pageElements");
        if (jsonArraypageElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pageElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pageElements` to be an array in the JSON string but got `%s`", jsonObj.get("pageElements").toString()));
          }

          // validate the optional field `pageElements` (array)
          for (int i = 0; i < jsonArraypageElements.size(); i++) {
            PageElement.validateJsonElement(jsonArraypageElements.get(i));
          };
        }
      }
      // validate the optional field `pageProperties`
      if (jsonObj.get("pageProperties") != null && !jsonObj.get("pageProperties").isJsonNull()) {
        PageProperties.validateJsonElement(jsonObj.get("pageProperties"));
      }
      if ((jsonObj.get("pageType") != null && !jsonObj.get("pageType").isJsonNull()) && !jsonObj.get("pageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageType").toString()));
      }
      // validate the optional field `pageType`
      if (jsonObj.get("pageType") != null && !jsonObj.get("pageType").isJsonNull()) {
        PageTypeEnum.validateJsonElement(jsonObj.get("pageType"));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      // validate the optional field `slideProperties`
      if (jsonObj.get("slideProperties") != null && !jsonObj.get("slideProperties").isJsonNull()) {
        SlideProperties.validateJsonElement(jsonObj.get("slideProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Page.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Page' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Page> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Page.class));

       return (TypeAdapter<T>) new TypeAdapter<Page>() {
           @Override
           public void write(JsonWriter out, Page value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Page read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Page given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Page
   * @throws IOException if the JSON string is invalid with respect to Page
   */
  public static Page fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Page.class);
  }

  /**
   * Convert an instance of Page to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

