/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PageElementProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates a new shape.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:28.691493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateShapeRequest {
  public static final String SERIALIZED_NAME_ELEMENT_PROPERTIES = "elementProperties";
  @SerializedName(SERIALIZED_NAME_ELEMENT_PROPERTIES)
  private PageElementProperties elementProperties;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  /**
   * The shape type.
   */
  @JsonAdapter(ShapeTypeEnum.Adapter.class)
  public enum ShapeTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    TEXT_BOX("TEXT_BOX"),
    
    RECTANGLE("RECTANGLE"),
    
    ROUND_RECTANGLE("ROUND_RECTANGLE"),
    
    ELLIPSE("ELLIPSE"),
    
    ARC("ARC"),
    
    BENT_ARROW("BENT_ARROW"),
    
    BENT_UP_ARROW("BENT_UP_ARROW"),
    
    BEVEL("BEVEL"),
    
    BLOCK_ARC("BLOCK_ARC"),
    
    BRACE_PAIR("BRACE_PAIR"),
    
    BRACKET_PAIR("BRACKET_PAIR"),
    
    CAN("CAN"),
    
    CHEVRON("CHEVRON"),
    
    CHORD("CHORD"),
    
    CLOUD("CLOUD"),
    
    CORNER("CORNER"),
    
    CUBE("CUBE"),
    
    CURVED_DOWN_ARROW("CURVED_DOWN_ARROW"),
    
    CURVED_LEFT_ARROW("CURVED_LEFT_ARROW"),
    
    CURVED_RIGHT_ARROW("CURVED_RIGHT_ARROW"),
    
    CURVED_UP_ARROW("CURVED_UP_ARROW"),
    
    DECAGON("DECAGON"),
    
    DIAGONAL_STRIPE("DIAGONAL_STRIPE"),
    
    DIAMOND("DIAMOND"),
    
    DODECAGON("DODECAGON"),
    
    DONUT("DONUT"),
    
    DOUBLE_WAVE("DOUBLE_WAVE"),
    
    DOWN_ARROW("DOWN_ARROW"),
    
    DOWN_ARROW_CALLOUT("DOWN_ARROW_CALLOUT"),
    
    FOLDED_CORNER("FOLDED_CORNER"),
    
    FRAME("FRAME"),
    
    HALF_FRAME("HALF_FRAME"),
    
    HEART("HEART"),
    
    HEPTAGON("HEPTAGON"),
    
    HEXAGON("HEXAGON"),
    
    HOME_PLATE("HOME_PLATE"),
    
    HORIZONTAL_SCROLL("HORIZONTAL_SCROLL"),
    
    IRREGULAR_SEAL_1("IRREGULAR_SEAL_1"),
    
    IRREGULAR_SEAL_2("IRREGULAR_SEAL_2"),
    
    LEFT_ARROW("LEFT_ARROW"),
    
    LEFT_ARROW_CALLOUT("LEFT_ARROW_CALLOUT"),
    
    LEFT_BRACE("LEFT_BRACE"),
    
    LEFT_BRACKET("LEFT_BRACKET"),
    
    LEFT_RIGHT_ARROW("LEFT_RIGHT_ARROW"),
    
    LEFT_RIGHT_ARROW_CALLOUT("LEFT_RIGHT_ARROW_CALLOUT"),
    
    LEFT_RIGHT_UP_ARROW("LEFT_RIGHT_UP_ARROW"),
    
    LEFT_UP_ARROW("LEFT_UP_ARROW"),
    
    LIGHTNING_BOLT("LIGHTNING_BOLT"),
    
    MATH_DIVIDE("MATH_DIVIDE"),
    
    MATH_EQUAL("MATH_EQUAL"),
    
    MATH_MINUS("MATH_MINUS"),
    
    MATH_MULTIPLY("MATH_MULTIPLY"),
    
    MATH_NOT_EQUAL("MATH_NOT_EQUAL"),
    
    MATH_PLUS("MATH_PLUS"),
    
    MOON("MOON"),
    
    NO_SMOKING("NO_SMOKING"),
    
    NOTCHED_RIGHT_ARROW("NOTCHED_RIGHT_ARROW"),
    
    OCTAGON("OCTAGON"),
    
    PARALLELOGRAM("PARALLELOGRAM"),
    
    PENTAGON("PENTAGON"),
    
    PIE("PIE"),
    
    PLAQUE("PLAQUE"),
    
    PLUS("PLUS"),
    
    QUAD_ARROW("QUAD_ARROW"),
    
    QUAD_ARROW_CALLOUT("QUAD_ARROW_CALLOUT"),
    
    RIBBON("RIBBON"),
    
    RIBBON_2("RIBBON_2"),
    
    RIGHT_ARROW("RIGHT_ARROW"),
    
    RIGHT_ARROW_CALLOUT("RIGHT_ARROW_CALLOUT"),
    
    RIGHT_BRACE("RIGHT_BRACE"),
    
    RIGHT_BRACKET("RIGHT_BRACKET"),
    
    ROUND_1_RECTANGLE("ROUND_1_RECTANGLE"),
    
    ROUND_2_DIAGONAL_RECTANGLE("ROUND_2_DIAGONAL_RECTANGLE"),
    
    ROUND_2_SAME_RECTANGLE("ROUND_2_SAME_RECTANGLE"),
    
    RIGHT_TRIANGLE("RIGHT_TRIANGLE"),
    
    SMILEY_FACE("SMILEY_FACE"),
    
    SNIP_1_RECTANGLE("SNIP_1_RECTANGLE"),
    
    SNIP_2_DIAGONAL_RECTANGLE("SNIP_2_DIAGONAL_RECTANGLE"),
    
    SNIP_2_SAME_RECTANGLE("SNIP_2_SAME_RECTANGLE"),
    
    SNIP_ROUND_RECTANGLE("SNIP_ROUND_RECTANGLE"),
    
    STAR_10("STAR_10"),
    
    STAR_12("STAR_12"),
    
    STAR_16("STAR_16"),
    
    STAR_24("STAR_24"),
    
    STAR_32("STAR_32"),
    
    STAR_4("STAR_4"),
    
    STAR_5("STAR_5"),
    
    STAR_6("STAR_6"),
    
    STAR_7("STAR_7"),
    
    STAR_8("STAR_8"),
    
    STRIPED_RIGHT_ARROW("STRIPED_RIGHT_ARROW"),
    
    SUN("SUN"),
    
    TRAPEZOID("TRAPEZOID"),
    
    TRIANGLE("TRIANGLE"),
    
    UP_ARROW("UP_ARROW"),
    
    UP_ARROW_CALLOUT("UP_ARROW_CALLOUT"),
    
    UP_DOWN_ARROW("UP_DOWN_ARROW"),
    
    UTURN_ARROW("UTURN_ARROW"),
    
    VERTICAL_SCROLL("VERTICAL_SCROLL"),
    
    WAVE("WAVE"),
    
    WEDGE_ELLIPSE_CALLOUT("WEDGE_ELLIPSE_CALLOUT"),
    
    WEDGE_RECTANGLE_CALLOUT("WEDGE_RECTANGLE_CALLOUT"),
    
    WEDGE_ROUND_RECTANGLE_CALLOUT("WEDGE_ROUND_RECTANGLE_CALLOUT"),
    
    FLOW_CHART_ALTERNATE_PROCESS("FLOW_CHART_ALTERNATE_PROCESS"),
    
    FLOW_CHART_COLLATE("FLOW_CHART_COLLATE"),
    
    FLOW_CHART_CONNECTOR("FLOW_CHART_CONNECTOR"),
    
    FLOW_CHART_DECISION("FLOW_CHART_DECISION"),
    
    FLOW_CHART_DELAY("FLOW_CHART_DELAY"),
    
    FLOW_CHART_DISPLAY("FLOW_CHART_DISPLAY"),
    
    FLOW_CHART_DOCUMENT("FLOW_CHART_DOCUMENT"),
    
    FLOW_CHART_EXTRACT("FLOW_CHART_EXTRACT"),
    
    FLOW_CHART_INPUT_OUTPUT("FLOW_CHART_INPUT_OUTPUT"),
    
    FLOW_CHART_INTERNAL_STORAGE("FLOW_CHART_INTERNAL_STORAGE"),
    
    FLOW_CHART_MAGNETIC_DISK("FLOW_CHART_MAGNETIC_DISK"),
    
    FLOW_CHART_MAGNETIC_DRUM("FLOW_CHART_MAGNETIC_DRUM"),
    
    FLOW_CHART_MAGNETIC_TAPE("FLOW_CHART_MAGNETIC_TAPE"),
    
    FLOW_CHART_MANUAL_INPUT("FLOW_CHART_MANUAL_INPUT"),
    
    FLOW_CHART_MANUAL_OPERATION("FLOW_CHART_MANUAL_OPERATION"),
    
    FLOW_CHART_MERGE("FLOW_CHART_MERGE"),
    
    FLOW_CHART_MULTIDOCUMENT("FLOW_CHART_MULTIDOCUMENT"),
    
    FLOW_CHART_OFFLINE_STORAGE("FLOW_CHART_OFFLINE_STORAGE"),
    
    FLOW_CHART_OFFPAGE_CONNECTOR("FLOW_CHART_OFFPAGE_CONNECTOR"),
    
    FLOW_CHART_ONLINE_STORAGE("FLOW_CHART_ONLINE_STORAGE"),
    
    FLOW_CHART_OR("FLOW_CHART_OR"),
    
    FLOW_CHART_PREDEFINED_PROCESS("FLOW_CHART_PREDEFINED_PROCESS"),
    
    FLOW_CHART_PREPARATION("FLOW_CHART_PREPARATION"),
    
    FLOW_CHART_PROCESS("FLOW_CHART_PROCESS"),
    
    FLOW_CHART_PUNCHED_CARD("FLOW_CHART_PUNCHED_CARD"),
    
    FLOW_CHART_PUNCHED_TAPE("FLOW_CHART_PUNCHED_TAPE"),
    
    FLOW_CHART_SORT("FLOW_CHART_SORT"),
    
    FLOW_CHART_SUMMING_JUNCTION("FLOW_CHART_SUMMING_JUNCTION"),
    
    FLOW_CHART_TERMINATOR("FLOW_CHART_TERMINATOR"),
    
    ARROW_EAST("ARROW_EAST"),
    
    ARROW_NORTH_EAST("ARROW_NORTH_EAST"),
    
    ARROW_NORTH("ARROW_NORTH"),
    
    SPEECH("SPEECH"),
    
    STARBURST("STARBURST"),
    
    TEARDROP("TEARDROP"),
    
    ELLIPSE_RIBBON("ELLIPSE_RIBBON"),
    
    ELLIPSE_RIBBON_2("ELLIPSE_RIBBON_2"),
    
    CLOUD_CALLOUT("CLOUD_CALLOUT"),
    
    CUSTOM("CUSTOM");

    private String value;

    ShapeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeTypeEnum fromValue(String value) {
      for (ShapeTypeEnum b : ShapeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE_TYPE = "shapeType";
  @SerializedName(SERIALIZED_NAME_SHAPE_TYPE)
  private ShapeTypeEnum shapeType;

  public CreateShapeRequest() {
  }

  public CreateShapeRequest elementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
    return this;
  }

  /**
   * Get elementProperties
   * @return elementProperties
   */
  @javax.annotation.Nullable
  public PageElementProperties getElementProperties() {
    return elementProperties;
  }

  public void setElementProperties(PageElementProperties elementProperties) {
    this.elementProperties = elementProperties;
  }


  public CreateShapeRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex &#x60;[a-zA-Z0-9_]&#x60;); remaining characters may include those as well as a hyphen or colon (matches regex &#x60;[a-zA-Z0-9_-:]&#x60;). The length of the ID must not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public CreateShapeRequest shapeType(ShapeTypeEnum shapeType) {
    this.shapeType = shapeType;
    return this;
  }

  /**
   * The shape type.
   * @return shapeType
   */
  @javax.annotation.Nullable
  public ShapeTypeEnum getShapeType() {
    return shapeType;
  }

  public void setShapeType(ShapeTypeEnum shapeType) {
    this.shapeType = shapeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateShapeRequest createShapeRequest = (CreateShapeRequest) o;
    return Objects.equals(this.elementProperties, createShapeRequest.elementProperties) &&
        Objects.equals(this.objectId, createShapeRequest.objectId) &&
        Objects.equals(this.shapeType, createShapeRequest.shapeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elementProperties, objectId, shapeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateShapeRequest {\n");
    sb.append("    elementProperties: ").append(toIndentedString(elementProperties)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    shapeType: ").append(toIndentedString(shapeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("elementProperties");
    openapiFields.add("objectId");
    openapiFields.add("shapeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateShapeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateShapeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateShapeRequest is not found in the empty JSON string", CreateShapeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateShapeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateShapeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `elementProperties`
      if (jsonObj.get("elementProperties") != null && !jsonObj.get("elementProperties").isJsonNull()) {
        PageElementProperties.validateJsonElement(jsonObj.get("elementProperties"));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if ((jsonObj.get("shapeType") != null && !jsonObj.get("shapeType").isJsonNull()) && !jsonObj.get("shapeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeType").toString()));
      }
      // validate the optional field `shapeType`
      if (jsonObj.get("shapeType") != null && !jsonObj.get("shapeType").isJsonNull()) {
        ShapeTypeEnum.validateJsonElement(jsonObj.get("shapeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateShapeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateShapeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateShapeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateShapeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateShapeRequest>() {
           @Override
           public void write(JsonWriter out, CreateShapeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateShapeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateShapeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateShapeRequest
   * @throws IOException if the JSON string is invalid with respect to CreateShapeRequest
   */
  public static CreateShapeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateShapeRequest.class);
  }

  /**
   * Convert an instance of CreateShapeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

