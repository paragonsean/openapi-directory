/*
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchUpdatePresentationRequest;
import org.openapitools.client.model.BatchUpdatePresentationResponse;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.Presentation;
import org.openapitools.client.model.Thumbnail;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PresentationsApi
 */
@Disabled
public class PresentationsApiTest {

    private final PresentationsApi api = new PresentationsApi();

    /**
     * Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void slidesPresentationsBatchUpdateTest() throws ApiException {
        String presentationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdatePresentationRequest batchUpdatePresentationRequest = null;
        BatchUpdatePresentationResponse response = api.slidesPresentationsBatchUpdate(presentationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdatePresentationRequest);
        // TODO: test validations
    }

    /**
     * Creates a blank presentation using the title given in the request. If a &#x60;presentationId&#x60; is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void slidesPresentationsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Presentation presentation = null;
        Presentation response = api.slidesPresentationsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, presentation);
        // TODO: test validations
    }

    /**
     * Gets the latest version of the specified presentation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void slidesPresentationsGetTest() throws ApiException {
        String presentationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Presentation response = api.slidesPresentationsGet(presentationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the latest version of the specified page in the presentation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void slidesPresentationsPagesGetTest() throws ApiException {
        String presentationId = null;
        String pageObjectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Page response = api.slidesPresentationsPagesGet(presentationId, pageObjectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void slidesPresentationsPagesGetThumbnailTest() throws ApiException {
        String presentationId = null;
        String pageObjectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String thumbnailPropertiesMimeType = null;
        String thumbnailPropertiesThumbnailSize = null;
        Thumbnail response = api.slidesPresentationsPagesGetThumbnail(presentationId, pageObjectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, thumbnailPropertiesMimeType, thumbnailPropertiesThumbnailSize);
        // TODO: test validations
    }

}
