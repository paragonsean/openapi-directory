/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateShapePropertiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateShapePropertiesRequest::OAIUpdateShapePropertiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateShapePropertiesRequest::OAIUpdateShapePropertiesRequest() {
    this->initializeModel();
}

OAIUpdateShapePropertiesRequest::~OAIUpdateShapePropertiesRequest() {}

void OAIUpdateShapePropertiesRequest::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_shape_properties_isSet = false;
    m_shape_properties_isValid = false;
}

void OAIUpdateShapePropertiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateShapePropertiesRequest::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_shape_properties_isValid = ::OpenAPI::fromJsonValue(m_shape_properties, json[QString("shapeProperties")]);
    m_shape_properties_isSet = !json[QString("shapeProperties")].isNull() && m_shape_properties_isValid;
}

QString OAIUpdateShapePropertiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateShapePropertiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_shape_properties.isSet()) {
        obj.insert(QString("shapeProperties"), ::OpenAPI::toJsonValue(m_shape_properties));
    }
    return obj;
}

QString OAIUpdateShapePropertiesRequest::getFields() const {
    return m_fields;
}
void OAIUpdateShapePropertiesRequest::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIUpdateShapePropertiesRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIUpdateShapePropertiesRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIUpdateShapePropertiesRequest::getObjectId() const {
    return m_object_id;
}
void OAIUpdateShapePropertiesRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIUpdateShapePropertiesRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIUpdateShapePropertiesRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIShapeProperties OAIUpdateShapePropertiesRequest::getShapeProperties() const {
    return m_shape_properties;
}
void OAIUpdateShapePropertiesRequest::setShapeProperties(const OAIShapeProperties &shape_properties) {
    m_shape_properties = shape_properties;
    m_shape_properties_isSet = true;
}

bool OAIUpdateShapePropertiesRequest::is_shape_properties_Set() const{
    return m_shape_properties_isSet;
}

bool OAIUpdateShapePropertiesRequest::is_shape_properties_Valid() const{
    return m_shape_properties_isValid;
}

bool OAIUpdateShapePropertiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateShapePropertiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
