/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextElement::OAITextElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextElement::OAITextElement() {
    this->initializeModel();
}

OAITextElement::~OAITextElement() {}

void OAITextElement::initializeModel() {

    m_auto_text_isSet = false;
    m_auto_text_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_paragraph_marker_isSet = false;
    m_paragraph_marker_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_text_run_isSet = false;
    m_text_run_isValid = false;
}

void OAITextElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextElement::fromJsonObject(QJsonObject json) {

    m_auto_text_isValid = ::OpenAPI::fromJsonValue(m_auto_text, json[QString("autoText")]);
    m_auto_text_isSet = !json[QString("autoText")].isNull() && m_auto_text_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_paragraph_marker_isValid = ::OpenAPI::fromJsonValue(m_paragraph_marker, json[QString("paragraphMarker")]);
    m_paragraph_marker_isSet = !json[QString("paragraphMarker")].isNull() && m_paragraph_marker_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_text_run_isValid = ::OpenAPI::fromJsonValue(m_text_run, json[QString("textRun")]);
    m_text_run_isSet = !json[QString("textRun")].isNull() && m_text_run_isValid;
}

QString OAITextElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextElement::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_text.isSet()) {
        obj.insert(QString("autoText"), ::OpenAPI::toJsonValue(m_auto_text));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_paragraph_marker.isSet()) {
        obj.insert(QString("paragraphMarker"), ::OpenAPI::toJsonValue(m_paragraph_marker));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_text_run.isSet()) {
        obj.insert(QString("textRun"), ::OpenAPI::toJsonValue(m_text_run));
    }
    return obj;
}

OAIAutoText OAITextElement::getAutoText() const {
    return m_auto_text;
}
void OAITextElement::setAutoText(const OAIAutoText &auto_text) {
    m_auto_text = auto_text;
    m_auto_text_isSet = true;
}

bool OAITextElement::is_auto_text_Set() const{
    return m_auto_text_isSet;
}

bool OAITextElement::is_auto_text_Valid() const{
    return m_auto_text_isValid;
}

qint32 OAITextElement::getEndIndex() const {
    return m_end_index;
}
void OAITextElement::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAITextElement::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAITextElement::is_end_index_Valid() const{
    return m_end_index_isValid;
}

OAIParagraphMarker OAITextElement::getParagraphMarker() const {
    return m_paragraph_marker;
}
void OAITextElement::setParagraphMarker(const OAIParagraphMarker &paragraph_marker) {
    m_paragraph_marker = paragraph_marker;
    m_paragraph_marker_isSet = true;
}

bool OAITextElement::is_paragraph_marker_Set() const{
    return m_paragraph_marker_isSet;
}

bool OAITextElement::is_paragraph_marker_Valid() const{
    return m_paragraph_marker_isValid;
}

qint32 OAITextElement::getStartIndex() const {
    return m_start_index;
}
void OAITextElement::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAITextElement::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAITextElement::is_start_index_Valid() const{
    return m_start_index_isValid;
}

OAITextRun OAITextElement::getTextRun() const {
    return m_text_run;
}
void OAITextElement::setTextRun(const OAITextRun &text_run) {
    m_text_run = text_run;
    m_text_run_isSet = true;
}

bool OAITextElement::is_text_run_Set() const{
    return m_text_run_isSet;
}

bool OAITextElement::is_text_run_Valid() const{
    return m_text_run_isValid;
}

bool OAITextElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph_marker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
