/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLineRequest::OAICreateLineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLineRequest::OAICreateLineRequest() {
    this->initializeModel();
}

OAICreateLineRequest::~OAICreateLineRequest() {}

void OAICreateLineRequest::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_element_properties_isSet = false;
    m_element_properties_isValid = false;

    m_line_category_isSet = false;
    m_line_category_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;
}

void OAICreateLineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLineRequest::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_element_properties_isValid = ::OpenAPI::fromJsonValue(m_element_properties, json[QString("elementProperties")]);
    m_element_properties_isSet = !json[QString("elementProperties")].isNull() && m_element_properties_isValid;

    m_line_category_isValid = ::OpenAPI::fromJsonValue(m_line_category, json[QString("lineCategory")]);
    m_line_category_isSet = !json[QString("lineCategory")].isNull() && m_line_category_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;
}

QString OAICreateLineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_element_properties.isSet()) {
        obj.insert(QString("elementProperties"), ::OpenAPI::toJsonValue(m_element_properties));
    }
    if (m_line_category_isSet) {
        obj.insert(QString("lineCategory"), ::OpenAPI::toJsonValue(m_line_category));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    return obj;
}

QString OAICreateLineRequest::getCategory() const {
    return m_category;
}
void OAICreateLineRequest::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICreateLineRequest::is_category_Set() const{
    return m_category_isSet;
}

bool OAICreateLineRequest::is_category_Valid() const{
    return m_category_isValid;
}

OAIPageElementProperties OAICreateLineRequest::getElementProperties() const {
    return m_element_properties;
}
void OAICreateLineRequest::setElementProperties(const OAIPageElementProperties &element_properties) {
    m_element_properties = element_properties;
    m_element_properties_isSet = true;
}

bool OAICreateLineRequest::is_element_properties_Set() const{
    return m_element_properties_isSet;
}

bool OAICreateLineRequest::is_element_properties_Valid() const{
    return m_element_properties_isValid;
}

QString OAICreateLineRequest::getLineCategory() const {
    return m_line_category;
}
void OAICreateLineRequest::setLineCategory(const QString &line_category) {
    m_line_category = line_category;
    m_line_category_isSet = true;
}

bool OAICreateLineRequest::is_line_category_Set() const{
    return m_line_category_isSet;
}

bool OAICreateLineRequest::is_line_category_Valid() const{
    return m_line_category_isValid;
}

QString OAICreateLineRequest::getObjectId() const {
    return m_object_id;
}
void OAICreateLineRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICreateLineRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICreateLineRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

bool OAICreateLineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
