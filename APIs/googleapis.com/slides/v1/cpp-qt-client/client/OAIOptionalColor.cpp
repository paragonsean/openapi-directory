/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptionalColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptionalColor::OAIOptionalColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptionalColor::OAIOptionalColor() {
    this->initializeModel();
}

OAIOptionalColor::~OAIOptionalColor() {}

void OAIOptionalColor::initializeModel() {

    m_opaque_color_isSet = false;
    m_opaque_color_isValid = false;
}

void OAIOptionalColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptionalColor::fromJsonObject(QJsonObject json) {

    m_opaque_color_isValid = ::OpenAPI::fromJsonValue(m_opaque_color, json[QString("opaqueColor")]);
    m_opaque_color_isSet = !json[QString("opaqueColor")].isNull() && m_opaque_color_isValid;
}

QString OAIOptionalColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptionalColor::asJsonObject() const {
    QJsonObject obj;
    if (m_opaque_color.isSet()) {
        obj.insert(QString("opaqueColor"), ::OpenAPI::toJsonValue(m_opaque_color));
    }
    return obj;
}

OAIOpaqueColor OAIOptionalColor::getOpaqueColor() const {
    return m_opaque_color;
}
void OAIOptionalColor::setOpaqueColor(const OAIOpaqueColor &opaque_color) {
    m_opaque_color = opaque_color;
    m_opaque_color_isSet = true;
}

bool OAIOptionalColor::is_opaque_color_Set() const{
    return m_opaque_color_isSet;
}

bool OAIOptionalColor::is_opaque_color_Valid() const{
    return m_opaque_color_isValid;
}

bool OAIOptionalColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opaque_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptionalColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
