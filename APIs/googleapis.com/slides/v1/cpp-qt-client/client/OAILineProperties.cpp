/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineProperties::OAILineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineProperties::OAILineProperties() {
    this->initializeModel();
}

OAILineProperties::~OAILineProperties() {}

void OAILineProperties::initializeModel() {

    m_dash_style_isSet = false;
    m_dash_style_isValid = false;

    m_end_arrow_isSet = false;
    m_end_arrow_isValid = false;

    m_end_connection_isSet = false;
    m_end_connection_isValid = false;

    m_line_fill_isSet = false;
    m_line_fill_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_start_arrow_isSet = false;
    m_start_arrow_isValid = false;

    m_start_connection_isSet = false;
    m_start_connection_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAILineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineProperties::fromJsonObject(QJsonObject json) {

    m_dash_style_isValid = ::OpenAPI::fromJsonValue(m_dash_style, json[QString("dashStyle")]);
    m_dash_style_isSet = !json[QString("dashStyle")].isNull() && m_dash_style_isValid;

    m_end_arrow_isValid = ::OpenAPI::fromJsonValue(m_end_arrow, json[QString("endArrow")]);
    m_end_arrow_isSet = !json[QString("endArrow")].isNull() && m_end_arrow_isValid;

    m_end_connection_isValid = ::OpenAPI::fromJsonValue(m_end_connection, json[QString("endConnection")]);
    m_end_connection_isSet = !json[QString("endConnection")].isNull() && m_end_connection_isValid;

    m_line_fill_isValid = ::OpenAPI::fromJsonValue(m_line_fill, json[QString("lineFill")]);
    m_line_fill_isSet = !json[QString("lineFill")].isNull() && m_line_fill_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_start_arrow_isValid = ::OpenAPI::fromJsonValue(m_start_arrow, json[QString("startArrow")]);
    m_start_arrow_isSet = !json[QString("startArrow")].isNull() && m_start_arrow_isValid;

    m_start_connection_isValid = ::OpenAPI::fromJsonValue(m_start_connection, json[QString("startConnection")]);
    m_start_connection_isSet = !json[QString("startConnection")].isNull() && m_start_connection_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAILineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dash_style_isSet) {
        obj.insert(QString("dashStyle"), ::OpenAPI::toJsonValue(m_dash_style));
    }
    if (m_end_arrow_isSet) {
        obj.insert(QString("endArrow"), ::OpenAPI::toJsonValue(m_end_arrow));
    }
    if (m_end_connection.isSet()) {
        obj.insert(QString("endConnection"), ::OpenAPI::toJsonValue(m_end_connection));
    }
    if (m_line_fill.isSet()) {
        obj.insert(QString("lineFill"), ::OpenAPI::toJsonValue(m_line_fill));
    }
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_start_arrow_isSet) {
        obj.insert(QString("startArrow"), ::OpenAPI::toJsonValue(m_start_arrow));
    }
    if (m_start_connection.isSet()) {
        obj.insert(QString("startConnection"), ::OpenAPI::toJsonValue(m_start_connection));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAILineProperties::getDashStyle() const {
    return m_dash_style;
}
void OAILineProperties::setDashStyle(const QString &dash_style) {
    m_dash_style = dash_style;
    m_dash_style_isSet = true;
}

bool OAILineProperties::is_dash_style_Set() const{
    return m_dash_style_isSet;
}

bool OAILineProperties::is_dash_style_Valid() const{
    return m_dash_style_isValid;
}

QString OAILineProperties::getEndArrow() const {
    return m_end_arrow;
}
void OAILineProperties::setEndArrow(const QString &end_arrow) {
    m_end_arrow = end_arrow;
    m_end_arrow_isSet = true;
}

bool OAILineProperties::is_end_arrow_Set() const{
    return m_end_arrow_isSet;
}

bool OAILineProperties::is_end_arrow_Valid() const{
    return m_end_arrow_isValid;
}

OAILineConnection OAILineProperties::getEndConnection() const {
    return m_end_connection;
}
void OAILineProperties::setEndConnection(const OAILineConnection &end_connection) {
    m_end_connection = end_connection;
    m_end_connection_isSet = true;
}

bool OAILineProperties::is_end_connection_Set() const{
    return m_end_connection_isSet;
}

bool OAILineProperties::is_end_connection_Valid() const{
    return m_end_connection_isValid;
}

OAILineFill OAILineProperties::getLineFill() const {
    return m_line_fill;
}
void OAILineProperties::setLineFill(const OAILineFill &line_fill) {
    m_line_fill = line_fill;
    m_line_fill_isSet = true;
}

bool OAILineProperties::is_line_fill_Set() const{
    return m_line_fill_isSet;
}

bool OAILineProperties::is_line_fill_Valid() const{
    return m_line_fill_isValid;
}

OAILink OAILineProperties::getLink() const {
    return m_link;
}
void OAILineProperties::setLink(const OAILink &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAILineProperties::is_link_Set() const{
    return m_link_isSet;
}

bool OAILineProperties::is_link_Valid() const{
    return m_link_isValid;
}

QString OAILineProperties::getStartArrow() const {
    return m_start_arrow;
}
void OAILineProperties::setStartArrow(const QString &start_arrow) {
    m_start_arrow = start_arrow;
    m_start_arrow_isSet = true;
}

bool OAILineProperties::is_start_arrow_Set() const{
    return m_start_arrow_isSet;
}

bool OAILineProperties::is_start_arrow_Valid() const{
    return m_start_arrow_isValid;
}

OAILineConnection OAILineProperties::getStartConnection() const {
    return m_start_connection;
}
void OAILineProperties::setStartConnection(const OAILineConnection &start_connection) {
    m_start_connection = start_connection;
    m_start_connection_isSet = true;
}

bool OAILineProperties::is_start_connection_Set() const{
    return m_start_connection_isSet;
}

bool OAILineProperties::is_start_connection_Valid() const{
    return m_start_connection_isValid;
}

OAIDimension OAILineProperties::getWeight() const {
    return m_weight;
}
void OAILineProperties::setWeight(const OAIDimension &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAILineProperties::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAILineProperties::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAILineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dash_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_arrow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_arrow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
