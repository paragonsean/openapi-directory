/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutofit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutofit::OAIAutofit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutofit::OAIAutofit() {
    this->initializeModel();
}

OAIAutofit::~OAIAutofit() {}

void OAIAutofit::initializeModel() {

    m_autofit_type_isSet = false;
    m_autofit_type_isValid = false;

    m_font_scale_isSet = false;
    m_font_scale_isValid = false;

    m_line_spacing_reduction_isSet = false;
    m_line_spacing_reduction_isValid = false;
}

void OAIAutofit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutofit::fromJsonObject(QJsonObject json) {

    m_autofit_type_isValid = ::OpenAPI::fromJsonValue(m_autofit_type, json[QString("autofitType")]);
    m_autofit_type_isSet = !json[QString("autofitType")].isNull() && m_autofit_type_isValid;

    m_font_scale_isValid = ::OpenAPI::fromJsonValue(m_font_scale, json[QString("fontScale")]);
    m_font_scale_isSet = !json[QString("fontScale")].isNull() && m_font_scale_isValid;

    m_line_spacing_reduction_isValid = ::OpenAPI::fromJsonValue(m_line_spacing_reduction, json[QString("lineSpacingReduction")]);
    m_line_spacing_reduction_isSet = !json[QString("lineSpacingReduction")].isNull() && m_line_spacing_reduction_isValid;
}

QString OAIAutofit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutofit::asJsonObject() const {
    QJsonObject obj;
    if (m_autofit_type_isSet) {
        obj.insert(QString("autofitType"), ::OpenAPI::toJsonValue(m_autofit_type));
    }
    if (m_font_scale_isSet) {
        obj.insert(QString("fontScale"), ::OpenAPI::toJsonValue(m_font_scale));
    }
    if (m_line_spacing_reduction_isSet) {
        obj.insert(QString("lineSpacingReduction"), ::OpenAPI::toJsonValue(m_line_spacing_reduction));
    }
    return obj;
}

QString OAIAutofit::getAutofitType() const {
    return m_autofit_type;
}
void OAIAutofit::setAutofitType(const QString &autofit_type) {
    m_autofit_type = autofit_type;
    m_autofit_type_isSet = true;
}

bool OAIAutofit::is_autofit_type_Set() const{
    return m_autofit_type_isSet;
}

bool OAIAutofit::is_autofit_type_Valid() const{
    return m_autofit_type_isValid;
}

float OAIAutofit::getFontScale() const {
    return m_font_scale;
}
void OAIAutofit::setFontScale(const float &font_scale) {
    m_font_scale = font_scale;
    m_font_scale_isSet = true;
}

bool OAIAutofit::is_font_scale_Set() const{
    return m_font_scale_isSet;
}

bool OAIAutofit::is_font_scale_Valid() const{
    return m_font_scale_isValid;
}

float OAIAutofit::getLineSpacingReduction() const {
    return m_line_spacing_reduction;
}
void OAIAutofit::setLineSpacingReduction(const float &line_spacing_reduction) {
    m_line_spacing_reduction = line_spacing_reduction;
    m_line_spacing_reduction_isSet = true;
}

bool OAIAutofit::is_line_spacing_reduction_Set() const{
    return m_line_spacing_reduction_isSet;
}

bool OAIAutofit::is_line_spacing_reduction_Valid() const{
    return m_line_spacing_reduction_isValid;
}

bool OAIAutofit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autofit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_spacing_reduction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutofit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
