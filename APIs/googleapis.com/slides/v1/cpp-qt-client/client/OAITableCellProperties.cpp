/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellProperties::OAITableCellProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellProperties::OAITableCellProperties() {
    this->initializeModel();
}

OAITableCellProperties::~OAITableCellProperties() {}

void OAITableCellProperties::initializeModel() {

    m_content_alignment_isSet = false;
    m_content_alignment_isValid = false;

    m_table_cell_background_fill_isSet = false;
    m_table_cell_background_fill_isValid = false;
}

void OAITableCellProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellProperties::fromJsonObject(QJsonObject json) {

    m_content_alignment_isValid = ::OpenAPI::fromJsonValue(m_content_alignment, json[QString("contentAlignment")]);
    m_content_alignment_isSet = !json[QString("contentAlignment")].isNull() && m_content_alignment_isValid;

    m_table_cell_background_fill_isValid = ::OpenAPI::fromJsonValue(m_table_cell_background_fill, json[QString("tableCellBackgroundFill")]);
    m_table_cell_background_fill_isSet = !json[QString("tableCellBackgroundFill")].isNull() && m_table_cell_background_fill_isValid;
}

QString OAITableCellProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_content_alignment_isSet) {
        obj.insert(QString("contentAlignment"), ::OpenAPI::toJsonValue(m_content_alignment));
    }
    if (m_table_cell_background_fill.isSet()) {
        obj.insert(QString("tableCellBackgroundFill"), ::OpenAPI::toJsonValue(m_table_cell_background_fill));
    }
    return obj;
}

QString OAITableCellProperties::getContentAlignment() const {
    return m_content_alignment;
}
void OAITableCellProperties::setContentAlignment(const QString &content_alignment) {
    m_content_alignment = content_alignment;
    m_content_alignment_isSet = true;
}

bool OAITableCellProperties::is_content_alignment_Set() const{
    return m_content_alignment_isSet;
}

bool OAITableCellProperties::is_content_alignment_Valid() const{
    return m_content_alignment_isValid;
}

OAITableCellBackgroundFill OAITableCellProperties::getTableCellBackgroundFill() const {
    return m_table_cell_background_fill;
}
void OAITableCellProperties::setTableCellBackgroundFill(const OAITableCellBackgroundFill &table_cell_background_fill) {
    m_table_cell_background_fill = table_cell_background_fill;
    m_table_cell_background_fill_isSet = true;
}

bool OAITableCellProperties::is_table_cell_background_fill_Set() const{
    return m_table_cell_background_fill_isSet;
}

bool OAITableCellProperties::is_table_cell_background_fill_Valid() const{
    return m_table_cell_background_fill_isValid;
}

bool OAITableCellProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_background_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
