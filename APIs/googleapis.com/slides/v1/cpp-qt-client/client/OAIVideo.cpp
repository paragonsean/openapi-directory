/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_video_properties_isSet = false;
    m_video_properties_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_video_properties_isValid = ::OpenAPI::fromJsonValue(m_video_properties, json[QString("videoProperties")]);
    m_video_properties_isSet = !json[QString("videoProperties")].isNull() && m_video_properties_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_video_properties.isSet()) {
        obj.insert(QString("videoProperties"), ::OpenAPI::toJsonValue(m_video_properties));
    }
    return obj;
}

QString OAIVideo::getId() const {
    return m_id;
}
void OAIVideo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideo::getSource() const {
    return m_source;
}
void OAIVideo::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIVideo::is_source_Set() const{
    return m_source_isSet;
}

bool OAIVideo::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIVideo::getUrl() const {
    return m_url;
}
void OAIVideo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo::is_url_Valid() const{
    return m_url_isValid;
}

OAIVideoProperties OAIVideo::getVideoProperties() const {
    return m_video_properties;
}
void OAIVideo::setVideoProperties(const OAIVideoProperties &video_properties) {
    m_video_properties = video_properties;
    m_video_properties_isSet = true;
}

bool OAIVideo::is_video_properties_Set() const{
    return m_video_properties_isSet;
}

bool OAIVideo::is_video_properties_Valid() const{
    return m_video_properties_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
