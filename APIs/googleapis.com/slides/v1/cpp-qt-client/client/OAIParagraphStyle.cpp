/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParagraphStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParagraphStyle::OAIParagraphStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParagraphStyle::OAIParagraphStyle() {
    this->initializeModel();
}

OAIParagraphStyle::~OAIParagraphStyle() {}

void OAIParagraphStyle::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_indent_end_isSet = false;
    m_indent_end_isValid = false;

    m_indent_first_line_isSet = false;
    m_indent_first_line_isValid = false;

    m_indent_start_isSet = false;
    m_indent_start_isValid = false;

    m_line_spacing_isSet = false;
    m_line_spacing_isValid = false;

    m_space_above_isSet = false;
    m_space_above_isValid = false;

    m_space_below_isSet = false;
    m_space_below_isValid = false;

    m_spacing_mode_isSet = false;
    m_spacing_mode_isValid = false;
}

void OAIParagraphStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParagraphStyle::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_indent_end_isValid = ::OpenAPI::fromJsonValue(m_indent_end, json[QString("indentEnd")]);
    m_indent_end_isSet = !json[QString("indentEnd")].isNull() && m_indent_end_isValid;

    m_indent_first_line_isValid = ::OpenAPI::fromJsonValue(m_indent_first_line, json[QString("indentFirstLine")]);
    m_indent_first_line_isSet = !json[QString("indentFirstLine")].isNull() && m_indent_first_line_isValid;

    m_indent_start_isValid = ::OpenAPI::fromJsonValue(m_indent_start, json[QString("indentStart")]);
    m_indent_start_isSet = !json[QString("indentStart")].isNull() && m_indent_start_isValid;

    m_line_spacing_isValid = ::OpenAPI::fromJsonValue(m_line_spacing, json[QString("lineSpacing")]);
    m_line_spacing_isSet = !json[QString("lineSpacing")].isNull() && m_line_spacing_isValid;

    m_space_above_isValid = ::OpenAPI::fromJsonValue(m_space_above, json[QString("spaceAbove")]);
    m_space_above_isSet = !json[QString("spaceAbove")].isNull() && m_space_above_isValid;

    m_space_below_isValid = ::OpenAPI::fromJsonValue(m_space_below, json[QString("spaceBelow")]);
    m_space_below_isSet = !json[QString("spaceBelow")].isNull() && m_space_below_isValid;

    m_spacing_mode_isValid = ::OpenAPI::fromJsonValue(m_spacing_mode, json[QString("spacingMode")]);
    m_spacing_mode_isSet = !json[QString("spacingMode")].isNull() && m_spacing_mode_isValid;
}

QString OAIParagraphStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParagraphStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_indent_end.isSet()) {
        obj.insert(QString("indentEnd"), ::OpenAPI::toJsonValue(m_indent_end));
    }
    if (m_indent_first_line.isSet()) {
        obj.insert(QString("indentFirstLine"), ::OpenAPI::toJsonValue(m_indent_first_line));
    }
    if (m_indent_start.isSet()) {
        obj.insert(QString("indentStart"), ::OpenAPI::toJsonValue(m_indent_start));
    }
    if (m_line_spacing_isSet) {
        obj.insert(QString("lineSpacing"), ::OpenAPI::toJsonValue(m_line_spacing));
    }
    if (m_space_above.isSet()) {
        obj.insert(QString("spaceAbove"), ::OpenAPI::toJsonValue(m_space_above));
    }
    if (m_space_below.isSet()) {
        obj.insert(QString("spaceBelow"), ::OpenAPI::toJsonValue(m_space_below));
    }
    if (m_spacing_mode_isSet) {
        obj.insert(QString("spacingMode"), ::OpenAPI::toJsonValue(m_spacing_mode));
    }
    return obj;
}

QString OAIParagraphStyle::getAlignment() const {
    return m_alignment;
}
void OAIParagraphStyle::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIParagraphStyle::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIParagraphStyle::is_alignment_Valid() const{
    return m_alignment_isValid;
}

QString OAIParagraphStyle::getDirection() const {
    return m_direction;
}
void OAIParagraphStyle::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIParagraphStyle::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIParagraphStyle::is_direction_Valid() const{
    return m_direction_isValid;
}

OAIDimension OAIParagraphStyle::getIndentEnd() const {
    return m_indent_end;
}
void OAIParagraphStyle::setIndentEnd(const OAIDimension &indent_end) {
    m_indent_end = indent_end;
    m_indent_end_isSet = true;
}

bool OAIParagraphStyle::is_indent_end_Set() const{
    return m_indent_end_isSet;
}

bool OAIParagraphStyle::is_indent_end_Valid() const{
    return m_indent_end_isValid;
}

OAIDimension OAIParagraphStyle::getIndentFirstLine() const {
    return m_indent_first_line;
}
void OAIParagraphStyle::setIndentFirstLine(const OAIDimension &indent_first_line) {
    m_indent_first_line = indent_first_line;
    m_indent_first_line_isSet = true;
}

bool OAIParagraphStyle::is_indent_first_line_Set() const{
    return m_indent_first_line_isSet;
}

bool OAIParagraphStyle::is_indent_first_line_Valid() const{
    return m_indent_first_line_isValid;
}

OAIDimension OAIParagraphStyle::getIndentStart() const {
    return m_indent_start;
}
void OAIParagraphStyle::setIndentStart(const OAIDimension &indent_start) {
    m_indent_start = indent_start;
    m_indent_start_isSet = true;
}

bool OAIParagraphStyle::is_indent_start_Set() const{
    return m_indent_start_isSet;
}

bool OAIParagraphStyle::is_indent_start_Valid() const{
    return m_indent_start_isValid;
}

float OAIParagraphStyle::getLineSpacing() const {
    return m_line_spacing;
}
void OAIParagraphStyle::setLineSpacing(const float &line_spacing) {
    m_line_spacing = line_spacing;
    m_line_spacing_isSet = true;
}

bool OAIParagraphStyle::is_line_spacing_Set() const{
    return m_line_spacing_isSet;
}

bool OAIParagraphStyle::is_line_spacing_Valid() const{
    return m_line_spacing_isValid;
}

OAIDimension OAIParagraphStyle::getSpaceAbove() const {
    return m_space_above;
}
void OAIParagraphStyle::setSpaceAbove(const OAIDimension &space_above) {
    m_space_above = space_above;
    m_space_above_isSet = true;
}

bool OAIParagraphStyle::is_space_above_Set() const{
    return m_space_above_isSet;
}

bool OAIParagraphStyle::is_space_above_Valid() const{
    return m_space_above_isValid;
}

OAIDimension OAIParagraphStyle::getSpaceBelow() const {
    return m_space_below;
}
void OAIParagraphStyle::setSpaceBelow(const OAIDimension &space_below) {
    m_space_below = space_below;
    m_space_below_isSet = true;
}

bool OAIParagraphStyle::is_space_below_Set() const{
    return m_space_below_isSet;
}

bool OAIParagraphStyle::is_space_below_Valid() const{
    return m_space_below_isValid;
}

QString OAIParagraphStyle::getSpacingMode() const {
    return m_spacing_mode;
}
void OAIParagraphStyle::setSpacingMode(const QString &spacing_mode) {
    m_spacing_mode = spacing_mode;
    m_spacing_mode_isSet = true;
}

bool OAIParagraphStyle::is_spacing_mode_Set() const{
    return m_spacing_mode_isSet;
}

bool OAIParagraphStyle::is_spacing_mode_Valid() const{
    return m_spacing_mode_isValid;
}

bool OAIParagraphStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_first_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_spacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_above.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_below.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spacing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParagraphStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
