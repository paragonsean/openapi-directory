/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlideProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlideProperties::OAISlideProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlideProperties::OAISlideProperties() {
    this->initializeModel();
}

OAISlideProperties::~OAISlideProperties() {}

void OAISlideProperties::initializeModel() {

    m_is_skipped_isSet = false;
    m_is_skipped_isValid = false;

    m_layout_object_id_isSet = false;
    m_layout_object_id_isValid = false;

    m_master_object_id_isSet = false;
    m_master_object_id_isValid = false;

    m_notes_page_isSet = false;
    m_notes_page_isValid = false;
}

void OAISlideProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlideProperties::fromJsonObject(QJsonObject json) {

    m_is_skipped_isValid = ::OpenAPI::fromJsonValue(m_is_skipped, json[QString("isSkipped")]);
    m_is_skipped_isSet = !json[QString("isSkipped")].isNull() && m_is_skipped_isValid;

    m_layout_object_id_isValid = ::OpenAPI::fromJsonValue(m_layout_object_id, json[QString("layoutObjectId")]);
    m_layout_object_id_isSet = !json[QString("layoutObjectId")].isNull() && m_layout_object_id_isValid;

    m_master_object_id_isValid = ::OpenAPI::fromJsonValue(m_master_object_id, json[QString("masterObjectId")]);
    m_master_object_id_isSet = !json[QString("masterObjectId")].isNull() && m_master_object_id_isValid;

    m_notes_page_isValid = ::OpenAPI::fromJsonValue(m_notes_page, json[QString("notesPage")]);
    m_notes_page_isSet = !json[QString("notesPage")].isNull() && m_notes_page_isValid;
}

QString OAISlideProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlideProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_is_skipped_isSet) {
        obj.insert(QString("isSkipped"), ::OpenAPI::toJsonValue(m_is_skipped));
    }
    if (m_layout_object_id_isSet) {
        obj.insert(QString("layoutObjectId"), ::OpenAPI::toJsonValue(m_layout_object_id));
    }
    if (m_master_object_id_isSet) {
        obj.insert(QString("masterObjectId"), ::OpenAPI::toJsonValue(m_master_object_id));
    }
    if (m_notes_page.isSet()) {
        obj.insert(QString("notesPage"), ::OpenAPI::toJsonValue(m_notes_page));
    }
    return obj;
}

bool OAISlideProperties::isIsSkipped() const {
    return m_is_skipped;
}
void OAISlideProperties::setIsSkipped(const bool &is_skipped) {
    m_is_skipped = is_skipped;
    m_is_skipped_isSet = true;
}

bool OAISlideProperties::is_is_skipped_Set() const{
    return m_is_skipped_isSet;
}

bool OAISlideProperties::is_is_skipped_Valid() const{
    return m_is_skipped_isValid;
}

QString OAISlideProperties::getLayoutObjectId() const {
    return m_layout_object_id;
}
void OAISlideProperties::setLayoutObjectId(const QString &layout_object_id) {
    m_layout_object_id = layout_object_id;
    m_layout_object_id_isSet = true;
}

bool OAISlideProperties::is_layout_object_id_Set() const{
    return m_layout_object_id_isSet;
}

bool OAISlideProperties::is_layout_object_id_Valid() const{
    return m_layout_object_id_isValid;
}

QString OAISlideProperties::getMasterObjectId() const {
    return m_master_object_id;
}
void OAISlideProperties::setMasterObjectId(const QString &master_object_id) {
    m_master_object_id = master_object_id;
    m_master_object_id_isSet = true;
}

bool OAISlideProperties::is_master_object_id_Set() const{
    return m_master_object_id_isSet;
}

bool OAISlideProperties::is_master_object_id_Valid() const{
    return m_master_object_id_isValid;
}

OAIPage OAISlideProperties::getNotesPage() const {
    return m_notes_page;
}
void OAISlideProperties::setNotesPage(const OAIPage &notes_page) {
    m_notes_page = notes_page;
    m_notes_page_isSet = true;
}

bool OAISlideProperties::is_notes_page_Set() const{
    return m_notes_page_isSet;
}

bool OAISlideProperties::is_notes_page_Valid() const{
    return m_notes_page_isValid;
}

bool OAISlideProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_page.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlideProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
