/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICropProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICropProperties::OAICropProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICropProperties::OAICropProperties() {
    this->initializeModel();
}

OAICropProperties::~OAICropProperties() {}

void OAICropProperties::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_bottom_offset_isSet = false;
    m_bottom_offset_isValid = false;

    m_left_offset_isSet = false;
    m_left_offset_isValid = false;

    m_right_offset_isSet = false;
    m_right_offset_isValid = false;

    m_top_offset_isSet = false;
    m_top_offset_isValid = false;
}

void OAICropProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICropProperties::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_bottom_offset_isValid = ::OpenAPI::fromJsonValue(m_bottom_offset, json[QString("bottomOffset")]);
    m_bottom_offset_isSet = !json[QString("bottomOffset")].isNull() && m_bottom_offset_isValid;

    m_left_offset_isValid = ::OpenAPI::fromJsonValue(m_left_offset, json[QString("leftOffset")]);
    m_left_offset_isSet = !json[QString("leftOffset")].isNull() && m_left_offset_isValid;

    m_right_offset_isValid = ::OpenAPI::fromJsonValue(m_right_offset, json[QString("rightOffset")]);
    m_right_offset_isSet = !json[QString("rightOffset")].isNull() && m_right_offset_isValid;

    m_top_offset_isValid = ::OpenAPI::fromJsonValue(m_top_offset, json[QString("topOffset")]);
    m_top_offset_isSet = !json[QString("topOffset")].isNull() && m_top_offset_isValid;
}

QString OAICropProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICropProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_bottom_offset_isSet) {
        obj.insert(QString("bottomOffset"), ::OpenAPI::toJsonValue(m_bottom_offset));
    }
    if (m_left_offset_isSet) {
        obj.insert(QString("leftOffset"), ::OpenAPI::toJsonValue(m_left_offset));
    }
    if (m_right_offset_isSet) {
        obj.insert(QString("rightOffset"), ::OpenAPI::toJsonValue(m_right_offset));
    }
    if (m_top_offset_isSet) {
        obj.insert(QString("topOffset"), ::OpenAPI::toJsonValue(m_top_offset));
    }
    return obj;
}

float OAICropProperties::getAngle() const {
    return m_angle;
}
void OAICropProperties::setAngle(const float &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAICropProperties::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAICropProperties::is_angle_Valid() const{
    return m_angle_isValid;
}

float OAICropProperties::getBottomOffset() const {
    return m_bottom_offset;
}
void OAICropProperties::setBottomOffset(const float &bottom_offset) {
    m_bottom_offset = bottom_offset;
    m_bottom_offset_isSet = true;
}

bool OAICropProperties::is_bottom_offset_Set() const{
    return m_bottom_offset_isSet;
}

bool OAICropProperties::is_bottom_offset_Valid() const{
    return m_bottom_offset_isValid;
}

float OAICropProperties::getLeftOffset() const {
    return m_left_offset;
}
void OAICropProperties::setLeftOffset(const float &left_offset) {
    m_left_offset = left_offset;
    m_left_offset_isSet = true;
}

bool OAICropProperties::is_left_offset_Set() const{
    return m_left_offset_isSet;
}

bool OAICropProperties::is_left_offset_Valid() const{
    return m_left_offset_isValid;
}

float OAICropProperties::getRightOffset() const {
    return m_right_offset;
}
void OAICropProperties::setRightOffset(const float &right_offset) {
    m_right_offset = right_offset;
    m_right_offset_isSet = true;
}

bool OAICropProperties::is_right_offset_Set() const{
    return m_right_offset_isSet;
}

bool OAICropProperties::is_right_offset_Valid() const{
    return m_right_offset_isValid;
}

float OAICropProperties::getTopOffset() const {
    return m_top_offset;
}
void OAICropProperties::setTopOffset(const float &top_offset) {
    m_top_offset = top_offset;
    m_top_offset_isSet = true;
}

bool OAICropProperties::is_top_offset_Set() const{
    return m_top_offset_isSet;
}

bool OAICropProperties::is_top_offset_Valid() const{
    return m_top_offset_isValid;
}

bool OAICropProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICropProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
