/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateParagraphBulletsRequest.h
 *
 * Creates bullets for all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
 */

#ifndef OAICreateParagraphBulletsRequest_H
#define OAICreateParagraphBulletsRequest_H

#include <QJsonObject>

#include "OAIRange.h"
#include "OAITableCellLocation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITableCellLocation;
class OAIRange;

class OAICreateParagraphBulletsRequest : public OAIObject {
public:
    OAICreateParagraphBulletsRequest();
    OAICreateParagraphBulletsRequest(QString json);
    ~OAICreateParagraphBulletsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBulletPreset() const;
    void setBulletPreset(const QString &bullet_preset);
    bool is_bullet_preset_Set() const;
    bool is_bullet_preset_Valid() const;

    OAITableCellLocation getCellLocation() const;
    void setCellLocation(const OAITableCellLocation &cell_location);
    bool is_cell_location_Set() const;
    bool is_cell_location_Valid() const;

    QString getObjectId() const;
    void setObjectId(const QString &object_id);
    bool is_object_id_Set() const;
    bool is_object_id_Valid() const;

    OAIRange getTextRange() const;
    void setTextRange(const OAIRange &text_range);
    bool is_text_range_Set() const;
    bool is_text_range_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bullet_preset;
    bool m_bullet_preset_isSet;
    bool m_bullet_preset_isValid;

    OAITableCellLocation m_cell_location;
    bool m_cell_location_isSet;
    bool m_cell_location_isValid;

    QString m_object_id;
    bool m_object_id_isSet;
    bool m_object_id_isValid;

    OAIRange m_text_range;
    bool m_text_range_isSet;
    bool m_text_range_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateParagraphBulletsRequest)

#endif // OAICreateParagraphBulletsRequest_H
