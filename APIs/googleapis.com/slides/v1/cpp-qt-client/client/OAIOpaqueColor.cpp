/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpaqueColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpaqueColor::OAIOpaqueColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpaqueColor::OAIOpaqueColor() {
    this->initializeModel();
}

OAIOpaqueColor::~OAIOpaqueColor() {}

void OAIOpaqueColor::initializeModel() {

    m_rgb_color_isSet = false;
    m_rgb_color_isValid = false;

    m_theme_color_isSet = false;
    m_theme_color_isValid = false;
}

void OAIOpaqueColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpaqueColor::fromJsonObject(QJsonObject json) {

    m_rgb_color_isValid = ::OpenAPI::fromJsonValue(m_rgb_color, json[QString("rgbColor")]);
    m_rgb_color_isSet = !json[QString("rgbColor")].isNull() && m_rgb_color_isValid;

    m_theme_color_isValid = ::OpenAPI::fromJsonValue(m_theme_color, json[QString("themeColor")]);
    m_theme_color_isSet = !json[QString("themeColor")].isNull() && m_theme_color_isValid;
}

QString OAIOpaqueColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpaqueColor::asJsonObject() const {
    QJsonObject obj;
    if (m_rgb_color.isSet()) {
        obj.insert(QString("rgbColor"), ::OpenAPI::toJsonValue(m_rgb_color));
    }
    if (m_theme_color_isSet) {
        obj.insert(QString("themeColor"), ::OpenAPI::toJsonValue(m_theme_color));
    }
    return obj;
}

OAIRgbColor OAIOpaqueColor::getRgbColor() const {
    return m_rgb_color;
}
void OAIOpaqueColor::setRgbColor(const OAIRgbColor &rgb_color) {
    m_rgb_color = rgb_color;
    m_rgb_color_isSet = true;
}

bool OAIOpaqueColor::is_rgb_color_Set() const{
    return m_rgb_color_isSet;
}

bool OAIOpaqueColor::is_rgb_color_Valid() const{
    return m_rgb_color_isValid;
}

QString OAIOpaqueColor::getThemeColor() const {
    return m_theme_color;
}
void OAIOpaqueColor::setThemeColor(const QString &theme_color) {
    m_theme_color = theme_color;
    m_theme_color_isSet = true;
}

bool OAIOpaqueColor::is_theme_color_Set() const{
    return m_theme_color_isSet;
}

bool OAIOpaqueColor::is_theme_color_Valid() const{
    return m_theme_color_isValid;
}

bool OAIOpaqueColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rgb_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpaqueColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
