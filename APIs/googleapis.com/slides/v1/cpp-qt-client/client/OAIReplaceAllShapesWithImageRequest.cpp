/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplaceAllShapesWithImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplaceAllShapesWithImageRequest::OAIReplaceAllShapesWithImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplaceAllShapesWithImageRequest::OAIReplaceAllShapesWithImageRequest() {
    this->initializeModel();
}

OAIReplaceAllShapesWithImageRequest::~OAIReplaceAllShapesWithImageRequest() {}

void OAIReplaceAllShapesWithImageRequest::initializeModel() {

    m_contains_text_isSet = false;
    m_contains_text_isValid = false;

    m_image_replace_method_isSet = false;
    m_image_replace_method_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_page_object_ids_isSet = false;
    m_page_object_ids_isValid = false;

    m_replace_method_isSet = false;
    m_replace_method_isValid = false;
}

void OAIReplaceAllShapesWithImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplaceAllShapesWithImageRequest::fromJsonObject(QJsonObject json) {

    m_contains_text_isValid = ::OpenAPI::fromJsonValue(m_contains_text, json[QString("containsText")]);
    m_contains_text_isSet = !json[QString("containsText")].isNull() && m_contains_text_isValid;

    m_image_replace_method_isValid = ::OpenAPI::fromJsonValue(m_image_replace_method, json[QString("imageReplaceMethod")]);
    m_image_replace_method_isSet = !json[QString("imageReplaceMethod")].isNull() && m_image_replace_method_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_page_object_ids_isValid = ::OpenAPI::fromJsonValue(m_page_object_ids, json[QString("pageObjectIds")]);
    m_page_object_ids_isSet = !json[QString("pageObjectIds")].isNull() && m_page_object_ids_isValid;

    m_replace_method_isValid = ::OpenAPI::fromJsonValue(m_replace_method, json[QString("replaceMethod")]);
    m_replace_method_isSet = !json[QString("replaceMethod")].isNull() && m_replace_method_isValid;
}

QString OAIReplaceAllShapesWithImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplaceAllShapesWithImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_text.isSet()) {
        obj.insert(QString("containsText"), ::OpenAPI::toJsonValue(m_contains_text));
    }
    if (m_image_replace_method_isSet) {
        obj.insert(QString("imageReplaceMethod"), ::OpenAPI::toJsonValue(m_image_replace_method));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_page_object_ids.size() > 0) {
        obj.insert(QString("pageObjectIds"), ::OpenAPI::toJsonValue(m_page_object_ids));
    }
    if (m_replace_method_isSet) {
        obj.insert(QString("replaceMethod"), ::OpenAPI::toJsonValue(m_replace_method));
    }
    return obj;
}

OAISubstringMatchCriteria OAIReplaceAllShapesWithImageRequest::getContainsText() const {
    return m_contains_text;
}
void OAIReplaceAllShapesWithImageRequest::setContainsText(const OAISubstringMatchCriteria &contains_text) {
    m_contains_text = contains_text;
    m_contains_text_isSet = true;
}

bool OAIReplaceAllShapesWithImageRequest::is_contains_text_Set() const{
    return m_contains_text_isSet;
}

bool OAIReplaceAllShapesWithImageRequest::is_contains_text_Valid() const{
    return m_contains_text_isValid;
}

QString OAIReplaceAllShapesWithImageRequest::getImageReplaceMethod() const {
    return m_image_replace_method;
}
void OAIReplaceAllShapesWithImageRequest::setImageReplaceMethod(const QString &image_replace_method) {
    m_image_replace_method = image_replace_method;
    m_image_replace_method_isSet = true;
}

bool OAIReplaceAllShapesWithImageRequest::is_image_replace_method_Set() const{
    return m_image_replace_method_isSet;
}

bool OAIReplaceAllShapesWithImageRequest::is_image_replace_method_Valid() const{
    return m_image_replace_method_isValid;
}

QString OAIReplaceAllShapesWithImageRequest::getImageUrl() const {
    return m_image_url;
}
void OAIReplaceAllShapesWithImageRequest::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIReplaceAllShapesWithImageRequest::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIReplaceAllShapesWithImageRequest::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QList<QString> OAIReplaceAllShapesWithImageRequest::getPageObjectIds() const {
    return m_page_object_ids;
}
void OAIReplaceAllShapesWithImageRequest::setPageObjectIds(const QList<QString> &page_object_ids) {
    m_page_object_ids = page_object_ids;
    m_page_object_ids_isSet = true;
}

bool OAIReplaceAllShapesWithImageRequest::is_page_object_ids_Set() const{
    return m_page_object_ids_isSet;
}

bool OAIReplaceAllShapesWithImageRequest::is_page_object_ids_Valid() const{
    return m_page_object_ids_isValid;
}

QString OAIReplaceAllShapesWithImageRequest::getReplaceMethod() const {
    return m_replace_method;
}
void OAIReplaceAllShapesWithImageRequest::setReplaceMethod(const QString &replace_method) {
    m_replace_method = replace_method;
    m_replace_method_isSet = true;
}

bool OAIReplaceAllShapesWithImageRequest::is_replace_method_Set() const{
    return m_replace_method_isSet;
}

bool OAIReplaceAllShapesWithImageRequest::is_replace_method_Valid() const{
    return m_replace_method_isValid;
}

bool OAIReplaceAllShapesWithImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_replace_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplaceAllShapesWithImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
