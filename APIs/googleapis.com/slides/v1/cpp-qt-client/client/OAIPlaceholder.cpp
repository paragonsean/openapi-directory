/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceholder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceholder::OAIPlaceholder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceholder::OAIPlaceholder() {
    this->initializeModel();
}

OAIPlaceholder::~OAIPlaceholder() {}

void OAIPlaceholder::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_parent_object_id_isSet = false;
    m_parent_object_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlaceholder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceholder::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_parent_object_id_isValid = ::OpenAPI::fromJsonValue(m_parent_object_id, json[QString("parentObjectId")]);
    m_parent_object_id_isSet = !json[QString("parentObjectId")].isNull() && m_parent_object_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlaceholder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceholder::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_parent_object_id_isSet) {
        obj.insert(QString("parentObjectId"), ::OpenAPI::toJsonValue(m_parent_object_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPlaceholder::getIndex() const {
    return m_index;
}
void OAIPlaceholder::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIPlaceholder::is_index_Set() const{
    return m_index_isSet;
}

bool OAIPlaceholder::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIPlaceholder::getParentObjectId() const {
    return m_parent_object_id;
}
void OAIPlaceholder::setParentObjectId(const QString &parent_object_id) {
    m_parent_object_id = parent_object_id;
    m_parent_object_id_isSet = true;
}

bool OAIPlaceholder::is_parent_object_id_Set() const{
    return m_parent_object_id_isSet;
}

bool OAIPlaceholder::is_parent_object_id_Valid() const{
    return m_parent_object_id_isValid;
}

QString OAIPlaceholder::getType() const {
    return m_type;
}
void OAIPlaceholder::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaceholder::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaceholder::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlaceholder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceholder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
