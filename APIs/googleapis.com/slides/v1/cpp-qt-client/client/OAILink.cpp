/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILink::OAILink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILink::OAILink() {
    this->initializeModel();
}

OAILink::~OAILink() {}

void OAILink::initializeModel() {

    m_page_object_id_isSet = false;
    m_page_object_id_isValid = false;

    m_relative_link_isSet = false;
    m_relative_link_isValid = false;

    m_slide_index_isSet = false;
    m_slide_index_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILink::fromJsonObject(QJsonObject json) {

    m_page_object_id_isValid = ::OpenAPI::fromJsonValue(m_page_object_id, json[QString("pageObjectId")]);
    m_page_object_id_isSet = !json[QString("pageObjectId")].isNull() && m_page_object_id_isValid;

    m_relative_link_isValid = ::OpenAPI::fromJsonValue(m_relative_link, json[QString("relativeLink")]);
    m_relative_link_isSet = !json[QString("relativeLink")].isNull() && m_relative_link_isValid;

    m_slide_index_isValid = ::OpenAPI::fromJsonValue(m_slide_index, json[QString("slideIndex")]);
    m_slide_index_isSet = !json[QString("slideIndex")].isNull() && m_slide_index_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILink::asJsonObject() const {
    QJsonObject obj;
    if (m_page_object_id_isSet) {
        obj.insert(QString("pageObjectId"), ::OpenAPI::toJsonValue(m_page_object_id));
    }
    if (m_relative_link_isSet) {
        obj.insert(QString("relativeLink"), ::OpenAPI::toJsonValue(m_relative_link));
    }
    if (m_slide_index_isSet) {
        obj.insert(QString("slideIndex"), ::OpenAPI::toJsonValue(m_slide_index));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILink::getPageObjectId() const {
    return m_page_object_id;
}
void OAILink::setPageObjectId(const QString &page_object_id) {
    m_page_object_id = page_object_id;
    m_page_object_id_isSet = true;
}

bool OAILink::is_page_object_id_Set() const{
    return m_page_object_id_isSet;
}

bool OAILink::is_page_object_id_Valid() const{
    return m_page_object_id_isValid;
}

QString OAILink::getRelativeLink() const {
    return m_relative_link;
}
void OAILink::setRelativeLink(const QString &relative_link) {
    m_relative_link = relative_link;
    m_relative_link_isSet = true;
}

bool OAILink::is_relative_link_Set() const{
    return m_relative_link_isSet;
}

bool OAILink::is_relative_link_Valid() const{
    return m_relative_link_isValid;
}

qint32 OAILink::getSlideIndex() const {
    return m_slide_index;
}
void OAILink::setSlideIndex(const qint32 &slide_index) {
    m_slide_index = slide_index;
    m_slide_index_isSet = true;
}

bool OAILink::is_slide_index_Set() const{
    return m_slide_index_isSet;
}

bool OAILink::is_slide_index_Valid() const{
    return m_slide_index_isValid;
}

QString OAILink::getUrl() const {
    return m_url;
}
void OAILink::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILink::is_url_Set() const{
    return m_url_isSet;
}

bool OAILink::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
