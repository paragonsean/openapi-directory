/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplaceImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplaceImageRequest::OAIReplaceImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplaceImageRequest::OAIReplaceImageRequest() {
    this->initializeModel();
}

OAIReplaceImageRequest::~OAIReplaceImageRequest() {}

void OAIReplaceImageRequest::initializeModel() {

    m_image_object_id_isSet = false;
    m_image_object_id_isValid = false;

    m_image_replace_method_isSet = false;
    m_image_replace_method_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIReplaceImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplaceImageRequest::fromJsonObject(QJsonObject json) {

    m_image_object_id_isValid = ::OpenAPI::fromJsonValue(m_image_object_id, json[QString("imageObjectId")]);
    m_image_object_id_isSet = !json[QString("imageObjectId")].isNull() && m_image_object_id_isValid;

    m_image_replace_method_isValid = ::OpenAPI::fromJsonValue(m_image_replace_method, json[QString("imageReplaceMethod")]);
    m_image_replace_method_isSet = !json[QString("imageReplaceMethod")].isNull() && m_image_replace_method_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIReplaceImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplaceImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_image_object_id_isSet) {
        obj.insert(QString("imageObjectId"), ::OpenAPI::toJsonValue(m_image_object_id));
    }
    if (m_image_replace_method_isSet) {
        obj.insert(QString("imageReplaceMethod"), ::OpenAPI::toJsonValue(m_image_replace_method));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIReplaceImageRequest::getImageObjectId() const {
    return m_image_object_id;
}
void OAIReplaceImageRequest::setImageObjectId(const QString &image_object_id) {
    m_image_object_id = image_object_id;
    m_image_object_id_isSet = true;
}

bool OAIReplaceImageRequest::is_image_object_id_Set() const{
    return m_image_object_id_isSet;
}

bool OAIReplaceImageRequest::is_image_object_id_Valid() const{
    return m_image_object_id_isValid;
}

QString OAIReplaceImageRequest::getImageReplaceMethod() const {
    return m_image_replace_method;
}
void OAIReplaceImageRequest::setImageReplaceMethod(const QString &image_replace_method) {
    m_image_replace_method = image_replace_method;
    m_image_replace_method_isSet = true;
}

bool OAIReplaceImageRequest::is_image_replace_method_Set() const{
    return m_image_replace_method_isSet;
}

bool OAIReplaceImageRequest::is_image_replace_method_Valid() const{
    return m_image_replace_method_isValid;
}

QString OAIReplaceImageRequest::getUrl() const {
    return m_url;
}
void OAIReplaceImageRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReplaceImageRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReplaceImageRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIReplaceImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_replace_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplaceImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
