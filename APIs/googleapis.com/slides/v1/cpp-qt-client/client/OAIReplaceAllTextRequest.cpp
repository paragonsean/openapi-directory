/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplaceAllTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplaceAllTextRequest::OAIReplaceAllTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplaceAllTextRequest::OAIReplaceAllTextRequest() {
    this->initializeModel();
}

OAIReplaceAllTextRequest::~OAIReplaceAllTextRequest() {}

void OAIReplaceAllTextRequest::initializeModel() {

    m_contains_text_isSet = false;
    m_contains_text_isValid = false;

    m_page_object_ids_isSet = false;
    m_page_object_ids_isValid = false;

    m_replace_text_isSet = false;
    m_replace_text_isValid = false;
}

void OAIReplaceAllTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplaceAllTextRequest::fromJsonObject(QJsonObject json) {

    m_contains_text_isValid = ::OpenAPI::fromJsonValue(m_contains_text, json[QString("containsText")]);
    m_contains_text_isSet = !json[QString("containsText")].isNull() && m_contains_text_isValid;

    m_page_object_ids_isValid = ::OpenAPI::fromJsonValue(m_page_object_ids, json[QString("pageObjectIds")]);
    m_page_object_ids_isSet = !json[QString("pageObjectIds")].isNull() && m_page_object_ids_isValid;

    m_replace_text_isValid = ::OpenAPI::fromJsonValue(m_replace_text, json[QString("replaceText")]);
    m_replace_text_isSet = !json[QString("replaceText")].isNull() && m_replace_text_isValid;
}

QString OAIReplaceAllTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplaceAllTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_text.isSet()) {
        obj.insert(QString("containsText"), ::OpenAPI::toJsonValue(m_contains_text));
    }
    if (m_page_object_ids.size() > 0) {
        obj.insert(QString("pageObjectIds"), ::OpenAPI::toJsonValue(m_page_object_ids));
    }
    if (m_replace_text_isSet) {
        obj.insert(QString("replaceText"), ::OpenAPI::toJsonValue(m_replace_text));
    }
    return obj;
}

OAISubstringMatchCriteria OAIReplaceAllTextRequest::getContainsText() const {
    return m_contains_text;
}
void OAIReplaceAllTextRequest::setContainsText(const OAISubstringMatchCriteria &contains_text) {
    m_contains_text = contains_text;
    m_contains_text_isSet = true;
}

bool OAIReplaceAllTextRequest::is_contains_text_Set() const{
    return m_contains_text_isSet;
}

bool OAIReplaceAllTextRequest::is_contains_text_Valid() const{
    return m_contains_text_isValid;
}

QList<QString> OAIReplaceAllTextRequest::getPageObjectIds() const {
    return m_page_object_ids;
}
void OAIReplaceAllTextRequest::setPageObjectIds(const QList<QString> &page_object_ids) {
    m_page_object_ids = page_object_ids;
    m_page_object_ids_isSet = true;
}

bool OAIReplaceAllTextRequest::is_page_object_ids_Set() const{
    return m_page_object_ids_isSet;
}

bool OAIReplaceAllTextRequest::is_page_object_ids_Valid() const{
    return m_page_object_ids_isValid;
}

QString OAIReplaceAllTextRequest::getReplaceText() const {
    return m_replace_text;
}
void OAIReplaceAllTextRequest::setReplaceText(const QString &replace_text) {
    m_replace_text = replace_text;
    m_replace_text_isSet = true;
}

bool OAIReplaceAllTextRequest::is_replace_text_Set() const{
    return m_replace_text_isSet;
}

bool OAIReplaceAllTextRequest::is_replace_text_Valid() const{
    return m_replace_text_isValid;
}

bool OAIReplaceAllTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplaceAllTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
