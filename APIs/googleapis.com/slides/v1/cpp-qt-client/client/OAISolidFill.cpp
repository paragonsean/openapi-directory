/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolidFill.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolidFill::OAISolidFill(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolidFill::OAISolidFill() {
    this->initializeModel();
}

OAISolidFill::~OAISolidFill() {}

void OAISolidFill::initializeModel() {

    m_alpha_isSet = false;
    m_alpha_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAISolidFill::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolidFill::fromJsonObject(QJsonObject json) {

    m_alpha_isValid = ::OpenAPI::fromJsonValue(m_alpha, json[QString("alpha")]);
    m_alpha_isSet = !json[QString("alpha")].isNull() && m_alpha_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;
}

QString OAISolidFill::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolidFill::asJsonObject() const {
    QJsonObject obj;
    if (m_alpha_isSet) {
        obj.insert(QString("alpha"), ::OpenAPI::toJsonValue(m_alpha));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

float OAISolidFill::getAlpha() const {
    return m_alpha;
}
void OAISolidFill::setAlpha(const float &alpha) {
    m_alpha = alpha;
    m_alpha_isSet = true;
}

bool OAISolidFill::is_alpha_Set() const{
    return m_alpha_isSet;
}

bool OAISolidFill::is_alpha_Valid() const{
    return m_alpha_isValid;
}

OAIOpaqueColor OAISolidFill::getColor() const {
    return m_color;
}
void OAISolidFill::setColor(const OAIOpaqueColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAISolidFill::is_color_Set() const{
    return m_color_isSet;
}

bool OAISolidFill::is_color_Valid() const{
    return m_color_isValid;
}

bool OAISolidFill::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolidFill::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
