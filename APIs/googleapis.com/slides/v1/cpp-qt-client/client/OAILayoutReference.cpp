/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayoutReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayoutReference::OAILayoutReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayoutReference::OAILayoutReference() {
    this->initializeModel();
}

OAILayoutReference::~OAILayoutReference() {}

void OAILayoutReference::initializeModel() {

    m_layout_id_isSet = false;
    m_layout_id_isValid = false;

    m_predefined_layout_isSet = false;
    m_predefined_layout_isValid = false;
}

void OAILayoutReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayoutReference::fromJsonObject(QJsonObject json) {

    m_layout_id_isValid = ::OpenAPI::fromJsonValue(m_layout_id, json[QString("layoutId")]);
    m_layout_id_isSet = !json[QString("layoutId")].isNull() && m_layout_id_isValid;

    m_predefined_layout_isValid = ::OpenAPI::fromJsonValue(m_predefined_layout, json[QString("predefinedLayout")]);
    m_predefined_layout_isSet = !json[QString("predefinedLayout")].isNull() && m_predefined_layout_isValid;
}

QString OAILayoutReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayoutReference::asJsonObject() const {
    QJsonObject obj;
    if (m_layout_id_isSet) {
        obj.insert(QString("layoutId"), ::OpenAPI::toJsonValue(m_layout_id));
    }
    if (m_predefined_layout_isSet) {
        obj.insert(QString("predefinedLayout"), ::OpenAPI::toJsonValue(m_predefined_layout));
    }
    return obj;
}

QString OAILayoutReference::getLayoutId() const {
    return m_layout_id;
}
void OAILayoutReference::setLayoutId(const QString &layout_id) {
    m_layout_id = layout_id;
    m_layout_id_isSet = true;
}

bool OAILayoutReference::is_layout_id_Set() const{
    return m_layout_id_isSet;
}

bool OAILayoutReference::is_layout_id_Valid() const{
    return m_layout_id_isValid;
}

QString OAILayoutReference::getPredefinedLayout() const {
    return m_predefined_layout;
}
void OAILayoutReference::setPredefinedLayout(const QString &predefined_layout) {
    m_predefined_layout = predefined_layout;
    m_predefined_layout_isSet = true;
}

bool OAILayoutReference::is_predefined_layout_Set() const{
    return m_predefined_layout_isSet;
}

bool OAILayoutReference::is_predefined_layout_Valid() const{
    return m_predefined_layout_isValid;
}

bool OAILayoutReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_layout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayoutReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
