/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutline::OAIOutline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutline::OAIOutline() {
    this->initializeModel();
}

OAIOutline::~OAIOutline() {}

void OAIOutline::initializeModel() {

    m_dash_style_isSet = false;
    m_dash_style_isValid = false;

    m_outline_fill_isSet = false;
    m_outline_fill_isValid = false;

    m_property_state_isSet = false;
    m_property_state_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIOutline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutline::fromJsonObject(QJsonObject json) {

    m_dash_style_isValid = ::OpenAPI::fromJsonValue(m_dash_style, json[QString("dashStyle")]);
    m_dash_style_isSet = !json[QString("dashStyle")].isNull() && m_dash_style_isValid;

    m_outline_fill_isValid = ::OpenAPI::fromJsonValue(m_outline_fill, json[QString("outlineFill")]);
    m_outline_fill_isSet = !json[QString("outlineFill")].isNull() && m_outline_fill_isValid;

    m_property_state_isValid = ::OpenAPI::fromJsonValue(m_property_state, json[QString("propertyState")]);
    m_property_state_isSet = !json[QString("propertyState")].isNull() && m_property_state_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIOutline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutline::asJsonObject() const {
    QJsonObject obj;
    if (m_dash_style_isSet) {
        obj.insert(QString("dashStyle"), ::OpenAPI::toJsonValue(m_dash_style));
    }
    if (m_outline_fill.isSet()) {
        obj.insert(QString("outlineFill"), ::OpenAPI::toJsonValue(m_outline_fill));
    }
    if (m_property_state_isSet) {
        obj.insert(QString("propertyState"), ::OpenAPI::toJsonValue(m_property_state));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIOutline::getDashStyle() const {
    return m_dash_style;
}
void OAIOutline::setDashStyle(const QString &dash_style) {
    m_dash_style = dash_style;
    m_dash_style_isSet = true;
}

bool OAIOutline::is_dash_style_Set() const{
    return m_dash_style_isSet;
}

bool OAIOutline::is_dash_style_Valid() const{
    return m_dash_style_isValid;
}

OAIOutlineFill OAIOutline::getOutlineFill() const {
    return m_outline_fill;
}
void OAIOutline::setOutlineFill(const OAIOutlineFill &outline_fill) {
    m_outline_fill = outline_fill;
    m_outline_fill_isSet = true;
}

bool OAIOutline::is_outline_fill_Set() const{
    return m_outline_fill_isSet;
}

bool OAIOutline::is_outline_fill_Valid() const{
    return m_outline_fill_isValid;
}

QString OAIOutline::getPropertyState() const {
    return m_property_state;
}
void OAIOutline::setPropertyState(const QString &property_state) {
    m_property_state = property_state;
    m_property_state_isSet = true;
}

bool OAIOutline::is_property_state_Set() const{
    return m_property_state_isSet;
}

bool OAIOutline::is_property_state_Valid() const{
    return m_property_state_isValid;
}

OAIDimension OAIOutline::getWeight() const {
    return m_weight;
}
void OAIOutline::setWeight(const OAIDimension &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIOutline::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIOutline::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIOutline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dash_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
