/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellLocation::OAITableCellLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellLocation::OAITableCellLocation() {
    this->initializeModel();
}

OAITableCellLocation::~OAITableCellLocation() {}

void OAITableCellLocation::initializeModel() {

    m_column_index_isSet = false;
    m_column_index_isValid = false;

    m_row_index_isSet = false;
    m_row_index_isValid = false;
}

void OAITableCellLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellLocation::fromJsonObject(QJsonObject json) {

    m_column_index_isValid = ::OpenAPI::fromJsonValue(m_column_index, json[QString("columnIndex")]);
    m_column_index_isSet = !json[QString("columnIndex")].isNull() && m_column_index_isValid;

    m_row_index_isValid = ::OpenAPI::fromJsonValue(m_row_index, json[QString("rowIndex")]);
    m_row_index_isSet = !json[QString("rowIndex")].isNull() && m_row_index_isValid;
}

QString OAITableCellLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_index_isSet) {
        obj.insert(QString("columnIndex"), ::OpenAPI::toJsonValue(m_column_index));
    }
    if (m_row_index_isSet) {
        obj.insert(QString("rowIndex"), ::OpenAPI::toJsonValue(m_row_index));
    }
    return obj;
}

qint32 OAITableCellLocation::getColumnIndex() const {
    return m_column_index;
}
void OAITableCellLocation::setColumnIndex(const qint32 &column_index) {
    m_column_index = column_index;
    m_column_index_isSet = true;
}

bool OAITableCellLocation::is_column_index_Set() const{
    return m_column_index_isSet;
}

bool OAITableCellLocation::is_column_index_Valid() const{
    return m_column_index_isValid;
}

qint32 OAITableCellLocation::getRowIndex() const {
    return m_row_index;
}
void OAITableCellLocation::setRowIndex(const qint32 &row_index) {
    m_row_index = row_index;
    m_row_index_isSet = true;
}

bool OAITableCellLocation::is_row_index_Set() const{
    return m_row_index_isSet;
}

bool OAITableCellLocation::is_row_index_Valid() const{
    return m_row_index_isValid;
}

bool OAITableCellLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
