/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList::OAIList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList::OAIList() {
    this->initializeModel();
}

OAIList::~OAIList() {}

void OAIList::initializeModel() {

    m_list_id_isSet = false;
    m_list_id_isValid = false;

    m_nesting_level_isSet = false;
    m_nesting_level_isValid = false;
}

void OAIList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList::fromJsonObject(QJsonObject json) {

    m_list_id_isValid = ::OpenAPI::fromJsonValue(m_list_id, json[QString("listId")]);
    m_list_id_isSet = !json[QString("listId")].isNull() && m_list_id_isValid;

    m_nesting_level_isValid = ::OpenAPI::fromJsonValue(m_nesting_level, json[QString("nestingLevel")]);
    m_nesting_level_isSet = !json[QString("nestingLevel")].isNull() && m_nesting_level_isValid;
}

QString OAIList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList::asJsonObject() const {
    QJsonObject obj;
    if (m_list_id_isSet) {
        obj.insert(QString("listId"), ::OpenAPI::toJsonValue(m_list_id));
    }
    if (m_nesting_level.size() > 0) {
        obj.insert(QString("nestingLevel"), ::OpenAPI::toJsonValue(m_nesting_level));
    }
    return obj;
}

QString OAIList::getListId() const {
    return m_list_id;
}
void OAIList::setListId(const QString &list_id) {
    m_list_id = list_id;
    m_list_id_isSet = true;
}

bool OAIList::is_list_id_Set() const{
    return m_list_id_isSet;
}

bool OAIList::is_list_id_Valid() const{
    return m_list_id_isValid;
}

QMap<QString, OAINestingLevel> OAIList::getNestingLevel() const {
    return m_nesting_level;
}
void OAIList::setNestingLevel(const QMap<QString, OAINestingLevel> &nesting_level) {
    m_nesting_level = nesting_level;
    m_nesting_level_isSet = true;
}

bool OAIList::is_nesting_level_Set() const{
    return m_nesting_level_isSet;
}

bool OAIList::is_nesting_level_Valid() const{
    return m_nesting_level_isValid;
}

bool OAIList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nesting_level.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
