/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDuplicateObjectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDuplicateObjectRequest::OAIDuplicateObjectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDuplicateObjectRequest::OAIDuplicateObjectRequest() {
    this->initializeModel();
}

OAIDuplicateObjectRequest::~OAIDuplicateObjectRequest() {}

void OAIDuplicateObjectRequest::initializeModel() {

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_ids_isSet = false;
    m_object_ids_isValid = false;
}

void OAIDuplicateObjectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDuplicateObjectRequest::fromJsonObject(QJsonObject json) {

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_ids_isValid = ::OpenAPI::fromJsonValue(m_object_ids, json[QString("objectIds")]);
    m_object_ids_isSet = !json[QString("objectIds")].isNull() && m_object_ids_isValid;
}

QString OAIDuplicateObjectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDuplicateObjectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_ids.size() > 0) {
        obj.insert(QString("objectIds"), ::OpenAPI::toJsonValue(m_object_ids));
    }
    return obj;
}

QString OAIDuplicateObjectRequest::getObjectId() const {
    return m_object_id;
}
void OAIDuplicateObjectRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIDuplicateObjectRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIDuplicateObjectRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QMap<QString, QString> OAIDuplicateObjectRequest::getObjectIds() const {
    return m_object_ids;
}
void OAIDuplicateObjectRequest::setObjectIds(const QMap<QString, QString> &object_ids) {
    m_object_ids = object_ids;
    m_object_ids_isSet = true;
}

bool OAIDuplicateObjectRequest::is_object_ids_Set() const{
    return m_object_ids_isSet;
}

bool OAIDuplicateObjectRequest::is_object_ids_Valid() const{
    return m_object_ids_isValid;
}

bool OAIDuplicateObjectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDuplicateObjectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
