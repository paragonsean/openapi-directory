/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateParagraphBulletsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateParagraphBulletsRequest::OAICreateParagraphBulletsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateParagraphBulletsRequest::OAICreateParagraphBulletsRequest() {
    this->initializeModel();
}

OAICreateParagraphBulletsRequest::~OAICreateParagraphBulletsRequest() {}

void OAICreateParagraphBulletsRequest::initializeModel() {

    m_bullet_preset_isSet = false;
    m_bullet_preset_isValid = false;

    m_cell_location_isSet = false;
    m_cell_location_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_text_range_isSet = false;
    m_text_range_isValid = false;
}

void OAICreateParagraphBulletsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateParagraphBulletsRequest::fromJsonObject(QJsonObject json) {

    m_bullet_preset_isValid = ::OpenAPI::fromJsonValue(m_bullet_preset, json[QString("bulletPreset")]);
    m_bullet_preset_isSet = !json[QString("bulletPreset")].isNull() && m_bullet_preset_isValid;

    m_cell_location_isValid = ::OpenAPI::fromJsonValue(m_cell_location, json[QString("cellLocation")]);
    m_cell_location_isSet = !json[QString("cellLocation")].isNull() && m_cell_location_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_text_range_isValid = ::OpenAPI::fromJsonValue(m_text_range, json[QString("textRange")]);
    m_text_range_isSet = !json[QString("textRange")].isNull() && m_text_range_isValid;
}

QString OAICreateParagraphBulletsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateParagraphBulletsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet_preset_isSet) {
        obj.insert(QString("bulletPreset"), ::OpenAPI::toJsonValue(m_bullet_preset));
    }
    if (m_cell_location.isSet()) {
        obj.insert(QString("cellLocation"), ::OpenAPI::toJsonValue(m_cell_location));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_text_range.isSet()) {
        obj.insert(QString("textRange"), ::OpenAPI::toJsonValue(m_text_range));
    }
    return obj;
}

QString OAICreateParagraphBulletsRequest::getBulletPreset() const {
    return m_bullet_preset;
}
void OAICreateParagraphBulletsRequest::setBulletPreset(const QString &bullet_preset) {
    m_bullet_preset = bullet_preset;
    m_bullet_preset_isSet = true;
}

bool OAICreateParagraphBulletsRequest::is_bullet_preset_Set() const{
    return m_bullet_preset_isSet;
}

bool OAICreateParagraphBulletsRequest::is_bullet_preset_Valid() const{
    return m_bullet_preset_isValid;
}

OAITableCellLocation OAICreateParagraphBulletsRequest::getCellLocation() const {
    return m_cell_location;
}
void OAICreateParagraphBulletsRequest::setCellLocation(const OAITableCellLocation &cell_location) {
    m_cell_location = cell_location;
    m_cell_location_isSet = true;
}

bool OAICreateParagraphBulletsRequest::is_cell_location_Set() const{
    return m_cell_location_isSet;
}

bool OAICreateParagraphBulletsRequest::is_cell_location_Valid() const{
    return m_cell_location_isValid;
}

QString OAICreateParagraphBulletsRequest::getObjectId() const {
    return m_object_id;
}
void OAICreateParagraphBulletsRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICreateParagraphBulletsRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICreateParagraphBulletsRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIRange OAICreateParagraphBulletsRequest::getTextRange() const {
    return m_text_range;
}
void OAICreateParagraphBulletsRequest::setTextRange(const OAIRange &text_range) {
    m_text_range = text_range;
    m_text_range_isSet = true;
}

bool OAICreateParagraphBulletsRequest::is_text_range_Set() const{
    return m_text_range_isSet;
}

bool OAICreateParagraphBulletsRequest::is_text_range_Valid() const{
    return m_text_range_isValid;
}

bool OAICreateParagraphBulletsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateParagraphBulletsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
