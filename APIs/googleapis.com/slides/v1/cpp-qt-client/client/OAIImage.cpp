/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_image_properties_isSet = false;
    m_image_properties_isValid = false;

    m_placeholder_isSet = false;
    m_placeholder_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_image_properties_isValid = ::OpenAPI::fromJsonValue(m_image_properties, json[QString("imageProperties")]);
    m_image_properties_isSet = !json[QString("imageProperties")].isNull() && m_image_properties_isValid;

    m_placeholder_isValid = ::OpenAPI::fromJsonValue(m_placeholder, json[QString("placeholder")]);
    m_placeholder_isSet = !json[QString("placeholder")].isNull() && m_placeholder_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_image_properties.isSet()) {
        obj.insert(QString("imageProperties"), ::OpenAPI::toJsonValue(m_image_properties));
    }
    if (m_placeholder.isSet()) {
        obj.insert(QString("placeholder"), ::OpenAPI::toJsonValue(m_placeholder));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    return obj;
}

QString OAIImage::getContentUrl() const {
    return m_content_url;
}
void OAIImage::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIImage::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIImage::is_content_url_Valid() const{
    return m_content_url_isValid;
}

OAIImageProperties OAIImage::getImageProperties() const {
    return m_image_properties;
}
void OAIImage::setImageProperties(const OAIImageProperties &image_properties) {
    m_image_properties = image_properties;
    m_image_properties_isSet = true;
}

bool OAIImage::is_image_properties_Set() const{
    return m_image_properties_isSet;
}

bool OAIImage::is_image_properties_Valid() const{
    return m_image_properties_isValid;
}

OAIPlaceholder OAIImage::getPlaceholder() const {
    return m_placeholder;
}
void OAIImage::setPlaceholder(const OAIPlaceholder &placeholder) {
    m_placeholder = placeholder;
    m_placeholder_isSet = true;
}

bool OAIImage::is_placeholder_Set() const{
    return m_placeholder_isSet;
}

bool OAIImage::is_placeholder_Valid() const{
    return m_placeholder_isValid;
}

QString OAIImage::getSourceUrl() const {
    return m_source_url;
}
void OAIImage::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIImage::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIImage::is_source_url_Valid() const{
    return m_source_url_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placeholder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
