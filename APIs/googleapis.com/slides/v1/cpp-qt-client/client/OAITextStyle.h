/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextStyle.h
 *
 * Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
 */

#ifndef OAITextStyle_H
#define OAITextStyle_H

#include <QJsonObject>

#include "OAIDimension.h"
#include "OAILink.h"
#include "OAIOptionalColor.h"
#include "OAIWeightedFontFamily.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOptionalColor;
class OAIDimension;
class OAILink;
class OAIWeightedFontFamily;

class OAITextStyle : public OAIObject {
public:
    OAITextStyle();
    OAITextStyle(QString json);
    ~OAITextStyle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOptionalColor getBackgroundColor() const;
    void setBackgroundColor(const OAIOptionalColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    QString getBaselineOffset() const;
    void setBaselineOffset(const QString &baseline_offset);
    bool is_baseline_offset_Set() const;
    bool is_baseline_offset_Valid() const;

    bool isBold() const;
    void setBold(const bool &bold);
    bool is_bold_Set() const;
    bool is_bold_Valid() const;

    QString getFontFamily() const;
    void setFontFamily(const QString &font_family);
    bool is_font_family_Set() const;
    bool is_font_family_Valid() const;

    OAIDimension getFontSize() const;
    void setFontSize(const OAIDimension &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    OAIOptionalColor getForegroundColor() const;
    void setForegroundColor(const OAIOptionalColor &foreground_color);
    bool is_foreground_color_Set() const;
    bool is_foreground_color_Valid() const;

    bool isItalic() const;
    void setItalic(const bool &italic);
    bool is_italic_Set() const;
    bool is_italic_Valid() const;

    OAILink getLink() const;
    void setLink(const OAILink &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    bool isSmallCaps() const;
    void setSmallCaps(const bool &small_caps);
    bool is_small_caps_Set() const;
    bool is_small_caps_Valid() const;

    bool isStrikethrough() const;
    void setStrikethrough(const bool &strikethrough);
    bool is_strikethrough_Set() const;
    bool is_strikethrough_Valid() const;

    bool isUnderline() const;
    void setUnderline(const bool &underline);
    bool is_underline_Set() const;
    bool is_underline_Valid() const;

    OAIWeightedFontFamily getWeightedFontFamily() const;
    void setWeightedFontFamily(const OAIWeightedFontFamily &weighted_font_family);
    bool is_weighted_font_family_Set() const;
    bool is_weighted_font_family_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOptionalColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    QString m_baseline_offset;
    bool m_baseline_offset_isSet;
    bool m_baseline_offset_isValid;

    bool m_bold;
    bool m_bold_isSet;
    bool m_bold_isValid;

    QString m_font_family;
    bool m_font_family_isSet;
    bool m_font_family_isValid;

    OAIDimension m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    OAIOptionalColor m_foreground_color;
    bool m_foreground_color_isSet;
    bool m_foreground_color_isValid;

    bool m_italic;
    bool m_italic_isSet;
    bool m_italic_isValid;

    OAILink m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    bool m_small_caps;
    bool m_small_caps_isSet;
    bool m_small_caps_isValid;

    bool m_strikethrough;
    bool m_strikethrough_isSet;
    bool m_strikethrough_isValid;

    bool m_underline;
    bool m_underline_isSet;
    bool m_underline_isValid;

    OAIWeightedFontFamily m_weighted_font_family;
    bool m_weighted_font_family_isSet;
    bool m_weighted_font_family_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextStyle)

#endif // OAITextStyle_H
