/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSlideRequest.h
 *
 * Creates a slide.
 */

#ifndef OAICreateSlideRequest_H
#define OAICreateSlideRequest_H

#include <QJsonObject>

#include "OAILayoutPlaceholderIdMapping.h"
#include "OAILayoutReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILayoutPlaceholderIdMapping;
class OAILayoutReference;

class OAICreateSlideRequest : public OAIObject {
public:
    OAICreateSlideRequest();
    OAICreateSlideRequest(QString json);
    ~OAICreateSlideRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getInsertionIndex() const;
    void setInsertionIndex(const qint32 &insertion_index);
    bool is_insertion_index_Set() const;
    bool is_insertion_index_Valid() const;

    QString getObjectId() const;
    void setObjectId(const QString &object_id);
    bool is_object_id_Set() const;
    bool is_object_id_Valid() const;

    QList<OAILayoutPlaceholderIdMapping> getPlaceholderIdMappings() const;
    void setPlaceholderIdMappings(const QList<OAILayoutPlaceholderIdMapping> &placeholder_id_mappings);
    bool is_placeholder_id_mappings_Set() const;
    bool is_placeholder_id_mappings_Valid() const;

    OAILayoutReference getSlideLayoutReference() const;
    void setSlideLayoutReference(const OAILayoutReference &slide_layout_reference);
    bool is_slide_layout_reference_Set() const;
    bool is_slide_layout_reference_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_insertion_index;
    bool m_insertion_index_isSet;
    bool m_insertion_index_isValid;

    QString m_object_id;
    bool m_object_id_isSet;
    bool m_object_id_isValid;

    QList<OAILayoutPlaceholderIdMapping> m_placeholder_id_mappings;
    bool m_placeholder_id_mappings_isSet;
    bool m_placeholder_id_mappings_isValid;

    OAILayoutReference m_slide_layout_reference;
    bool m_slide_layout_reference_isSet;
    bool m_slide_layout_reference_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSlideRequest)

#endif // OAICreateSlideRequest_H
