/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresentation::OAIPresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresentation::OAIPresentation() {
    this->initializeModel();
}

OAIPresentation::~OAIPresentation() {}

void OAIPresentation::initializeModel() {

    m_layouts_isSet = false;
    m_layouts_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_masters_isSet = false;
    m_masters_isValid = false;

    m_notes_master_isSet = false;
    m_notes_master_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_presentation_id_isSet = false;
    m_presentation_id_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_slides_isSet = false;
    m_slides_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresentation::fromJsonObject(QJsonObject json) {

    m_layouts_isValid = ::OpenAPI::fromJsonValue(m_layouts, json[QString("layouts")]);
    m_layouts_isSet = !json[QString("layouts")].isNull() && m_layouts_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_masters_isValid = ::OpenAPI::fromJsonValue(m_masters, json[QString("masters")]);
    m_masters_isSet = !json[QString("masters")].isNull() && m_masters_isValid;

    m_notes_master_isValid = ::OpenAPI::fromJsonValue(m_notes_master, json[QString("notesMaster")]);
    m_notes_master_isSet = !json[QString("notesMaster")].isNull() && m_notes_master_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_presentation_id_isValid = ::OpenAPI::fromJsonValue(m_presentation_id, json[QString("presentationId")]);
    m_presentation_id_isSet = !json[QString("presentationId")].isNull() && m_presentation_id_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_slides_isValid = ::OpenAPI::fromJsonValue(m_slides, json[QString("slides")]);
    m_slides_isSet = !json[QString("slides")].isNull() && m_slides_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_layouts.size() > 0) {
        obj.insert(QString("layouts"), ::OpenAPI::toJsonValue(m_layouts));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_masters.size() > 0) {
        obj.insert(QString("masters"), ::OpenAPI::toJsonValue(m_masters));
    }
    if (m_notes_master.isSet()) {
        obj.insert(QString("notesMaster"), ::OpenAPI::toJsonValue(m_notes_master));
    }
    if (m_page_size.isSet()) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_presentation_id_isSet) {
        obj.insert(QString("presentationId"), ::OpenAPI::toJsonValue(m_presentation_id));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_slides.size() > 0) {
        obj.insert(QString("slides"), ::OpenAPI::toJsonValue(m_slides));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIPage> OAIPresentation::getLayouts() const {
    return m_layouts;
}
void OAIPresentation::setLayouts(const QList<OAIPage> &layouts) {
    m_layouts = layouts;
    m_layouts_isSet = true;
}

bool OAIPresentation::is_layouts_Set() const{
    return m_layouts_isSet;
}

bool OAIPresentation::is_layouts_Valid() const{
    return m_layouts_isValid;
}

QString OAIPresentation::getLocale() const {
    return m_locale;
}
void OAIPresentation::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIPresentation::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIPresentation::is_locale_Valid() const{
    return m_locale_isValid;
}

QList<OAIPage> OAIPresentation::getMasters() const {
    return m_masters;
}
void OAIPresentation::setMasters(const QList<OAIPage> &masters) {
    m_masters = masters;
    m_masters_isSet = true;
}

bool OAIPresentation::is_masters_Set() const{
    return m_masters_isSet;
}

bool OAIPresentation::is_masters_Valid() const{
    return m_masters_isValid;
}

OAIPage OAIPresentation::getNotesMaster() const {
    return m_notes_master;
}
void OAIPresentation::setNotesMaster(const OAIPage &notes_master) {
    m_notes_master = notes_master;
    m_notes_master_isSet = true;
}

bool OAIPresentation::is_notes_master_Set() const{
    return m_notes_master_isSet;
}

bool OAIPresentation::is_notes_master_Valid() const{
    return m_notes_master_isValid;
}

OAISize OAIPresentation::getPageSize() const {
    return m_page_size;
}
void OAIPresentation::setPageSize(const OAISize &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPresentation::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPresentation::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIPresentation::getPresentationId() const {
    return m_presentation_id;
}
void OAIPresentation::setPresentationId(const QString &presentation_id) {
    m_presentation_id = presentation_id;
    m_presentation_id_isSet = true;
}

bool OAIPresentation::is_presentation_id_Set() const{
    return m_presentation_id_isSet;
}

bool OAIPresentation::is_presentation_id_Valid() const{
    return m_presentation_id_isValid;
}

QString OAIPresentation::getRevisionId() const {
    return m_revision_id;
}
void OAIPresentation::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIPresentation::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIPresentation::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QList<OAIPage> OAIPresentation::getSlides() const {
    return m_slides;
}
void OAIPresentation::setSlides(const QList<OAIPage> &slides) {
    m_slides = slides;
    m_slides_isSet = true;
}

bool OAIPresentation::is_slides_Set() const{
    return m_slides_isSet;
}

bool OAIPresentation::is_slides_Valid() const{
    return m_slides_isValid;
}

QString OAIPresentation::getTitle() const {
    return m_title;
}
void OAIPresentation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPresentation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPresentation::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_master.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
