/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShape.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShape::OAIShape(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShape::OAIShape() {
    this->initializeModel();
}

OAIShape::~OAIShape() {}

void OAIShape::initializeModel() {

    m_placeholder_isSet = false;
    m_placeholder_isValid = false;

    m_shape_properties_isSet = false;
    m_shape_properties_isValid = false;

    m_shape_type_isSet = false;
    m_shape_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIShape::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShape::fromJsonObject(QJsonObject json) {

    m_placeholder_isValid = ::OpenAPI::fromJsonValue(m_placeholder, json[QString("placeholder")]);
    m_placeholder_isSet = !json[QString("placeholder")].isNull() && m_placeholder_isValid;

    m_shape_properties_isValid = ::OpenAPI::fromJsonValue(m_shape_properties, json[QString("shapeProperties")]);
    m_shape_properties_isSet = !json[QString("shapeProperties")].isNull() && m_shape_properties_isValid;

    m_shape_type_isValid = ::OpenAPI::fromJsonValue(m_shape_type, json[QString("shapeType")]);
    m_shape_type_isSet = !json[QString("shapeType")].isNull() && m_shape_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIShape::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShape::asJsonObject() const {
    QJsonObject obj;
    if (m_placeholder.isSet()) {
        obj.insert(QString("placeholder"), ::OpenAPI::toJsonValue(m_placeholder));
    }
    if (m_shape_properties.isSet()) {
        obj.insert(QString("shapeProperties"), ::OpenAPI::toJsonValue(m_shape_properties));
    }
    if (m_shape_type_isSet) {
        obj.insert(QString("shapeType"), ::OpenAPI::toJsonValue(m_shape_type));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIPlaceholder OAIShape::getPlaceholder() const {
    return m_placeholder;
}
void OAIShape::setPlaceholder(const OAIPlaceholder &placeholder) {
    m_placeholder = placeholder;
    m_placeholder_isSet = true;
}

bool OAIShape::is_placeholder_Set() const{
    return m_placeholder_isSet;
}

bool OAIShape::is_placeholder_Valid() const{
    return m_placeholder_isValid;
}

OAIShapeProperties OAIShape::getShapeProperties() const {
    return m_shape_properties;
}
void OAIShape::setShapeProperties(const OAIShapeProperties &shape_properties) {
    m_shape_properties = shape_properties;
    m_shape_properties_isSet = true;
}

bool OAIShape::is_shape_properties_Set() const{
    return m_shape_properties_isSet;
}

bool OAIShape::is_shape_properties_Valid() const{
    return m_shape_properties_isValid;
}

QString OAIShape::getShapeType() const {
    return m_shape_type;
}
void OAIShape::setShapeType(const QString &shape_type) {
    m_shape_type = shape_type;
    m_shape_type_isSet = true;
}

bool OAIShape::is_shape_type_Set() const{
    return m_shape_type_isSet;
}

bool OAIShape::is_shape_type_Valid() const{
    return m_shape_type_isValid;
}

OAITextContent OAIShape::getText() const {
    return m_text;
}
void OAIShape::setText(const OAITextContent &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIShape::is_text_Set() const{
    return m_text_isSet;
}

bool OAIShape::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIShape::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_placeholder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShape::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
