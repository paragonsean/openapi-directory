/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageElement::OAIPageElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageElement::OAIPageElement() {
    this->initializeModel();
}

OAIPageElement::~OAIPageElement() {}

void OAIPageElement::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_element_group_isSet = false;
    m_element_group_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_sheets_chart_isSet = false;
    m_sheets_chart_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_transform_isSet = false;
    m_transform_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_word_art_isSet = false;
    m_word_art_isValid = false;
}

void OAIPageElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageElement::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_element_group_isValid = ::OpenAPI::fromJsonValue(m_element_group, json[QString("elementGroup")]);
    m_element_group_isSet = !json[QString("elementGroup")].isNull() && m_element_group_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_sheets_chart, json[QString("sheetsChart")]);
    m_sheets_chart_isSet = !json[QString("sheetsChart")].isNull() && m_sheets_chart_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_transform_isValid = ::OpenAPI::fromJsonValue(m_transform, json[QString("transform")]);
    m_transform_isSet = !json[QString("transform")].isNull() && m_transform_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_word_art_isValid = ::OpenAPI::fromJsonValue(m_word_art, json[QString("wordArt")]);
    m_word_art_isSet = !json[QString("wordArt")].isNull() && m_word_art_isValid;
}

QString OAIPageElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageElement::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_element_group.isSet()) {
        obj.insert(QString("elementGroup"), ::OpenAPI::toJsonValue(m_element_group));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_line.isSet()) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_shape.isSet()) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_sheets_chart.isSet()) {
        obj.insert(QString("sheetsChart"), ::OpenAPI::toJsonValue(m_sheets_chart));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_transform.isSet()) {
        obj.insert(QString("transform"), ::OpenAPI::toJsonValue(m_transform));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_word_art.isSet()) {
        obj.insert(QString("wordArt"), ::OpenAPI::toJsonValue(m_word_art));
    }
    return obj;
}

QString OAIPageElement::getDescription() const {
    return m_description;
}
void OAIPageElement::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPageElement::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPageElement::is_description_Valid() const{
    return m_description_isValid;
}

OAIGroup OAIPageElement::getElementGroup() const {
    return m_element_group;
}
void OAIPageElement::setElementGroup(const OAIGroup &element_group) {
    m_element_group = element_group;
    m_element_group_isSet = true;
}

bool OAIPageElement::is_element_group_Set() const{
    return m_element_group_isSet;
}

bool OAIPageElement::is_element_group_Valid() const{
    return m_element_group_isValid;
}

OAIImage OAIPageElement::getImage() const {
    return m_image;
}
void OAIPageElement::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPageElement::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPageElement::is_image_Valid() const{
    return m_image_isValid;
}

OAILine OAIPageElement::getLine() const {
    return m_line;
}
void OAIPageElement::setLine(const OAILine &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIPageElement::is_line_Set() const{
    return m_line_isSet;
}

bool OAIPageElement::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIPageElement::getObjectId() const {
    return m_object_id;
}
void OAIPageElement::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIPageElement::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIPageElement::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIShape OAIPageElement::getShape() const {
    return m_shape;
}
void OAIPageElement::setShape(const OAIShape &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIPageElement::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIPageElement::is_shape_Valid() const{
    return m_shape_isValid;
}

OAISheetsChart OAIPageElement::getSheetsChart() const {
    return m_sheets_chart;
}
void OAIPageElement::setSheetsChart(const OAISheetsChart &sheets_chart) {
    m_sheets_chart = sheets_chart;
    m_sheets_chart_isSet = true;
}

bool OAIPageElement::is_sheets_chart_Set() const{
    return m_sheets_chart_isSet;
}

bool OAIPageElement::is_sheets_chart_Valid() const{
    return m_sheets_chart_isValid;
}

OAISize OAIPageElement::getSize() const {
    return m_size;
}
void OAIPageElement::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPageElement::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPageElement::is_size_Valid() const{
    return m_size_isValid;
}

OAITable OAIPageElement::getTable() const {
    return m_table;
}
void OAIPageElement::setTable(const OAITable &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIPageElement::is_table_Set() const{
    return m_table_isSet;
}

bool OAIPageElement::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIPageElement::getTitle() const {
    return m_title;
}
void OAIPageElement::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPageElement::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPageElement::is_title_Valid() const{
    return m_title_isValid;
}

OAIAffineTransform OAIPageElement::getTransform() const {
    return m_transform;
}
void OAIPageElement::setTransform(const OAIAffineTransform &transform) {
    m_transform = transform;
    m_transform_isSet = true;
}

bool OAIPageElement::is_transform_Set() const{
    return m_transform_isSet;
}

bool OAIPageElement::is_transform_Valid() const{
    return m_transform_isValid;
}

OAIVideo OAIPageElement::getVideo() const {
    return m_video;
}
void OAIPageElement::setVideo(const OAIVideo &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIPageElement::is_video_Set() const{
    return m_video_isSet;
}

bool OAIPageElement::is_video_Valid() const{
    return m_video_isValid;
}

OAIWordArt OAIPageElement::getWordArt() const {
    return m_word_art;
}
void OAIPageElement::setWordArt(const OAIWordArt &word_art) {
    m_word_art = word_art;
    m_word_art_isSet = true;
}

bool OAIPageElement::is_word_art_Set() const{
    return m_word_art_isSet;
}

bool OAIPageElement::is_word_art_Valid() const{
    return m_word_art_isValid;
}

bool OAIPageElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_art.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
