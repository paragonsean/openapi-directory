/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSheetsChartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSheetsChartRequest::OAICreateSheetsChartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSheetsChartRequest::OAICreateSheetsChartRequest() {
    this->initializeModel();
}

OAICreateSheetsChartRequest::~OAICreateSheetsChartRequest() {}

void OAICreateSheetsChartRequest::initializeModel() {

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_element_properties_isSet = false;
    m_element_properties_isValid = false;

    m_linking_mode_isSet = false;
    m_linking_mode_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;
}

void OAICreateSheetsChartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSheetsChartRequest::fromJsonObject(QJsonObject json) {

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_element_properties_isValid = ::OpenAPI::fromJsonValue(m_element_properties, json[QString("elementProperties")]);
    m_element_properties_isSet = !json[QString("elementProperties")].isNull() && m_element_properties_isValid;

    m_linking_mode_isValid = ::OpenAPI::fromJsonValue(m_linking_mode, json[QString("linkingMode")]);
    m_linking_mode_isSet = !json[QString("linkingMode")].isNull() && m_linking_mode_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;
}

QString OAICreateSheetsChartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSheetsChartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_element_properties.isSet()) {
        obj.insert(QString("elementProperties"), ::OpenAPI::toJsonValue(m_element_properties));
    }
    if (m_linking_mode_isSet) {
        obj.insert(QString("linkingMode"), ::OpenAPI::toJsonValue(m_linking_mode));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    return obj;
}

qint32 OAICreateSheetsChartRequest::getChartId() const {
    return m_chart_id;
}
void OAICreateSheetsChartRequest::setChartId(const qint32 &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAICreateSheetsChartRequest::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAICreateSheetsChartRequest::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

OAIPageElementProperties OAICreateSheetsChartRequest::getElementProperties() const {
    return m_element_properties;
}
void OAICreateSheetsChartRequest::setElementProperties(const OAIPageElementProperties &element_properties) {
    m_element_properties = element_properties;
    m_element_properties_isSet = true;
}

bool OAICreateSheetsChartRequest::is_element_properties_Set() const{
    return m_element_properties_isSet;
}

bool OAICreateSheetsChartRequest::is_element_properties_Valid() const{
    return m_element_properties_isValid;
}

QString OAICreateSheetsChartRequest::getLinkingMode() const {
    return m_linking_mode;
}
void OAICreateSheetsChartRequest::setLinkingMode(const QString &linking_mode) {
    m_linking_mode = linking_mode;
    m_linking_mode_isSet = true;
}

bool OAICreateSheetsChartRequest::is_linking_mode_Set() const{
    return m_linking_mode_isSet;
}

bool OAICreateSheetsChartRequest::is_linking_mode_Valid() const{
    return m_linking_mode_isValid;
}

QString OAICreateSheetsChartRequest::getObjectId() const {
    return m_object_id;
}
void OAICreateSheetsChartRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICreateSheetsChartRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICreateSheetsChartRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAICreateSheetsChartRequest::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAICreateSheetsChartRequest::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAICreateSheetsChartRequest::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAICreateSheetsChartRequest::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

bool OAICreateSheetsChartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linking_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSheetsChartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
