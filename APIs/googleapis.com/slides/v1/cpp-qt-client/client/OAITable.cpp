/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable::OAITable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable::OAITable() {
    this->initializeModel();
}

OAITable::~OAITable() {}

void OAITable::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_horizontal_border_rows_isSet = false;
    m_horizontal_border_rows_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_table_columns_isSet = false;
    m_table_columns_isValid = false;

    m_table_rows_isSet = false;
    m_table_rows_isValid = false;

    m_vertical_border_rows_isSet = false;
    m_vertical_border_rows_isValid = false;
}

void OAITable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_horizontal_border_rows_isValid = ::OpenAPI::fromJsonValue(m_horizontal_border_rows, json[QString("horizontalBorderRows")]);
    m_horizontal_border_rows_isSet = !json[QString("horizontalBorderRows")].isNull() && m_horizontal_border_rows_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_table_columns_isValid = ::OpenAPI::fromJsonValue(m_table_columns, json[QString("tableColumns")]);
    m_table_columns_isSet = !json[QString("tableColumns")].isNull() && m_table_columns_isValid;

    m_table_rows_isValid = ::OpenAPI::fromJsonValue(m_table_rows, json[QString("tableRows")]);
    m_table_rows_isSet = !json[QString("tableRows")].isNull() && m_table_rows_isValid;

    m_vertical_border_rows_isValid = ::OpenAPI::fromJsonValue(m_vertical_border_rows, json[QString("verticalBorderRows")]);
    m_vertical_border_rows_isSet = !json[QString("verticalBorderRows")].isNull() && m_vertical_border_rows_isValid;
}

QString OAITable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable::asJsonObject() const {
    QJsonObject obj;
    if (m_columns_isSet) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_horizontal_border_rows.size() > 0) {
        obj.insert(QString("horizontalBorderRows"), ::OpenAPI::toJsonValue(m_horizontal_border_rows));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_table_columns.size() > 0) {
        obj.insert(QString("tableColumns"), ::OpenAPI::toJsonValue(m_table_columns));
    }
    if (m_table_rows.size() > 0) {
        obj.insert(QString("tableRows"), ::OpenAPI::toJsonValue(m_table_rows));
    }
    if (m_vertical_border_rows.size() > 0) {
        obj.insert(QString("verticalBorderRows"), ::OpenAPI::toJsonValue(m_vertical_border_rows));
    }
    return obj;
}

qint32 OAITable::getColumns() const {
    return m_columns;
}
void OAITable::setColumns(const qint32 &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITable::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<OAITableBorderRow> OAITable::getHorizontalBorderRows() const {
    return m_horizontal_border_rows;
}
void OAITable::setHorizontalBorderRows(const QList<OAITableBorderRow> &horizontal_border_rows) {
    m_horizontal_border_rows = horizontal_border_rows;
    m_horizontal_border_rows_isSet = true;
}

bool OAITable::is_horizontal_border_rows_Set() const{
    return m_horizontal_border_rows_isSet;
}

bool OAITable::is_horizontal_border_rows_Valid() const{
    return m_horizontal_border_rows_isValid;
}

qint32 OAITable::getRows() const {
    return m_rows;
}
void OAITable::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAITable::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAITable::is_rows_Valid() const{
    return m_rows_isValid;
}

QList<OAITableColumnProperties> OAITable::getTableColumns() const {
    return m_table_columns;
}
void OAITable::setTableColumns(const QList<OAITableColumnProperties> &table_columns) {
    m_table_columns = table_columns;
    m_table_columns_isSet = true;
}

bool OAITable::is_table_columns_Set() const{
    return m_table_columns_isSet;
}

bool OAITable::is_table_columns_Valid() const{
    return m_table_columns_isValid;
}

QList<OAITableRow> OAITable::getTableRows() const {
    return m_table_rows;
}
void OAITable::setTableRows(const QList<OAITableRow> &table_rows) {
    m_table_rows = table_rows;
    m_table_rows_isSet = true;
}

bool OAITable::is_table_rows_Set() const{
    return m_table_rows_isSet;
}

bool OAITable::is_table_rows_Valid() const{
    return m_table_rows_isValid;
}

QList<OAITableBorderRow> OAITable::getVerticalBorderRows() const {
    return m_vertical_border_rows;
}
void OAITable::setVerticalBorderRows(const QList<OAITableBorderRow> &vertical_border_rows) {
    m_vertical_border_rows = vertical_border_rows;
    m_vertical_border_rows_isSet = true;
}

bool OAITable::is_vertical_border_rows_Set() const{
    return m_vertical_border_rows_isSet;
}

bool OAITable::is_vertical_border_rows_Valid() const{
    return m_vertical_border_rows_isValid;
}

bool OAITable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_border_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_border_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
