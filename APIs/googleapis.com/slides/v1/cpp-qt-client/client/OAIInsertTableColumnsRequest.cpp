/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertTableColumnsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertTableColumnsRequest::OAIInsertTableColumnsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertTableColumnsRequest::OAIInsertTableColumnsRequest() {
    this->initializeModel();
}

OAIInsertTableColumnsRequest::~OAIInsertTableColumnsRequest() {}

void OAIInsertTableColumnsRequest::initializeModel() {

    m_cell_location_isSet = false;
    m_cell_location_isValid = false;

    m_insert_right_isSet = false;
    m_insert_right_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_table_object_id_isSet = false;
    m_table_object_id_isValid = false;
}

void OAIInsertTableColumnsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertTableColumnsRequest::fromJsonObject(QJsonObject json) {

    m_cell_location_isValid = ::OpenAPI::fromJsonValue(m_cell_location, json[QString("cellLocation")]);
    m_cell_location_isSet = !json[QString("cellLocation")].isNull() && m_cell_location_isValid;

    m_insert_right_isValid = ::OpenAPI::fromJsonValue(m_insert_right, json[QString("insertRight")]);
    m_insert_right_isSet = !json[QString("insertRight")].isNull() && m_insert_right_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_table_object_id_isValid = ::OpenAPI::fromJsonValue(m_table_object_id, json[QString("tableObjectId")]);
    m_table_object_id_isSet = !json[QString("tableObjectId")].isNull() && m_table_object_id_isValid;
}

QString OAIInsertTableColumnsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertTableColumnsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cell_location.isSet()) {
        obj.insert(QString("cellLocation"), ::OpenAPI::toJsonValue(m_cell_location));
    }
    if (m_insert_right_isSet) {
        obj.insert(QString("insertRight"), ::OpenAPI::toJsonValue(m_insert_right));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_table_object_id_isSet) {
        obj.insert(QString("tableObjectId"), ::OpenAPI::toJsonValue(m_table_object_id));
    }
    return obj;
}

OAITableCellLocation OAIInsertTableColumnsRequest::getCellLocation() const {
    return m_cell_location;
}
void OAIInsertTableColumnsRequest::setCellLocation(const OAITableCellLocation &cell_location) {
    m_cell_location = cell_location;
    m_cell_location_isSet = true;
}

bool OAIInsertTableColumnsRequest::is_cell_location_Set() const{
    return m_cell_location_isSet;
}

bool OAIInsertTableColumnsRequest::is_cell_location_Valid() const{
    return m_cell_location_isValid;
}

bool OAIInsertTableColumnsRequest::isInsertRight() const {
    return m_insert_right;
}
void OAIInsertTableColumnsRequest::setInsertRight(const bool &insert_right) {
    m_insert_right = insert_right;
    m_insert_right_isSet = true;
}

bool OAIInsertTableColumnsRequest::is_insert_right_Set() const{
    return m_insert_right_isSet;
}

bool OAIInsertTableColumnsRequest::is_insert_right_Valid() const{
    return m_insert_right_isValid;
}

qint32 OAIInsertTableColumnsRequest::getNumber() const {
    return m_number;
}
void OAIInsertTableColumnsRequest::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInsertTableColumnsRequest::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInsertTableColumnsRequest::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIInsertTableColumnsRequest::getTableObjectId() const {
    return m_table_object_id;
}
void OAIInsertTableColumnsRequest::setTableObjectId(const QString &table_object_id) {
    m_table_object_id = table_object_id;
    m_table_object_id_isSet = true;
}

bool OAIInsertTableColumnsRequest::is_table_object_id_Set() const{
    return m_table_object_id_isSet;
}

bool OAIInsertTableColumnsRequest::is_table_object_id_Valid() const{
    return m_table_object_id_isValid;
}

bool OAIInsertTableColumnsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertTableColumnsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
