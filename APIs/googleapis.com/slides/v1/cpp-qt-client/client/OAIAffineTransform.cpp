/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAffineTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAffineTransform::OAIAffineTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAffineTransform::OAIAffineTransform() {
    this->initializeModel();
}

OAIAffineTransform::~OAIAffineTransform() {}

void OAIAffineTransform::initializeModel() {

    m_scale_x_isSet = false;
    m_scale_x_isValid = false;

    m_scale_y_isSet = false;
    m_scale_y_isValid = false;

    m_shear_x_isSet = false;
    m_shear_x_isValid = false;

    m_shear_y_isSet = false;
    m_shear_y_isValid = false;

    m_translate_x_isSet = false;
    m_translate_x_isValid = false;

    m_translate_y_isSet = false;
    m_translate_y_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIAffineTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAffineTransform::fromJsonObject(QJsonObject json) {

    m_scale_x_isValid = ::OpenAPI::fromJsonValue(m_scale_x, json[QString("scaleX")]);
    m_scale_x_isSet = !json[QString("scaleX")].isNull() && m_scale_x_isValid;

    m_scale_y_isValid = ::OpenAPI::fromJsonValue(m_scale_y, json[QString("scaleY")]);
    m_scale_y_isSet = !json[QString("scaleY")].isNull() && m_scale_y_isValid;

    m_shear_x_isValid = ::OpenAPI::fromJsonValue(m_shear_x, json[QString("shearX")]);
    m_shear_x_isSet = !json[QString("shearX")].isNull() && m_shear_x_isValid;

    m_shear_y_isValid = ::OpenAPI::fromJsonValue(m_shear_y, json[QString("shearY")]);
    m_shear_y_isSet = !json[QString("shearY")].isNull() && m_shear_y_isValid;

    m_translate_x_isValid = ::OpenAPI::fromJsonValue(m_translate_x, json[QString("translateX")]);
    m_translate_x_isSet = !json[QString("translateX")].isNull() && m_translate_x_isValid;

    m_translate_y_isValid = ::OpenAPI::fromJsonValue(m_translate_y, json[QString("translateY")]);
    m_translate_y_isSet = !json[QString("translateY")].isNull() && m_translate_y_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIAffineTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAffineTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_scale_x_isSet) {
        obj.insert(QString("scaleX"), ::OpenAPI::toJsonValue(m_scale_x));
    }
    if (m_scale_y_isSet) {
        obj.insert(QString("scaleY"), ::OpenAPI::toJsonValue(m_scale_y));
    }
    if (m_shear_x_isSet) {
        obj.insert(QString("shearX"), ::OpenAPI::toJsonValue(m_shear_x));
    }
    if (m_shear_y_isSet) {
        obj.insert(QString("shearY"), ::OpenAPI::toJsonValue(m_shear_y));
    }
    if (m_translate_x_isSet) {
        obj.insert(QString("translateX"), ::OpenAPI::toJsonValue(m_translate_x));
    }
    if (m_translate_y_isSet) {
        obj.insert(QString("translateY"), ::OpenAPI::toJsonValue(m_translate_y));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAIAffineTransform::getScaleX() const {
    return m_scale_x;
}
void OAIAffineTransform::setScaleX(const double &scale_x) {
    m_scale_x = scale_x;
    m_scale_x_isSet = true;
}

bool OAIAffineTransform::is_scale_x_Set() const{
    return m_scale_x_isSet;
}

bool OAIAffineTransform::is_scale_x_Valid() const{
    return m_scale_x_isValid;
}

double OAIAffineTransform::getScaleY() const {
    return m_scale_y;
}
void OAIAffineTransform::setScaleY(const double &scale_y) {
    m_scale_y = scale_y;
    m_scale_y_isSet = true;
}

bool OAIAffineTransform::is_scale_y_Set() const{
    return m_scale_y_isSet;
}

bool OAIAffineTransform::is_scale_y_Valid() const{
    return m_scale_y_isValid;
}

double OAIAffineTransform::getShearX() const {
    return m_shear_x;
}
void OAIAffineTransform::setShearX(const double &shear_x) {
    m_shear_x = shear_x;
    m_shear_x_isSet = true;
}

bool OAIAffineTransform::is_shear_x_Set() const{
    return m_shear_x_isSet;
}

bool OAIAffineTransform::is_shear_x_Valid() const{
    return m_shear_x_isValid;
}

double OAIAffineTransform::getShearY() const {
    return m_shear_y;
}
void OAIAffineTransform::setShearY(const double &shear_y) {
    m_shear_y = shear_y;
    m_shear_y_isSet = true;
}

bool OAIAffineTransform::is_shear_y_Set() const{
    return m_shear_y_isSet;
}

bool OAIAffineTransform::is_shear_y_Valid() const{
    return m_shear_y_isValid;
}

double OAIAffineTransform::getTranslateX() const {
    return m_translate_x;
}
void OAIAffineTransform::setTranslateX(const double &translate_x) {
    m_translate_x = translate_x;
    m_translate_x_isSet = true;
}

bool OAIAffineTransform::is_translate_x_Set() const{
    return m_translate_x_isSet;
}

bool OAIAffineTransform::is_translate_x_Valid() const{
    return m_translate_x_isValid;
}

double OAIAffineTransform::getTranslateY() const {
    return m_translate_y;
}
void OAIAffineTransform::setTranslateY(const double &translate_y) {
    m_translate_y = translate_y;
    m_translate_y_isSet = true;
}

bool OAIAffineTransform::is_translate_y_Set() const{
    return m_translate_y_isSet;
}

bool OAIAffineTransform::is_translate_y_Valid() const{
    return m_translate_y_isValid;
}

QString OAIAffineTransform::getUnit() const {
    return m_unit;
}
void OAIAffineTransform::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIAffineTransform::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIAffineTransform::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIAffineTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scale_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shear_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shear_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translate_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translate_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAffineTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
