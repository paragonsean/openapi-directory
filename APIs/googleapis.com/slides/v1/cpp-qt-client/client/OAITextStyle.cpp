/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextStyle::OAITextStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextStyle::OAITextStyle() {
    this->initializeModel();
}

OAITextStyle::~OAITextStyle() {}

void OAITextStyle::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_baseline_offset_isSet = false;
    m_baseline_offset_isValid = false;

    m_bold_isSet = false;
    m_bold_isValid = false;

    m_font_family_isSet = false;
    m_font_family_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;

    m_italic_isSet = false;
    m_italic_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_small_caps_isSet = false;
    m_small_caps_isValid = false;

    m_strikethrough_isSet = false;
    m_strikethrough_isValid = false;

    m_underline_isSet = false;
    m_underline_isValid = false;

    m_weighted_font_family_isSet = false;
    m_weighted_font_family_isValid = false;
}

void OAITextStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextStyle::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_baseline_offset_isValid = ::OpenAPI::fromJsonValue(m_baseline_offset, json[QString("baselineOffset")]);
    m_baseline_offset_isSet = !json[QString("baselineOffset")].isNull() && m_baseline_offset_isValid;

    m_bold_isValid = ::OpenAPI::fromJsonValue(m_bold, json[QString("bold")]);
    m_bold_isSet = !json[QString("bold")].isNull() && m_bold_isValid;

    m_font_family_isValid = ::OpenAPI::fromJsonValue(m_font_family, json[QString("fontFamily")]);
    m_font_family_isSet = !json[QString("fontFamily")].isNull() && m_font_family_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("foregroundColor")]);
    m_foreground_color_isSet = !json[QString("foregroundColor")].isNull() && m_foreground_color_isValid;

    m_italic_isValid = ::OpenAPI::fromJsonValue(m_italic, json[QString("italic")]);
    m_italic_isSet = !json[QString("italic")].isNull() && m_italic_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_small_caps_isValid = ::OpenAPI::fromJsonValue(m_small_caps, json[QString("smallCaps")]);
    m_small_caps_isSet = !json[QString("smallCaps")].isNull() && m_small_caps_isValid;

    m_strikethrough_isValid = ::OpenAPI::fromJsonValue(m_strikethrough, json[QString("strikethrough")]);
    m_strikethrough_isSet = !json[QString("strikethrough")].isNull() && m_strikethrough_isValid;

    m_underline_isValid = ::OpenAPI::fromJsonValue(m_underline, json[QString("underline")]);
    m_underline_isSet = !json[QString("underline")].isNull() && m_underline_isValid;

    m_weighted_font_family_isValid = ::OpenAPI::fromJsonValue(m_weighted_font_family, json[QString("weightedFontFamily")]);
    m_weighted_font_family_isSet = !json[QString("weightedFontFamily")].isNull() && m_weighted_font_family_isValid;
}

QString OAITextStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_baseline_offset_isSet) {
        obj.insert(QString("baselineOffset"), ::OpenAPI::toJsonValue(m_baseline_offset));
    }
    if (m_bold_isSet) {
        obj.insert(QString("bold"), ::OpenAPI::toJsonValue(m_bold));
    }
    if (m_font_family_isSet) {
        obj.insert(QString("fontFamily"), ::OpenAPI::toJsonValue(m_font_family));
    }
    if (m_font_size.isSet()) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_foreground_color.isSet()) {
        obj.insert(QString("foregroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    if (m_italic_isSet) {
        obj.insert(QString("italic"), ::OpenAPI::toJsonValue(m_italic));
    }
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_small_caps_isSet) {
        obj.insert(QString("smallCaps"), ::OpenAPI::toJsonValue(m_small_caps));
    }
    if (m_strikethrough_isSet) {
        obj.insert(QString("strikethrough"), ::OpenAPI::toJsonValue(m_strikethrough));
    }
    if (m_underline_isSet) {
        obj.insert(QString("underline"), ::OpenAPI::toJsonValue(m_underline));
    }
    if (m_weighted_font_family.isSet()) {
        obj.insert(QString("weightedFontFamily"), ::OpenAPI::toJsonValue(m_weighted_font_family));
    }
    return obj;
}

OAIOptionalColor OAITextStyle::getBackgroundColor() const {
    return m_background_color;
}
void OAITextStyle::setBackgroundColor(const OAIOptionalColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAITextStyle::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAITextStyle::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAITextStyle::getBaselineOffset() const {
    return m_baseline_offset;
}
void OAITextStyle::setBaselineOffset(const QString &baseline_offset) {
    m_baseline_offset = baseline_offset;
    m_baseline_offset_isSet = true;
}

bool OAITextStyle::is_baseline_offset_Set() const{
    return m_baseline_offset_isSet;
}

bool OAITextStyle::is_baseline_offset_Valid() const{
    return m_baseline_offset_isValid;
}

bool OAITextStyle::isBold() const {
    return m_bold;
}
void OAITextStyle::setBold(const bool &bold) {
    m_bold = bold;
    m_bold_isSet = true;
}

bool OAITextStyle::is_bold_Set() const{
    return m_bold_isSet;
}

bool OAITextStyle::is_bold_Valid() const{
    return m_bold_isValid;
}

QString OAITextStyle::getFontFamily() const {
    return m_font_family;
}
void OAITextStyle::setFontFamily(const QString &font_family) {
    m_font_family = font_family;
    m_font_family_isSet = true;
}

bool OAITextStyle::is_font_family_Set() const{
    return m_font_family_isSet;
}

bool OAITextStyle::is_font_family_Valid() const{
    return m_font_family_isValid;
}

OAIDimension OAITextStyle::getFontSize() const {
    return m_font_size;
}
void OAITextStyle::setFontSize(const OAIDimension &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAITextStyle::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAITextStyle::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAIOptionalColor OAITextStyle::getForegroundColor() const {
    return m_foreground_color;
}
void OAITextStyle::setForegroundColor(const OAIOptionalColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAITextStyle::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAITextStyle::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

bool OAITextStyle::isItalic() const {
    return m_italic;
}
void OAITextStyle::setItalic(const bool &italic) {
    m_italic = italic;
    m_italic_isSet = true;
}

bool OAITextStyle::is_italic_Set() const{
    return m_italic_isSet;
}

bool OAITextStyle::is_italic_Valid() const{
    return m_italic_isValid;
}

OAILink OAITextStyle::getLink() const {
    return m_link;
}
void OAITextStyle::setLink(const OAILink &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAITextStyle::is_link_Set() const{
    return m_link_isSet;
}

bool OAITextStyle::is_link_Valid() const{
    return m_link_isValid;
}

bool OAITextStyle::isSmallCaps() const {
    return m_small_caps;
}
void OAITextStyle::setSmallCaps(const bool &small_caps) {
    m_small_caps = small_caps;
    m_small_caps_isSet = true;
}

bool OAITextStyle::is_small_caps_Set() const{
    return m_small_caps_isSet;
}

bool OAITextStyle::is_small_caps_Valid() const{
    return m_small_caps_isValid;
}

bool OAITextStyle::isStrikethrough() const {
    return m_strikethrough;
}
void OAITextStyle::setStrikethrough(const bool &strikethrough) {
    m_strikethrough = strikethrough;
    m_strikethrough_isSet = true;
}

bool OAITextStyle::is_strikethrough_Set() const{
    return m_strikethrough_isSet;
}

bool OAITextStyle::is_strikethrough_Valid() const{
    return m_strikethrough_isValid;
}

bool OAITextStyle::isUnderline() const {
    return m_underline;
}
void OAITextStyle::setUnderline(const bool &underline) {
    m_underline = underline;
    m_underline_isSet = true;
}

bool OAITextStyle::is_underline_Set() const{
    return m_underline_isSet;
}

bool OAITextStyle::is_underline_Valid() const{
    return m_underline_isValid;
}

OAIWeightedFontFamily OAITextStyle::getWeightedFontFamily() const {
    return m_weighted_font_family;
}
void OAITextStyle::setWeightedFontFamily(const OAIWeightedFontFamily &weighted_font_family) {
    m_weighted_font_family = weighted_font_family;
    m_weighted_font_family_isSet = true;
}

bool OAITextStyle::is_weighted_font_family_Set() const{
    return m_weighted_font_family_isSet;
}

bool OAITextStyle::is_weighted_font_family_Valid() const{
    return m_weighted_font_family_isValid;
}

bool OAITextStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_caps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikethrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_underline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_font_family.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
