/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplaceAllShapesWithSheetsChartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplaceAllShapesWithSheetsChartRequest::OAIReplaceAllShapesWithSheetsChartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplaceAllShapesWithSheetsChartRequest::OAIReplaceAllShapesWithSheetsChartRequest() {
    this->initializeModel();
}

OAIReplaceAllShapesWithSheetsChartRequest::~OAIReplaceAllShapesWithSheetsChartRequest() {}

void OAIReplaceAllShapesWithSheetsChartRequest::initializeModel() {

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_contains_text_isSet = false;
    m_contains_text_isValid = false;

    m_linking_mode_isSet = false;
    m_linking_mode_isValid = false;

    m_page_object_ids_isSet = false;
    m_page_object_ids_isValid = false;

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;
}

void OAIReplaceAllShapesWithSheetsChartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplaceAllShapesWithSheetsChartRequest::fromJsonObject(QJsonObject json) {

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_contains_text_isValid = ::OpenAPI::fromJsonValue(m_contains_text, json[QString("containsText")]);
    m_contains_text_isSet = !json[QString("containsText")].isNull() && m_contains_text_isValid;

    m_linking_mode_isValid = ::OpenAPI::fromJsonValue(m_linking_mode, json[QString("linkingMode")]);
    m_linking_mode_isSet = !json[QString("linkingMode")].isNull() && m_linking_mode_isValid;

    m_page_object_ids_isValid = ::OpenAPI::fromJsonValue(m_page_object_ids, json[QString("pageObjectIds")]);
    m_page_object_ids_isSet = !json[QString("pageObjectIds")].isNull() && m_page_object_ids_isValid;

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;
}

QString OAIReplaceAllShapesWithSheetsChartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplaceAllShapesWithSheetsChartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_contains_text.isSet()) {
        obj.insert(QString("containsText"), ::OpenAPI::toJsonValue(m_contains_text));
    }
    if (m_linking_mode_isSet) {
        obj.insert(QString("linkingMode"), ::OpenAPI::toJsonValue(m_linking_mode));
    }
    if (m_page_object_ids.size() > 0) {
        obj.insert(QString("pageObjectIds"), ::OpenAPI::toJsonValue(m_page_object_ids));
    }
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    return obj;
}

qint32 OAIReplaceAllShapesWithSheetsChartRequest::getChartId() const {
    return m_chart_id;
}
void OAIReplaceAllShapesWithSheetsChartRequest::setChartId(const qint32 &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

OAISubstringMatchCriteria OAIReplaceAllShapesWithSheetsChartRequest::getContainsText() const {
    return m_contains_text;
}
void OAIReplaceAllShapesWithSheetsChartRequest::setContainsText(const OAISubstringMatchCriteria &contains_text) {
    m_contains_text = contains_text;
    m_contains_text_isSet = true;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_contains_text_Set() const{
    return m_contains_text_isSet;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_contains_text_Valid() const{
    return m_contains_text_isValid;
}

QString OAIReplaceAllShapesWithSheetsChartRequest::getLinkingMode() const {
    return m_linking_mode;
}
void OAIReplaceAllShapesWithSheetsChartRequest::setLinkingMode(const QString &linking_mode) {
    m_linking_mode = linking_mode;
    m_linking_mode_isSet = true;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_linking_mode_Set() const{
    return m_linking_mode_isSet;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_linking_mode_Valid() const{
    return m_linking_mode_isValid;
}

QList<QString> OAIReplaceAllShapesWithSheetsChartRequest::getPageObjectIds() const {
    return m_page_object_ids;
}
void OAIReplaceAllShapesWithSheetsChartRequest::setPageObjectIds(const QList<QString> &page_object_ids) {
    m_page_object_ids = page_object_ids;
    m_page_object_ids_isSet = true;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_page_object_ids_Set() const{
    return m_page_object_ids_isSet;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_page_object_ids_Valid() const{
    return m_page_object_ids_isValid;
}

QString OAIReplaceAllShapesWithSheetsChartRequest::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAIReplaceAllShapesWithSheetsChartRequest::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linking_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplaceAllShapesWithSheetsChartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
