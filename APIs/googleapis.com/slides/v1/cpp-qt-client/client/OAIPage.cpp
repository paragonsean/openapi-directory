/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage::OAIPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage::OAIPage() {
    this->initializeModel();
}

OAIPage::~OAIPage() {}

void OAIPage::initializeModel() {

    m_layout_properties_isSet = false;
    m_layout_properties_isValid = false;

    m_master_properties_isSet = false;
    m_master_properties_isValid = false;

    m_notes_properties_isSet = false;
    m_notes_properties_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_page_elements_isSet = false;
    m_page_elements_isValid = false;

    m_page_properties_isSet = false;
    m_page_properties_isValid = false;

    m_page_type_isSet = false;
    m_page_type_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_slide_properties_isSet = false;
    m_slide_properties_isValid = false;
}

void OAIPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage::fromJsonObject(QJsonObject json) {

    m_layout_properties_isValid = ::OpenAPI::fromJsonValue(m_layout_properties, json[QString("layoutProperties")]);
    m_layout_properties_isSet = !json[QString("layoutProperties")].isNull() && m_layout_properties_isValid;

    m_master_properties_isValid = ::OpenAPI::fromJsonValue(m_master_properties, json[QString("masterProperties")]);
    m_master_properties_isSet = !json[QString("masterProperties")].isNull() && m_master_properties_isValid;

    m_notes_properties_isValid = ::OpenAPI::fromJsonValue(m_notes_properties, json[QString("notesProperties")]);
    m_notes_properties_isSet = !json[QString("notesProperties")].isNull() && m_notes_properties_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_page_elements_isValid = ::OpenAPI::fromJsonValue(m_page_elements, json[QString("pageElements")]);
    m_page_elements_isSet = !json[QString("pageElements")].isNull() && m_page_elements_isValid;

    m_page_properties_isValid = ::OpenAPI::fromJsonValue(m_page_properties, json[QString("pageProperties")]);
    m_page_properties_isSet = !json[QString("pageProperties")].isNull() && m_page_properties_isValid;

    m_page_type_isValid = ::OpenAPI::fromJsonValue(m_page_type, json[QString("pageType")]);
    m_page_type_isSet = !json[QString("pageType")].isNull() && m_page_type_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_slide_properties_isValid = ::OpenAPI::fromJsonValue(m_slide_properties, json[QString("slideProperties")]);
    m_slide_properties_isSet = !json[QString("slideProperties")].isNull() && m_slide_properties_isValid;
}

QString OAIPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage::asJsonObject() const {
    QJsonObject obj;
    if (m_layout_properties.isSet()) {
        obj.insert(QString("layoutProperties"), ::OpenAPI::toJsonValue(m_layout_properties));
    }
    if (m_master_properties.isSet()) {
        obj.insert(QString("masterProperties"), ::OpenAPI::toJsonValue(m_master_properties));
    }
    if (m_notes_properties.isSet()) {
        obj.insert(QString("notesProperties"), ::OpenAPI::toJsonValue(m_notes_properties));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_page_elements.size() > 0) {
        obj.insert(QString("pageElements"), ::OpenAPI::toJsonValue(m_page_elements));
    }
    if (m_page_properties.isSet()) {
        obj.insert(QString("pageProperties"), ::OpenAPI::toJsonValue(m_page_properties));
    }
    if (m_page_type_isSet) {
        obj.insert(QString("pageType"), ::OpenAPI::toJsonValue(m_page_type));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_slide_properties.isSet()) {
        obj.insert(QString("slideProperties"), ::OpenAPI::toJsonValue(m_slide_properties));
    }
    return obj;
}

OAILayoutProperties OAIPage::getLayoutProperties() const {
    return m_layout_properties;
}
void OAIPage::setLayoutProperties(const OAILayoutProperties &layout_properties) {
    m_layout_properties = layout_properties;
    m_layout_properties_isSet = true;
}

bool OAIPage::is_layout_properties_Set() const{
    return m_layout_properties_isSet;
}

bool OAIPage::is_layout_properties_Valid() const{
    return m_layout_properties_isValid;
}

OAIMasterProperties OAIPage::getMasterProperties() const {
    return m_master_properties;
}
void OAIPage::setMasterProperties(const OAIMasterProperties &master_properties) {
    m_master_properties = master_properties;
    m_master_properties_isSet = true;
}

bool OAIPage::is_master_properties_Set() const{
    return m_master_properties_isSet;
}

bool OAIPage::is_master_properties_Valid() const{
    return m_master_properties_isValid;
}

OAINotesProperties OAIPage::getNotesProperties() const {
    return m_notes_properties;
}
void OAIPage::setNotesProperties(const OAINotesProperties &notes_properties) {
    m_notes_properties = notes_properties;
    m_notes_properties_isSet = true;
}

bool OAIPage::is_notes_properties_Set() const{
    return m_notes_properties_isSet;
}

bool OAIPage::is_notes_properties_Valid() const{
    return m_notes_properties_isValid;
}

QString OAIPage::getObjectId() const {
    return m_object_id;
}
void OAIPage::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIPage::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIPage::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QList<OAIPageElement> OAIPage::getPageElements() const {
    return m_page_elements;
}
void OAIPage::setPageElements(const QList<OAIPageElement> &page_elements) {
    m_page_elements = page_elements;
    m_page_elements_isSet = true;
}

bool OAIPage::is_page_elements_Set() const{
    return m_page_elements_isSet;
}

bool OAIPage::is_page_elements_Valid() const{
    return m_page_elements_isValid;
}

OAIPageProperties OAIPage::getPageProperties() const {
    return m_page_properties;
}
void OAIPage::setPageProperties(const OAIPageProperties &page_properties) {
    m_page_properties = page_properties;
    m_page_properties_isSet = true;
}

bool OAIPage::is_page_properties_Set() const{
    return m_page_properties_isSet;
}

bool OAIPage::is_page_properties_Valid() const{
    return m_page_properties_isValid;
}

QString OAIPage::getPageType() const {
    return m_page_type;
}
void OAIPage::setPageType(const QString &page_type) {
    m_page_type = page_type;
    m_page_type_isSet = true;
}

bool OAIPage::is_page_type_Set() const{
    return m_page_type_isSet;
}

bool OAIPage::is_page_type_Valid() const{
    return m_page_type_isValid;
}

QString OAIPage::getRevisionId() const {
    return m_revision_id;
}
void OAIPage::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIPage::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIPage::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

OAISlideProperties OAIPage::getSlideProperties() const {
    return m_slide_properties;
}
void OAIPage::setSlideProperties(const OAISlideProperties &slide_properties) {
    m_slide_properties = slide_properties;
    m_slide_properties_isSet = true;
}

bool OAIPage::is_slide_properties_Set() const{
    return m_slide_properties_isSet;
}

bool OAIPage::is_slide_properties_Valid() const{
    return m_slide_properties_isValid;
}

bool OAIPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
