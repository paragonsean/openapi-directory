/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILine::OAILine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILine::OAILine() {
    this->initializeModel();
}

OAILine::~OAILine() {}

void OAILine::initializeModel() {

    m_line_category_isSet = false;
    m_line_category_isValid = false;

    m_line_properties_isSet = false;
    m_line_properties_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;
}

void OAILine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILine::fromJsonObject(QJsonObject json) {

    m_line_category_isValid = ::OpenAPI::fromJsonValue(m_line_category, json[QString("lineCategory")]);
    m_line_category_isSet = !json[QString("lineCategory")].isNull() && m_line_category_isValid;

    m_line_properties_isValid = ::OpenAPI::fromJsonValue(m_line_properties, json[QString("lineProperties")]);
    m_line_properties_isSet = !json[QString("lineProperties")].isNull() && m_line_properties_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("lineType")]);
    m_line_type_isSet = !json[QString("lineType")].isNull() && m_line_type_isValid;
}

QString OAILine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILine::asJsonObject() const {
    QJsonObject obj;
    if (m_line_category_isSet) {
        obj.insert(QString("lineCategory"), ::OpenAPI::toJsonValue(m_line_category));
    }
    if (m_line_properties.isSet()) {
        obj.insert(QString("lineProperties"), ::OpenAPI::toJsonValue(m_line_properties));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("lineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    return obj;
}

QString OAILine::getLineCategory() const {
    return m_line_category;
}
void OAILine::setLineCategory(const QString &line_category) {
    m_line_category = line_category;
    m_line_category_isSet = true;
}

bool OAILine::is_line_category_Set() const{
    return m_line_category_isSet;
}

bool OAILine::is_line_category_Valid() const{
    return m_line_category_isValid;
}

OAILineProperties OAILine::getLineProperties() const {
    return m_line_properties;
}
void OAILine::setLineProperties(const OAILineProperties &line_properties) {
    m_line_properties = line_properties;
    m_line_properties_isSet = true;
}

bool OAILine::is_line_properties_Set() const{
    return m_line_properties_isSet;
}

bool OAILine::is_line_properties_Valid() const{
    return m_line_properties_isValid;
}

QString OAILine::getLineType() const {
    return m_line_type;
}
void OAILine::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAILine::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAILine::is_line_type_Valid() const{
    return m_line_type_isValid;
}

bool OAILine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
