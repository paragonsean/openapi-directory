/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextElement.h
 *
 * A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.
 */

#ifndef OAITextElement_H
#define OAITextElement_H

#include <QJsonObject>

#include "OAIAutoText.h"
#include "OAIParagraphMarker.h"
#include "OAITextRun.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoText;
class OAIParagraphMarker;
class OAITextRun;

class OAITextElement : public OAIObject {
public:
    OAITextElement();
    OAITextElement(QString json);
    ~OAITextElement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAutoText getAutoText() const;
    void setAutoText(const OAIAutoText &auto_text);
    bool is_auto_text_Set() const;
    bool is_auto_text_Valid() const;

    qint32 getEndIndex() const;
    void setEndIndex(const qint32 &end_index);
    bool is_end_index_Set() const;
    bool is_end_index_Valid() const;

    OAIParagraphMarker getParagraphMarker() const;
    void setParagraphMarker(const OAIParagraphMarker &paragraph_marker);
    bool is_paragraph_marker_Set() const;
    bool is_paragraph_marker_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    OAITextRun getTextRun() const;
    void setTextRun(const OAITextRun &text_run);
    bool is_text_run_Set() const;
    bool is_text_run_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAutoText m_auto_text;
    bool m_auto_text_isSet;
    bool m_auto_text_isValid;

    qint32 m_end_index;
    bool m_end_index_isSet;
    bool m_end_index_isValid;

    OAIParagraphMarker m_paragraph_marker;
    bool m_paragraph_marker_isSet;
    bool m_paragraph_marker_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    OAITextRun m_text_run;
    bool m_text_run_isSet;
    bool m_text_run_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextElement)

#endif // OAITextElement_H
