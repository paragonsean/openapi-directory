/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetsChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetsChart::OAISheetsChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetsChart::OAISheetsChart() {
    this->initializeModel();
}

OAISheetsChart::~OAISheetsChart() {}

void OAISheetsChart::initializeModel() {

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_sheets_chart_properties_isSet = false;
    m_sheets_chart_properties_isValid = false;

    m_spreadsheet_id_isSet = false;
    m_spreadsheet_id_isValid = false;
}

void OAISheetsChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetsChart::fromJsonObject(QJsonObject json) {

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_sheets_chart_properties_isValid = ::OpenAPI::fromJsonValue(m_sheets_chart_properties, json[QString("sheetsChartProperties")]);
    m_sheets_chart_properties_isSet = !json[QString("sheetsChartProperties")].isNull() && m_sheets_chart_properties_isValid;

    m_spreadsheet_id_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id, json[QString("spreadsheetId")]);
    m_spreadsheet_id_isSet = !json[QString("spreadsheetId")].isNull() && m_spreadsheet_id_isValid;
}

QString OAISheetsChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetsChart::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_sheets_chart_properties.isSet()) {
        obj.insert(QString("sheetsChartProperties"), ::OpenAPI::toJsonValue(m_sheets_chart_properties));
    }
    if (m_spreadsheet_id_isSet) {
        obj.insert(QString("spreadsheetId"), ::OpenAPI::toJsonValue(m_spreadsheet_id));
    }
    return obj;
}

qint32 OAISheetsChart::getChartId() const {
    return m_chart_id;
}
void OAISheetsChart::setChartId(const qint32 &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAISheetsChart::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAISheetsChart::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

QString OAISheetsChart::getContentUrl() const {
    return m_content_url;
}
void OAISheetsChart::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAISheetsChart::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAISheetsChart::is_content_url_Valid() const{
    return m_content_url_isValid;
}

OAISheetsChartProperties OAISheetsChart::getSheetsChartProperties() const {
    return m_sheets_chart_properties;
}
void OAISheetsChart::setSheetsChartProperties(const OAISheetsChartProperties &sheets_chart_properties) {
    m_sheets_chart_properties = sheets_chart_properties;
    m_sheets_chart_properties_isSet = true;
}

bool OAISheetsChart::is_sheets_chart_properties_Set() const{
    return m_sheets_chart_properties_isSet;
}

bool OAISheetsChart::is_sheets_chart_properties_Valid() const{
    return m_sheets_chart_properties_isValid;
}

QString OAISheetsChart::getSpreadsheetId() const {
    return m_spreadsheet_id;
}
void OAISheetsChart::setSpreadsheetId(const QString &spreadsheet_id) {
    m_spreadsheet_id = spreadsheet_id;
    m_spreadsheet_id_isSet = true;
}

bool OAISheetsChart::is_spreadsheet_id_Set() const{
    return m_spreadsheet_id_isSet;
}

bool OAISheetsChart::is_spreadsheet_id_Valid() const{
    return m_spreadsheet_id_isValid;
}

bool OAISheetsChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets_chart_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetsChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
