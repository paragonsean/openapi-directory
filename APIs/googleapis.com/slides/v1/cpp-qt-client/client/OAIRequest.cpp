/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_create_image_isSet = false;
    m_create_image_isValid = false;

    m_create_line_isSet = false;
    m_create_line_isValid = false;

    m_create_paragraph_bullets_isSet = false;
    m_create_paragraph_bullets_isValid = false;

    m_create_shape_isSet = false;
    m_create_shape_isValid = false;

    m_create_sheets_chart_isSet = false;
    m_create_sheets_chart_isValid = false;

    m_create_slide_isSet = false;
    m_create_slide_isValid = false;

    m_create_table_isSet = false;
    m_create_table_isValid = false;

    m_create_video_isSet = false;
    m_create_video_isValid = false;

    m_delete_object_isSet = false;
    m_delete_object_isValid = false;

    m_delete_paragraph_bullets_isSet = false;
    m_delete_paragraph_bullets_isValid = false;

    m_delete_table_column_isSet = false;
    m_delete_table_column_isValid = false;

    m_delete_table_row_isSet = false;
    m_delete_table_row_isValid = false;

    m_delete_text_isSet = false;
    m_delete_text_isValid = false;

    m_duplicate_object_isSet = false;
    m_duplicate_object_isValid = false;

    m_group_objects_isSet = false;
    m_group_objects_isValid = false;

    m_insert_table_columns_isSet = false;
    m_insert_table_columns_isValid = false;

    m_insert_table_rows_isSet = false;
    m_insert_table_rows_isValid = false;

    m_insert_text_isSet = false;
    m_insert_text_isValid = false;

    m_merge_table_cells_isSet = false;
    m_merge_table_cells_isValid = false;

    m_refresh_sheets_chart_isSet = false;
    m_refresh_sheets_chart_isValid = false;

    m_replace_all_shapes_with_image_isSet = false;
    m_replace_all_shapes_with_image_isValid = false;

    m_replace_all_shapes_with_sheets_chart_isSet = false;
    m_replace_all_shapes_with_sheets_chart_isValid = false;

    m_replace_all_text_isSet = false;
    m_replace_all_text_isValid = false;

    m_replace_image_isSet = false;
    m_replace_image_isValid = false;

    m_reroute_line_isSet = false;
    m_reroute_line_isValid = false;

    m_ungroup_objects_isSet = false;
    m_ungroup_objects_isValid = false;

    m_unmerge_table_cells_isSet = false;
    m_unmerge_table_cells_isValid = false;

    m_update_image_properties_isSet = false;
    m_update_image_properties_isValid = false;

    m_update_line_category_isSet = false;
    m_update_line_category_isValid = false;

    m_update_line_properties_isSet = false;
    m_update_line_properties_isValid = false;

    m_update_page_element_alt_text_isSet = false;
    m_update_page_element_alt_text_isValid = false;

    m_update_page_element_transform_isSet = false;
    m_update_page_element_transform_isValid = false;

    m_update_page_elements_z_order_isSet = false;
    m_update_page_elements_z_order_isValid = false;

    m_update_page_properties_isSet = false;
    m_update_page_properties_isValid = false;

    m_update_paragraph_style_isSet = false;
    m_update_paragraph_style_isValid = false;

    m_update_shape_properties_isSet = false;
    m_update_shape_properties_isValid = false;

    m_update_slide_properties_isSet = false;
    m_update_slide_properties_isValid = false;

    m_update_slides_position_isSet = false;
    m_update_slides_position_isValid = false;

    m_update_table_border_properties_isSet = false;
    m_update_table_border_properties_isValid = false;

    m_update_table_cell_properties_isSet = false;
    m_update_table_cell_properties_isValid = false;

    m_update_table_column_properties_isSet = false;
    m_update_table_column_properties_isValid = false;

    m_update_table_row_properties_isSet = false;
    m_update_table_row_properties_isValid = false;

    m_update_text_style_isSet = false;
    m_update_text_style_isValid = false;

    m_update_video_properties_isSet = false;
    m_update_video_properties_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_create_image_isValid = ::OpenAPI::fromJsonValue(m_create_image, json[QString("createImage")]);
    m_create_image_isSet = !json[QString("createImage")].isNull() && m_create_image_isValid;

    m_create_line_isValid = ::OpenAPI::fromJsonValue(m_create_line, json[QString("createLine")]);
    m_create_line_isSet = !json[QString("createLine")].isNull() && m_create_line_isValid;

    m_create_paragraph_bullets_isValid = ::OpenAPI::fromJsonValue(m_create_paragraph_bullets, json[QString("createParagraphBullets")]);
    m_create_paragraph_bullets_isSet = !json[QString("createParagraphBullets")].isNull() && m_create_paragraph_bullets_isValid;

    m_create_shape_isValid = ::OpenAPI::fromJsonValue(m_create_shape, json[QString("createShape")]);
    m_create_shape_isSet = !json[QString("createShape")].isNull() && m_create_shape_isValid;

    m_create_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_create_sheets_chart, json[QString("createSheetsChart")]);
    m_create_sheets_chart_isSet = !json[QString("createSheetsChart")].isNull() && m_create_sheets_chart_isValid;

    m_create_slide_isValid = ::OpenAPI::fromJsonValue(m_create_slide, json[QString("createSlide")]);
    m_create_slide_isSet = !json[QString("createSlide")].isNull() && m_create_slide_isValid;

    m_create_table_isValid = ::OpenAPI::fromJsonValue(m_create_table, json[QString("createTable")]);
    m_create_table_isSet = !json[QString("createTable")].isNull() && m_create_table_isValid;

    m_create_video_isValid = ::OpenAPI::fromJsonValue(m_create_video, json[QString("createVideo")]);
    m_create_video_isSet = !json[QString("createVideo")].isNull() && m_create_video_isValid;

    m_delete_object_isValid = ::OpenAPI::fromJsonValue(m_delete_object, json[QString("deleteObject")]);
    m_delete_object_isSet = !json[QString("deleteObject")].isNull() && m_delete_object_isValid;

    m_delete_paragraph_bullets_isValid = ::OpenAPI::fromJsonValue(m_delete_paragraph_bullets, json[QString("deleteParagraphBullets")]);
    m_delete_paragraph_bullets_isSet = !json[QString("deleteParagraphBullets")].isNull() && m_delete_paragraph_bullets_isValid;

    m_delete_table_column_isValid = ::OpenAPI::fromJsonValue(m_delete_table_column, json[QString("deleteTableColumn")]);
    m_delete_table_column_isSet = !json[QString("deleteTableColumn")].isNull() && m_delete_table_column_isValid;

    m_delete_table_row_isValid = ::OpenAPI::fromJsonValue(m_delete_table_row, json[QString("deleteTableRow")]);
    m_delete_table_row_isSet = !json[QString("deleteTableRow")].isNull() && m_delete_table_row_isValid;

    m_delete_text_isValid = ::OpenAPI::fromJsonValue(m_delete_text, json[QString("deleteText")]);
    m_delete_text_isSet = !json[QString("deleteText")].isNull() && m_delete_text_isValid;

    m_duplicate_object_isValid = ::OpenAPI::fromJsonValue(m_duplicate_object, json[QString("duplicateObject")]);
    m_duplicate_object_isSet = !json[QString("duplicateObject")].isNull() && m_duplicate_object_isValid;

    m_group_objects_isValid = ::OpenAPI::fromJsonValue(m_group_objects, json[QString("groupObjects")]);
    m_group_objects_isSet = !json[QString("groupObjects")].isNull() && m_group_objects_isValid;

    m_insert_table_columns_isValid = ::OpenAPI::fromJsonValue(m_insert_table_columns, json[QString("insertTableColumns")]);
    m_insert_table_columns_isSet = !json[QString("insertTableColumns")].isNull() && m_insert_table_columns_isValid;

    m_insert_table_rows_isValid = ::OpenAPI::fromJsonValue(m_insert_table_rows, json[QString("insertTableRows")]);
    m_insert_table_rows_isSet = !json[QString("insertTableRows")].isNull() && m_insert_table_rows_isValid;

    m_insert_text_isValid = ::OpenAPI::fromJsonValue(m_insert_text, json[QString("insertText")]);
    m_insert_text_isSet = !json[QString("insertText")].isNull() && m_insert_text_isValid;

    m_merge_table_cells_isValid = ::OpenAPI::fromJsonValue(m_merge_table_cells, json[QString("mergeTableCells")]);
    m_merge_table_cells_isSet = !json[QString("mergeTableCells")].isNull() && m_merge_table_cells_isValid;

    m_refresh_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_refresh_sheets_chart, json[QString("refreshSheetsChart")]);
    m_refresh_sheets_chart_isSet = !json[QString("refreshSheetsChart")].isNull() && m_refresh_sheets_chart_isValid;

    m_replace_all_shapes_with_image_isValid = ::OpenAPI::fromJsonValue(m_replace_all_shapes_with_image, json[QString("replaceAllShapesWithImage")]);
    m_replace_all_shapes_with_image_isSet = !json[QString("replaceAllShapesWithImage")].isNull() && m_replace_all_shapes_with_image_isValid;

    m_replace_all_shapes_with_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_replace_all_shapes_with_sheets_chart, json[QString("replaceAllShapesWithSheetsChart")]);
    m_replace_all_shapes_with_sheets_chart_isSet = !json[QString("replaceAllShapesWithSheetsChart")].isNull() && m_replace_all_shapes_with_sheets_chart_isValid;

    m_replace_all_text_isValid = ::OpenAPI::fromJsonValue(m_replace_all_text, json[QString("replaceAllText")]);
    m_replace_all_text_isSet = !json[QString("replaceAllText")].isNull() && m_replace_all_text_isValid;

    m_replace_image_isValid = ::OpenAPI::fromJsonValue(m_replace_image, json[QString("replaceImage")]);
    m_replace_image_isSet = !json[QString("replaceImage")].isNull() && m_replace_image_isValid;

    m_reroute_line_isValid = ::OpenAPI::fromJsonValue(m_reroute_line, json[QString("rerouteLine")]);
    m_reroute_line_isSet = !json[QString("rerouteLine")].isNull() && m_reroute_line_isValid;

    m_ungroup_objects_isValid = ::OpenAPI::fromJsonValue(m_ungroup_objects, json[QString("ungroupObjects")]);
    m_ungroup_objects_isSet = !json[QString("ungroupObjects")].isNull() && m_ungroup_objects_isValid;

    m_unmerge_table_cells_isValid = ::OpenAPI::fromJsonValue(m_unmerge_table_cells, json[QString("unmergeTableCells")]);
    m_unmerge_table_cells_isSet = !json[QString("unmergeTableCells")].isNull() && m_unmerge_table_cells_isValid;

    m_update_image_properties_isValid = ::OpenAPI::fromJsonValue(m_update_image_properties, json[QString("updateImageProperties")]);
    m_update_image_properties_isSet = !json[QString("updateImageProperties")].isNull() && m_update_image_properties_isValid;

    m_update_line_category_isValid = ::OpenAPI::fromJsonValue(m_update_line_category, json[QString("updateLineCategory")]);
    m_update_line_category_isSet = !json[QString("updateLineCategory")].isNull() && m_update_line_category_isValid;

    m_update_line_properties_isValid = ::OpenAPI::fromJsonValue(m_update_line_properties, json[QString("updateLineProperties")]);
    m_update_line_properties_isSet = !json[QString("updateLineProperties")].isNull() && m_update_line_properties_isValid;

    m_update_page_element_alt_text_isValid = ::OpenAPI::fromJsonValue(m_update_page_element_alt_text, json[QString("updatePageElementAltText")]);
    m_update_page_element_alt_text_isSet = !json[QString("updatePageElementAltText")].isNull() && m_update_page_element_alt_text_isValid;

    m_update_page_element_transform_isValid = ::OpenAPI::fromJsonValue(m_update_page_element_transform, json[QString("updatePageElementTransform")]);
    m_update_page_element_transform_isSet = !json[QString("updatePageElementTransform")].isNull() && m_update_page_element_transform_isValid;

    m_update_page_elements_z_order_isValid = ::OpenAPI::fromJsonValue(m_update_page_elements_z_order, json[QString("updatePageElementsZOrder")]);
    m_update_page_elements_z_order_isSet = !json[QString("updatePageElementsZOrder")].isNull() && m_update_page_elements_z_order_isValid;

    m_update_page_properties_isValid = ::OpenAPI::fromJsonValue(m_update_page_properties, json[QString("updatePageProperties")]);
    m_update_page_properties_isSet = !json[QString("updatePageProperties")].isNull() && m_update_page_properties_isValid;

    m_update_paragraph_style_isValid = ::OpenAPI::fromJsonValue(m_update_paragraph_style, json[QString("updateParagraphStyle")]);
    m_update_paragraph_style_isSet = !json[QString("updateParagraphStyle")].isNull() && m_update_paragraph_style_isValid;

    m_update_shape_properties_isValid = ::OpenAPI::fromJsonValue(m_update_shape_properties, json[QString("updateShapeProperties")]);
    m_update_shape_properties_isSet = !json[QString("updateShapeProperties")].isNull() && m_update_shape_properties_isValid;

    m_update_slide_properties_isValid = ::OpenAPI::fromJsonValue(m_update_slide_properties, json[QString("updateSlideProperties")]);
    m_update_slide_properties_isSet = !json[QString("updateSlideProperties")].isNull() && m_update_slide_properties_isValid;

    m_update_slides_position_isValid = ::OpenAPI::fromJsonValue(m_update_slides_position, json[QString("updateSlidesPosition")]);
    m_update_slides_position_isSet = !json[QString("updateSlidesPosition")].isNull() && m_update_slides_position_isValid;

    m_update_table_border_properties_isValid = ::OpenAPI::fromJsonValue(m_update_table_border_properties, json[QString("updateTableBorderProperties")]);
    m_update_table_border_properties_isSet = !json[QString("updateTableBorderProperties")].isNull() && m_update_table_border_properties_isValid;

    m_update_table_cell_properties_isValid = ::OpenAPI::fromJsonValue(m_update_table_cell_properties, json[QString("updateTableCellProperties")]);
    m_update_table_cell_properties_isSet = !json[QString("updateTableCellProperties")].isNull() && m_update_table_cell_properties_isValid;

    m_update_table_column_properties_isValid = ::OpenAPI::fromJsonValue(m_update_table_column_properties, json[QString("updateTableColumnProperties")]);
    m_update_table_column_properties_isSet = !json[QString("updateTableColumnProperties")].isNull() && m_update_table_column_properties_isValid;

    m_update_table_row_properties_isValid = ::OpenAPI::fromJsonValue(m_update_table_row_properties, json[QString("updateTableRowProperties")]);
    m_update_table_row_properties_isSet = !json[QString("updateTableRowProperties")].isNull() && m_update_table_row_properties_isValid;

    m_update_text_style_isValid = ::OpenAPI::fromJsonValue(m_update_text_style, json[QString("updateTextStyle")]);
    m_update_text_style_isSet = !json[QString("updateTextStyle")].isNull() && m_update_text_style_isValid;

    m_update_video_properties_isValid = ::OpenAPI::fromJsonValue(m_update_video_properties, json[QString("updateVideoProperties")]);
    m_update_video_properties_isSet = !json[QString("updateVideoProperties")].isNull() && m_update_video_properties_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_create_image.isSet()) {
        obj.insert(QString("createImage"), ::OpenAPI::toJsonValue(m_create_image));
    }
    if (m_create_line.isSet()) {
        obj.insert(QString("createLine"), ::OpenAPI::toJsonValue(m_create_line));
    }
    if (m_create_paragraph_bullets.isSet()) {
        obj.insert(QString("createParagraphBullets"), ::OpenAPI::toJsonValue(m_create_paragraph_bullets));
    }
    if (m_create_shape.isSet()) {
        obj.insert(QString("createShape"), ::OpenAPI::toJsonValue(m_create_shape));
    }
    if (m_create_sheets_chart.isSet()) {
        obj.insert(QString("createSheetsChart"), ::OpenAPI::toJsonValue(m_create_sheets_chart));
    }
    if (m_create_slide.isSet()) {
        obj.insert(QString("createSlide"), ::OpenAPI::toJsonValue(m_create_slide));
    }
    if (m_create_table.isSet()) {
        obj.insert(QString("createTable"), ::OpenAPI::toJsonValue(m_create_table));
    }
    if (m_create_video.isSet()) {
        obj.insert(QString("createVideo"), ::OpenAPI::toJsonValue(m_create_video));
    }
    if (m_delete_object.isSet()) {
        obj.insert(QString("deleteObject"), ::OpenAPI::toJsonValue(m_delete_object));
    }
    if (m_delete_paragraph_bullets.isSet()) {
        obj.insert(QString("deleteParagraphBullets"), ::OpenAPI::toJsonValue(m_delete_paragraph_bullets));
    }
    if (m_delete_table_column.isSet()) {
        obj.insert(QString("deleteTableColumn"), ::OpenAPI::toJsonValue(m_delete_table_column));
    }
    if (m_delete_table_row.isSet()) {
        obj.insert(QString("deleteTableRow"), ::OpenAPI::toJsonValue(m_delete_table_row));
    }
    if (m_delete_text.isSet()) {
        obj.insert(QString("deleteText"), ::OpenAPI::toJsonValue(m_delete_text));
    }
    if (m_duplicate_object.isSet()) {
        obj.insert(QString("duplicateObject"), ::OpenAPI::toJsonValue(m_duplicate_object));
    }
    if (m_group_objects.isSet()) {
        obj.insert(QString("groupObjects"), ::OpenAPI::toJsonValue(m_group_objects));
    }
    if (m_insert_table_columns.isSet()) {
        obj.insert(QString("insertTableColumns"), ::OpenAPI::toJsonValue(m_insert_table_columns));
    }
    if (m_insert_table_rows.isSet()) {
        obj.insert(QString("insertTableRows"), ::OpenAPI::toJsonValue(m_insert_table_rows));
    }
    if (m_insert_text.isSet()) {
        obj.insert(QString("insertText"), ::OpenAPI::toJsonValue(m_insert_text));
    }
    if (m_merge_table_cells.isSet()) {
        obj.insert(QString("mergeTableCells"), ::OpenAPI::toJsonValue(m_merge_table_cells));
    }
    if (m_refresh_sheets_chart.isSet()) {
        obj.insert(QString("refreshSheetsChart"), ::OpenAPI::toJsonValue(m_refresh_sheets_chart));
    }
    if (m_replace_all_shapes_with_image.isSet()) {
        obj.insert(QString("replaceAllShapesWithImage"), ::OpenAPI::toJsonValue(m_replace_all_shapes_with_image));
    }
    if (m_replace_all_shapes_with_sheets_chart.isSet()) {
        obj.insert(QString("replaceAllShapesWithSheetsChart"), ::OpenAPI::toJsonValue(m_replace_all_shapes_with_sheets_chart));
    }
    if (m_replace_all_text.isSet()) {
        obj.insert(QString("replaceAllText"), ::OpenAPI::toJsonValue(m_replace_all_text));
    }
    if (m_replace_image.isSet()) {
        obj.insert(QString("replaceImage"), ::OpenAPI::toJsonValue(m_replace_image));
    }
    if (m_reroute_line.isSet()) {
        obj.insert(QString("rerouteLine"), ::OpenAPI::toJsonValue(m_reroute_line));
    }
    if (m_ungroup_objects.isSet()) {
        obj.insert(QString("ungroupObjects"), ::OpenAPI::toJsonValue(m_ungroup_objects));
    }
    if (m_unmerge_table_cells.isSet()) {
        obj.insert(QString("unmergeTableCells"), ::OpenAPI::toJsonValue(m_unmerge_table_cells));
    }
    if (m_update_image_properties.isSet()) {
        obj.insert(QString("updateImageProperties"), ::OpenAPI::toJsonValue(m_update_image_properties));
    }
    if (m_update_line_category.isSet()) {
        obj.insert(QString("updateLineCategory"), ::OpenAPI::toJsonValue(m_update_line_category));
    }
    if (m_update_line_properties.isSet()) {
        obj.insert(QString("updateLineProperties"), ::OpenAPI::toJsonValue(m_update_line_properties));
    }
    if (m_update_page_element_alt_text.isSet()) {
        obj.insert(QString("updatePageElementAltText"), ::OpenAPI::toJsonValue(m_update_page_element_alt_text));
    }
    if (m_update_page_element_transform.isSet()) {
        obj.insert(QString("updatePageElementTransform"), ::OpenAPI::toJsonValue(m_update_page_element_transform));
    }
    if (m_update_page_elements_z_order.isSet()) {
        obj.insert(QString("updatePageElementsZOrder"), ::OpenAPI::toJsonValue(m_update_page_elements_z_order));
    }
    if (m_update_page_properties.isSet()) {
        obj.insert(QString("updatePageProperties"), ::OpenAPI::toJsonValue(m_update_page_properties));
    }
    if (m_update_paragraph_style.isSet()) {
        obj.insert(QString("updateParagraphStyle"), ::OpenAPI::toJsonValue(m_update_paragraph_style));
    }
    if (m_update_shape_properties.isSet()) {
        obj.insert(QString("updateShapeProperties"), ::OpenAPI::toJsonValue(m_update_shape_properties));
    }
    if (m_update_slide_properties.isSet()) {
        obj.insert(QString("updateSlideProperties"), ::OpenAPI::toJsonValue(m_update_slide_properties));
    }
    if (m_update_slides_position.isSet()) {
        obj.insert(QString("updateSlidesPosition"), ::OpenAPI::toJsonValue(m_update_slides_position));
    }
    if (m_update_table_border_properties.isSet()) {
        obj.insert(QString("updateTableBorderProperties"), ::OpenAPI::toJsonValue(m_update_table_border_properties));
    }
    if (m_update_table_cell_properties.isSet()) {
        obj.insert(QString("updateTableCellProperties"), ::OpenAPI::toJsonValue(m_update_table_cell_properties));
    }
    if (m_update_table_column_properties.isSet()) {
        obj.insert(QString("updateTableColumnProperties"), ::OpenAPI::toJsonValue(m_update_table_column_properties));
    }
    if (m_update_table_row_properties.isSet()) {
        obj.insert(QString("updateTableRowProperties"), ::OpenAPI::toJsonValue(m_update_table_row_properties));
    }
    if (m_update_text_style.isSet()) {
        obj.insert(QString("updateTextStyle"), ::OpenAPI::toJsonValue(m_update_text_style));
    }
    if (m_update_video_properties.isSet()) {
        obj.insert(QString("updateVideoProperties"), ::OpenAPI::toJsonValue(m_update_video_properties));
    }
    return obj;
}

OAICreateImageRequest OAIRequest::getCreateImage() const {
    return m_create_image;
}
void OAIRequest::setCreateImage(const OAICreateImageRequest &create_image) {
    m_create_image = create_image;
    m_create_image_isSet = true;
}

bool OAIRequest::is_create_image_Set() const{
    return m_create_image_isSet;
}

bool OAIRequest::is_create_image_Valid() const{
    return m_create_image_isValid;
}

OAICreateLineRequest OAIRequest::getCreateLine() const {
    return m_create_line;
}
void OAIRequest::setCreateLine(const OAICreateLineRequest &create_line) {
    m_create_line = create_line;
    m_create_line_isSet = true;
}

bool OAIRequest::is_create_line_Set() const{
    return m_create_line_isSet;
}

bool OAIRequest::is_create_line_Valid() const{
    return m_create_line_isValid;
}

OAICreateParagraphBulletsRequest OAIRequest::getCreateParagraphBullets() const {
    return m_create_paragraph_bullets;
}
void OAIRequest::setCreateParagraphBullets(const OAICreateParagraphBulletsRequest &create_paragraph_bullets) {
    m_create_paragraph_bullets = create_paragraph_bullets;
    m_create_paragraph_bullets_isSet = true;
}

bool OAIRequest::is_create_paragraph_bullets_Set() const{
    return m_create_paragraph_bullets_isSet;
}

bool OAIRequest::is_create_paragraph_bullets_Valid() const{
    return m_create_paragraph_bullets_isValid;
}

OAICreateShapeRequest OAIRequest::getCreateShape() const {
    return m_create_shape;
}
void OAIRequest::setCreateShape(const OAICreateShapeRequest &create_shape) {
    m_create_shape = create_shape;
    m_create_shape_isSet = true;
}

bool OAIRequest::is_create_shape_Set() const{
    return m_create_shape_isSet;
}

bool OAIRequest::is_create_shape_Valid() const{
    return m_create_shape_isValid;
}

OAICreateSheetsChartRequest OAIRequest::getCreateSheetsChart() const {
    return m_create_sheets_chart;
}
void OAIRequest::setCreateSheetsChart(const OAICreateSheetsChartRequest &create_sheets_chart) {
    m_create_sheets_chart = create_sheets_chart;
    m_create_sheets_chart_isSet = true;
}

bool OAIRequest::is_create_sheets_chart_Set() const{
    return m_create_sheets_chart_isSet;
}

bool OAIRequest::is_create_sheets_chart_Valid() const{
    return m_create_sheets_chart_isValid;
}

OAICreateSlideRequest OAIRequest::getCreateSlide() const {
    return m_create_slide;
}
void OAIRequest::setCreateSlide(const OAICreateSlideRequest &create_slide) {
    m_create_slide = create_slide;
    m_create_slide_isSet = true;
}

bool OAIRequest::is_create_slide_Set() const{
    return m_create_slide_isSet;
}

bool OAIRequest::is_create_slide_Valid() const{
    return m_create_slide_isValid;
}

OAICreateTableRequest OAIRequest::getCreateTable() const {
    return m_create_table;
}
void OAIRequest::setCreateTable(const OAICreateTableRequest &create_table) {
    m_create_table = create_table;
    m_create_table_isSet = true;
}

bool OAIRequest::is_create_table_Set() const{
    return m_create_table_isSet;
}

bool OAIRequest::is_create_table_Valid() const{
    return m_create_table_isValid;
}

OAICreateVideoRequest OAIRequest::getCreateVideo() const {
    return m_create_video;
}
void OAIRequest::setCreateVideo(const OAICreateVideoRequest &create_video) {
    m_create_video = create_video;
    m_create_video_isSet = true;
}

bool OAIRequest::is_create_video_Set() const{
    return m_create_video_isSet;
}

bool OAIRequest::is_create_video_Valid() const{
    return m_create_video_isValid;
}

OAIDeleteObjectRequest OAIRequest::getDeleteObject() const {
    return m_delete_object;
}
void OAIRequest::setDeleteObject(const OAIDeleteObjectRequest &delete_object) {
    m_delete_object = delete_object;
    m_delete_object_isSet = true;
}

bool OAIRequest::is_delete_object_Set() const{
    return m_delete_object_isSet;
}

bool OAIRequest::is_delete_object_Valid() const{
    return m_delete_object_isValid;
}

OAIDeleteParagraphBulletsRequest OAIRequest::getDeleteParagraphBullets() const {
    return m_delete_paragraph_bullets;
}
void OAIRequest::setDeleteParagraphBullets(const OAIDeleteParagraphBulletsRequest &delete_paragraph_bullets) {
    m_delete_paragraph_bullets = delete_paragraph_bullets;
    m_delete_paragraph_bullets_isSet = true;
}

bool OAIRequest::is_delete_paragraph_bullets_Set() const{
    return m_delete_paragraph_bullets_isSet;
}

bool OAIRequest::is_delete_paragraph_bullets_Valid() const{
    return m_delete_paragraph_bullets_isValid;
}

OAIDeleteTableColumnRequest OAIRequest::getDeleteTableColumn() const {
    return m_delete_table_column;
}
void OAIRequest::setDeleteTableColumn(const OAIDeleteTableColumnRequest &delete_table_column) {
    m_delete_table_column = delete_table_column;
    m_delete_table_column_isSet = true;
}

bool OAIRequest::is_delete_table_column_Set() const{
    return m_delete_table_column_isSet;
}

bool OAIRequest::is_delete_table_column_Valid() const{
    return m_delete_table_column_isValid;
}

OAIDeleteTableRowRequest OAIRequest::getDeleteTableRow() const {
    return m_delete_table_row;
}
void OAIRequest::setDeleteTableRow(const OAIDeleteTableRowRequest &delete_table_row) {
    m_delete_table_row = delete_table_row;
    m_delete_table_row_isSet = true;
}

bool OAIRequest::is_delete_table_row_Set() const{
    return m_delete_table_row_isSet;
}

bool OAIRequest::is_delete_table_row_Valid() const{
    return m_delete_table_row_isValid;
}

OAIDeleteTextRequest OAIRequest::getDeleteText() const {
    return m_delete_text;
}
void OAIRequest::setDeleteText(const OAIDeleteTextRequest &delete_text) {
    m_delete_text = delete_text;
    m_delete_text_isSet = true;
}

bool OAIRequest::is_delete_text_Set() const{
    return m_delete_text_isSet;
}

bool OAIRequest::is_delete_text_Valid() const{
    return m_delete_text_isValid;
}

OAIDuplicateObjectRequest OAIRequest::getDuplicateObject() const {
    return m_duplicate_object;
}
void OAIRequest::setDuplicateObject(const OAIDuplicateObjectRequest &duplicate_object) {
    m_duplicate_object = duplicate_object;
    m_duplicate_object_isSet = true;
}

bool OAIRequest::is_duplicate_object_Set() const{
    return m_duplicate_object_isSet;
}

bool OAIRequest::is_duplicate_object_Valid() const{
    return m_duplicate_object_isValid;
}

OAIGroupObjectsRequest OAIRequest::getGroupObjects() const {
    return m_group_objects;
}
void OAIRequest::setGroupObjects(const OAIGroupObjectsRequest &group_objects) {
    m_group_objects = group_objects;
    m_group_objects_isSet = true;
}

bool OAIRequest::is_group_objects_Set() const{
    return m_group_objects_isSet;
}

bool OAIRequest::is_group_objects_Valid() const{
    return m_group_objects_isValid;
}

OAIInsertTableColumnsRequest OAIRequest::getInsertTableColumns() const {
    return m_insert_table_columns;
}
void OAIRequest::setInsertTableColumns(const OAIInsertTableColumnsRequest &insert_table_columns) {
    m_insert_table_columns = insert_table_columns;
    m_insert_table_columns_isSet = true;
}

bool OAIRequest::is_insert_table_columns_Set() const{
    return m_insert_table_columns_isSet;
}

bool OAIRequest::is_insert_table_columns_Valid() const{
    return m_insert_table_columns_isValid;
}

OAIInsertTableRowsRequest OAIRequest::getInsertTableRows() const {
    return m_insert_table_rows;
}
void OAIRequest::setInsertTableRows(const OAIInsertTableRowsRequest &insert_table_rows) {
    m_insert_table_rows = insert_table_rows;
    m_insert_table_rows_isSet = true;
}

bool OAIRequest::is_insert_table_rows_Set() const{
    return m_insert_table_rows_isSet;
}

bool OAIRequest::is_insert_table_rows_Valid() const{
    return m_insert_table_rows_isValid;
}

OAIInsertTextRequest OAIRequest::getInsertText() const {
    return m_insert_text;
}
void OAIRequest::setInsertText(const OAIInsertTextRequest &insert_text) {
    m_insert_text = insert_text;
    m_insert_text_isSet = true;
}

bool OAIRequest::is_insert_text_Set() const{
    return m_insert_text_isSet;
}

bool OAIRequest::is_insert_text_Valid() const{
    return m_insert_text_isValid;
}

OAIMergeTableCellsRequest OAIRequest::getMergeTableCells() const {
    return m_merge_table_cells;
}
void OAIRequest::setMergeTableCells(const OAIMergeTableCellsRequest &merge_table_cells) {
    m_merge_table_cells = merge_table_cells;
    m_merge_table_cells_isSet = true;
}

bool OAIRequest::is_merge_table_cells_Set() const{
    return m_merge_table_cells_isSet;
}

bool OAIRequest::is_merge_table_cells_Valid() const{
    return m_merge_table_cells_isValid;
}

OAIRefreshSheetsChartRequest OAIRequest::getRefreshSheetsChart() const {
    return m_refresh_sheets_chart;
}
void OAIRequest::setRefreshSheetsChart(const OAIRefreshSheetsChartRequest &refresh_sheets_chart) {
    m_refresh_sheets_chart = refresh_sheets_chart;
    m_refresh_sheets_chart_isSet = true;
}

bool OAIRequest::is_refresh_sheets_chart_Set() const{
    return m_refresh_sheets_chart_isSet;
}

bool OAIRequest::is_refresh_sheets_chart_Valid() const{
    return m_refresh_sheets_chart_isValid;
}

OAIReplaceAllShapesWithImageRequest OAIRequest::getReplaceAllShapesWithImage() const {
    return m_replace_all_shapes_with_image;
}
void OAIRequest::setReplaceAllShapesWithImage(const OAIReplaceAllShapesWithImageRequest &replace_all_shapes_with_image) {
    m_replace_all_shapes_with_image = replace_all_shapes_with_image;
    m_replace_all_shapes_with_image_isSet = true;
}

bool OAIRequest::is_replace_all_shapes_with_image_Set() const{
    return m_replace_all_shapes_with_image_isSet;
}

bool OAIRequest::is_replace_all_shapes_with_image_Valid() const{
    return m_replace_all_shapes_with_image_isValid;
}

OAIReplaceAllShapesWithSheetsChartRequest OAIRequest::getReplaceAllShapesWithSheetsChart() const {
    return m_replace_all_shapes_with_sheets_chart;
}
void OAIRequest::setReplaceAllShapesWithSheetsChart(const OAIReplaceAllShapesWithSheetsChartRequest &replace_all_shapes_with_sheets_chart) {
    m_replace_all_shapes_with_sheets_chart = replace_all_shapes_with_sheets_chart;
    m_replace_all_shapes_with_sheets_chart_isSet = true;
}

bool OAIRequest::is_replace_all_shapes_with_sheets_chart_Set() const{
    return m_replace_all_shapes_with_sheets_chart_isSet;
}

bool OAIRequest::is_replace_all_shapes_with_sheets_chart_Valid() const{
    return m_replace_all_shapes_with_sheets_chart_isValid;
}

OAIReplaceAllTextRequest OAIRequest::getReplaceAllText() const {
    return m_replace_all_text;
}
void OAIRequest::setReplaceAllText(const OAIReplaceAllTextRequest &replace_all_text) {
    m_replace_all_text = replace_all_text;
    m_replace_all_text_isSet = true;
}

bool OAIRequest::is_replace_all_text_Set() const{
    return m_replace_all_text_isSet;
}

bool OAIRequest::is_replace_all_text_Valid() const{
    return m_replace_all_text_isValid;
}

OAIReplaceImageRequest OAIRequest::getReplaceImage() const {
    return m_replace_image;
}
void OAIRequest::setReplaceImage(const OAIReplaceImageRequest &replace_image) {
    m_replace_image = replace_image;
    m_replace_image_isSet = true;
}

bool OAIRequest::is_replace_image_Set() const{
    return m_replace_image_isSet;
}

bool OAIRequest::is_replace_image_Valid() const{
    return m_replace_image_isValid;
}

OAIRerouteLineRequest OAIRequest::getRerouteLine() const {
    return m_reroute_line;
}
void OAIRequest::setRerouteLine(const OAIRerouteLineRequest &reroute_line) {
    m_reroute_line = reroute_line;
    m_reroute_line_isSet = true;
}

bool OAIRequest::is_reroute_line_Set() const{
    return m_reroute_line_isSet;
}

bool OAIRequest::is_reroute_line_Valid() const{
    return m_reroute_line_isValid;
}

OAIUngroupObjectsRequest OAIRequest::getUngroupObjects() const {
    return m_ungroup_objects;
}
void OAIRequest::setUngroupObjects(const OAIUngroupObjectsRequest &ungroup_objects) {
    m_ungroup_objects = ungroup_objects;
    m_ungroup_objects_isSet = true;
}

bool OAIRequest::is_ungroup_objects_Set() const{
    return m_ungroup_objects_isSet;
}

bool OAIRequest::is_ungroup_objects_Valid() const{
    return m_ungroup_objects_isValid;
}

OAIUnmergeTableCellsRequest OAIRequest::getUnmergeTableCells() const {
    return m_unmerge_table_cells;
}
void OAIRequest::setUnmergeTableCells(const OAIUnmergeTableCellsRequest &unmerge_table_cells) {
    m_unmerge_table_cells = unmerge_table_cells;
    m_unmerge_table_cells_isSet = true;
}

bool OAIRequest::is_unmerge_table_cells_Set() const{
    return m_unmerge_table_cells_isSet;
}

bool OAIRequest::is_unmerge_table_cells_Valid() const{
    return m_unmerge_table_cells_isValid;
}

OAIUpdateImagePropertiesRequest OAIRequest::getUpdateImageProperties() const {
    return m_update_image_properties;
}
void OAIRequest::setUpdateImageProperties(const OAIUpdateImagePropertiesRequest &update_image_properties) {
    m_update_image_properties = update_image_properties;
    m_update_image_properties_isSet = true;
}

bool OAIRequest::is_update_image_properties_Set() const{
    return m_update_image_properties_isSet;
}

bool OAIRequest::is_update_image_properties_Valid() const{
    return m_update_image_properties_isValid;
}

OAIUpdateLineCategoryRequest OAIRequest::getUpdateLineCategory() const {
    return m_update_line_category;
}
void OAIRequest::setUpdateLineCategory(const OAIUpdateLineCategoryRequest &update_line_category) {
    m_update_line_category = update_line_category;
    m_update_line_category_isSet = true;
}

bool OAIRequest::is_update_line_category_Set() const{
    return m_update_line_category_isSet;
}

bool OAIRequest::is_update_line_category_Valid() const{
    return m_update_line_category_isValid;
}

OAIUpdateLinePropertiesRequest OAIRequest::getUpdateLineProperties() const {
    return m_update_line_properties;
}
void OAIRequest::setUpdateLineProperties(const OAIUpdateLinePropertiesRequest &update_line_properties) {
    m_update_line_properties = update_line_properties;
    m_update_line_properties_isSet = true;
}

bool OAIRequest::is_update_line_properties_Set() const{
    return m_update_line_properties_isSet;
}

bool OAIRequest::is_update_line_properties_Valid() const{
    return m_update_line_properties_isValid;
}

OAIUpdatePageElementAltTextRequest OAIRequest::getUpdatePageElementAltText() const {
    return m_update_page_element_alt_text;
}
void OAIRequest::setUpdatePageElementAltText(const OAIUpdatePageElementAltTextRequest &update_page_element_alt_text) {
    m_update_page_element_alt_text = update_page_element_alt_text;
    m_update_page_element_alt_text_isSet = true;
}

bool OAIRequest::is_update_page_element_alt_text_Set() const{
    return m_update_page_element_alt_text_isSet;
}

bool OAIRequest::is_update_page_element_alt_text_Valid() const{
    return m_update_page_element_alt_text_isValid;
}

OAIUpdatePageElementTransformRequest OAIRequest::getUpdatePageElementTransform() const {
    return m_update_page_element_transform;
}
void OAIRequest::setUpdatePageElementTransform(const OAIUpdatePageElementTransformRequest &update_page_element_transform) {
    m_update_page_element_transform = update_page_element_transform;
    m_update_page_element_transform_isSet = true;
}

bool OAIRequest::is_update_page_element_transform_Set() const{
    return m_update_page_element_transform_isSet;
}

bool OAIRequest::is_update_page_element_transform_Valid() const{
    return m_update_page_element_transform_isValid;
}

OAIUpdatePageElementsZOrderRequest OAIRequest::getUpdatePageElementsZOrder() const {
    return m_update_page_elements_z_order;
}
void OAIRequest::setUpdatePageElementsZOrder(const OAIUpdatePageElementsZOrderRequest &update_page_elements_z_order) {
    m_update_page_elements_z_order = update_page_elements_z_order;
    m_update_page_elements_z_order_isSet = true;
}

bool OAIRequest::is_update_page_elements_z_order_Set() const{
    return m_update_page_elements_z_order_isSet;
}

bool OAIRequest::is_update_page_elements_z_order_Valid() const{
    return m_update_page_elements_z_order_isValid;
}

OAIUpdatePagePropertiesRequest OAIRequest::getUpdatePageProperties() const {
    return m_update_page_properties;
}
void OAIRequest::setUpdatePageProperties(const OAIUpdatePagePropertiesRequest &update_page_properties) {
    m_update_page_properties = update_page_properties;
    m_update_page_properties_isSet = true;
}

bool OAIRequest::is_update_page_properties_Set() const{
    return m_update_page_properties_isSet;
}

bool OAIRequest::is_update_page_properties_Valid() const{
    return m_update_page_properties_isValid;
}

OAIUpdateParagraphStyleRequest OAIRequest::getUpdateParagraphStyle() const {
    return m_update_paragraph_style;
}
void OAIRequest::setUpdateParagraphStyle(const OAIUpdateParagraphStyleRequest &update_paragraph_style) {
    m_update_paragraph_style = update_paragraph_style;
    m_update_paragraph_style_isSet = true;
}

bool OAIRequest::is_update_paragraph_style_Set() const{
    return m_update_paragraph_style_isSet;
}

bool OAIRequest::is_update_paragraph_style_Valid() const{
    return m_update_paragraph_style_isValid;
}

OAIUpdateShapePropertiesRequest OAIRequest::getUpdateShapeProperties() const {
    return m_update_shape_properties;
}
void OAIRequest::setUpdateShapeProperties(const OAIUpdateShapePropertiesRequest &update_shape_properties) {
    m_update_shape_properties = update_shape_properties;
    m_update_shape_properties_isSet = true;
}

bool OAIRequest::is_update_shape_properties_Set() const{
    return m_update_shape_properties_isSet;
}

bool OAIRequest::is_update_shape_properties_Valid() const{
    return m_update_shape_properties_isValid;
}

OAIUpdateSlidePropertiesRequest OAIRequest::getUpdateSlideProperties() const {
    return m_update_slide_properties;
}
void OAIRequest::setUpdateSlideProperties(const OAIUpdateSlidePropertiesRequest &update_slide_properties) {
    m_update_slide_properties = update_slide_properties;
    m_update_slide_properties_isSet = true;
}

bool OAIRequest::is_update_slide_properties_Set() const{
    return m_update_slide_properties_isSet;
}

bool OAIRequest::is_update_slide_properties_Valid() const{
    return m_update_slide_properties_isValid;
}

OAIUpdateSlidesPositionRequest OAIRequest::getUpdateSlidesPosition() const {
    return m_update_slides_position;
}
void OAIRequest::setUpdateSlidesPosition(const OAIUpdateSlidesPositionRequest &update_slides_position) {
    m_update_slides_position = update_slides_position;
    m_update_slides_position_isSet = true;
}

bool OAIRequest::is_update_slides_position_Set() const{
    return m_update_slides_position_isSet;
}

bool OAIRequest::is_update_slides_position_Valid() const{
    return m_update_slides_position_isValid;
}

OAIUpdateTableBorderPropertiesRequest OAIRequest::getUpdateTableBorderProperties() const {
    return m_update_table_border_properties;
}
void OAIRequest::setUpdateTableBorderProperties(const OAIUpdateTableBorderPropertiesRequest &update_table_border_properties) {
    m_update_table_border_properties = update_table_border_properties;
    m_update_table_border_properties_isSet = true;
}

bool OAIRequest::is_update_table_border_properties_Set() const{
    return m_update_table_border_properties_isSet;
}

bool OAIRequest::is_update_table_border_properties_Valid() const{
    return m_update_table_border_properties_isValid;
}

OAIUpdateTableCellPropertiesRequest OAIRequest::getUpdateTableCellProperties() const {
    return m_update_table_cell_properties;
}
void OAIRequest::setUpdateTableCellProperties(const OAIUpdateTableCellPropertiesRequest &update_table_cell_properties) {
    m_update_table_cell_properties = update_table_cell_properties;
    m_update_table_cell_properties_isSet = true;
}

bool OAIRequest::is_update_table_cell_properties_Set() const{
    return m_update_table_cell_properties_isSet;
}

bool OAIRequest::is_update_table_cell_properties_Valid() const{
    return m_update_table_cell_properties_isValid;
}

OAIUpdateTableColumnPropertiesRequest OAIRequest::getUpdateTableColumnProperties() const {
    return m_update_table_column_properties;
}
void OAIRequest::setUpdateTableColumnProperties(const OAIUpdateTableColumnPropertiesRequest &update_table_column_properties) {
    m_update_table_column_properties = update_table_column_properties;
    m_update_table_column_properties_isSet = true;
}

bool OAIRequest::is_update_table_column_properties_Set() const{
    return m_update_table_column_properties_isSet;
}

bool OAIRequest::is_update_table_column_properties_Valid() const{
    return m_update_table_column_properties_isValid;
}

OAIUpdateTableRowPropertiesRequest OAIRequest::getUpdateTableRowProperties() const {
    return m_update_table_row_properties;
}
void OAIRequest::setUpdateTableRowProperties(const OAIUpdateTableRowPropertiesRequest &update_table_row_properties) {
    m_update_table_row_properties = update_table_row_properties;
    m_update_table_row_properties_isSet = true;
}

bool OAIRequest::is_update_table_row_properties_Set() const{
    return m_update_table_row_properties_isSet;
}

bool OAIRequest::is_update_table_row_properties_Valid() const{
    return m_update_table_row_properties_isValid;
}

OAIUpdateTextStyleRequest OAIRequest::getUpdateTextStyle() const {
    return m_update_text_style;
}
void OAIRequest::setUpdateTextStyle(const OAIUpdateTextStyleRequest &update_text_style) {
    m_update_text_style = update_text_style;
    m_update_text_style_isSet = true;
}

bool OAIRequest::is_update_text_style_Set() const{
    return m_update_text_style_isSet;
}

bool OAIRequest::is_update_text_style_Valid() const{
    return m_update_text_style_isValid;
}

OAIUpdateVideoPropertiesRequest OAIRequest::getUpdateVideoProperties() const {
    return m_update_video_properties;
}
void OAIRequest::setUpdateVideoProperties(const OAIUpdateVideoPropertiesRequest &update_video_properties) {
    m_update_video_properties = update_video_properties;
    m_update_video_properties_isSet = true;
}

bool OAIRequest::is_update_video_properties_Set() const{
    return m_update_video_properties_isSet;
}

bool OAIRequest::is_update_video_properties_Valid() const{
    return m_update_video_properties_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_paragraph_bullets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_slide.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_paragraph_bullets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_table_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_table_row.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_table_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_table_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_table_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_shapes_with_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_shapes_with_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reroute_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ungroup_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmerge_table_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_image_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_line_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_line_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_page_element_alt_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_page_element_transform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_page_elements_z_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_page_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_paragraph_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_shape_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_slide_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_slides_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_border_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_cell_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_column_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_row_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_video_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
