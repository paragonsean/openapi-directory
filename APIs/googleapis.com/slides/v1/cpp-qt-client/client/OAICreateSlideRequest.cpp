/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSlideRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSlideRequest::OAICreateSlideRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSlideRequest::OAICreateSlideRequest() {
    this->initializeModel();
}

OAICreateSlideRequest::~OAICreateSlideRequest() {}

void OAICreateSlideRequest::initializeModel() {

    m_insertion_index_isSet = false;
    m_insertion_index_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_placeholder_id_mappings_isSet = false;
    m_placeholder_id_mappings_isValid = false;

    m_slide_layout_reference_isSet = false;
    m_slide_layout_reference_isValid = false;
}

void OAICreateSlideRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSlideRequest::fromJsonObject(QJsonObject json) {

    m_insertion_index_isValid = ::OpenAPI::fromJsonValue(m_insertion_index, json[QString("insertionIndex")]);
    m_insertion_index_isSet = !json[QString("insertionIndex")].isNull() && m_insertion_index_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_placeholder_id_mappings_isValid = ::OpenAPI::fromJsonValue(m_placeholder_id_mappings, json[QString("placeholderIdMappings")]);
    m_placeholder_id_mappings_isSet = !json[QString("placeholderIdMappings")].isNull() && m_placeholder_id_mappings_isValid;

    m_slide_layout_reference_isValid = ::OpenAPI::fromJsonValue(m_slide_layout_reference, json[QString("slideLayoutReference")]);
    m_slide_layout_reference_isSet = !json[QString("slideLayoutReference")].isNull() && m_slide_layout_reference_isValid;
}

QString OAICreateSlideRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSlideRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_insertion_index_isSet) {
        obj.insert(QString("insertionIndex"), ::OpenAPI::toJsonValue(m_insertion_index));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_placeholder_id_mappings.size() > 0) {
        obj.insert(QString("placeholderIdMappings"), ::OpenAPI::toJsonValue(m_placeholder_id_mappings));
    }
    if (m_slide_layout_reference.isSet()) {
        obj.insert(QString("slideLayoutReference"), ::OpenAPI::toJsonValue(m_slide_layout_reference));
    }
    return obj;
}

qint32 OAICreateSlideRequest::getInsertionIndex() const {
    return m_insertion_index;
}
void OAICreateSlideRequest::setInsertionIndex(const qint32 &insertion_index) {
    m_insertion_index = insertion_index;
    m_insertion_index_isSet = true;
}

bool OAICreateSlideRequest::is_insertion_index_Set() const{
    return m_insertion_index_isSet;
}

bool OAICreateSlideRequest::is_insertion_index_Valid() const{
    return m_insertion_index_isValid;
}

QString OAICreateSlideRequest::getObjectId() const {
    return m_object_id;
}
void OAICreateSlideRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICreateSlideRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICreateSlideRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QList<OAILayoutPlaceholderIdMapping> OAICreateSlideRequest::getPlaceholderIdMappings() const {
    return m_placeholder_id_mappings;
}
void OAICreateSlideRequest::setPlaceholderIdMappings(const QList<OAILayoutPlaceholderIdMapping> &placeholder_id_mappings) {
    m_placeholder_id_mappings = placeholder_id_mappings;
    m_placeholder_id_mappings_isSet = true;
}

bool OAICreateSlideRequest::is_placeholder_id_mappings_Set() const{
    return m_placeholder_id_mappings_isSet;
}

bool OAICreateSlideRequest::is_placeholder_id_mappings_Valid() const{
    return m_placeholder_id_mappings_isValid;
}

OAILayoutReference OAICreateSlideRequest::getSlideLayoutReference() const {
    return m_slide_layout_reference;
}
void OAICreateSlideRequest::setSlideLayoutReference(const OAILayoutReference &slide_layout_reference) {
    m_slide_layout_reference = slide_layout_reference;
    m_slide_layout_reference_isSet = true;
}

bool OAICreateSlideRequest::is_slide_layout_reference_Set() const{
    return m_slide_layout_reference_isSet;
}

bool OAICreateSlideRequest::is_slide_layout_reference_Valid() const{
    return m_slide_layout_reference_isValid;
}

bool OAICreateSlideRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insertion_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placeholder_id_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_layout_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSlideRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
