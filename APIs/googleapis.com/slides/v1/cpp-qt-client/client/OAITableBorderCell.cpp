/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableBorderCell.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableBorderCell::OAITableBorderCell(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableBorderCell::OAITableBorderCell() {
    this->initializeModel();
}

OAITableBorderCell::~OAITableBorderCell() {}

void OAITableBorderCell::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_table_border_properties_isSet = false;
    m_table_border_properties_isValid = false;
}

void OAITableBorderCell::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableBorderCell::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_table_border_properties_isValid = ::OpenAPI::fromJsonValue(m_table_border_properties, json[QString("tableBorderProperties")]);
    m_table_border_properties_isSet = !json[QString("tableBorderProperties")].isNull() && m_table_border_properties_isValid;
}

QString OAITableBorderCell::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableBorderCell::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_table_border_properties.isSet()) {
        obj.insert(QString("tableBorderProperties"), ::OpenAPI::toJsonValue(m_table_border_properties));
    }
    return obj;
}

OAITableCellLocation OAITableBorderCell::getLocation() const {
    return m_location;
}
void OAITableBorderCell::setLocation(const OAITableCellLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITableBorderCell::is_location_Set() const{
    return m_location_isSet;
}

bool OAITableBorderCell::is_location_Valid() const{
    return m_location_isValid;
}

OAITableBorderProperties OAITableBorderCell::getTableBorderProperties() const {
    return m_table_border_properties;
}
void OAITableBorderCell::setTableBorderProperties(const OAITableBorderProperties &table_border_properties) {
    m_table_border_properties = table_border_properties;
    m_table_border_properties_isSet = true;
}

bool OAITableBorderCell::is_table_border_properties_Set() const{
    return m_table_border_properties_isSet;
}

bool OAITableBorderCell::is_table_border_properties_Valid() const{
    return m_table_border_properties_isValid;
}

bool OAITableBorderCell::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_border_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableBorderCell::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
