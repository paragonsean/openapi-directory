/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertTextRequest::OAIInsertTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertTextRequest::OAIInsertTextRequest() {
    this->initializeModel();
}

OAIInsertTextRequest::~OAIInsertTextRequest() {}

void OAIInsertTextRequest::initializeModel() {

    m_cell_location_isSet = false;
    m_cell_location_isValid = false;

    m_insertion_index_isSet = false;
    m_insertion_index_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIInsertTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertTextRequest::fromJsonObject(QJsonObject json) {

    m_cell_location_isValid = ::OpenAPI::fromJsonValue(m_cell_location, json[QString("cellLocation")]);
    m_cell_location_isSet = !json[QString("cellLocation")].isNull() && m_cell_location_isValid;

    m_insertion_index_isValid = ::OpenAPI::fromJsonValue(m_insertion_index, json[QString("insertionIndex")]);
    m_insertion_index_isSet = !json[QString("insertionIndex")].isNull() && m_insertion_index_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIInsertTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cell_location.isSet()) {
        obj.insert(QString("cellLocation"), ::OpenAPI::toJsonValue(m_cell_location));
    }
    if (m_insertion_index_isSet) {
        obj.insert(QString("insertionIndex"), ::OpenAPI::toJsonValue(m_insertion_index));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAITableCellLocation OAIInsertTextRequest::getCellLocation() const {
    return m_cell_location;
}
void OAIInsertTextRequest::setCellLocation(const OAITableCellLocation &cell_location) {
    m_cell_location = cell_location;
    m_cell_location_isSet = true;
}

bool OAIInsertTextRequest::is_cell_location_Set() const{
    return m_cell_location_isSet;
}

bool OAIInsertTextRequest::is_cell_location_Valid() const{
    return m_cell_location_isValid;
}

qint32 OAIInsertTextRequest::getInsertionIndex() const {
    return m_insertion_index;
}
void OAIInsertTextRequest::setInsertionIndex(const qint32 &insertion_index) {
    m_insertion_index = insertion_index;
    m_insertion_index_isSet = true;
}

bool OAIInsertTextRequest::is_insertion_index_Set() const{
    return m_insertion_index_isSet;
}

bool OAIInsertTextRequest::is_insertion_index_Valid() const{
    return m_insertion_index_isValid;
}

QString OAIInsertTextRequest::getObjectId() const {
    return m_object_id;
}
void OAIInsertTextRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIInsertTextRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIInsertTextRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIInsertTextRequest::getText() const {
    return m_text;
}
void OAIInsertTextRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIInsertTextRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIInsertTextRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIInsertTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
