/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBullet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBullet::OAIBullet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBullet::OAIBullet() {
    this->initializeModel();
}

OAIBullet::~OAIBullet() {}

void OAIBullet::initializeModel() {

    m_bullet_style_isSet = false;
    m_bullet_style_isValid = false;

    m_glyph_isSet = false;
    m_glyph_isValid = false;

    m_list_id_isSet = false;
    m_list_id_isValid = false;

    m_nesting_level_isSet = false;
    m_nesting_level_isValid = false;
}

void OAIBullet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBullet::fromJsonObject(QJsonObject json) {

    m_bullet_style_isValid = ::OpenAPI::fromJsonValue(m_bullet_style, json[QString("bulletStyle")]);
    m_bullet_style_isSet = !json[QString("bulletStyle")].isNull() && m_bullet_style_isValid;

    m_glyph_isValid = ::OpenAPI::fromJsonValue(m_glyph, json[QString("glyph")]);
    m_glyph_isSet = !json[QString("glyph")].isNull() && m_glyph_isValid;

    m_list_id_isValid = ::OpenAPI::fromJsonValue(m_list_id, json[QString("listId")]);
    m_list_id_isSet = !json[QString("listId")].isNull() && m_list_id_isValid;

    m_nesting_level_isValid = ::OpenAPI::fromJsonValue(m_nesting_level, json[QString("nestingLevel")]);
    m_nesting_level_isSet = !json[QString("nestingLevel")].isNull() && m_nesting_level_isValid;
}

QString OAIBullet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBullet::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet_style.isSet()) {
        obj.insert(QString("bulletStyle"), ::OpenAPI::toJsonValue(m_bullet_style));
    }
    if (m_glyph_isSet) {
        obj.insert(QString("glyph"), ::OpenAPI::toJsonValue(m_glyph));
    }
    if (m_list_id_isSet) {
        obj.insert(QString("listId"), ::OpenAPI::toJsonValue(m_list_id));
    }
    if (m_nesting_level_isSet) {
        obj.insert(QString("nestingLevel"), ::OpenAPI::toJsonValue(m_nesting_level));
    }
    return obj;
}

OAITextStyle OAIBullet::getBulletStyle() const {
    return m_bullet_style;
}
void OAIBullet::setBulletStyle(const OAITextStyle &bullet_style) {
    m_bullet_style = bullet_style;
    m_bullet_style_isSet = true;
}

bool OAIBullet::is_bullet_style_Set() const{
    return m_bullet_style_isSet;
}

bool OAIBullet::is_bullet_style_Valid() const{
    return m_bullet_style_isValid;
}

QString OAIBullet::getGlyph() const {
    return m_glyph;
}
void OAIBullet::setGlyph(const QString &glyph) {
    m_glyph = glyph;
    m_glyph_isSet = true;
}

bool OAIBullet::is_glyph_Set() const{
    return m_glyph_isSet;
}

bool OAIBullet::is_glyph_Valid() const{
    return m_glyph_isValid;
}

QString OAIBullet::getListId() const {
    return m_list_id;
}
void OAIBullet::setListId(const QString &list_id) {
    m_list_id = list_id;
    m_list_id_isSet = true;
}

bool OAIBullet::is_list_id_Set() const{
    return m_list_id_isSet;
}

bool OAIBullet::is_list_id_Valid() const{
    return m_list_id_isValid;
}

qint32 OAIBullet::getNestingLevel() const {
    return m_nesting_level;
}
void OAIBullet::setNestingLevel(const qint32 &nesting_level) {
    m_nesting_level = nesting_level;
    m_nesting_level_isSet = true;
}

bool OAIBullet::is_nesting_level_Set() const{
    return m_nesting_level_isSet;
}

bool OAIBullet::is_nesting_level_Valid() const{
    return m_nesting_level_isValid;
}

bool OAIBullet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nesting_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBullet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
