/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShapeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShapeProperties::OAIShapeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShapeProperties::OAIShapeProperties() {
    this->initializeModel();
}

OAIShapeProperties::~OAIShapeProperties() {}

void OAIShapeProperties::initializeModel() {

    m_autofit_isSet = false;
    m_autofit_isValid = false;

    m_content_alignment_isSet = false;
    m_content_alignment_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_outline_isSet = false;
    m_outline_isValid = false;

    m_shadow_isSet = false;
    m_shadow_isValid = false;

    m_shape_background_fill_isSet = false;
    m_shape_background_fill_isValid = false;
}

void OAIShapeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShapeProperties::fromJsonObject(QJsonObject json) {

    m_autofit_isValid = ::OpenAPI::fromJsonValue(m_autofit, json[QString("autofit")]);
    m_autofit_isSet = !json[QString("autofit")].isNull() && m_autofit_isValid;

    m_content_alignment_isValid = ::OpenAPI::fromJsonValue(m_content_alignment, json[QString("contentAlignment")]);
    m_content_alignment_isSet = !json[QString("contentAlignment")].isNull() && m_content_alignment_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_outline_isValid = ::OpenAPI::fromJsonValue(m_outline, json[QString("outline")]);
    m_outline_isSet = !json[QString("outline")].isNull() && m_outline_isValid;

    m_shadow_isValid = ::OpenAPI::fromJsonValue(m_shadow, json[QString("shadow")]);
    m_shadow_isSet = !json[QString("shadow")].isNull() && m_shadow_isValid;

    m_shape_background_fill_isValid = ::OpenAPI::fromJsonValue(m_shape_background_fill, json[QString("shapeBackgroundFill")]);
    m_shape_background_fill_isSet = !json[QString("shapeBackgroundFill")].isNull() && m_shape_background_fill_isValid;
}

QString OAIShapeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShapeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_autofit.isSet()) {
        obj.insert(QString("autofit"), ::OpenAPI::toJsonValue(m_autofit));
    }
    if (m_content_alignment_isSet) {
        obj.insert(QString("contentAlignment"), ::OpenAPI::toJsonValue(m_content_alignment));
    }
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_outline.isSet()) {
        obj.insert(QString("outline"), ::OpenAPI::toJsonValue(m_outline));
    }
    if (m_shadow.isSet()) {
        obj.insert(QString("shadow"), ::OpenAPI::toJsonValue(m_shadow));
    }
    if (m_shape_background_fill.isSet()) {
        obj.insert(QString("shapeBackgroundFill"), ::OpenAPI::toJsonValue(m_shape_background_fill));
    }
    return obj;
}

OAIAutofit OAIShapeProperties::getAutofit() const {
    return m_autofit;
}
void OAIShapeProperties::setAutofit(const OAIAutofit &autofit) {
    m_autofit = autofit;
    m_autofit_isSet = true;
}

bool OAIShapeProperties::is_autofit_Set() const{
    return m_autofit_isSet;
}

bool OAIShapeProperties::is_autofit_Valid() const{
    return m_autofit_isValid;
}

QString OAIShapeProperties::getContentAlignment() const {
    return m_content_alignment;
}
void OAIShapeProperties::setContentAlignment(const QString &content_alignment) {
    m_content_alignment = content_alignment;
    m_content_alignment_isSet = true;
}

bool OAIShapeProperties::is_content_alignment_Set() const{
    return m_content_alignment_isSet;
}

bool OAIShapeProperties::is_content_alignment_Valid() const{
    return m_content_alignment_isValid;
}

OAILink OAIShapeProperties::getLink() const {
    return m_link;
}
void OAIShapeProperties::setLink(const OAILink &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIShapeProperties::is_link_Set() const{
    return m_link_isSet;
}

bool OAIShapeProperties::is_link_Valid() const{
    return m_link_isValid;
}

OAIOutline OAIShapeProperties::getOutline() const {
    return m_outline;
}
void OAIShapeProperties::setOutline(const OAIOutline &outline) {
    m_outline = outline;
    m_outline_isSet = true;
}

bool OAIShapeProperties::is_outline_Set() const{
    return m_outline_isSet;
}

bool OAIShapeProperties::is_outline_Valid() const{
    return m_outline_isValid;
}

OAIShadow OAIShapeProperties::getShadow() const {
    return m_shadow;
}
void OAIShapeProperties::setShadow(const OAIShadow &shadow) {
    m_shadow = shadow;
    m_shadow_isSet = true;
}

bool OAIShapeProperties::is_shadow_Set() const{
    return m_shadow_isSet;
}

bool OAIShapeProperties::is_shadow_Valid() const{
    return m_shadow_isValid;
}

OAIShapeBackgroundFill OAIShapeProperties::getShapeBackgroundFill() const {
    return m_shape_background_fill;
}
void OAIShapeProperties::setShapeBackgroundFill(const OAIShapeBackgroundFill &shape_background_fill) {
    m_shape_background_fill = shape_background_fill;
    m_shape_background_fill_isSet = true;
}

bool OAIShapeProperties::is_shape_background_fill_Set() const{
    return m_shape_background_fill_isSet;
}

bool OAIShapeProperties::is_shape_background_fill_Valid() const{
    return m_shape_background_fill_isValid;
}

bool OAIShapeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autofit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_background_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShapeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
