/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_create_image_isSet = false;
    m_create_image_isValid = false;

    m_create_line_isSet = false;
    m_create_line_isValid = false;

    m_create_shape_isSet = false;
    m_create_shape_isValid = false;

    m_create_sheets_chart_isSet = false;
    m_create_sheets_chart_isValid = false;

    m_create_slide_isSet = false;
    m_create_slide_isValid = false;

    m_create_table_isSet = false;
    m_create_table_isValid = false;

    m_create_video_isSet = false;
    m_create_video_isValid = false;

    m_duplicate_object_isSet = false;
    m_duplicate_object_isValid = false;

    m_group_objects_isSet = false;
    m_group_objects_isValid = false;

    m_replace_all_shapes_with_image_isSet = false;
    m_replace_all_shapes_with_image_isValid = false;

    m_replace_all_shapes_with_sheets_chart_isSet = false;
    m_replace_all_shapes_with_sheets_chart_isValid = false;

    m_replace_all_text_isSet = false;
    m_replace_all_text_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_create_image_isValid = ::OpenAPI::fromJsonValue(m_create_image, json[QString("createImage")]);
    m_create_image_isSet = !json[QString("createImage")].isNull() && m_create_image_isValid;

    m_create_line_isValid = ::OpenAPI::fromJsonValue(m_create_line, json[QString("createLine")]);
    m_create_line_isSet = !json[QString("createLine")].isNull() && m_create_line_isValid;

    m_create_shape_isValid = ::OpenAPI::fromJsonValue(m_create_shape, json[QString("createShape")]);
    m_create_shape_isSet = !json[QString("createShape")].isNull() && m_create_shape_isValid;

    m_create_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_create_sheets_chart, json[QString("createSheetsChart")]);
    m_create_sheets_chart_isSet = !json[QString("createSheetsChart")].isNull() && m_create_sheets_chart_isValid;

    m_create_slide_isValid = ::OpenAPI::fromJsonValue(m_create_slide, json[QString("createSlide")]);
    m_create_slide_isSet = !json[QString("createSlide")].isNull() && m_create_slide_isValid;

    m_create_table_isValid = ::OpenAPI::fromJsonValue(m_create_table, json[QString("createTable")]);
    m_create_table_isSet = !json[QString("createTable")].isNull() && m_create_table_isValid;

    m_create_video_isValid = ::OpenAPI::fromJsonValue(m_create_video, json[QString("createVideo")]);
    m_create_video_isSet = !json[QString("createVideo")].isNull() && m_create_video_isValid;

    m_duplicate_object_isValid = ::OpenAPI::fromJsonValue(m_duplicate_object, json[QString("duplicateObject")]);
    m_duplicate_object_isSet = !json[QString("duplicateObject")].isNull() && m_duplicate_object_isValid;

    m_group_objects_isValid = ::OpenAPI::fromJsonValue(m_group_objects, json[QString("groupObjects")]);
    m_group_objects_isSet = !json[QString("groupObjects")].isNull() && m_group_objects_isValid;

    m_replace_all_shapes_with_image_isValid = ::OpenAPI::fromJsonValue(m_replace_all_shapes_with_image, json[QString("replaceAllShapesWithImage")]);
    m_replace_all_shapes_with_image_isSet = !json[QString("replaceAllShapesWithImage")].isNull() && m_replace_all_shapes_with_image_isValid;

    m_replace_all_shapes_with_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_replace_all_shapes_with_sheets_chart, json[QString("replaceAllShapesWithSheetsChart")]);
    m_replace_all_shapes_with_sheets_chart_isSet = !json[QString("replaceAllShapesWithSheetsChart")].isNull() && m_replace_all_shapes_with_sheets_chart_isValid;

    m_replace_all_text_isValid = ::OpenAPI::fromJsonValue(m_replace_all_text, json[QString("replaceAllText")]);
    m_replace_all_text_isSet = !json[QString("replaceAllText")].isNull() && m_replace_all_text_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_create_image.isSet()) {
        obj.insert(QString("createImage"), ::OpenAPI::toJsonValue(m_create_image));
    }
    if (m_create_line.isSet()) {
        obj.insert(QString("createLine"), ::OpenAPI::toJsonValue(m_create_line));
    }
    if (m_create_shape.isSet()) {
        obj.insert(QString("createShape"), ::OpenAPI::toJsonValue(m_create_shape));
    }
    if (m_create_sheets_chart.isSet()) {
        obj.insert(QString("createSheetsChart"), ::OpenAPI::toJsonValue(m_create_sheets_chart));
    }
    if (m_create_slide.isSet()) {
        obj.insert(QString("createSlide"), ::OpenAPI::toJsonValue(m_create_slide));
    }
    if (m_create_table.isSet()) {
        obj.insert(QString("createTable"), ::OpenAPI::toJsonValue(m_create_table));
    }
    if (m_create_video.isSet()) {
        obj.insert(QString("createVideo"), ::OpenAPI::toJsonValue(m_create_video));
    }
    if (m_duplicate_object.isSet()) {
        obj.insert(QString("duplicateObject"), ::OpenAPI::toJsonValue(m_duplicate_object));
    }
    if (m_group_objects.isSet()) {
        obj.insert(QString("groupObjects"), ::OpenAPI::toJsonValue(m_group_objects));
    }
    if (m_replace_all_shapes_with_image.isSet()) {
        obj.insert(QString("replaceAllShapesWithImage"), ::OpenAPI::toJsonValue(m_replace_all_shapes_with_image));
    }
    if (m_replace_all_shapes_with_sheets_chart.isSet()) {
        obj.insert(QString("replaceAllShapesWithSheetsChart"), ::OpenAPI::toJsonValue(m_replace_all_shapes_with_sheets_chart));
    }
    if (m_replace_all_text.isSet()) {
        obj.insert(QString("replaceAllText"), ::OpenAPI::toJsonValue(m_replace_all_text));
    }
    return obj;
}

OAICreateImageResponse OAIResponse::getCreateImage() const {
    return m_create_image;
}
void OAIResponse::setCreateImage(const OAICreateImageResponse &create_image) {
    m_create_image = create_image;
    m_create_image_isSet = true;
}

bool OAIResponse::is_create_image_Set() const{
    return m_create_image_isSet;
}

bool OAIResponse::is_create_image_Valid() const{
    return m_create_image_isValid;
}

OAICreateLineResponse OAIResponse::getCreateLine() const {
    return m_create_line;
}
void OAIResponse::setCreateLine(const OAICreateLineResponse &create_line) {
    m_create_line = create_line;
    m_create_line_isSet = true;
}

bool OAIResponse::is_create_line_Set() const{
    return m_create_line_isSet;
}

bool OAIResponse::is_create_line_Valid() const{
    return m_create_line_isValid;
}

OAICreateShapeResponse OAIResponse::getCreateShape() const {
    return m_create_shape;
}
void OAIResponse::setCreateShape(const OAICreateShapeResponse &create_shape) {
    m_create_shape = create_shape;
    m_create_shape_isSet = true;
}

bool OAIResponse::is_create_shape_Set() const{
    return m_create_shape_isSet;
}

bool OAIResponse::is_create_shape_Valid() const{
    return m_create_shape_isValid;
}

OAICreateSheetsChartResponse OAIResponse::getCreateSheetsChart() const {
    return m_create_sheets_chart;
}
void OAIResponse::setCreateSheetsChart(const OAICreateSheetsChartResponse &create_sheets_chart) {
    m_create_sheets_chart = create_sheets_chart;
    m_create_sheets_chart_isSet = true;
}

bool OAIResponse::is_create_sheets_chart_Set() const{
    return m_create_sheets_chart_isSet;
}

bool OAIResponse::is_create_sheets_chart_Valid() const{
    return m_create_sheets_chart_isValid;
}

OAICreateSlideResponse OAIResponse::getCreateSlide() const {
    return m_create_slide;
}
void OAIResponse::setCreateSlide(const OAICreateSlideResponse &create_slide) {
    m_create_slide = create_slide;
    m_create_slide_isSet = true;
}

bool OAIResponse::is_create_slide_Set() const{
    return m_create_slide_isSet;
}

bool OAIResponse::is_create_slide_Valid() const{
    return m_create_slide_isValid;
}

OAICreateTableResponse OAIResponse::getCreateTable() const {
    return m_create_table;
}
void OAIResponse::setCreateTable(const OAICreateTableResponse &create_table) {
    m_create_table = create_table;
    m_create_table_isSet = true;
}

bool OAIResponse::is_create_table_Set() const{
    return m_create_table_isSet;
}

bool OAIResponse::is_create_table_Valid() const{
    return m_create_table_isValid;
}

OAICreateVideoResponse OAIResponse::getCreateVideo() const {
    return m_create_video;
}
void OAIResponse::setCreateVideo(const OAICreateVideoResponse &create_video) {
    m_create_video = create_video;
    m_create_video_isSet = true;
}

bool OAIResponse::is_create_video_Set() const{
    return m_create_video_isSet;
}

bool OAIResponse::is_create_video_Valid() const{
    return m_create_video_isValid;
}

OAIDuplicateObjectResponse OAIResponse::getDuplicateObject() const {
    return m_duplicate_object;
}
void OAIResponse::setDuplicateObject(const OAIDuplicateObjectResponse &duplicate_object) {
    m_duplicate_object = duplicate_object;
    m_duplicate_object_isSet = true;
}

bool OAIResponse::is_duplicate_object_Set() const{
    return m_duplicate_object_isSet;
}

bool OAIResponse::is_duplicate_object_Valid() const{
    return m_duplicate_object_isValid;
}

OAIGroupObjectsResponse OAIResponse::getGroupObjects() const {
    return m_group_objects;
}
void OAIResponse::setGroupObjects(const OAIGroupObjectsResponse &group_objects) {
    m_group_objects = group_objects;
    m_group_objects_isSet = true;
}

bool OAIResponse::is_group_objects_Set() const{
    return m_group_objects_isSet;
}

bool OAIResponse::is_group_objects_Valid() const{
    return m_group_objects_isValid;
}

OAIReplaceAllShapesWithImageResponse OAIResponse::getReplaceAllShapesWithImage() const {
    return m_replace_all_shapes_with_image;
}
void OAIResponse::setReplaceAllShapesWithImage(const OAIReplaceAllShapesWithImageResponse &replace_all_shapes_with_image) {
    m_replace_all_shapes_with_image = replace_all_shapes_with_image;
    m_replace_all_shapes_with_image_isSet = true;
}

bool OAIResponse::is_replace_all_shapes_with_image_Set() const{
    return m_replace_all_shapes_with_image_isSet;
}

bool OAIResponse::is_replace_all_shapes_with_image_Valid() const{
    return m_replace_all_shapes_with_image_isValid;
}

OAIReplaceAllShapesWithSheetsChartResponse OAIResponse::getReplaceAllShapesWithSheetsChart() const {
    return m_replace_all_shapes_with_sheets_chart;
}
void OAIResponse::setReplaceAllShapesWithSheetsChart(const OAIReplaceAllShapesWithSheetsChartResponse &replace_all_shapes_with_sheets_chart) {
    m_replace_all_shapes_with_sheets_chart = replace_all_shapes_with_sheets_chart;
    m_replace_all_shapes_with_sheets_chart_isSet = true;
}

bool OAIResponse::is_replace_all_shapes_with_sheets_chart_Set() const{
    return m_replace_all_shapes_with_sheets_chart_isSet;
}

bool OAIResponse::is_replace_all_shapes_with_sheets_chart_Valid() const{
    return m_replace_all_shapes_with_sheets_chart_isValid;
}

OAIReplaceAllTextResponse OAIResponse::getReplaceAllText() const {
    return m_replace_all_text;
}
void OAIResponse::setReplaceAllText(const OAIReplaceAllTextResponse &replace_all_text) {
    m_replace_all_text = replace_all_text;
    m_replace_all_text_isSet = true;
}

bool OAIResponse::is_replace_all_text_Set() const{
    return m_replace_all_text_isSet;
}

bool OAIResponse::is_replace_all_text_Valid() const{
    return m_replace_all_text_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_slide.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_shapes_with_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_shapes_with_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
