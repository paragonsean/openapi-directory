/**
 * Google Slides API
 * Reads and writes Google Slides presentations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShadow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShadow::OAIShadow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShadow::OAIShadow() {
    this->initializeModel();
}

OAIShadow::~OAIShadow() {}

void OAIShadow::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_alpha_isSet = false;
    m_alpha_isValid = false;

    m_blur_radius_isSet = false;
    m_blur_radius_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_property_state_isSet = false;
    m_property_state_isValid = false;

    m_rotate_with_shape_isSet = false;
    m_rotate_with_shape_isValid = false;

    m_transform_isSet = false;
    m_transform_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIShadow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShadow::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_alpha_isValid = ::OpenAPI::fromJsonValue(m_alpha, json[QString("alpha")]);
    m_alpha_isSet = !json[QString("alpha")].isNull() && m_alpha_isValid;

    m_blur_radius_isValid = ::OpenAPI::fromJsonValue(m_blur_radius, json[QString("blurRadius")]);
    m_blur_radius_isSet = !json[QString("blurRadius")].isNull() && m_blur_radius_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_property_state_isValid = ::OpenAPI::fromJsonValue(m_property_state, json[QString("propertyState")]);
    m_property_state_isSet = !json[QString("propertyState")].isNull() && m_property_state_isValid;

    m_rotate_with_shape_isValid = ::OpenAPI::fromJsonValue(m_rotate_with_shape, json[QString("rotateWithShape")]);
    m_rotate_with_shape_isSet = !json[QString("rotateWithShape")].isNull() && m_rotate_with_shape_isValid;

    m_transform_isValid = ::OpenAPI::fromJsonValue(m_transform, json[QString("transform")]);
    m_transform_isSet = !json[QString("transform")].isNull() && m_transform_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIShadow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShadow::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_alpha_isSet) {
        obj.insert(QString("alpha"), ::OpenAPI::toJsonValue(m_alpha));
    }
    if (m_blur_radius.isSet()) {
        obj.insert(QString("blurRadius"), ::OpenAPI::toJsonValue(m_blur_radius));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_property_state_isSet) {
        obj.insert(QString("propertyState"), ::OpenAPI::toJsonValue(m_property_state));
    }
    if (m_rotate_with_shape_isSet) {
        obj.insert(QString("rotateWithShape"), ::OpenAPI::toJsonValue(m_rotate_with_shape));
    }
    if (m_transform.isSet()) {
        obj.insert(QString("transform"), ::OpenAPI::toJsonValue(m_transform));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIShadow::getAlignment() const {
    return m_alignment;
}
void OAIShadow::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIShadow::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIShadow::is_alignment_Valid() const{
    return m_alignment_isValid;
}

float OAIShadow::getAlpha() const {
    return m_alpha;
}
void OAIShadow::setAlpha(const float &alpha) {
    m_alpha = alpha;
    m_alpha_isSet = true;
}

bool OAIShadow::is_alpha_Set() const{
    return m_alpha_isSet;
}

bool OAIShadow::is_alpha_Valid() const{
    return m_alpha_isValid;
}

OAIDimension OAIShadow::getBlurRadius() const {
    return m_blur_radius;
}
void OAIShadow::setBlurRadius(const OAIDimension &blur_radius) {
    m_blur_radius = blur_radius;
    m_blur_radius_isSet = true;
}

bool OAIShadow::is_blur_radius_Set() const{
    return m_blur_radius_isSet;
}

bool OAIShadow::is_blur_radius_Valid() const{
    return m_blur_radius_isValid;
}

OAIOpaqueColor OAIShadow::getColor() const {
    return m_color;
}
void OAIShadow::setColor(const OAIOpaqueColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIShadow::is_color_Set() const{
    return m_color_isSet;
}

bool OAIShadow::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIShadow::getPropertyState() const {
    return m_property_state;
}
void OAIShadow::setPropertyState(const QString &property_state) {
    m_property_state = property_state;
    m_property_state_isSet = true;
}

bool OAIShadow::is_property_state_Set() const{
    return m_property_state_isSet;
}

bool OAIShadow::is_property_state_Valid() const{
    return m_property_state_isValid;
}

bool OAIShadow::isRotateWithShape() const {
    return m_rotate_with_shape;
}
void OAIShadow::setRotateWithShape(const bool &rotate_with_shape) {
    m_rotate_with_shape = rotate_with_shape;
    m_rotate_with_shape_isSet = true;
}

bool OAIShadow::is_rotate_with_shape_Set() const{
    return m_rotate_with_shape_isSet;
}

bool OAIShadow::is_rotate_with_shape_Valid() const{
    return m_rotate_with_shape_isValid;
}

OAIAffineTransform OAIShadow::getTransform() const {
    return m_transform;
}
void OAIShadow::setTransform(const OAIAffineTransform &transform) {
    m_transform = transform;
    m_transform_isSet = true;
}

bool OAIShadow::is_transform_Set() const{
    return m_transform_isSet;
}

bool OAIShadow::is_transform_Valid() const{
    return m_transform_isValid;
}

QString OAIShadow::getType() const {
    return m_type;
}
void OAIShadow::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShadow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShadow::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIShadow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blur_radius.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_with_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShadow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
