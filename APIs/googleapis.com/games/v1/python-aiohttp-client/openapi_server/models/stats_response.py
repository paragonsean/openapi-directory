# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_session_length_minutes: float=None, churn_probability: float=None, days_since_last_played: int=None, high_spender_probability: float=None, kind: str=None, num_purchases: int=None, num_sessions: int=None, num_sessions_percentile: float=None, spend_percentile: float=None, spend_probability: float=None, total_spend_next_28_days: float=None):
        """StatsResponse - a model defined in OpenAPI

        :param avg_session_length_minutes: The avg_session_length_minutes of this StatsResponse.
        :param churn_probability: The churn_probability of this StatsResponse.
        :param days_since_last_played: The days_since_last_played of this StatsResponse.
        :param high_spender_probability: The high_spender_probability of this StatsResponse.
        :param kind: The kind of this StatsResponse.
        :param num_purchases: The num_purchases of this StatsResponse.
        :param num_sessions: The num_sessions of this StatsResponse.
        :param num_sessions_percentile: The num_sessions_percentile of this StatsResponse.
        :param spend_percentile: The spend_percentile of this StatsResponse.
        :param spend_probability: The spend_probability of this StatsResponse.
        :param total_spend_next_28_days: The total_spend_next_28_days of this StatsResponse.
        """
        self.openapi_types = {
            'avg_session_length_minutes': float,
            'churn_probability': float,
            'days_since_last_played': int,
            'high_spender_probability': float,
            'kind': str,
            'num_purchases': int,
            'num_sessions': int,
            'num_sessions_percentile': float,
            'spend_percentile': float,
            'spend_probability': float,
            'total_spend_next_28_days': float
        }

        self.attribute_map = {
            'avg_session_length_minutes': 'avg_session_length_minutes',
            'churn_probability': 'churn_probability',
            'days_since_last_played': 'days_since_last_played',
            'high_spender_probability': 'high_spender_probability',
            'kind': 'kind',
            'num_purchases': 'num_purchases',
            'num_sessions': 'num_sessions',
            'num_sessions_percentile': 'num_sessions_percentile',
            'spend_percentile': 'spend_percentile',
            'spend_probability': 'spend_probability',
            'total_spend_next_28_days': 'total_spend_next_28_days'
        }

        self._avg_session_length_minutes = avg_session_length_minutes
        self._churn_probability = churn_probability
        self._days_since_last_played = days_since_last_played
        self._high_spender_probability = high_spender_probability
        self._kind = kind
        self._num_purchases = num_purchases
        self._num_sessions = num_sessions
        self._num_sessions_percentile = num_sessions_percentile
        self._spend_percentile = spend_percentile
        self._spend_probability = spend_probability
        self._total_spend_next_28_days = total_spend_next_28_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatsResponse of this StatsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_session_length_minutes(self):
        """Gets the avg_session_length_minutes of this StatsResponse.

        Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.

        :return: The avg_session_length_minutes of this StatsResponse.
        :rtype: float
        """
        return self._avg_session_length_minutes

    @avg_session_length_minutes.setter
    def avg_session_length_minutes(self, avg_session_length_minutes):
        """Sets the avg_session_length_minutes of this StatsResponse.

        Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.

        :param avg_session_length_minutes: The avg_session_length_minutes of this StatsResponse.
        :type avg_session_length_minutes: float
        """

        self._avg_session_length_minutes = avg_session_length_minutes

    @property
    def churn_probability(self):
        """Gets the churn_probability of this StatsResponse.

        The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.

        :return: The churn_probability of this StatsResponse.
        :rtype: float
        """
        return self._churn_probability

    @churn_probability.setter
    def churn_probability(self, churn_probability):
        """Sets the churn_probability of this StatsResponse.

        The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.

        :param churn_probability: The churn_probability of this StatsResponse.
        :type churn_probability: float
        """

        self._churn_probability = churn_probability

    @property
    def days_since_last_played(self):
        """Gets the days_since_last_played of this StatsResponse.

        Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :return: The days_since_last_played of this StatsResponse.
        :rtype: int
        """
        return self._days_since_last_played

    @days_since_last_played.setter
    def days_since_last_played(self, days_since_last_played):
        """Sets the days_since_last_played of this StatsResponse.

        Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :param days_since_last_played: The days_since_last_played of this StatsResponse.
        :type days_since_last_played: int
        """

        self._days_since_last_played = days_since_last_played

    @property
    def high_spender_probability(self):
        """Gets the high_spender_probability of this StatsResponse.

        The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.

        :return: The high_spender_probability of this StatsResponse.
        :rtype: float
        """
        return self._high_spender_probability

    @high_spender_probability.setter
    def high_spender_probability(self, high_spender_probability):
        """Sets the high_spender_probability of this StatsResponse.

        The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.

        :param high_spender_probability: The high_spender_probability of this StatsResponse.
        :type high_spender_probability: float
        """

        self._high_spender_probability = high_spender_probability

    @property
    def kind(self):
        """Gets the kind of this StatsResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.

        :return: The kind of this StatsResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this StatsResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.

        :param kind: The kind of this StatsResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def num_purchases(self):
        """Gets the num_purchases of this StatsResponse.

        Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :return: The num_purchases of this StatsResponse.
        :rtype: int
        """
        return self._num_purchases

    @num_purchases.setter
    def num_purchases(self, num_purchases):
        """Sets the num_purchases of this StatsResponse.

        Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :param num_purchases: The num_purchases of this StatsResponse.
        :type num_purchases: int
        """

        self._num_purchases = num_purchases

    @property
    def num_sessions(self):
        """Gets the num_sessions of this StatsResponse.

        The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :return: The num_sessions of this StatsResponse.
        :rtype: int
        """
        return self._num_sessions

    @num_sessions.setter
    def num_sessions(self, num_sessions):
        """Sets the num_sessions of this StatsResponse.

        The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.

        :param num_sessions: The num_sessions of this StatsResponse.
        :type num_sessions: int
        """

        self._num_sessions = num_sessions

    @property
    def num_sessions_percentile(self):
        """Gets the num_sessions_percentile of this StatsResponse.

        The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.

        :return: The num_sessions_percentile of this StatsResponse.
        :rtype: float
        """
        return self._num_sessions_percentile

    @num_sessions_percentile.setter
    def num_sessions_percentile(self, num_sessions_percentile):
        """Sets the num_sessions_percentile of this StatsResponse.

        The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.

        :param num_sessions_percentile: The num_sessions_percentile of this StatsResponse.
        :type num_sessions_percentile: float
        """

        self._num_sessions_percentile = num_sessions_percentile

    @property
    def spend_percentile(self):
        """Gets the spend_percentile of this StatsResponse.

        The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.

        :return: The spend_percentile of this StatsResponse.
        :rtype: float
        """
        return self._spend_percentile

    @spend_percentile.setter
    def spend_percentile(self, spend_percentile):
        """Sets the spend_percentile of this StatsResponse.

        The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.

        :param spend_percentile: The spend_percentile of this StatsResponse.
        :type spend_percentile: float
        """

        self._spend_percentile = spend_percentile

    @property
    def spend_probability(self):
        """Gets the spend_probability of this StatsResponse.

        The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.

        :return: The spend_probability of this StatsResponse.
        :rtype: float
        """
        return self._spend_probability

    @spend_probability.setter
    def spend_probability(self, spend_probability):
        """Sets the spend_probability of this StatsResponse.

        The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.

        :param spend_probability: The spend_probability of this StatsResponse.
        :type spend_probability: float
        """

        self._spend_probability = spend_probability

    @property
    def total_spend_next_28_days(self):
        """Gets the total_spend_next_28_days of this StatsResponse.

        The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.

        :return: The total_spend_next_28_days of this StatsResponse.
        :rtype: float
        """
        return self._total_spend_next_28_days

    @total_spend_next_28_days.setter
    def total_spend_next_28_days(self, total_spend_next_28_days):
        """Sets the total_spend_next_28_days of this StatsResponse.

        The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.

        :param total_spend_next_28_days: The total_spend_next_28_days of this StatsResponse.
        :type total_spend_next_28_days: float
        """

        self._total_spend_next_28_days = total_spend_next_28_days
