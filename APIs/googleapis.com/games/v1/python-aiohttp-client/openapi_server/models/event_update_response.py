# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_batch_record_failure import EventBatchRecordFailure
from openapi_server.models.event_record_failure import EventRecordFailure
from openapi_server.models.player_event import PlayerEvent
from openapi_server import util


class EventUpdateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_failures: List[EventBatchRecordFailure]=None, event_failures: List[EventRecordFailure]=None, kind: str=None, player_events: List[PlayerEvent]=None):
        """EventUpdateResponse - a model defined in OpenAPI

        :param batch_failures: The batch_failures of this EventUpdateResponse.
        :param event_failures: The event_failures of this EventUpdateResponse.
        :param kind: The kind of this EventUpdateResponse.
        :param player_events: The player_events of this EventUpdateResponse.
        """
        self.openapi_types = {
            'batch_failures': List[EventBatchRecordFailure],
            'event_failures': List[EventRecordFailure],
            'kind': str,
            'player_events': List[PlayerEvent]
        }

        self.attribute_map = {
            'batch_failures': 'batchFailures',
            'event_failures': 'eventFailures',
            'kind': 'kind',
            'player_events': 'playerEvents'
        }

        self._batch_failures = batch_failures
        self._event_failures = event_failures
        self._kind = kind
        self._player_events = player_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventUpdateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventUpdateResponse of this EventUpdateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_failures(self):
        """Gets the batch_failures of this EventUpdateResponse.

        Any batch-wide failures which occurred applying updates.

        :return: The batch_failures of this EventUpdateResponse.
        :rtype: List[EventBatchRecordFailure]
        """
        return self._batch_failures

    @batch_failures.setter
    def batch_failures(self, batch_failures):
        """Sets the batch_failures of this EventUpdateResponse.

        Any batch-wide failures which occurred applying updates.

        :param batch_failures: The batch_failures of this EventUpdateResponse.
        :type batch_failures: List[EventBatchRecordFailure]
        """

        self._batch_failures = batch_failures

    @property
    def event_failures(self):
        """Gets the event_failures of this EventUpdateResponse.

        Any failures updating a particular event.

        :return: The event_failures of this EventUpdateResponse.
        :rtype: List[EventRecordFailure]
        """
        return self._event_failures

    @event_failures.setter
    def event_failures(self, event_failures):
        """Sets the event_failures of this EventUpdateResponse.

        Any failures updating a particular event.

        :param event_failures: The event_failures of this EventUpdateResponse.
        :type event_failures: List[EventRecordFailure]
        """

        self._event_failures = event_failures

    @property
    def kind(self):
        """Gets the kind of this EventUpdateResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.

        :return: The kind of this EventUpdateResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventUpdateResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.

        :param kind: The kind of this EventUpdateResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def player_events(self):
        """Gets the player_events of this EventUpdateResponse.

        The current status of any updated events

        :return: The player_events of this EventUpdateResponse.
        :rtype: List[PlayerEvent]
        """
        return self._player_events

    @player_events.setter
    def player_events(self, player_events):
        """Sets the player_events of this EventUpdateResponse.

        The current status of any updated events

        :param player_events: The player_events of this EventUpdateResponse.
        :type player_events: List[PlayerEvent]
        """

        self._player_events = player_events
