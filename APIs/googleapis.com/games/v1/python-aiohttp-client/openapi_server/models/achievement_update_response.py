# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchievementUpdateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_id: str=None, current_state: str=None, current_steps: int=None, kind: str=None, newly_unlocked: bool=None, update_occurred: bool=None):
        """AchievementUpdateResponse - a model defined in OpenAPI

        :param achievement_id: The achievement_id of this AchievementUpdateResponse.
        :param current_state: The current_state of this AchievementUpdateResponse.
        :param current_steps: The current_steps of this AchievementUpdateResponse.
        :param kind: The kind of this AchievementUpdateResponse.
        :param newly_unlocked: The newly_unlocked of this AchievementUpdateResponse.
        :param update_occurred: The update_occurred of this AchievementUpdateResponse.
        """
        self.openapi_types = {
            'achievement_id': str,
            'current_state': str,
            'current_steps': int,
            'kind': str,
            'newly_unlocked': bool,
            'update_occurred': bool
        }

        self.attribute_map = {
            'achievement_id': 'achievementId',
            'current_state': 'currentState',
            'current_steps': 'currentSteps',
            'kind': 'kind',
            'newly_unlocked': 'newlyUnlocked',
            'update_occurred': 'updateOccurred'
        }

        self._achievement_id = achievement_id
        self._current_state = current_state
        self._current_steps = current_steps
        self._kind = kind
        self._newly_unlocked = newly_unlocked
        self._update_occurred = update_occurred

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementUpdateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementUpdateResponse of this AchievementUpdateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_id(self):
        """Gets the achievement_id of this AchievementUpdateResponse.

        The achievement this update is was applied to.

        :return: The achievement_id of this AchievementUpdateResponse.
        :rtype: str
        """
        return self._achievement_id

    @achievement_id.setter
    def achievement_id(self, achievement_id):
        """Sets the achievement_id of this AchievementUpdateResponse.

        The achievement this update is was applied to.

        :param achievement_id: The achievement_id of this AchievementUpdateResponse.
        :type achievement_id: str
        """

        self._achievement_id = achievement_id

    @property
    def current_state(self):
        """Gets the current_state of this AchievementUpdateResponse.

        The current state of the achievement.

        :return: The current_state of this AchievementUpdateResponse.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this AchievementUpdateResponse.

        The current state of the achievement.

        :param current_state: The current_state of this AchievementUpdateResponse.
        :type current_state: str
        """
        allowed_values = ["HIDDEN", "REVEALED", "UNLOCKED"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def current_steps(self):
        """Gets the current_steps of this AchievementUpdateResponse.

        The current steps recorded for this achievement if it is incremental.

        :return: The current_steps of this AchievementUpdateResponse.
        :rtype: int
        """
        return self._current_steps

    @current_steps.setter
    def current_steps(self, current_steps):
        """Sets the current_steps of this AchievementUpdateResponse.

        The current steps recorded for this achievement if it is incremental.

        :param current_steps: The current_steps of this AchievementUpdateResponse.
        :type current_steps: int
        """

        self._current_steps = current_steps

    @property
    def kind(self):
        """Gets the kind of this AchievementUpdateResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.

        :return: The kind of this AchievementUpdateResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementUpdateResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.

        :param kind: The kind of this AchievementUpdateResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def newly_unlocked(self):
        """Gets the newly_unlocked of this AchievementUpdateResponse.

        Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).

        :return: The newly_unlocked of this AchievementUpdateResponse.
        :rtype: bool
        """
        return self._newly_unlocked

    @newly_unlocked.setter
    def newly_unlocked(self, newly_unlocked):
        """Sets the newly_unlocked of this AchievementUpdateResponse.

        Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).

        :param newly_unlocked: The newly_unlocked of this AchievementUpdateResponse.
        :type newly_unlocked: bool
        """

        self._newly_unlocked = newly_unlocked

    @property
    def update_occurred(self):
        """Gets the update_occurred of this AchievementUpdateResponse.

        Whether the requested updates actually affected the achievement.

        :return: The update_occurred of this AchievementUpdateResponse.
        :rtype: bool
        """
        return self._update_occurred

    @update_occurred.setter
    def update_occurred(self, update_occurred):
        """Sets the update_occurred of this AchievementUpdateResponse.

        Whether the requested updates actually affected the achievement.

        :param update_occurred: The update_occurred of this AchievementUpdateResponse.
        :type update_occurred: bool
        """

        self._update_occurred = update_occurred
