# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Leaderboard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon_url: str=None, id: str=None, is_icon_url_default: bool=None, kind: str=None, name: str=None, order: str=None):
        """Leaderboard - a model defined in OpenAPI

        :param icon_url: The icon_url of this Leaderboard.
        :param id: The id of this Leaderboard.
        :param is_icon_url_default: The is_icon_url_default of this Leaderboard.
        :param kind: The kind of this Leaderboard.
        :param name: The name of this Leaderboard.
        :param order: The order of this Leaderboard.
        """
        self.openapi_types = {
            'icon_url': str,
            'id': str,
            'is_icon_url_default': bool,
            'kind': str,
            'name': str,
            'order': str
        }

        self.attribute_map = {
            'icon_url': 'iconUrl',
            'id': 'id',
            'is_icon_url_default': 'isIconUrlDefault',
            'kind': 'kind',
            'name': 'name',
            'order': 'order'
        }

        self._icon_url = icon_url
        self._id = id
        self._is_icon_url_default = is_icon_url_default
        self._kind = kind
        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Leaderboard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Leaderboard of this Leaderboard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon_url(self):
        """Gets the icon_url of this Leaderboard.

        The icon for the leaderboard.

        :return: The icon_url of this Leaderboard.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this Leaderboard.

        The icon for the leaderboard.

        :param icon_url: The icon_url of this Leaderboard.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def id(self):
        """Gets the id of this Leaderboard.

        The leaderboard ID.

        :return: The id of this Leaderboard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Leaderboard.

        The leaderboard ID.

        :param id: The id of this Leaderboard.
        :type id: str
        """

        self._id = id

    @property
    def is_icon_url_default(self):
        """Gets the is_icon_url_default of this Leaderboard.

        Indicates whether the icon image being returned is a default image, or is game-provided.

        :return: The is_icon_url_default of this Leaderboard.
        :rtype: bool
        """
        return self._is_icon_url_default

    @is_icon_url_default.setter
    def is_icon_url_default(self, is_icon_url_default):
        """Sets the is_icon_url_default of this Leaderboard.

        Indicates whether the icon image being returned is a default image, or is game-provided.

        :param is_icon_url_default: The is_icon_url_default of this Leaderboard.
        :type is_icon_url_default: bool
        """

        self._is_icon_url_default = is_icon_url_default

    @property
    def kind(self):
        """Gets the kind of this Leaderboard.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.

        :return: The kind of this Leaderboard.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Leaderboard.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.

        :param kind: The kind of this Leaderboard.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Leaderboard.

        The name of the leaderboard.

        :return: The name of this Leaderboard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Leaderboard.

        The name of the leaderboard.

        :param name: The name of this Leaderboard.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this Leaderboard.

        How scores are ordered.

        :return: The order of this Leaderboard.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Leaderboard.

        How scores are ordered.

        :param order: The order of this Leaderboard.
        :type order: str
        """
        allowed_values = ["LARGER_IS_BETTER", "SMALLER_IS_BETTER"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order
