# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definition_id: str=None, formatted_num_events: str=None, kind: str=None, num_events: str=None, player_id: str=None):
        """PlayerEvent - a model defined in OpenAPI

        :param definition_id: The definition_id of this PlayerEvent.
        :param formatted_num_events: The formatted_num_events of this PlayerEvent.
        :param kind: The kind of this PlayerEvent.
        :param num_events: The num_events of this PlayerEvent.
        :param player_id: The player_id of this PlayerEvent.
        """
        self.openapi_types = {
            'definition_id': str,
            'formatted_num_events': str,
            'kind': str,
            'num_events': str,
            'player_id': str
        }

        self.attribute_map = {
            'definition_id': 'definitionId',
            'formatted_num_events': 'formattedNumEvents',
            'kind': 'kind',
            'num_events': 'numEvents',
            'player_id': 'playerId'
        }

        self._definition_id = definition_id
        self._formatted_num_events = formatted_num_events
        self._kind = kind
        self._num_events = num_events
        self._player_id = player_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerEvent of this PlayerEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definition_id(self):
        """Gets the definition_id of this PlayerEvent.

        The ID of the event definition.

        :return: The definition_id of this PlayerEvent.
        :rtype: str
        """
        return self._definition_id

    @definition_id.setter
    def definition_id(self, definition_id):
        """Sets the definition_id of this PlayerEvent.

        The ID of the event definition.

        :param definition_id: The definition_id of this PlayerEvent.
        :type definition_id: str
        """

        self._definition_id = definition_id

    @property
    def formatted_num_events(self):
        """Gets the formatted_num_events of this PlayerEvent.

        The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.

        :return: The formatted_num_events of this PlayerEvent.
        :rtype: str
        """
        return self._formatted_num_events

    @formatted_num_events.setter
    def formatted_num_events(self, formatted_num_events):
        """Sets the formatted_num_events of this PlayerEvent.

        The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.

        :param formatted_num_events: The formatted_num_events of this PlayerEvent.
        :type formatted_num_events: str
        """

        self._formatted_num_events = formatted_num_events

    @property
    def kind(self):
        """Gets the kind of this PlayerEvent.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.

        :return: The kind of this PlayerEvent.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlayerEvent.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.

        :param kind: The kind of this PlayerEvent.
        :type kind: str
        """

        self._kind = kind

    @property
    def num_events(self):
        """Gets the num_events of this PlayerEvent.

        The current number of times this event has occurred.

        :return: The num_events of this PlayerEvent.
        :rtype: str
        """
        return self._num_events

    @num_events.setter
    def num_events(self, num_events):
        """Sets the num_events of this PlayerEvent.

        The current number of times this event has occurred.

        :param num_events: The num_events of this PlayerEvent.
        :type num_events: str
        """

        self._num_events = num_events

    @property
    def player_id(self):
        """Gets the player_id of this PlayerEvent.

        The ID of the player.

        :return: The player_id of this PlayerEvent.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this PlayerEvent.

        The ID of the player.

        :param player_id: The player_id of this PlayerEvent.
        :type player_id: str
        """

        self._player_id = player_id
