# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchievementDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_type: str=None, description: str=None, experience_points: str=None, formatted_total_steps: str=None, id: str=None, initial_state: str=None, is_revealed_icon_url_default: bool=None, is_unlocked_icon_url_default: bool=None, kind: str=None, name: str=None, revealed_icon_url: str=None, total_steps: int=None, unlocked_icon_url: str=None):
        """AchievementDefinition - a model defined in OpenAPI

        :param achievement_type: The achievement_type of this AchievementDefinition.
        :param description: The description of this AchievementDefinition.
        :param experience_points: The experience_points of this AchievementDefinition.
        :param formatted_total_steps: The formatted_total_steps of this AchievementDefinition.
        :param id: The id of this AchievementDefinition.
        :param initial_state: The initial_state of this AchievementDefinition.
        :param is_revealed_icon_url_default: The is_revealed_icon_url_default of this AchievementDefinition.
        :param is_unlocked_icon_url_default: The is_unlocked_icon_url_default of this AchievementDefinition.
        :param kind: The kind of this AchievementDefinition.
        :param name: The name of this AchievementDefinition.
        :param revealed_icon_url: The revealed_icon_url of this AchievementDefinition.
        :param total_steps: The total_steps of this AchievementDefinition.
        :param unlocked_icon_url: The unlocked_icon_url of this AchievementDefinition.
        """
        self.openapi_types = {
            'achievement_type': str,
            'description': str,
            'experience_points': str,
            'formatted_total_steps': str,
            'id': str,
            'initial_state': str,
            'is_revealed_icon_url_default': bool,
            'is_unlocked_icon_url_default': bool,
            'kind': str,
            'name': str,
            'revealed_icon_url': str,
            'total_steps': int,
            'unlocked_icon_url': str
        }

        self.attribute_map = {
            'achievement_type': 'achievementType',
            'description': 'description',
            'experience_points': 'experiencePoints',
            'formatted_total_steps': 'formattedTotalSteps',
            'id': 'id',
            'initial_state': 'initialState',
            'is_revealed_icon_url_default': 'isRevealedIconUrlDefault',
            'is_unlocked_icon_url_default': 'isUnlockedIconUrlDefault',
            'kind': 'kind',
            'name': 'name',
            'revealed_icon_url': 'revealedIconUrl',
            'total_steps': 'totalSteps',
            'unlocked_icon_url': 'unlockedIconUrl'
        }

        self._achievement_type = achievement_type
        self._description = description
        self._experience_points = experience_points
        self._formatted_total_steps = formatted_total_steps
        self._id = id
        self._initial_state = initial_state
        self._is_revealed_icon_url_default = is_revealed_icon_url_default
        self._is_unlocked_icon_url_default = is_unlocked_icon_url_default
        self._kind = kind
        self._name = name
        self._revealed_icon_url = revealed_icon_url
        self._total_steps = total_steps
        self._unlocked_icon_url = unlocked_icon_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementDefinition of this AchievementDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_type(self):
        """Gets the achievement_type of this AchievementDefinition.

        The type of the achievement.

        :return: The achievement_type of this AchievementDefinition.
        :rtype: str
        """
        return self._achievement_type

    @achievement_type.setter
    def achievement_type(self, achievement_type):
        """Sets the achievement_type of this AchievementDefinition.

        The type of the achievement.

        :param achievement_type: The achievement_type of this AchievementDefinition.
        :type achievement_type: str
        """
        allowed_values = ["STANDARD", "INCREMENTAL"]  # noqa: E501
        if achievement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `achievement_type` ({0}), must be one of {1}"
                .format(achievement_type, allowed_values)
            )

        self._achievement_type = achievement_type

    @property
    def description(self):
        """Gets the description of this AchievementDefinition.

        The description of the achievement.

        :return: The description of this AchievementDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AchievementDefinition.

        The description of the achievement.

        :param description: The description of this AchievementDefinition.
        :type description: str
        """

        self._description = description

    @property
    def experience_points(self):
        """Gets the experience_points of this AchievementDefinition.

        Experience points which will be earned when unlocking this achievement.

        :return: The experience_points of this AchievementDefinition.
        :rtype: str
        """
        return self._experience_points

    @experience_points.setter
    def experience_points(self, experience_points):
        """Sets the experience_points of this AchievementDefinition.

        Experience points which will be earned when unlocking this achievement.

        :param experience_points: The experience_points of this AchievementDefinition.
        :type experience_points: str
        """

        self._experience_points = experience_points

    @property
    def formatted_total_steps(self):
        """Gets the formatted_total_steps of this AchievementDefinition.

        The total steps for an incremental achievement as a string.

        :return: The formatted_total_steps of this AchievementDefinition.
        :rtype: str
        """
        return self._formatted_total_steps

    @formatted_total_steps.setter
    def formatted_total_steps(self, formatted_total_steps):
        """Sets the formatted_total_steps of this AchievementDefinition.

        The total steps for an incremental achievement as a string.

        :param formatted_total_steps: The formatted_total_steps of this AchievementDefinition.
        :type formatted_total_steps: str
        """

        self._formatted_total_steps = formatted_total_steps

    @property
    def id(self):
        """Gets the id of this AchievementDefinition.

        The ID of the achievement.

        :return: The id of this AchievementDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AchievementDefinition.

        The ID of the achievement.

        :param id: The id of this AchievementDefinition.
        :type id: str
        """

        self._id = id

    @property
    def initial_state(self):
        """Gets the initial_state of this AchievementDefinition.

        The initial state of the achievement.

        :return: The initial_state of this AchievementDefinition.
        :rtype: str
        """
        return self._initial_state

    @initial_state.setter
    def initial_state(self, initial_state):
        """Sets the initial_state of this AchievementDefinition.

        The initial state of the achievement.

        :param initial_state: The initial_state of this AchievementDefinition.
        :type initial_state: str
        """
        allowed_values = ["HIDDEN", "REVEALED", "UNLOCKED"]  # noqa: E501
        if initial_state not in allowed_values:
            raise ValueError(
                "Invalid value for `initial_state` ({0}), must be one of {1}"
                .format(initial_state, allowed_values)
            )

        self._initial_state = initial_state

    @property
    def is_revealed_icon_url_default(self):
        """Gets the is_revealed_icon_url_default of this AchievementDefinition.

        Indicates whether the revealed icon image being returned is a default image, or is provided by the game.

        :return: The is_revealed_icon_url_default of this AchievementDefinition.
        :rtype: bool
        """
        return self._is_revealed_icon_url_default

    @is_revealed_icon_url_default.setter
    def is_revealed_icon_url_default(self, is_revealed_icon_url_default):
        """Sets the is_revealed_icon_url_default of this AchievementDefinition.

        Indicates whether the revealed icon image being returned is a default image, or is provided by the game.

        :param is_revealed_icon_url_default: The is_revealed_icon_url_default of this AchievementDefinition.
        :type is_revealed_icon_url_default: bool
        """

        self._is_revealed_icon_url_default = is_revealed_icon_url_default

    @property
    def is_unlocked_icon_url_default(self):
        """Gets the is_unlocked_icon_url_default of this AchievementDefinition.

        Indicates whether the unlocked icon image being returned is a default image, or is game-provided.

        :return: The is_unlocked_icon_url_default of this AchievementDefinition.
        :rtype: bool
        """
        return self._is_unlocked_icon_url_default

    @is_unlocked_icon_url_default.setter
    def is_unlocked_icon_url_default(self, is_unlocked_icon_url_default):
        """Sets the is_unlocked_icon_url_default of this AchievementDefinition.

        Indicates whether the unlocked icon image being returned is a default image, or is game-provided.

        :param is_unlocked_icon_url_default: The is_unlocked_icon_url_default of this AchievementDefinition.
        :type is_unlocked_icon_url_default: bool
        """

        self._is_unlocked_icon_url_default = is_unlocked_icon_url_default

    @property
    def kind(self):
        """Gets the kind of this AchievementDefinition.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.

        :return: The kind of this AchievementDefinition.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementDefinition.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.

        :param kind: The kind of this AchievementDefinition.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this AchievementDefinition.

        The name of the achievement.

        :return: The name of this AchievementDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AchievementDefinition.

        The name of the achievement.

        :param name: The name of this AchievementDefinition.
        :type name: str
        """

        self._name = name

    @property
    def revealed_icon_url(self):
        """Gets the revealed_icon_url of this AchievementDefinition.

        The image URL for the revealed achievement icon.

        :return: The revealed_icon_url of this AchievementDefinition.
        :rtype: str
        """
        return self._revealed_icon_url

    @revealed_icon_url.setter
    def revealed_icon_url(self, revealed_icon_url):
        """Sets the revealed_icon_url of this AchievementDefinition.

        The image URL for the revealed achievement icon.

        :param revealed_icon_url: The revealed_icon_url of this AchievementDefinition.
        :type revealed_icon_url: str
        """

        self._revealed_icon_url = revealed_icon_url

    @property
    def total_steps(self):
        """Gets the total_steps of this AchievementDefinition.

        The total steps for an incremental achievement.

        :return: The total_steps of this AchievementDefinition.
        :rtype: int
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this AchievementDefinition.

        The total steps for an incremental achievement.

        :param total_steps: The total_steps of this AchievementDefinition.
        :type total_steps: int
        """

        self._total_steps = total_steps

    @property
    def unlocked_icon_url(self):
        """Gets the unlocked_icon_url of this AchievementDefinition.

        The image URL for the unlocked achievement icon.

        :return: The unlocked_icon_url of this AchievementDefinition.
        :rtype: str
        """
        return self._unlocked_icon_url

    @unlocked_icon_url.setter
    def unlocked_icon_url(self, unlocked_icon_url):
        """Sets the unlocked_icon_url of this AchievementDefinition.

        The image URL for the unlocked achievement icon.

        :param unlocked_icon_url: The unlocked_icon_url of this AchievementDefinition.
        :type unlocked_icon_url: str
        """

        self._unlocked_icon_url = unlocked_icon_url
