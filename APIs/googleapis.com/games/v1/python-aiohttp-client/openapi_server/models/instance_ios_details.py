# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceIosDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_identifier: str=None, itunes_app_id: str=None, kind: str=None, preferred_for_ipad: bool=None, preferred_for_iphone: bool=None, support_ipad: bool=None, support_iphone: bool=None):
        """InstanceIosDetails - a model defined in OpenAPI

        :param bundle_identifier: The bundle_identifier of this InstanceIosDetails.
        :param itunes_app_id: The itunes_app_id of this InstanceIosDetails.
        :param kind: The kind of this InstanceIosDetails.
        :param preferred_for_ipad: The preferred_for_ipad of this InstanceIosDetails.
        :param preferred_for_iphone: The preferred_for_iphone of this InstanceIosDetails.
        :param support_ipad: The support_ipad of this InstanceIosDetails.
        :param support_iphone: The support_iphone of this InstanceIosDetails.
        """
        self.openapi_types = {
            'bundle_identifier': str,
            'itunes_app_id': str,
            'kind': str,
            'preferred_for_ipad': bool,
            'preferred_for_iphone': bool,
            'support_ipad': bool,
            'support_iphone': bool
        }

        self.attribute_map = {
            'bundle_identifier': 'bundleIdentifier',
            'itunes_app_id': 'itunesAppId',
            'kind': 'kind',
            'preferred_for_ipad': 'preferredForIpad',
            'preferred_for_iphone': 'preferredForIphone',
            'support_ipad': 'supportIpad',
            'support_iphone': 'supportIphone'
        }

        self._bundle_identifier = bundle_identifier
        self._itunes_app_id = itunes_app_id
        self._kind = kind
        self._preferred_for_ipad = preferred_for_ipad
        self._preferred_for_iphone = preferred_for_iphone
        self._support_ipad = support_ipad
        self._support_iphone = support_iphone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceIosDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceIosDetails of this InstanceIosDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this InstanceIosDetails.

        Bundle identifier.

        :return: The bundle_identifier of this InstanceIosDetails.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this InstanceIosDetails.

        Bundle identifier.

        :param bundle_identifier: The bundle_identifier of this InstanceIosDetails.
        :type bundle_identifier: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def itunes_app_id(self):
        """Gets the itunes_app_id of this InstanceIosDetails.

        iTunes App ID.

        :return: The itunes_app_id of this InstanceIosDetails.
        :rtype: str
        """
        return self._itunes_app_id

    @itunes_app_id.setter
    def itunes_app_id(self, itunes_app_id):
        """Sets the itunes_app_id of this InstanceIosDetails.

        iTunes App ID.

        :param itunes_app_id: The itunes_app_id of this InstanceIosDetails.
        :type itunes_app_id: str
        """

        self._itunes_app_id = itunes_app_id

    @property
    def kind(self):
        """Gets the kind of this InstanceIosDetails.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.

        :return: The kind of this InstanceIosDetails.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this InstanceIosDetails.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#instanceIosDetails`.

        :param kind: The kind of this InstanceIosDetails.
        :type kind: str
        """

        self._kind = kind

    @property
    def preferred_for_ipad(self):
        """Gets the preferred_for_ipad of this InstanceIosDetails.

        Indicates that this instance is the default for new installations on iPad devices.

        :return: The preferred_for_ipad of this InstanceIosDetails.
        :rtype: bool
        """
        return self._preferred_for_ipad

    @preferred_for_ipad.setter
    def preferred_for_ipad(self, preferred_for_ipad):
        """Sets the preferred_for_ipad of this InstanceIosDetails.

        Indicates that this instance is the default for new installations on iPad devices.

        :param preferred_for_ipad: The preferred_for_ipad of this InstanceIosDetails.
        :type preferred_for_ipad: bool
        """

        self._preferred_for_ipad = preferred_for_ipad

    @property
    def preferred_for_iphone(self):
        """Gets the preferred_for_iphone of this InstanceIosDetails.

        Indicates that this instance is the default for new installations on iPhone devices.

        :return: The preferred_for_iphone of this InstanceIosDetails.
        :rtype: bool
        """
        return self._preferred_for_iphone

    @preferred_for_iphone.setter
    def preferred_for_iphone(self, preferred_for_iphone):
        """Sets the preferred_for_iphone of this InstanceIosDetails.

        Indicates that this instance is the default for new installations on iPhone devices.

        :param preferred_for_iphone: The preferred_for_iphone of this InstanceIosDetails.
        :type preferred_for_iphone: bool
        """

        self._preferred_for_iphone = preferred_for_iphone

    @property
    def support_ipad(self):
        """Gets the support_ipad of this InstanceIosDetails.

        Flag to indicate if this instance supports iPad.

        :return: The support_ipad of this InstanceIosDetails.
        :rtype: bool
        """
        return self._support_ipad

    @support_ipad.setter
    def support_ipad(self, support_ipad):
        """Sets the support_ipad of this InstanceIosDetails.

        Flag to indicate if this instance supports iPad.

        :param support_ipad: The support_ipad of this InstanceIosDetails.
        :type support_ipad: bool
        """

        self._support_ipad = support_ipad

    @property
    def support_iphone(self):
        """Gets the support_iphone of this InstanceIosDetails.

        Flag to indicate if this instance supports iPhone.

        :return: The support_iphone of this InstanceIosDetails.
        :rtype: bool
        """
        return self._support_iphone

    @support_iphone.setter
    def support_iphone(self, support_iphone):
        """Sets the support_iphone of this InstanceIosDetails.

        Flag to indicate if this instance supports iPhone.

        :param support_iphone: The support_iphone of this InstanceIosDetails.
        :type support_iphone: bool
        """

        self._support_iphone = support_iphone
