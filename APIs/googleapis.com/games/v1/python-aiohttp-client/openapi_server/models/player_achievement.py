# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerAchievement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_state: str=None, current_steps: int=None, experience_points: str=None, formatted_current_steps_string: str=None, id: str=None, kind: str=None, last_updated_timestamp: str=None):
        """PlayerAchievement - a model defined in OpenAPI

        :param achievement_state: The achievement_state of this PlayerAchievement.
        :param current_steps: The current_steps of this PlayerAchievement.
        :param experience_points: The experience_points of this PlayerAchievement.
        :param formatted_current_steps_string: The formatted_current_steps_string of this PlayerAchievement.
        :param id: The id of this PlayerAchievement.
        :param kind: The kind of this PlayerAchievement.
        :param last_updated_timestamp: The last_updated_timestamp of this PlayerAchievement.
        """
        self.openapi_types = {
            'achievement_state': str,
            'current_steps': int,
            'experience_points': str,
            'formatted_current_steps_string': str,
            'id': str,
            'kind': str,
            'last_updated_timestamp': str
        }

        self.attribute_map = {
            'achievement_state': 'achievementState',
            'current_steps': 'currentSteps',
            'experience_points': 'experiencePoints',
            'formatted_current_steps_string': 'formattedCurrentStepsString',
            'id': 'id',
            'kind': 'kind',
            'last_updated_timestamp': 'lastUpdatedTimestamp'
        }

        self._achievement_state = achievement_state
        self._current_steps = current_steps
        self._experience_points = experience_points
        self._formatted_current_steps_string = formatted_current_steps_string
        self._id = id
        self._kind = kind
        self._last_updated_timestamp = last_updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerAchievement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerAchievement of this PlayerAchievement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_state(self):
        """Gets the achievement_state of this PlayerAchievement.

        The state of the achievement.

        :return: The achievement_state of this PlayerAchievement.
        :rtype: str
        """
        return self._achievement_state

    @achievement_state.setter
    def achievement_state(self, achievement_state):
        """Sets the achievement_state of this PlayerAchievement.

        The state of the achievement.

        :param achievement_state: The achievement_state of this PlayerAchievement.
        :type achievement_state: str
        """
        allowed_values = ["HIDDEN", "REVEALED", "UNLOCKED"]  # noqa: E501
        if achievement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `achievement_state` ({0}), must be one of {1}"
                .format(achievement_state, allowed_values)
            )

        self._achievement_state = achievement_state

    @property
    def current_steps(self):
        """Gets the current_steps of this PlayerAchievement.

        The current steps for an incremental achievement.

        :return: The current_steps of this PlayerAchievement.
        :rtype: int
        """
        return self._current_steps

    @current_steps.setter
    def current_steps(self, current_steps):
        """Sets the current_steps of this PlayerAchievement.

        The current steps for an incremental achievement.

        :param current_steps: The current_steps of this PlayerAchievement.
        :type current_steps: int
        """

        self._current_steps = current_steps

    @property
    def experience_points(self):
        """Gets the experience_points of this PlayerAchievement.

        Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.

        :return: The experience_points of this PlayerAchievement.
        :rtype: str
        """
        return self._experience_points

    @experience_points.setter
    def experience_points(self, experience_points):
        """Sets the experience_points of this PlayerAchievement.

        Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.

        :param experience_points: The experience_points of this PlayerAchievement.
        :type experience_points: str
        """

        self._experience_points = experience_points

    @property
    def formatted_current_steps_string(self):
        """Gets the formatted_current_steps_string of this PlayerAchievement.

        The current steps for an incremental achievement as a string.

        :return: The formatted_current_steps_string of this PlayerAchievement.
        :rtype: str
        """
        return self._formatted_current_steps_string

    @formatted_current_steps_string.setter
    def formatted_current_steps_string(self, formatted_current_steps_string):
        """Sets the formatted_current_steps_string of this PlayerAchievement.

        The current steps for an incremental achievement as a string.

        :param formatted_current_steps_string: The formatted_current_steps_string of this PlayerAchievement.
        :type formatted_current_steps_string: str
        """

        self._formatted_current_steps_string = formatted_current_steps_string

    @property
    def id(self):
        """Gets the id of this PlayerAchievement.

        The ID of the achievement.

        :return: The id of this PlayerAchievement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlayerAchievement.

        The ID of the achievement.

        :param id: The id of this PlayerAchievement.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this PlayerAchievement.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`.

        :return: The kind of this PlayerAchievement.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlayerAchievement.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`.

        :param kind: The kind of this PlayerAchievement.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this PlayerAchievement.

        The timestamp of the last modification to this achievement's state.

        :return: The last_updated_timestamp of this PlayerAchievement.
        :rtype: str
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this PlayerAchievement.

        The timestamp of the last modification to this achievement's state.

        :param last_updated_timestamp: The last_updated_timestamp of this PlayerAchievement.
        :type last_updated_timestamp: str
        """

        self._last_updated_timestamp = last_updated_timestamp
