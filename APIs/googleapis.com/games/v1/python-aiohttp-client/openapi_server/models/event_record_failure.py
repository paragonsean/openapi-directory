# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventRecordFailure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, failure_cause: str=None, kind: str=None):
        """EventRecordFailure - a model defined in OpenAPI

        :param event_id: The event_id of this EventRecordFailure.
        :param failure_cause: The failure_cause of this EventRecordFailure.
        :param kind: The kind of this EventRecordFailure.
        """
        self.openapi_types = {
            'event_id': str,
            'failure_cause': str,
            'kind': str
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'failure_cause': 'failureCause',
            'kind': 'kind'
        }

        self._event_id = event_id
        self._failure_cause = failure_cause
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventRecordFailure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventRecordFailure of this EventRecordFailure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this EventRecordFailure.

        The ID of the event that was not updated.

        :return: The event_id of this EventRecordFailure.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventRecordFailure.

        The ID of the event that was not updated.

        :param event_id: The event_id of this EventRecordFailure.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def failure_cause(self):
        """Gets the failure_cause of this EventRecordFailure.

        The cause for the update failure.

        :return: The failure_cause of this EventRecordFailure.
        :rtype: str
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this EventRecordFailure.

        The cause for the update failure.

        :param failure_cause: The failure_cause of this EventRecordFailure.
        :type failure_cause: str
        """
        allowed_values = ["NOT_FOUND", "INVALID_UPDATE_VALUE"]  # noqa: E501
        if failure_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_cause` ({0}), must be one of {1}"
                .format(failure_cause, allowed_values)
            )

        self._failure_cause = failure_cause

    @property
    def kind(self):
        """Gets the kind of this EventRecordFailure.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.

        :return: The kind of this EventRecordFailure.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventRecordFailure.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventRecordFailure`.

        :param kind: The kind of this EventRecordFailure.
        :type kind: str
        """

        self._kind = kind
