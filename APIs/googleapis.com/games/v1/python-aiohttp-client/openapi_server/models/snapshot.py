# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_image import SnapshotImage
from openapi_server import util


class Snapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover_image: SnapshotImage=None, description: str=None, drive_id: str=None, duration_millis: str=None, id: str=None, kind: str=None, last_modified_millis: str=None, progress_value: str=None, title: str=None, type: str=None, unique_name: str=None):
        """Snapshot - a model defined in OpenAPI

        :param cover_image: The cover_image of this Snapshot.
        :param description: The description of this Snapshot.
        :param drive_id: The drive_id of this Snapshot.
        :param duration_millis: The duration_millis of this Snapshot.
        :param id: The id of this Snapshot.
        :param kind: The kind of this Snapshot.
        :param last_modified_millis: The last_modified_millis of this Snapshot.
        :param progress_value: The progress_value of this Snapshot.
        :param title: The title of this Snapshot.
        :param type: The type of this Snapshot.
        :param unique_name: The unique_name of this Snapshot.
        """
        self.openapi_types = {
            'cover_image': SnapshotImage,
            'description': str,
            'drive_id': str,
            'duration_millis': str,
            'id': str,
            'kind': str,
            'last_modified_millis': str,
            'progress_value': str,
            'title': str,
            'type': str,
            'unique_name': str
        }

        self.attribute_map = {
            'cover_image': 'coverImage',
            'description': 'description',
            'drive_id': 'driveId',
            'duration_millis': 'durationMillis',
            'id': 'id',
            'kind': 'kind',
            'last_modified_millis': 'lastModifiedMillis',
            'progress_value': 'progressValue',
            'title': 'title',
            'type': 'type',
            'unique_name': 'uniqueName'
        }

        self._cover_image = cover_image
        self._description = description
        self._drive_id = drive_id
        self._duration_millis = duration_millis
        self._id = id
        self._kind = kind
        self._last_modified_millis = last_modified_millis
        self._progress_value = progress_value
        self._title = title
        self._type = type
        self._unique_name = unique_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snapshot of this Snapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover_image(self):
        """Gets the cover_image of this Snapshot.


        :return: The cover_image of this Snapshot.
        :rtype: SnapshotImage
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this Snapshot.


        :param cover_image: The cover_image of this Snapshot.
        :type cover_image: SnapshotImage
        """

        self._cover_image = cover_image

    @property
    def description(self):
        """Gets the description of this Snapshot.

        The description of this snapshot.

        :return: The description of this Snapshot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.

        The description of this snapshot.

        :param description: The description of this Snapshot.
        :type description: str
        """

        self._description = description

    @property
    def drive_id(self):
        """Gets the drive_id of this Snapshot.

        The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.

        :return: The drive_id of this Snapshot.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this Snapshot.

        The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.

        :param drive_id: The drive_id of this Snapshot.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def duration_millis(self):
        """Gets the duration_millis of this Snapshot.

        The duration associated with this snapshot, in millis.

        :return: The duration_millis of this Snapshot.
        :rtype: str
        """
        return self._duration_millis

    @duration_millis.setter
    def duration_millis(self, duration_millis):
        """Sets the duration_millis of this Snapshot.

        The duration associated with this snapshot, in millis.

        :param duration_millis: The duration_millis of this Snapshot.
        :type duration_millis: str
        """

        self._duration_millis = duration_millis

    @property
    def id(self):
        """Gets the id of this Snapshot.

        The ID of the snapshot.

        :return: The id of this Snapshot.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snapshot.

        The ID of the snapshot.

        :param id: The id of this Snapshot.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Snapshot.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.

        :return: The kind of this Snapshot.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Snapshot.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.

        :param kind: The kind of this Snapshot.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modified_millis(self):
        """Gets the last_modified_millis of this Snapshot.

        The timestamp (in millis since Unix epoch) of the last modification to this snapshot.

        :return: The last_modified_millis of this Snapshot.
        :rtype: str
        """
        return self._last_modified_millis

    @last_modified_millis.setter
    def last_modified_millis(self, last_modified_millis):
        """Sets the last_modified_millis of this Snapshot.

        The timestamp (in millis since Unix epoch) of the last modification to this snapshot.

        :param last_modified_millis: The last_modified_millis of this Snapshot.
        :type last_modified_millis: str
        """

        self._last_modified_millis = last_modified_millis

    @property
    def progress_value(self):
        """Gets the progress_value of this Snapshot.

        The progress value (64-bit integer set by developer) associated with this snapshot.

        :return: The progress_value of this Snapshot.
        :rtype: str
        """
        return self._progress_value

    @progress_value.setter
    def progress_value(self, progress_value):
        """Sets the progress_value of this Snapshot.

        The progress value (64-bit integer set by developer) associated with this snapshot.

        :param progress_value: The progress_value of this Snapshot.
        :type progress_value: str
        """

        self._progress_value = progress_value

    @property
    def title(self):
        """Gets the title of this Snapshot.

        The title of this snapshot.

        :return: The title of this Snapshot.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Snapshot.

        The title of this snapshot.

        :param title: The title of this Snapshot.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Snapshot.

        The type of this snapshot.

        :return: The type of this Snapshot.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Snapshot.

        The type of this snapshot.

        :param type: The type of this Snapshot.
        :type type: str
        """
        allowed_values = ["SAVE_GAME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unique_name(self):
        """Gets the unique_name of this Snapshot.

        The unique name provided when the snapshot was created.

        :return: The unique_name of this Snapshot.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this Snapshot.

        The unique name provided when the snapshot was created.

        :param unique_name: The unique_name of this Snapshot.
        :type unique_name: str
        """

        self._unique_name = unique_name
