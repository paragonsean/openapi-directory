# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.leaderboard_score_rank import LeaderboardScoreRank
from openapi_server import util


class PlayerLeaderboardScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friends_rank: LeaderboardScoreRank=None, kind: str=None, leaderboard_id: str=None, public_rank: LeaderboardScoreRank=None, score_string: str=None, score_tag: str=None, score_value: str=None, social_rank: LeaderboardScoreRank=None, time_span: str=None, write_timestamp: str=None):
        """PlayerLeaderboardScore - a model defined in OpenAPI

        :param friends_rank: The friends_rank of this PlayerLeaderboardScore.
        :param kind: The kind of this PlayerLeaderboardScore.
        :param leaderboard_id: The leaderboard_id of this PlayerLeaderboardScore.
        :param public_rank: The public_rank of this PlayerLeaderboardScore.
        :param score_string: The score_string of this PlayerLeaderboardScore.
        :param score_tag: The score_tag of this PlayerLeaderboardScore.
        :param score_value: The score_value of this PlayerLeaderboardScore.
        :param social_rank: The social_rank of this PlayerLeaderboardScore.
        :param time_span: The time_span of this PlayerLeaderboardScore.
        :param write_timestamp: The write_timestamp of this PlayerLeaderboardScore.
        """
        self.openapi_types = {
            'friends_rank': LeaderboardScoreRank,
            'kind': str,
            'leaderboard_id': str,
            'public_rank': LeaderboardScoreRank,
            'score_string': str,
            'score_tag': str,
            'score_value': str,
            'social_rank': LeaderboardScoreRank,
            'time_span': str,
            'write_timestamp': str
        }

        self.attribute_map = {
            'friends_rank': 'friendsRank',
            'kind': 'kind',
            'leaderboard_id': 'leaderboard_id',
            'public_rank': 'publicRank',
            'score_string': 'scoreString',
            'score_tag': 'scoreTag',
            'score_value': 'scoreValue',
            'social_rank': 'socialRank',
            'time_span': 'timeSpan',
            'write_timestamp': 'writeTimestamp'
        }

        self._friends_rank = friends_rank
        self._kind = kind
        self._leaderboard_id = leaderboard_id
        self._public_rank = public_rank
        self._score_string = score_string
        self._score_tag = score_tag
        self._score_value = score_value
        self._social_rank = social_rank
        self._time_span = time_span
        self._write_timestamp = write_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerLeaderboardScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerLeaderboardScore of this PlayerLeaderboardScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friends_rank(self):
        """Gets the friends_rank of this PlayerLeaderboardScore.


        :return: The friends_rank of this PlayerLeaderboardScore.
        :rtype: LeaderboardScoreRank
        """
        return self._friends_rank

    @friends_rank.setter
    def friends_rank(self, friends_rank):
        """Sets the friends_rank of this PlayerLeaderboardScore.


        :param friends_rank: The friends_rank of this PlayerLeaderboardScore.
        :type friends_rank: LeaderboardScoreRank
        """

        self._friends_rank = friends_rank

    @property
    def kind(self):
        """Gets the kind of this PlayerLeaderboardScore.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.

        :return: The kind of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlayerLeaderboardScore.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.

        :param kind: The kind of this PlayerLeaderboardScore.
        :type kind: str
        """

        self._kind = kind

    @property
    def leaderboard_id(self):
        """Gets the leaderboard_id of this PlayerLeaderboardScore.

        The ID of the leaderboard this score is in.

        :return: The leaderboard_id of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._leaderboard_id

    @leaderboard_id.setter
    def leaderboard_id(self, leaderboard_id):
        """Sets the leaderboard_id of this PlayerLeaderboardScore.

        The ID of the leaderboard this score is in.

        :param leaderboard_id: The leaderboard_id of this PlayerLeaderboardScore.
        :type leaderboard_id: str
        """

        self._leaderboard_id = leaderboard_id

    @property
    def public_rank(self):
        """Gets the public_rank of this PlayerLeaderboardScore.


        :return: The public_rank of this PlayerLeaderboardScore.
        :rtype: LeaderboardScoreRank
        """
        return self._public_rank

    @public_rank.setter
    def public_rank(self, public_rank):
        """Sets the public_rank of this PlayerLeaderboardScore.


        :param public_rank: The public_rank of this PlayerLeaderboardScore.
        :type public_rank: LeaderboardScoreRank
        """

        self._public_rank = public_rank

    @property
    def score_string(self):
        """Gets the score_string of this PlayerLeaderboardScore.

        The formatted value of this score.

        :return: The score_string of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._score_string

    @score_string.setter
    def score_string(self, score_string):
        """Sets the score_string of this PlayerLeaderboardScore.

        The formatted value of this score.

        :param score_string: The score_string of this PlayerLeaderboardScore.
        :type score_string: str
        """

        self._score_string = score_string

    @property
    def score_tag(self):
        """Gets the score_tag of this PlayerLeaderboardScore.

        Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :return: The score_tag of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._score_tag

    @score_tag.setter
    def score_tag(self, score_tag):
        """Sets the score_tag of this PlayerLeaderboardScore.

        Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :param score_tag: The score_tag of this PlayerLeaderboardScore.
        :type score_tag: str
        """

        self._score_tag = score_tag

    @property
    def score_value(self):
        """Gets the score_value of this PlayerLeaderboardScore.

        The numerical value of this score.

        :return: The score_value of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._score_value

    @score_value.setter
    def score_value(self, score_value):
        """Sets the score_value of this PlayerLeaderboardScore.

        The numerical value of this score.

        :param score_value: The score_value of this PlayerLeaderboardScore.
        :type score_value: str
        """

        self._score_value = score_value

    @property
    def social_rank(self):
        """Gets the social_rank of this PlayerLeaderboardScore.


        :return: The social_rank of this PlayerLeaderboardScore.
        :rtype: LeaderboardScoreRank
        """
        return self._social_rank

    @social_rank.setter
    def social_rank(self, social_rank):
        """Sets the social_rank of this PlayerLeaderboardScore.


        :param social_rank: The social_rank of this PlayerLeaderboardScore.
        :type social_rank: LeaderboardScoreRank
        """

        self._social_rank = social_rank

    @property
    def time_span(self):
        """Gets the time_span of this PlayerLeaderboardScore.

        The time span of this score.

        :return: The time_span of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._time_span

    @time_span.setter
    def time_span(self, time_span):
        """Sets the time_span of this PlayerLeaderboardScore.

        The time span of this score.

        :param time_span: The time_span of this PlayerLeaderboardScore.
        :type time_span: str
        """
        allowed_values = ["ALL_TIME", "WEEKLY", "DAILY"]  # noqa: E501
        if time_span not in allowed_values:
            raise ValueError(
                "Invalid value for `time_span` ({0}), must be one of {1}"
                .format(time_span, allowed_values)
            )

        self._time_span = time_span

    @property
    def write_timestamp(self):
        """Gets the write_timestamp of this PlayerLeaderboardScore.

        The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.

        :return: The write_timestamp of this PlayerLeaderboardScore.
        :rtype: str
        """
        return self._write_timestamp

    @write_timestamp.setter
    def write_timestamp(self, write_timestamp):
        """Sets the write_timestamp of this PlayerLeaderboardScore.

        The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.

        :param write_timestamp: The write_timestamp of this PlayerLeaderboardScore.
        :type write_timestamp: str
        """

        self._write_timestamp = write_timestamp
