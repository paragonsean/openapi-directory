# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_category import ApplicationCategory
from openapi_server.models.image_asset import ImageAsset
from openapi_server.models.instance import Instance
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_count: int=None, assets: List[ImageAsset]=None, author: str=None, category: ApplicationCategory=None, description: str=None, enabled_features: List[str]=None, id: str=None, instances: List[Instance]=None, kind: str=None, last_updated_timestamp: str=None, leaderboard_count: int=None, name: str=None, theme_color: str=None):
        """Application - a model defined in OpenAPI

        :param achievement_count: The achievement_count of this Application.
        :param assets: The assets of this Application.
        :param author: The author of this Application.
        :param category: The category of this Application.
        :param description: The description of this Application.
        :param enabled_features: The enabled_features of this Application.
        :param id: The id of this Application.
        :param instances: The instances of this Application.
        :param kind: The kind of this Application.
        :param last_updated_timestamp: The last_updated_timestamp of this Application.
        :param leaderboard_count: The leaderboard_count of this Application.
        :param name: The name of this Application.
        :param theme_color: The theme_color of this Application.
        """
        self.openapi_types = {
            'achievement_count': int,
            'assets': List[ImageAsset],
            'author': str,
            'category': ApplicationCategory,
            'description': str,
            'enabled_features': List[str],
            'id': str,
            'instances': List[Instance],
            'kind': str,
            'last_updated_timestamp': str,
            'leaderboard_count': int,
            'name': str,
            'theme_color': str
        }

        self.attribute_map = {
            'achievement_count': 'achievement_count',
            'assets': 'assets',
            'author': 'author',
            'category': 'category',
            'description': 'description',
            'enabled_features': 'enabledFeatures',
            'id': 'id',
            'instances': 'instances',
            'kind': 'kind',
            'last_updated_timestamp': 'lastUpdatedTimestamp',
            'leaderboard_count': 'leaderboard_count',
            'name': 'name',
            'theme_color': 'themeColor'
        }

        self._achievement_count = achievement_count
        self._assets = assets
        self._author = author
        self._category = category
        self._description = description
        self._enabled_features = enabled_features
        self._id = id
        self._instances = instances
        self._kind = kind
        self._last_updated_timestamp = last_updated_timestamp
        self._leaderboard_count = leaderboard_count
        self._name = name
        self._theme_color = theme_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_count(self):
        """Gets the achievement_count of this Application.

        The number of achievements visible to the currently authenticated player.

        :return: The achievement_count of this Application.
        :rtype: int
        """
        return self._achievement_count

    @achievement_count.setter
    def achievement_count(self, achievement_count):
        """Sets the achievement_count of this Application.

        The number of achievements visible to the currently authenticated player.

        :param achievement_count: The achievement_count of this Application.
        :type achievement_count: int
        """

        self._achievement_count = achievement_count

    @property
    def assets(self):
        """Gets the assets of this Application.

        The assets of the application.

        :return: The assets of this Application.
        :rtype: List[ImageAsset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Application.

        The assets of the application.

        :param assets: The assets of this Application.
        :type assets: List[ImageAsset]
        """

        self._assets = assets

    @property
    def author(self):
        """Gets the author of this Application.

        The author of the application.

        :return: The author of this Application.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Application.

        The author of the application.

        :param author: The author of this Application.
        :type author: str
        """

        self._author = author

    @property
    def category(self):
        """Gets the category of this Application.


        :return: The category of this Application.
        :rtype: ApplicationCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Application.


        :param category: The category of this Application.
        :type category: ApplicationCategory
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Application.

        The description of the application.

        :return: The description of this Application.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Application.

        The description of the application.

        :param description: The description of this Application.
        :type description: str
        """

        self._description = description

    @property
    def enabled_features(self):
        """Gets the enabled_features of this Application.

        A list of features that have been enabled for the application.

        :return: The enabled_features of this Application.
        :rtype: List[str]
        """
        return self._enabled_features

    @enabled_features.setter
    def enabled_features(self, enabled_features):
        """Sets the enabled_features of this Application.

        A list of features that have been enabled for the application.

        :param enabled_features: The enabled_features of this Application.
        :type enabled_features: List[str]
        """
        allowed_values = ["SNAPSHOTS"]  # noqa: E501
        if not set(enabled_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enabled_features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enabled_features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_features = enabled_features

    @property
    def id(self):
        """Gets the id of this Application.

        The ID of the application.

        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.

        The ID of the application.

        :param id: The id of this Application.
        :type id: str
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this Application.

        The instances of the application.

        :return: The instances of this Application.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Application.

        The instances of the application.

        :param instances: The instances of this Application.
        :type instances: List[Instance]
        """

        self._instances = instances

    @property
    def kind(self):
        """Gets the kind of this Application.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.

        :return: The kind of this Application.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Application.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.

        :param kind: The kind of this Application.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this Application.

        The last updated timestamp of the application.

        :return: The last_updated_timestamp of this Application.
        :rtype: str
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this Application.

        The last updated timestamp of the application.

        :param last_updated_timestamp: The last_updated_timestamp of this Application.
        :type last_updated_timestamp: str
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def leaderboard_count(self):
        """Gets the leaderboard_count of this Application.

        The number of leaderboards visible to the currently authenticated player.

        :return: The leaderboard_count of this Application.
        :rtype: int
        """
        return self._leaderboard_count

    @leaderboard_count.setter
    def leaderboard_count(self, leaderboard_count):
        """Sets the leaderboard_count of this Application.

        The number of leaderboards visible to the currently authenticated player.

        :param leaderboard_count: The leaderboard_count of this Application.
        :type leaderboard_count: int
        """

        self._leaderboard_count = leaderboard_count

    @property
    def name(self):
        """Gets the name of this Application.

        The name of the application.

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        The name of the application.

        :param name: The name of this Application.
        :type name: str
        """

        self._name = name

    @property
    def theme_color(self):
        """Gets the theme_color of this Application.

        A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\").

        :return: The theme_color of this Application.
        :rtype: str
        """
        return self._theme_color

    @theme_color.setter
    def theme_color(self, theme_color):
        """Sets the theme_color of this Application.

        A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\").

        :param theme_color: The theme_color of this Application.
        :type theme_color: str
        """

        self._theme_color = theme_color
