# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_child import EventChild
from openapi_server import util


class EventDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_events: List[EventChild]=None, description: str=None, display_name: str=None, id: str=None, image_url: str=None, is_default_image_url: bool=None, kind: str=None, visibility: str=None):
        """EventDefinition - a model defined in OpenAPI

        :param child_events: The child_events of this EventDefinition.
        :param description: The description of this EventDefinition.
        :param display_name: The display_name of this EventDefinition.
        :param id: The id of this EventDefinition.
        :param image_url: The image_url of this EventDefinition.
        :param is_default_image_url: The is_default_image_url of this EventDefinition.
        :param kind: The kind of this EventDefinition.
        :param visibility: The visibility of this EventDefinition.
        """
        self.openapi_types = {
            'child_events': List[EventChild],
            'description': str,
            'display_name': str,
            'id': str,
            'image_url': str,
            'is_default_image_url': bool,
            'kind': str,
            'visibility': str
        }

        self.attribute_map = {
            'child_events': 'childEvents',
            'description': 'description',
            'display_name': 'displayName',
            'id': 'id',
            'image_url': 'imageUrl',
            'is_default_image_url': 'isDefaultImageUrl',
            'kind': 'kind',
            'visibility': 'visibility'
        }

        self._child_events = child_events
        self._description = description
        self._display_name = display_name
        self._id = id
        self._image_url = image_url
        self._is_default_image_url = is_default_image_url
        self._kind = kind
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDefinition of this EventDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_events(self):
        """Gets the child_events of this EventDefinition.

        A list of events that are a child of this event.

        :return: The child_events of this EventDefinition.
        :rtype: List[EventChild]
        """
        return self._child_events

    @child_events.setter
    def child_events(self, child_events):
        """Sets the child_events of this EventDefinition.

        A list of events that are a child of this event.

        :param child_events: The child_events of this EventDefinition.
        :type child_events: List[EventChild]
        """

        self._child_events = child_events

    @property
    def description(self):
        """Gets the description of this EventDefinition.

        Description of what this event represents.

        :return: The description of this EventDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventDefinition.

        Description of what this event represents.

        :param description: The description of this EventDefinition.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this EventDefinition.

        The name to display for the event.

        :return: The display_name of this EventDefinition.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EventDefinition.

        The name to display for the event.

        :param display_name: The display_name of this EventDefinition.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this EventDefinition.

        The ID of the event.

        :return: The id of this EventDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventDefinition.

        The ID of the event.

        :param id: The id of this EventDefinition.
        :type id: str
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this EventDefinition.

        The base URL for the image that represents the event.

        :return: The image_url of this EventDefinition.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this EventDefinition.

        The base URL for the image that represents the event.

        :param image_url: The image_url of this EventDefinition.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def is_default_image_url(self):
        """Gets the is_default_image_url of this EventDefinition.

        Indicates whether the icon image being returned is a default image, or is game-provided.

        :return: The is_default_image_url of this EventDefinition.
        :rtype: bool
        """
        return self._is_default_image_url

    @is_default_image_url.setter
    def is_default_image_url(self, is_default_image_url):
        """Sets the is_default_image_url of this EventDefinition.

        Indicates whether the icon image being returned is a default image, or is game-provided.

        :param is_default_image_url: The is_default_image_url of this EventDefinition.
        :type is_default_image_url: bool
        """

        self._is_default_image_url = is_default_image_url

    @property
    def kind(self):
        """Gets the kind of this EventDefinition.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.

        :return: The kind of this EventDefinition.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventDefinition.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.

        :param kind: The kind of this EventDefinition.
        :type kind: str
        """

        self._kind = kind

    @property
    def visibility(self):
        """Gets the visibility of this EventDefinition.

        The visibility of event being tracked in this definition.

        :return: The visibility of this EventDefinition.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this EventDefinition.

        The visibility of event being tracked in this definition.

        :param visibility: The visibility of this EventDefinition.
        :type visibility: str
        """
        allowed_values = ["REVEALED", "HIDDEN"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
