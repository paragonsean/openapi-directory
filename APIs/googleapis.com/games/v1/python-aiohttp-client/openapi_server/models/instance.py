# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_android_details import InstanceAndroidDetails
from openapi_server.models.instance_ios_details import InstanceIosDetails
from openapi_server.models.instance_web_details import InstanceWebDetails
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquisition_uri: str=None, android_instance: InstanceAndroidDetails=None, ios_instance: InstanceIosDetails=None, kind: str=None, name: str=None, platform_type: str=None, realtime_play: bool=None, turn_based_play: bool=None, web_instance: InstanceWebDetails=None):
        """Instance - a model defined in OpenAPI

        :param acquisition_uri: The acquisition_uri of this Instance.
        :param android_instance: The android_instance of this Instance.
        :param ios_instance: The ios_instance of this Instance.
        :param kind: The kind of this Instance.
        :param name: The name of this Instance.
        :param platform_type: The platform_type of this Instance.
        :param realtime_play: The realtime_play of this Instance.
        :param turn_based_play: The turn_based_play of this Instance.
        :param web_instance: The web_instance of this Instance.
        """
        self.openapi_types = {
            'acquisition_uri': str,
            'android_instance': InstanceAndroidDetails,
            'ios_instance': InstanceIosDetails,
            'kind': str,
            'name': str,
            'platform_type': str,
            'realtime_play': bool,
            'turn_based_play': bool,
            'web_instance': InstanceWebDetails
        }

        self.attribute_map = {
            'acquisition_uri': 'acquisitionUri',
            'android_instance': 'androidInstance',
            'ios_instance': 'iosInstance',
            'kind': 'kind',
            'name': 'name',
            'platform_type': 'platformType',
            'realtime_play': 'realtimePlay',
            'turn_based_play': 'turnBasedPlay',
            'web_instance': 'webInstance'
        }

        self._acquisition_uri = acquisition_uri
        self._android_instance = android_instance
        self._ios_instance = ios_instance
        self._kind = kind
        self._name = name
        self._platform_type = platform_type
        self._realtime_play = realtime_play
        self._turn_based_play = turn_based_play
        self._web_instance = web_instance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition_uri(self):
        """Gets the acquisition_uri of this Instance.

        URI which shows where a user can acquire this instance.

        :return: The acquisition_uri of this Instance.
        :rtype: str
        """
        return self._acquisition_uri

    @acquisition_uri.setter
    def acquisition_uri(self, acquisition_uri):
        """Sets the acquisition_uri of this Instance.

        URI which shows where a user can acquire this instance.

        :param acquisition_uri: The acquisition_uri of this Instance.
        :type acquisition_uri: str
        """

        self._acquisition_uri = acquisition_uri

    @property
    def android_instance(self):
        """Gets the android_instance of this Instance.


        :return: The android_instance of this Instance.
        :rtype: InstanceAndroidDetails
        """
        return self._android_instance

    @android_instance.setter
    def android_instance(self, android_instance):
        """Sets the android_instance of this Instance.


        :param android_instance: The android_instance of this Instance.
        :type android_instance: InstanceAndroidDetails
        """

        self._android_instance = android_instance

    @property
    def ios_instance(self):
        """Gets the ios_instance of this Instance.


        :return: The ios_instance of this Instance.
        :rtype: InstanceIosDetails
        """
        return self._ios_instance

    @ios_instance.setter
    def ios_instance(self, ios_instance):
        """Sets the ios_instance of this Instance.


        :param ios_instance: The ios_instance of this Instance.
        :type ios_instance: InstanceIosDetails
        """

        self._ios_instance = ios_instance

    @property
    def kind(self):
        """Gets the kind of this Instance.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.

        :return: The kind of this Instance.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Instance.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.

        :param kind: The kind of this Instance.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Instance.

        Localized display name.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Localized display name.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def platform_type(self):
        """Gets the platform_type of this Instance.

        The platform type.

        :return: The platform_type of this Instance.
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this Instance.

        The platform type.

        :param platform_type: The platform_type of this Instance.
        :type platform_type: str
        """
        allowed_values = ["ANDROID", "IOS", "WEB_APP"]  # noqa: E501
        if platform_type not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_type` ({0}), must be one of {1}"
                .format(platform_type, allowed_values)
            )

        self._platform_type = platform_type

    @property
    def realtime_play(self):
        """Gets the realtime_play of this Instance.

        Flag to show if this game instance supports realtime play.

        :return: The realtime_play of this Instance.
        :rtype: bool
        """
        return self._realtime_play

    @realtime_play.setter
    def realtime_play(self, realtime_play):
        """Sets the realtime_play of this Instance.

        Flag to show if this game instance supports realtime play.

        :param realtime_play: The realtime_play of this Instance.
        :type realtime_play: bool
        """

        self._realtime_play = realtime_play

    @property
    def turn_based_play(self):
        """Gets the turn_based_play of this Instance.

        Flag to show if this game instance supports turn based play.

        :return: The turn_based_play of this Instance.
        :rtype: bool
        """
        return self._turn_based_play

    @turn_based_play.setter
    def turn_based_play(self, turn_based_play):
        """Sets the turn_based_play of this Instance.

        Flag to show if this game instance supports turn based play.

        :param turn_based_play: The turn_based_play of this Instance.
        :type turn_based_play: bool
        """

        self._turn_based_play = turn_based_play

    @property
    def web_instance(self):
        """Gets the web_instance of this Instance.


        :return: The web_instance of this Instance.
        :rtype: InstanceWebDetails
        """
        return self._web_instance

    @web_instance.setter
    def web_instance(self, web_instance):
        """Sets the web_instance of this Instance.


        :param web_instance: The web_instance of this Instance.
        :type web_instance: InstanceWebDetails
        """

        self._web_instance = web_instance
