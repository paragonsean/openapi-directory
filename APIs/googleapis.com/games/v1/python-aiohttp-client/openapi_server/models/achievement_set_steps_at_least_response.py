# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchievementSetStepsAtLeastResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_steps: int=None, kind: str=None, newly_unlocked: bool=None):
        """AchievementSetStepsAtLeastResponse - a model defined in OpenAPI

        :param current_steps: The current_steps of this AchievementSetStepsAtLeastResponse.
        :param kind: The kind of this AchievementSetStepsAtLeastResponse.
        :param newly_unlocked: The newly_unlocked of this AchievementSetStepsAtLeastResponse.
        """
        self.openapi_types = {
            'current_steps': int,
            'kind': str,
            'newly_unlocked': bool
        }

        self.attribute_map = {
            'current_steps': 'currentSteps',
            'kind': 'kind',
            'newly_unlocked': 'newlyUnlocked'
        }

        self._current_steps = current_steps
        self._kind = kind
        self._newly_unlocked = newly_unlocked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementSetStepsAtLeastResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementSetStepsAtLeastResponse of this AchievementSetStepsAtLeastResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_steps(self):
        """Gets the current_steps of this AchievementSetStepsAtLeastResponse.

        The current steps recorded for this incremental achievement.

        :return: The current_steps of this AchievementSetStepsAtLeastResponse.
        :rtype: int
        """
        return self._current_steps

    @current_steps.setter
    def current_steps(self, current_steps):
        """Sets the current_steps of this AchievementSetStepsAtLeastResponse.

        The current steps recorded for this incremental achievement.

        :param current_steps: The current_steps of this AchievementSetStepsAtLeastResponse.
        :type current_steps: int
        """

        self._current_steps = current_steps

    @property
    def kind(self):
        """Gets the kind of this AchievementSetStepsAtLeastResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`.

        :return: The kind of this AchievementSetStepsAtLeastResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementSetStepsAtLeastResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementSetStepsAtLeastResponse`.

        :param kind: The kind of this AchievementSetStepsAtLeastResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def newly_unlocked(self):
        """Gets the newly_unlocked of this AchievementSetStepsAtLeastResponse.

        Whether the current steps for the achievement has reached the number of steps required to unlock.

        :return: The newly_unlocked of this AchievementSetStepsAtLeastResponse.
        :rtype: bool
        """
        return self._newly_unlocked

    @newly_unlocked.setter
    def newly_unlocked(self, newly_unlocked):
        """Sets the newly_unlocked of this AchievementSetStepsAtLeastResponse.

        Whether the current steps for the achievement has reached the number of steps required to unlock.

        :param newly_unlocked: The newly_unlocked of this AchievementSetStepsAtLeastResponse.
        :type newly_unlocked: bool
        """

        self._newly_unlocked = newly_unlocked
