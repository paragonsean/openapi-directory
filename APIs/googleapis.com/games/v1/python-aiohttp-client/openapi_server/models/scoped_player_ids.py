# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScopedPlayerIds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developer_player_key: str=None, game_player_id: str=None):
        """ScopedPlayerIds - a model defined in OpenAPI

        :param developer_player_key: The developer_player_key of this ScopedPlayerIds.
        :param game_player_id: The game_player_id of this ScopedPlayerIds.
        """
        self.openapi_types = {
            'developer_player_key': str,
            'game_player_id': str
        }

        self.attribute_map = {
            'developer_player_key': 'developerPlayerKey',
            'game_player_id': 'gamePlayerId'
        }

        self._developer_player_key = developer_player_key
        self._game_player_id = game_player_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopedPlayerIds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopedPlayerIds of this ScopedPlayerIds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer_player_key(self):
        """Gets the developer_player_key of this ScopedPlayerIds.

        Identifier of the player across all games of the given developer. Every player has the same developer_player_key in all games of one developer. Developer player key changes for the game if the game is transferred to another developer. Note that game_player_id will stay unchanged.

        :return: The developer_player_key of this ScopedPlayerIds.
        :rtype: str
        """
        return self._developer_player_key

    @developer_player_key.setter
    def developer_player_key(self, developer_player_key):
        """Sets the developer_player_key of this ScopedPlayerIds.

        Identifier of the player across all games of the given developer. Every player has the same developer_player_key in all games of one developer. Developer player key changes for the game if the game is transferred to another developer. Note that game_player_id will stay unchanged.

        :param developer_player_key: The developer_player_key of this ScopedPlayerIds.
        :type developer_player_key: str
        """

        self._developer_player_key = developer_player_key

    @property
    def game_player_id(self):
        """Gets the game_player_id of this ScopedPlayerIds.

        Game-scoped player identifier. This is the same id that is returned in GetPlayer game_player_id field.

        :return: The game_player_id of this ScopedPlayerIds.
        :rtype: str
        """
        return self._game_player_id

    @game_player_id.setter
    def game_player_id(self, game_player_id):
        """Sets the game_player_id of this ScopedPlayerIds.

        Game-scoped player identifier. This is the same id that is returned in GetPlayer game_player_id field.

        :param game_player_id: The game_player_id of this ScopedPlayerIds.
        :type game_player_id: str
        """

        self._game_player_id = game_player_id
