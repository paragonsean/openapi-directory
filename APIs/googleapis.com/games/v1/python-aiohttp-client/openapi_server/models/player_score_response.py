# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.player_score import PlayerScore
from openapi_server import util


class PlayerScoreResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beaten_score_time_spans: List[str]=None, formatted_score: str=None, kind: str=None, leaderboard_id: str=None, score_tag: str=None, unbeaten_scores: List[PlayerScore]=None):
        """PlayerScoreResponse - a model defined in OpenAPI

        :param beaten_score_time_spans: The beaten_score_time_spans of this PlayerScoreResponse.
        :param formatted_score: The formatted_score of this PlayerScoreResponse.
        :param kind: The kind of this PlayerScoreResponse.
        :param leaderboard_id: The leaderboard_id of this PlayerScoreResponse.
        :param score_tag: The score_tag of this PlayerScoreResponse.
        :param unbeaten_scores: The unbeaten_scores of this PlayerScoreResponse.
        """
        self.openapi_types = {
            'beaten_score_time_spans': List[str],
            'formatted_score': str,
            'kind': str,
            'leaderboard_id': str,
            'score_tag': str,
            'unbeaten_scores': List[PlayerScore]
        }

        self.attribute_map = {
            'beaten_score_time_spans': 'beatenScoreTimeSpans',
            'formatted_score': 'formattedScore',
            'kind': 'kind',
            'leaderboard_id': 'leaderboardId',
            'score_tag': 'scoreTag',
            'unbeaten_scores': 'unbeatenScores'
        }

        self._beaten_score_time_spans = beaten_score_time_spans
        self._formatted_score = formatted_score
        self._kind = kind
        self._leaderboard_id = leaderboard_id
        self._score_tag = score_tag
        self._unbeaten_scores = unbeaten_scores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerScoreResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerScoreResponse of this PlayerScoreResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beaten_score_time_spans(self):
        """Gets the beaten_score_time_spans of this PlayerScoreResponse.

        The time spans where the submitted score is better than the existing score for that time span.

        :return: The beaten_score_time_spans of this PlayerScoreResponse.
        :rtype: List[str]
        """
        return self._beaten_score_time_spans

    @beaten_score_time_spans.setter
    def beaten_score_time_spans(self, beaten_score_time_spans):
        """Sets the beaten_score_time_spans of this PlayerScoreResponse.

        The time spans where the submitted score is better than the existing score for that time span.

        :param beaten_score_time_spans: The beaten_score_time_spans of this PlayerScoreResponse.
        :type beaten_score_time_spans: List[str]
        """
        allowed_values = ["ALL_TIME", "WEEKLY", "DAILY"]  # noqa: E501
        if not set(beaten_score_time_spans).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `beaten_score_time_spans` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(beaten_score_time_spans) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._beaten_score_time_spans = beaten_score_time_spans

    @property
    def formatted_score(self):
        """Gets the formatted_score of this PlayerScoreResponse.

        The formatted value of the submitted score.

        :return: The formatted_score of this PlayerScoreResponse.
        :rtype: str
        """
        return self._formatted_score

    @formatted_score.setter
    def formatted_score(self, formatted_score):
        """Sets the formatted_score of this PlayerScoreResponse.

        The formatted value of the submitted score.

        :param formatted_score: The formatted_score of this PlayerScoreResponse.
        :type formatted_score: str
        """

        self._formatted_score = formatted_score

    @property
    def kind(self):
        """Gets the kind of this PlayerScoreResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.

        :return: The kind of this PlayerScoreResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlayerScoreResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.

        :param kind: The kind of this PlayerScoreResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def leaderboard_id(self):
        """Gets the leaderboard_id of this PlayerScoreResponse.

        The leaderboard ID that this score was submitted to.

        :return: The leaderboard_id of this PlayerScoreResponse.
        :rtype: str
        """
        return self._leaderboard_id

    @leaderboard_id.setter
    def leaderboard_id(self, leaderboard_id):
        """Sets the leaderboard_id of this PlayerScoreResponse.

        The leaderboard ID that this score was submitted to.

        :param leaderboard_id: The leaderboard_id of this PlayerScoreResponse.
        :type leaderboard_id: str
        """

        self._leaderboard_id = leaderboard_id

    @property
    def score_tag(self):
        """Gets the score_tag of this PlayerScoreResponse.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :return: The score_tag of this PlayerScoreResponse.
        :rtype: str
        """
        return self._score_tag

    @score_tag.setter
    def score_tag(self, score_tag):
        """Sets the score_tag of this PlayerScoreResponse.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :param score_tag: The score_tag of this PlayerScoreResponse.
        :type score_tag: str
        """

        self._score_tag = score_tag

    @property
    def unbeaten_scores(self):
        """Gets the unbeaten_scores of this PlayerScoreResponse.

        The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.

        :return: The unbeaten_scores of this PlayerScoreResponse.
        :rtype: List[PlayerScore]
        """
        return self._unbeaten_scores

    @unbeaten_scores.setter
    def unbeaten_scores(self, unbeaten_scores):
        """Sets the unbeaten_scores of this PlayerScoreResponse.

        The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.

        :param unbeaten_scores: The unbeaten_scores of this PlayerScoreResponse.
        :type unbeaten_scores: List[PlayerScore]
        """

        self._unbeaten_scores = unbeaten_scores
