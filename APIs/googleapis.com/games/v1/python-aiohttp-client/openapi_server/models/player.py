# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.player_experience_info import PlayerExperienceInfo
from openapi_server.models.player_name import PlayerName
from openapi_server.models.profile_settings import ProfileSettings
from openapi_server import util


class Player(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_image_url: str=None, banner_url_landscape: str=None, banner_url_portrait: str=None, display_name: str=None, experience_info: PlayerExperienceInfo=None, friend_status: str=None, game_player_id: str=None, kind: str=None, name: PlayerName=None, original_player_id: str=None, player_id: str=None, profile_settings: ProfileSettings=None, title: str=None):
        """Player - a model defined in OpenAPI

        :param avatar_image_url: The avatar_image_url of this Player.
        :param banner_url_landscape: The banner_url_landscape of this Player.
        :param banner_url_portrait: The banner_url_portrait of this Player.
        :param display_name: The display_name of this Player.
        :param experience_info: The experience_info of this Player.
        :param friend_status: The friend_status of this Player.
        :param game_player_id: The game_player_id of this Player.
        :param kind: The kind of this Player.
        :param name: The name of this Player.
        :param original_player_id: The original_player_id of this Player.
        :param player_id: The player_id of this Player.
        :param profile_settings: The profile_settings of this Player.
        :param title: The title of this Player.
        """
        self.openapi_types = {
            'avatar_image_url': str,
            'banner_url_landscape': str,
            'banner_url_portrait': str,
            'display_name': str,
            'experience_info': PlayerExperienceInfo,
            'friend_status': str,
            'game_player_id': str,
            'kind': str,
            'name': PlayerName,
            'original_player_id': str,
            'player_id': str,
            'profile_settings': ProfileSettings,
            'title': str
        }

        self.attribute_map = {
            'avatar_image_url': 'avatarImageUrl',
            'banner_url_landscape': 'bannerUrlLandscape',
            'banner_url_portrait': 'bannerUrlPortrait',
            'display_name': 'displayName',
            'experience_info': 'experienceInfo',
            'friend_status': 'friendStatus',
            'game_player_id': 'gamePlayerId',
            'kind': 'kind',
            'name': 'name',
            'original_player_id': 'originalPlayerId',
            'player_id': 'playerId',
            'profile_settings': 'profileSettings',
            'title': 'title'
        }

        self._avatar_image_url = avatar_image_url
        self._banner_url_landscape = banner_url_landscape
        self._banner_url_portrait = banner_url_portrait
        self._display_name = display_name
        self._experience_info = experience_info
        self._friend_status = friend_status
        self._game_player_id = game_player_id
        self._kind = kind
        self._name = name
        self._original_player_id = original_player_id
        self._player_id = player_id
        self._profile_settings = profile_settings
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Player of this Player.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_image_url(self):
        """Gets the avatar_image_url of this Player.

        The base URL for the image that represents the player.

        :return: The avatar_image_url of this Player.
        :rtype: str
        """
        return self._avatar_image_url

    @avatar_image_url.setter
    def avatar_image_url(self, avatar_image_url):
        """Sets the avatar_image_url of this Player.

        The base URL for the image that represents the player.

        :param avatar_image_url: The avatar_image_url of this Player.
        :type avatar_image_url: str
        """

        self._avatar_image_url = avatar_image_url

    @property
    def banner_url_landscape(self):
        """Gets the banner_url_landscape of this Player.

        The url to the landscape mode player banner image.

        :return: The banner_url_landscape of this Player.
        :rtype: str
        """
        return self._banner_url_landscape

    @banner_url_landscape.setter
    def banner_url_landscape(self, banner_url_landscape):
        """Sets the banner_url_landscape of this Player.

        The url to the landscape mode player banner image.

        :param banner_url_landscape: The banner_url_landscape of this Player.
        :type banner_url_landscape: str
        """

        self._banner_url_landscape = banner_url_landscape

    @property
    def banner_url_portrait(self):
        """Gets the banner_url_portrait of this Player.

        The url to the portrait mode player banner image.

        :return: The banner_url_portrait of this Player.
        :rtype: str
        """
        return self._banner_url_portrait

    @banner_url_portrait.setter
    def banner_url_portrait(self, banner_url_portrait):
        """Sets the banner_url_portrait of this Player.

        The url to the portrait mode player banner image.

        :param banner_url_portrait: The banner_url_portrait of this Player.
        :type banner_url_portrait: str
        """

        self._banner_url_portrait = banner_url_portrait

    @property
    def display_name(self):
        """Gets the display_name of this Player.

        The name to display for the player.

        :return: The display_name of this Player.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Player.

        The name to display for the player.

        :param display_name: The display_name of this Player.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def experience_info(self):
        """Gets the experience_info of this Player.


        :return: The experience_info of this Player.
        :rtype: PlayerExperienceInfo
        """
        return self._experience_info

    @experience_info.setter
    def experience_info(self, experience_info):
        """Sets the experience_info of this Player.


        :param experience_info: The experience_info of this Player.
        :type experience_info: PlayerExperienceInfo
        """

        self._experience_info = experience_info

    @property
    def friend_status(self):
        """Gets the friend_status of this Player.

        The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.

        :return: The friend_status of this Player.
        :rtype: str
        """
        return self._friend_status

    @friend_status.setter
    def friend_status(self, friend_status):
        """Sets the friend_status of this Player.

        The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.

        :param friend_status: The friend_status of this Player.
        :type friend_status: str
        """
        allowed_values = ["NO_RELATIONSHIP", "FRIEND"]  # noqa: E501
        if friend_status not in allowed_values:
            raise ValueError(
                "Invalid value for `friend_status` ({0}), must be one of {1}"
                .format(friend_status, allowed_values)
            )

        self._friend_status = friend_status

    @property
    def game_player_id(self):
        """Gets the game_player_id of this Player.

        Per-application unique player identifier.

        :return: The game_player_id of this Player.
        :rtype: str
        """
        return self._game_player_id

    @game_player_id.setter
    def game_player_id(self, game_player_id):
        """Sets the game_player_id of this Player.

        Per-application unique player identifier.

        :param game_player_id: The game_player_id of this Player.
        :type game_player_id: str
        """

        self._game_player_id = game_player_id

    @property
    def kind(self):
        """Gets the kind of this Player.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#player`

        :return: The kind of this Player.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Player.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#player`

        :param kind: The kind of this Player.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Player.


        :return: The name of this Player.
        :rtype: PlayerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Player.


        :param name: The name of this Player.
        :type name: PlayerName
        """

        self._name = name

    @property
    def original_player_id(self):
        """Gets the original_player_id of this Player.

        The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.

        :return: The original_player_id of this Player.
        :rtype: str
        """
        return self._original_player_id

    @original_player_id.setter
    def original_player_id(self, original_player_id):
        """Sets the original_player_id of this Player.

        The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.

        :param original_player_id: The original_player_id of this Player.
        :type original_player_id: str
        """

        self._original_player_id = original_player_id

    @property
    def player_id(self):
        """Gets the player_id of this Player.

        The ID of the player.

        :return: The player_id of this Player.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Player.

        The ID of the player.

        :param player_id: The player_id of this Player.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def profile_settings(self):
        """Gets the profile_settings of this Player.


        :return: The profile_settings of this Player.
        :rtype: ProfileSettings
        """
        return self._profile_settings

    @profile_settings.setter
    def profile_settings(self, profile_settings):
        """Sets the profile_settings of this Player.


        :param profile_settings: The profile_settings of this Player.
        :type profile_settings: ProfileSettings
        """

        self._profile_settings = profile_settings

    @property
    def title(self):
        """Gets the title of this Player.

        The player's title rewarded for their game activities.

        :return: The title of this Player.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Player.

        The player's title rewarded for their game activities.

        :param title: The title of this Player.
        :type title: str
        """

        self._title = title
