# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, kind: str=None, name: str=None, url: str=None, width: int=None):
        """ImageAsset - a model defined in OpenAPI

        :param height: The height of this ImageAsset.
        :param kind: The kind of this ImageAsset.
        :param name: The name of this ImageAsset.
        :param url: The url of this ImageAsset.
        :param width: The width of this ImageAsset.
        """
        self.openapi_types = {
            'height': int,
            'kind': str,
            'name': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'kind': 'kind',
            'name': 'name',
            'url': 'url',
            'width': 'width'
        }

        self._height = height
        self._kind = kind
        self._name = name
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAsset of this ImageAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this ImageAsset.

        The height of the asset.

        :return: The height of this ImageAsset.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageAsset.

        The height of the asset.

        :param height: The height of this ImageAsset.
        :type height: int
        """

        self._height = height

    @property
    def kind(self):
        """Gets the kind of this ImageAsset.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`.

        :return: The kind of this ImageAsset.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ImageAsset.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#imageAsset`.

        :param kind: The kind of this ImageAsset.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ImageAsset.

        The name of the asset.

        :return: The name of this ImageAsset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageAsset.

        The name of the asset.

        :param name: The name of this ImageAsset.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ImageAsset.

        The URL of the asset.

        :return: The url of this ImageAsset.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageAsset.

        The URL of the asset.

        :param url: The url of this ImageAsset.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this ImageAsset.

        The width of the asset.

        :return: The width of this ImageAsset.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageAsset.

        The width of the asset.

        :param width: The width of this ImageAsset.
        :type width: int
        """

        self._width = width
