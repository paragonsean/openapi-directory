# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecallToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expire_time: str=None, multi_player_persona: bool=None, token: str=None):
        """RecallToken - a model defined in OpenAPI

        :param expire_time: The expire_time of this RecallToken.
        :param multi_player_persona: The multi_player_persona of this RecallToken.
        :param token: The token of this RecallToken.
        """
        self.openapi_types = {
            'expire_time': str,
            'multi_player_persona': bool,
            'token': str
        }

        self.attribute_map = {
            'expire_time': 'expireTime',
            'multi_player_persona': 'multiPlayerPersona',
            'token': 'token'
        }

        self._expire_time = expire_time
        self._multi_player_persona = multi_player_persona
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecallToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecallToken of this RecallToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expire_time(self):
        """Gets the expire_time of this RecallToken.

        Optional. Optional expiration time of the token

        :return: The expire_time of this RecallToken.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this RecallToken.

        Optional. Optional expiration time of the token

        :param expire_time: The expire_time of this RecallToken.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def multi_player_persona(self):
        """Gets the multi_player_persona of this RecallToken.

        Required. Whether the persona identified by the token is linked to multiple PGS Players

        :return: The multi_player_persona of this RecallToken.
        :rtype: bool
        """
        return self._multi_player_persona

    @multi_player_persona.setter
    def multi_player_persona(self, multi_player_persona):
        """Sets the multi_player_persona of this RecallToken.

        Required. Whether the persona identified by the token is linked to multiple PGS Players

        :param multi_player_persona: The multi_player_persona of this RecallToken.
        :type multi_player_persona: bool
        """

        self._multi_player_persona = multi_player_persona

    @property
    def token(self):
        """Gets the token of this RecallToken.

        Required. Value of the Recall token as it is provided by the client via LinkPersona RPC

        :return: The token of this RecallToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RecallToken.

        Required. Value of the Recall token as it is provided by the client via LinkPersona RPC

        :param token: The token of this RecallToken.
        :type token: str
        """

        self._token = token
