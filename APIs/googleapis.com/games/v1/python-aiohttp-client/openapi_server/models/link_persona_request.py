# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinkPersonaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cardinality_constraint: str=None, conflicting_links_resolution_policy: str=None, expire_time: str=None, persona: str=None, session_id: str=None, token: str=None, ttl: str=None):
        """LinkPersonaRequest - a model defined in OpenAPI

        :param cardinality_constraint: The cardinality_constraint of this LinkPersonaRequest.
        :param conflicting_links_resolution_policy: The conflicting_links_resolution_policy of this LinkPersonaRequest.
        :param expire_time: The expire_time of this LinkPersonaRequest.
        :param persona: The persona of this LinkPersonaRequest.
        :param session_id: The session_id of this LinkPersonaRequest.
        :param token: The token of this LinkPersonaRequest.
        :param ttl: The ttl of this LinkPersonaRequest.
        """
        self.openapi_types = {
            'cardinality_constraint': str,
            'conflicting_links_resolution_policy': str,
            'expire_time': str,
            'persona': str,
            'session_id': str,
            'token': str,
            'ttl': str
        }

        self.attribute_map = {
            'cardinality_constraint': 'cardinalityConstraint',
            'conflicting_links_resolution_policy': 'conflictingLinksResolutionPolicy',
            'expire_time': 'expireTime',
            'persona': 'persona',
            'session_id': 'sessionId',
            'token': 'token',
            'ttl': 'ttl'
        }

        self._cardinality_constraint = cardinality_constraint
        self._conflicting_links_resolution_policy = conflicting_links_resolution_policy
        self._expire_time = expire_time
        self._persona = persona
        self._session_id = session_id
        self._token = token
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkPersonaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkPersonaRequest of this LinkPersonaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cardinality_constraint(self):
        """Gets the cardinality_constraint of this LinkPersonaRequest.

        Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.

        :return: The cardinality_constraint of this LinkPersonaRequest.
        :rtype: str
        """
        return self._cardinality_constraint

    @cardinality_constraint.setter
    def cardinality_constraint(self, cardinality_constraint):
        """Sets the cardinality_constraint of this LinkPersonaRequest.

        Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.

        :param cardinality_constraint: The cardinality_constraint of this LinkPersonaRequest.
        :type cardinality_constraint: str
        """
        allowed_values = ["ONE_PERSONA_TO_ONE_PLAYER"]  # noqa: E501
        if cardinality_constraint not in allowed_values:
            raise ValueError(
                "Invalid value for `cardinality_constraint` ({0}), must be one of {1}"
                .format(cardinality_constraint, allowed_values)
            )

        self._cardinality_constraint = cardinality_constraint

    @property
    def conflicting_links_resolution_policy(self):
        """Gets the conflicting_links_resolution_policy of this LinkPersonaRequest.

        Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.

        :return: The conflicting_links_resolution_policy of this LinkPersonaRequest.
        :rtype: str
        """
        return self._conflicting_links_resolution_policy

    @conflicting_links_resolution_policy.setter
    def conflicting_links_resolution_policy(self, conflicting_links_resolution_policy):
        """Sets the conflicting_links_resolution_policy of this LinkPersonaRequest.

        Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.

        :param conflicting_links_resolution_policy: The conflicting_links_resolution_policy of this LinkPersonaRequest.
        :type conflicting_links_resolution_policy: str
        """
        allowed_values = ["KEEP_EXISTING_LINKS", "CREATE_NEW_LINK"]  # noqa: E501
        if conflicting_links_resolution_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `conflicting_links_resolution_policy` ({0}), must be one of {1}"
                .format(conflicting_links_resolution_policy, allowed_values)
            )

        self._conflicting_links_resolution_policy = conflicting_links_resolution_policy

    @property
    def expire_time(self):
        """Gets the expire_time of this LinkPersonaRequest.

        Input only. Optional expiration time.

        :return: The expire_time of this LinkPersonaRequest.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this LinkPersonaRequest.

        Input only. Optional expiration time.

        :param expire_time: The expire_time of this LinkPersonaRequest.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def persona(self):
        """Gets the persona of this LinkPersonaRequest.

        Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.

        :return: The persona of this LinkPersonaRequest.
        :rtype: str
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """Sets the persona of this LinkPersonaRequest.

        Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.

        :param persona: The persona of this LinkPersonaRequest.
        :type persona: str
        """

        self._persona = persona

    @property
    def session_id(self):
        """Gets the session_id of this LinkPersonaRequest.

        Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.

        :return: The session_id of this LinkPersonaRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this LinkPersonaRequest.

        Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.

        :param session_id: The session_id of this LinkPersonaRequest.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def token(self):
        """Gets the token of this LinkPersonaRequest.

        Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).

        :return: The token of this LinkPersonaRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LinkPersonaRequest.

        Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).

        :param token: The token of this LinkPersonaRequest.
        :type token: str
        """

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this LinkPersonaRequest.

        Input only. Optional time-to-live.

        :return: The ttl of this LinkPersonaRequest.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this LinkPersonaRequest.

        Input only. Optional time-to-live.

        :param ttl: The ttl of this LinkPersonaRequest.
        :type ttl: str
        """

        self._ttl = ttl
