# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friends_list_visibility: str=None, kind: str=None, profile_visible: bool=None):
        """ProfileSettings - a model defined in OpenAPI

        :param friends_list_visibility: The friends_list_visibility of this ProfileSettings.
        :param kind: The kind of this ProfileSettings.
        :param profile_visible: The profile_visible of this ProfileSettings.
        """
        self.openapi_types = {
            'friends_list_visibility': str,
            'kind': str,
            'profile_visible': bool
        }

        self.attribute_map = {
            'friends_list_visibility': 'friendsListVisibility',
            'kind': 'kind',
            'profile_visible': 'profileVisible'
        }

        self._friends_list_visibility = friends_list_visibility
        self._kind = kind
        self._profile_visible = profile_visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileSettings of this ProfileSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friends_list_visibility(self):
        """Gets the friends_list_visibility of this ProfileSettings.


        :return: The friends_list_visibility of this ProfileSettings.
        :rtype: str
        """
        return self._friends_list_visibility

    @friends_list_visibility.setter
    def friends_list_visibility(self, friends_list_visibility):
        """Sets the friends_list_visibility of this ProfileSettings.


        :param friends_list_visibility: The friends_list_visibility of this ProfileSettings.
        :type friends_list_visibility: str
        """
        allowed_values = ["VISIBLE", "REQUEST_REQUIRED", "UNAVAILABLE"]  # noqa: E501
        if friends_list_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `friends_list_visibility` ({0}), must be one of {1}"
                .format(friends_list_visibility, allowed_values)
            )

        self._friends_list_visibility = friends_list_visibility

    @property
    def kind(self):
        """Gets the kind of this ProfileSettings.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.

        :return: The kind of this ProfileSettings.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProfileSettings.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.

        :param kind: The kind of this ProfileSettings.
        :type kind: str
        """

        self._kind = kind

    @property
    def profile_visible(self):
        """Gets the profile_visible of this ProfileSettings.

        Whether the player's profile is visible to the currently signed in player.

        :return: The profile_visible of this ProfileSettings.
        :rtype: bool
        """
        return self._profile_visible

    @profile_visible.setter
    def profile_visible(self, profile_visible):
        """Sets the profile_visible of this ProfileSettings.

        Whether the player's profile is visible to the currently signed in player.

        :param profile_visible: The profile_visible of this ProfileSettings.
        :type profile_visible: bool
        """

        self._profile_visible = profile_visible
