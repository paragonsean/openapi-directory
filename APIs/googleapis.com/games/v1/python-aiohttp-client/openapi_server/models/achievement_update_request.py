# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.games_achievement_increment import GamesAchievementIncrement
from openapi_server.models.games_achievement_set_steps_at_least import GamesAchievementSetStepsAtLeast
from openapi_server import util


class AchievementUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_id: str=None, increment_payload: GamesAchievementIncrement=None, kind: str=None, set_steps_at_least_payload: GamesAchievementSetStepsAtLeast=None, update_type: str=None):
        """AchievementUpdateRequest - a model defined in OpenAPI

        :param achievement_id: The achievement_id of this AchievementUpdateRequest.
        :param increment_payload: The increment_payload of this AchievementUpdateRequest.
        :param kind: The kind of this AchievementUpdateRequest.
        :param set_steps_at_least_payload: The set_steps_at_least_payload of this AchievementUpdateRequest.
        :param update_type: The update_type of this AchievementUpdateRequest.
        """
        self.openapi_types = {
            'achievement_id': str,
            'increment_payload': GamesAchievementIncrement,
            'kind': str,
            'set_steps_at_least_payload': GamesAchievementSetStepsAtLeast,
            'update_type': str
        }

        self.attribute_map = {
            'achievement_id': 'achievementId',
            'increment_payload': 'incrementPayload',
            'kind': 'kind',
            'set_steps_at_least_payload': 'setStepsAtLeastPayload',
            'update_type': 'updateType'
        }

        self._achievement_id = achievement_id
        self._increment_payload = increment_payload
        self._kind = kind
        self._set_steps_at_least_payload = set_steps_at_least_payload
        self._update_type = update_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementUpdateRequest of this AchievementUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_id(self):
        """Gets the achievement_id of this AchievementUpdateRequest.

        The achievement this update is being applied to.

        :return: The achievement_id of this AchievementUpdateRequest.
        :rtype: str
        """
        return self._achievement_id

    @achievement_id.setter
    def achievement_id(self, achievement_id):
        """Sets the achievement_id of this AchievementUpdateRequest.

        The achievement this update is being applied to.

        :param achievement_id: The achievement_id of this AchievementUpdateRequest.
        :type achievement_id: str
        """

        self._achievement_id = achievement_id

    @property
    def increment_payload(self):
        """Gets the increment_payload of this AchievementUpdateRequest.


        :return: The increment_payload of this AchievementUpdateRequest.
        :rtype: GamesAchievementIncrement
        """
        return self._increment_payload

    @increment_payload.setter
    def increment_payload(self, increment_payload):
        """Sets the increment_payload of this AchievementUpdateRequest.


        :param increment_payload: The increment_payload of this AchievementUpdateRequest.
        :type increment_payload: GamesAchievementIncrement
        """

        self._increment_payload = increment_payload

    @property
    def kind(self):
        """Gets the kind of this AchievementUpdateRequest.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.

        :return: The kind of this AchievementUpdateRequest.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementUpdateRequest.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateRequest`.

        :param kind: The kind of this AchievementUpdateRequest.
        :type kind: str
        """

        self._kind = kind

    @property
    def set_steps_at_least_payload(self):
        """Gets the set_steps_at_least_payload of this AchievementUpdateRequest.


        :return: The set_steps_at_least_payload of this AchievementUpdateRequest.
        :rtype: GamesAchievementSetStepsAtLeast
        """
        return self._set_steps_at_least_payload

    @set_steps_at_least_payload.setter
    def set_steps_at_least_payload(self, set_steps_at_least_payload):
        """Sets the set_steps_at_least_payload of this AchievementUpdateRequest.


        :param set_steps_at_least_payload: The set_steps_at_least_payload of this AchievementUpdateRequest.
        :type set_steps_at_least_payload: GamesAchievementSetStepsAtLeast
        """

        self._set_steps_at_least_payload = set_steps_at_least_payload

    @property
    def update_type(self):
        """Gets the update_type of this AchievementUpdateRequest.

        The type of update being applied.

        :return: The update_type of this AchievementUpdateRequest.
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this AchievementUpdateRequest.

        The type of update being applied.

        :param update_type: The update_type of this AchievementUpdateRequest.
        :type update_type: str
        """
        allowed_values = ["REVEAL", "UNLOCK", "INCREMENT", "SET_STEPS_AT_LEAST"]  # noqa: E501
        if update_type not in allowed_values:
            raise ValueError(
                "Invalid value for `update_type` ({0}), must be one of {1}"
                .format(update_type, allowed_values)
            )

        self._update_type = update_type
