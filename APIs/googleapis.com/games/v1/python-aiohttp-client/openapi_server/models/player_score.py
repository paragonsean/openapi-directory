# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formatted_score: str=None, kind: str=None, score: str=None, score_tag: str=None, time_span: str=None):
        """PlayerScore - a model defined in OpenAPI

        :param formatted_score: The formatted_score of this PlayerScore.
        :param kind: The kind of this PlayerScore.
        :param score: The score of this PlayerScore.
        :param score_tag: The score_tag of this PlayerScore.
        :param time_span: The time_span of this PlayerScore.
        """
        self.openapi_types = {
            'formatted_score': str,
            'kind': str,
            'score': str,
            'score_tag': str,
            'time_span': str
        }

        self.attribute_map = {
            'formatted_score': 'formattedScore',
            'kind': 'kind',
            'score': 'score',
            'score_tag': 'scoreTag',
            'time_span': 'timeSpan'
        }

        self._formatted_score = formatted_score
        self._kind = kind
        self._score = score
        self._score_tag = score_tag
        self._time_span = time_span

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerScore of this PlayerScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formatted_score(self):
        """Gets the formatted_score of this PlayerScore.

        The formatted score for this player score.

        :return: The formatted_score of this PlayerScore.
        :rtype: str
        """
        return self._formatted_score

    @formatted_score.setter
    def formatted_score(self, formatted_score):
        """Sets the formatted_score of this PlayerScore.

        The formatted score for this player score.

        :param formatted_score: The formatted_score of this PlayerScore.
        :type formatted_score: str
        """

        self._formatted_score = formatted_score

    @property
    def kind(self):
        """Gets the kind of this PlayerScore.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.

        :return: The kind of this PlayerScore.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlayerScore.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.

        :param kind: The kind of this PlayerScore.
        :type kind: str
        """

        self._kind = kind

    @property
    def score(self):
        """Gets the score of this PlayerScore.

        The numerical value for this player score.

        :return: The score of this PlayerScore.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PlayerScore.

        The numerical value for this player score.

        :param score: The score of this PlayerScore.
        :type score: str
        """

        self._score = score

    @property
    def score_tag(self):
        """Gets the score_tag of this PlayerScore.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :return: The score_tag of this PlayerScore.
        :rtype: str
        """
        return self._score_tag

    @score_tag.setter
    def score_tag(self, score_tag):
        """Sets the score_tag of this PlayerScore.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :param score_tag: The score_tag of this PlayerScore.
        :type score_tag: str
        """

        self._score_tag = score_tag

    @property
    def time_span(self):
        """Gets the time_span of this PlayerScore.

        The time span for this player score.

        :return: The time_span of this PlayerScore.
        :rtype: str
        """
        return self._time_span

    @time_span.setter
    def time_span(self, time_span):
        """Sets the time_span of this PlayerScore.

        The time span for this player score.

        :param time_span: The time_span of this PlayerScore.
        :type time_span: str
        """
        allowed_values = ["ALL_TIME", "WEEKLY", "DAILY"]  # noqa: E501
        if time_span not in allowed_values:
            raise ValueError(
                "Invalid value for `time_span` ({0}), must be one of {1}"
                .format(time_span, allowed_values)
            )

        self._time_span = time_span
