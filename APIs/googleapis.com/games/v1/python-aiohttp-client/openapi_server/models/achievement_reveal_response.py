# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchievementRevealResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_state: str=None, kind: str=None):
        """AchievementRevealResponse - a model defined in OpenAPI

        :param current_state: The current_state of this AchievementRevealResponse.
        :param kind: The kind of this AchievementRevealResponse.
        """
        self.openapi_types = {
            'current_state': str,
            'kind': str
        }

        self.attribute_map = {
            'current_state': 'currentState',
            'kind': 'kind'
        }

        self._current_state = current_state
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementRevealResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementRevealResponse of this AchievementRevealResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_state(self):
        """Gets the current_state of this AchievementRevealResponse.

        The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.

        :return: The current_state of this AchievementRevealResponse.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this AchievementRevealResponse.

        The current state of the achievement for which a reveal was attempted. This might be `UNLOCKED` if the achievement was already unlocked.

        :param current_state: The current_state of this AchievementRevealResponse.
        :type current_state: str
        """
        allowed_values = ["REVEALED", "UNLOCKED"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def kind(self):
        """Gets the kind of this AchievementRevealResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.

        :return: The kind of this AchievementRevealResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementRevealResponse.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementRevealResponse`.

        :param kind: The kind of this AchievementRevealResponse.
        :type kind: str
        """

        self._kind = kind
