# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, leaderboard_id: str=None, score: str=None, score_tag: str=None, signature: str=None):
        """ScoreSubmission - a model defined in OpenAPI

        :param kind: The kind of this ScoreSubmission.
        :param leaderboard_id: The leaderboard_id of this ScoreSubmission.
        :param score: The score of this ScoreSubmission.
        :param score_tag: The score_tag of this ScoreSubmission.
        :param signature: The signature of this ScoreSubmission.
        """
        self.openapi_types = {
            'kind': str,
            'leaderboard_id': str,
            'score': str,
            'score_tag': str,
            'signature': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'leaderboard_id': 'leaderboardId',
            'score': 'score',
            'score_tag': 'scoreTag',
            'signature': 'signature'
        }

        self._kind = kind
        self._leaderboard_id = leaderboard_id
        self._score = score
        self._score_tag = score_tag
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreSubmission of this ScoreSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this ScoreSubmission.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.

        :return: The kind of this ScoreSubmission.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ScoreSubmission.

        Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.

        :param kind: The kind of this ScoreSubmission.
        :type kind: str
        """

        self._kind = kind

    @property
    def leaderboard_id(self):
        """Gets the leaderboard_id of this ScoreSubmission.

        The leaderboard this score is being submitted to.

        :return: The leaderboard_id of this ScoreSubmission.
        :rtype: str
        """
        return self._leaderboard_id

    @leaderboard_id.setter
    def leaderboard_id(self, leaderboard_id):
        """Sets the leaderboard_id of this ScoreSubmission.

        The leaderboard this score is being submitted to.

        :param leaderboard_id: The leaderboard_id of this ScoreSubmission.
        :type leaderboard_id: str
        """

        self._leaderboard_id = leaderboard_id

    @property
    def score(self):
        """Gets the score of this ScoreSubmission.

        The new score being submitted.

        :return: The score of this ScoreSubmission.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ScoreSubmission.

        The new score being submitted.

        :param score: The score of this ScoreSubmission.
        :type score: str
        """

        self._score = score

    @property
    def score_tag(self):
        """Gets the score_tag of this ScoreSubmission.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :return: The score_tag of this ScoreSubmission.
        :rtype: str
        """
        return self._score_tag

    @score_tag.setter
    def score_tag(self, score_tag):
        """Sets the score_tag of this ScoreSubmission.

        Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.

        :param score_tag: The score_tag of this ScoreSubmission.
        :type score_tag: str
        """

        self._score_tag = score_tag

    @property
    def signature(self):
        """Gets the signature of this ScoreSubmission.

        Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.

        :return: The signature of this ScoreSubmission.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ScoreSubmission.

        Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.

        :param signature: The signature of this ScoreSubmission.
        :type signature: str
        """

        self._signature = signature
