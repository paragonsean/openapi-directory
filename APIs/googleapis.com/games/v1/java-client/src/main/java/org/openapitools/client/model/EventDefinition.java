/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventChild;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event definition resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventDefinition {
  public static final String SERIALIZED_NAME_CHILD_EVENTS = "childEvents";
  @SerializedName(SERIALIZED_NAME_CHILD_EVENTS)
  private List<EventChild> childEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_DEFAULT_IMAGE_URL = "isDefaultImageUrl";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_IMAGE_URL)
  private Boolean isDefaultImageUrl;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * The visibility of event being tracked in this definition.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    REVEALED("REVEALED"),
    
    HIDDEN("HIDDEN");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public EventDefinition() {
  }

  public EventDefinition childEvents(List<EventChild> childEvents) {
    this.childEvents = childEvents;
    return this;
  }

  public EventDefinition addChildEventsItem(EventChild childEventsItem) {
    if (this.childEvents == null) {
      this.childEvents = new ArrayList<>();
    }
    this.childEvents.add(childEventsItem);
    return this;
  }

  /**
   * A list of events that are a child of this event.
   * @return childEvents
   */
  @javax.annotation.Nullable
  public List<EventChild> getChildEvents() {
    return childEvents;
  }

  public void setChildEvents(List<EventChild> childEvents) {
    this.childEvents = childEvents;
  }


  public EventDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of what this event represents.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventDefinition displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name to display for the event.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EventDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the event.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventDefinition imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The base URL for the image that represents the event.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public EventDefinition isDefaultImageUrl(Boolean isDefaultImageUrl) {
    this.isDefaultImageUrl = isDefaultImageUrl;
    return this;
  }

  /**
   * Indicates whether the icon image being returned is a default image, or is game-provided.
   * @return isDefaultImageUrl
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultImageUrl() {
    return isDefaultImageUrl;
  }

  public void setIsDefaultImageUrl(Boolean isDefaultImageUrl) {
    this.isDefaultImageUrl = isDefaultImageUrl;
  }


  public EventDefinition kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#eventDefinition&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public EventDefinition visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The visibility of event being tracked in this definition.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDefinition eventDefinition = (EventDefinition) o;
    return Objects.equals(this.childEvents, eventDefinition.childEvents) &&
        Objects.equals(this.description, eventDefinition.description) &&
        Objects.equals(this.displayName, eventDefinition.displayName) &&
        Objects.equals(this.id, eventDefinition.id) &&
        Objects.equals(this.imageUrl, eventDefinition.imageUrl) &&
        Objects.equals(this.isDefaultImageUrl, eventDefinition.isDefaultImageUrl) &&
        Objects.equals(this.kind, eventDefinition.kind) &&
        Objects.equals(this.visibility, eventDefinition.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childEvents, description, displayName, id, imageUrl, isDefaultImageUrl, kind, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDefinition {\n");
    sb.append("    childEvents: ").append(toIndentedString(childEvents)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isDefaultImageUrl: ").append(toIndentedString(isDefaultImageUrl)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childEvents");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("isDefaultImageUrl");
    openapiFields.add("kind");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDefinition is not found in the empty JSON string", EventDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childEvents") != null && !jsonObj.get("childEvents").isJsonNull()) {
        JsonArray jsonArraychildEvents = jsonObj.getAsJsonArray("childEvents");
        if (jsonArraychildEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childEvents` to be an array in the JSON string but got `%s`", jsonObj.get("childEvents").toString()));
          }

          // validate the optional field `childEvents` (array)
          for (int i = 0; i < jsonArraychildEvents.size(); i++) {
            EventChild.validateJsonElement(jsonArraychildEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDefinition>() {
           @Override
           public void write(JsonWriter out, EventDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventDefinition
   * @throws IOException if the JSON string is invalid with respect to EventDefinition
   */
  public static EventDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDefinition.class);
  }

  /**
   * Convert an instance of EventDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

