/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PlayerExperienceInfo;
import org.openapitools.client.model.PlayerName;
import org.openapitools.client.model.ProfileSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Player resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_AVATAR_IMAGE_URL = "avatarImageUrl";
  @SerializedName(SERIALIZED_NAME_AVATAR_IMAGE_URL)
  private String avatarImageUrl;

  public static final String SERIALIZED_NAME_BANNER_URL_LANDSCAPE = "bannerUrlLandscape";
  @SerializedName(SERIALIZED_NAME_BANNER_URL_LANDSCAPE)
  private String bannerUrlLandscape;

  public static final String SERIALIZED_NAME_BANNER_URL_PORTRAIT = "bannerUrlPortrait";
  @SerializedName(SERIALIZED_NAME_BANNER_URL_PORTRAIT)
  private String bannerUrlPortrait;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPERIENCE_INFO = "experienceInfo";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_INFO)
  private PlayerExperienceInfo experienceInfo;

  /**
   * The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
   */
  @JsonAdapter(FriendStatusEnum.Adapter.class)
  public enum FriendStatusEnum {
    NO_RELATIONSHIP("NO_RELATIONSHIP"),
    
    FRIEND("FRIEND");

    private String value;

    FriendStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FriendStatusEnum fromValue(String value) {
      for (FriendStatusEnum b : FriendStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FriendStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FriendStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FriendStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FriendStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FriendStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRIEND_STATUS = "friendStatus";
  @SerializedName(SERIALIZED_NAME_FRIEND_STATUS)
  private FriendStatusEnum friendStatus;

  public static final String SERIALIZED_NAME_GAME_PLAYER_ID = "gamePlayerId";
  @SerializedName(SERIALIZED_NAME_GAME_PLAYER_ID)
  private String gamePlayerId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private PlayerName name;

  public static final String SERIALIZED_NAME_ORIGINAL_PLAYER_ID = "originalPlayerId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PLAYER_ID)
  private String originalPlayerId;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_PROFILE_SETTINGS = "profileSettings";
  @SerializedName(SERIALIZED_NAME_PROFILE_SETTINGS)
  private ProfileSettings profileSettings;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Player() {
  }

  public Player avatarImageUrl(String avatarImageUrl) {
    this.avatarImageUrl = avatarImageUrl;
    return this;
  }

  /**
   * The base URL for the image that represents the player.
   * @return avatarImageUrl
   */
  @javax.annotation.Nullable
  public String getAvatarImageUrl() {
    return avatarImageUrl;
  }

  public void setAvatarImageUrl(String avatarImageUrl) {
    this.avatarImageUrl = avatarImageUrl;
  }


  public Player bannerUrlLandscape(String bannerUrlLandscape) {
    this.bannerUrlLandscape = bannerUrlLandscape;
    return this;
  }

  /**
   * The url to the landscape mode player banner image.
   * @return bannerUrlLandscape
   */
  @javax.annotation.Nullable
  public String getBannerUrlLandscape() {
    return bannerUrlLandscape;
  }

  public void setBannerUrlLandscape(String bannerUrlLandscape) {
    this.bannerUrlLandscape = bannerUrlLandscape;
  }


  public Player bannerUrlPortrait(String bannerUrlPortrait) {
    this.bannerUrlPortrait = bannerUrlPortrait;
    return this;
  }

  /**
   * The url to the portrait mode player banner image.
   * @return bannerUrlPortrait
   */
  @javax.annotation.Nullable
  public String getBannerUrlPortrait() {
    return bannerUrlPortrait;
  }

  public void setBannerUrlPortrait(String bannerUrlPortrait) {
    this.bannerUrlPortrait = bannerUrlPortrait;
  }


  public Player displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name to display for the player.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Player experienceInfo(PlayerExperienceInfo experienceInfo) {
    this.experienceInfo = experienceInfo;
    return this;
  }

  /**
   * Get experienceInfo
   * @return experienceInfo
   */
  @javax.annotation.Nullable
  public PlayerExperienceInfo getExperienceInfo() {
    return experienceInfo;
  }

  public void setExperienceInfo(PlayerExperienceInfo experienceInfo) {
    this.experienceInfo = experienceInfo;
  }


  public Player friendStatus(FriendStatusEnum friendStatus) {
    this.friendStatus = friendStatus;
    return this;
  }

  /**
   * The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
   * @return friendStatus
   */
  @javax.annotation.Nullable
  public FriendStatusEnum getFriendStatus() {
    return friendStatus;
  }

  public void setFriendStatus(FriendStatusEnum friendStatus) {
    this.friendStatus = friendStatus;
  }


  public Player gamePlayerId(String gamePlayerId) {
    this.gamePlayerId = gamePlayerId;
    return this;
  }

  /**
   * Per-application unique player identifier.
   * @return gamePlayerId
   */
  @javax.annotation.Nullable
  public String getGamePlayerId() {
    return gamePlayerId;
  }

  public void setGamePlayerId(String gamePlayerId) {
    this.gamePlayerId = gamePlayerId;
  }


  public Player kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#player&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Player name(PlayerName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public PlayerName getName() {
    return name;
  }

  public void setName(PlayerName name) {
    this.name = name;
  }


  public Player originalPlayerId(String originalPlayerId) {
    this.originalPlayerId = originalPlayerId;
    return this;
  }

  /**
   * The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
   * @return originalPlayerId
   */
  @javax.annotation.Nullable
  public String getOriginalPlayerId() {
    return originalPlayerId;
  }

  public void setOriginalPlayerId(String originalPlayerId) {
    this.originalPlayerId = originalPlayerId;
  }


  public Player playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * The ID of the player.
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public Player profileSettings(ProfileSettings profileSettings) {
    this.profileSettings = profileSettings;
    return this;
  }

  /**
   * Get profileSettings
   * @return profileSettings
   */
  @javax.annotation.Nullable
  public ProfileSettings getProfileSettings() {
    return profileSettings;
  }

  public void setProfileSettings(ProfileSettings profileSettings) {
    this.profileSettings = profileSettings;
  }


  public Player title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The player&#39;s title rewarded for their game activities.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.avatarImageUrl, player.avatarImageUrl) &&
        Objects.equals(this.bannerUrlLandscape, player.bannerUrlLandscape) &&
        Objects.equals(this.bannerUrlPortrait, player.bannerUrlPortrait) &&
        Objects.equals(this.displayName, player.displayName) &&
        Objects.equals(this.experienceInfo, player.experienceInfo) &&
        Objects.equals(this.friendStatus, player.friendStatus) &&
        Objects.equals(this.gamePlayerId, player.gamePlayerId) &&
        Objects.equals(this.kind, player.kind) &&
        Objects.equals(this.name, player.name) &&
        Objects.equals(this.originalPlayerId, player.originalPlayerId) &&
        Objects.equals(this.playerId, player.playerId) &&
        Objects.equals(this.profileSettings, player.profileSettings) &&
        Objects.equals(this.title, player.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarImageUrl, bannerUrlLandscape, bannerUrlPortrait, displayName, experienceInfo, friendStatus, gamePlayerId, kind, name, originalPlayerId, playerId, profileSettings, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    avatarImageUrl: ").append(toIndentedString(avatarImageUrl)).append("\n");
    sb.append("    bannerUrlLandscape: ").append(toIndentedString(bannerUrlLandscape)).append("\n");
    sb.append("    bannerUrlPortrait: ").append(toIndentedString(bannerUrlPortrait)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    experienceInfo: ").append(toIndentedString(experienceInfo)).append("\n");
    sb.append("    friendStatus: ").append(toIndentedString(friendStatus)).append("\n");
    sb.append("    gamePlayerId: ").append(toIndentedString(gamePlayerId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalPlayerId: ").append(toIndentedString(originalPlayerId)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    profileSettings: ").append(toIndentedString(profileSettings)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarImageUrl");
    openapiFields.add("bannerUrlLandscape");
    openapiFields.add("bannerUrlPortrait");
    openapiFields.add("displayName");
    openapiFields.add("experienceInfo");
    openapiFields.add("friendStatus");
    openapiFields.add("gamePlayerId");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("originalPlayerId");
    openapiFields.add("playerId");
    openapiFields.add("profileSettings");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatarImageUrl") != null && !jsonObj.get("avatarImageUrl").isJsonNull()) && !jsonObj.get("avatarImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarImageUrl").toString()));
      }
      if ((jsonObj.get("bannerUrlLandscape") != null && !jsonObj.get("bannerUrlLandscape").isJsonNull()) && !jsonObj.get("bannerUrlLandscape").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerUrlLandscape` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerUrlLandscape").toString()));
      }
      if ((jsonObj.get("bannerUrlPortrait") != null && !jsonObj.get("bannerUrlPortrait").isJsonNull()) && !jsonObj.get("bannerUrlPortrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerUrlPortrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerUrlPortrait").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `experienceInfo`
      if (jsonObj.get("experienceInfo") != null && !jsonObj.get("experienceInfo").isJsonNull()) {
        PlayerExperienceInfo.validateJsonElement(jsonObj.get("experienceInfo"));
      }
      if ((jsonObj.get("friendStatus") != null && !jsonObj.get("friendStatus").isJsonNull()) && !jsonObj.get("friendStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendStatus").toString()));
      }
      // validate the optional field `friendStatus`
      if (jsonObj.get("friendStatus") != null && !jsonObj.get("friendStatus").isJsonNull()) {
        FriendStatusEnum.validateJsonElement(jsonObj.get("friendStatus"));
      }
      if ((jsonObj.get("gamePlayerId") != null && !jsonObj.get("gamePlayerId").isJsonNull()) && !jsonObj.get("gamePlayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gamePlayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gamePlayerId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        PlayerName.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("originalPlayerId") != null && !jsonObj.get("originalPlayerId").isJsonNull()) && !jsonObj.get("originalPlayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalPlayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalPlayerId").toString()));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      // validate the optional field `profileSettings`
      if (jsonObj.get("profileSettings") != null && !jsonObj.get("profileSettings").isJsonNull()) {
        ProfileSettings.validateJsonElement(jsonObj.get("profileSettings"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

