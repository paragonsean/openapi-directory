/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationCategory;
import org.openapitools.client.model.ImageAsset;
import org.openapitools.client.model.Instance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Application resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Application {
  public static final String SERIALIZED_NAME_ACHIEVEMENT_COUNT = "achievement_count";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_COUNT)
  private Integer achievementCount;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private List<ImageAsset> assets = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private ApplicationCategory category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets enabledFeatures
   */
  @JsonAdapter(EnabledFeaturesEnum.Adapter.class)
  public enum EnabledFeaturesEnum {
    SNAPSHOTS("SNAPSHOTS");

    private String value;

    EnabledFeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledFeaturesEnum fromValue(String value) {
      for (EnabledFeaturesEnum b : EnabledFeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnabledFeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledFeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledFeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnabledFeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnabledFeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLED_FEATURES = "enabledFeatures";
  @SerializedName(SERIALIZED_NAME_ENABLED_FEATURES)
  private List<EnabledFeaturesEnum> enabledFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<Instance> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "lastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private String lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_LEADERBOARD_COUNT = "leaderboard_count";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD_COUNT)
  private Integer leaderboardCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THEME_COLOR = "themeColor";
  @SerializedName(SERIALIZED_NAME_THEME_COLOR)
  private String themeColor;

  public Application() {
  }

  public Application achievementCount(Integer achievementCount) {
    this.achievementCount = achievementCount;
    return this;
  }

  /**
   * The number of achievements visible to the currently authenticated player.
   * @return achievementCount
   */
  @javax.annotation.Nullable
  public Integer getAchievementCount() {
    return achievementCount;
  }

  public void setAchievementCount(Integer achievementCount) {
    this.achievementCount = achievementCount;
  }


  public Application assets(List<ImageAsset> assets) {
    this.assets = assets;
    return this;
  }

  public Application addAssetsItem(ImageAsset assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<>();
    }
    this.assets.add(assetsItem);
    return this;
  }

  /**
   * The assets of the application.
   * @return assets
   */
  @javax.annotation.Nullable
  public List<ImageAsset> getAssets() {
    return assets;
  }

  public void setAssets(List<ImageAsset> assets) {
    this.assets = assets;
  }


  public Application author(String author) {
    this.author = author;
    return this;
  }

  /**
   * The author of the application.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public Application category(ApplicationCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public ApplicationCategory getCategory() {
    return category;
  }

  public void setCategory(ApplicationCategory category) {
    this.category = category;
  }


  public Application description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the application.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Application enabledFeatures(List<EnabledFeaturesEnum> enabledFeatures) {
    this.enabledFeatures = enabledFeatures;
    return this;
  }

  public Application addEnabledFeaturesItem(EnabledFeaturesEnum enabledFeaturesItem) {
    if (this.enabledFeatures == null) {
      this.enabledFeatures = new ArrayList<>();
    }
    this.enabledFeatures.add(enabledFeaturesItem);
    return this;
  }

  /**
   * A list of features that have been enabled for the application.
   * @return enabledFeatures
   */
  @javax.annotation.Nullable
  public List<EnabledFeaturesEnum> getEnabledFeatures() {
    return enabledFeatures;
  }

  public void setEnabledFeatures(List<EnabledFeaturesEnum> enabledFeatures) {
    this.enabledFeatures = enabledFeatures;
  }


  public Application id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the application.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Application instances(List<Instance> instances) {
    this.instances = instances;
    return this;
  }

  public Application addInstancesItem(Instance instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * The instances of the application.
   * @return instances
   */
  @javax.annotation.Nullable
  public List<Instance> getInstances() {
    return instances;
  }

  public void setInstances(List<Instance> instances) {
    this.instances = instances;
  }


  public Application kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#application&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Application lastUpdatedTimestamp(String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * The last updated timestamp of the application.
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public String getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public Application leaderboardCount(Integer leaderboardCount) {
    this.leaderboardCount = leaderboardCount;
    return this;
  }

  /**
   * The number of leaderboards visible to the currently authenticated player.
   * @return leaderboardCount
   */
  @javax.annotation.Nullable
  public Integer getLeaderboardCount() {
    return leaderboardCount;
  }

  public void setLeaderboardCount(Integer leaderboardCount) {
    this.leaderboardCount = leaderboardCount;
  }


  public Application name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Application themeColor(String themeColor) {
    this.themeColor = themeColor;
    return this;
  }

  /**
   * A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \&quot;E0E0E0\&quot;).
   * @return themeColor
   */
  @javax.annotation.Nullable
  public String getThemeColor() {
    return themeColor;
  }

  public void setThemeColor(String themeColor) {
    this.themeColor = themeColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.achievementCount, application.achievementCount) &&
        Objects.equals(this.assets, application.assets) &&
        Objects.equals(this.author, application.author) &&
        Objects.equals(this.category, application.category) &&
        Objects.equals(this.description, application.description) &&
        Objects.equals(this.enabledFeatures, application.enabledFeatures) &&
        Objects.equals(this.id, application.id) &&
        Objects.equals(this.instances, application.instances) &&
        Objects.equals(this.kind, application.kind) &&
        Objects.equals(this.lastUpdatedTimestamp, application.lastUpdatedTimestamp) &&
        Objects.equals(this.leaderboardCount, application.leaderboardCount) &&
        Objects.equals(this.name, application.name) &&
        Objects.equals(this.themeColor, application.themeColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementCount, assets, author, category, description, enabledFeatures, id, instances, kind, lastUpdatedTimestamp, leaderboardCount, name, themeColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    achievementCount: ").append(toIndentedString(achievementCount)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabledFeatures: ").append(toIndentedString(enabledFeatures)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    leaderboardCount: ").append(toIndentedString(leaderboardCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    themeColor: ").append(toIndentedString(themeColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievement_count");
    openapiFields.add("assets");
    openapiFields.add("author");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("enabledFeatures");
    openapiFields.add("id");
    openapiFields.add("instances");
    openapiFields.add("kind");
    openapiFields.add("lastUpdatedTimestamp");
    openapiFields.add("leaderboard_count");
    openapiFields.add("name");
    openapiFields.add("themeColor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Application
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Application.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Application` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
        if (jsonArrayassets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assets` to be an array in the JSON string but got `%s`", jsonObj.get("assets").toString()));
          }

          // validate the optional field `assets` (array)
          for (int i = 0; i < jsonArrayassets.size(); i++) {
            ImageAsset.validateJsonElement(jsonArrayassets.get(i));
          };
        }
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        ApplicationCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledFeatures") != null && !jsonObj.get("enabledFeatures").isJsonNull() && !jsonObj.get("enabledFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("enabledFeatures").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
        if (jsonArrayinstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
          }

          // validate the optional field `instances` (array)
          for (int i = 0; i < jsonArrayinstances.size(); i++) {
            Instance.validateJsonElement(jsonArrayinstances.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("lastUpdatedTimestamp") != null && !jsonObj.get("lastUpdatedTimestamp").isJsonNull()) && !jsonObj.get("lastUpdatedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTimestamp").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("themeColor") != null && !jsonObj.get("themeColor").isJsonNull()) && !jsonObj.get("themeColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeColor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Application given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Application
   * @throws IOException if the JSON string is invalid with respect to Application
   */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

  /**
   * Convert an instance of Application to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

