/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An updated achievement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchievementUpdateResponse {
  public static final String SERIALIZED_NAME_ACHIEVEMENT_ID = "achievementId";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_ID)
  private String achievementId;

  /**
   * The current state of the achievement.
   */
  @JsonAdapter(CurrentStateEnum.Adapter.class)
  public enum CurrentStateEnum {
    HIDDEN("HIDDEN"),
    
    REVEALED("REVEALED"),
    
    UNLOCKED("UNLOCKED");

    private String value;

    CurrentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentStateEnum fromValue(String value) {
      for (CurrentStateEnum b : CurrentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_STATE = "currentState";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE)
  private CurrentStateEnum currentState;

  public static final String SERIALIZED_NAME_CURRENT_STEPS = "currentSteps";
  @SerializedName(SERIALIZED_NAME_CURRENT_STEPS)
  private Integer currentSteps;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NEWLY_UNLOCKED = "newlyUnlocked";
  @SerializedName(SERIALIZED_NAME_NEWLY_UNLOCKED)
  private Boolean newlyUnlocked;

  public static final String SERIALIZED_NAME_UPDATE_OCCURRED = "updateOccurred";
  @SerializedName(SERIALIZED_NAME_UPDATE_OCCURRED)
  private Boolean updateOccurred;

  public AchievementUpdateResponse() {
  }

  public AchievementUpdateResponse achievementId(String achievementId) {
    this.achievementId = achievementId;
    return this;
  }

  /**
   * The achievement this update is was applied to.
   * @return achievementId
   */
  @javax.annotation.Nullable
  public String getAchievementId() {
    return achievementId;
  }

  public void setAchievementId(String achievementId) {
    this.achievementId = achievementId;
  }


  public AchievementUpdateResponse currentState(CurrentStateEnum currentState) {
    this.currentState = currentState;
    return this;
  }

  /**
   * The current state of the achievement.
   * @return currentState
   */
  @javax.annotation.Nullable
  public CurrentStateEnum getCurrentState() {
    return currentState;
  }

  public void setCurrentState(CurrentStateEnum currentState) {
    this.currentState = currentState;
  }


  public AchievementUpdateResponse currentSteps(Integer currentSteps) {
    this.currentSteps = currentSteps;
    return this;
  }

  /**
   * The current steps recorded for this achievement if it is incremental.
   * @return currentSteps
   */
  @javax.annotation.Nullable
  public Integer getCurrentSteps() {
    return currentSteps;
  }

  public void setCurrentSteps(Integer currentSteps) {
    this.currentSteps = currentSteps;
  }


  public AchievementUpdateResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#achievementUpdateResponse&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AchievementUpdateResponse newlyUnlocked(Boolean newlyUnlocked) {
    this.newlyUnlocked = newlyUnlocked;
    return this;
  }

  /**
   * Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
   * @return newlyUnlocked
   */
  @javax.annotation.Nullable
  public Boolean getNewlyUnlocked() {
    return newlyUnlocked;
  }

  public void setNewlyUnlocked(Boolean newlyUnlocked) {
    this.newlyUnlocked = newlyUnlocked;
  }


  public AchievementUpdateResponse updateOccurred(Boolean updateOccurred) {
    this.updateOccurred = updateOccurred;
    return this;
  }

  /**
   * Whether the requested updates actually affected the achievement.
   * @return updateOccurred
   */
  @javax.annotation.Nullable
  public Boolean getUpdateOccurred() {
    return updateOccurred;
  }

  public void setUpdateOccurred(Boolean updateOccurred) {
    this.updateOccurred = updateOccurred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchievementUpdateResponse achievementUpdateResponse = (AchievementUpdateResponse) o;
    return Objects.equals(this.achievementId, achievementUpdateResponse.achievementId) &&
        Objects.equals(this.currentState, achievementUpdateResponse.currentState) &&
        Objects.equals(this.currentSteps, achievementUpdateResponse.currentSteps) &&
        Objects.equals(this.kind, achievementUpdateResponse.kind) &&
        Objects.equals(this.newlyUnlocked, achievementUpdateResponse.newlyUnlocked) &&
        Objects.equals(this.updateOccurred, achievementUpdateResponse.updateOccurred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementId, currentState, currentSteps, kind, newlyUnlocked, updateOccurred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchievementUpdateResponse {\n");
    sb.append("    achievementId: ").append(toIndentedString(achievementId)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    currentSteps: ").append(toIndentedString(currentSteps)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    newlyUnlocked: ").append(toIndentedString(newlyUnlocked)).append("\n");
    sb.append("    updateOccurred: ").append(toIndentedString(updateOccurred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievementId");
    openapiFields.add("currentState");
    openapiFields.add("currentSteps");
    openapiFields.add("kind");
    openapiFields.add("newlyUnlocked");
    openapiFields.add("updateOccurred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchievementUpdateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchievementUpdateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchievementUpdateResponse is not found in the empty JSON string", AchievementUpdateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchievementUpdateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchievementUpdateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achievementId") != null && !jsonObj.get("achievementId").isJsonNull()) && !jsonObj.get("achievementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achievementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achievementId").toString()));
      }
      if ((jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) && !jsonObj.get("currentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentState").toString()));
      }
      // validate the optional field `currentState`
      if (jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) {
        CurrentStateEnum.validateJsonElement(jsonObj.get("currentState"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchievementUpdateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchievementUpdateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchievementUpdateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchievementUpdateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AchievementUpdateResponse>() {
           @Override
           public void write(JsonWriter out, AchievementUpdateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchievementUpdateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchievementUpdateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchievementUpdateResponse
   * @throws IOException if the JSON string is invalid with respect to AchievementUpdateResponse
   */
  public static AchievementUpdateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchievementUpdateResponse.class);
  }

  /**
   * Convert an instance of AchievementUpdateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

