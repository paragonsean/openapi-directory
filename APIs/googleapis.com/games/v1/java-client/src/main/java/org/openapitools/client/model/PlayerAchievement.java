/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An achievement object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerAchievement {
  /**
   * The state of the achievement.
   */
  @JsonAdapter(AchievementStateEnum.Adapter.class)
  public enum AchievementStateEnum {
    HIDDEN("HIDDEN"),
    
    REVEALED("REVEALED"),
    
    UNLOCKED("UNLOCKED");

    private String value;

    AchievementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AchievementStateEnum fromValue(String value) {
      for (AchievementStateEnum b : AchievementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AchievementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AchievementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AchievementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AchievementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AchievementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACHIEVEMENT_STATE = "achievementState";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_STATE)
  private AchievementStateEnum achievementState;

  public static final String SERIALIZED_NAME_CURRENT_STEPS = "currentSteps";
  @SerializedName(SERIALIZED_NAME_CURRENT_STEPS)
  private Integer currentSteps;

  public static final String SERIALIZED_NAME_EXPERIENCE_POINTS = "experiencePoints";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_POINTS)
  private String experiencePoints;

  public static final String SERIALIZED_NAME_FORMATTED_CURRENT_STEPS_STRING = "formattedCurrentStepsString";
  @SerializedName(SERIALIZED_NAME_FORMATTED_CURRENT_STEPS_STRING)
  private String formattedCurrentStepsString;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "lastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private String lastUpdatedTimestamp;

  public PlayerAchievement() {
  }

  public PlayerAchievement achievementState(AchievementStateEnum achievementState) {
    this.achievementState = achievementState;
    return this;
  }

  /**
   * The state of the achievement.
   * @return achievementState
   */
  @javax.annotation.Nullable
  public AchievementStateEnum getAchievementState() {
    return achievementState;
  }

  public void setAchievementState(AchievementStateEnum achievementState) {
    this.achievementState = achievementState;
  }


  public PlayerAchievement currentSteps(Integer currentSteps) {
    this.currentSteps = currentSteps;
    return this;
  }

  /**
   * The current steps for an incremental achievement.
   * @return currentSteps
   */
  @javax.annotation.Nullable
  public Integer getCurrentSteps() {
    return currentSteps;
  }

  public void setCurrentSteps(Integer currentSteps) {
    this.currentSteps = currentSteps;
  }


  public PlayerAchievement experiencePoints(String experiencePoints) {
    this.experiencePoints = experiencePoints;
    return this;
  }

  /**
   * Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.
   * @return experiencePoints
   */
  @javax.annotation.Nullable
  public String getExperiencePoints() {
    return experiencePoints;
  }

  public void setExperiencePoints(String experiencePoints) {
    this.experiencePoints = experiencePoints;
  }


  public PlayerAchievement formattedCurrentStepsString(String formattedCurrentStepsString) {
    this.formattedCurrentStepsString = formattedCurrentStepsString;
    return this;
  }

  /**
   * The current steps for an incremental achievement as a string.
   * @return formattedCurrentStepsString
   */
  @javax.annotation.Nullable
  public String getFormattedCurrentStepsString() {
    return formattedCurrentStepsString;
  }

  public void setFormattedCurrentStepsString(String formattedCurrentStepsString) {
    this.formattedCurrentStepsString = formattedCurrentStepsString;
  }


  public PlayerAchievement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the achievement.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PlayerAchievement kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#playerAchievement&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PlayerAchievement lastUpdatedTimestamp(String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * The timestamp of the last modification to this achievement&#39;s state.
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public String getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerAchievement playerAchievement = (PlayerAchievement) o;
    return Objects.equals(this.achievementState, playerAchievement.achievementState) &&
        Objects.equals(this.currentSteps, playerAchievement.currentSteps) &&
        Objects.equals(this.experiencePoints, playerAchievement.experiencePoints) &&
        Objects.equals(this.formattedCurrentStepsString, playerAchievement.formattedCurrentStepsString) &&
        Objects.equals(this.id, playerAchievement.id) &&
        Objects.equals(this.kind, playerAchievement.kind) &&
        Objects.equals(this.lastUpdatedTimestamp, playerAchievement.lastUpdatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementState, currentSteps, experiencePoints, formattedCurrentStepsString, id, kind, lastUpdatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerAchievement {\n");
    sb.append("    achievementState: ").append(toIndentedString(achievementState)).append("\n");
    sb.append("    currentSteps: ").append(toIndentedString(currentSteps)).append("\n");
    sb.append("    experiencePoints: ").append(toIndentedString(experiencePoints)).append("\n");
    sb.append("    formattedCurrentStepsString: ").append(toIndentedString(formattedCurrentStepsString)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievementState");
    openapiFields.add("currentSteps");
    openapiFields.add("experiencePoints");
    openapiFields.add("formattedCurrentStepsString");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lastUpdatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerAchievement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerAchievement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerAchievement is not found in the empty JSON string", PlayerAchievement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerAchievement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerAchievement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achievementState") != null && !jsonObj.get("achievementState").isJsonNull()) && !jsonObj.get("achievementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achievementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achievementState").toString()));
      }
      // validate the optional field `achievementState`
      if (jsonObj.get("achievementState") != null && !jsonObj.get("achievementState").isJsonNull()) {
        AchievementStateEnum.validateJsonElement(jsonObj.get("achievementState"));
      }
      if ((jsonObj.get("experiencePoints") != null && !jsonObj.get("experiencePoints").isJsonNull()) && !jsonObj.get("experiencePoints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experiencePoints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experiencePoints").toString()));
      }
      if ((jsonObj.get("formattedCurrentStepsString") != null && !jsonObj.get("formattedCurrentStepsString").isJsonNull()) && !jsonObj.get("formattedCurrentStepsString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedCurrentStepsString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedCurrentStepsString").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("lastUpdatedTimestamp") != null && !jsonObj.get("lastUpdatedTimestamp").isJsonNull()) && !jsonObj.get("lastUpdatedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTimestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerAchievement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerAchievement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerAchievement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerAchievement.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerAchievement>() {
           @Override
           public void write(JsonWriter out, PlayerAchievement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerAchievement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerAchievement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerAchievement
   * @throws IOException if the JSON string is invalid with respect to PlayerAchievement
   */
  public static PlayerAchievement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerAchievement.class);
  }

  /**
   * Convert an instance of PlayerAchievement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

