/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceAndroidDetails;
import org.openapitools.client.model.InstanceIosDetails;
import org.openapitools.client.model.InstanceWebDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Instance resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_ACQUISITION_URI = "acquisitionUri";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_URI)
  private String acquisitionUri;

  public static final String SERIALIZED_NAME_ANDROID_INSTANCE = "androidInstance";
  @SerializedName(SERIALIZED_NAME_ANDROID_INSTANCE)
  private InstanceAndroidDetails androidInstance;

  public static final String SERIALIZED_NAME_IOS_INSTANCE = "iosInstance";
  @SerializedName(SERIALIZED_NAME_IOS_INSTANCE)
  private InstanceIosDetails iosInstance;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The platform type.
   */
  @JsonAdapter(PlatformTypeEnum.Adapter.class)
  public enum PlatformTypeEnum {
    ANDROID("ANDROID"),
    
    IOS("IOS"),
    
    WEB_APP("WEB_APP");

    private String value;

    PlatformTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformTypeEnum fromValue(String value) {
      for (PlatformTypeEnum b : PlatformTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_TYPE = "platformType";
  @SerializedName(SERIALIZED_NAME_PLATFORM_TYPE)
  private PlatformTypeEnum platformType;

  public static final String SERIALIZED_NAME_REALTIME_PLAY = "realtimePlay";
  @SerializedName(SERIALIZED_NAME_REALTIME_PLAY)
  private Boolean realtimePlay;

  public static final String SERIALIZED_NAME_TURN_BASED_PLAY = "turnBasedPlay";
  @SerializedName(SERIALIZED_NAME_TURN_BASED_PLAY)
  private Boolean turnBasedPlay;

  public static final String SERIALIZED_NAME_WEB_INSTANCE = "webInstance";
  @SerializedName(SERIALIZED_NAME_WEB_INSTANCE)
  private InstanceWebDetails webInstance;

  public Instance() {
  }

  public Instance acquisitionUri(String acquisitionUri) {
    this.acquisitionUri = acquisitionUri;
    return this;
  }

  /**
   * URI which shows where a user can acquire this instance.
   * @return acquisitionUri
   */
  @javax.annotation.Nullable
  public String getAcquisitionUri() {
    return acquisitionUri;
  }

  public void setAcquisitionUri(String acquisitionUri) {
    this.acquisitionUri = acquisitionUri;
  }


  public Instance androidInstance(InstanceAndroidDetails androidInstance) {
    this.androidInstance = androidInstance;
    return this;
  }

  /**
   * Get androidInstance
   * @return androidInstance
   */
  @javax.annotation.Nullable
  public InstanceAndroidDetails getAndroidInstance() {
    return androidInstance;
  }

  public void setAndroidInstance(InstanceAndroidDetails androidInstance) {
    this.androidInstance = androidInstance;
  }


  public Instance iosInstance(InstanceIosDetails iosInstance) {
    this.iosInstance = iosInstance;
    return this;
  }

  /**
   * Get iosInstance
   * @return iosInstance
   */
  @javax.annotation.Nullable
  public InstanceIosDetails getIosInstance() {
    return iosInstance;
  }

  public void setIosInstance(InstanceIosDetails iosInstance) {
    this.iosInstance = iosInstance;
  }


  public Instance kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#instance&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Localized display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Instance platformType(PlatformTypeEnum platformType) {
    this.platformType = platformType;
    return this;
  }

  /**
   * The platform type.
   * @return platformType
   */
  @javax.annotation.Nullable
  public PlatformTypeEnum getPlatformType() {
    return platformType;
  }

  public void setPlatformType(PlatformTypeEnum platformType) {
    this.platformType = platformType;
  }


  public Instance realtimePlay(Boolean realtimePlay) {
    this.realtimePlay = realtimePlay;
    return this;
  }

  /**
   * Flag to show if this game instance supports realtime play.
   * @return realtimePlay
   */
  @javax.annotation.Nullable
  public Boolean getRealtimePlay() {
    return realtimePlay;
  }

  public void setRealtimePlay(Boolean realtimePlay) {
    this.realtimePlay = realtimePlay;
  }


  public Instance turnBasedPlay(Boolean turnBasedPlay) {
    this.turnBasedPlay = turnBasedPlay;
    return this;
  }

  /**
   * Flag to show if this game instance supports turn based play.
   * @return turnBasedPlay
   */
  @javax.annotation.Nullable
  public Boolean getTurnBasedPlay() {
    return turnBasedPlay;
  }

  public void setTurnBasedPlay(Boolean turnBasedPlay) {
    this.turnBasedPlay = turnBasedPlay;
  }


  public Instance webInstance(InstanceWebDetails webInstance) {
    this.webInstance = webInstance;
    return this;
  }

  /**
   * Get webInstance
   * @return webInstance
   */
  @javax.annotation.Nullable
  public InstanceWebDetails getWebInstance() {
    return webInstance;
  }

  public void setWebInstance(InstanceWebDetails webInstance) {
    this.webInstance = webInstance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.acquisitionUri, instance.acquisitionUri) &&
        Objects.equals(this.androidInstance, instance.androidInstance) &&
        Objects.equals(this.iosInstance, instance.iosInstance) &&
        Objects.equals(this.kind, instance.kind) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.platformType, instance.platformType) &&
        Objects.equals(this.realtimePlay, instance.realtimePlay) &&
        Objects.equals(this.turnBasedPlay, instance.turnBasedPlay) &&
        Objects.equals(this.webInstance, instance.webInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionUri, androidInstance, iosInstance, kind, name, platformType, realtimePlay, turnBasedPlay, webInstance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    acquisitionUri: ").append(toIndentedString(acquisitionUri)).append("\n");
    sb.append("    androidInstance: ").append(toIndentedString(androidInstance)).append("\n");
    sb.append("    iosInstance: ").append(toIndentedString(iosInstance)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platformType: ").append(toIndentedString(platformType)).append("\n");
    sb.append("    realtimePlay: ").append(toIndentedString(realtimePlay)).append("\n");
    sb.append("    turnBasedPlay: ").append(toIndentedString(turnBasedPlay)).append("\n");
    sb.append("    webInstance: ").append(toIndentedString(webInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquisitionUri");
    openapiFields.add("androidInstance");
    openapiFields.add("iosInstance");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("platformType");
    openapiFields.add("realtimePlay");
    openapiFields.add("turnBasedPlay");
    openapiFields.add("webInstance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquisitionUri") != null && !jsonObj.get("acquisitionUri").isJsonNull()) && !jsonObj.get("acquisitionUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquisitionUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquisitionUri").toString()));
      }
      // validate the optional field `androidInstance`
      if (jsonObj.get("androidInstance") != null && !jsonObj.get("androidInstance").isJsonNull()) {
        InstanceAndroidDetails.validateJsonElement(jsonObj.get("androidInstance"));
      }
      // validate the optional field `iosInstance`
      if (jsonObj.get("iosInstance") != null && !jsonObj.get("iosInstance").isJsonNull()) {
        InstanceIosDetails.validateJsonElement(jsonObj.get("iosInstance"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("platformType") != null && !jsonObj.get("platformType").isJsonNull()) && !jsonObj.get("platformType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformType").toString()));
      }
      // validate the optional field `platformType`
      if (jsonObj.get("platformType") != null && !jsonObj.get("platformType").isJsonNull()) {
        PlatformTypeEnum.validateJsonElement(jsonObj.get("platformType"));
      }
      // validate the optional field `webInstance`
      if (jsonObj.get("webInstance") != null && !jsonObj.get("webInstance").isJsonNull()) {
        InstanceWebDetails.validateJsonElement(jsonObj.get("webInstance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

