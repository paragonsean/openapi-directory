/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A third party stats resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatsResponse {
  public static final String SERIALIZED_NAME_AVG_SESSION_LENGTH_MINUTES = "avg_session_length_minutes";
  @SerializedName(SERIALIZED_NAME_AVG_SESSION_LENGTH_MINUTES)
  private Float avgSessionLengthMinutes;

  public static final String SERIALIZED_NAME_CHURN_PROBABILITY = "churn_probability";
  @SerializedName(SERIALIZED_NAME_CHURN_PROBABILITY)
  private Float churnProbability;

  public static final String SERIALIZED_NAME_DAYS_SINCE_LAST_PLAYED = "days_since_last_played";
  @SerializedName(SERIALIZED_NAME_DAYS_SINCE_LAST_PLAYED)
  private Integer daysSinceLastPlayed;

  public static final String SERIALIZED_NAME_HIGH_SPENDER_PROBABILITY = "high_spender_probability";
  @SerializedName(SERIALIZED_NAME_HIGH_SPENDER_PROBABILITY)
  private Float highSpenderProbability;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NUM_PURCHASES = "num_purchases";
  @SerializedName(SERIALIZED_NAME_NUM_PURCHASES)
  private Integer numPurchases;

  public static final String SERIALIZED_NAME_NUM_SESSIONS = "num_sessions";
  @SerializedName(SERIALIZED_NAME_NUM_SESSIONS)
  private Integer numSessions;

  public static final String SERIALIZED_NAME_NUM_SESSIONS_PERCENTILE = "num_sessions_percentile";
  @SerializedName(SERIALIZED_NAME_NUM_SESSIONS_PERCENTILE)
  private Float numSessionsPercentile;

  public static final String SERIALIZED_NAME_SPEND_PERCENTILE = "spend_percentile";
  @SerializedName(SERIALIZED_NAME_SPEND_PERCENTILE)
  private Float spendPercentile;

  public static final String SERIALIZED_NAME_SPEND_PROBABILITY = "spend_probability";
  @SerializedName(SERIALIZED_NAME_SPEND_PROBABILITY)
  private Float spendProbability;

  public static final String SERIALIZED_NAME_TOTAL_SPEND_NEXT28_DAYS = "total_spend_next_28_days";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPEND_NEXT28_DAYS)
  private Float totalSpendNext28Days;

  public StatsResponse() {
  }

  public StatsResponse avgSessionLengthMinutes(Float avgSessionLengthMinutes) {
    this.avgSessionLengthMinutes = avgSessionLengthMinutes;
    return this;
  }

  /**
   * Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
   * @return avgSessionLengthMinutes
   */
  @javax.annotation.Nullable
  public Float getAvgSessionLengthMinutes() {
    return avgSessionLengthMinutes;
  }

  public void setAvgSessionLengthMinutes(Float avgSessionLengthMinutes) {
    this.avgSessionLengthMinutes = avgSessionLengthMinutes;
  }


  public StatsResponse churnProbability(Float churnProbability) {
    this.churnProbability = churnProbability;
    return this;
  }

  /**
   * The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.
   * @return churnProbability
   */
  @javax.annotation.Nullable
  public Float getChurnProbability() {
    return churnProbability;
  }

  public void setChurnProbability(Float churnProbability) {
    this.churnProbability = churnProbability;
  }


  public StatsResponse daysSinceLastPlayed(Integer daysSinceLastPlayed) {
    this.daysSinceLastPlayed = daysSinceLastPlayed;
    return this;
  }

  /**
   * Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
   * @return daysSinceLastPlayed
   */
  @javax.annotation.Nullable
  public Integer getDaysSinceLastPlayed() {
    return daysSinceLastPlayed;
  }

  public void setDaysSinceLastPlayed(Integer daysSinceLastPlayed) {
    this.daysSinceLastPlayed = daysSinceLastPlayed;
  }


  public StatsResponse highSpenderProbability(Float highSpenderProbability) {
    this.highSpenderProbability = highSpenderProbability;
    return this;
  }

  /**
   * The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
   * @return highSpenderProbability
   */
  @javax.annotation.Nullable
  public Float getHighSpenderProbability() {
    return highSpenderProbability;
  }

  public void setHighSpenderProbability(Float highSpenderProbability) {
    this.highSpenderProbability = highSpenderProbability;
  }


  public StatsResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#statsResponse&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public StatsResponse numPurchases(Integer numPurchases) {
    this.numPurchases = numPurchases;
    return this;
  }

  /**
   * Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
   * @return numPurchases
   */
  @javax.annotation.Nullable
  public Integer getNumPurchases() {
    return numPurchases;
  }

  public void setNumPurchases(Integer numPurchases) {
    this.numPurchases = numPurchases;
  }


  public StatsResponse numSessions(Integer numSessions) {
    this.numSessions = numSessions;
    return this;
  }

  /**
   * The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
   * @return numSessions
   */
  @javax.annotation.Nullable
  public Integer getNumSessions() {
    return numSessions;
  }

  public void setNumSessions(Integer numSessions) {
    this.numSessions = numSessions;
  }


  public StatsResponse numSessionsPercentile(Float numSessionsPercentile) {
    this.numSessionsPercentile = numSessionsPercentile;
    return this;
  }

  /**
   * The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
   * @return numSessionsPercentile
   */
  @javax.annotation.Nullable
  public Float getNumSessionsPercentile() {
    return numSessionsPercentile;
  }

  public void setNumSessionsPercentile(Float numSessionsPercentile) {
    this.numSessionsPercentile = numSessionsPercentile;
  }


  public StatsResponse spendPercentile(Float spendPercentile) {
    this.spendPercentile = spendPercentile;
    return this;
  }

  /**
   * The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
   * @return spendPercentile
   */
  @javax.annotation.Nullable
  public Float getSpendPercentile() {
    return spendPercentile;
  }

  public void setSpendPercentile(Float spendPercentile) {
    this.spendPercentile = spendPercentile;
  }


  public StatsResponse spendProbability(Float spendProbability) {
    this.spendProbability = spendProbability;
    return this;
  }

  /**
   * The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
   * @return spendProbability
   */
  @javax.annotation.Nullable
  public Float getSpendProbability() {
    return spendProbability;
  }

  public void setSpendProbability(Float spendProbability) {
    this.spendProbability = spendProbability;
  }


  public StatsResponse totalSpendNext28Days(Float totalSpendNext28Days) {
    this.totalSpendNext28Days = totalSpendNext28Days;
    return this;
  }

  /**
   * The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
   * @return totalSpendNext28Days
   */
  @javax.annotation.Nullable
  public Float getTotalSpendNext28Days() {
    return totalSpendNext28Days;
  }

  public void setTotalSpendNext28Days(Float totalSpendNext28Days) {
    this.totalSpendNext28Days = totalSpendNext28Days;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsResponse statsResponse = (StatsResponse) o;
    return Objects.equals(this.avgSessionLengthMinutes, statsResponse.avgSessionLengthMinutes) &&
        Objects.equals(this.churnProbability, statsResponse.churnProbability) &&
        Objects.equals(this.daysSinceLastPlayed, statsResponse.daysSinceLastPlayed) &&
        Objects.equals(this.highSpenderProbability, statsResponse.highSpenderProbability) &&
        Objects.equals(this.kind, statsResponse.kind) &&
        Objects.equals(this.numPurchases, statsResponse.numPurchases) &&
        Objects.equals(this.numSessions, statsResponse.numSessions) &&
        Objects.equals(this.numSessionsPercentile, statsResponse.numSessionsPercentile) &&
        Objects.equals(this.spendPercentile, statsResponse.spendPercentile) &&
        Objects.equals(this.spendProbability, statsResponse.spendProbability) &&
        Objects.equals(this.totalSpendNext28Days, statsResponse.totalSpendNext28Days);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgSessionLengthMinutes, churnProbability, daysSinceLastPlayed, highSpenderProbability, kind, numPurchases, numSessions, numSessionsPercentile, spendPercentile, spendProbability, totalSpendNext28Days);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsResponse {\n");
    sb.append("    avgSessionLengthMinutes: ").append(toIndentedString(avgSessionLengthMinutes)).append("\n");
    sb.append("    churnProbability: ").append(toIndentedString(churnProbability)).append("\n");
    sb.append("    daysSinceLastPlayed: ").append(toIndentedString(daysSinceLastPlayed)).append("\n");
    sb.append("    highSpenderProbability: ").append(toIndentedString(highSpenderProbability)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    numPurchases: ").append(toIndentedString(numPurchases)).append("\n");
    sb.append("    numSessions: ").append(toIndentedString(numSessions)).append("\n");
    sb.append("    numSessionsPercentile: ").append(toIndentedString(numSessionsPercentile)).append("\n");
    sb.append("    spendPercentile: ").append(toIndentedString(spendPercentile)).append("\n");
    sb.append("    spendProbability: ").append(toIndentedString(spendProbability)).append("\n");
    sb.append("    totalSpendNext28Days: ").append(toIndentedString(totalSpendNext28Days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avg_session_length_minutes");
    openapiFields.add("churn_probability");
    openapiFields.add("days_since_last_played");
    openapiFields.add("high_spender_probability");
    openapiFields.add("kind");
    openapiFields.add("num_purchases");
    openapiFields.add("num_sessions");
    openapiFields.add("num_sessions_percentile");
    openapiFields.add("spend_percentile");
    openapiFields.add("spend_probability");
    openapiFields.add("total_spend_next_28_days");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatsResponse is not found in the empty JSON string", StatsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StatsResponse>() {
           @Override
           public void write(JsonWriter out, StatsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatsResponse
   * @throws IOException if the JSON string is invalid with respect to StatsResponse
   */
  public static StatsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatsResponse.class);
  }

  /**
   * Convert an instance of StatsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

