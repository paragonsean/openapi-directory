/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to link an in-game account with a PGS principal (encoded in the session id).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkPersonaRequest {
  /**
   * Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.
   */
  @JsonAdapter(CardinalityConstraintEnum.Adapter.class)
  public enum CardinalityConstraintEnum {
    ONE_PERSONA_TO_ONE_PLAYER("ONE_PERSONA_TO_ONE_PLAYER");

    private String value;

    CardinalityConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardinalityConstraintEnum fromValue(String value) {
      for (CardinalityConstraintEnum b : CardinalityConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardinalityConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardinalityConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardinalityConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardinalityConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardinalityConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARDINALITY_CONSTRAINT = "cardinalityConstraint";
  @SerializedName(SERIALIZED_NAME_CARDINALITY_CONSTRAINT)
  private CardinalityConstraintEnum cardinalityConstraint;

  /**
   * Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.
   */
  @JsonAdapter(ConflictingLinksResolutionPolicyEnum.Adapter.class)
  public enum ConflictingLinksResolutionPolicyEnum {
    KEEP_EXISTING_LINKS("KEEP_EXISTING_LINKS"),
    
    CREATE_NEW_LINK("CREATE_NEW_LINK");

    private String value;

    ConflictingLinksResolutionPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConflictingLinksResolutionPolicyEnum fromValue(String value) {
      for (ConflictingLinksResolutionPolicyEnum b : ConflictingLinksResolutionPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConflictingLinksResolutionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConflictingLinksResolutionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConflictingLinksResolutionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConflictingLinksResolutionPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConflictingLinksResolutionPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFLICTING_LINKS_RESOLUTION_POLICY = "conflictingLinksResolutionPolicy";
  @SerializedName(SERIALIZED_NAME_CONFLICTING_LINKS_RESOLUTION_POLICY)
  private ConflictingLinksResolutionPolicyEnum conflictingLinksResolutionPolicy;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_PERSONA = "persona";
  @SerializedName(SERIALIZED_NAME_PERSONA)
  private String persona;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public LinkPersonaRequest() {
  }

  public LinkPersonaRequest cardinalityConstraint(CardinalityConstraintEnum cardinalityConstraint) {
    this.cardinalityConstraint = cardinalityConstraint;
    return this;
  }

  /**
   * Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.
   * @return cardinalityConstraint
   */
  @javax.annotation.Nullable
  public CardinalityConstraintEnum getCardinalityConstraint() {
    return cardinalityConstraint;
  }

  public void setCardinalityConstraint(CardinalityConstraintEnum cardinalityConstraint) {
    this.cardinalityConstraint = cardinalityConstraint;
  }


  public LinkPersonaRequest conflictingLinksResolutionPolicy(ConflictingLinksResolutionPolicyEnum conflictingLinksResolutionPolicy) {
    this.conflictingLinksResolutionPolicy = conflictingLinksResolutionPolicy;
    return this;
  }

  /**
   * Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.
   * @return conflictingLinksResolutionPolicy
   */
  @javax.annotation.Nullable
  public ConflictingLinksResolutionPolicyEnum getConflictingLinksResolutionPolicy() {
    return conflictingLinksResolutionPolicy;
  }

  public void setConflictingLinksResolutionPolicy(ConflictingLinksResolutionPolicyEnum conflictingLinksResolutionPolicy) {
    this.conflictingLinksResolutionPolicy = conflictingLinksResolutionPolicy;
  }


  public LinkPersonaRequest expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Input only. Optional expiration time.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public LinkPersonaRequest persona(String persona) {
    this.persona = persona;
    return this;
  }

  /**
   * Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.
   * @return persona
   */
  @javax.annotation.Nullable
  public String getPersona() {
    return persona;
  }

  public void setPersona(String persona) {
    this.persona = persona;
  }


  public LinkPersonaRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public LinkPersonaRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public LinkPersonaRequest ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Input only. Optional time-to-live.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkPersonaRequest linkPersonaRequest = (LinkPersonaRequest) o;
    return Objects.equals(this.cardinalityConstraint, linkPersonaRequest.cardinalityConstraint) &&
        Objects.equals(this.conflictingLinksResolutionPolicy, linkPersonaRequest.conflictingLinksResolutionPolicy) &&
        Objects.equals(this.expireTime, linkPersonaRequest.expireTime) &&
        Objects.equals(this.persona, linkPersonaRequest.persona) &&
        Objects.equals(this.sessionId, linkPersonaRequest.sessionId) &&
        Objects.equals(this.token, linkPersonaRequest.token) &&
        Objects.equals(this.ttl, linkPersonaRequest.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinalityConstraint, conflictingLinksResolutionPolicy, expireTime, persona, sessionId, token, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkPersonaRequest {\n");
    sb.append("    cardinalityConstraint: ").append(toIndentedString(cardinalityConstraint)).append("\n");
    sb.append("    conflictingLinksResolutionPolicy: ").append(toIndentedString(conflictingLinksResolutionPolicy)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    persona: ").append(toIndentedString(persona)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardinalityConstraint");
    openapiFields.add("conflictingLinksResolutionPolicy");
    openapiFields.add("expireTime");
    openapiFields.add("persona");
    openapiFields.add("sessionId");
    openapiFields.add("token");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkPersonaRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkPersonaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkPersonaRequest is not found in the empty JSON string", LinkPersonaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkPersonaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkPersonaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardinalityConstraint") != null && !jsonObj.get("cardinalityConstraint").isJsonNull()) && !jsonObj.get("cardinalityConstraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardinalityConstraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardinalityConstraint").toString()));
      }
      // validate the optional field `cardinalityConstraint`
      if (jsonObj.get("cardinalityConstraint") != null && !jsonObj.get("cardinalityConstraint").isJsonNull()) {
        CardinalityConstraintEnum.validateJsonElement(jsonObj.get("cardinalityConstraint"));
      }
      if ((jsonObj.get("conflictingLinksResolutionPolicy") != null && !jsonObj.get("conflictingLinksResolutionPolicy").isJsonNull()) && !jsonObj.get("conflictingLinksResolutionPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictingLinksResolutionPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictingLinksResolutionPolicy").toString()));
      }
      // validate the optional field `conflictingLinksResolutionPolicy`
      if (jsonObj.get("conflictingLinksResolutionPolicy") != null && !jsonObj.get("conflictingLinksResolutionPolicy").isJsonNull()) {
        ConflictingLinksResolutionPolicyEnum.validateJsonElement(jsonObj.get("conflictingLinksResolutionPolicy"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("persona") != null && !jsonObj.get("persona").isJsonNull()) && !jsonObj.get("persona").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persona` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persona").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkPersonaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkPersonaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkPersonaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkPersonaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkPersonaRequest>() {
           @Override
           public void write(JsonWriter out, LinkPersonaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkPersonaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkPersonaRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkPersonaRequest
   * @throws IOException if the JSON string is invalid with respect to LinkPersonaRequest
   */
  public static LinkPersonaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkPersonaRequest.class);
  }

  /**
   * Convert an instance of LinkPersonaRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

