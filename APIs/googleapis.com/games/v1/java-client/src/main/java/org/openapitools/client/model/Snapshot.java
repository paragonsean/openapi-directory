/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SnapshotImage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An snapshot object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Snapshot {
  public static final String SERIALIZED_NAME_COVER_IMAGE = "coverImage";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE)
  private SnapshotImage coverImage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DRIVE_ID = "driveId";
  @SerializedName(SERIALIZED_NAME_DRIVE_ID)
  private String driveId;

  public static final String SERIALIZED_NAME_DURATION_MILLIS = "durationMillis";
  @SerializedName(SERIALIZED_NAME_DURATION_MILLIS)
  private String durationMillis;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_MILLIS = "lastModifiedMillis";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_MILLIS)
  private String lastModifiedMillis;

  public static final String SERIALIZED_NAME_PROGRESS_VALUE = "progressValue";
  @SerializedName(SERIALIZED_NAME_PROGRESS_VALUE)
  private String progressValue;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of this snapshot.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SAVE_GAME("SAVE_GAME");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "uniqueName";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public Snapshot() {
  }

  public Snapshot coverImage(SnapshotImage coverImage) {
    this.coverImage = coverImage;
    return this;
  }

  /**
   * Get coverImage
   * @return coverImage
   */
  @javax.annotation.Nullable
  public SnapshotImage getCoverImage() {
    return coverImage;
  }

  public void setCoverImage(SnapshotImage coverImage) {
    this.coverImage = coverImage;
  }


  public Snapshot description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this snapshot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Snapshot driveId(String driveId) {
    this.driveId = driveId;
    return this;
  }

  /**
   * The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.
   * @return driveId
   */
  @javax.annotation.Nullable
  public String getDriveId() {
    return driveId;
  }

  public void setDriveId(String driveId) {
    this.driveId = driveId;
  }


  public Snapshot durationMillis(String durationMillis) {
    this.durationMillis = durationMillis;
    return this;
  }

  /**
   * The duration associated with this snapshot, in millis.
   * @return durationMillis
   */
  @javax.annotation.Nullable
  public String getDurationMillis() {
    return durationMillis;
  }

  public void setDurationMillis(String durationMillis) {
    this.durationMillis = durationMillis;
  }


  public Snapshot id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the snapshot.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Snapshot kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#snapshot&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Snapshot lastModifiedMillis(String lastModifiedMillis) {
    this.lastModifiedMillis = lastModifiedMillis;
    return this;
  }

  /**
   * The timestamp (in millis since Unix epoch) of the last modification to this snapshot.
   * @return lastModifiedMillis
   */
  @javax.annotation.Nullable
  public String getLastModifiedMillis() {
    return lastModifiedMillis;
  }

  public void setLastModifiedMillis(String lastModifiedMillis) {
    this.lastModifiedMillis = lastModifiedMillis;
  }


  public Snapshot progressValue(String progressValue) {
    this.progressValue = progressValue;
    return this;
  }

  /**
   * The progress value (64-bit integer set by developer) associated with this snapshot.
   * @return progressValue
   */
  @javax.annotation.Nullable
  public String getProgressValue() {
    return progressValue;
  }

  public void setProgressValue(String progressValue) {
    this.progressValue = progressValue;
  }


  public Snapshot title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this snapshot.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Snapshot type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this snapshot.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Snapshot uniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
    return this;
  }

  /**
   * The unique name provided when the snapshot was created.
   * @return uniqueName
   */
  @javax.annotation.Nullable
  public String getUniqueName() {
    return uniqueName;
  }

  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Snapshot snapshot = (Snapshot) o;
    return Objects.equals(this.coverImage, snapshot.coverImage) &&
        Objects.equals(this.description, snapshot.description) &&
        Objects.equals(this.driveId, snapshot.driveId) &&
        Objects.equals(this.durationMillis, snapshot.durationMillis) &&
        Objects.equals(this.id, snapshot.id) &&
        Objects.equals(this.kind, snapshot.kind) &&
        Objects.equals(this.lastModifiedMillis, snapshot.lastModifiedMillis) &&
        Objects.equals(this.progressValue, snapshot.progressValue) &&
        Objects.equals(this.title, snapshot.title) &&
        Objects.equals(this.type, snapshot.type) &&
        Objects.equals(this.uniqueName, snapshot.uniqueName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverImage, description, driveId, durationMillis, id, kind, lastModifiedMillis, progressValue, title, type, uniqueName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Snapshot {\n");
    sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    durationMillis: ").append(toIndentedString(durationMillis)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedMillis: ").append(toIndentedString(lastModifiedMillis)).append("\n");
    sb.append("    progressValue: ").append(toIndentedString(progressValue)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coverImage");
    openapiFields.add("description");
    openapiFields.add("driveId");
    openapiFields.add("durationMillis");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedMillis");
    openapiFields.add("progressValue");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("uniqueName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Snapshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Snapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Snapshot is not found in the empty JSON string", Snapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Snapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Snapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `coverImage`
      if (jsonObj.get("coverImage") != null && !jsonObj.get("coverImage").isJsonNull()) {
        SnapshotImage.validateJsonElement(jsonObj.get("coverImage"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("driveId") != null && !jsonObj.get("driveId").isJsonNull()) && !jsonObj.get("driveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driveId").toString()));
      }
      if ((jsonObj.get("durationMillis") != null && !jsonObj.get("durationMillis").isJsonNull()) && !jsonObj.get("durationMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `durationMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("durationMillis").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("lastModifiedMillis") != null && !jsonObj.get("lastModifiedMillis").isJsonNull()) && !jsonObj.get("lastModifiedMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedMillis").toString()));
      }
      if ((jsonObj.get("progressValue") != null && !jsonObj.get("progressValue").isJsonNull()) && !jsonObj.get("progressValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressValue").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uniqueName") != null && !jsonObj.get("uniqueName").isJsonNull()) && !jsonObj.get("uniqueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Snapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Snapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Snapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Snapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<Snapshot>() {
           @Override
           public void write(JsonWriter out, Snapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Snapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Snapshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Snapshot
   * @throws IOException if the JSON string is invalid with respect to Snapshot
   */
  public static Snapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Snapshot.class);
  }

  /**
   * Convert an instance of Snapshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

