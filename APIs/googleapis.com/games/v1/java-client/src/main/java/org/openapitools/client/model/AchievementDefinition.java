/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An achievement definition object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchievementDefinition {
  /**
   * The type of the achievement.
   */
  @JsonAdapter(AchievementTypeEnum.Adapter.class)
  public enum AchievementTypeEnum {
    STANDARD("STANDARD"),
    
    INCREMENTAL("INCREMENTAL");

    private String value;

    AchievementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AchievementTypeEnum fromValue(String value) {
      for (AchievementTypeEnum b : AchievementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AchievementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AchievementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AchievementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AchievementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AchievementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACHIEVEMENT_TYPE = "achievementType";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_TYPE)
  private AchievementTypeEnum achievementType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPERIENCE_POINTS = "experiencePoints";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_POINTS)
  private String experiencePoints;

  public static final String SERIALIZED_NAME_FORMATTED_TOTAL_STEPS = "formattedTotalSteps";
  @SerializedName(SERIALIZED_NAME_FORMATTED_TOTAL_STEPS)
  private String formattedTotalSteps;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The initial state of the achievement.
   */
  @JsonAdapter(InitialStateEnum.Adapter.class)
  public enum InitialStateEnum {
    HIDDEN("HIDDEN"),
    
    REVEALED("REVEALED"),
    
    UNLOCKED("UNLOCKED");

    private String value;

    InitialStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InitialStateEnum fromValue(String value) {
      for (InitialStateEnum b : InitialStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InitialStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InitialStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InitialStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InitialStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InitialStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INITIAL_STATE = "initialState";
  @SerializedName(SERIALIZED_NAME_INITIAL_STATE)
  private InitialStateEnum initialState;

  public static final String SERIALIZED_NAME_IS_REVEALED_ICON_URL_DEFAULT = "isRevealedIconUrlDefault";
  @SerializedName(SERIALIZED_NAME_IS_REVEALED_ICON_URL_DEFAULT)
  private Boolean isRevealedIconUrlDefault;

  public static final String SERIALIZED_NAME_IS_UNLOCKED_ICON_URL_DEFAULT = "isUnlockedIconUrlDefault";
  @SerializedName(SERIALIZED_NAME_IS_UNLOCKED_ICON_URL_DEFAULT)
  private Boolean isUnlockedIconUrlDefault;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REVEALED_ICON_URL = "revealedIconUrl";
  @SerializedName(SERIALIZED_NAME_REVEALED_ICON_URL)
  private String revealedIconUrl;

  public static final String SERIALIZED_NAME_TOTAL_STEPS = "totalSteps";
  @SerializedName(SERIALIZED_NAME_TOTAL_STEPS)
  private Integer totalSteps;

  public static final String SERIALIZED_NAME_UNLOCKED_ICON_URL = "unlockedIconUrl";
  @SerializedName(SERIALIZED_NAME_UNLOCKED_ICON_URL)
  private String unlockedIconUrl;

  public AchievementDefinition() {
  }

  public AchievementDefinition achievementType(AchievementTypeEnum achievementType) {
    this.achievementType = achievementType;
    return this;
  }

  /**
   * The type of the achievement.
   * @return achievementType
   */
  @javax.annotation.Nullable
  public AchievementTypeEnum getAchievementType() {
    return achievementType;
  }

  public void setAchievementType(AchievementTypeEnum achievementType) {
    this.achievementType = achievementType;
  }


  public AchievementDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the achievement.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AchievementDefinition experiencePoints(String experiencePoints) {
    this.experiencePoints = experiencePoints;
    return this;
  }

  /**
   * Experience points which will be earned when unlocking this achievement.
   * @return experiencePoints
   */
  @javax.annotation.Nullable
  public String getExperiencePoints() {
    return experiencePoints;
  }

  public void setExperiencePoints(String experiencePoints) {
    this.experiencePoints = experiencePoints;
  }


  public AchievementDefinition formattedTotalSteps(String formattedTotalSteps) {
    this.formattedTotalSteps = formattedTotalSteps;
    return this;
  }

  /**
   * The total steps for an incremental achievement as a string.
   * @return formattedTotalSteps
   */
  @javax.annotation.Nullable
  public String getFormattedTotalSteps() {
    return formattedTotalSteps;
  }

  public void setFormattedTotalSteps(String formattedTotalSteps) {
    this.formattedTotalSteps = formattedTotalSteps;
  }


  public AchievementDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the achievement.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AchievementDefinition initialState(InitialStateEnum initialState) {
    this.initialState = initialState;
    return this;
  }

  /**
   * The initial state of the achievement.
   * @return initialState
   */
  @javax.annotation.Nullable
  public InitialStateEnum getInitialState() {
    return initialState;
  }

  public void setInitialState(InitialStateEnum initialState) {
    this.initialState = initialState;
  }


  public AchievementDefinition isRevealedIconUrlDefault(Boolean isRevealedIconUrlDefault) {
    this.isRevealedIconUrlDefault = isRevealedIconUrlDefault;
    return this;
  }

  /**
   * Indicates whether the revealed icon image being returned is a default image, or is provided by the game.
   * @return isRevealedIconUrlDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsRevealedIconUrlDefault() {
    return isRevealedIconUrlDefault;
  }

  public void setIsRevealedIconUrlDefault(Boolean isRevealedIconUrlDefault) {
    this.isRevealedIconUrlDefault = isRevealedIconUrlDefault;
  }


  public AchievementDefinition isUnlockedIconUrlDefault(Boolean isUnlockedIconUrlDefault) {
    this.isUnlockedIconUrlDefault = isUnlockedIconUrlDefault;
    return this;
  }

  /**
   * Indicates whether the unlocked icon image being returned is a default image, or is game-provided.
   * @return isUnlockedIconUrlDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsUnlockedIconUrlDefault() {
    return isUnlockedIconUrlDefault;
  }

  public void setIsUnlockedIconUrlDefault(Boolean isUnlockedIconUrlDefault) {
    this.isUnlockedIconUrlDefault = isUnlockedIconUrlDefault;
  }


  public AchievementDefinition kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#achievementDefinition&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AchievementDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the achievement.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AchievementDefinition revealedIconUrl(String revealedIconUrl) {
    this.revealedIconUrl = revealedIconUrl;
    return this;
  }

  /**
   * The image URL for the revealed achievement icon.
   * @return revealedIconUrl
   */
  @javax.annotation.Nullable
  public String getRevealedIconUrl() {
    return revealedIconUrl;
  }

  public void setRevealedIconUrl(String revealedIconUrl) {
    this.revealedIconUrl = revealedIconUrl;
  }


  public AchievementDefinition totalSteps(Integer totalSteps) {
    this.totalSteps = totalSteps;
    return this;
  }

  /**
   * The total steps for an incremental achievement.
   * @return totalSteps
   */
  @javax.annotation.Nullable
  public Integer getTotalSteps() {
    return totalSteps;
  }

  public void setTotalSteps(Integer totalSteps) {
    this.totalSteps = totalSteps;
  }


  public AchievementDefinition unlockedIconUrl(String unlockedIconUrl) {
    this.unlockedIconUrl = unlockedIconUrl;
    return this;
  }

  /**
   * The image URL for the unlocked achievement icon.
   * @return unlockedIconUrl
   */
  @javax.annotation.Nullable
  public String getUnlockedIconUrl() {
    return unlockedIconUrl;
  }

  public void setUnlockedIconUrl(String unlockedIconUrl) {
    this.unlockedIconUrl = unlockedIconUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchievementDefinition achievementDefinition = (AchievementDefinition) o;
    return Objects.equals(this.achievementType, achievementDefinition.achievementType) &&
        Objects.equals(this.description, achievementDefinition.description) &&
        Objects.equals(this.experiencePoints, achievementDefinition.experiencePoints) &&
        Objects.equals(this.formattedTotalSteps, achievementDefinition.formattedTotalSteps) &&
        Objects.equals(this.id, achievementDefinition.id) &&
        Objects.equals(this.initialState, achievementDefinition.initialState) &&
        Objects.equals(this.isRevealedIconUrlDefault, achievementDefinition.isRevealedIconUrlDefault) &&
        Objects.equals(this.isUnlockedIconUrlDefault, achievementDefinition.isUnlockedIconUrlDefault) &&
        Objects.equals(this.kind, achievementDefinition.kind) &&
        Objects.equals(this.name, achievementDefinition.name) &&
        Objects.equals(this.revealedIconUrl, achievementDefinition.revealedIconUrl) &&
        Objects.equals(this.totalSteps, achievementDefinition.totalSteps) &&
        Objects.equals(this.unlockedIconUrl, achievementDefinition.unlockedIconUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementType, description, experiencePoints, formattedTotalSteps, id, initialState, isRevealedIconUrlDefault, isUnlockedIconUrlDefault, kind, name, revealedIconUrl, totalSteps, unlockedIconUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchievementDefinition {\n");
    sb.append("    achievementType: ").append(toIndentedString(achievementType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    experiencePoints: ").append(toIndentedString(experiencePoints)).append("\n");
    sb.append("    formattedTotalSteps: ").append(toIndentedString(formattedTotalSteps)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialState: ").append(toIndentedString(initialState)).append("\n");
    sb.append("    isRevealedIconUrlDefault: ").append(toIndentedString(isRevealedIconUrlDefault)).append("\n");
    sb.append("    isUnlockedIconUrlDefault: ").append(toIndentedString(isUnlockedIconUrlDefault)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    revealedIconUrl: ").append(toIndentedString(revealedIconUrl)).append("\n");
    sb.append("    totalSteps: ").append(toIndentedString(totalSteps)).append("\n");
    sb.append("    unlockedIconUrl: ").append(toIndentedString(unlockedIconUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievementType");
    openapiFields.add("description");
    openapiFields.add("experiencePoints");
    openapiFields.add("formattedTotalSteps");
    openapiFields.add("id");
    openapiFields.add("initialState");
    openapiFields.add("isRevealedIconUrlDefault");
    openapiFields.add("isUnlockedIconUrlDefault");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("revealedIconUrl");
    openapiFields.add("totalSteps");
    openapiFields.add("unlockedIconUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchievementDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchievementDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchievementDefinition is not found in the empty JSON string", AchievementDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchievementDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchievementDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achievementType") != null && !jsonObj.get("achievementType").isJsonNull()) && !jsonObj.get("achievementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achievementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achievementType").toString()));
      }
      // validate the optional field `achievementType`
      if (jsonObj.get("achievementType") != null && !jsonObj.get("achievementType").isJsonNull()) {
        AchievementTypeEnum.validateJsonElement(jsonObj.get("achievementType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("experiencePoints") != null && !jsonObj.get("experiencePoints").isJsonNull()) && !jsonObj.get("experiencePoints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experiencePoints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experiencePoints").toString()));
      }
      if ((jsonObj.get("formattedTotalSteps") != null && !jsonObj.get("formattedTotalSteps").isJsonNull()) && !jsonObj.get("formattedTotalSteps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedTotalSteps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedTotalSteps").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("initialState") != null && !jsonObj.get("initialState").isJsonNull()) && !jsonObj.get("initialState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialState").toString()));
      }
      // validate the optional field `initialState`
      if (jsonObj.get("initialState") != null && !jsonObj.get("initialState").isJsonNull()) {
        InitialStateEnum.validateJsonElement(jsonObj.get("initialState"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("revealedIconUrl") != null && !jsonObj.get("revealedIconUrl").isJsonNull()) && !jsonObj.get("revealedIconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revealedIconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revealedIconUrl").toString()));
      }
      if ((jsonObj.get("unlockedIconUrl") != null && !jsonObj.get("unlockedIconUrl").isJsonNull()) && !jsonObj.get("unlockedIconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockedIconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockedIconUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchievementDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchievementDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchievementDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchievementDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<AchievementDefinition>() {
           @Override
           public void write(JsonWriter out, AchievementDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchievementDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchievementDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchievementDefinition
   * @throws IOException if the JSON string is invalid with respect to AchievementDefinition
   */
  public static AchievementDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchievementDefinition.class);
  }

  /**
   * Convert an instance of AchievementDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

