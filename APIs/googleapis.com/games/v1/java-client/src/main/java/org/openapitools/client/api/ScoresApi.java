/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LeaderboardScores;
import org.openapitools.client.model.PlayerLeaderboardScoreListResponse;
import org.openapitools.client.model.PlayerScoreListResponse;
import org.openapitools.client.model.PlayerScoreResponse;
import org.openapitools.client.model.PlayerScoreSubmissionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScoresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScoresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gamesScoresGet
     * @param playerId A player ID. A value of &#x60;me&#x60; may be used in place of the authenticated player&#39;s ID. (required)
     * @param leaderboardId The ID of the leaderboard. Can be set to &#39;ALL&#39; to retrieve data for all leaderboards for this application. (required)
     * @param timeSpan The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeRankType The types of ranks to return. If the parameter is omitted, no ranks will be returned. (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresGetCall(String playerId, String leaderboardId, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeRankType, String language, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}"
            .replace("{" + "playerId" + "}", localVarApiClient.escapeString(playerId.toString()))
            .replace("{" + "leaderboardId" + "}", localVarApiClient.escapeString(leaderboardId.toString()))
            .replace("{" + "timeSpan" + "}", localVarApiClient.escapeString(timeSpan.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (includeRankType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRankType", includeRankType));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScoresGetValidateBeforeCall(String playerId, String leaderboardId, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeRankType, String language, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling gamesScoresGet(Async)");
        }

        // verify the required parameter 'leaderboardId' is set
        if (leaderboardId == null) {
            throw new ApiException("Missing the required parameter 'leaderboardId' when calling gamesScoresGet(Async)");
        }

        // verify the required parameter 'timeSpan' is set
        if (timeSpan == null) {
            throw new ApiException("Missing the required parameter 'timeSpan' when calling gamesScoresGet(Async)");
        }

        return gamesScoresGetCall(playerId, leaderboardId, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeRankType, language, maxResults, pageToken, _callback);

    }

    /**
     * 
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, &#x60;leaderboardId&#x60; can be set to &#x60;ALL&#x60; to retrieve data for all leaderboards in a given time span. &#x60;NOTE: You cannot ask for &#39;ALL&#39; leaderboards and &#39;ALL&#39; timeSpans in the same request; only one parameter may be set to &#39;ALL&#39;.
     * @param playerId A player ID. A value of &#x60;me&#x60; may be used in place of the authenticated player&#39;s ID. (required)
     * @param leaderboardId The ID of the leaderboard. Can be set to &#39;ALL&#39; to retrieve data for all leaderboards for this application. (required)
     * @param timeSpan The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeRankType The types of ranks to return. If the parameter is omitted, no ranks will be returned. (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @return PlayerLeaderboardScoreListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public PlayerLeaderboardScoreListResponse gamesScoresGet(String playerId, String leaderboardId, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeRankType, String language, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<PlayerLeaderboardScoreListResponse> localVarResp = gamesScoresGetWithHttpInfo(playerId, leaderboardId, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeRankType, language, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, &#x60;leaderboardId&#x60; can be set to &#x60;ALL&#x60; to retrieve data for all leaderboards in a given time span. &#x60;NOTE: You cannot ask for &#39;ALL&#39; leaderboards and &#39;ALL&#39; timeSpans in the same request; only one parameter may be set to &#39;ALL&#39;.
     * @param playerId A player ID. A value of &#x60;me&#x60; may be used in place of the authenticated player&#39;s ID. (required)
     * @param leaderboardId The ID of the leaderboard. Can be set to &#39;ALL&#39; to retrieve data for all leaderboards for this application. (required)
     * @param timeSpan The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeRankType The types of ranks to return. If the parameter is omitted, no ranks will be returned. (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @return ApiResponse&lt;PlayerLeaderboardScoreListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayerLeaderboardScoreListResponse> gamesScoresGetWithHttpInfo(String playerId, String leaderboardId, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeRankType, String language, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = gamesScoresGetValidateBeforeCall(playerId, leaderboardId, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeRankType, language, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<PlayerLeaderboardScoreListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, &#x60;leaderboardId&#x60; can be set to &#x60;ALL&#x60; to retrieve data for all leaderboards in a given time span. &#x60;NOTE: You cannot ask for &#39;ALL&#39; leaderboards and &#39;ALL&#39; timeSpans in the same request; only one parameter may be set to &#39;ALL&#39;.
     * @param playerId A player ID. A value of &#x60;me&#x60; may be used in place of the authenticated player&#39;s ID. (required)
     * @param leaderboardId The ID of the leaderboard. Can be set to &#39;ALL&#39; to retrieve data for all leaderboards for this application. (required)
     * @param timeSpan The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param includeRankType The types of ranks to return. If the parameter is omitted, no ranks will be returned. (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresGetAsync(String playerId, String leaderboardId, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String includeRankType, String language, Integer maxResults, String pageToken, final ApiCallback<PlayerLeaderboardScoreListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScoresGetValidateBeforeCall(playerId, leaderboardId, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeRankType, language, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PlayerLeaderboardScoreListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesScoresList
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresListCall(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/v1/leaderboards/{leaderboardId}/scores/{collection}"
            .replace("{" + "leaderboardId" + "}", localVarApiClient.escapeString(leaderboardId.toString()))
            .replace("{" + "collection" + "}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (timeSpan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeSpan", timeSpan));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScoresListValidateBeforeCall(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaderboardId' is set
        if (leaderboardId == null) {
            throw new ApiException("Missing the required parameter 'leaderboardId' when calling gamesScoresList(Async)");
        }

        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling gamesScoresList(Async)");
        }

        // verify the required parameter 'timeSpan' is set
        if (timeSpan == null) {
            throw new ApiException("Missing the required parameter 'timeSpan' when calling gamesScoresList(Async)");
        }

        return gamesScoresListCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, _callback);

    }

    /**
     * 
     * Lists the scores in a leaderboard, starting from the top.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @return LeaderboardScores
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public LeaderboardScores gamesScoresList(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<LeaderboardScores> localVarResp = gamesScoresListWithHttpInfo(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the scores in a leaderboard, starting from the top.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @return ApiResponse&lt;LeaderboardScores&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaderboardScores> gamesScoresListWithHttpInfo(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = gamesScoresListValidateBeforeCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<LeaderboardScores>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the scores in a leaderboard, starting from the top.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresListAsync(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, final ApiCallback<LeaderboardScores> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScoresListValidateBeforeCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardScores>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesScoresListWindow
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param resultsAbove The preferred number of scores to return above the player&#39;s score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults. (optional)
     * @param returnTopIfAbsent True if the top scores should be returned when the player is not in the leaderboard. Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresListWindowCall(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, Integer resultsAbove, Boolean returnTopIfAbsent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/v1/leaderboards/{leaderboardId}/window/{collection}"
            .replace("{" + "leaderboardId" + "}", localVarApiClient.escapeString(leaderboardId.toString()))
            .replace("{" + "collection" + "}", localVarApiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (timeSpan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeSpan", timeSpan));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (resultsAbove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultsAbove", resultsAbove));
        }

        if (returnTopIfAbsent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTopIfAbsent", returnTopIfAbsent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScoresListWindowValidateBeforeCall(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, Integer resultsAbove, Boolean returnTopIfAbsent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaderboardId' is set
        if (leaderboardId == null) {
            throw new ApiException("Missing the required parameter 'leaderboardId' when calling gamesScoresListWindow(Async)");
        }

        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling gamesScoresListWindow(Async)");
        }

        // verify the required parameter 'timeSpan' is set
        if (timeSpan == null) {
            throw new ApiException("Missing the required parameter 'timeSpan' when calling gamesScoresListWindow(Async)");
        }

        return gamesScoresListWindowCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, resultsAbove, returnTopIfAbsent, _callback);

    }

    /**
     * 
     * Lists the scores in a leaderboard around (and including) a player&#39;s score.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param resultsAbove The preferred number of scores to return above the player&#39;s score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults. (optional)
     * @param returnTopIfAbsent True if the top scores should be returned when the player is not in the leaderboard. Defaults to true. (optional)
     * @return LeaderboardScores
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public LeaderboardScores gamesScoresListWindow(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, Integer resultsAbove, Boolean returnTopIfAbsent) throws ApiException {
        ApiResponse<LeaderboardScores> localVarResp = gamesScoresListWindowWithHttpInfo(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, resultsAbove, returnTopIfAbsent);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the scores in a leaderboard around (and including) a player&#39;s score.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param resultsAbove The preferred number of scores to return above the player&#39;s score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults. (optional)
     * @param returnTopIfAbsent True if the top scores should be returned when the player is not in the leaderboard. Defaults to true. (optional)
     * @return ApiResponse&lt;LeaderboardScores&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaderboardScores> gamesScoresListWindowWithHttpInfo(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, Integer resultsAbove, Boolean returnTopIfAbsent) throws ApiException {
        okhttp3.Call localVarCall = gamesScoresListWindowValidateBeforeCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, resultsAbove, returnTopIfAbsent, null);
        Type localVarReturnType = new TypeToken<LeaderboardScores>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the scores in a leaderboard around (and including) a player&#39;s score.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param collection The collection of scores you&#39;re requesting. (required)
     * @param timeSpan Required. The time span for the scores and ranks you&#39;re requesting. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param maxResults The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified &#x60;maxResults&#x60;. (optional)
     * @param pageToken The token returned by the previous request. (optional)
     * @param resultsAbove The preferred number of scores to return above the player&#39;s score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults. (optional)
     * @param returnTopIfAbsent True if the top scores should be returned when the player is not in the leaderboard. Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresListWindowAsync(String leaderboardId, String collection, String timeSpan, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, Integer maxResults, String pageToken, Integer resultsAbove, Boolean returnTopIfAbsent, final ApiCallback<LeaderboardScores> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScoresListWindowValidateBeforeCall(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, resultsAbove, returnTopIfAbsent, _callback);
        Type localVarReturnType = new TypeToken<LeaderboardScores>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesScoresSubmit
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param score Required. The score you&#39;re submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param scoreTag Additional information about the score you&#39;re submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresSubmitCall(String leaderboardId, String score, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, String scoreTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/v1/leaderboards/{leaderboardId}/scores"
            .replace("{" + "leaderboardId" + "}", localVarApiClient.escapeString(leaderboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (score != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("score", score));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (scoreTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreTag", scoreTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScoresSubmitValidateBeforeCall(String leaderboardId, String score, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, String scoreTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaderboardId' is set
        if (leaderboardId == null) {
            throw new ApiException("Missing the required parameter 'leaderboardId' when calling gamesScoresSubmit(Async)");
        }

        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling gamesScoresSubmit(Async)");
        }

        return gamesScoresSubmitCall(leaderboardId, score, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, scoreTag, _callback);

    }

    /**
     * 
     * Submits a score to the specified leaderboard.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param score Required. The score you&#39;re submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param scoreTag Additional information about the score you&#39;re submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986. (optional)
     * @return PlayerScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public PlayerScoreResponse gamesScoresSubmit(String leaderboardId, String score, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, String scoreTag) throws ApiException {
        ApiResponse<PlayerScoreResponse> localVarResp = gamesScoresSubmitWithHttpInfo(leaderboardId, score, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, scoreTag);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a score to the specified leaderboard.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param score Required. The score you&#39;re submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param scoreTag Additional information about the score you&#39;re submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986. (optional)
     * @return ApiResponse&lt;PlayerScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayerScoreResponse> gamesScoresSubmitWithHttpInfo(String leaderboardId, String score, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, String scoreTag) throws ApiException {
        okhttp3.Call localVarCall = gamesScoresSubmitValidateBeforeCall(leaderboardId, score, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, scoreTag, null);
        Type localVarReturnType = new TypeToken<PlayerScoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a score to the specified leaderboard.
     * @param leaderboardId The ID of the leaderboard. (required)
     * @param score Required. The score you&#39;re submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param scoreTag Additional information about the score you&#39;re submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresSubmitAsync(String leaderboardId, String score, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, String scoreTag, final ApiCallback<PlayerScoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScoresSubmitValidateBeforeCall(leaderboardId, score, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, scoreTag, _callback);
        Type localVarReturnType = new TypeToken<PlayerScoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesScoresSubmitMultiple
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param playerScoreSubmissionList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresSubmitMultipleCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, PlayerScoreSubmissionList playerScoreSubmissionList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playerScoreSubmissionList;

        // create path and map variables
        String localVarPath = "/games/v1/leaderboards/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScoresSubmitMultipleValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, PlayerScoreSubmissionList playerScoreSubmissionList, final ApiCallback _callback) throws ApiException {
        return gamesScoresSubmitMultipleCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerScoreSubmissionList, _callback);

    }

    /**
     * 
     * Submits multiple scores to leaderboards.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param playerScoreSubmissionList  (optional)
     * @return PlayerScoreListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public PlayerScoreListResponse gamesScoresSubmitMultiple(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, PlayerScoreSubmissionList playerScoreSubmissionList) throws ApiException {
        ApiResponse<PlayerScoreListResponse> localVarResp = gamesScoresSubmitMultipleWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerScoreSubmissionList);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits multiple scores to leaderboards.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param playerScoreSubmissionList  (optional)
     * @return ApiResponse&lt;PlayerScoreListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayerScoreListResponse> gamesScoresSubmitMultipleWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, PlayerScoreSubmissionList playerScoreSubmissionList) throws ApiException {
        okhttp3.Call localVarCall = gamesScoresSubmitMultipleValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerScoreSubmissionList, null);
        Type localVarReturnType = new TypeToken<PlayerScoreListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits multiple scores to leaderboards.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param language The preferred language to use for strings returned by this method. (optional)
     * @param playerScoreSubmissionList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScoresSubmitMultipleAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String language, PlayerScoreSubmissionList playerScoreSubmissionList, final ApiCallback<PlayerScoreListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScoresSubmitMultipleValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerScoreSubmissionList, _callback);
        Type localVarReturnType = new TypeToken<PlayerScoreListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
