/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LeaderboardScoreRank;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A player leaderboard score object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerLeaderboardScore {
  public static final String SERIALIZED_NAME_FRIENDS_RANK = "friendsRank";
  @SerializedName(SERIALIZED_NAME_FRIENDS_RANK)
  private LeaderboardScoreRank friendsRank;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LEADERBOARD_ID = "leaderboard_id";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD_ID)
  private String leaderboardId;

  public static final String SERIALIZED_NAME_PUBLIC_RANK = "publicRank";
  @SerializedName(SERIALIZED_NAME_PUBLIC_RANK)
  private LeaderboardScoreRank publicRank;

  public static final String SERIALIZED_NAME_SCORE_STRING = "scoreString";
  @SerializedName(SERIALIZED_NAME_SCORE_STRING)
  private String scoreString;

  public static final String SERIALIZED_NAME_SCORE_TAG = "scoreTag";
  @SerializedName(SERIALIZED_NAME_SCORE_TAG)
  private String scoreTag;

  public static final String SERIALIZED_NAME_SCORE_VALUE = "scoreValue";
  @SerializedName(SERIALIZED_NAME_SCORE_VALUE)
  private String scoreValue;

  public static final String SERIALIZED_NAME_SOCIAL_RANK = "socialRank";
  @SerializedName(SERIALIZED_NAME_SOCIAL_RANK)
  private LeaderboardScoreRank socialRank;

  /**
   * The time span of this score.
   */
  @JsonAdapter(TimeSpanEnum.Adapter.class)
  public enum TimeSpanEnum {
    ALL_TIME("ALL_TIME"),
    
    WEEKLY("WEEKLY"),
    
    DAILY("DAILY");

    private String value;

    TimeSpanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeSpanEnum fromValue(String value) {
      for (TimeSpanEnum b : TimeSpanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeSpanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeSpanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeSpanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeSpanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeSpanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_SPAN = "timeSpan";
  @SerializedName(SERIALIZED_NAME_TIME_SPAN)
  private TimeSpanEnum timeSpan;

  public static final String SERIALIZED_NAME_WRITE_TIMESTAMP = "writeTimestamp";
  @SerializedName(SERIALIZED_NAME_WRITE_TIMESTAMP)
  private String writeTimestamp;

  public PlayerLeaderboardScore() {
  }

  public PlayerLeaderboardScore friendsRank(LeaderboardScoreRank friendsRank) {
    this.friendsRank = friendsRank;
    return this;
  }

  /**
   * Get friendsRank
   * @return friendsRank
   */
  @javax.annotation.Nullable
  public LeaderboardScoreRank getFriendsRank() {
    return friendsRank;
  }

  public void setFriendsRank(LeaderboardScoreRank friendsRank) {
    this.friendsRank = friendsRank;
  }


  public PlayerLeaderboardScore kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#playerLeaderboardScore&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PlayerLeaderboardScore leaderboardId(String leaderboardId) {
    this.leaderboardId = leaderboardId;
    return this;
  }

  /**
   * The ID of the leaderboard this score is in.
   * @return leaderboardId
   */
  @javax.annotation.Nullable
  public String getLeaderboardId() {
    return leaderboardId;
  }

  public void setLeaderboardId(String leaderboardId) {
    this.leaderboardId = leaderboardId;
  }


  public PlayerLeaderboardScore publicRank(LeaderboardScoreRank publicRank) {
    this.publicRank = publicRank;
    return this;
  }

  /**
   * Get publicRank
   * @return publicRank
   */
  @javax.annotation.Nullable
  public LeaderboardScoreRank getPublicRank() {
    return publicRank;
  }

  public void setPublicRank(LeaderboardScoreRank publicRank) {
    this.publicRank = publicRank;
  }


  public PlayerLeaderboardScore scoreString(String scoreString) {
    this.scoreString = scoreString;
    return this;
  }

  /**
   * The formatted value of this score.
   * @return scoreString
   */
  @javax.annotation.Nullable
  public String getScoreString() {
    return scoreString;
  }

  public void setScoreString(String scoreString) {
    this.scoreString = scoreString;
  }


  public PlayerLeaderboardScore scoreTag(String scoreTag) {
    this.scoreTag = scoreTag;
    return this;
  }

  /**
   * Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
   * @return scoreTag
   */
  @javax.annotation.Nullable
  public String getScoreTag() {
    return scoreTag;
  }

  public void setScoreTag(String scoreTag) {
    this.scoreTag = scoreTag;
  }


  public PlayerLeaderboardScore scoreValue(String scoreValue) {
    this.scoreValue = scoreValue;
    return this;
  }

  /**
   * The numerical value of this score.
   * @return scoreValue
   */
  @javax.annotation.Nullable
  public String getScoreValue() {
    return scoreValue;
  }

  public void setScoreValue(String scoreValue) {
    this.scoreValue = scoreValue;
  }


  public PlayerLeaderboardScore socialRank(LeaderboardScoreRank socialRank) {
    this.socialRank = socialRank;
    return this;
  }

  /**
   * Get socialRank
   * @return socialRank
   */
  @javax.annotation.Nullable
  public LeaderboardScoreRank getSocialRank() {
    return socialRank;
  }

  public void setSocialRank(LeaderboardScoreRank socialRank) {
    this.socialRank = socialRank;
  }


  public PlayerLeaderboardScore timeSpan(TimeSpanEnum timeSpan) {
    this.timeSpan = timeSpan;
    return this;
  }

  /**
   * The time span of this score.
   * @return timeSpan
   */
  @javax.annotation.Nullable
  public TimeSpanEnum getTimeSpan() {
    return timeSpan;
  }

  public void setTimeSpan(TimeSpanEnum timeSpan) {
    this.timeSpan = timeSpan;
  }


  public PlayerLeaderboardScore writeTimestamp(String writeTimestamp) {
    this.writeTimestamp = writeTimestamp;
    return this;
  }

  /**
   * The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
   * @return writeTimestamp
   */
  @javax.annotation.Nullable
  public String getWriteTimestamp() {
    return writeTimestamp;
  }

  public void setWriteTimestamp(String writeTimestamp) {
    this.writeTimestamp = writeTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerLeaderboardScore playerLeaderboardScore = (PlayerLeaderboardScore) o;
    return Objects.equals(this.friendsRank, playerLeaderboardScore.friendsRank) &&
        Objects.equals(this.kind, playerLeaderboardScore.kind) &&
        Objects.equals(this.leaderboardId, playerLeaderboardScore.leaderboardId) &&
        Objects.equals(this.publicRank, playerLeaderboardScore.publicRank) &&
        Objects.equals(this.scoreString, playerLeaderboardScore.scoreString) &&
        Objects.equals(this.scoreTag, playerLeaderboardScore.scoreTag) &&
        Objects.equals(this.scoreValue, playerLeaderboardScore.scoreValue) &&
        Objects.equals(this.socialRank, playerLeaderboardScore.socialRank) &&
        Objects.equals(this.timeSpan, playerLeaderboardScore.timeSpan) &&
        Objects.equals(this.writeTimestamp, playerLeaderboardScore.writeTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(friendsRank, kind, leaderboardId, publicRank, scoreString, scoreTag, scoreValue, socialRank, timeSpan, writeTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerLeaderboardScore {\n");
    sb.append("    friendsRank: ").append(toIndentedString(friendsRank)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    leaderboardId: ").append(toIndentedString(leaderboardId)).append("\n");
    sb.append("    publicRank: ").append(toIndentedString(publicRank)).append("\n");
    sb.append("    scoreString: ").append(toIndentedString(scoreString)).append("\n");
    sb.append("    scoreTag: ").append(toIndentedString(scoreTag)).append("\n");
    sb.append("    scoreValue: ").append(toIndentedString(scoreValue)).append("\n");
    sb.append("    socialRank: ").append(toIndentedString(socialRank)).append("\n");
    sb.append("    timeSpan: ").append(toIndentedString(timeSpan)).append("\n");
    sb.append("    writeTimestamp: ").append(toIndentedString(writeTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("friendsRank");
    openapiFields.add("kind");
    openapiFields.add("leaderboard_id");
    openapiFields.add("publicRank");
    openapiFields.add("scoreString");
    openapiFields.add("scoreTag");
    openapiFields.add("scoreValue");
    openapiFields.add("socialRank");
    openapiFields.add("timeSpan");
    openapiFields.add("writeTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerLeaderboardScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerLeaderboardScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerLeaderboardScore is not found in the empty JSON string", PlayerLeaderboardScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerLeaderboardScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerLeaderboardScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `friendsRank`
      if (jsonObj.get("friendsRank") != null && !jsonObj.get("friendsRank").isJsonNull()) {
        LeaderboardScoreRank.validateJsonElement(jsonObj.get("friendsRank"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("leaderboard_id") != null && !jsonObj.get("leaderboard_id").isJsonNull()) && !jsonObj.get("leaderboard_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaderboard_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaderboard_id").toString()));
      }
      // validate the optional field `publicRank`
      if (jsonObj.get("publicRank") != null && !jsonObj.get("publicRank").isJsonNull()) {
        LeaderboardScoreRank.validateJsonElement(jsonObj.get("publicRank"));
      }
      if ((jsonObj.get("scoreString") != null && !jsonObj.get("scoreString").isJsonNull()) && !jsonObj.get("scoreString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreString").toString()));
      }
      if ((jsonObj.get("scoreTag") != null && !jsonObj.get("scoreTag").isJsonNull()) && !jsonObj.get("scoreTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreTag").toString()));
      }
      if ((jsonObj.get("scoreValue") != null && !jsonObj.get("scoreValue").isJsonNull()) && !jsonObj.get("scoreValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreValue").toString()));
      }
      // validate the optional field `socialRank`
      if (jsonObj.get("socialRank") != null && !jsonObj.get("socialRank").isJsonNull()) {
        LeaderboardScoreRank.validateJsonElement(jsonObj.get("socialRank"));
      }
      if ((jsonObj.get("timeSpan") != null && !jsonObj.get("timeSpan").isJsonNull()) && !jsonObj.get("timeSpan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSpan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeSpan").toString()));
      }
      // validate the optional field `timeSpan`
      if (jsonObj.get("timeSpan") != null && !jsonObj.get("timeSpan").isJsonNull()) {
        TimeSpanEnum.validateJsonElement(jsonObj.get("timeSpan"));
      }
      if ((jsonObj.get("writeTimestamp") != null && !jsonObj.get("writeTimestamp").isJsonNull()) && !jsonObj.get("writeTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeTimestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerLeaderboardScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerLeaderboardScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerLeaderboardScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerLeaderboardScore.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerLeaderboardScore>() {
           @Override
           public void write(JsonWriter out, PlayerLeaderboardScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerLeaderboardScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerLeaderboardScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerLeaderboardScore
   * @throws IOException if the JSON string is invalid with respect to PlayerLeaderboardScore
   */
  public static PlayerLeaderboardScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerLeaderboardScore.class);
  }

  /**
   * Convert an instance of PlayerLeaderboardScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

