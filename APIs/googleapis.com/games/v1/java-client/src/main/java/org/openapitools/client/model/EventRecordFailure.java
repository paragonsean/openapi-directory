/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event update failure resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventRecordFailure {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  /**
   * The cause for the update failure.
   */
  @JsonAdapter(FailureCauseEnum.Adapter.class)
  public enum FailureCauseEnum {
    NOT_FOUND("NOT_FOUND"),
    
    INVALID_UPDATE_VALUE("INVALID_UPDATE_VALUE");

    private String value;

    FailureCauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureCauseEnum fromValue(String value) {
      for (FailureCauseEnum b : FailureCauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureCauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureCauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureCauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureCauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureCauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_CAUSE = "failureCause";
  @SerializedName(SERIALIZED_NAME_FAILURE_CAUSE)
  private FailureCauseEnum failureCause;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public EventRecordFailure() {
  }

  public EventRecordFailure eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The ID of the event that was not updated.
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventRecordFailure failureCause(FailureCauseEnum failureCause) {
    this.failureCause = failureCause;
    return this;
  }

  /**
   * The cause for the update failure.
   * @return failureCause
   */
  @javax.annotation.Nullable
  public FailureCauseEnum getFailureCause() {
    return failureCause;
  }

  public void setFailureCause(FailureCauseEnum failureCause) {
    this.failureCause = failureCause;
  }


  public EventRecordFailure kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#eventRecordFailure&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRecordFailure eventRecordFailure = (EventRecordFailure) o;
    return Objects.equals(this.eventId, eventRecordFailure.eventId) &&
        Objects.equals(this.failureCause, eventRecordFailure.failureCause) &&
        Objects.equals(this.kind, eventRecordFailure.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, failureCause, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRecordFailure {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    failureCause: ").append(toIndentedString(failureCause)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("failureCause");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventRecordFailure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventRecordFailure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventRecordFailure is not found in the empty JSON string", EventRecordFailure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventRecordFailure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventRecordFailure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("failureCause") != null && !jsonObj.get("failureCause").isJsonNull()) && !jsonObj.get("failureCause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureCause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureCause").toString()));
      }
      // validate the optional field `failureCause`
      if (jsonObj.get("failureCause") != null && !jsonObj.get("failureCause").isJsonNull()) {
        FailureCauseEnum.validateJsonElement(jsonObj.get("failureCause"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventRecordFailure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventRecordFailure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventRecordFailure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventRecordFailure.class));

       return (TypeAdapter<T>) new TypeAdapter<EventRecordFailure>() {
           @Override
           public void write(JsonWriter out, EventRecordFailure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventRecordFailure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventRecordFailure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventRecordFailure
   * @throws IOException if the JSON string is invalid with respect to EventRecordFailure
   */
  public static EventRecordFailure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventRecordFailure.class);
  }

  /**
   * Convert an instance of EventRecordFailure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

