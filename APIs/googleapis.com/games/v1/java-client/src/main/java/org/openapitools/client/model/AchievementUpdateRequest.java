/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GamesAchievementIncrement;
import org.openapitools.client.model.GamesAchievementSetStepsAtLeast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to update an achievement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:35.952717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchievementUpdateRequest {
  public static final String SERIALIZED_NAME_ACHIEVEMENT_ID = "achievementId";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_ID)
  private String achievementId;

  public static final String SERIALIZED_NAME_INCREMENT_PAYLOAD = "incrementPayload";
  @SerializedName(SERIALIZED_NAME_INCREMENT_PAYLOAD)
  private GamesAchievementIncrement incrementPayload;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SET_STEPS_AT_LEAST_PAYLOAD = "setStepsAtLeastPayload";
  @SerializedName(SERIALIZED_NAME_SET_STEPS_AT_LEAST_PAYLOAD)
  private GamesAchievementSetStepsAtLeast setStepsAtLeastPayload;

  /**
   * The type of update being applied.
   */
  @JsonAdapter(UpdateTypeEnum.Adapter.class)
  public enum UpdateTypeEnum {
    REVEAL("REVEAL"),
    
    UNLOCK("UNLOCK"),
    
    INCREMENT("INCREMENT"),
    
    SET_STEPS_AT_LEAST("SET_STEPS_AT_LEAST");

    private String value;

    UpdateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateTypeEnum fromValue(String value) {
      for (UpdateTypeEnum b : UpdateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_TYPE = "updateType";
  @SerializedName(SERIALIZED_NAME_UPDATE_TYPE)
  private UpdateTypeEnum updateType;

  public AchievementUpdateRequest() {
  }

  public AchievementUpdateRequest achievementId(String achievementId) {
    this.achievementId = achievementId;
    return this;
  }

  /**
   * The achievement this update is being applied to.
   * @return achievementId
   */
  @javax.annotation.Nullable
  public String getAchievementId() {
    return achievementId;
  }

  public void setAchievementId(String achievementId) {
    this.achievementId = achievementId;
  }


  public AchievementUpdateRequest incrementPayload(GamesAchievementIncrement incrementPayload) {
    this.incrementPayload = incrementPayload;
    return this;
  }

  /**
   * Get incrementPayload
   * @return incrementPayload
   */
  @javax.annotation.Nullable
  public GamesAchievementIncrement getIncrementPayload() {
    return incrementPayload;
  }

  public void setIncrementPayload(GamesAchievementIncrement incrementPayload) {
    this.incrementPayload = incrementPayload;
  }


  public AchievementUpdateRequest kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;games#achievementUpdateRequest&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AchievementUpdateRequest setStepsAtLeastPayload(GamesAchievementSetStepsAtLeast setStepsAtLeastPayload) {
    this.setStepsAtLeastPayload = setStepsAtLeastPayload;
    return this;
  }

  /**
   * Get setStepsAtLeastPayload
   * @return setStepsAtLeastPayload
   */
  @javax.annotation.Nullable
  public GamesAchievementSetStepsAtLeast getSetStepsAtLeastPayload() {
    return setStepsAtLeastPayload;
  }

  public void setSetStepsAtLeastPayload(GamesAchievementSetStepsAtLeast setStepsAtLeastPayload) {
    this.setStepsAtLeastPayload = setStepsAtLeastPayload;
  }


  public AchievementUpdateRequest updateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
    return this;
  }

  /**
   * The type of update being applied.
   * @return updateType
   */
  @javax.annotation.Nullable
  public UpdateTypeEnum getUpdateType() {
    return updateType;
  }

  public void setUpdateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchievementUpdateRequest achievementUpdateRequest = (AchievementUpdateRequest) o;
    return Objects.equals(this.achievementId, achievementUpdateRequest.achievementId) &&
        Objects.equals(this.incrementPayload, achievementUpdateRequest.incrementPayload) &&
        Objects.equals(this.kind, achievementUpdateRequest.kind) &&
        Objects.equals(this.setStepsAtLeastPayload, achievementUpdateRequest.setStepsAtLeastPayload) &&
        Objects.equals(this.updateType, achievementUpdateRequest.updateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementId, incrementPayload, kind, setStepsAtLeastPayload, updateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchievementUpdateRequest {\n");
    sb.append("    achievementId: ").append(toIndentedString(achievementId)).append("\n");
    sb.append("    incrementPayload: ").append(toIndentedString(incrementPayload)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    setStepsAtLeastPayload: ").append(toIndentedString(setStepsAtLeastPayload)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievementId");
    openapiFields.add("incrementPayload");
    openapiFields.add("kind");
    openapiFields.add("setStepsAtLeastPayload");
    openapiFields.add("updateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchievementUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchievementUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchievementUpdateRequest is not found in the empty JSON string", AchievementUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchievementUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchievementUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achievementId") != null && !jsonObj.get("achievementId").isJsonNull()) && !jsonObj.get("achievementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achievementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achievementId").toString()));
      }
      // validate the optional field `incrementPayload`
      if (jsonObj.get("incrementPayload") != null && !jsonObj.get("incrementPayload").isJsonNull()) {
        GamesAchievementIncrement.validateJsonElement(jsonObj.get("incrementPayload"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `setStepsAtLeastPayload`
      if (jsonObj.get("setStepsAtLeastPayload") != null && !jsonObj.get("setStepsAtLeastPayload").isJsonNull()) {
        GamesAchievementSetStepsAtLeast.validateJsonElement(jsonObj.get("setStepsAtLeastPayload"));
      }
      if ((jsonObj.get("updateType") != null && !jsonObj.get("updateType").isJsonNull()) && !jsonObj.get("updateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateType").toString()));
      }
      // validate the optional field `updateType`
      if (jsonObj.get("updateType") != null && !jsonObj.get("updateType").isJsonNull()) {
        UpdateTypeEnum.validateJsonElement(jsonObj.get("updateType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchievementUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchievementUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchievementUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchievementUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AchievementUpdateRequest>() {
           @Override
           public void write(JsonWriter out, AchievementUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchievementUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchievementUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchievementUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to AchievementUpdateRequest
   */
  public static AchievementUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchievementUpdateRequest.class);
  }

  /**
   * Convert an instance of AchievementUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

