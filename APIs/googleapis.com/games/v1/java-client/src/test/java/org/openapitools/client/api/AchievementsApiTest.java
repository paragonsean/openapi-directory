/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AchievementIncrementResponse;
import org.openapitools.client.model.AchievementRevealResponse;
import org.openapitools.client.model.AchievementSetStepsAtLeastResponse;
import org.openapitools.client.model.AchievementUnlockResponse;
import org.openapitools.client.model.AchievementUpdateMultipleRequest;
import org.openapitools.client.model.AchievementUpdateMultipleResponse;
import org.openapitools.client.model.PlayerAchievementListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AchievementsApi
 */
@Disabled
public class AchievementsApiTest {

    private final AchievementsApi api = new AchievementsApi();

    /**
     * Increments the steps of the achievement with the given ID for the currently authenticated player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsIncrementTest() throws ApiException {
        String achievementId = null;
        Integer stepsToIncrement = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        AchievementIncrementResponse response = api.gamesAchievementsIncrement(achievementId, stepsToIncrement, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Lists the progress for all your application&#39;s achievements for the currently authenticated player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsListTest() throws ApiException {
        String playerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        Integer maxResults = null;
        String pageToken = null;
        String state = null;
        PlayerAchievementListResponse response = api.gamesAchievementsList(playerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, state);
        // TODO: test validations
    }

    /**
     * Sets the state of the achievement with the given ID to &#x60;REVEALED&#x60; for the currently authenticated player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsRevealTest() throws ApiException {
        String achievementId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementRevealResponse response = api.gamesAchievementsReveal(achievementId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsSetStepsAtLeastTest() throws ApiException {
        String achievementId = null;
        Integer steps = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementSetStepsAtLeastResponse response = api.gamesAchievementsSetStepsAtLeast(achievementId, steps, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Unlocks this achievement for the currently authenticated player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsUnlockTest() throws ApiException {
        String achievementId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementUnlockResponse response = api.gamesAchievementsUnlock(achievementId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates multiple achievements for the currently authenticated player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsUpdateMultipleTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementUpdateMultipleRequest achievementUpdateMultipleRequest = null;
        AchievementUpdateMultipleResponse response = api.gamesAchievementsUpdateMultiple($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, achievementUpdateMultipleRequest);
        // TODO: test validations
    }

}
