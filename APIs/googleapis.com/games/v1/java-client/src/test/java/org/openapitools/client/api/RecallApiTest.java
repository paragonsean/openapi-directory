/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LinkPersonaRequest;
import org.openapitools.client.model.LinkPersonaResponse;
import org.openapitools.client.model.ResetPersonaRequest;
import org.openapitools.client.model.ResetPersonaResponse;
import org.openapitools.client.model.RetrievePlayerTokensResponse;
import org.openapitools.client.model.UnlinkPersonaRequest;
import org.openapitools.client.model.UnlinkPersonaResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecallApi
 */
@Disabled
public class RecallApiTest {

    private final RecallApi api = new RecallApi();

    /**
     * Associate the PGS Player principal encoded in the provided recall session id with an in-game account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesRecallLinkPersonaTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LinkPersonaRequest linkPersonaRequest = null;
        LinkPersonaResponse response = api.gamesRecallLinkPersona($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, linkPersonaRequest);
        // TODO: test validations
    }

    /**
     * Delete all Recall tokens linking the given persona to any player (with or without a profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesRecallResetPersonaTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResetPersonaRequest resetPersonaRequest = null;
        ResetPersonaResponse response = api.gamesRecallResetPersona($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resetPersonaRequest);
        // TODO: test validations
    }

    /**
     * Retrieve all Recall tokens associated with the PGS Player principal encoded in the provided recall session id. The API is only available for users that have active PGS Player profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesRecallRetrieveTokensTest() throws ApiException {
        String sessionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RetrievePlayerTokensResponse response = api.gamesRecallRetrieveTokens(sessionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Delete a Recall token linking the PGS Player principal identified by the Recall session and an in-game account identified either by the &#39;persona&#39; or by the token value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesRecallUnlinkPersonaTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnlinkPersonaRequest unlinkPersonaRequest = null;
        UnlinkPersonaResponse response = api.gamesRecallUnlinkPersona($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unlinkPersonaRequest);
        // TODO: test validations
    }

}
