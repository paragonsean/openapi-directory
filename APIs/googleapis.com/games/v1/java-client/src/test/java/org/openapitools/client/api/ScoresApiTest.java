/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LeaderboardScores;
import org.openapitools.client.model.PlayerLeaderboardScoreListResponse;
import org.openapitools.client.model.PlayerScoreListResponse;
import org.openapitools.client.model.PlayerScoreResponse;
import org.openapitools.client.model.PlayerScoreSubmissionList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScoresApi
 */
@Disabled
public class ScoresApiTest {

    private final ScoresApi api = new ScoresApi();

    /**
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, &#x60;leaderboardId&#x60; can be set to &#x60;ALL&#x60; to retrieve data for all leaderboards in a given time span. &#x60;NOTE: You cannot ask for &#39;ALL&#39; leaderboards and &#39;ALL&#39; timeSpans in the same request; only one parameter may be set to &#39;ALL&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScoresGetTest() throws ApiException {
        String playerId = null;
        String leaderboardId = null;
        String timeSpan = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String includeRankType = null;
        String language = null;
        Integer maxResults = null;
        String pageToken = null;
        PlayerLeaderboardScoreListResponse response = api.gamesScoresGet(playerId, leaderboardId, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeRankType, language, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the scores in a leaderboard, starting from the top.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScoresListTest() throws ApiException {
        String leaderboardId = null;
        String collection = null;
        String timeSpan = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        Integer maxResults = null;
        String pageToken = null;
        LeaderboardScores response = api.gamesScoresList(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the scores in a leaderboard around (and including) a player&#39;s score.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScoresListWindowTest() throws ApiException {
        String leaderboardId = null;
        String collection = null;
        String timeSpan = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        Integer maxResults = null;
        String pageToken = null;
        Integer resultsAbove = null;
        Boolean returnTopIfAbsent = null;
        LeaderboardScores response = api.gamesScoresListWindow(leaderboardId, collection, timeSpan, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken, resultsAbove, returnTopIfAbsent);
        // TODO: test validations
    }

    /**
     * Submits a score to the specified leaderboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScoresSubmitTest() throws ApiException {
        String leaderboardId = null;
        String score = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        String scoreTag = null;
        PlayerScoreResponse response = api.gamesScoresSubmit(leaderboardId, score, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, scoreTag);
        // TODO: test validations
    }

    /**
     * Submits multiple scores to leaderboards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScoresSubmitMultipleTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        PlayerScoreSubmissionList playerScoreSubmissionList = null;
        PlayerScoreListResponse response = api.gamesScoresSubmitMultiple($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerScoreSubmissionList);
        // TODO: test validations
    }

}
