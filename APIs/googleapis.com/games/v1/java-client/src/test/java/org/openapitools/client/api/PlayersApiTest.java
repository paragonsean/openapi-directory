/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetMultipleApplicationPlayerIdsResponse;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerListResponse;
import org.openapitools.client.model.ScopedPlayerIds;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayersApi
 */
@Disabled
public class PlayersApiTest {

    private final PlayersApi api = new PlayersApi();

    /**
     * Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set &#x60;playerId&#x60; to &#x60;me&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesPlayersGetTest() throws ApiException {
        String playerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        String playerIdConsistencyToken = null;
        Player response = api.gamesPlayersGet(playerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, playerIdConsistencyToken);
        // TODO: test validations
    }

    /**
     * Get the application player ids for the currently authenticated player across all requested games by the same developer as the calling application. This will only return ids for players that actually have an id (scoped or otherwise) with that game.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesPlayersGetMultipleApplicationPlayerIdsTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> applicationIds = null;
        GetMultipleApplicationPlayerIdsResponse response = api.gamesPlayersGetMultipleApplicationPlayerIds($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, applicationIds);
        // TODO: test validations
    }

    /**
     * Retrieves scoped player identifiers for currently authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesPlayersGetScopedPlayerIdsTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ScopedPlayerIds response = api.gamesPlayersGetScopedPlayerIds($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get the collection of players for the currently authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesPlayersListTest() throws ApiException {
        String collection = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        Integer maxResults = null;
        String pageToken = null;
        PlayerListResponse response = api.gamesPlayersList(collection, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, maxResults, pageToken);
        // TODO: test validations
    }

}
