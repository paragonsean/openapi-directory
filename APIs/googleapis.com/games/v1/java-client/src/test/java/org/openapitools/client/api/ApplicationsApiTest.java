/*
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationVerifyResponse;
import org.openapitools.client.model.EndPoint;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationsApi
 */
@Disabled
public class ApplicationsApiTest {

    private final ApplicationsApi api = new ApplicationsApi();

    /**
     * Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified &#x60;platformType&#x60;, the returned response will not include any instance data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesApplicationsGetTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String language = null;
        String platformType = null;
        Application response = api.gamesApplicationsGet(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, language, platformType);
        // TODO: test validations
    }

    /**
     * Returns a URL for the requested end point type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesApplicationsGetEndPointTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String applicationId = null;
        String endPointType = null;
        EndPoint response = api.gamesApplicationsGetEndPoint($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, applicationId, endPointType);
        // TODO: test validations
    }

    /**
     * Indicate that the currently authenticated user is playing your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesApplicationsPlayedTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gamesApplicationsPlayed($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesApplicationsVerifyTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApplicationVerifyResponse response = api.gamesApplicationsVerify(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
