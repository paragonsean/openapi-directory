/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScoreSubmission model module.
 * @module model/ScoreSubmission
 * @version v1
 */
class ScoreSubmission {
    /**
     * Constructs a new <code>ScoreSubmission</code>.
     * A request to submit a score to leaderboards.
     * @alias module:model/ScoreSubmission
     */
    constructor() { 
        
        ScoreSubmission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoreSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoreSubmission} obj Optional instance to populate.
     * @return {module:model/ScoreSubmission} The populated <code>ScoreSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoreSubmission();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('leaderboardId')) {
                obj['leaderboardId'] = ApiClient.convertToType(data['leaderboardId'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'String');
            }
            if (data.hasOwnProperty('scoreTag')) {
                obj['scoreTag'] = ApiClient.convertToType(data['scoreTag'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoreSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoreSubmission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['leaderboardId'] && !(typeof data['leaderboardId'] === 'string' || data['leaderboardId'] instanceof String)) {
            throw new Error("Expected the field `leaderboardId` to be a primitive type in the JSON string but got " + data['leaderboardId']);
        }
        // ensure the json data is a string
        if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
            throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
        }
        // ensure the json data is a string
        if (data['scoreTag'] && !(typeof data['scoreTag'] === 'string' || data['scoreTag'] instanceof String)) {
            throw new Error("Expected the field `scoreTag` to be a primitive type in the JSON string but got " + data['scoreTag']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}



/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#scoreSubmission`.
 * @member {String} kind
 */
ScoreSubmission.prototype['kind'] = undefined;

/**
 * The leaderboard this score is being submitted to.
 * @member {String} leaderboardId
 */
ScoreSubmission.prototype['leaderboardId'] = undefined;

/**
 * The new score being submitted.
 * @member {String} score
 */
ScoreSubmission.prototype['score'] = undefined;

/**
 * Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
 * @member {String} scoreTag
 */
ScoreSubmission.prototype['scoreTag'] = undefined;

/**
 * Signature Values will contain URI-safe characters as defined by section 2.3 of RFC 3986.
 * @member {String} signature
 */
ScoreSubmission.prototype['signature'] = undefined;






export default ScoreSubmission;

