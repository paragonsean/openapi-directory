/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AchievementUpdateResponse model module.
 * @module model/AchievementUpdateResponse
 * @version v1
 */
class AchievementUpdateResponse {
    /**
     * Constructs a new <code>AchievementUpdateResponse</code>.
     * An updated achievement.
     * @alias module:model/AchievementUpdateResponse
     */
    constructor() { 
        
        AchievementUpdateResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AchievementUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchievementUpdateResponse} obj Optional instance to populate.
     * @return {module:model/AchievementUpdateResponse} The populated <code>AchievementUpdateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchievementUpdateResponse();

            if (data.hasOwnProperty('achievementId')) {
                obj['achievementId'] = ApiClient.convertToType(data['achievementId'], 'String');
            }
            if (data.hasOwnProperty('currentState')) {
                obj['currentState'] = ApiClient.convertToType(data['currentState'], 'String');
            }
            if (data.hasOwnProperty('currentSteps')) {
                obj['currentSteps'] = ApiClient.convertToType(data['currentSteps'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('newlyUnlocked')) {
                obj['newlyUnlocked'] = ApiClient.convertToType(data['newlyUnlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('updateOccurred')) {
                obj['updateOccurred'] = ApiClient.convertToType(data['updateOccurred'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AchievementUpdateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AchievementUpdateResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['achievementId'] && !(typeof data['achievementId'] === 'string' || data['achievementId'] instanceof String)) {
            throw new Error("Expected the field `achievementId` to be a primitive type in the JSON string but got " + data['achievementId']);
        }
        // ensure the json data is a string
        if (data['currentState'] && !(typeof data['currentState'] === 'string' || data['currentState'] instanceof String)) {
            throw new Error("Expected the field `currentState` to be a primitive type in the JSON string but got " + data['currentState']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * The achievement this update is was applied to.
 * @member {String} achievementId
 */
AchievementUpdateResponse.prototype['achievementId'] = undefined;

/**
 * The current state of the achievement.
 * @member {module:model/AchievementUpdateResponse.CurrentStateEnum} currentState
 */
AchievementUpdateResponse.prototype['currentState'] = undefined;

/**
 * The current steps recorded for this achievement if it is incremental.
 * @member {Number} currentSteps
 */
AchievementUpdateResponse.prototype['currentSteps'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.
 * @member {String} kind
 */
AchievementUpdateResponse.prototype['kind'] = undefined;

/**
 * Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
 * @member {Boolean} newlyUnlocked
 */
AchievementUpdateResponse.prototype['newlyUnlocked'] = undefined;

/**
 * Whether the requested updates actually affected the achievement.
 * @member {Boolean} updateOccurred
 */
AchievementUpdateResponse.prototype['updateOccurred'] = undefined;





/**
 * Allowed values for the <code>currentState</code> property.
 * @enum {String}
 * @readonly
 */
AchievementUpdateResponse['CurrentStateEnum'] = {

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN",

    /**
     * value: "REVEALED"
     * @const
     */
    "REVEALED": "REVEALED",

    /**
     * value: "UNLOCKED"
     * @const
     */
    "UNLOCKED": "UNLOCKED"
};



export default AchievementUpdateResponse;

