/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayerEvent model module.
 * @module model/PlayerEvent
 * @version v1
 */
class PlayerEvent {
    /**
     * Constructs a new <code>PlayerEvent</code>.
     * An event status resource.
     * @alias module:model/PlayerEvent
     */
    constructor() { 
        
        PlayerEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerEvent} obj Optional instance to populate.
     * @return {module:model/PlayerEvent} The populated <code>PlayerEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerEvent();

            if (data.hasOwnProperty('definitionId')) {
                obj['definitionId'] = ApiClient.convertToType(data['definitionId'], 'String');
            }
            if (data.hasOwnProperty('formattedNumEvents')) {
                obj['formattedNumEvents'] = ApiClient.convertToType(data['formattedNumEvents'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('numEvents')) {
                obj['numEvents'] = ApiClient.convertToType(data['numEvents'], 'String');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['definitionId'] && !(typeof data['definitionId'] === 'string' || data['definitionId'] instanceof String)) {
            throw new Error("Expected the field `definitionId` to be a primitive type in the JSON string but got " + data['definitionId']);
        }
        // ensure the json data is a string
        if (data['formattedNumEvents'] && !(typeof data['formattedNumEvents'] === 'string' || data['formattedNumEvents'] instanceof String)) {
            throw new Error("Expected the field `formattedNumEvents` to be a primitive type in the JSON string but got " + data['formattedNumEvents']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['numEvents'] && !(typeof data['numEvents'] === 'string' || data['numEvents'] instanceof String)) {
            throw new Error("Expected the field `numEvents` to be a primitive type in the JSON string but got " + data['numEvents']);
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }

        return true;
    }


}



/**
 * The ID of the event definition.
 * @member {String} definitionId
 */
PlayerEvent.prototype['definitionId'] = undefined;

/**
 * The current number of times this event has occurred, as a string. The formatting of this string depends on the configuration of your event in the Play Games Developer Console.
 * @member {String} formattedNumEvents
 */
PlayerEvent.prototype['formattedNumEvents'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerEvent`.
 * @member {String} kind
 */
PlayerEvent.prototype['kind'] = undefined;

/**
 * The current number of times this event has occurred.
 * @member {String} numEvents
 */
PlayerEvent.prototype['numEvents'] = undefined;

/**
 * The ID of the player.
 * @member {String} playerId
 */
PlayerEvent.prototype['playerId'] = undefined;






export default PlayerEvent;

