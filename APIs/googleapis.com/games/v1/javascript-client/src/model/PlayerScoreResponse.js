/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerScore from './PlayerScore';

/**
 * The PlayerScoreResponse model module.
 * @module model/PlayerScoreResponse
 * @version v1
 */
class PlayerScoreResponse {
    /**
     * Constructs a new <code>PlayerScoreResponse</code>.
     * A list of leaderboard entry resources.
     * @alias module:model/PlayerScoreResponse
     */
    constructor() { 
        
        PlayerScoreResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerScoreResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerScoreResponse} obj Optional instance to populate.
     * @return {module:model/PlayerScoreResponse} The populated <code>PlayerScoreResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerScoreResponse();

            if (data.hasOwnProperty('beatenScoreTimeSpans')) {
                obj['beatenScoreTimeSpans'] = ApiClient.convertToType(data['beatenScoreTimeSpans'], ['String']);
            }
            if (data.hasOwnProperty('formattedScore')) {
                obj['formattedScore'] = ApiClient.convertToType(data['formattedScore'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('leaderboardId')) {
                obj['leaderboardId'] = ApiClient.convertToType(data['leaderboardId'], 'String');
            }
            if (data.hasOwnProperty('scoreTag')) {
                obj['scoreTag'] = ApiClient.convertToType(data['scoreTag'], 'String');
            }
            if (data.hasOwnProperty('unbeatenScores')) {
                obj['unbeatenScores'] = ApiClient.convertToType(data['unbeatenScores'], [PlayerScore]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerScoreResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerScoreResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['beatenScoreTimeSpans'])) {
            throw new Error("Expected the field `beatenScoreTimeSpans` to be an array in the JSON data but got " + data['beatenScoreTimeSpans']);
        }
        // ensure the json data is a string
        if (data['formattedScore'] && !(typeof data['formattedScore'] === 'string' || data['formattedScore'] instanceof String)) {
            throw new Error("Expected the field `formattedScore` to be a primitive type in the JSON string but got " + data['formattedScore']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['leaderboardId'] && !(typeof data['leaderboardId'] === 'string' || data['leaderboardId'] instanceof String)) {
            throw new Error("Expected the field `leaderboardId` to be a primitive type in the JSON string but got " + data['leaderboardId']);
        }
        // ensure the json data is a string
        if (data['scoreTag'] && !(typeof data['scoreTag'] === 'string' || data['scoreTag'] instanceof String)) {
            throw new Error("Expected the field `scoreTag` to be a primitive type in the JSON string but got " + data['scoreTag']);
        }
        if (data['unbeatenScores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unbeatenScores'])) {
                throw new Error("Expected the field `unbeatenScores` to be an array in the JSON data but got " + data['unbeatenScores']);
            }
            // validate the optional field `unbeatenScores` (array)
            for (const item of data['unbeatenScores']) {
                PlayerScore.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The time spans where the submitted score is better than the existing score for that time span.
 * @member {Array.<module:model/PlayerScoreResponse.BeatenScoreTimeSpansEnum>} beatenScoreTimeSpans
 */
PlayerScoreResponse.prototype['beatenScoreTimeSpans'] = undefined;

/**
 * The formatted value of the submitted score.
 * @member {String} formattedScore
 */
PlayerScoreResponse.prototype['formattedScore'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScoreResponse`.
 * @member {String} kind
 */
PlayerScoreResponse.prototype['kind'] = undefined;

/**
 * The leaderboard ID that this score was submitted to.
 * @member {String} leaderboardId
 */
PlayerScoreResponse.prototype['leaderboardId'] = undefined;

/**
 * Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
 * @member {String} scoreTag
 */
PlayerScoreResponse.prototype['scoreTag'] = undefined;

/**
 * The scores in time spans that have not been beaten. As an example, the submitted score may be better than the player's `DAILY` score, but not better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.
 * @member {Array.<module:model/PlayerScore>} unbeatenScores
 */
PlayerScoreResponse.prototype['unbeatenScores'] = undefined;





/**
 * Allowed values for the <code>beatenScoreTimeSpans</code> property.
 * @enum {String}
 * @readonly
 */
PlayerScoreResponse['BeatenScoreTimeSpansEnum'] = {

    /**
     * value: "ALL_TIME"
     * @const
     */
    "ALL_TIME": "ALL_TIME",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default PlayerScoreResponse;

