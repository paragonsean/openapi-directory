/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinkPersonaRequest model module.
 * @module model/LinkPersonaRequest
 * @version v1
 */
class LinkPersonaRequest {
    /**
     * Constructs a new <code>LinkPersonaRequest</code>.
     * Request to link an in-game account with a PGS principal (encoded in the session id).
     * @alias module:model/LinkPersonaRequest
     */
    constructor() { 
        
        LinkPersonaRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkPersonaRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkPersonaRequest} obj Optional instance to populate.
     * @return {module:model/LinkPersonaRequest} The populated <code>LinkPersonaRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkPersonaRequest();

            if (data.hasOwnProperty('cardinalityConstraint')) {
                obj['cardinalityConstraint'] = ApiClient.convertToType(data['cardinalityConstraint'], 'String');
            }
            if (data.hasOwnProperty('conflictingLinksResolutionPolicy')) {
                obj['conflictingLinksResolutionPolicy'] = ApiClient.convertToType(data['conflictingLinksResolutionPolicy'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('persona')) {
                obj['persona'] = ApiClient.convertToType(data['persona'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkPersonaRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkPersonaRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardinalityConstraint'] && !(typeof data['cardinalityConstraint'] === 'string' || data['cardinalityConstraint'] instanceof String)) {
            throw new Error("Expected the field `cardinalityConstraint` to be a primitive type in the JSON string but got " + data['cardinalityConstraint']);
        }
        // ensure the json data is a string
        if (data['conflictingLinksResolutionPolicy'] && !(typeof data['conflictingLinksResolutionPolicy'] === 'string' || data['conflictingLinksResolutionPolicy'] instanceof String)) {
            throw new Error("Expected the field `conflictingLinksResolutionPolicy` to be a primitive type in the JSON string but got " + data['conflictingLinksResolutionPolicy']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['persona'] && !(typeof data['persona'] === 'string' || data['persona'] instanceof String)) {
            throw new Error("Expected the field `persona` to be a primitive type in the JSON string but got " + data['persona']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.
 * @member {module:model/LinkPersonaRequest.CardinalityConstraintEnum} cardinalityConstraint
 */
LinkPersonaRequest.prototype['cardinalityConstraint'] = undefined;

/**
 * Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.
 * @member {module:model/LinkPersonaRequest.ConflictingLinksResolutionPolicyEnum} conflictingLinksResolutionPolicy
 */
LinkPersonaRequest.prototype['conflictingLinksResolutionPolicy'] = undefined;

/**
 * Input only. Optional expiration time.
 * @member {String} expireTime
 */
LinkPersonaRequest.prototype['expireTime'] = undefined;

/**
 * Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.
 * @member {String} persona
 */
LinkPersonaRequest.prototype['persona'] = undefined;

/**
 * Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.
 * @member {String} sessionId
 */
LinkPersonaRequest.prototype['sessionId'] = undefined;

/**
 * Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).
 * @member {String} token
 */
LinkPersonaRequest.prototype['token'] = undefined;

/**
 * Input only. Optional time-to-live.
 * @member {String} ttl
 */
LinkPersonaRequest.prototype['ttl'] = undefined;





/**
 * Allowed values for the <code>cardinalityConstraint</code> property.
 * @enum {String}
 * @readonly
 */
LinkPersonaRequest['CardinalityConstraintEnum'] = {

    /**
     * value: "ONE_PERSONA_TO_ONE_PLAYER"
     * @const
     */
    "ONE_PERSONA_TO_ONE_PLAYER": "ONE_PERSONA_TO_ONE_PLAYER"
};


/**
 * Allowed values for the <code>conflictingLinksResolutionPolicy</code> property.
 * @enum {String}
 * @readonly
 */
LinkPersonaRequest['ConflictingLinksResolutionPolicyEnum'] = {

    /**
     * value: "KEEP_EXISTING_LINKS"
     * @const
     */
    "KEEP_EXISTING_LINKS": "KEEP_EXISTING_LINKS",

    /**
     * value: "CREATE_NEW_LINK"
     * @const
     */
    "CREATE_NEW_LINK": "CREATE_NEW_LINK"
};



export default LinkPersonaRequest;

