/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerExperienceInfo from './PlayerExperienceInfo';
import PlayerName from './PlayerName';
import ProfileSettings from './ProfileSettings';

/**
 * The Player model module.
 * @module model/Player
 * @version v1
 */
class Player {
    /**
     * Constructs a new <code>Player</code>.
     * A Player resource.
     * @alias module:model/Player
     */
    constructor() { 
        
        Player.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Player</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Player} obj Optional instance to populate.
     * @return {module:model/Player} The populated <code>Player</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Player();

            if (data.hasOwnProperty('avatarImageUrl')) {
                obj['avatarImageUrl'] = ApiClient.convertToType(data['avatarImageUrl'], 'String');
            }
            if (data.hasOwnProperty('bannerUrlLandscape')) {
                obj['bannerUrlLandscape'] = ApiClient.convertToType(data['bannerUrlLandscape'], 'String');
            }
            if (data.hasOwnProperty('bannerUrlPortrait')) {
                obj['bannerUrlPortrait'] = ApiClient.convertToType(data['bannerUrlPortrait'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('experienceInfo')) {
                obj['experienceInfo'] = PlayerExperienceInfo.constructFromObject(data['experienceInfo']);
            }
            if (data.hasOwnProperty('friendStatus')) {
                obj['friendStatus'] = ApiClient.convertToType(data['friendStatus'], 'String');
            }
            if (data.hasOwnProperty('gamePlayerId')) {
                obj['gamePlayerId'] = ApiClient.convertToType(data['gamePlayerId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = PlayerName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('originalPlayerId')) {
                obj['originalPlayerId'] = ApiClient.convertToType(data['originalPlayerId'], 'String');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('profileSettings')) {
                obj['profileSettings'] = ProfileSettings.constructFromObject(data['profileSettings']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Player</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Player</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatarImageUrl'] && !(typeof data['avatarImageUrl'] === 'string' || data['avatarImageUrl'] instanceof String)) {
            throw new Error("Expected the field `avatarImageUrl` to be a primitive type in the JSON string but got " + data['avatarImageUrl']);
        }
        // ensure the json data is a string
        if (data['bannerUrlLandscape'] && !(typeof data['bannerUrlLandscape'] === 'string' || data['bannerUrlLandscape'] instanceof String)) {
            throw new Error("Expected the field `bannerUrlLandscape` to be a primitive type in the JSON string but got " + data['bannerUrlLandscape']);
        }
        // ensure the json data is a string
        if (data['bannerUrlPortrait'] && !(typeof data['bannerUrlPortrait'] === 'string' || data['bannerUrlPortrait'] instanceof String)) {
            throw new Error("Expected the field `bannerUrlPortrait` to be a primitive type in the JSON string but got " + data['bannerUrlPortrait']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `experienceInfo`
        if (data['experienceInfo']) { // data not null
          PlayerExperienceInfo.validateJSON(data['experienceInfo']);
        }
        // ensure the json data is a string
        if (data['friendStatus'] && !(typeof data['friendStatus'] === 'string' || data['friendStatus'] instanceof String)) {
            throw new Error("Expected the field `friendStatus` to be a primitive type in the JSON string but got " + data['friendStatus']);
        }
        // ensure the json data is a string
        if (data['gamePlayerId'] && !(typeof data['gamePlayerId'] === 'string' || data['gamePlayerId'] instanceof String)) {
            throw new Error("Expected the field `gamePlayerId` to be a primitive type in the JSON string but got " + data['gamePlayerId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          PlayerName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['originalPlayerId'] && !(typeof data['originalPlayerId'] === 'string' || data['originalPlayerId'] instanceof String)) {
            throw new Error("Expected the field `originalPlayerId` to be a primitive type in the JSON string but got " + data['originalPlayerId']);
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }
        // validate the optional field `profileSettings`
        if (data['profileSettings']) { // data not null
          ProfileSettings.validateJSON(data['profileSettings']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The base URL for the image that represents the player.
 * @member {String} avatarImageUrl
 */
Player.prototype['avatarImageUrl'] = undefined;

/**
 * The url to the landscape mode player banner image.
 * @member {String} bannerUrlLandscape
 */
Player.prototype['bannerUrlLandscape'] = undefined;

/**
 * The url to the portrait mode player banner image.
 * @member {String} bannerUrlPortrait
 */
Player.prototype['bannerUrlPortrait'] = undefined;

/**
 * The name to display for the player.
 * @member {String} displayName
 */
Player.prototype['displayName'] = undefined;

/**
 * @member {module:model/PlayerExperienceInfo} experienceInfo
 */
Player.prototype['experienceInfo'] = undefined;

/**
 * The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.
 * @member {module:model/Player.FriendStatusEnum} friendStatus
 */
Player.prototype['friendStatus'] = undefined;

/**
 * Per-application unique player identifier.
 * @member {String} gamePlayerId
 */
Player.prototype['gamePlayerId'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#player`
 * @member {String} kind
 */
Player.prototype['kind'] = undefined;

/**
 * @member {module:model/PlayerName} name
 */
Player.prototype['name'] = undefined;

/**
 * The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
 * @member {String} originalPlayerId
 */
Player.prototype['originalPlayerId'] = undefined;

/**
 * The ID of the player.
 * @member {String} playerId
 */
Player.prototype['playerId'] = undefined;

/**
 * @member {module:model/ProfileSettings} profileSettings
 */
Player.prototype['profileSettings'] = undefined;

/**
 * The player's title rewarded for their game activities.
 * @member {String} title
 */
Player.prototype['title'] = undefined;





/**
 * Allowed values for the <code>friendStatus</code> property.
 * @enum {String}
 * @readonly
 */
Player['FriendStatusEnum'] = {

    /**
     * value: "NO_RELATIONSHIP"
     * @const
     */
    "NO_RELATIONSHIP": "NO_RELATIONSHIP",

    /**
     * value: "FRIEND"
     * @const
     */
    "FRIEND": "FRIEND"
};



export default Player;

