/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationCategory from './ApplicationCategory';
import ImageAsset from './ImageAsset';
import Instance from './Instance';

/**
 * The Application model module.
 * @module model/Application
 * @version v1
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * The Application resource.
     * @alias module:model/Application
     */
    constructor() { 
        
        Application.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('achievement_count')) {
                obj['achievement_count'] = ApiClient.convertToType(data['achievement_count'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], [ImageAsset]);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApplicationCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabledFeatures')) {
                obj['enabledFeatures'] = ApiClient.convertToType(data['enabledFeatures'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [Instance]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedTimestamp')) {
                obj['lastUpdatedTimestamp'] = ApiClient.convertToType(data['lastUpdatedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('leaderboard_count')) {
                obj['leaderboard_count'] = ApiClient.convertToType(data['leaderboard_count'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('themeColor')) {
                obj['themeColor'] = ApiClient.convertToType(data['themeColor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Application</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Application</code>.
     */
    static validateJSON(data) {
        if (data['assets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assets'])) {
                throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
            }
            // validate the optional field `assets` (array)
            for (const item of data['assets']) {
                ImageAsset.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          ApplicationCategory.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enabledFeatures'])) {
            throw new Error("Expected the field `enabledFeatures` to be an array in the JSON data but got " + data['enabledFeatures']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                Instance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['lastUpdatedTimestamp'] && !(typeof data['lastUpdatedTimestamp'] === 'string' || data['lastUpdatedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `lastUpdatedTimestamp` to be a primitive type in the JSON string but got " + data['lastUpdatedTimestamp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['themeColor'] && !(typeof data['themeColor'] === 'string' || data['themeColor'] instanceof String)) {
            throw new Error("Expected the field `themeColor` to be a primitive type in the JSON string but got " + data['themeColor']);
        }

        return true;
    }


}



/**
 * The number of achievements visible to the currently authenticated player.
 * @member {Number} achievement_count
 */
Application.prototype['achievement_count'] = undefined;

/**
 * The assets of the application.
 * @member {Array.<module:model/ImageAsset>} assets
 */
Application.prototype['assets'] = undefined;

/**
 * The author of the application.
 * @member {String} author
 */
Application.prototype['author'] = undefined;

/**
 * @member {module:model/ApplicationCategory} category
 */
Application.prototype['category'] = undefined;

/**
 * The description of the application.
 * @member {String} description
 */
Application.prototype['description'] = undefined;

/**
 * A list of features that have been enabled for the application.
 * @member {Array.<module:model/Application.EnabledFeaturesEnum>} enabledFeatures
 */
Application.prototype['enabledFeatures'] = undefined;

/**
 * The ID of the application.
 * @member {String} id
 */
Application.prototype['id'] = undefined;

/**
 * The instances of the application.
 * @member {Array.<module:model/Instance>} instances
 */
Application.prototype['instances'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.
 * @member {String} kind
 */
Application.prototype['kind'] = undefined;

/**
 * The last updated timestamp of the application.
 * @member {String} lastUpdatedTimestamp
 */
Application.prototype['lastUpdatedTimestamp'] = undefined;

/**
 * The number of leaderboards visible to the currently authenticated player.
 * @member {Number} leaderboard_count
 */
Application.prototype['leaderboard_count'] = undefined;

/**
 * The name of the application.
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \"E0E0E0\").
 * @member {String} themeColor
 */
Application.prototype['themeColor'] = undefined;





/**
 * Allowed values for the <code>enabledFeatures</code> property.
 * @enum {String}
 * @readonly
 */
Application['EnabledFeaturesEnum'] = {

    /**
     * value: "SNAPSHOTS"
     * @const
     */
    "SNAPSHOTS": "SNAPSHOTS"
};



export default Application;

