/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayerAchievement model module.
 * @module model/PlayerAchievement
 * @version v1
 */
class PlayerAchievement {
    /**
     * Constructs a new <code>PlayerAchievement</code>.
     * An achievement object.
     * @alias module:model/PlayerAchievement
     */
    constructor() { 
        
        PlayerAchievement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerAchievement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerAchievement} obj Optional instance to populate.
     * @return {module:model/PlayerAchievement} The populated <code>PlayerAchievement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerAchievement();

            if (data.hasOwnProperty('achievementState')) {
                obj['achievementState'] = ApiClient.convertToType(data['achievementState'], 'String');
            }
            if (data.hasOwnProperty('currentSteps')) {
                obj['currentSteps'] = ApiClient.convertToType(data['currentSteps'], 'Number');
            }
            if (data.hasOwnProperty('experiencePoints')) {
                obj['experiencePoints'] = ApiClient.convertToType(data['experiencePoints'], 'String');
            }
            if (data.hasOwnProperty('formattedCurrentStepsString')) {
                obj['formattedCurrentStepsString'] = ApiClient.convertToType(data['formattedCurrentStepsString'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedTimestamp')) {
                obj['lastUpdatedTimestamp'] = ApiClient.convertToType(data['lastUpdatedTimestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerAchievement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerAchievement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['achievementState'] && !(typeof data['achievementState'] === 'string' || data['achievementState'] instanceof String)) {
            throw new Error("Expected the field `achievementState` to be a primitive type in the JSON string but got " + data['achievementState']);
        }
        // ensure the json data is a string
        if (data['experiencePoints'] && !(typeof data['experiencePoints'] === 'string' || data['experiencePoints'] instanceof String)) {
            throw new Error("Expected the field `experiencePoints` to be a primitive type in the JSON string but got " + data['experiencePoints']);
        }
        // ensure the json data is a string
        if (data['formattedCurrentStepsString'] && !(typeof data['formattedCurrentStepsString'] === 'string' || data['formattedCurrentStepsString'] instanceof String)) {
            throw new Error("Expected the field `formattedCurrentStepsString` to be a primitive type in the JSON string but got " + data['formattedCurrentStepsString']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['lastUpdatedTimestamp'] && !(typeof data['lastUpdatedTimestamp'] === 'string' || data['lastUpdatedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `lastUpdatedTimestamp` to be a primitive type in the JSON string but got " + data['lastUpdatedTimestamp']);
        }

        return true;
    }


}



/**
 * The state of the achievement.
 * @member {module:model/PlayerAchievement.AchievementStateEnum} achievementState
 */
PlayerAchievement.prototype['achievementState'] = undefined;

/**
 * The current steps for an incremental achievement.
 * @member {Number} currentSteps
 */
PlayerAchievement.prototype['currentSteps'] = undefined;

/**
 * Experience points earned for the achievement. This field is absent for achievements that have not yet been unlocked and 0 for achievements that have been unlocked by testers but that are unpublished.
 * @member {String} experiencePoints
 */
PlayerAchievement.prototype['experiencePoints'] = undefined;

/**
 * The current steps for an incremental achievement as a string.
 * @member {String} formattedCurrentStepsString
 */
PlayerAchievement.prototype['formattedCurrentStepsString'] = undefined;

/**
 * The ID of the achievement.
 * @member {String} id
 */
PlayerAchievement.prototype['id'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerAchievement`.
 * @member {String} kind
 */
PlayerAchievement.prototype['kind'] = undefined;

/**
 * The timestamp of the last modification to this achievement's state.
 * @member {String} lastUpdatedTimestamp
 */
PlayerAchievement.prototype['lastUpdatedTimestamp'] = undefined;





/**
 * Allowed values for the <code>achievementState</code> property.
 * @enum {String}
 * @readonly
 */
PlayerAchievement['AchievementStateEnum'] = {

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN",

    /**
     * value: "REVEALED"
     * @const
     */
    "REVEALED": "REVEALED",

    /**
     * value: "UNLOCKED"
     * @const
     */
    "UNLOCKED": "UNLOCKED"
};



export default PlayerAchievement;

