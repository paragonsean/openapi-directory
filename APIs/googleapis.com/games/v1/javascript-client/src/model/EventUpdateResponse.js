/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventBatchRecordFailure from './EventBatchRecordFailure';
import EventRecordFailure from './EventRecordFailure';
import PlayerEvent from './PlayerEvent';

/**
 * The EventUpdateResponse model module.
 * @module model/EventUpdateResponse
 * @version v1
 */
class EventUpdateResponse {
    /**
     * Constructs a new <code>EventUpdateResponse</code>.
     * An event period update resource.
     * @alias module:model/EventUpdateResponse
     */
    constructor() { 
        
        EventUpdateResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventUpdateResponse} obj Optional instance to populate.
     * @return {module:model/EventUpdateResponse} The populated <code>EventUpdateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventUpdateResponse();

            if (data.hasOwnProperty('batchFailures')) {
                obj['batchFailures'] = ApiClient.convertToType(data['batchFailures'], [EventBatchRecordFailure]);
            }
            if (data.hasOwnProperty('eventFailures')) {
                obj['eventFailures'] = ApiClient.convertToType(data['eventFailures'], [EventRecordFailure]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('playerEvents')) {
                obj['playerEvents'] = ApiClient.convertToType(data['playerEvents'], [PlayerEvent]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventUpdateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventUpdateResponse</code>.
     */
    static validateJSON(data) {
        if (data['batchFailures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['batchFailures'])) {
                throw new Error("Expected the field `batchFailures` to be an array in the JSON data but got " + data['batchFailures']);
            }
            // validate the optional field `batchFailures` (array)
            for (const item of data['batchFailures']) {
                EventBatchRecordFailure.validateJSON(item);
            };
        }
        if (data['eventFailures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventFailures'])) {
                throw new Error("Expected the field `eventFailures` to be an array in the JSON data but got " + data['eventFailures']);
            }
            // validate the optional field `eventFailures` (array)
            for (const item of data['eventFailures']) {
                EventRecordFailure.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['playerEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['playerEvents'])) {
                throw new Error("Expected the field `playerEvents` to be an array in the JSON data but got " + data['playerEvents']);
            }
            // validate the optional field `playerEvents` (array)
            for (const item of data['playerEvents']) {
                PlayerEvent.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Any batch-wide failures which occurred applying updates.
 * @member {Array.<module:model/EventBatchRecordFailure>} batchFailures
 */
EventUpdateResponse.prototype['batchFailures'] = undefined;

/**
 * Any failures updating a particular event.
 * @member {Array.<module:model/EventRecordFailure>} eventFailures
 */
EventUpdateResponse.prototype['eventFailures'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#eventUpdateResponse`.
 * @member {String} kind
 */
EventUpdateResponse.prototype['kind'] = undefined;

/**
 * The current status of any updated events
 * @member {Array.<module:model/PlayerEvent>} playerEvents
 */
EventUpdateResponse.prototype['playerEvents'] = undefined;






export default EventUpdateResponse;

