/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Player from './Player';

/**
 * The LeaderboardEntry model module.
 * @module model/LeaderboardEntry
 * @version v1
 */
class LeaderboardEntry {
    /**
     * Constructs a new <code>LeaderboardEntry</code>.
     * The Leaderboard Entry resource.
     * @alias module:model/LeaderboardEntry
     */
    constructor() { 
        
        LeaderboardEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeaderboardEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeaderboardEntry} obj Optional instance to populate.
     * @return {module:model/LeaderboardEntry} The populated <code>LeaderboardEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaderboardEntry();

            if (data.hasOwnProperty('formattedScore')) {
                obj['formattedScore'] = ApiClient.convertToType(data['formattedScore'], 'String');
            }
            if (data.hasOwnProperty('formattedScoreRank')) {
                obj['formattedScoreRank'] = ApiClient.convertToType(data['formattedScoreRank'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('player')) {
                obj['player'] = Player.constructFromObject(data['player']);
            }
            if (data.hasOwnProperty('scoreRank')) {
                obj['scoreRank'] = ApiClient.convertToType(data['scoreRank'], 'String');
            }
            if (data.hasOwnProperty('scoreTag')) {
                obj['scoreTag'] = ApiClient.convertToType(data['scoreTag'], 'String');
            }
            if (data.hasOwnProperty('scoreValue')) {
                obj['scoreValue'] = ApiClient.convertToType(data['scoreValue'], 'String');
            }
            if (data.hasOwnProperty('timeSpan')) {
                obj['timeSpan'] = ApiClient.convertToType(data['timeSpan'], 'String');
            }
            if (data.hasOwnProperty('writeTimestampMillis')) {
                obj['writeTimestampMillis'] = ApiClient.convertToType(data['writeTimestampMillis'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaderboardEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaderboardEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formattedScore'] && !(typeof data['formattedScore'] === 'string' || data['formattedScore'] instanceof String)) {
            throw new Error("Expected the field `formattedScore` to be a primitive type in the JSON string but got " + data['formattedScore']);
        }
        // ensure the json data is a string
        if (data['formattedScoreRank'] && !(typeof data['formattedScoreRank'] === 'string' || data['formattedScoreRank'] instanceof String)) {
            throw new Error("Expected the field `formattedScoreRank` to be a primitive type in the JSON string but got " + data['formattedScoreRank']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `player`
        if (data['player']) { // data not null
          Player.validateJSON(data['player']);
        }
        // ensure the json data is a string
        if (data['scoreRank'] && !(typeof data['scoreRank'] === 'string' || data['scoreRank'] instanceof String)) {
            throw new Error("Expected the field `scoreRank` to be a primitive type in the JSON string but got " + data['scoreRank']);
        }
        // ensure the json data is a string
        if (data['scoreTag'] && !(typeof data['scoreTag'] === 'string' || data['scoreTag'] instanceof String)) {
            throw new Error("Expected the field `scoreTag` to be a primitive type in the JSON string but got " + data['scoreTag']);
        }
        // ensure the json data is a string
        if (data['scoreValue'] && !(typeof data['scoreValue'] === 'string' || data['scoreValue'] instanceof String)) {
            throw new Error("Expected the field `scoreValue` to be a primitive type in the JSON string but got " + data['scoreValue']);
        }
        // ensure the json data is a string
        if (data['timeSpan'] && !(typeof data['timeSpan'] === 'string' || data['timeSpan'] instanceof String)) {
            throw new Error("Expected the field `timeSpan` to be a primitive type in the JSON string but got " + data['timeSpan']);
        }
        // ensure the json data is a string
        if (data['writeTimestampMillis'] && !(typeof data['writeTimestampMillis'] === 'string' || data['writeTimestampMillis'] instanceof String)) {
            throw new Error("Expected the field `writeTimestampMillis` to be a primitive type in the JSON string but got " + data['writeTimestampMillis']);
        }

        return true;
    }


}



/**
 * The localized string for the numerical value of this score.
 * @member {String} formattedScore
 */
LeaderboardEntry.prototype['formattedScore'] = undefined;

/**
 * The localized string for the rank of this score for this leaderboard.
 * @member {String} formattedScoreRank
 */
LeaderboardEntry.prototype['formattedScoreRank'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboardEntry`.
 * @member {String} kind
 */
LeaderboardEntry.prototype['kind'] = undefined;

/**
 * @member {module:model/Player} player
 */
LeaderboardEntry.prototype['player'] = undefined;

/**
 * The rank of this score for this leaderboard.
 * @member {String} scoreRank
 */
LeaderboardEntry.prototype['scoreRank'] = undefined;

/**
 * Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
 * @member {String} scoreTag
 */
LeaderboardEntry.prototype['scoreTag'] = undefined;

/**
 * The numerical value of this score.
 * @member {String} scoreValue
 */
LeaderboardEntry.prototype['scoreValue'] = undefined;

/**
 * The time span of this high score.
 * @member {module:model/LeaderboardEntry.TimeSpanEnum} timeSpan
 */
LeaderboardEntry.prototype['timeSpan'] = undefined;

/**
 * The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
 * @member {String} writeTimestampMillis
 */
LeaderboardEntry.prototype['writeTimestampMillis'] = undefined;





/**
 * Allowed values for the <code>timeSpan</code> property.
 * @enum {String}
 * @readonly
 */
LeaderboardEntry['TimeSpanEnum'] = {

    /**
     * value: "ALL_TIME"
     * @const
     */
    "ALL_TIME": "ALL_TIME",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default LeaderboardEntry;

