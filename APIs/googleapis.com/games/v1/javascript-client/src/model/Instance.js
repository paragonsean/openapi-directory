/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceAndroidDetails from './InstanceAndroidDetails';
import InstanceIosDetails from './InstanceIosDetails';
import InstanceWebDetails from './InstanceWebDetails';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * The Instance resource.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('acquisitionUri')) {
                obj['acquisitionUri'] = ApiClient.convertToType(data['acquisitionUri'], 'String');
            }
            if (data.hasOwnProperty('androidInstance')) {
                obj['androidInstance'] = InstanceAndroidDetails.constructFromObject(data['androidInstance']);
            }
            if (data.hasOwnProperty('iosInstance')) {
                obj['iosInstance'] = InstanceIosDetails.constructFromObject(data['iosInstance']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platformType')) {
                obj['platformType'] = ApiClient.convertToType(data['platformType'], 'String');
            }
            if (data.hasOwnProperty('realtimePlay')) {
                obj['realtimePlay'] = ApiClient.convertToType(data['realtimePlay'], 'Boolean');
            }
            if (data.hasOwnProperty('turnBasedPlay')) {
                obj['turnBasedPlay'] = ApiClient.convertToType(data['turnBasedPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('webInstance')) {
                obj['webInstance'] = InstanceWebDetails.constructFromObject(data['webInstance']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquisitionUri'] && !(typeof data['acquisitionUri'] === 'string' || data['acquisitionUri'] instanceof String)) {
            throw new Error("Expected the field `acquisitionUri` to be a primitive type in the JSON string but got " + data['acquisitionUri']);
        }
        // validate the optional field `androidInstance`
        if (data['androidInstance']) { // data not null
          InstanceAndroidDetails.validateJSON(data['androidInstance']);
        }
        // validate the optional field `iosInstance`
        if (data['iosInstance']) { // data not null
          InstanceIosDetails.validateJSON(data['iosInstance']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['platformType'] && !(typeof data['platformType'] === 'string' || data['platformType'] instanceof String)) {
            throw new Error("Expected the field `platformType` to be a primitive type in the JSON string but got " + data['platformType']);
        }
        // validate the optional field `webInstance`
        if (data['webInstance']) { // data not null
          InstanceWebDetails.validateJSON(data['webInstance']);
        }

        return true;
    }


}



/**
 * URI which shows where a user can acquire this instance.
 * @member {String} acquisitionUri
 */
Instance.prototype['acquisitionUri'] = undefined;

/**
 * @member {module:model/InstanceAndroidDetails} androidInstance
 */
Instance.prototype['androidInstance'] = undefined;

/**
 * @member {module:model/InstanceIosDetails} iosInstance
 */
Instance.prototype['iosInstance'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.
 * @member {String} kind
 */
Instance.prototype['kind'] = undefined;

/**
 * Localized display name.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * The platform type.
 * @member {module:model/Instance.PlatformTypeEnum} platformType
 */
Instance.prototype['platformType'] = undefined;

/**
 * Flag to show if this game instance supports realtime play.
 * @member {Boolean} realtimePlay
 */
Instance.prototype['realtimePlay'] = undefined;

/**
 * Flag to show if this game instance supports turn based play.
 * @member {Boolean} turnBasedPlay
 */
Instance.prototype['turnBasedPlay'] = undefined;

/**
 * @member {module:model/InstanceWebDetails} webInstance
 */
Instance.prototype['webInstance'] = undefined;





/**
 * Allowed values for the <code>platformType</code> property.
 * @enum {String}
 * @readonly
 */
Instance['PlatformTypeEnum'] = {

    /**
     * value: "ANDROID"
     * @const
     */
    "ANDROID": "ANDROID",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "WEB_APP"
     * @const
     */
    "WEB_APP": "WEB_APP"
};



export default Instance;

