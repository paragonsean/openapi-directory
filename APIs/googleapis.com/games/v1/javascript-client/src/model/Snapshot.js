/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SnapshotImage from './SnapshotImage';

/**
 * The Snapshot model module.
 * @module model/Snapshot
 * @version v1
 */
class Snapshot {
    /**
     * Constructs a new <code>Snapshot</code>.
     * An snapshot object.
     * @alias module:model/Snapshot
     */
    constructor() { 
        
        Snapshot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Snapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snapshot} obj Optional instance to populate.
     * @return {module:model/Snapshot} The populated <code>Snapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snapshot();

            if (data.hasOwnProperty('coverImage')) {
                obj['coverImage'] = SnapshotImage.constructFromObject(data['coverImage']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('driveId')) {
                obj['driveId'] = ApiClient.convertToType(data['driveId'], 'String');
            }
            if (data.hasOwnProperty('durationMillis')) {
                obj['durationMillis'] = ApiClient.convertToType(data['durationMillis'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedMillis')) {
                obj['lastModifiedMillis'] = ApiClient.convertToType(data['lastModifiedMillis'], 'String');
            }
            if (data.hasOwnProperty('progressValue')) {
                obj['progressValue'] = ApiClient.convertToType(data['progressValue'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uniqueName')) {
                obj['uniqueName'] = ApiClient.convertToType(data['uniqueName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snapshot</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coverImage`
        if (data['coverImage']) { // data not null
          SnapshotImage.validateJSON(data['coverImage']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['driveId'] && !(typeof data['driveId'] === 'string' || data['driveId'] instanceof String)) {
            throw new Error("Expected the field `driveId` to be a primitive type in the JSON string but got " + data['driveId']);
        }
        // ensure the json data is a string
        if (data['durationMillis'] && !(typeof data['durationMillis'] === 'string' || data['durationMillis'] instanceof String)) {
            throw new Error("Expected the field `durationMillis` to be a primitive type in the JSON string but got " + data['durationMillis']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['lastModifiedMillis'] && !(typeof data['lastModifiedMillis'] === 'string' || data['lastModifiedMillis'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedMillis` to be a primitive type in the JSON string but got " + data['lastModifiedMillis']);
        }
        // ensure the json data is a string
        if (data['progressValue'] && !(typeof data['progressValue'] === 'string' || data['progressValue'] instanceof String)) {
            throw new Error("Expected the field `progressValue` to be a primitive type in the JSON string but got " + data['progressValue']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uniqueName'] && !(typeof data['uniqueName'] === 'string' || data['uniqueName'] instanceof String)) {
            throw new Error("Expected the field `uniqueName` to be a primitive type in the JSON string but got " + data['uniqueName']);
        }

        return true;
    }


}



/**
 * @member {module:model/SnapshotImage} coverImage
 */
Snapshot.prototype['coverImage'] = undefined;

/**
 * The description of this snapshot.
 * @member {String} description
 */
Snapshot.prototype['description'] = undefined;

/**
 * The ID of the file underlying this snapshot in the Drive API. Only present if the snapshot is a view on a Drive file and the file is owned by the caller.
 * @member {String} driveId
 */
Snapshot.prototype['driveId'] = undefined;

/**
 * The duration associated with this snapshot, in millis.
 * @member {String} durationMillis
 */
Snapshot.prototype['durationMillis'] = undefined;

/**
 * The ID of the snapshot.
 * @member {String} id
 */
Snapshot.prototype['id'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#snapshot`.
 * @member {String} kind
 */
Snapshot.prototype['kind'] = undefined;

/**
 * The timestamp (in millis since Unix epoch) of the last modification to this snapshot.
 * @member {String} lastModifiedMillis
 */
Snapshot.prototype['lastModifiedMillis'] = undefined;

/**
 * The progress value (64-bit integer set by developer) associated with this snapshot.
 * @member {String} progressValue
 */
Snapshot.prototype['progressValue'] = undefined;

/**
 * The title of this snapshot.
 * @member {String} title
 */
Snapshot.prototype['title'] = undefined;

/**
 * The type of this snapshot.
 * @member {module:model/Snapshot.TypeEnum} type
 */
Snapshot.prototype['type'] = undefined;

/**
 * The unique name provided when the snapshot was created.
 * @member {String} uniqueName
 */
Snapshot.prototype['uniqueName'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Snapshot['TypeEnum'] = {

    /**
     * value: "SAVE_GAME"
     * @const
     */
    "SAVE_GAME": "SAVE_GAME"
};



export default Snapshot;

