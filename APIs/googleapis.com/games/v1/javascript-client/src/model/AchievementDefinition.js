/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AchievementDefinition model module.
 * @module model/AchievementDefinition
 * @version v1
 */
class AchievementDefinition {
    /**
     * Constructs a new <code>AchievementDefinition</code>.
     * An achievement definition object.
     * @alias module:model/AchievementDefinition
     */
    constructor() { 
        
        AchievementDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AchievementDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchievementDefinition} obj Optional instance to populate.
     * @return {module:model/AchievementDefinition} The populated <code>AchievementDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchievementDefinition();

            if (data.hasOwnProperty('achievementType')) {
                obj['achievementType'] = ApiClient.convertToType(data['achievementType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('experiencePoints')) {
                obj['experiencePoints'] = ApiClient.convertToType(data['experiencePoints'], 'String');
            }
            if (data.hasOwnProperty('formattedTotalSteps')) {
                obj['formattedTotalSteps'] = ApiClient.convertToType(data['formattedTotalSteps'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('initialState')) {
                obj['initialState'] = ApiClient.convertToType(data['initialState'], 'String');
            }
            if (data.hasOwnProperty('isRevealedIconUrlDefault')) {
                obj['isRevealedIconUrlDefault'] = ApiClient.convertToType(data['isRevealedIconUrlDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isUnlockedIconUrlDefault')) {
                obj['isUnlockedIconUrlDefault'] = ApiClient.convertToType(data['isUnlockedIconUrlDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('revealedIconUrl')) {
                obj['revealedIconUrl'] = ApiClient.convertToType(data['revealedIconUrl'], 'String');
            }
            if (data.hasOwnProperty('totalSteps')) {
                obj['totalSteps'] = ApiClient.convertToType(data['totalSteps'], 'Number');
            }
            if (data.hasOwnProperty('unlockedIconUrl')) {
                obj['unlockedIconUrl'] = ApiClient.convertToType(data['unlockedIconUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AchievementDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AchievementDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['achievementType'] && !(typeof data['achievementType'] === 'string' || data['achievementType'] instanceof String)) {
            throw new Error("Expected the field `achievementType` to be a primitive type in the JSON string but got " + data['achievementType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['experiencePoints'] && !(typeof data['experiencePoints'] === 'string' || data['experiencePoints'] instanceof String)) {
            throw new Error("Expected the field `experiencePoints` to be a primitive type in the JSON string but got " + data['experiencePoints']);
        }
        // ensure the json data is a string
        if (data['formattedTotalSteps'] && !(typeof data['formattedTotalSteps'] === 'string' || data['formattedTotalSteps'] instanceof String)) {
            throw new Error("Expected the field `formattedTotalSteps` to be a primitive type in the JSON string but got " + data['formattedTotalSteps']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['initialState'] && !(typeof data['initialState'] === 'string' || data['initialState'] instanceof String)) {
            throw new Error("Expected the field `initialState` to be a primitive type in the JSON string but got " + data['initialState']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['revealedIconUrl'] && !(typeof data['revealedIconUrl'] === 'string' || data['revealedIconUrl'] instanceof String)) {
            throw new Error("Expected the field `revealedIconUrl` to be a primitive type in the JSON string but got " + data['revealedIconUrl']);
        }
        // ensure the json data is a string
        if (data['unlockedIconUrl'] && !(typeof data['unlockedIconUrl'] === 'string' || data['unlockedIconUrl'] instanceof String)) {
            throw new Error("Expected the field `unlockedIconUrl` to be a primitive type in the JSON string but got " + data['unlockedIconUrl']);
        }

        return true;
    }


}



/**
 * The type of the achievement.
 * @member {module:model/AchievementDefinition.AchievementTypeEnum} achievementType
 */
AchievementDefinition.prototype['achievementType'] = undefined;

/**
 * The description of the achievement.
 * @member {String} description
 */
AchievementDefinition.prototype['description'] = undefined;

/**
 * Experience points which will be earned when unlocking this achievement.
 * @member {String} experiencePoints
 */
AchievementDefinition.prototype['experiencePoints'] = undefined;

/**
 * The total steps for an incremental achievement as a string.
 * @member {String} formattedTotalSteps
 */
AchievementDefinition.prototype['formattedTotalSteps'] = undefined;

/**
 * The ID of the achievement.
 * @member {String} id
 */
AchievementDefinition.prototype['id'] = undefined;

/**
 * The initial state of the achievement.
 * @member {module:model/AchievementDefinition.InitialStateEnum} initialState
 */
AchievementDefinition.prototype['initialState'] = undefined;

/**
 * Indicates whether the revealed icon image being returned is a default image, or is provided by the game.
 * @member {Boolean} isRevealedIconUrlDefault
 */
AchievementDefinition.prototype['isRevealedIconUrlDefault'] = undefined;

/**
 * Indicates whether the unlocked icon image being returned is a default image, or is game-provided.
 * @member {Boolean} isUnlockedIconUrlDefault
 */
AchievementDefinition.prototype['isUnlockedIconUrlDefault'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementDefinition`.
 * @member {String} kind
 */
AchievementDefinition.prototype['kind'] = undefined;

/**
 * The name of the achievement.
 * @member {String} name
 */
AchievementDefinition.prototype['name'] = undefined;

/**
 * The image URL for the revealed achievement icon.
 * @member {String} revealedIconUrl
 */
AchievementDefinition.prototype['revealedIconUrl'] = undefined;

/**
 * The total steps for an incremental achievement.
 * @member {Number} totalSteps
 */
AchievementDefinition.prototype['totalSteps'] = undefined;

/**
 * The image URL for the unlocked achievement icon.
 * @member {String} unlockedIconUrl
 */
AchievementDefinition.prototype['unlockedIconUrl'] = undefined;





/**
 * Allowed values for the <code>achievementType</code> property.
 * @enum {String}
 * @readonly
 */
AchievementDefinition['AchievementTypeEnum'] = {

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "INCREMENTAL"
     * @const
     */
    "INCREMENTAL": "INCREMENTAL"
};


/**
 * Allowed values for the <code>initialState</code> property.
 * @enum {String}
 * @readonly
 */
AchievementDefinition['InitialStateEnum'] = {

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN",

    /**
     * value: "REVEALED"
     * @const
     */
    "REVEALED": "REVEALED",

    /**
     * value: "UNLOCKED"
     * @const
     */
    "UNLOCKED": "UNLOCKED"
};



export default AchievementDefinition;

