/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LeaderboardScoreRank from './LeaderboardScoreRank';

/**
 * The PlayerLeaderboardScore model module.
 * @module model/PlayerLeaderboardScore
 * @version v1
 */
class PlayerLeaderboardScore {
    /**
     * Constructs a new <code>PlayerLeaderboardScore</code>.
     * A player leaderboard score object.
     * @alias module:model/PlayerLeaderboardScore
     */
    constructor() { 
        
        PlayerLeaderboardScore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerLeaderboardScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerLeaderboardScore} obj Optional instance to populate.
     * @return {module:model/PlayerLeaderboardScore} The populated <code>PlayerLeaderboardScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerLeaderboardScore();

            if (data.hasOwnProperty('friendsRank')) {
                obj['friendsRank'] = LeaderboardScoreRank.constructFromObject(data['friendsRank']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('leaderboard_id')) {
                obj['leaderboard_id'] = ApiClient.convertToType(data['leaderboard_id'], 'String');
            }
            if (data.hasOwnProperty('publicRank')) {
                obj['publicRank'] = LeaderboardScoreRank.constructFromObject(data['publicRank']);
            }
            if (data.hasOwnProperty('scoreString')) {
                obj['scoreString'] = ApiClient.convertToType(data['scoreString'], 'String');
            }
            if (data.hasOwnProperty('scoreTag')) {
                obj['scoreTag'] = ApiClient.convertToType(data['scoreTag'], 'String');
            }
            if (data.hasOwnProperty('scoreValue')) {
                obj['scoreValue'] = ApiClient.convertToType(data['scoreValue'], 'String');
            }
            if (data.hasOwnProperty('socialRank')) {
                obj['socialRank'] = LeaderboardScoreRank.constructFromObject(data['socialRank']);
            }
            if (data.hasOwnProperty('timeSpan')) {
                obj['timeSpan'] = ApiClient.convertToType(data['timeSpan'], 'String');
            }
            if (data.hasOwnProperty('writeTimestamp')) {
                obj['writeTimestamp'] = ApiClient.convertToType(data['writeTimestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerLeaderboardScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerLeaderboardScore</code>.
     */
    static validateJSON(data) {
        // validate the optional field `friendsRank`
        if (data['friendsRank']) { // data not null
          LeaderboardScoreRank.validateJSON(data['friendsRank']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['leaderboard_id'] && !(typeof data['leaderboard_id'] === 'string' || data['leaderboard_id'] instanceof String)) {
            throw new Error("Expected the field `leaderboard_id` to be a primitive type in the JSON string but got " + data['leaderboard_id']);
        }
        // validate the optional field `publicRank`
        if (data['publicRank']) { // data not null
          LeaderboardScoreRank.validateJSON(data['publicRank']);
        }
        // ensure the json data is a string
        if (data['scoreString'] && !(typeof data['scoreString'] === 'string' || data['scoreString'] instanceof String)) {
            throw new Error("Expected the field `scoreString` to be a primitive type in the JSON string but got " + data['scoreString']);
        }
        // ensure the json data is a string
        if (data['scoreTag'] && !(typeof data['scoreTag'] === 'string' || data['scoreTag'] instanceof String)) {
            throw new Error("Expected the field `scoreTag` to be a primitive type in the JSON string but got " + data['scoreTag']);
        }
        // ensure the json data is a string
        if (data['scoreValue'] && !(typeof data['scoreValue'] === 'string' || data['scoreValue'] instanceof String)) {
            throw new Error("Expected the field `scoreValue` to be a primitive type in the JSON string but got " + data['scoreValue']);
        }
        // validate the optional field `socialRank`
        if (data['socialRank']) { // data not null
          LeaderboardScoreRank.validateJSON(data['socialRank']);
        }
        // ensure the json data is a string
        if (data['timeSpan'] && !(typeof data['timeSpan'] === 'string' || data['timeSpan'] instanceof String)) {
            throw new Error("Expected the field `timeSpan` to be a primitive type in the JSON string but got " + data['timeSpan']);
        }
        // ensure the json data is a string
        if (data['writeTimestamp'] && !(typeof data['writeTimestamp'] === 'string' || data['writeTimestamp'] instanceof String)) {
            throw new Error("Expected the field `writeTimestamp` to be a primitive type in the JSON string but got " + data['writeTimestamp']);
        }

        return true;
    }


}



/**
 * @member {module:model/LeaderboardScoreRank} friendsRank
 */
PlayerLeaderboardScore.prototype['friendsRank'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLeaderboardScore`.
 * @member {String} kind
 */
PlayerLeaderboardScore.prototype['kind'] = undefined;

/**
 * The ID of the leaderboard this score is in.
 * @member {String} leaderboard_id
 */
PlayerLeaderboardScore.prototype['leaderboard_id'] = undefined;

/**
 * @member {module:model/LeaderboardScoreRank} publicRank
 */
PlayerLeaderboardScore.prototype['publicRank'] = undefined;

/**
 * The formatted value of this score.
 * @member {String} scoreString
 */
PlayerLeaderboardScore.prototype['scoreString'] = undefined;

/**
 * Additional information about the score. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
 * @member {String} scoreTag
 */
PlayerLeaderboardScore.prototype['scoreTag'] = undefined;

/**
 * The numerical value of this score.
 * @member {String} scoreValue
 */
PlayerLeaderboardScore.prototype['scoreValue'] = undefined;

/**
 * @member {module:model/LeaderboardScoreRank} socialRank
 */
PlayerLeaderboardScore.prototype['socialRank'] = undefined;

/**
 * The time span of this score.
 * @member {module:model/PlayerLeaderboardScore.TimeSpanEnum} timeSpan
 */
PlayerLeaderboardScore.prototype['timeSpan'] = undefined;

/**
 * The timestamp at which this score was recorded, in milliseconds since the epoch in UTC.
 * @member {String} writeTimestamp
 */
PlayerLeaderboardScore.prototype['writeTimestamp'] = undefined;





/**
 * Allowed values for the <code>timeSpan</code> property.
 * @enum {String}
 * @readonly
 */
PlayerLeaderboardScore['TimeSpanEnum'] = {

    /**
     * value: "ALL_TIME"
     * @const
     */
    "ALL_TIME": "ALL_TIME",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default PlayerLeaderboardScore;

