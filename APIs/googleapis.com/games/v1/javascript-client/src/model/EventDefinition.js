/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventChild from './EventChild';

/**
 * The EventDefinition model module.
 * @module model/EventDefinition
 * @version v1
 */
class EventDefinition {
    /**
     * Constructs a new <code>EventDefinition</code>.
     * An event definition resource.
     * @alias module:model/EventDefinition
     */
    constructor() { 
        
        EventDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDefinition} obj Optional instance to populate.
     * @return {module:model/EventDefinition} The populated <code>EventDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDefinition();

            if (data.hasOwnProperty('childEvents')) {
                obj['childEvents'] = ApiClient.convertToType(data['childEvents'], [EventChild]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('isDefaultImageUrl')) {
                obj['isDefaultImageUrl'] = ApiClient.convertToType(data['isDefaultImageUrl'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDefinition</code>.
     */
    static validateJSON(data) {
        if (data['childEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childEvents'])) {
                throw new Error("Expected the field `childEvents` to be an array in the JSON data but got " + data['childEvents']);
            }
            // validate the optional field `childEvents` (array)
            for (const item of data['childEvents']) {
                EventChild.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * A list of events that are a child of this event.
 * @member {Array.<module:model/EventChild>} childEvents
 */
EventDefinition.prototype['childEvents'] = undefined;

/**
 * Description of what this event represents.
 * @member {String} description
 */
EventDefinition.prototype['description'] = undefined;

/**
 * The name to display for the event.
 * @member {String} displayName
 */
EventDefinition.prototype['displayName'] = undefined;

/**
 * The ID of the event.
 * @member {String} id
 */
EventDefinition.prototype['id'] = undefined;

/**
 * The base URL for the image that represents the event.
 * @member {String} imageUrl
 */
EventDefinition.prototype['imageUrl'] = undefined;

/**
 * Indicates whether the icon image being returned is a default image, or is game-provided.
 * @member {Boolean} isDefaultImageUrl
 */
EventDefinition.prototype['isDefaultImageUrl'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`.
 * @member {String} kind
 */
EventDefinition.prototype['kind'] = undefined;

/**
 * The visibility of event being tracked in this definition.
 * @member {module:model/EventDefinition.VisibilityEnum} visibility
 */
EventDefinition.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
EventDefinition['VisibilityEnum'] = {

    /**
     * value: "REVEALED"
     * @const
     */
    "REVEALED": "REVEALED",

    /**
     * value: "HIDDEN"
     * @const
     */
    "HIDDEN": "HIDDEN"
};



export default EventDefinition;

