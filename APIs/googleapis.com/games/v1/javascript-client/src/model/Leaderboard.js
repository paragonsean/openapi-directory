/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Leaderboard model module.
 * @module model/Leaderboard
 * @version v1
 */
class Leaderboard {
    /**
     * Constructs a new <code>Leaderboard</code>.
     * The Leaderboard resource.
     * @alias module:model/Leaderboard
     */
    constructor() { 
        
        Leaderboard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Leaderboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Leaderboard} obj Optional instance to populate.
     * @return {module:model/Leaderboard} The populated <code>Leaderboard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Leaderboard();

            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isIconUrlDefault')) {
                obj['isIconUrlDefault'] = ApiClient.convertToType(data['isIconUrlDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Leaderboard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Leaderboard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }

        return true;
    }


}



/**
 * The icon for the leaderboard.
 * @member {String} iconUrl
 */
Leaderboard.prototype['iconUrl'] = undefined;

/**
 * The leaderboard ID.
 * @member {String} id
 */
Leaderboard.prototype['id'] = undefined;

/**
 * Indicates whether the icon image being returned is a default image, or is game-provided.
 * @member {Boolean} isIconUrlDefault
 */
Leaderboard.prototype['isIconUrlDefault'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `games#leaderboard`.
 * @member {String} kind
 */
Leaderboard.prototype['kind'] = undefined;

/**
 * The name of the leaderboard.
 * @member {String} name
 */
Leaderboard.prototype['name'] = undefined;

/**
 * How scores are ordered.
 * @member {module:model/Leaderboard.OrderEnum} order
 */
Leaderboard.prototype['order'] = undefined;





/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
Leaderboard['OrderEnum'] = {

    /**
     * value: "LARGER_IS_BETTER"
     * @const
     */
    "LARGER_IS_BETTER": "LARGER_IS_BETTER",

    /**
     * value: "SMALLER_IS_BETTER"
     * @const
     */
    "SMALLER_IS_BETTER": "SMALLER_IS_BETTER"
};



export default Leaderboard;

