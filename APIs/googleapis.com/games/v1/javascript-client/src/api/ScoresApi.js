/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LeaderboardScores from '../model/LeaderboardScores';
import PlayerLeaderboardScoreListResponse from '../model/PlayerLeaderboardScoreListResponse';
import PlayerScoreListResponse from '../model/PlayerScoreListResponse';
import PlayerScoreResponse from '../model/PlayerScoreResponse';
import PlayerScoreSubmissionList from '../model/PlayerScoreSubmissionList';

/**
* Scores service.
* @module api/ScoresApi
* @version v1
*/
export default class ScoresApi {

    /**
    * Constructs a new ScoresApi. 
    * @alias module:api/ScoresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gamesScoresGet operation.
     * @callback module:api/ScoresApi~gamesScoresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerLeaderboardScoreListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.
     * @param {String} playerId A player ID. A value of `me` may be used in place of the authenticated player's ID.
     * @param {String} leaderboardId The ID of the leaderboard. Can be set to 'ALL' to retrieve data for all leaderboards for this application.
     * @param {module:model/String} timeSpan The time span for the scores and ranks you're requesting.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [includeRankType] The types of ranks to return. If the parameter is omitted, no ranks will be returned.
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {Number} [maxResults] The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/ScoresApi~gamesScoresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerLeaderboardScoreListResponse}
     */
    gamesScoresGet(playerId, leaderboardId, timeSpan, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling gamesScoresGet");
      }
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesScoresGet");
      }
      // verify the required parameter 'timeSpan' is set
      if (timeSpan === undefined || timeSpan === null) {
        throw new Error("Missing the required parameter 'timeSpan' when calling gamesScoresGet");
      }

      let pathParams = {
        'playerId': playerId,
        'leaderboardId': leaderboardId,
        'timeSpan': timeSpan
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeRankType': opts['includeRankType'],
        'language': opts['language'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerLeaderboardScoreListResponse;
      return this.apiClient.callApi(
        '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesScoresList operation.
     * @callback module:api/ScoresApi~gamesScoresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardScores} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the scores in a leaderboard, starting from the top.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {module:model/String} collection The collection of scores you're requesting.
     * @param {module:model/String} timeSpan Required. The time span for the scores and ranks you're requesting.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {Number} [maxResults] The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/ScoresApi~gamesScoresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardScores}
     */
    gamesScoresList(leaderboardId, collection, timeSpan, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesScoresList");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling gamesScoresList");
      }
      // verify the required parameter 'timeSpan' is set
      if (timeSpan === undefined || timeSpan === null) {
        throw new Error("Missing the required parameter 'timeSpan' when calling gamesScoresList");
      }

      let pathParams = {
        'leaderboardId': leaderboardId,
        'collection': collection
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'timeSpan': timeSpan,
        'language': opts['language'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardScores;
      return this.apiClient.callApi(
        '/games/v1/leaderboards/{leaderboardId}/scores/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesScoresListWindow operation.
     * @callback module:api/ScoresApi~gamesScoresListWindowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardScores} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the scores in a leaderboard around (and including) a player's score.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {module:model/String} collection The collection of scores you're requesting.
     * @param {module:model/String} timeSpan Required. The time span for the scores and ranks you're requesting.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {Number} [maxResults] The maximum number of leaderboard scores to return in the response. For any response, the actual number of leaderboard scores returned may be less than the specified `maxResults`.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {Number} [resultsAbove] The preferred number of scores to return above the player's score. More scores may be returned if the player is at the bottom of the leaderboard; fewer may be returned if the player is at the top. Must be less than or equal to maxResults.
     * @param {Boolean} [returnTopIfAbsent] True if the top scores should be returned when the player is not in the leaderboard. Defaults to true.
     * @param {module:api/ScoresApi~gamesScoresListWindowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardScores}
     */
    gamesScoresListWindow(leaderboardId, collection, timeSpan, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesScoresListWindow");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling gamesScoresListWindow");
      }
      // verify the required parameter 'timeSpan' is set
      if (timeSpan === undefined || timeSpan === null) {
        throw new Error("Missing the required parameter 'timeSpan' when calling gamesScoresListWindow");
      }

      let pathParams = {
        'leaderboardId': leaderboardId,
        'collection': collection
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'timeSpan': timeSpan,
        'language': opts['language'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'resultsAbove': opts['resultsAbove'],
        'returnTopIfAbsent': opts['returnTopIfAbsent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardScores;
      return this.apiClient.callApi(
        '/games/v1/leaderboards/{leaderboardId}/window/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesScoresSubmit operation.
     * @callback module:api/ScoresApi~gamesScoresSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a score to the specified leaderboard.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {String} score Required. The score you're submitting. The submitted score is ignored if it is worse than a previously submitted score, where worse depends on the leaderboard sort order. The meaning of the score value depends on the leaderboard format type. For fixed-point, the score represents the raw value. For time, the score represents elapsed time in milliseconds. For currency, the score represents a value in micro units.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {String} [scoreTag] Additional information about the score you're submitting. Values must contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
     * @param {module:api/ScoresApi~gamesScoresSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerScoreResponse}
     */
    gamesScoresSubmit(leaderboardId, score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesScoresSubmit");
      }
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling gamesScoresSubmit");
      }

      let pathParams = {
        'leaderboardId': leaderboardId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'score': score,
        'language': opts['language'],
        'scoreTag': opts['scoreTag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerScoreResponse;
      return this.apiClient.callApi(
        '/games/v1/leaderboards/{leaderboardId}/scores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesScoresSubmitMultiple operation.
     * @callback module:api/ScoresApi~gamesScoresSubmitMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerScoreListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits multiple scores to leaderboards.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {module:model/PlayerScoreSubmissionList} [playerScoreSubmissionList] 
     * @param {module:api/ScoresApi~gamesScoresSubmitMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerScoreListResponse}
     */
    gamesScoresSubmitMultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['playerScoreSubmissionList'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlayerScoreListResponse;
      return this.apiClient.callApi(
        '/games/v1/leaderboards/scores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
