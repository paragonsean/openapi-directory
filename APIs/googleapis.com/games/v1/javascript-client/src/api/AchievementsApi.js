/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AchievementIncrementResponse from '../model/AchievementIncrementResponse';
import AchievementRevealResponse from '../model/AchievementRevealResponse';
import AchievementSetStepsAtLeastResponse from '../model/AchievementSetStepsAtLeastResponse';
import AchievementUnlockResponse from '../model/AchievementUnlockResponse';
import AchievementUpdateMultipleRequest from '../model/AchievementUpdateMultipleRequest';
import AchievementUpdateMultipleResponse from '../model/AchievementUpdateMultipleResponse';
import PlayerAchievementListResponse from '../model/PlayerAchievementListResponse';

/**
* Achievements service.
* @module api/AchievementsApi
* @version v1
*/
export default class AchievementsApi {

    /**
    * Constructs a new AchievementsApi. 
    * @alias module:api/AchievementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gamesAchievementsIncrement operation.
     * @callback module:api/AchievementsApi~gamesAchievementsIncrementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementIncrementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Increments the steps of the achievement with the given ID for the currently authenticated player.
     * @param {String} achievementId The ID of the achievement used by this method.
     * @param {Number} stepsToIncrement Required. The number of steps to increment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [requestId] A randomly generated numeric ID for each request specified by the caller. This number is used at the server to ensure that the request is handled correctly across retries.
     * @param {module:api/AchievementsApi~gamesAchievementsIncrementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementIncrementResponse}
     */
    gamesAchievementsIncrement(achievementId, stepsToIncrement, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'achievementId' is set
      if (achievementId === undefined || achievementId === null) {
        throw new Error("Missing the required parameter 'achievementId' when calling gamesAchievementsIncrement");
      }
      // verify the required parameter 'stepsToIncrement' is set
      if (stepsToIncrement === undefined || stepsToIncrement === null) {
        throw new Error("Missing the required parameter 'stepsToIncrement' when calling gamesAchievementsIncrement");
      }

      let pathParams = {
        'achievementId': achievementId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'stepsToIncrement': stepsToIncrement,
        'requestId': opts['requestId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchievementIncrementResponse;
      return this.apiClient.callApi(
        '/games/v1/achievements/{achievementId}/increment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAchievementsList operation.
     * @callback module:api/AchievementsApi~gamesAchievementsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerAchievementListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the progress for all your application's achievements for the currently authenticated player.
     * @param {String} playerId A player ID. A value of `me` may be used in place of the authenticated player's ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [language] The preferred language to use for strings returned by this method.
     * @param {Number} [maxResults] The maximum number of achievement resources to return in the response, used for paging. For any response, the actual number of achievement resources returned may be less than the specified `maxResults`.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:model/String} [state] Tells the server to return only achievements with the specified state. If this parameter isn't specified, all achievements are returned.
     * @param {module:api/AchievementsApi~gamesAchievementsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerAchievementListResponse}
     */
    gamesAchievementsList(playerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling gamesAchievementsList");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'language': opts['language'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerAchievementListResponse;
      return this.apiClient.callApi(
        '/games/v1/players/{playerId}/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAchievementsReveal operation.
     * @callback module:api/AchievementsApi~gamesAchievementsRevealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementRevealResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.
     * @param {String} achievementId The ID of the achievement used by this method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AchievementsApi~gamesAchievementsRevealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementRevealResponse}
     */
    gamesAchievementsReveal(achievementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'achievementId' is set
      if (achievementId === undefined || achievementId === null) {
        throw new Error("Missing the required parameter 'achievementId' when calling gamesAchievementsReveal");
      }

      let pathParams = {
        'achievementId': achievementId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchievementRevealResponse;
      return this.apiClient.callApi(
        '/games/v1/achievements/{achievementId}/reveal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAchievementsSetStepsAtLeast operation.
     * @callback module:api/AchievementsApi~gamesAchievementsSetStepsAtLeastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementSetStepsAtLeastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.
     * @param {String} achievementId The ID of the achievement used by this method.
     * @param {Number} steps Required. The minimum value to set the steps to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AchievementsApi~gamesAchievementsSetStepsAtLeastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementSetStepsAtLeastResponse}
     */
    gamesAchievementsSetStepsAtLeast(achievementId, steps, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'achievementId' is set
      if (achievementId === undefined || achievementId === null) {
        throw new Error("Missing the required parameter 'achievementId' when calling gamesAchievementsSetStepsAtLeast");
      }
      // verify the required parameter 'steps' is set
      if (steps === undefined || steps === null) {
        throw new Error("Missing the required parameter 'steps' when calling gamesAchievementsSetStepsAtLeast");
      }

      let pathParams = {
        'achievementId': achievementId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'steps': steps
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchievementSetStepsAtLeastResponse;
      return this.apiClient.callApi(
        '/games/v1/achievements/{achievementId}/setStepsAtLeast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAchievementsUnlock operation.
     * @callback module:api/AchievementsApi~gamesAchievementsUnlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementUnlockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks this achievement for the currently authenticated player.
     * @param {String} achievementId The ID of the achievement used by this method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AchievementsApi~gamesAchievementsUnlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementUnlockResponse}
     */
    gamesAchievementsUnlock(achievementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'achievementId' is set
      if (achievementId === undefined || achievementId === null) {
        throw new Error("Missing the required parameter 'achievementId' when calling gamesAchievementsUnlock");
      }

      let pathParams = {
        'achievementId': achievementId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchievementUnlockResponse;
      return this.apiClient.callApi(
        '/games/v1/achievements/{achievementId}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAchievementsUpdateMultiple operation.
     * @callback module:api/AchievementsApi~gamesAchievementsUpdateMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementUpdateMultipleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates multiple achievements for the currently authenticated player.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AchievementUpdateMultipleRequest} [achievementUpdateMultipleRequest] 
     * @param {module:api/AchievementsApi~gamesAchievementsUpdateMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementUpdateMultipleResponse}
     */
    gamesAchievementsUpdateMultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['achievementUpdateMultipleRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchievementUpdateMultipleResponse;
      return this.apiClient.callApi(
        '/games/v1/achievements/updateMultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
