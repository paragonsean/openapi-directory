/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_cover_image_isSet = false;
    m_cover_image_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_duration_millis_isSet = false;
    m_duration_millis_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_millis_isSet = false;
    m_last_modified_millis_isValid = false;

    m_progress_value_isSet = false;
    m_progress_value_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_cover_image_isValid = ::OpenAPI::fromJsonValue(m_cover_image, json[QString("coverImage")]);
    m_cover_image_isSet = !json[QString("coverImage")].isNull() && m_cover_image_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(m_drive_id, json[QString("driveId")]);
    m_drive_id_isSet = !json[QString("driveId")].isNull() && m_drive_id_isValid;

    m_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_millis, json[QString("durationMillis")]);
    m_duration_millis_isSet = !json[QString("durationMillis")].isNull() && m_duration_millis_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_millis_isValid = ::OpenAPI::fromJsonValue(m_last_modified_millis, json[QString("lastModifiedMillis")]);
    m_last_modified_millis_isSet = !json[QString("lastModifiedMillis")].isNull() && m_last_modified_millis_isValid;

    m_progress_value_isValid = ::OpenAPI::fromJsonValue(m_progress_value, json[QString("progressValue")]);
    m_progress_value_isSet = !json[QString("progressValue")].isNull() && m_progress_value_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("uniqueName")]);
    m_unique_name_isSet = !json[QString("uniqueName")].isNull() && m_unique_name_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_image.isSet()) {
        obj.insert(QString("coverImage"), ::OpenAPI::toJsonValue(m_cover_image));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drive_id_isSet) {
        obj.insert(QString("driveId"), ::OpenAPI::toJsonValue(m_drive_id));
    }
    if (m_duration_millis_isSet) {
        obj.insert(QString("durationMillis"), ::OpenAPI::toJsonValue(m_duration_millis));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_millis_isSet) {
        obj.insert(QString("lastModifiedMillis"), ::OpenAPI::toJsonValue(m_last_modified_millis));
    }
    if (m_progress_value_isSet) {
        obj.insert(QString("progressValue"), ::OpenAPI::toJsonValue(m_progress_value));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("uniqueName"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    return obj;
}

OAISnapshotImage OAISnapshot::getCoverImage() const {
    return m_cover_image;
}
void OAISnapshot::setCoverImage(const OAISnapshotImage &cover_image) {
    m_cover_image = cover_image;
    m_cover_image_isSet = true;
}

bool OAISnapshot::is_cover_image_Set() const{
    return m_cover_image_isSet;
}

bool OAISnapshot::is_cover_image_Valid() const{
    return m_cover_image_isValid;
}

QString OAISnapshot::getDescription() const {
    return m_description;
}
void OAISnapshot::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshot::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshot::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshot::getDriveId() const {
    return m_drive_id;
}
void OAISnapshot::setDriveId(const QString &drive_id) {
    m_drive_id = drive_id;
    m_drive_id_isSet = true;
}

bool OAISnapshot::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAISnapshot::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

QString OAISnapshot::getDurationMillis() const {
    return m_duration_millis;
}
void OAISnapshot::setDurationMillis(const QString &duration_millis) {
    m_duration_millis = duration_millis;
    m_duration_millis_isSet = true;
}

bool OAISnapshot::is_duration_millis_Set() const{
    return m_duration_millis_isSet;
}

bool OAISnapshot::is_duration_millis_Valid() const{
    return m_duration_millis_isValid;
}

QString OAISnapshot::getId() const {
    return m_id;
}
void OAISnapshot::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISnapshot::is_id_Set() const{
    return m_id_isSet;
}

bool OAISnapshot::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISnapshot::getKind() const {
    return m_kind;
}
void OAISnapshot::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISnapshot::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISnapshot::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISnapshot::getLastModifiedMillis() const {
    return m_last_modified_millis;
}
void OAISnapshot::setLastModifiedMillis(const QString &last_modified_millis) {
    m_last_modified_millis = last_modified_millis;
    m_last_modified_millis_isSet = true;
}

bool OAISnapshot::is_last_modified_millis_Set() const{
    return m_last_modified_millis_isSet;
}

bool OAISnapshot::is_last_modified_millis_Valid() const{
    return m_last_modified_millis_isValid;
}

QString OAISnapshot::getProgressValue() const {
    return m_progress_value;
}
void OAISnapshot::setProgressValue(const QString &progress_value) {
    m_progress_value = progress_value;
    m_progress_value_isSet = true;
}

bool OAISnapshot::is_progress_value_Set() const{
    return m_progress_value_isSet;
}

bool OAISnapshot::is_progress_value_Valid() const{
    return m_progress_value_isValid;
}

QString OAISnapshot::getTitle() const {
    return m_title;
}
void OAISnapshot::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISnapshot::is_title_Set() const{
    return m_title_isSet;
}

bool OAISnapshot::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISnapshot::getType() const {
    return m_type;
}
void OAISnapshot::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISnapshot::is_type_Set() const{
    return m_type_isSet;
}

bool OAISnapshot::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISnapshot::getUniqueName() const {
    return m_unique_name;
}
void OAISnapshot::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAISnapshot::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAISnapshot::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
