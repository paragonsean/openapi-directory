/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerExperienceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerExperienceInfo::OAIPlayerExperienceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerExperienceInfo::OAIPlayerExperienceInfo() {
    this->initializeModel();
}

OAIPlayerExperienceInfo::~OAIPlayerExperienceInfo() {}

void OAIPlayerExperienceInfo::initializeModel() {

    m_current_experience_points_isSet = false;
    m_current_experience_points_isValid = false;

    m_current_level_isSet = false;
    m_current_level_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_level_up_timestamp_millis_isSet = false;
    m_last_level_up_timestamp_millis_isValid = false;

    m_next_level_isSet = false;
    m_next_level_isValid = false;
}

void OAIPlayerExperienceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerExperienceInfo::fromJsonObject(QJsonObject json) {

    m_current_experience_points_isValid = ::OpenAPI::fromJsonValue(m_current_experience_points, json[QString("currentExperiencePoints")]);
    m_current_experience_points_isSet = !json[QString("currentExperiencePoints")].isNull() && m_current_experience_points_isValid;

    m_current_level_isValid = ::OpenAPI::fromJsonValue(m_current_level, json[QString("currentLevel")]);
    m_current_level_isSet = !json[QString("currentLevel")].isNull() && m_current_level_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_level_up_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_last_level_up_timestamp_millis, json[QString("lastLevelUpTimestampMillis")]);
    m_last_level_up_timestamp_millis_isSet = !json[QString("lastLevelUpTimestampMillis")].isNull() && m_last_level_up_timestamp_millis_isValid;

    m_next_level_isValid = ::OpenAPI::fromJsonValue(m_next_level, json[QString("nextLevel")]);
    m_next_level_isSet = !json[QString("nextLevel")].isNull() && m_next_level_isValid;
}

QString OAIPlayerExperienceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerExperienceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_experience_points_isSet) {
        obj.insert(QString("currentExperiencePoints"), ::OpenAPI::toJsonValue(m_current_experience_points));
    }
    if (m_current_level.isSet()) {
        obj.insert(QString("currentLevel"), ::OpenAPI::toJsonValue(m_current_level));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_level_up_timestamp_millis_isSet) {
        obj.insert(QString("lastLevelUpTimestampMillis"), ::OpenAPI::toJsonValue(m_last_level_up_timestamp_millis));
    }
    if (m_next_level.isSet()) {
        obj.insert(QString("nextLevel"), ::OpenAPI::toJsonValue(m_next_level));
    }
    return obj;
}

QString OAIPlayerExperienceInfo::getCurrentExperiencePoints() const {
    return m_current_experience_points;
}
void OAIPlayerExperienceInfo::setCurrentExperiencePoints(const QString &current_experience_points) {
    m_current_experience_points = current_experience_points;
    m_current_experience_points_isSet = true;
}

bool OAIPlayerExperienceInfo::is_current_experience_points_Set() const{
    return m_current_experience_points_isSet;
}

bool OAIPlayerExperienceInfo::is_current_experience_points_Valid() const{
    return m_current_experience_points_isValid;
}

OAIPlayerLevel OAIPlayerExperienceInfo::getCurrentLevel() const {
    return m_current_level;
}
void OAIPlayerExperienceInfo::setCurrentLevel(const OAIPlayerLevel &current_level) {
    m_current_level = current_level;
    m_current_level_isSet = true;
}

bool OAIPlayerExperienceInfo::is_current_level_Set() const{
    return m_current_level_isSet;
}

bool OAIPlayerExperienceInfo::is_current_level_Valid() const{
    return m_current_level_isValid;
}

QString OAIPlayerExperienceInfo::getKind() const {
    return m_kind;
}
void OAIPlayerExperienceInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayerExperienceInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayerExperienceInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPlayerExperienceInfo::getLastLevelUpTimestampMillis() const {
    return m_last_level_up_timestamp_millis;
}
void OAIPlayerExperienceInfo::setLastLevelUpTimestampMillis(const QString &last_level_up_timestamp_millis) {
    m_last_level_up_timestamp_millis = last_level_up_timestamp_millis;
    m_last_level_up_timestamp_millis_isSet = true;
}

bool OAIPlayerExperienceInfo::is_last_level_up_timestamp_millis_Set() const{
    return m_last_level_up_timestamp_millis_isSet;
}

bool OAIPlayerExperienceInfo::is_last_level_up_timestamp_millis_Valid() const{
    return m_last_level_up_timestamp_millis_isValid;
}

OAIPlayerLevel OAIPlayerExperienceInfo::getNextLevel() const {
    return m_next_level;
}
void OAIPlayerExperienceInfo::setNextLevel(const OAIPlayerLevel &next_level) {
    m_next_level = next_level;
    m_next_level_isSet = true;
}

bool OAIPlayerExperienceInfo::is_next_level_Set() const{
    return m_next_level_isSet;
}

bool OAIPlayerExperienceInfo::is_next_level_Valid() const{
    return m_next_level_isValid;
}

bool OAIPlayerExperienceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_experience_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_level_up_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerExperienceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
