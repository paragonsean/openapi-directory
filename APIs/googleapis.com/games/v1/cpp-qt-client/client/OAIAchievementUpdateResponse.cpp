/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementUpdateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementUpdateResponse::OAIAchievementUpdateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementUpdateResponse::OAIAchievementUpdateResponse() {
    this->initializeModel();
}

OAIAchievementUpdateResponse::~OAIAchievementUpdateResponse() {}

void OAIAchievementUpdateResponse::initializeModel() {

    m_achievement_id_isSet = false;
    m_achievement_id_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_current_steps_isSet = false;
    m_current_steps_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_newly_unlocked_isSet = false;
    m_newly_unlocked_isValid = false;

    m_update_occurred_isSet = false;
    m_update_occurred_isValid = false;
}

void OAIAchievementUpdateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementUpdateResponse::fromJsonObject(QJsonObject json) {

    m_achievement_id_isValid = ::OpenAPI::fromJsonValue(m_achievement_id, json[QString("achievementId")]);
    m_achievement_id_isSet = !json[QString("achievementId")].isNull() && m_achievement_id_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("currentState")]);
    m_current_state_isSet = !json[QString("currentState")].isNull() && m_current_state_isValid;

    m_current_steps_isValid = ::OpenAPI::fromJsonValue(m_current_steps, json[QString("currentSteps")]);
    m_current_steps_isSet = !json[QString("currentSteps")].isNull() && m_current_steps_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_newly_unlocked_isValid = ::OpenAPI::fromJsonValue(m_newly_unlocked, json[QString("newlyUnlocked")]);
    m_newly_unlocked_isSet = !json[QString("newlyUnlocked")].isNull() && m_newly_unlocked_isValid;

    m_update_occurred_isValid = ::OpenAPI::fromJsonValue(m_update_occurred, json[QString("updateOccurred")]);
    m_update_occurred_isSet = !json[QString("updateOccurred")].isNull() && m_update_occurred_isValid;
}

QString OAIAchievementUpdateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementUpdateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_id_isSet) {
        obj.insert(QString("achievementId"), ::OpenAPI::toJsonValue(m_achievement_id));
    }
    if (m_current_state_isSet) {
        obj.insert(QString("currentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_current_steps_isSet) {
        obj.insert(QString("currentSteps"), ::OpenAPI::toJsonValue(m_current_steps));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_newly_unlocked_isSet) {
        obj.insert(QString("newlyUnlocked"), ::OpenAPI::toJsonValue(m_newly_unlocked));
    }
    if (m_update_occurred_isSet) {
        obj.insert(QString("updateOccurred"), ::OpenAPI::toJsonValue(m_update_occurred));
    }
    return obj;
}

QString OAIAchievementUpdateResponse::getAchievementId() const {
    return m_achievement_id;
}
void OAIAchievementUpdateResponse::setAchievementId(const QString &achievement_id) {
    m_achievement_id = achievement_id;
    m_achievement_id_isSet = true;
}

bool OAIAchievementUpdateResponse::is_achievement_id_Set() const{
    return m_achievement_id_isSet;
}

bool OAIAchievementUpdateResponse::is_achievement_id_Valid() const{
    return m_achievement_id_isValid;
}

QString OAIAchievementUpdateResponse::getCurrentState() const {
    return m_current_state;
}
void OAIAchievementUpdateResponse::setCurrentState(const QString &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIAchievementUpdateResponse::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIAchievementUpdateResponse::is_current_state_Valid() const{
    return m_current_state_isValid;
}

qint32 OAIAchievementUpdateResponse::getCurrentSteps() const {
    return m_current_steps;
}
void OAIAchievementUpdateResponse::setCurrentSteps(const qint32 &current_steps) {
    m_current_steps = current_steps;
    m_current_steps_isSet = true;
}

bool OAIAchievementUpdateResponse::is_current_steps_Set() const{
    return m_current_steps_isSet;
}

bool OAIAchievementUpdateResponse::is_current_steps_Valid() const{
    return m_current_steps_isValid;
}

QString OAIAchievementUpdateResponse::getKind() const {
    return m_kind;
}
void OAIAchievementUpdateResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementUpdateResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementUpdateResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAchievementUpdateResponse::isNewlyUnlocked() const {
    return m_newly_unlocked;
}
void OAIAchievementUpdateResponse::setNewlyUnlocked(const bool &newly_unlocked) {
    m_newly_unlocked = newly_unlocked;
    m_newly_unlocked_isSet = true;
}

bool OAIAchievementUpdateResponse::is_newly_unlocked_Set() const{
    return m_newly_unlocked_isSet;
}

bool OAIAchievementUpdateResponse::is_newly_unlocked_Valid() const{
    return m_newly_unlocked_isValid;
}

bool OAIAchievementUpdateResponse::isUpdateOccurred() const {
    return m_update_occurred;
}
void OAIAchievementUpdateResponse::setUpdateOccurred(const bool &update_occurred) {
    m_update_occurred = update_occurred;
    m_update_occurred_isSet = true;
}

bool OAIAchievementUpdateResponse::is_update_occurred_Set() const{
    return m_update_occurred_isSet;
}

bool OAIAchievementUpdateResponse::is_update_occurred_Valid() const{
    return m_update_occurred_isValid;
}

bool OAIAchievementUpdateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newly_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementUpdateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
