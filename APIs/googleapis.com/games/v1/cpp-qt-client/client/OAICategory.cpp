/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_experience_points_isSet = false;
    m_experience_points_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_experience_points_isValid = ::OpenAPI::fromJsonValue(m_experience_points, json[QString("experiencePoints")]);
    m_experience_points_isSet = !json[QString("experiencePoints")].isNull() && m_experience_points_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_experience_points_isSet) {
        obj.insert(QString("experiencePoints"), ::OpenAPI::toJsonValue(m_experience_points));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAICategory::getCategory() const {
    return m_category;
}
void OAICategory::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICategory::is_category_Set() const{
    return m_category_isSet;
}

bool OAICategory::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICategory::getExperiencePoints() const {
    return m_experience_points;
}
void OAICategory::setExperiencePoints(const QString &experience_points) {
    m_experience_points = experience_points;
    m_experience_points_isSet = true;
}

bool OAICategory::is_experience_points_Set() const{
    return m_experience_points_isSet;
}

bool OAICategory::is_experience_points_Valid() const{
    return m_experience_points_isValid;
}

QString OAICategory::getKind() const {
    return m_kind;
}
void OAICategory::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICategory::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICategory::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
