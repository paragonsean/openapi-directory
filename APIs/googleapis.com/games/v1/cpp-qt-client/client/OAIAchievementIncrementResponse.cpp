/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementIncrementResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementIncrementResponse::OAIAchievementIncrementResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementIncrementResponse::OAIAchievementIncrementResponse() {
    this->initializeModel();
}

OAIAchievementIncrementResponse::~OAIAchievementIncrementResponse() {}

void OAIAchievementIncrementResponse::initializeModel() {

    m_current_steps_isSet = false;
    m_current_steps_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_newly_unlocked_isSet = false;
    m_newly_unlocked_isValid = false;
}

void OAIAchievementIncrementResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementIncrementResponse::fromJsonObject(QJsonObject json) {

    m_current_steps_isValid = ::OpenAPI::fromJsonValue(m_current_steps, json[QString("currentSteps")]);
    m_current_steps_isSet = !json[QString("currentSteps")].isNull() && m_current_steps_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_newly_unlocked_isValid = ::OpenAPI::fromJsonValue(m_newly_unlocked, json[QString("newlyUnlocked")]);
    m_newly_unlocked_isSet = !json[QString("newlyUnlocked")].isNull() && m_newly_unlocked_isValid;
}

QString OAIAchievementIncrementResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementIncrementResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_current_steps_isSet) {
        obj.insert(QString("currentSteps"), ::OpenAPI::toJsonValue(m_current_steps));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_newly_unlocked_isSet) {
        obj.insert(QString("newlyUnlocked"), ::OpenAPI::toJsonValue(m_newly_unlocked));
    }
    return obj;
}

qint32 OAIAchievementIncrementResponse::getCurrentSteps() const {
    return m_current_steps;
}
void OAIAchievementIncrementResponse::setCurrentSteps(const qint32 &current_steps) {
    m_current_steps = current_steps;
    m_current_steps_isSet = true;
}

bool OAIAchievementIncrementResponse::is_current_steps_Set() const{
    return m_current_steps_isSet;
}

bool OAIAchievementIncrementResponse::is_current_steps_Valid() const{
    return m_current_steps_isValid;
}

QString OAIAchievementIncrementResponse::getKind() const {
    return m_kind;
}
void OAIAchievementIncrementResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementIncrementResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementIncrementResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAchievementIncrementResponse::isNewlyUnlocked() const {
    return m_newly_unlocked;
}
void OAIAchievementIncrementResponse::setNewlyUnlocked(const bool &newly_unlocked) {
    m_newly_unlocked = newly_unlocked;
    m_newly_unlocked_isSet = true;
}

bool OAIAchievementIncrementResponse::is_newly_unlocked_Set() const{
    return m_newly_unlocked_isSet;
}

bool OAIAchievementIncrementResponse::is_newly_unlocked_Valid() const{
    return m_newly_unlocked_isValid;
}

bool OAIAchievementIncrementResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newly_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementIncrementResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
