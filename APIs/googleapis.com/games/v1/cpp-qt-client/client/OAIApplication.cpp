/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_achievement_count_isSet = false;
    m_achievement_count_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_features_isSet = false;
    m_enabled_features_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_leaderboard_count_isSet = false;
    m_leaderboard_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_color_isSet = false;
    m_theme_color_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_achievement_count_isValid = ::OpenAPI::fromJsonValue(m_achievement_count, json[QString("achievement_count")]);
    m_achievement_count_isSet = !json[QString("achievement_count")].isNull() && m_achievement_count_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_features_isValid = ::OpenAPI::fromJsonValue(m_enabled_features, json[QString("enabledFeatures")]);
    m_enabled_features_isSet = !json[QString("enabledFeatures")].isNull() && m_enabled_features_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("lastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("lastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_leaderboard_count_isValid = ::OpenAPI::fromJsonValue(m_leaderboard_count, json[QString("leaderboard_count")]);
    m_leaderboard_count_isSet = !json[QString("leaderboard_count")].isNull() && m_leaderboard_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_theme_color_isValid = ::OpenAPI::fromJsonValue(m_theme_color, json[QString("themeColor")]);
    m_theme_color_isSet = !json[QString("themeColor")].isNull() && m_theme_color_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_count_isSet) {
        obj.insert(QString("achievement_count"), ::OpenAPI::toJsonValue(m_achievement_count));
    }
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_features.size() > 0) {
        obj.insert(QString("enabledFeatures"), ::OpenAPI::toJsonValue(m_enabled_features));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("lastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_leaderboard_count_isSet) {
        obj.insert(QString("leaderboard_count"), ::OpenAPI::toJsonValue(m_leaderboard_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_color_isSet) {
        obj.insert(QString("themeColor"), ::OpenAPI::toJsonValue(m_theme_color));
    }
    return obj;
}

qint32 OAIApplication::getAchievementCount() const {
    return m_achievement_count;
}
void OAIApplication::setAchievementCount(const qint32 &achievement_count) {
    m_achievement_count = achievement_count;
    m_achievement_count_isSet = true;
}

bool OAIApplication::is_achievement_count_Set() const{
    return m_achievement_count_isSet;
}

bool OAIApplication::is_achievement_count_Valid() const{
    return m_achievement_count_isValid;
}

QList<OAIImageAsset> OAIApplication::getAssets() const {
    return m_assets;
}
void OAIApplication::setAssets(const QList<OAIImageAsset> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIApplication::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIApplication::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIApplication::getAuthor() const {
    return m_author;
}
void OAIApplication::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIApplication::is_author_Set() const{
    return m_author_isSet;
}

bool OAIApplication::is_author_Valid() const{
    return m_author_isValid;
}

OAIApplicationCategory OAIApplication::getCategory() const {
    return m_category;
}
void OAIApplication::setCategory(const OAIApplicationCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIApplication::is_category_Set() const{
    return m_category_isSet;
}

bool OAIApplication::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIApplication::getDescription() const {
    return m_description;
}
void OAIApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplication::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIApplication::getEnabledFeatures() const {
    return m_enabled_features;
}
void OAIApplication::setEnabledFeatures(const QList<QString> &enabled_features) {
    m_enabled_features = enabled_features;
    m_enabled_features_isSet = true;
}

bool OAIApplication::is_enabled_features_Set() const{
    return m_enabled_features_isSet;
}

bool OAIApplication::is_enabled_features_Valid() const{
    return m_enabled_features_isValid;
}

QString OAIApplication::getId() const {
    return m_id;
}
void OAIApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplication::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIInstance> OAIApplication::getInstances() const {
    return m_instances;
}
void OAIApplication::setInstances(const QList<OAIInstance> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIApplication::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIApplication::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAIApplication::getKind() const {
    return m_kind;
}
void OAIApplication::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIApplication::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIApplication::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIApplication::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIApplication::setLastUpdatedTimestamp(const QString &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIApplication::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIApplication::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

qint32 OAIApplication::getLeaderboardCount() const {
    return m_leaderboard_count;
}
void OAIApplication::setLeaderboardCount(const qint32 &leaderboard_count) {
    m_leaderboard_count = leaderboard_count;
    m_leaderboard_count_isSet = true;
}

bool OAIApplication::is_leaderboard_count_Set() const{
    return m_leaderboard_count_isSet;
}

bool OAIApplication::is_leaderboard_count_Valid() const{
    return m_leaderboard_count_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplication::getThemeColor() const {
    return m_theme_color;
}
void OAIApplication::setThemeColor(const QString &theme_color) {
    m_theme_color = theme_color;
    m_theme_color_isSet = true;
}

bool OAIApplication::is_theme_color_Set() const{
    return m_theme_color_isSet;
}

bool OAIApplication::is_theme_color_Valid() const{
    return m_theme_color_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaderboard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
