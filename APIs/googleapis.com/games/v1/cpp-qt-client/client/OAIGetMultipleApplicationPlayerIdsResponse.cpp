/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMultipleApplicationPlayerIdsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMultipleApplicationPlayerIdsResponse::OAIGetMultipleApplicationPlayerIdsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMultipleApplicationPlayerIdsResponse::OAIGetMultipleApplicationPlayerIdsResponse() {
    this->initializeModel();
}

OAIGetMultipleApplicationPlayerIdsResponse::~OAIGetMultipleApplicationPlayerIdsResponse() {}

void OAIGetMultipleApplicationPlayerIdsResponse::initializeModel() {

    m_player_ids_isSet = false;
    m_player_ids_isValid = false;
}

void OAIGetMultipleApplicationPlayerIdsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMultipleApplicationPlayerIdsResponse::fromJsonObject(QJsonObject json) {

    m_player_ids_isValid = ::OpenAPI::fromJsonValue(m_player_ids, json[QString("playerIds")]);
    m_player_ids_isSet = !json[QString("playerIds")].isNull() && m_player_ids_isValid;
}

QString OAIGetMultipleApplicationPlayerIdsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMultipleApplicationPlayerIdsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_player_ids.size() > 0) {
        obj.insert(QString("playerIds"), ::OpenAPI::toJsonValue(m_player_ids));
    }
    return obj;
}

QList<OAIApplicationPlayerId> OAIGetMultipleApplicationPlayerIdsResponse::getPlayerIds() const {
    return m_player_ids;
}
void OAIGetMultipleApplicationPlayerIdsResponse::setPlayerIds(const QList<OAIApplicationPlayerId> &player_ids) {
    m_player_ids = player_ids;
    m_player_ids_isSet = true;
}

bool OAIGetMultipleApplicationPlayerIdsResponse::is_player_ids_Set() const{
    return m_player_ids_isSet;
}

bool OAIGetMultipleApplicationPlayerIdsResponse::is_player_ids_Valid() const{
    return m_player_ids_isValid;
}

bool OAIGetMultipleApplicationPlayerIdsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_player_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMultipleApplicationPlayerIdsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
