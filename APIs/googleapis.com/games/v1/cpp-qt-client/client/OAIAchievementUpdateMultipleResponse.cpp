/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementUpdateMultipleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementUpdateMultipleResponse::OAIAchievementUpdateMultipleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementUpdateMultipleResponse::OAIAchievementUpdateMultipleResponse() {
    this->initializeModel();
}

OAIAchievementUpdateMultipleResponse::~OAIAchievementUpdateMultipleResponse() {}

void OAIAchievementUpdateMultipleResponse::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_updated_achievements_isSet = false;
    m_updated_achievements_isValid = false;
}

void OAIAchievementUpdateMultipleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementUpdateMultipleResponse::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_updated_achievements_isValid = ::OpenAPI::fromJsonValue(m_updated_achievements, json[QString("updatedAchievements")]);
    m_updated_achievements_isSet = !json[QString("updatedAchievements")].isNull() && m_updated_achievements_isValid;
}

QString OAIAchievementUpdateMultipleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementUpdateMultipleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_updated_achievements.size() > 0) {
        obj.insert(QString("updatedAchievements"), ::OpenAPI::toJsonValue(m_updated_achievements));
    }
    return obj;
}

QString OAIAchievementUpdateMultipleResponse::getKind() const {
    return m_kind;
}
void OAIAchievementUpdateMultipleResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementUpdateMultipleResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementUpdateMultipleResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIAchievementUpdateResponse> OAIAchievementUpdateMultipleResponse::getUpdatedAchievements() const {
    return m_updated_achievements;
}
void OAIAchievementUpdateMultipleResponse::setUpdatedAchievements(const QList<OAIAchievementUpdateResponse> &updated_achievements) {
    m_updated_achievements = updated_achievements;
    m_updated_achievements_isSet = true;
}

bool OAIAchievementUpdateMultipleResponse::is_updated_achievements_Set() const{
    return m_updated_achievements_isSet;
}

bool OAIAchievementUpdateMultipleResponse::is_updated_achievements_Valid() const{
    return m_updated_achievements_isValid;
}

bool OAIAchievementUpdateMultipleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_achievements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementUpdateMultipleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
