/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerScoreResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerScoreResponse::OAIPlayerScoreResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerScoreResponse::OAIPlayerScoreResponse() {
    this->initializeModel();
}

OAIPlayerScoreResponse::~OAIPlayerScoreResponse() {}

void OAIPlayerScoreResponse::initializeModel() {

    m_beaten_score_time_spans_isSet = false;
    m_beaten_score_time_spans_isValid = false;

    m_formatted_score_isSet = false;
    m_formatted_score_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_leaderboard_id_isSet = false;
    m_leaderboard_id_isValid = false;

    m_score_tag_isSet = false;
    m_score_tag_isValid = false;

    m_unbeaten_scores_isSet = false;
    m_unbeaten_scores_isValid = false;
}

void OAIPlayerScoreResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerScoreResponse::fromJsonObject(QJsonObject json) {

    m_beaten_score_time_spans_isValid = ::OpenAPI::fromJsonValue(m_beaten_score_time_spans, json[QString("beatenScoreTimeSpans")]);
    m_beaten_score_time_spans_isSet = !json[QString("beatenScoreTimeSpans")].isNull() && m_beaten_score_time_spans_isValid;

    m_formatted_score_isValid = ::OpenAPI::fromJsonValue(m_formatted_score, json[QString("formattedScore")]);
    m_formatted_score_isSet = !json[QString("formattedScore")].isNull() && m_formatted_score_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_leaderboard_id_isValid = ::OpenAPI::fromJsonValue(m_leaderboard_id, json[QString("leaderboardId")]);
    m_leaderboard_id_isSet = !json[QString("leaderboardId")].isNull() && m_leaderboard_id_isValid;

    m_score_tag_isValid = ::OpenAPI::fromJsonValue(m_score_tag, json[QString("scoreTag")]);
    m_score_tag_isSet = !json[QString("scoreTag")].isNull() && m_score_tag_isValid;

    m_unbeaten_scores_isValid = ::OpenAPI::fromJsonValue(m_unbeaten_scores, json[QString("unbeatenScores")]);
    m_unbeaten_scores_isSet = !json[QString("unbeatenScores")].isNull() && m_unbeaten_scores_isValid;
}

QString OAIPlayerScoreResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerScoreResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_beaten_score_time_spans.size() > 0) {
        obj.insert(QString("beatenScoreTimeSpans"), ::OpenAPI::toJsonValue(m_beaten_score_time_spans));
    }
    if (m_formatted_score_isSet) {
        obj.insert(QString("formattedScore"), ::OpenAPI::toJsonValue(m_formatted_score));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_leaderboard_id_isSet) {
        obj.insert(QString("leaderboardId"), ::OpenAPI::toJsonValue(m_leaderboard_id));
    }
    if (m_score_tag_isSet) {
        obj.insert(QString("scoreTag"), ::OpenAPI::toJsonValue(m_score_tag));
    }
    if (m_unbeaten_scores.size() > 0) {
        obj.insert(QString("unbeatenScores"), ::OpenAPI::toJsonValue(m_unbeaten_scores));
    }
    return obj;
}

QList<QString> OAIPlayerScoreResponse::getBeatenScoreTimeSpans() const {
    return m_beaten_score_time_spans;
}
void OAIPlayerScoreResponse::setBeatenScoreTimeSpans(const QList<QString> &beaten_score_time_spans) {
    m_beaten_score_time_spans = beaten_score_time_spans;
    m_beaten_score_time_spans_isSet = true;
}

bool OAIPlayerScoreResponse::is_beaten_score_time_spans_Set() const{
    return m_beaten_score_time_spans_isSet;
}

bool OAIPlayerScoreResponse::is_beaten_score_time_spans_Valid() const{
    return m_beaten_score_time_spans_isValid;
}

QString OAIPlayerScoreResponse::getFormattedScore() const {
    return m_formatted_score;
}
void OAIPlayerScoreResponse::setFormattedScore(const QString &formatted_score) {
    m_formatted_score = formatted_score;
    m_formatted_score_isSet = true;
}

bool OAIPlayerScoreResponse::is_formatted_score_Set() const{
    return m_formatted_score_isSet;
}

bool OAIPlayerScoreResponse::is_formatted_score_Valid() const{
    return m_formatted_score_isValid;
}

QString OAIPlayerScoreResponse::getKind() const {
    return m_kind;
}
void OAIPlayerScoreResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayerScoreResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayerScoreResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPlayerScoreResponse::getLeaderboardId() const {
    return m_leaderboard_id;
}
void OAIPlayerScoreResponse::setLeaderboardId(const QString &leaderboard_id) {
    m_leaderboard_id = leaderboard_id;
    m_leaderboard_id_isSet = true;
}

bool OAIPlayerScoreResponse::is_leaderboard_id_Set() const{
    return m_leaderboard_id_isSet;
}

bool OAIPlayerScoreResponse::is_leaderboard_id_Valid() const{
    return m_leaderboard_id_isValid;
}

QString OAIPlayerScoreResponse::getScoreTag() const {
    return m_score_tag;
}
void OAIPlayerScoreResponse::setScoreTag(const QString &score_tag) {
    m_score_tag = score_tag;
    m_score_tag_isSet = true;
}

bool OAIPlayerScoreResponse::is_score_tag_Set() const{
    return m_score_tag_isSet;
}

bool OAIPlayerScoreResponse::is_score_tag_Valid() const{
    return m_score_tag_isValid;
}

QList<OAIPlayerScore> OAIPlayerScoreResponse::getUnbeatenScores() const {
    return m_unbeaten_scores;
}
void OAIPlayerScoreResponse::setUnbeatenScores(const QList<OAIPlayerScore> &unbeaten_scores) {
    m_unbeaten_scores = unbeaten_scores;
    m_unbeaten_scores_isSet = true;
}

bool OAIPlayerScoreResponse::is_unbeaten_scores_Set() const{
    return m_unbeaten_scores_isSet;
}

bool OAIPlayerScoreResponse::is_unbeaten_scores_Valid() const{
    return m_unbeaten_scores_isValid;
}

bool OAIPlayerScoreResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beaten_score_time_spans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaderboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unbeaten_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerScoreResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
