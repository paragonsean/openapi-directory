/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDefinition::OAIEventDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDefinition::OAIEventDefinition() {
    this->initializeModel();
}

OAIEventDefinition::~OAIEventDefinition() {}

void OAIEventDefinition::initializeModel() {

    m_child_events_isSet = false;
    m_child_events_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_is_default_image_url_isSet = false;
    m_is_default_image_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIEventDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDefinition::fromJsonObject(QJsonObject json) {

    m_child_events_isValid = ::OpenAPI::fromJsonValue(m_child_events, json[QString("childEvents")]);
    m_child_events_isSet = !json[QString("childEvents")].isNull() && m_child_events_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_is_default_image_url_isValid = ::OpenAPI::fromJsonValue(m_is_default_image_url, json[QString("isDefaultImageUrl")]);
    m_is_default_image_url_isSet = !json[QString("isDefaultImageUrl")].isNull() && m_is_default_image_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIEventDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_child_events.size() > 0) {
        obj.insert(QString("childEvents"), ::OpenAPI::toJsonValue(m_child_events));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_is_default_image_url_isSet) {
        obj.insert(QString("isDefaultImageUrl"), ::OpenAPI::toJsonValue(m_is_default_image_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QList<OAIEventChild> OAIEventDefinition::getChildEvents() const {
    return m_child_events;
}
void OAIEventDefinition::setChildEvents(const QList<OAIEventChild> &child_events) {
    m_child_events = child_events;
    m_child_events_isSet = true;
}

bool OAIEventDefinition::is_child_events_Set() const{
    return m_child_events_isSet;
}

bool OAIEventDefinition::is_child_events_Valid() const{
    return m_child_events_isValid;
}

QString OAIEventDefinition::getDescription() const {
    return m_description;
}
void OAIEventDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIEventDefinition::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEventDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEventDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIEventDefinition::getId() const {
    return m_id;
}
void OAIEventDefinition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventDefinition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventDefinition::getImageUrl() const {
    return m_image_url;
}
void OAIEventDefinition::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIEventDefinition::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIEventDefinition::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIEventDefinition::isIsDefaultImageUrl() const {
    return m_is_default_image_url;
}
void OAIEventDefinition::setIsDefaultImageUrl(const bool &is_default_image_url) {
    m_is_default_image_url = is_default_image_url;
    m_is_default_image_url_isSet = true;
}

bool OAIEventDefinition::is_is_default_image_url_Set() const{
    return m_is_default_image_url_isSet;
}

bool OAIEventDefinition::is_is_default_image_url_Valid() const{
    return m_is_default_image_url_isValid;
}

QString OAIEventDefinition::getKind() const {
    return m_kind;
}
void OAIEventDefinition::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventDefinition::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventDefinition::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEventDefinition::getVisibility() const {
    return m_visibility;
}
void OAIEventDefinition::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIEventDefinition::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIEventDefinition::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIEventDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
