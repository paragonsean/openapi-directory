/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceIosDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceIosDetails::OAIInstanceIosDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceIosDetails::OAIInstanceIosDetails() {
    this->initializeModel();
}

OAIInstanceIosDetails::~OAIInstanceIosDetails() {}

void OAIInstanceIosDetails::initializeModel() {

    m_bundle_identifier_isSet = false;
    m_bundle_identifier_isValid = false;

    m_itunes_app_id_isSet = false;
    m_itunes_app_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_preferred_for_ipad_isSet = false;
    m_preferred_for_ipad_isValid = false;

    m_preferred_for_iphone_isSet = false;
    m_preferred_for_iphone_isValid = false;

    m_support_ipad_isSet = false;
    m_support_ipad_isValid = false;

    m_support_iphone_isSet = false;
    m_support_iphone_isValid = false;
}

void OAIInstanceIosDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceIosDetails::fromJsonObject(QJsonObject json) {

    m_bundle_identifier_isValid = ::OpenAPI::fromJsonValue(m_bundle_identifier, json[QString("bundleIdentifier")]);
    m_bundle_identifier_isSet = !json[QString("bundleIdentifier")].isNull() && m_bundle_identifier_isValid;

    m_itunes_app_id_isValid = ::OpenAPI::fromJsonValue(m_itunes_app_id, json[QString("itunesAppId")]);
    m_itunes_app_id_isSet = !json[QString("itunesAppId")].isNull() && m_itunes_app_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_preferred_for_ipad_isValid = ::OpenAPI::fromJsonValue(m_preferred_for_ipad, json[QString("preferredForIpad")]);
    m_preferred_for_ipad_isSet = !json[QString("preferredForIpad")].isNull() && m_preferred_for_ipad_isValid;

    m_preferred_for_iphone_isValid = ::OpenAPI::fromJsonValue(m_preferred_for_iphone, json[QString("preferredForIphone")]);
    m_preferred_for_iphone_isSet = !json[QString("preferredForIphone")].isNull() && m_preferred_for_iphone_isValid;

    m_support_ipad_isValid = ::OpenAPI::fromJsonValue(m_support_ipad, json[QString("supportIpad")]);
    m_support_ipad_isSet = !json[QString("supportIpad")].isNull() && m_support_ipad_isValid;

    m_support_iphone_isValid = ::OpenAPI::fromJsonValue(m_support_iphone, json[QString("supportIphone")]);
    m_support_iphone_isSet = !json[QString("supportIphone")].isNull() && m_support_iphone_isValid;
}

QString OAIInstanceIosDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceIosDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_identifier_isSet) {
        obj.insert(QString("bundleIdentifier"), ::OpenAPI::toJsonValue(m_bundle_identifier));
    }
    if (m_itunes_app_id_isSet) {
        obj.insert(QString("itunesAppId"), ::OpenAPI::toJsonValue(m_itunes_app_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_preferred_for_ipad_isSet) {
        obj.insert(QString("preferredForIpad"), ::OpenAPI::toJsonValue(m_preferred_for_ipad));
    }
    if (m_preferred_for_iphone_isSet) {
        obj.insert(QString("preferredForIphone"), ::OpenAPI::toJsonValue(m_preferred_for_iphone));
    }
    if (m_support_ipad_isSet) {
        obj.insert(QString("supportIpad"), ::OpenAPI::toJsonValue(m_support_ipad));
    }
    if (m_support_iphone_isSet) {
        obj.insert(QString("supportIphone"), ::OpenAPI::toJsonValue(m_support_iphone));
    }
    return obj;
}

QString OAIInstanceIosDetails::getBundleIdentifier() const {
    return m_bundle_identifier;
}
void OAIInstanceIosDetails::setBundleIdentifier(const QString &bundle_identifier) {
    m_bundle_identifier = bundle_identifier;
    m_bundle_identifier_isSet = true;
}

bool OAIInstanceIosDetails::is_bundle_identifier_Set() const{
    return m_bundle_identifier_isSet;
}

bool OAIInstanceIosDetails::is_bundle_identifier_Valid() const{
    return m_bundle_identifier_isValid;
}

QString OAIInstanceIosDetails::getItunesAppId() const {
    return m_itunes_app_id;
}
void OAIInstanceIosDetails::setItunesAppId(const QString &itunes_app_id) {
    m_itunes_app_id = itunes_app_id;
    m_itunes_app_id_isSet = true;
}

bool OAIInstanceIosDetails::is_itunes_app_id_Set() const{
    return m_itunes_app_id_isSet;
}

bool OAIInstanceIosDetails::is_itunes_app_id_Valid() const{
    return m_itunes_app_id_isValid;
}

QString OAIInstanceIosDetails::getKind() const {
    return m_kind;
}
void OAIInstanceIosDetails::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIInstanceIosDetails::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIInstanceIosDetails::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIInstanceIosDetails::isPreferredForIpad() const {
    return m_preferred_for_ipad;
}
void OAIInstanceIosDetails::setPreferredForIpad(const bool &preferred_for_ipad) {
    m_preferred_for_ipad = preferred_for_ipad;
    m_preferred_for_ipad_isSet = true;
}

bool OAIInstanceIosDetails::is_preferred_for_ipad_Set() const{
    return m_preferred_for_ipad_isSet;
}

bool OAIInstanceIosDetails::is_preferred_for_ipad_Valid() const{
    return m_preferred_for_ipad_isValid;
}

bool OAIInstanceIosDetails::isPreferredForIphone() const {
    return m_preferred_for_iphone;
}
void OAIInstanceIosDetails::setPreferredForIphone(const bool &preferred_for_iphone) {
    m_preferred_for_iphone = preferred_for_iphone;
    m_preferred_for_iphone_isSet = true;
}

bool OAIInstanceIosDetails::is_preferred_for_iphone_Set() const{
    return m_preferred_for_iphone_isSet;
}

bool OAIInstanceIosDetails::is_preferred_for_iphone_Valid() const{
    return m_preferred_for_iphone_isValid;
}

bool OAIInstanceIosDetails::isSupportIpad() const {
    return m_support_ipad;
}
void OAIInstanceIosDetails::setSupportIpad(const bool &support_ipad) {
    m_support_ipad = support_ipad;
    m_support_ipad_isSet = true;
}

bool OAIInstanceIosDetails::is_support_ipad_Set() const{
    return m_support_ipad_isSet;
}

bool OAIInstanceIosDetails::is_support_ipad_Valid() const{
    return m_support_ipad_isValid;
}

bool OAIInstanceIosDetails::isSupportIphone() const {
    return m_support_iphone;
}
void OAIInstanceIosDetails::setSupportIphone(const bool &support_iphone) {
    m_support_iphone = support_iphone;
    m_support_iphone_isSet = true;
}

bool OAIInstanceIosDetails::is_support_iphone_Set() const{
    return m_support_iphone_isSet;
}

bool OAIInstanceIosDetails::is_support_iphone_Valid() const{
    return m_support_iphone_isValid;
}

bool OAIInstanceIosDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itunes_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_for_ipad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_for_iphone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_ipad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_iphone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceIosDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
