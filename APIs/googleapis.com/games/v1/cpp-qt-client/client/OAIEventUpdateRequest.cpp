/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventUpdateRequest::OAIEventUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventUpdateRequest::OAIEventUpdateRequest() {
    this->initializeModel();
}

OAIEventUpdateRequest::~OAIEventUpdateRequest() {}

void OAIEventUpdateRequest::initializeModel() {

    m_definition_id_isSet = false;
    m_definition_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_update_count_isSet = false;
    m_update_count_isValid = false;
}

void OAIEventUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventUpdateRequest::fromJsonObject(QJsonObject json) {

    m_definition_id_isValid = ::OpenAPI::fromJsonValue(m_definition_id, json[QString("definitionId")]);
    m_definition_id_isSet = !json[QString("definitionId")].isNull() && m_definition_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_update_count_isValid = ::OpenAPI::fromJsonValue(m_update_count, json[QString("updateCount")]);
    m_update_count_isSet = !json[QString("updateCount")].isNull() && m_update_count_isValid;
}

QString OAIEventUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_definition_id_isSet) {
        obj.insert(QString("definitionId"), ::OpenAPI::toJsonValue(m_definition_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_update_count_isSet) {
        obj.insert(QString("updateCount"), ::OpenAPI::toJsonValue(m_update_count));
    }
    return obj;
}

QString OAIEventUpdateRequest::getDefinitionId() const {
    return m_definition_id;
}
void OAIEventUpdateRequest::setDefinitionId(const QString &definition_id) {
    m_definition_id = definition_id;
    m_definition_id_isSet = true;
}

bool OAIEventUpdateRequest::is_definition_id_Set() const{
    return m_definition_id_isSet;
}

bool OAIEventUpdateRequest::is_definition_id_Valid() const{
    return m_definition_id_isValid;
}

QString OAIEventUpdateRequest::getKind() const {
    return m_kind;
}
void OAIEventUpdateRequest::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventUpdateRequest::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventUpdateRequest::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEventUpdateRequest::getUpdateCount() const {
    return m_update_count;
}
void OAIEventUpdateRequest::setUpdateCount(const QString &update_count) {
    m_update_count = update_count;
    m_update_count_isSet = true;
}

bool OAIEventUpdateRequest::is_update_count_Set() const{
    return m_update_count_isSet;
}

bool OAIEventUpdateRequest::is_update_count_Valid() const{
    return m_update_count_isValid;
}

bool OAIEventUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
