/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetagameConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetagameConfig::OAIMetagameConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetagameConfig::OAIMetagameConfig() {
    this->initializeModel();
}

OAIMetagameConfig::~OAIMetagameConfig() {}

void OAIMetagameConfig::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_player_levels_isSet = false;
    m_player_levels_isValid = false;
}

void OAIMetagameConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetagameConfig::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_player_levels_isValid = ::OpenAPI::fromJsonValue(m_player_levels, json[QString("playerLevels")]);
    m_player_levels_isSet = !json[QString("playerLevels")].isNull() && m_player_levels_isValid;
}

QString OAIMetagameConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetagameConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_player_levels.size() > 0) {
        obj.insert(QString("playerLevels"), ::OpenAPI::toJsonValue(m_player_levels));
    }
    return obj;
}

qint32 OAIMetagameConfig::getCurrentVersion() const {
    return m_current_version;
}
void OAIMetagameConfig::setCurrentVersion(const qint32 &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIMetagameConfig::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIMetagameConfig::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIMetagameConfig::getKind() const {
    return m_kind;
}
void OAIMetagameConfig::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMetagameConfig::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMetagameConfig::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIPlayerLevel> OAIMetagameConfig::getPlayerLevels() const {
    return m_player_levels;
}
void OAIMetagameConfig::setPlayerLevels(const QList<OAIPlayerLevel> &player_levels) {
    m_player_levels = player_levels;
    m_player_levels_isSet = true;
}

bool OAIMetagameConfig::is_player_levels_Set() const{
    return m_player_levels_isSet;
}

bool OAIMetagameConfig::is_player_levels_Valid() const{
    return m_player_levels_isValid;
}

bool OAIMetagameConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetagameConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
