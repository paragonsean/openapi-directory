/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_acquisition_uri_isSet = false;
    m_acquisition_uri_isValid = false;

    m_android_instance_isSet = false;
    m_android_instance_isValid = false;

    m_ios_instance_isSet = false;
    m_ios_instance_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_type_isSet = false;
    m_platform_type_isValid = false;

    m_realtime_play_isSet = false;
    m_realtime_play_isValid = false;

    m_turn_based_play_isSet = false;
    m_turn_based_play_isValid = false;

    m_web_instance_isSet = false;
    m_web_instance_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_acquisition_uri_isValid = ::OpenAPI::fromJsonValue(m_acquisition_uri, json[QString("acquisitionUri")]);
    m_acquisition_uri_isSet = !json[QString("acquisitionUri")].isNull() && m_acquisition_uri_isValid;

    m_android_instance_isValid = ::OpenAPI::fromJsonValue(m_android_instance, json[QString("androidInstance")]);
    m_android_instance_isSet = !json[QString("androidInstance")].isNull() && m_android_instance_isValid;

    m_ios_instance_isValid = ::OpenAPI::fromJsonValue(m_ios_instance, json[QString("iosInstance")]);
    m_ios_instance_isSet = !json[QString("iosInstance")].isNull() && m_ios_instance_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_type_isValid = ::OpenAPI::fromJsonValue(m_platform_type, json[QString("platformType")]);
    m_platform_type_isSet = !json[QString("platformType")].isNull() && m_platform_type_isValid;

    m_realtime_play_isValid = ::OpenAPI::fromJsonValue(m_realtime_play, json[QString("realtimePlay")]);
    m_realtime_play_isSet = !json[QString("realtimePlay")].isNull() && m_realtime_play_isValid;

    m_turn_based_play_isValid = ::OpenAPI::fromJsonValue(m_turn_based_play, json[QString("turnBasedPlay")]);
    m_turn_based_play_isSet = !json[QString("turnBasedPlay")].isNull() && m_turn_based_play_isValid;

    m_web_instance_isValid = ::OpenAPI::fromJsonValue(m_web_instance, json[QString("webInstance")]);
    m_web_instance_isSet = !json[QString("webInstance")].isNull() && m_web_instance_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_uri_isSet) {
        obj.insert(QString("acquisitionUri"), ::OpenAPI::toJsonValue(m_acquisition_uri));
    }
    if (m_android_instance.isSet()) {
        obj.insert(QString("androidInstance"), ::OpenAPI::toJsonValue(m_android_instance));
    }
    if (m_ios_instance.isSet()) {
        obj.insert(QString("iosInstance"), ::OpenAPI::toJsonValue(m_ios_instance));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform_type_isSet) {
        obj.insert(QString("platformType"), ::OpenAPI::toJsonValue(m_platform_type));
    }
    if (m_realtime_play_isSet) {
        obj.insert(QString("realtimePlay"), ::OpenAPI::toJsonValue(m_realtime_play));
    }
    if (m_turn_based_play_isSet) {
        obj.insert(QString("turnBasedPlay"), ::OpenAPI::toJsonValue(m_turn_based_play));
    }
    if (m_web_instance.isSet()) {
        obj.insert(QString("webInstance"), ::OpenAPI::toJsonValue(m_web_instance));
    }
    return obj;
}

QString OAIInstance::getAcquisitionUri() const {
    return m_acquisition_uri;
}
void OAIInstance::setAcquisitionUri(const QString &acquisition_uri) {
    m_acquisition_uri = acquisition_uri;
    m_acquisition_uri_isSet = true;
}

bool OAIInstance::is_acquisition_uri_Set() const{
    return m_acquisition_uri_isSet;
}

bool OAIInstance::is_acquisition_uri_Valid() const{
    return m_acquisition_uri_isValid;
}

OAIInstanceAndroidDetails OAIInstance::getAndroidInstance() const {
    return m_android_instance;
}
void OAIInstance::setAndroidInstance(const OAIInstanceAndroidDetails &android_instance) {
    m_android_instance = android_instance;
    m_android_instance_isSet = true;
}

bool OAIInstance::is_android_instance_Set() const{
    return m_android_instance_isSet;
}

bool OAIInstance::is_android_instance_Valid() const{
    return m_android_instance_isValid;
}

OAIInstanceIosDetails OAIInstance::getIosInstance() const {
    return m_ios_instance;
}
void OAIInstance::setIosInstance(const OAIInstanceIosDetails &ios_instance) {
    m_ios_instance = ios_instance;
    m_ios_instance_isSet = true;
}

bool OAIInstance::is_ios_instance_Set() const{
    return m_ios_instance_isSet;
}

bool OAIInstance::is_ios_instance_Valid() const{
    return m_ios_instance_isValid;
}

QString OAIInstance::getKind() const {
    return m_kind;
}
void OAIInstance::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIInstance::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIInstance::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstance::getPlatformType() const {
    return m_platform_type;
}
void OAIInstance::setPlatformType(const QString &platform_type) {
    m_platform_type = platform_type;
    m_platform_type_isSet = true;
}

bool OAIInstance::is_platform_type_Set() const{
    return m_platform_type_isSet;
}

bool OAIInstance::is_platform_type_Valid() const{
    return m_platform_type_isValid;
}

bool OAIInstance::isRealtimePlay() const {
    return m_realtime_play;
}
void OAIInstance::setRealtimePlay(const bool &realtime_play) {
    m_realtime_play = realtime_play;
    m_realtime_play_isSet = true;
}

bool OAIInstance::is_realtime_play_Set() const{
    return m_realtime_play_isSet;
}

bool OAIInstance::is_realtime_play_Valid() const{
    return m_realtime_play_isValid;
}

bool OAIInstance::isTurnBasedPlay() const {
    return m_turn_based_play;
}
void OAIInstance::setTurnBasedPlay(const bool &turn_based_play) {
    m_turn_based_play = turn_based_play;
    m_turn_based_play_isSet = true;
}

bool OAIInstance::is_turn_based_play_Set() const{
    return m_turn_based_play_isSet;
}

bool OAIInstance::is_turn_based_play_Valid() const{
    return m_turn_based_play_isValid;
}

OAIInstanceWebDetails OAIInstance::getWebInstance() const {
    return m_web_instance;
}
void OAIInstance::setWebInstance(const OAIInstanceWebDetails &web_instance) {
    m_web_instance = web_instance;
    m_web_instance_isSet = true;
}

bool OAIInstance::is_web_instance_Set() const{
    return m_web_instance_isSet;
}

bool OAIInstance::is_web_instance_Valid() const{
    return m_web_instance_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_based_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
