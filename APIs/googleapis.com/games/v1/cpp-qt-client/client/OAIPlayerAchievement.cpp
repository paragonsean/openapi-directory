/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerAchievement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerAchievement::OAIPlayerAchievement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerAchievement::OAIPlayerAchievement() {
    this->initializeModel();
}

OAIPlayerAchievement::~OAIPlayerAchievement() {}

void OAIPlayerAchievement::initializeModel() {

    m_achievement_state_isSet = false;
    m_achievement_state_isValid = false;

    m_current_steps_isSet = false;
    m_current_steps_isValid = false;

    m_experience_points_isSet = false;
    m_experience_points_isValid = false;

    m_formatted_current_steps_string_isSet = false;
    m_formatted_current_steps_string_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;
}

void OAIPlayerAchievement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerAchievement::fromJsonObject(QJsonObject json) {

    m_achievement_state_isValid = ::OpenAPI::fromJsonValue(m_achievement_state, json[QString("achievementState")]);
    m_achievement_state_isSet = !json[QString("achievementState")].isNull() && m_achievement_state_isValid;

    m_current_steps_isValid = ::OpenAPI::fromJsonValue(m_current_steps, json[QString("currentSteps")]);
    m_current_steps_isSet = !json[QString("currentSteps")].isNull() && m_current_steps_isValid;

    m_experience_points_isValid = ::OpenAPI::fromJsonValue(m_experience_points, json[QString("experiencePoints")]);
    m_experience_points_isSet = !json[QString("experiencePoints")].isNull() && m_experience_points_isValid;

    m_formatted_current_steps_string_isValid = ::OpenAPI::fromJsonValue(m_formatted_current_steps_string, json[QString("formattedCurrentStepsString")]);
    m_formatted_current_steps_string_isSet = !json[QString("formattedCurrentStepsString")].isNull() && m_formatted_current_steps_string_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("lastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("lastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;
}

QString OAIPlayerAchievement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerAchievement::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_state_isSet) {
        obj.insert(QString("achievementState"), ::OpenAPI::toJsonValue(m_achievement_state));
    }
    if (m_current_steps_isSet) {
        obj.insert(QString("currentSteps"), ::OpenAPI::toJsonValue(m_current_steps));
    }
    if (m_experience_points_isSet) {
        obj.insert(QString("experiencePoints"), ::OpenAPI::toJsonValue(m_experience_points));
    }
    if (m_formatted_current_steps_string_isSet) {
        obj.insert(QString("formattedCurrentStepsString"), ::OpenAPI::toJsonValue(m_formatted_current_steps_string));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("lastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    return obj;
}

QString OAIPlayerAchievement::getAchievementState() const {
    return m_achievement_state;
}
void OAIPlayerAchievement::setAchievementState(const QString &achievement_state) {
    m_achievement_state = achievement_state;
    m_achievement_state_isSet = true;
}

bool OAIPlayerAchievement::is_achievement_state_Set() const{
    return m_achievement_state_isSet;
}

bool OAIPlayerAchievement::is_achievement_state_Valid() const{
    return m_achievement_state_isValid;
}

qint32 OAIPlayerAchievement::getCurrentSteps() const {
    return m_current_steps;
}
void OAIPlayerAchievement::setCurrentSteps(const qint32 &current_steps) {
    m_current_steps = current_steps;
    m_current_steps_isSet = true;
}

bool OAIPlayerAchievement::is_current_steps_Set() const{
    return m_current_steps_isSet;
}

bool OAIPlayerAchievement::is_current_steps_Valid() const{
    return m_current_steps_isValid;
}

QString OAIPlayerAchievement::getExperiencePoints() const {
    return m_experience_points;
}
void OAIPlayerAchievement::setExperiencePoints(const QString &experience_points) {
    m_experience_points = experience_points;
    m_experience_points_isSet = true;
}

bool OAIPlayerAchievement::is_experience_points_Set() const{
    return m_experience_points_isSet;
}

bool OAIPlayerAchievement::is_experience_points_Valid() const{
    return m_experience_points_isValid;
}

QString OAIPlayerAchievement::getFormattedCurrentStepsString() const {
    return m_formatted_current_steps_string;
}
void OAIPlayerAchievement::setFormattedCurrentStepsString(const QString &formatted_current_steps_string) {
    m_formatted_current_steps_string = formatted_current_steps_string;
    m_formatted_current_steps_string_isSet = true;
}

bool OAIPlayerAchievement::is_formatted_current_steps_string_Set() const{
    return m_formatted_current_steps_string_isSet;
}

bool OAIPlayerAchievement::is_formatted_current_steps_string_Valid() const{
    return m_formatted_current_steps_string_isValid;
}

QString OAIPlayerAchievement::getId() const {
    return m_id;
}
void OAIPlayerAchievement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlayerAchievement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlayerAchievement::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlayerAchievement::getKind() const {
    return m_kind;
}
void OAIPlayerAchievement::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayerAchievement::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayerAchievement::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPlayerAchievement::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIPlayerAchievement::setLastUpdatedTimestamp(const QString &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIPlayerAchievement::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIPlayerAchievement::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

bool OAIPlayerAchievement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_current_steps_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerAchievement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
