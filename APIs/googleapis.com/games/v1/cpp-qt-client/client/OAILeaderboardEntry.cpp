/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaderboardEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaderboardEntry::OAILeaderboardEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaderboardEntry::OAILeaderboardEntry() {
    this->initializeModel();
}

OAILeaderboardEntry::~OAILeaderboardEntry() {}

void OAILeaderboardEntry::initializeModel() {

    m_formatted_score_isSet = false;
    m_formatted_score_isValid = false;

    m_formatted_score_rank_isSet = false;
    m_formatted_score_rank_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_score_rank_isSet = false;
    m_score_rank_isValid = false;

    m_score_tag_isSet = false;
    m_score_tag_isValid = false;

    m_score_value_isSet = false;
    m_score_value_isValid = false;

    m_time_span_isSet = false;
    m_time_span_isValid = false;

    m_write_timestamp_millis_isSet = false;
    m_write_timestamp_millis_isValid = false;
}

void OAILeaderboardEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaderboardEntry::fromJsonObject(QJsonObject json) {

    m_formatted_score_isValid = ::OpenAPI::fromJsonValue(m_formatted_score, json[QString("formattedScore")]);
    m_formatted_score_isSet = !json[QString("formattedScore")].isNull() && m_formatted_score_isValid;

    m_formatted_score_rank_isValid = ::OpenAPI::fromJsonValue(m_formatted_score_rank, json[QString("formattedScoreRank")]);
    m_formatted_score_rank_isSet = !json[QString("formattedScoreRank")].isNull() && m_formatted_score_rank_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_score_rank_isValid = ::OpenAPI::fromJsonValue(m_score_rank, json[QString("scoreRank")]);
    m_score_rank_isSet = !json[QString("scoreRank")].isNull() && m_score_rank_isValid;

    m_score_tag_isValid = ::OpenAPI::fromJsonValue(m_score_tag, json[QString("scoreTag")]);
    m_score_tag_isSet = !json[QString("scoreTag")].isNull() && m_score_tag_isValid;

    m_score_value_isValid = ::OpenAPI::fromJsonValue(m_score_value, json[QString("scoreValue")]);
    m_score_value_isSet = !json[QString("scoreValue")].isNull() && m_score_value_isValid;

    m_time_span_isValid = ::OpenAPI::fromJsonValue(m_time_span, json[QString("timeSpan")]);
    m_time_span_isSet = !json[QString("timeSpan")].isNull() && m_time_span_isValid;

    m_write_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_write_timestamp_millis, json[QString("writeTimestampMillis")]);
    m_write_timestamp_millis_isSet = !json[QString("writeTimestampMillis")].isNull() && m_write_timestamp_millis_isValid;
}

QString OAILeaderboardEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaderboardEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_score_isSet) {
        obj.insert(QString("formattedScore"), ::OpenAPI::toJsonValue(m_formatted_score));
    }
    if (m_formatted_score_rank_isSet) {
        obj.insert(QString("formattedScoreRank"), ::OpenAPI::toJsonValue(m_formatted_score_rank));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_player.isSet()) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_score_rank_isSet) {
        obj.insert(QString("scoreRank"), ::OpenAPI::toJsonValue(m_score_rank));
    }
    if (m_score_tag_isSet) {
        obj.insert(QString("scoreTag"), ::OpenAPI::toJsonValue(m_score_tag));
    }
    if (m_score_value_isSet) {
        obj.insert(QString("scoreValue"), ::OpenAPI::toJsonValue(m_score_value));
    }
    if (m_time_span_isSet) {
        obj.insert(QString("timeSpan"), ::OpenAPI::toJsonValue(m_time_span));
    }
    if (m_write_timestamp_millis_isSet) {
        obj.insert(QString("writeTimestampMillis"), ::OpenAPI::toJsonValue(m_write_timestamp_millis));
    }
    return obj;
}

QString OAILeaderboardEntry::getFormattedScore() const {
    return m_formatted_score;
}
void OAILeaderboardEntry::setFormattedScore(const QString &formatted_score) {
    m_formatted_score = formatted_score;
    m_formatted_score_isSet = true;
}

bool OAILeaderboardEntry::is_formatted_score_Set() const{
    return m_formatted_score_isSet;
}

bool OAILeaderboardEntry::is_formatted_score_Valid() const{
    return m_formatted_score_isValid;
}

QString OAILeaderboardEntry::getFormattedScoreRank() const {
    return m_formatted_score_rank;
}
void OAILeaderboardEntry::setFormattedScoreRank(const QString &formatted_score_rank) {
    m_formatted_score_rank = formatted_score_rank;
    m_formatted_score_rank_isSet = true;
}

bool OAILeaderboardEntry::is_formatted_score_rank_Set() const{
    return m_formatted_score_rank_isSet;
}

bool OAILeaderboardEntry::is_formatted_score_rank_Valid() const{
    return m_formatted_score_rank_isValid;
}

QString OAILeaderboardEntry::getKind() const {
    return m_kind;
}
void OAILeaderboardEntry::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILeaderboardEntry::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILeaderboardEntry::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPlayer OAILeaderboardEntry::getPlayer() const {
    return m_player;
}
void OAILeaderboardEntry::setPlayer(const OAIPlayer &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAILeaderboardEntry::is_player_Set() const{
    return m_player_isSet;
}

bool OAILeaderboardEntry::is_player_Valid() const{
    return m_player_isValid;
}

QString OAILeaderboardEntry::getScoreRank() const {
    return m_score_rank;
}
void OAILeaderboardEntry::setScoreRank(const QString &score_rank) {
    m_score_rank = score_rank;
    m_score_rank_isSet = true;
}

bool OAILeaderboardEntry::is_score_rank_Set() const{
    return m_score_rank_isSet;
}

bool OAILeaderboardEntry::is_score_rank_Valid() const{
    return m_score_rank_isValid;
}

QString OAILeaderboardEntry::getScoreTag() const {
    return m_score_tag;
}
void OAILeaderboardEntry::setScoreTag(const QString &score_tag) {
    m_score_tag = score_tag;
    m_score_tag_isSet = true;
}

bool OAILeaderboardEntry::is_score_tag_Set() const{
    return m_score_tag_isSet;
}

bool OAILeaderboardEntry::is_score_tag_Valid() const{
    return m_score_tag_isValid;
}

QString OAILeaderboardEntry::getScoreValue() const {
    return m_score_value;
}
void OAILeaderboardEntry::setScoreValue(const QString &score_value) {
    m_score_value = score_value;
    m_score_value_isSet = true;
}

bool OAILeaderboardEntry::is_score_value_Set() const{
    return m_score_value_isSet;
}

bool OAILeaderboardEntry::is_score_value_Valid() const{
    return m_score_value_isValid;
}

QString OAILeaderboardEntry::getTimeSpan() const {
    return m_time_span;
}
void OAILeaderboardEntry::setTimeSpan(const QString &time_span) {
    m_time_span = time_span;
    m_time_span_isSet = true;
}

bool OAILeaderboardEntry::is_time_span_Set() const{
    return m_time_span_isSet;
}

bool OAILeaderboardEntry::is_time_span_Valid() const{
    return m_time_span_isValid;
}

QString OAILeaderboardEntry::getWriteTimestampMillis() const {
    return m_write_timestamp_millis;
}
void OAILeaderboardEntry::setWriteTimestampMillis(const QString &write_timestamp_millis) {
    m_write_timestamp_millis = write_timestamp_millis;
    m_write_timestamp_millis_isSet = true;
}

bool OAILeaderboardEntry::is_write_timestamp_millis_Set() const{
    return m_write_timestamp_millis_isSet;
}

bool OAILeaderboardEntry::is_write_timestamp_millis_Valid() const{
    return m_write_timestamp_millis_isValid;
}

bool OAILeaderboardEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_score_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaderboardEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
