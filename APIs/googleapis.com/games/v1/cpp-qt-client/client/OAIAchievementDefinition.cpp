/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementDefinition::OAIAchievementDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementDefinition::OAIAchievementDefinition() {
    this->initializeModel();
}

OAIAchievementDefinition::~OAIAchievementDefinition() {}

void OAIAchievementDefinition::initializeModel() {

    m_achievement_type_isSet = false;
    m_achievement_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_experience_points_isSet = false;
    m_experience_points_isValid = false;

    m_formatted_total_steps_isSet = false;
    m_formatted_total_steps_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_state_isSet = false;
    m_initial_state_isValid = false;

    m_is_revealed_icon_url_default_isSet = false;
    m_is_revealed_icon_url_default_isValid = false;

    m_is_unlocked_icon_url_default_isSet = false;
    m_is_unlocked_icon_url_default_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revealed_icon_url_isSet = false;
    m_revealed_icon_url_isValid = false;

    m_total_steps_isSet = false;
    m_total_steps_isValid = false;

    m_unlocked_icon_url_isSet = false;
    m_unlocked_icon_url_isValid = false;
}

void OAIAchievementDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementDefinition::fromJsonObject(QJsonObject json) {

    m_achievement_type_isValid = ::OpenAPI::fromJsonValue(m_achievement_type, json[QString("achievementType")]);
    m_achievement_type_isSet = !json[QString("achievementType")].isNull() && m_achievement_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_experience_points_isValid = ::OpenAPI::fromJsonValue(m_experience_points, json[QString("experiencePoints")]);
    m_experience_points_isSet = !json[QString("experiencePoints")].isNull() && m_experience_points_isValid;

    m_formatted_total_steps_isValid = ::OpenAPI::fromJsonValue(m_formatted_total_steps, json[QString("formattedTotalSteps")]);
    m_formatted_total_steps_isSet = !json[QString("formattedTotalSteps")].isNull() && m_formatted_total_steps_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initial_state_isValid = ::OpenAPI::fromJsonValue(m_initial_state, json[QString("initialState")]);
    m_initial_state_isSet = !json[QString("initialState")].isNull() && m_initial_state_isValid;

    m_is_revealed_icon_url_default_isValid = ::OpenAPI::fromJsonValue(m_is_revealed_icon_url_default, json[QString("isRevealedIconUrlDefault")]);
    m_is_revealed_icon_url_default_isSet = !json[QString("isRevealedIconUrlDefault")].isNull() && m_is_revealed_icon_url_default_isValid;

    m_is_unlocked_icon_url_default_isValid = ::OpenAPI::fromJsonValue(m_is_unlocked_icon_url_default, json[QString("isUnlockedIconUrlDefault")]);
    m_is_unlocked_icon_url_default_isSet = !json[QString("isUnlockedIconUrlDefault")].isNull() && m_is_unlocked_icon_url_default_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revealed_icon_url_isValid = ::OpenAPI::fromJsonValue(m_revealed_icon_url, json[QString("revealedIconUrl")]);
    m_revealed_icon_url_isSet = !json[QString("revealedIconUrl")].isNull() && m_revealed_icon_url_isValid;

    m_total_steps_isValid = ::OpenAPI::fromJsonValue(m_total_steps, json[QString("totalSteps")]);
    m_total_steps_isSet = !json[QString("totalSteps")].isNull() && m_total_steps_isValid;

    m_unlocked_icon_url_isValid = ::OpenAPI::fromJsonValue(m_unlocked_icon_url, json[QString("unlockedIconUrl")]);
    m_unlocked_icon_url_isSet = !json[QString("unlockedIconUrl")].isNull() && m_unlocked_icon_url_isValid;
}

QString OAIAchievementDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_type_isSet) {
        obj.insert(QString("achievementType"), ::OpenAPI::toJsonValue(m_achievement_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_experience_points_isSet) {
        obj.insert(QString("experiencePoints"), ::OpenAPI::toJsonValue(m_experience_points));
    }
    if (m_formatted_total_steps_isSet) {
        obj.insert(QString("formattedTotalSteps"), ::OpenAPI::toJsonValue(m_formatted_total_steps));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_state_isSet) {
        obj.insert(QString("initialState"), ::OpenAPI::toJsonValue(m_initial_state));
    }
    if (m_is_revealed_icon_url_default_isSet) {
        obj.insert(QString("isRevealedIconUrlDefault"), ::OpenAPI::toJsonValue(m_is_revealed_icon_url_default));
    }
    if (m_is_unlocked_icon_url_default_isSet) {
        obj.insert(QString("isUnlockedIconUrlDefault"), ::OpenAPI::toJsonValue(m_is_unlocked_icon_url_default));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revealed_icon_url_isSet) {
        obj.insert(QString("revealedIconUrl"), ::OpenAPI::toJsonValue(m_revealed_icon_url));
    }
    if (m_total_steps_isSet) {
        obj.insert(QString("totalSteps"), ::OpenAPI::toJsonValue(m_total_steps));
    }
    if (m_unlocked_icon_url_isSet) {
        obj.insert(QString("unlockedIconUrl"), ::OpenAPI::toJsonValue(m_unlocked_icon_url));
    }
    return obj;
}

QString OAIAchievementDefinition::getAchievementType() const {
    return m_achievement_type;
}
void OAIAchievementDefinition::setAchievementType(const QString &achievement_type) {
    m_achievement_type = achievement_type;
    m_achievement_type_isSet = true;
}

bool OAIAchievementDefinition::is_achievement_type_Set() const{
    return m_achievement_type_isSet;
}

bool OAIAchievementDefinition::is_achievement_type_Valid() const{
    return m_achievement_type_isValid;
}

QString OAIAchievementDefinition::getDescription() const {
    return m_description;
}
void OAIAchievementDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAchievementDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAchievementDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAchievementDefinition::getExperiencePoints() const {
    return m_experience_points;
}
void OAIAchievementDefinition::setExperiencePoints(const QString &experience_points) {
    m_experience_points = experience_points;
    m_experience_points_isSet = true;
}

bool OAIAchievementDefinition::is_experience_points_Set() const{
    return m_experience_points_isSet;
}

bool OAIAchievementDefinition::is_experience_points_Valid() const{
    return m_experience_points_isValid;
}

QString OAIAchievementDefinition::getFormattedTotalSteps() const {
    return m_formatted_total_steps;
}
void OAIAchievementDefinition::setFormattedTotalSteps(const QString &formatted_total_steps) {
    m_formatted_total_steps = formatted_total_steps;
    m_formatted_total_steps_isSet = true;
}

bool OAIAchievementDefinition::is_formatted_total_steps_Set() const{
    return m_formatted_total_steps_isSet;
}

bool OAIAchievementDefinition::is_formatted_total_steps_Valid() const{
    return m_formatted_total_steps_isValid;
}

QString OAIAchievementDefinition::getId() const {
    return m_id;
}
void OAIAchievementDefinition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAchievementDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAchievementDefinition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAchievementDefinition::getInitialState() const {
    return m_initial_state;
}
void OAIAchievementDefinition::setInitialState(const QString &initial_state) {
    m_initial_state = initial_state;
    m_initial_state_isSet = true;
}

bool OAIAchievementDefinition::is_initial_state_Set() const{
    return m_initial_state_isSet;
}

bool OAIAchievementDefinition::is_initial_state_Valid() const{
    return m_initial_state_isValid;
}

bool OAIAchievementDefinition::isIsRevealedIconUrlDefault() const {
    return m_is_revealed_icon_url_default;
}
void OAIAchievementDefinition::setIsRevealedIconUrlDefault(const bool &is_revealed_icon_url_default) {
    m_is_revealed_icon_url_default = is_revealed_icon_url_default;
    m_is_revealed_icon_url_default_isSet = true;
}

bool OAIAchievementDefinition::is_is_revealed_icon_url_default_Set() const{
    return m_is_revealed_icon_url_default_isSet;
}

bool OAIAchievementDefinition::is_is_revealed_icon_url_default_Valid() const{
    return m_is_revealed_icon_url_default_isValid;
}

bool OAIAchievementDefinition::isIsUnlockedIconUrlDefault() const {
    return m_is_unlocked_icon_url_default;
}
void OAIAchievementDefinition::setIsUnlockedIconUrlDefault(const bool &is_unlocked_icon_url_default) {
    m_is_unlocked_icon_url_default = is_unlocked_icon_url_default;
    m_is_unlocked_icon_url_default_isSet = true;
}

bool OAIAchievementDefinition::is_is_unlocked_icon_url_default_Set() const{
    return m_is_unlocked_icon_url_default_isSet;
}

bool OAIAchievementDefinition::is_is_unlocked_icon_url_default_Valid() const{
    return m_is_unlocked_icon_url_default_isValid;
}

QString OAIAchievementDefinition::getKind() const {
    return m_kind;
}
void OAIAchievementDefinition::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementDefinition::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementDefinition::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAchievementDefinition::getName() const {
    return m_name;
}
void OAIAchievementDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAchievementDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAchievementDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAchievementDefinition::getRevealedIconUrl() const {
    return m_revealed_icon_url;
}
void OAIAchievementDefinition::setRevealedIconUrl(const QString &revealed_icon_url) {
    m_revealed_icon_url = revealed_icon_url;
    m_revealed_icon_url_isSet = true;
}

bool OAIAchievementDefinition::is_revealed_icon_url_Set() const{
    return m_revealed_icon_url_isSet;
}

bool OAIAchievementDefinition::is_revealed_icon_url_Valid() const{
    return m_revealed_icon_url_isValid;
}

qint32 OAIAchievementDefinition::getTotalSteps() const {
    return m_total_steps;
}
void OAIAchievementDefinition::setTotalSteps(const qint32 &total_steps) {
    m_total_steps = total_steps;
    m_total_steps_isSet = true;
}

bool OAIAchievementDefinition::is_total_steps_Set() const{
    return m_total_steps_isSet;
}

bool OAIAchievementDefinition::is_total_steps_Valid() const{
    return m_total_steps_isValid;
}

QString OAIAchievementDefinition::getUnlockedIconUrl() const {
    return m_unlocked_icon_url;
}
void OAIAchievementDefinition::setUnlockedIconUrl(const QString &unlocked_icon_url) {
    m_unlocked_icon_url = unlocked_icon_url;
    m_unlocked_icon_url_isSet = true;
}

bool OAIAchievementDefinition::is_unlocked_icon_url_Set() const{
    return m_unlocked_icon_url_isSet;
}

bool OAIAchievementDefinition::is_unlocked_icon_url_Valid() const{
    return m_unlocked_icon_url_isValid;
}

bool OAIAchievementDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_total_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_revealed_icon_url_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unlocked_icon_url_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revealed_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
