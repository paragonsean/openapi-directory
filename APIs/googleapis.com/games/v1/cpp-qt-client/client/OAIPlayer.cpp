/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_avatar_image_url_isSet = false;
    m_avatar_image_url_isValid = false;

    m_banner_url_landscape_isSet = false;
    m_banner_url_landscape_isValid = false;

    m_banner_url_portrait_isSet = false;
    m_banner_url_portrait_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_experience_info_isSet = false;
    m_experience_info_isValid = false;

    m_friend_status_isSet = false;
    m_friend_status_isValid = false;

    m_game_player_id_isSet = false;
    m_game_player_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_player_id_isSet = false;
    m_original_player_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_profile_settings_isSet = false;
    m_profile_settings_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_avatar_image_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_image_url, json[QString("avatarImageUrl")]);
    m_avatar_image_url_isSet = !json[QString("avatarImageUrl")].isNull() && m_avatar_image_url_isValid;

    m_banner_url_landscape_isValid = ::OpenAPI::fromJsonValue(m_banner_url_landscape, json[QString("bannerUrlLandscape")]);
    m_banner_url_landscape_isSet = !json[QString("bannerUrlLandscape")].isNull() && m_banner_url_landscape_isValid;

    m_banner_url_portrait_isValid = ::OpenAPI::fromJsonValue(m_banner_url_portrait, json[QString("bannerUrlPortrait")]);
    m_banner_url_portrait_isSet = !json[QString("bannerUrlPortrait")].isNull() && m_banner_url_portrait_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_experience_info_isValid = ::OpenAPI::fromJsonValue(m_experience_info, json[QString("experienceInfo")]);
    m_experience_info_isSet = !json[QString("experienceInfo")].isNull() && m_experience_info_isValid;

    m_friend_status_isValid = ::OpenAPI::fromJsonValue(m_friend_status, json[QString("friendStatus")]);
    m_friend_status_isSet = !json[QString("friendStatus")].isNull() && m_friend_status_isValid;

    m_game_player_id_isValid = ::OpenAPI::fromJsonValue(m_game_player_id, json[QString("gamePlayerId")]);
    m_game_player_id_isSet = !json[QString("gamePlayerId")].isNull() && m_game_player_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_player_id_isValid = ::OpenAPI::fromJsonValue(m_original_player_id, json[QString("originalPlayerId")]);
    m_original_player_id_isSet = !json[QString("originalPlayerId")].isNull() && m_original_player_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_profile_settings_isValid = ::OpenAPI::fromJsonValue(m_profile_settings, json[QString("profileSettings")]);
    m_profile_settings_isSet = !json[QString("profileSettings")].isNull() && m_profile_settings_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_image_url_isSet) {
        obj.insert(QString("avatarImageUrl"), ::OpenAPI::toJsonValue(m_avatar_image_url));
    }
    if (m_banner_url_landscape_isSet) {
        obj.insert(QString("bannerUrlLandscape"), ::OpenAPI::toJsonValue(m_banner_url_landscape));
    }
    if (m_banner_url_portrait_isSet) {
        obj.insert(QString("bannerUrlPortrait"), ::OpenAPI::toJsonValue(m_banner_url_portrait));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_experience_info.isSet()) {
        obj.insert(QString("experienceInfo"), ::OpenAPI::toJsonValue(m_experience_info));
    }
    if (m_friend_status_isSet) {
        obj.insert(QString("friendStatus"), ::OpenAPI::toJsonValue(m_friend_status));
    }
    if (m_game_player_id_isSet) {
        obj.insert(QString("gamePlayerId"), ::OpenAPI::toJsonValue(m_game_player_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_player_id_isSet) {
        obj.insert(QString("originalPlayerId"), ::OpenAPI::toJsonValue(m_original_player_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_profile_settings.isSet()) {
        obj.insert(QString("profileSettings"), ::OpenAPI::toJsonValue(m_profile_settings));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPlayer::getAvatarImageUrl() const {
    return m_avatar_image_url;
}
void OAIPlayer::setAvatarImageUrl(const QString &avatar_image_url) {
    m_avatar_image_url = avatar_image_url;
    m_avatar_image_url_isSet = true;
}

bool OAIPlayer::is_avatar_image_url_Set() const{
    return m_avatar_image_url_isSet;
}

bool OAIPlayer::is_avatar_image_url_Valid() const{
    return m_avatar_image_url_isValid;
}

QString OAIPlayer::getBannerUrlLandscape() const {
    return m_banner_url_landscape;
}
void OAIPlayer::setBannerUrlLandscape(const QString &banner_url_landscape) {
    m_banner_url_landscape = banner_url_landscape;
    m_banner_url_landscape_isSet = true;
}

bool OAIPlayer::is_banner_url_landscape_Set() const{
    return m_banner_url_landscape_isSet;
}

bool OAIPlayer::is_banner_url_landscape_Valid() const{
    return m_banner_url_landscape_isValid;
}

QString OAIPlayer::getBannerUrlPortrait() const {
    return m_banner_url_portrait;
}
void OAIPlayer::setBannerUrlPortrait(const QString &banner_url_portrait) {
    m_banner_url_portrait = banner_url_portrait;
    m_banner_url_portrait_isSet = true;
}

bool OAIPlayer::is_banner_url_portrait_Set() const{
    return m_banner_url_portrait_isSet;
}

bool OAIPlayer::is_banner_url_portrait_Valid() const{
    return m_banner_url_portrait_isValid;
}

QString OAIPlayer::getDisplayName() const {
    return m_display_name;
}
void OAIPlayer::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPlayer::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPlayer::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIPlayerExperienceInfo OAIPlayer::getExperienceInfo() const {
    return m_experience_info;
}
void OAIPlayer::setExperienceInfo(const OAIPlayerExperienceInfo &experience_info) {
    m_experience_info = experience_info;
    m_experience_info_isSet = true;
}

bool OAIPlayer::is_experience_info_Set() const{
    return m_experience_info_isSet;
}

bool OAIPlayer::is_experience_info_Valid() const{
    return m_experience_info_isValid;
}

QString OAIPlayer::getFriendStatus() const {
    return m_friend_status;
}
void OAIPlayer::setFriendStatus(const QString &friend_status) {
    m_friend_status = friend_status;
    m_friend_status_isSet = true;
}

bool OAIPlayer::is_friend_status_Set() const{
    return m_friend_status_isSet;
}

bool OAIPlayer::is_friend_status_Valid() const{
    return m_friend_status_isValid;
}

QString OAIPlayer::getGamePlayerId() const {
    return m_game_player_id;
}
void OAIPlayer::setGamePlayerId(const QString &game_player_id) {
    m_game_player_id = game_player_id;
    m_game_player_id_isSet = true;
}

bool OAIPlayer::is_game_player_id_Set() const{
    return m_game_player_id_isSet;
}

bool OAIPlayer::is_game_player_id_Valid() const{
    return m_game_player_id_isValid;
}

QString OAIPlayer::getKind() const {
    return m_kind;
}
void OAIPlayer::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayer::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayer::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPlayer_name OAIPlayer::getName() const {
    return m_name;
}
void OAIPlayer::setName(const OAIPlayer_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlayer::getOriginalPlayerId() const {
    return m_original_player_id;
}
void OAIPlayer::setOriginalPlayerId(const QString &original_player_id) {
    m_original_player_id = original_player_id;
    m_original_player_id_isSet = true;
}

bool OAIPlayer::is_original_player_id_Set() const{
    return m_original_player_id_isSet;
}

bool OAIPlayer::is_original_player_id_Valid() const{
    return m_original_player_id_isValid;
}

QString OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

OAIProfileSettings OAIPlayer::getProfileSettings() const {
    return m_profile_settings;
}
void OAIPlayer::setProfileSettings(const OAIProfileSettings &profile_settings) {
    m_profile_settings = profile_settings;
    m_profile_settings_isSet = true;
}

bool OAIPlayer::is_profile_settings_Set() const{
    return m_profile_settings_isSet;
}

bool OAIPlayer::is_profile_settings_Valid() const{
    return m_profile_settings_isValid;
}

QString OAIPlayer::getTitle() const {
    return m_title;
}
void OAIPlayer::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlayer::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlayer::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_url_landscape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_url_portrait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friend_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
