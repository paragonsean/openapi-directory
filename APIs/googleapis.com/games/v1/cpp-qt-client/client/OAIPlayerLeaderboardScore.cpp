/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerLeaderboardScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerLeaderboardScore::OAIPlayerLeaderboardScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerLeaderboardScore::OAIPlayerLeaderboardScore() {
    this->initializeModel();
}

OAIPlayerLeaderboardScore::~OAIPlayerLeaderboardScore() {}

void OAIPlayerLeaderboardScore::initializeModel() {

    m_friends_rank_isSet = false;
    m_friends_rank_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_leaderboard_id_isSet = false;
    m_leaderboard_id_isValid = false;

    m_public_rank_isSet = false;
    m_public_rank_isValid = false;

    m_score_string_isSet = false;
    m_score_string_isValid = false;

    m_score_tag_isSet = false;
    m_score_tag_isValid = false;

    m_score_value_isSet = false;
    m_score_value_isValid = false;

    m_social_rank_isSet = false;
    m_social_rank_isValid = false;

    m_time_span_isSet = false;
    m_time_span_isValid = false;

    m_write_timestamp_isSet = false;
    m_write_timestamp_isValid = false;
}

void OAIPlayerLeaderboardScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerLeaderboardScore::fromJsonObject(QJsonObject json) {

    m_friends_rank_isValid = ::OpenAPI::fromJsonValue(m_friends_rank, json[QString("friendsRank")]);
    m_friends_rank_isSet = !json[QString("friendsRank")].isNull() && m_friends_rank_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_leaderboard_id_isValid = ::OpenAPI::fromJsonValue(m_leaderboard_id, json[QString("leaderboard_id")]);
    m_leaderboard_id_isSet = !json[QString("leaderboard_id")].isNull() && m_leaderboard_id_isValid;

    m_public_rank_isValid = ::OpenAPI::fromJsonValue(m_public_rank, json[QString("publicRank")]);
    m_public_rank_isSet = !json[QString("publicRank")].isNull() && m_public_rank_isValid;

    m_score_string_isValid = ::OpenAPI::fromJsonValue(m_score_string, json[QString("scoreString")]);
    m_score_string_isSet = !json[QString("scoreString")].isNull() && m_score_string_isValid;

    m_score_tag_isValid = ::OpenAPI::fromJsonValue(m_score_tag, json[QString("scoreTag")]);
    m_score_tag_isSet = !json[QString("scoreTag")].isNull() && m_score_tag_isValid;

    m_score_value_isValid = ::OpenAPI::fromJsonValue(m_score_value, json[QString("scoreValue")]);
    m_score_value_isSet = !json[QString("scoreValue")].isNull() && m_score_value_isValid;

    m_social_rank_isValid = ::OpenAPI::fromJsonValue(m_social_rank, json[QString("socialRank")]);
    m_social_rank_isSet = !json[QString("socialRank")].isNull() && m_social_rank_isValid;

    m_time_span_isValid = ::OpenAPI::fromJsonValue(m_time_span, json[QString("timeSpan")]);
    m_time_span_isSet = !json[QString("timeSpan")].isNull() && m_time_span_isValid;

    m_write_timestamp_isValid = ::OpenAPI::fromJsonValue(m_write_timestamp, json[QString("writeTimestamp")]);
    m_write_timestamp_isSet = !json[QString("writeTimestamp")].isNull() && m_write_timestamp_isValid;
}

QString OAIPlayerLeaderboardScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerLeaderboardScore::asJsonObject() const {
    QJsonObject obj;
    if (m_friends_rank.isSet()) {
        obj.insert(QString("friendsRank"), ::OpenAPI::toJsonValue(m_friends_rank));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_leaderboard_id_isSet) {
        obj.insert(QString("leaderboard_id"), ::OpenAPI::toJsonValue(m_leaderboard_id));
    }
    if (m_public_rank.isSet()) {
        obj.insert(QString("publicRank"), ::OpenAPI::toJsonValue(m_public_rank));
    }
    if (m_score_string_isSet) {
        obj.insert(QString("scoreString"), ::OpenAPI::toJsonValue(m_score_string));
    }
    if (m_score_tag_isSet) {
        obj.insert(QString("scoreTag"), ::OpenAPI::toJsonValue(m_score_tag));
    }
    if (m_score_value_isSet) {
        obj.insert(QString("scoreValue"), ::OpenAPI::toJsonValue(m_score_value));
    }
    if (m_social_rank.isSet()) {
        obj.insert(QString("socialRank"), ::OpenAPI::toJsonValue(m_social_rank));
    }
    if (m_time_span_isSet) {
        obj.insert(QString("timeSpan"), ::OpenAPI::toJsonValue(m_time_span));
    }
    if (m_write_timestamp_isSet) {
        obj.insert(QString("writeTimestamp"), ::OpenAPI::toJsonValue(m_write_timestamp));
    }
    return obj;
}

OAILeaderboardScoreRank OAIPlayerLeaderboardScore::getFriendsRank() const {
    return m_friends_rank;
}
void OAIPlayerLeaderboardScore::setFriendsRank(const OAILeaderboardScoreRank &friends_rank) {
    m_friends_rank = friends_rank;
    m_friends_rank_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_friends_rank_Set() const{
    return m_friends_rank_isSet;
}

bool OAIPlayerLeaderboardScore::is_friends_rank_Valid() const{
    return m_friends_rank_isValid;
}

QString OAIPlayerLeaderboardScore::getKind() const {
    return m_kind;
}
void OAIPlayerLeaderboardScore::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayerLeaderboardScore::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPlayerLeaderboardScore::getLeaderboardId() const {
    return m_leaderboard_id;
}
void OAIPlayerLeaderboardScore::setLeaderboardId(const QString &leaderboard_id) {
    m_leaderboard_id = leaderboard_id;
    m_leaderboard_id_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_leaderboard_id_Set() const{
    return m_leaderboard_id_isSet;
}

bool OAIPlayerLeaderboardScore::is_leaderboard_id_Valid() const{
    return m_leaderboard_id_isValid;
}

OAILeaderboardScoreRank OAIPlayerLeaderboardScore::getPublicRank() const {
    return m_public_rank;
}
void OAIPlayerLeaderboardScore::setPublicRank(const OAILeaderboardScoreRank &public_rank) {
    m_public_rank = public_rank;
    m_public_rank_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_public_rank_Set() const{
    return m_public_rank_isSet;
}

bool OAIPlayerLeaderboardScore::is_public_rank_Valid() const{
    return m_public_rank_isValid;
}

QString OAIPlayerLeaderboardScore::getScoreString() const {
    return m_score_string;
}
void OAIPlayerLeaderboardScore::setScoreString(const QString &score_string) {
    m_score_string = score_string;
    m_score_string_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_score_string_Set() const{
    return m_score_string_isSet;
}

bool OAIPlayerLeaderboardScore::is_score_string_Valid() const{
    return m_score_string_isValid;
}

QString OAIPlayerLeaderboardScore::getScoreTag() const {
    return m_score_tag;
}
void OAIPlayerLeaderboardScore::setScoreTag(const QString &score_tag) {
    m_score_tag = score_tag;
    m_score_tag_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_score_tag_Set() const{
    return m_score_tag_isSet;
}

bool OAIPlayerLeaderboardScore::is_score_tag_Valid() const{
    return m_score_tag_isValid;
}

QString OAIPlayerLeaderboardScore::getScoreValue() const {
    return m_score_value;
}
void OAIPlayerLeaderboardScore::setScoreValue(const QString &score_value) {
    m_score_value = score_value;
    m_score_value_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_score_value_Set() const{
    return m_score_value_isSet;
}

bool OAIPlayerLeaderboardScore::is_score_value_Valid() const{
    return m_score_value_isValid;
}

OAILeaderboardScoreRank OAIPlayerLeaderboardScore::getSocialRank() const {
    return m_social_rank;
}
void OAIPlayerLeaderboardScore::setSocialRank(const OAILeaderboardScoreRank &social_rank) {
    m_social_rank = social_rank;
    m_social_rank_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_social_rank_Set() const{
    return m_social_rank_isSet;
}

bool OAIPlayerLeaderboardScore::is_social_rank_Valid() const{
    return m_social_rank_isValid;
}

QString OAIPlayerLeaderboardScore::getTimeSpan() const {
    return m_time_span;
}
void OAIPlayerLeaderboardScore::setTimeSpan(const QString &time_span) {
    m_time_span = time_span;
    m_time_span_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_time_span_Set() const{
    return m_time_span_isSet;
}

bool OAIPlayerLeaderboardScore::is_time_span_Valid() const{
    return m_time_span_isValid;
}

QString OAIPlayerLeaderboardScore::getWriteTimestamp() const {
    return m_write_timestamp;
}
void OAIPlayerLeaderboardScore::setWriteTimestamp(const QString &write_timestamp) {
    m_write_timestamp = write_timestamp;
    m_write_timestamp_isSet = true;
}

bool OAIPlayerLeaderboardScore::is_write_timestamp_Set() const{
    return m_write_timestamp_isSet;
}

bool OAIPlayerLeaderboardScore::is_write_timestamp_Valid() const{
    return m_write_timestamp_isValid;
}

bool OAIPlayerLeaderboardScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friends_rank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaderboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_rank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_rank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerLeaderboardScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
