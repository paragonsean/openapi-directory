/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAsset::OAIImageAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAsset::OAIImageAsset() {
    this->initializeModel();
}

OAIImageAsset::~OAIImageAsset() {}

void OAIImageAsset::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImageAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAsset::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImageAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIImageAsset::getHeight() const {
    return m_height;
}
void OAIImageAsset::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageAsset::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageAsset::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIImageAsset::getKind() const {
    return m_kind;
}
void OAIImageAsset::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIImageAsset::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIImageAsset::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIImageAsset::getName() const {
    return m_name;
}
void OAIImageAsset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageAsset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageAsset::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageAsset::getUrl() const {
    return m_url;
}
void OAIImageAsset::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageAsset::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageAsset::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIImageAsset::getWidth() const {
    return m_width;
}
void OAIImageAsset::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageAsset::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageAsset::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImageAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
