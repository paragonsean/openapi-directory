/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGamesAchievementIncrement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGamesAchievementIncrement::OAIGamesAchievementIncrement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGamesAchievementIncrement::OAIGamesAchievementIncrement() {
    this->initializeModel();
}

OAIGamesAchievementIncrement::~OAIGamesAchievementIncrement() {}

void OAIGamesAchievementIncrement::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIGamesAchievementIncrement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGamesAchievementIncrement::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIGamesAchievementIncrement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGamesAchievementIncrement::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_steps_isSet) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

QString OAIGamesAchievementIncrement::getKind() const {
    return m_kind;
}
void OAIGamesAchievementIncrement::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGamesAchievementIncrement::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGamesAchievementIncrement::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIGamesAchievementIncrement::getRequestId() const {
    return m_request_id;
}
void OAIGamesAchievementIncrement::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGamesAchievementIncrement::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGamesAchievementIncrement::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIGamesAchievementIncrement::getSteps() const {
    return m_steps;
}
void OAIGamesAchievementIncrement::setSteps(const qint32 &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIGamesAchievementIncrement::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIGamesAchievementIncrement::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIGamesAchievementIncrement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGamesAchievementIncrement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
