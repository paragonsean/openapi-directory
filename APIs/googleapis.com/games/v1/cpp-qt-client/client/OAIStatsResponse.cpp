/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatsResponse::OAIStatsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatsResponse::OAIStatsResponse() {
    this->initializeModel();
}

OAIStatsResponse::~OAIStatsResponse() {}

void OAIStatsResponse::initializeModel() {

    m_avg_session_length_minutes_isSet = false;
    m_avg_session_length_minutes_isValid = false;

    m_churn_probability_isSet = false;
    m_churn_probability_isValid = false;

    m_days_since_last_played_isSet = false;
    m_days_since_last_played_isValid = false;

    m_high_spender_probability_isSet = false;
    m_high_spender_probability_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_num_purchases_isSet = false;
    m_num_purchases_isValid = false;

    m_num_sessions_isSet = false;
    m_num_sessions_isValid = false;

    m_num_sessions_percentile_isSet = false;
    m_num_sessions_percentile_isValid = false;

    m_spend_percentile_isSet = false;
    m_spend_percentile_isValid = false;

    m_spend_probability_isSet = false;
    m_spend_probability_isValid = false;

    m_total_spend_next_28_days_isSet = false;
    m_total_spend_next_28_days_isValid = false;
}

void OAIStatsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatsResponse::fromJsonObject(QJsonObject json) {

    m_avg_session_length_minutes_isValid = ::OpenAPI::fromJsonValue(m_avg_session_length_minutes, json[QString("avg_session_length_minutes")]);
    m_avg_session_length_minutes_isSet = !json[QString("avg_session_length_minutes")].isNull() && m_avg_session_length_minutes_isValid;

    m_churn_probability_isValid = ::OpenAPI::fromJsonValue(m_churn_probability, json[QString("churn_probability")]);
    m_churn_probability_isSet = !json[QString("churn_probability")].isNull() && m_churn_probability_isValid;

    m_days_since_last_played_isValid = ::OpenAPI::fromJsonValue(m_days_since_last_played, json[QString("days_since_last_played")]);
    m_days_since_last_played_isSet = !json[QString("days_since_last_played")].isNull() && m_days_since_last_played_isValid;

    m_high_spender_probability_isValid = ::OpenAPI::fromJsonValue(m_high_spender_probability, json[QString("high_spender_probability")]);
    m_high_spender_probability_isSet = !json[QString("high_spender_probability")].isNull() && m_high_spender_probability_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_num_purchases_isValid = ::OpenAPI::fromJsonValue(m_num_purchases, json[QString("num_purchases")]);
    m_num_purchases_isSet = !json[QString("num_purchases")].isNull() && m_num_purchases_isValid;

    m_num_sessions_isValid = ::OpenAPI::fromJsonValue(m_num_sessions, json[QString("num_sessions")]);
    m_num_sessions_isSet = !json[QString("num_sessions")].isNull() && m_num_sessions_isValid;

    m_num_sessions_percentile_isValid = ::OpenAPI::fromJsonValue(m_num_sessions_percentile, json[QString("num_sessions_percentile")]);
    m_num_sessions_percentile_isSet = !json[QString("num_sessions_percentile")].isNull() && m_num_sessions_percentile_isValid;

    m_spend_percentile_isValid = ::OpenAPI::fromJsonValue(m_spend_percentile, json[QString("spend_percentile")]);
    m_spend_percentile_isSet = !json[QString("spend_percentile")].isNull() && m_spend_percentile_isValid;

    m_spend_probability_isValid = ::OpenAPI::fromJsonValue(m_spend_probability, json[QString("spend_probability")]);
    m_spend_probability_isSet = !json[QString("spend_probability")].isNull() && m_spend_probability_isValid;

    m_total_spend_next_28_days_isValid = ::OpenAPI::fromJsonValue(m_total_spend_next_28_days, json[QString("total_spend_next_28_days")]);
    m_total_spend_next_28_days_isSet = !json[QString("total_spend_next_28_days")].isNull() && m_total_spend_next_28_days_isValid;
}

QString OAIStatsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_session_length_minutes_isSet) {
        obj.insert(QString("avg_session_length_minutes"), ::OpenAPI::toJsonValue(m_avg_session_length_minutes));
    }
    if (m_churn_probability_isSet) {
        obj.insert(QString("churn_probability"), ::OpenAPI::toJsonValue(m_churn_probability));
    }
    if (m_days_since_last_played_isSet) {
        obj.insert(QString("days_since_last_played"), ::OpenAPI::toJsonValue(m_days_since_last_played));
    }
    if (m_high_spender_probability_isSet) {
        obj.insert(QString("high_spender_probability"), ::OpenAPI::toJsonValue(m_high_spender_probability));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_num_purchases_isSet) {
        obj.insert(QString("num_purchases"), ::OpenAPI::toJsonValue(m_num_purchases));
    }
    if (m_num_sessions_isSet) {
        obj.insert(QString("num_sessions"), ::OpenAPI::toJsonValue(m_num_sessions));
    }
    if (m_num_sessions_percentile_isSet) {
        obj.insert(QString("num_sessions_percentile"), ::OpenAPI::toJsonValue(m_num_sessions_percentile));
    }
    if (m_spend_percentile_isSet) {
        obj.insert(QString("spend_percentile"), ::OpenAPI::toJsonValue(m_spend_percentile));
    }
    if (m_spend_probability_isSet) {
        obj.insert(QString("spend_probability"), ::OpenAPI::toJsonValue(m_spend_probability));
    }
    if (m_total_spend_next_28_days_isSet) {
        obj.insert(QString("total_spend_next_28_days"), ::OpenAPI::toJsonValue(m_total_spend_next_28_days));
    }
    return obj;
}

float OAIStatsResponse::getAvgSessionLengthMinutes() const {
    return m_avg_session_length_minutes;
}
void OAIStatsResponse::setAvgSessionLengthMinutes(const float &avg_session_length_minutes) {
    m_avg_session_length_minutes = avg_session_length_minutes;
    m_avg_session_length_minutes_isSet = true;
}

bool OAIStatsResponse::is_avg_session_length_minutes_Set() const{
    return m_avg_session_length_minutes_isSet;
}

bool OAIStatsResponse::is_avg_session_length_minutes_Valid() const{
    return m_avg_session_length_minutes_isValid;
}

float OAIStatsResponse::getChurnProbability() const {
    return m_churn_probability;
}
void OAIStatsResponse::setChurnProbability(const float &churn_probability) {
    m_churn_probability = churn_probability;
    m_churn_probability_isSet = true;
}

bool OAIStatsResponse::is_churn_probability_Set() const{
    return m_churn_probability_isSet;
}

bool OAIStatsResponse::is_churn_probability_Valid() const{
    return m_churn_probability_isValid;
}

qint32 OAIStatsResponse::getDaysSinceLastPlayed() const {
    return m_days_since_last_played;
}
void OAIStatsResponse::setDaysSinceLastPlayed(const qint32 &days_since_last_played) {
    m_days_since_last_played = days_since_last_played;
    m_days_since_last_played_isSet = true;
}

bool OAIStatsResponse::is_days_since_last_played_Set() const{
    return m_days_since_last_played_isSet;
}

bool OAIStatsResponse::is_days_since_last_played_Valid() const{
    return m_days_since_last_played_isValid;
}

float OAIStatsResponse::getHighSpenderProbability() const {
    return m_high_spender_probability;
}
void OAIStatsResponse::setHighSpenderProbability(const float &high_spender_probability) {
    m_high_spender_probability = high_spender_probability;
    m_high_spender_probability_isSet = true;
}

bool OAIStatsResponse::is_high_spender_probability_Set() const{
    return m_high_spender_probability_isSet;
}

bool OAIStatsResponse::is_high_spender_probability_Valid() const{
    return m_high_spender_probability_isValid;
}

QString OAIStatsResponse::getKind() const {
    return m_kind;
}
void OAIStatsResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStatsResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStatsResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIStatsResponse::getNumPurchases() const {
    return m_num_purchases;
}
void OAIStatsResponse::setNumPurchases(const qint32 &num_purchases) {
    m_num_purchases = num_purchases;
    m_num_purchases_isSet = true;
}

bool OAIStatsResponse::is_num_purchases_Set() const{
    return m_num_purchases_isSet;
}

bool OAIStatsResponse::is_num_purchases_Valid() const{
    return m_num_purchases_isValid;
}

qint32 OAIStatsResponse::getNumSessions() const {
    return m_num_sessions;
}
void OAIStatsResponse::setNumSessions(const qint32 &num_sessions) {
    m_num_sessions = num_sessions;
    m_num_sessions_isSet = true;
}

bool OAIStatsResponse::is_num_sessions_Set() const{
    return m_num_sessions_isSet;
}

bool OAIStatsResponse::is_num_sessions_Valid() const{
    return m_num_sessions_isValid;
}

float OAIStatsResponse::getNumSessionsPercentile() const {
    return m_num_sessions_percentile;
}
void OAIStatsResponse::setNumSessionsPercentile(const float &num_sessions_percentile) {
    m_num_sessions_percentile = num_sessions_percentile;
    m_num_sessions_percentile_isSet = true;
}

bool OAIStatsResponse::is_num_sessions_percentile_Set() const{
    return m_num_sessions_percentile_isSet;
}

bool OAIStatsResponse::is_num_sessions_percentile_Valid() const{
    return m_num_sessions_percentile_isValid;
}

float OAIStatsResponse::getSpendPercentile() const {
    return m_spend_percentile;
}
void OAIStatsResponse::setSpendPercentile(const float &spend_percentile) {
    m_spend_percentile = spend_percentile;
    m_spend_percentile_isSet = true;
}

bool OAIStatsResponse::is_spend_percentile_Set() const{
    return m_spend_percentile_isSet;
}

bool OAIStatsResponse::is_spend_percentile_Valid() const{
    return m_spend_percentile_isValid;
}

float OAIStatsResponse::getSpendProbability() const {
    return m_spend_probability;
}
void OAIStatsResponse::setSpendProbability(const float &spend_probability) {
    m_spend_probability = spend_probability;
    m_spend_probability_isSet = true;
}

bool OAIStatsResponse::is_spend_probability_Set() const{
    return m_spend_probability_isSet;
}

bool OAIStatsResponse::is_spend_probability_Valid() const{
    return m_spend_probability_isValid;
}

float OAIStatsResponse::getTotalSpendNext28Days() const {
    return m_total_spend_next_28_days;
}
void OAIStatsResponse::setTotalSpendNext28Days(const float &total_spend_next_28_days) {
    m_total_spend_next_28_days = total_spend_next_28_days;
    m_total_spend_next_28_days_isSet = true;
}

bool OAIStatsResponse::is_total_spend_next_28_days_Set() const{
    return m_total_spend_next_28_days_isSet;
}

bool OAIStatsResponse::is_total_spend_next_28_days_Valid() const{
    return m_total_spend_next_28_days_isValid;
}

bool OAIStatsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_session_length_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_churn_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_since_last_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_spender_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_purchases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_sessions_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spend_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spend_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_spend_next_28_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
