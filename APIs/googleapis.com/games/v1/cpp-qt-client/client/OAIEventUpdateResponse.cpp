/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventUpdateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventUpdateResponse::OAIEventUpdateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventUpdateResponse::OAIEventUpdateResponse() {
    this->initializeModel();
}

OAIEventUpdateResponse::~OAIEventUpdateResponse() {}

void OAIEventUpdateResponse::initializeModel() {

    m_batch_failures_isSet = false;
    m_batch_failures_isValid = false;

    m_event_failures_isSet = false;
    m_event_failures_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_player_events_isSet = false;
    m_player_events_isValid = false;
}

void OAIEventUpdateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventUpdateResponse::fromJsonObject(QJsonObject json) {

    m_batch_failures_isValid = ::OpenAPI::fromJsonValue(m_batch_failures, json[QString("batchFailures")]);
    m_batch_failures_isSet = !json[QString("batchFailures")].isNull() && m_batch_failures_isValid;

    m_event_failures_isValid = ::OpenAPI::fromJsonValue(m_event_failures, json[QString("eventFailures")]);
    m_event_failures_isSet = !json[QString("eventFailures")].isNull() && m_event_failures_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_player_events_isValid = ::OpenAPI::fromJsonValue(m_player_events, json[QString("playerEvents")]);
    m_player_events_isSet = !json[QString("playerEvents")].isNull() && m_player_events_isValid;
}

QString OAIEventUpdateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventUpdateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_failures.size() > 0) {
        obj.insert(QString("batchFailures"), ::OpenAPI::toJsonValue(m_batch_failures));
    }
    if (m_event_failures.size() > 0) {
        obj.insert(QString("eventFailures"), ::OpenAPI::toJsonValue(m_event_failures));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_player_events.size() > 0) {
        obj.insert(QString("playerEvents"), ::OpenAPI::toJsonValue(m_player_events));
    }
    return obj;
}

QList<OAIEventBatchRecordFailure> OAIEventUpdateResponse::getBatchFailures() const {
    return m_batch_failures;
}
void OAIEventUpdateResponse::setBatchFailures(const QList<OAIEventBatchRecordFailure> &batch_failures) {
    m_batch_failures = batch_failures;
    m_batch_failures_isSet = true;
}

bool OAIEventUpdateResponse::is_batch_failures_Set() const{
    return m_batch_failures_isSet;
}

bool OAIEventUpdateResponse::is_batch_failures_Valid() const{
    return m_batch_failures_isValid;
}

QList<OAIEventRecordFailure> OAIEventUpdateResponse::getEventFailures() const {
    return m_event_failures;
}
void OAIEventUpdateResponse::setEventFailures(const QList<OAIEventRecordFailure> &event_failures) {
    m_event_failures = event_failures;
    m_event_failures_isSet = true;
}

bool OAIEventUpdateResponse::is_event_failures_Set() const{
    return m_event_failures_isSet;
}

bool OAIEventUpdateResponse::is_event_failures_Valid() const{
    return m_event_failures_isValid;
}

QString OAIEventUpdateResponse::getKind() const {
    return m_kind;
}
void OAIEventUpdateResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventUpdateResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventUpdateResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIPlayerEvent> OAIEventUpdateResponse::getPlayerEvents() const {
    return m_player_events;
}
void OAIEventUpdateResponse::setPlayerEvents(const QList<OAIPlayerEvent> &player_events) {
    m_player_events = player_events;
    m_player_events_isSet = true;
}

bool OAIEventUpdateResponse::is_player_events_Set() const{
    return m_player_events_isSet;
}

bool OAIEventUpdateResponse::is_player_events_Valid() const{
    return m_player_events_isValid;
}

bool OAIEventUpdateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventUpdateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
