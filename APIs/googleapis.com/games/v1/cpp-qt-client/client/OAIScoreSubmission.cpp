/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreSubmission::OAIScoreSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreSubmission::OAIScoreSubmission() {
    this->initializeModel();
}

OAIScoreSubmission::~OAIScoreSubmission() {}

void OAIScoreSubmission::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_leaderboard_id_isSet = false;
    m_leaderboard_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_score_tag_isSet = false;
    m_score_tag_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIScoreSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreSubmission::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_leaderboard_id_isValid = ::OpenAPI::fromJsonValue(m_leaderboard_id, json[QString("leaderboardId")]);
    m_leaderboard_id_isSet = !json[QString("leaderboardId")].isNull() && m_leaderboard_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_score_tag_isValid = ::OpenAPI::fromJsonValue(m_score_tag, json[QString("scoreTag")]);
    m_score_tag_isSet = !json[QString("scoreTag")].isNull() && m_score_tag_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIScoreSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_leaderboard_id_isSet) {
        obj.insert(QString("leaderboardId"), ::OpenAPI::toJsonValue(m_leaderboard_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_score_tag_isSet) {
        obj.insert(QString("scoreTag"), ::OpenAPI::toJsonValue(m_score_tag));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAIScoreSubmission::getKind() const {
    return m_kind;
}
void OAIScoreSubmission::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIScoreSubmission::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIScoreSubmission::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIScoreSubmission::getLeaderboardId() const {
    return m_leaderboard_id;
}
void OAIScoreSubmission::setLeaderboardId(const QString &leaderboard_id) {
    m_leaderboard_id = leaderboard_id;
    m_leaderboard_id_isSet = true;
}

bool OAIScoreSubmission::is_leaderboard_id_Set() const{
    return m_leaderboard_id_isSet;
}

bool OAIScoreSubmission::is_leaderboard_id_Valid() const{
    return m_leaderboard_id_isValid;
}

QString OAIScoreSubmission::getScore() const {
    return m_score;
}
void OAIScoreSubmission::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIScoreSubmission::is_score_Set() const{
    return m_score_isSet;
}

bool OAIScoreSubmission::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIScoreSubmission::getScoreTag() const {
    return m_score_tag;
}
void OAIScoreSubmission::setScoreTag(const QString &score_tag) {
    m_score_tag = score_tag;
    m_score_tag_isSet = true;
}

bool OAIScoreSubmission::is_score_tag_Set() const{
    return m_score_tag_isSet;
}

bool OAIScoreSubmission::is_score_tag_Valid() const{
    return m_score_tag_isValid;
}

QString OAIScoreSubmission::getSignature() const {
    return m_signature;
}
void OAIScoreSubmission::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIScoreSubmission::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIScoreSubmission::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIScoreSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaderboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
