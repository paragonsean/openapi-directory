/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceAndroidDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceAndroidDetails::OAIInstanceAndroidDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceAndroidDetails::OAIInstanceAndroidDetails() {
    this->initializeModel();
}

OAIInstanceAndroidDetails::~OAIInstanceAndroidDetails() {}

void OAIInstanceAndroidDetails::initializeModel() {

    m_enable_piracy_check_isSet = false;
    m_enable_piracy_check_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;
}

void OAIInstanceAndroidDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceAndroidDetails::fromJsonObject(QJsonObject json) {

    m_enable_piracy_check_isValid = ::OpenAPI::fromJsonValue(m_enable_piracy_check, json[QString("enablePiracyCheck")]);
    m_enable_piracy_check_isSet = !json[QString("enablePiracyCheck")].isNull() && m_enable_piracy_check_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;
}

QString OAIInstanceAndroidDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceAndroidDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_piracy_check_isSet) {
        obj.insert(QString("enablePiracyCheck"), ::OpenAPI::toJsonValue(m_enable_piracy_check));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    return obj;
}

bool OAIInstanceAndroidDetails::isEnablePiracyCheck() const {
    return m_enable_piracy_check;
}
void OAIInstanceAndroidDetails::setEnablePiracyCheck(const bool &enable_piracy_check) {
    m_enable_piracy_check = enable_piracy_check;
    m_enable_piracy_check_isSet = true;
}

bool OAIInstanceAndroidDetails::is_enable_piracy_check_Set() const{
    return m_enable_piracy_check_isSet;
}

bool OAIInstanceAndroidDetails::is_enable_piracy_check_Valid() const{
    return m_enable_piracy_check_isValid;
}

QString OAIInstanceAndroidDetails::getKind() const {
    return m_kind;
}
void OAIInstanceAndroidDetails::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIInstanceAndroidDetails::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIInstanceAndroidDetails::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIInstanceAndroidDetails::getPackageName() const {
    return m_package_name;
}
void OAIInstanceAndroidDetails::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIInstanceAndroidDetails::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIInstanceAndroidDetails::is_package_name_Valid() const{
    return m_package_name_isValid;
}

bool OAIInstanceAndroidDetails::isPreferred() const {
    return m_preferred;
}
void OAIInstanceAndroidDetails::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIInstanceAndroidDetails::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIInstanceAndroidDetails::is_preferred_Valid() const{
    return m_preferred_isValid;
}

bool OAIInstanceAndroidDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_piracy_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceAndroidDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
