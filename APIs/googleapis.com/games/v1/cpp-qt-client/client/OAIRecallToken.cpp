/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecallToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecallToken::OAIRecallToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecallToken::OAIRecallToken() {
    this->initializeModel();
}

OAIRecallToken::~OAIRecallToken() {}

void OAIRecallToken::initializeModel() {

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_multi_player_persona_isSet = false;
    m_multi_player_persona_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIRecallToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecallToken::fromJsonObject(QJsonObject json) {

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_multi_player_persona_isValid = ::OpenAPI::fromJsonValue(m_multi_player_persona, json[QString("multiPlayerPersona")]);
    m_multi_player_persona_isSet = !json[QString("multiPlayerPersona")].isNull() && m_multi_player_persona_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIRecallToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecallToken::asJsonObject() const {
    QJsonObject obj;
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_multi_player_persona_isSet) {
        obj.insert(QString("multiPlayerPersona"), ::OpenAPI::toJsonValue(m_multi_player_persona));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIRecallToken::getExpireTime() const {
    return m_expire_time;
}
void OAIRecallToken::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIRecallToken::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIRecallToken::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

bool OAIRecallToken::isMultiPlayerPersona() const {
    return m_multi_player_persona;
}
void OAIRecallToken::setMultiPlayerPersona(const bool &multi_player_persona) {
    m_multi_player_persona = multi_player_persona;
    m_multi_player_persona_isSet = true;
}

bool OAIRecallToken::is_multi_player_persona_Set() const{
    return m_multi_player_persona_isSet;
}

bool OAIRecallToken::is_multi_player_persona_Valid() const{
    return m_multi_player_persona_isValid;
}

QString OAIRecallToken::getToken() const {
    return m_token;
}
void OAIRecallToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIRecallToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIRecallToken::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIRecallToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_player_persona_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecallToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
