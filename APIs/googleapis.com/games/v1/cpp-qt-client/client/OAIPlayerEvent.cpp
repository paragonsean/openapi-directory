/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerEvent::OAIPlayerEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerEvent::OAIPlayerEvent() {
    this->initializeModel();
}

OAIPlayerEvent::~OAIPlayerEvent() {}

void OAIPlayerEvent::initializeModel() {

    m_definition_id_isSet = false;
    m_definition_id_isValid = false;

    m_formatted_num_events_isSet = false;
    m_formatted_num_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_num_events_isSet = false;
    m_num_events_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;
}

void OAIPlayerEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerEvent::fromJsonObject(QJsonObject json) {

    m_definition_id_isValid = ::OpenAPI::fromJsonValue(m_definition_id, json[QString("definitionId")]);
    m_definition_id_isSet = !json[QString("definitionId")].isNull() && m_definition_id_isValid;

    m_formatted_num_events_isValid = ::OpenAPI::fromJsonValue(m_formatted_num_events, json[QString("formattedNumEvents")]);
    m_formatted_num_events_isSet = !json[QString("formattedNumEvents")].isNull() && m_formatted_num_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_num_events_isValid = ::OpenAPI::fromJsonValue(m_num_events, json[QString("numEvents")]);
    m_num_events_isSet = !json[QString("numEvents")].isNull() && m_num_events_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;
}

QString OAIPlayerEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_definition_id_isSet) {
        obj.insert(QString("definitionId"), ::OpenAPI::toJsonValue(m_definition_id));
    }
    if (m_formatted_num_events_isSet) {
        obj.insert(QString("formattedNumEvents"), ::OpenAPI::toJsonValue(m_formatted_num_events));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_num_events_isSet) {
        obj.insert(QString("numEvents"), ::OpenAPI::toJsonValue(m_num_events));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    return obj;
}

QString OAIPlayerEvent::getDefinitionId() const {
    return m_definition_id;
}
void OAIPlayerEvent::setDefinitionId(const QString &definition_id) {
    m_definition_id = definition_id;
    m_definition_id_isSet = true;
}

bool OAIPlayerEvent::is_definition_id_Set() const{
    return m_definition_id_isSet;
}

bool OAIPlayerEvent::is_definition_id_Valid() const{
    return m_definition_id_isValid;
}

QString OAIPlayerEvent::getFormattedNumEvents() const {
    return m_formatted_num_events;
}
void OAIPlayerEvent::setFormattedNumEvents(const QString &formatted_num_events) {
    m_formatted_num_events = formatted_num_events;
    m_formatted_num_events_isSet = true;
}

bool OAIPlayerEvent::is_formatted_num_events_Set() const{
    return m_formatted_num_events_isSet;
}

bool OAIPlayerEvent::is_formatted_num_events_Valid() const{
    return m_formatted_num_events_isValid;
}

QString OAIPlayerEvent::getKind() const {
    return m_kind;
}
void OAIPlayerEvent::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlayerEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlayerEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPlayerEvent::getNumEvents() const {
    return m_num_events;
}
void OAIPlayerEvent::setNumEvents(const QString &num_events) {
    m_num_events = num_events;
    m_num_events_isSet = true;
}

bool OAIPlayerEvent::is_num_events_Set() const{
    return m_num_events_isSet;
}

bool OAIPlayerEvent::is_num_events_Valid() const{
    return m_num_events_isValid;
}

QString OAIPlayerEvent::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerEvent::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerEvent::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerEvent::is_player_id_Valid() const{
    return m_player_id_isValid;
}

bool OAIPlayerEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_num_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
