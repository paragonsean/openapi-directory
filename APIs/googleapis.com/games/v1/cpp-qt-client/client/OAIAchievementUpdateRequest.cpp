/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementUpdateRequest::OAIAchievementUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementUpdateRequest::OAIAchievementUpdateRequest() {
    this->initializeModel();
}

OAIAchievementUpdateRequest::~OAIAchievementUpdateRequest() {}

void OAIAchievementUpdateRequest::initializeModel() {

    m_achievement_id_isSet = false;
    m_achievement_id_isValid = false;

    m_increment_payload_isSet = false;
    m_increment_payload_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_set_steps_at_least_payload_isSet = false;
    m_set_steps_at_least_payload_isValid = false;

    m_update_type_isSet = false;
    m_update_type_isValid = false;
}

void OAIAchievementUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementUpdateRequest::fromJsonObject(QJsonObject json) {

    m_achievement_id_isValid = ::OpenAPI::fromJsonValue(m_achievement_id, json[QString("achievementId")]);
    m_achievement_id_isSet = !json[QString("achievementId")].isNull() && m_achievement_id_isValid;

    m_increment_payload_isValid = ::OpenAPI::fromJsonValue(m_increment_payload, json[QString("incrementPayload")]);
    m_increment_payload_isSet = !json[QString("incrementPayload")].isNull() && m_increment_payload_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_set_steps_at_least_payload_isValid = ::OpenAPI::fromJsonValue(m_set_steps_at_least_payload, json[QString("setStepsAtLeastPayload")]);
    m_set_steps_at_least_payload_isSet = !json[QString("setStepsAtLeastPayload")].isNull() && m_set_steps_at_least_payload_isValid;

    m_update_type_isValid = ::OpenAPI::fromJsonValue(m_update_type, json[QString("updateType")]);
    m_update_type_isSet = !json[QString("updateType")].isNull() && m_update_type_isValid;
}

QString OAIAchievementUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_id_isSet) {
        obj.insert(QString("achievementId"), ::OpenAPI::toJsonValue(m_achievement_id));
    }
    if (m_increment_payload.isSet()) {
        obj.insert(QString("incrementPayload"), ::OpenAPI::toJsonValue(m_increment_payload));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_set_steps_at_least_payload.isSet()) {
        obj.insert(QString("setStepsAtLeastPayload"), ::OpenAPI::toJsonValue(m_set_steps_at_least_payload));
    }
    if (m_update_type_isSet) {
        obj.insert(QString("updateType"), ::OpenAPI::toJsonValue(m_update_type));
    }
    return obj;
}

QString OAIAchievementUpdateRequest::getAchievementId() const {
    return m_achievement_id;
}
void OAIAchievementUpdateRequest::setAchievementId(const QString &achievement_id) {
    m_achievement_id = achievement_id;
    m_achievement_id_isSet = true;
}

bool OAIAchievementUpdateRequest::is_achievement_id_Set() const{
    return m_achievement_id_isSet;
}

bool OAIAchievementUpdateRequest::is_achievement_id_Valid() const{
    return m_achievement_id_isValid;
}

OAIGamesAchievementIncrement OAIAchievementUpdateRequest::getIncrementPayload() const {
    return m_increment_payload;
}
void OAIAchievementUpdateRequest::setIncrementPayload(const OAIGamesAchievementIncrement &increment_payload) {
    m_increment_payload = increment_payload;
    m_increment_payload_isSet = true;
}

bool OAIAchievementUpdateRequest::is_increment_payload_Set() const{
    return m_increment_payload_isSet;
}

bool OAIAchievementUpdateRequest::is_increment_payload_Valid() const{
    return m_increment_payload_isValid;
}

QString OAIAchievementUpdateRequest::getKind() const {
    return m_kind;
}
void OAIAchievementUpdateRequest::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementUpdateRequest::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementUpdateRequest::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIGamesAchievementSetStepsAtLeast OAIAchievementUpdateRequest::getSetStepsAtLeastPayload() const {
    return m_set_steps_at_least_payload;
}
void OAIAchievementUpdateRequest::setSetStepsAtLeastPayload(const OAIGamesAchievementSetStepsAtLeast &set_steps_at_least_payload) {
    m_set_steps_at_least_payload = set_steps_at_least_payload;
    m_set_steps_at_least_payload_isSet = true;
}

bool OAIAchievementUpdateRequest::is_set_steps_at_least_payload_Set() const{
    return m_set_steps_at_least_payload_isSet;
}

bool OAIAchievementUpdateRequest::is_set_steps_at_least_payload_Valid() const{
    return m_set_steps_at_least_payload_isValid;
}

QString OAIAchievementUpdateRequest::getUpdateType() const {
    return m_update_type;
}
void OAIAchievementUpdateRequest::setUpdateType(const QString &update_type) {
    m_update_type = update_type;
    m_update_type_isSet = true;
}

bool OAIAchievementUpdateRequest::is_update_type_Set() const{
    return m_update_type_isSet;
}

bool OAIAchievementUpdateRequest::is_update_type_Valid() const{
    return m_update_type_isValid;
}

bool OAIAchievementUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_steps_at_least_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
