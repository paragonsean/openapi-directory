/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScopedPlayerIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScopedPlayerIds::OAIScopedPlayerIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScopedPlayerIds::OAIScopedPlayerIds() {
    this->initializeModel();
}

OAIScopedPlayerIds::~OAIScopedPlayerIds() {}

void OAIScopedPlayerIds::initializeModel() {

    m_developer_player_key_isSet = false;
    m_developer_player_key_isValid = false;

    m_game_player_id_isSet = false;
    m_game_player_id_isValid = false;
}

void OAIScopedPlayerIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScopedPlayerIds::fromJsonObject(QJsonObject json) {

    m_developer_player_key_isValid = ::OpenAPI::fromJsonValue(m_developer_player_key, json[QString("developerPlayerKey")]);
    m_developer_player_key_isSet = !json[QString("developerPlayerKey")].isNull() && m_developer_player_key_isValid;

    m_game_player_id_isValid = ::OpenAPI::fromJsonValue(m_game_player_id, json[QString("gamePlayerId")]);
    m_game_player_id_isSet = !json[QString("gamePlayerId")].isNull() && m_game_player_id_isValid;
}

QString OAIScopedPlayerIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScopedPlayerIds::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_player_key_isSet) {
        obj.insert(QString("developerPlayerKey"), ::OpenAPI::toJsonValue(m_developer_player_key));
    }
    if (m_game_player_id_isSet) {
        obj.insert(QString("gamePlayerId"), ::OpenAPI::toJsonValue(m_game_player_id));
    }
    return obj;
}

QString OAIScopedPlayerIds::getDeveloperPlayerKey() const {
    return m_developer_player_key;
}
void OAIScopedPlayerIds::setDeveloperPlayerKey(const QString &developer_player_key) {
    m_developer_player_key = developer_player_key;
    m_developer_player_key_isSet = true;
}

bool OAIScopedPlayerIds::is_developer_player_key_Set() const{
    return m_developer_player_key_isSet;
}

bool OAIScopedPlayerIds::is_developer_player_key_Valid() const{
    return m_developer_player_key_isValid;
}

QString OAIScopedPlayerIds::getGamePlayerId() const {
    return m_game_player_id;
}
void OAIScopedPlayerIds::setGamePlayerId(const QString &game_player_id) {
    m_game_player_id = game_player_id;
    m_game_player_id_isSet = true;
}

bool OAIScopedPlayerIds::is_game_player_id_Set() const{
    return m_game_player_id_isSet;
}

bool OAIScopedPlayerIds::is_game_player_id_Valid() const{
    return m_game_player_id_isValid;
}

bool OAIScopedPlayerIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_player_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScopedPlayerIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
