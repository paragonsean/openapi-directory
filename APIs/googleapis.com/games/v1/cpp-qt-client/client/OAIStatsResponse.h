/**
 * Google Play Game Services
 * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatsResponse.h
 *
 * A third party stats resource.
 */

#ifndef OAIStatsResponse_H
#define OAIStatsResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatsResponse : public OAIObject {
public:
    OAIStatsResponse();
    OAIStatsResponse(QString json);
    ~OAIStatsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAvgSessionLengthMinutes() const;
    void setAvgSessionLengthMinutes(const float &avg_session_length_minutes);
    bool is_avg_session_length_minutes_Set() const;
    bool is_avg_session_length_minutes_Valid() const;

    float getChurnProbability() const;
    void setChurnProbability(const float &churn_probability);
    bool is_churn_probability_Set() const;
    bool is_churn_probability_Valid() const;

    qint32 getDaysSinceLastPlayed() const;
    void setDaysSinceLastPlayed(const qint32 &days_since_last_played);
    bool is_days_since_last_played_Set() const;
    bool is_days_since_last_played_Valid() const;

    float getHighSpenderProbability() const;
    void setHighSpenderProbability(const float &high_spender_probability);
    bool is_high_spender_probability_Set() const;
    bool is_high_spender_probability_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    qint32 getNumPurchases() const;
    void setNumPurchases(const qint32 &num_purchases);
    bool is_num_purchases_Set() const;
    bool is_num_purchases_Valid() const;

    qint32 getNumSessions() const;
    void setNumSessions(const qint32 &num_sessions);
    bool is_num_sessions_Set() const;
    bool is_num_sessions_Valid() const;

    float getNumSessionsPercentile() const;
    void setNumSessionsPercentile(const float &num_sessions_percentile);
    bool is_num_sessions_percentile_Set() const;
    bool is_num_sessions_percentile_Valid() const;

    float getSpendPercentile() const;
    void setSpendPercentile(const float &spend_percentile);
    bool is_spend_percentile_Set() const;
    bool is_spend_percentile_Valid() const;

    float getSpendProbability() const;
    void setSpendProbability(const float &spend_probability);
    bool is_spend_probability_Set() const;
    bool is_spend_probability_Valid() const;

    float getTotalSpendNext28Days() const;
    void setTotalSpendNext28Days(const float &total_spend_next_28_days);
    bool is_total_spend_next_28_days_Set() const;
    bool is_total_spend_next_28_days_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_avg_session_length_minutes;
    bool m_avg_session_length_minutes_isSet;
    bool m_avg_session_length_minutes_isValid;

    float m_churn_probability;
    bool m_churn_probability_isSet;
    bool m_churn_probability_isValid;

    qint32 m_days_since_last_played;
    bool m_days_since_last_played_isSet;
    bool m_days_since_last_played_isValid;

    float m_high_spender_probability;
    bool m_high_spender_probability_isSet;
    bool m_high_spender_probability_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    qint32 m_num_purchases;
    bool m_num_purchases_isSet;
    bool m_num_purchases_isValid;

    qint32 m_num_sessions;
    bool m_num_sessions_isSet;
    bool m_num_sessions_isValid;

    float m_num_sessions_percentile;
    bool m_num_sessions_percentile_isSet;
    bool m_num_sessions_percentile_isValid;

    float m_spend_percentile;
    bool m_spend_percentile_isSet;
    bool m_spend_percentile_isValid;

    float m_spend_probability;
    bool m_spend_probability_isSet;
    bool m_spend_probability_isValid;

    float m_total_spend_next_28_days;
    bool m_total_spend_next_28_days_isSet;
    bool m_total_spend_next_28_days_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatsResponse)

#endif // OAIStatsResponse_H
