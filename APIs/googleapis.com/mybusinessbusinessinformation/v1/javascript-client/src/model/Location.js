/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdWordsLocationExtensions from './AdWordsLocationExtensions';
import BusinessHours from './BusinessHours';
import Categories from './Categories';
import LatLng from './LatLng';
import Metadata from './Metadata';
import MoreHours from './MoreHours';
import OpenInfo from './OpenInfo';
import PhoneNumbers from './PhoneNumbers';
import PostalAddress from './PostalAddress';
import Profile from './Profile';
import RelationshipData from './RelationshipData';
import ServiceAreaBusiness from './ServiceAreaBusiness';
import ServiceItem from './ServiceItem';
import SpecialHours from './SpecialHours';

/**
 * The Location model module.
 * @module model/Location
 * @version v1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('adWordsLocationExtensions')) {
                obj['adWordsLocationExtensions'] = AdWordsLocationExtensions.constructFromObject(data['adWordsLocationExtensions']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = Categories.constructFromObject(data['categories']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('latlng')) {
                obj['latlng'] = LatLng.constructFromObject(data['latlng']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('moreHours')) {
                obj['moreHours'] = ApiClient.convertToType(data['moreHours'], [MoreHours]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('openInfo')) {
                obj['openInfo'] = OpenInfo.constructFromObject(data['openInfo']);
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = PhoneNumbers.constructFromObject(data['phoneNumbers']);
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = Profile.constructFromObject(data['profile']);
            }
            if (data.hasOwnProperty('regularHours')) {
                obj['regularHours'] = BusinessHours.constructFromObject(data['regularHours']);
            }
            if (data.hasOwnProperty('relationshipData')) {
                obj['relationshipData'] = RelationshipData.constructFromObject(data['relationshipData']);
            }
            if (data.hasOwnProperty('serviceArea')) {
                obj['serviceArea'] = ServiceAreaBusiness.constructFromObject(data['serviceArea']);
            }
            if (data.hasOwnProperty('serviceItems')) {
                obj['serviceItems'] = ApiClient.convertToType(data['serviceItems'], [ServiceItem]);
            }
            if (data.hasOwnProperty('specialHours')) {
                obj['specialHours'] = SpecialHours.constructFromObject(data['specialHours']);
            }
            if (data.hasOwnProperty('storeCode')) {
                obj['storeCode'] = ApiClient.convertToType(data['storeCode'], 'String');
            }
            if (data.hasOwnProperty('storefrontAddress')) {
                obj['storefrontAddress'] = PostalAddress.constructFromObject(data['storefrontAddress']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('websiteUri')) {
                obj['websiteUri'] = ApiClient.convertToType(data['websiteUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adWordsLocationExtensions`
        if (data['adWordsLocationExtensions']) { // data not null
          AdWordsLocationExtensions.validateJSON(data['adWordsLocationExtensions']);
        }
        // validate the optional field `categories`
        if (data['categories']) { // data not null
          Categories.validateJSON(data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // validate the optional field `latlng`
        if (data['latlng']) { // data not null
          LatLng.validateJSON(data['latlng']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        if (data['moreHours']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['moreHours'])) {
                throw new Error("Expected the field `moreHours` to be an array in the JSON data but got " + data['moreHours']);
            }
            // validate the optional field `moreHours` (array)
            for (const item of data['moreHours']) {
                MoreHours.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `openInfo`
        if (data['openInfo']) { // data not null
          OpenInfo.validateJSON(data['openInfo']);
        }
        // validate the optional field `phoneNumbers`
        if (data['phoneNumbers']) { // data not null
          PhoneNumbers.validateJSON(data['phoneNumbers']);
        }
        // validate the optional field `profile`
        if (data['profile']) { // data not null
          Profile.validateJSON(data['profile']);
        }
        // validate the optional field `regularHours`
        if (data['regularHours']) { // data not null
          BusinessHours.validateJSON(data['regularHours']);
        }
        // validate the optional field `relationshipData`
        if (data['relationshipData']) { // data not null
          RelationshipData.validateJSON(data['relationshipData']);
        }
        // validate the optional field `serviceArea`
        if (data['serviceArea']) { // data not null
          ServiceAreaBusiness.validateJSON(data['serviceArea']);
        }
        if (data['serviceItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceItems'])) {
                throw new Error("Expected the field `serviceItems` to be an array in the JSON data but got " + data['serviceItems']);
            }
            // validate the optional field `serviceItems` (array)
            for (const item of data['serviceItems']) {
                ServiceItem.validateJSON(item);
            };
        }
        // validate the optional field `specialHours`
        if (data['specialHours']) { // data not null
          SpecialHours.validateJSON(data['specialHours']);
        }
        // ensure the json data is a string
        if (data['storeCode'] && !(typeof data['storeCode'] === 'string' || data['storeCode'] instanceof String)) {
            throw new Error("Expected the field `storeCode` to be a primitive type in the JSON string but got " + data['storeCode']);
        }
        // validate the optional field `storefrontAddress`
        if (data['storefrontAddress']) { // data not null
          PostalAddress.validateJSON(data['storefrontAddress']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['websiteUri'] && !(typeof data['websiteUri'] === 'string' || data['websiteUri'] instanceof String)) {
            throw new Error("Expected the field `websiteUri` to be a primitive type in the JSON string but got " + data['websiteUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdWordsLocationExtensions} adWordsLocationExtensions
 */
Location.prototype['adWordsLocationExtensions'] = undefined;

/**
 * @member {module:model/Categories} categories
 */
Location.prototype['categories'] = undefined;

/**
 * Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.
 * @member {Array.<String>} labels
 */
Location.prototype['labels'] = undefined;

/**
 * Immutable. The language of the location. Set during creation and not updateable.
 * @member {String} languageCode
 */
Location.prototype['languageCode'] = undefined;

/**
 * @member {module:model/LatLng} latlng
 */
Location.prototype['latlng'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
Location.prototype['metadata'] = undefined;

/**
 * Optional. More hours for a business's different departments or specific customers.
 * @member {Array.<module:model/MoreHours>} moreHours
 */
Location.prototype['moreHours'] = undefined;

/**
 * Google identifier for this location in the form: `locations/{location_id}`.
 * @member {String} name
 */
Location.prototype['name'] = undefined;

/**
 * @member {module:model/OpenInfo} openInfo
 */
Location.prototype['openInfo'] = undefined;

/**
 * @member {module:model/PhoneNumbers} phoneNumbers
 */
Location.prototype['phoneNumbers'] = undefined;

/**
 * @member {module:model/Profile} profile
 */
Location.prototype['profile'] = undefined;

/**
 * @member {module:model/BusinessHours} regularHours
 */
Location.prototype['regularHours'] = undefined;

/**
 * @member {module:model/RelationshipData} relationshipData
 */
Location.prototype['relationshipData'] = undefined;

/**
 * @member {module:model/ServiceAreaBusiness} serviceArea
 */
Location.prototype['serviceArea'] = undefined;

/**
 * Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.
 * @member {Array.<module:model/ServiceItem>} serviceItems
 */
Location.prototype['serviceItems'] = undefined;

/**
 * @member {module:model/SpecialHours} specialHours
 */
Location.prototype['specialHours'] = undefined;

/**
 * Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records.
 * @member {String} storeCode
 */
Location.prototype['storeCode'] = undefined;

/**
 * @member {module:model/PostalAddress} storefrontAddress
 */
Location.prototype['storefrontAddress'] = undefined;

/**
 * Required. Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer \"Google\" over \"Google Inc. - Mountain View Corporate Headquarters\"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, \"Chase ATM in Duane Reade\").
 * @member {String} title
 */
Location.prototype['title'] = undefined;

/**
 * Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
 * @member {String} websiteUri
 */
Location.prototype['websiteUri'] = undefined;






export default Location;

