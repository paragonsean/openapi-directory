/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Places from './Places';

/**
 * The ServiceAreaBusiness model module.
 * @module model/ServiceAreaBusiness
 * @version v1
 */
class ServiceAreaBusiness {
    /**
     * Constructs a new <code>ServiceAreaBusiness</code>.
     * Service area businesses provide their service at the customer&#39;s location (for example, a locksmith or plumber).
     * @alias module:model/ServiceAreaBusiness
     */
    constructor() { 
        
        ServiceAreaBusiness.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceAreaBusiness</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceAreaBusiness} obj Optional instance to populate.
     * @return {module:model/ServiceAreaBusiness} The populated <code>ServiceAreaBusiness</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceAreaBusiness();

            if (data.hasOwnProperty('businessType')) {
                obj['businessType'] = ApiClient.convertToType(data['businessType'], 'String');
            }
            if (data.hasOwnProperty('places')) {
                obj['places'] = Places.constructFromObject(data['places']);
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceAreaBusiness</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceAreaBusiness</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['businessType'] && !(typeof data['businessType'] === 'string' || data['businessType'] instanceof String)) {
            throw new Error("Expected the field `businessType` to be a primitive type in the JSON string but got " + data['businessType']);
        }
        // validate the optional field `places`
        if (data['places']) { // data not null
          Places.validateJSON(data['places']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }

        return true;
    }


}



/**
 * Required. Indicates the type of the service area business.
 * @member {module:model/ServiceAreaBusiness.BusinessTypeEnum} businessType
 */
ServiceAreaBusiness.prototype['businessType'] = undefined;

/**
 * @member {module:model/Places} places
 */
ServiceAreaBusiness.prototype['places'] = undefined;

/**
 * Immutable. CLDR region code of the country/region that this service area business is based in. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland. This field is required for CUSTOMER_LOCATION_ONLY businesses, and is ignored otherwise. The region specified here can be different from regions for the areas that this business serves (e.g. service area businesses that provide services in regions other than the one that they are based in). If this location requires verification after creation, the address provided for verification purposes *must* be located within this region, and the business owner or their authorized representative *must* be able to receive postal mail at the provided verification address.
 * @member {String} regionCode
 */
ServiceAreaBusiness.prototype['regionCode'] = undefined;





/**
 * Allowed values for the <code>businessType</code> property.
 * @enum {String}
 * @readonly
 */
ServiceAreaBusiness['BusinessTypeEnum'] = {

    /**
     * value: "BUSINESS_TYPE_UNSPECIFIED"
     * @const
     */
    "BUSINESS_TYPE_UNSPECIFIED": "BUSINESS_TYPE_UNSPECIFIED",

    /**
     * value: "CUSTOMER_LOCATION_ONLY"
     * @const
     */
    "CUSTOMER_LOCATION_ONLY": "CUSTOMER_LOCATION_ONLY",

    /**
     * value: "CUSTOMER_AND_BUSINESS_LOCATION"
     * @const
     */
    "CUSTOMER_AND_BUSINESS_LOCATION": "CUSTOMER_AND_BUSINESS_LOCATION"
};



export default ServiceAreaBusiness;

