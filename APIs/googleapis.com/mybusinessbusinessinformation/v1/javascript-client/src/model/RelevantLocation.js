/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RelevantLocation model module.
 * @module model/RelevantLocation
 * @version v1
 */
class RelevantLocation {
    /**
     * Constructs a new <code>RelevantLocation</code>.
     * Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.
     * @alias module:model/RelevantLocation
     */
    constructor() { 
        
        RelevantLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelevantLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelevantLocation} obj Optional instance to populate.
     * @return {module:model/RelevantLocation} The populated <code>RelevantLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelevantLocation();

            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('relationType')) {
                obj['relationType'] = ApiClient.convertToType(data['relationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelevantLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelevantLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        // ensure the json data is a string
        if (data['relationType'] && !(typeof data['relationType'] === 'string' || data['relationType'] instanceof String)) {
            throw new Error("Expected the field `relationType` to be a primitive type in the JSON string but got " + data['relationType']);
        }

        return true;
    }


}



/**
 * Required. Specify the location that is on the other side of the relation by its placeID.
 * @member {String} placeId
 */
RelevantLocation.prototype['placeId'] = undefined;

/**
 * Required. The type of the relationship.
 * @member {module:model/RelevantLocation.RelationTypeEnum} relationType
 */
RelevantLocation.prototype['relationType'] = undefined;





/**
 * Allowed values for the <code>relationType</code> property.
 * @enum {String}
 * @readonly
 */
RelevantLocation['RelationTypeEnum'] = {

    /**
     * value: "RELATION_TYPE_UNSPECIFIED"
     * @const
     */
    "RELATION_TYPE_UNSPECIFIED": "RELATION_TYPE_UNSPECIFIED",

    /**
     * value: "DEPARTMENT_OF"
     * @const
     */
    "DEPARTMENT_OF": "DEPARTMENT_OF",

    /**
     * value: "INDEPENDENT_ESTABLISHMENT_IN"
     * @const
     */
    "INDEPENDENT_ESTABLISHMENT_IN": "INDEPENDENT_ESTABLISHMENT_IN"
};



export default RelevantLocation;

