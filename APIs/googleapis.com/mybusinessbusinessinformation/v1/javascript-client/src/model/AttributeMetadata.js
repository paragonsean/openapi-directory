/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValueMetadata from './AttributeValueMetadata';

/**
 * The AttributeMetadata model module.
 * @module model/AttributeMetadata
 * @version v1
 */
class AttributeMetadata {
    /**
     * Constructs a new <code>AttributeMetadata</code>.
     * Metadata for an attribute. Contains display information for the attribute, including a localized name and a heading for grouping related attributes together.
     * @alias module:model/AttributeMetadata
     */
    constructor() { 
        
        AttributeMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeMetadata} obj Optional instance to populate.
     * @return {module:model/AttributeMetadata} The populated <code>AttributeMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeMetadata();

            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('groupDisplayName')) {
                obj['groupDisplayName'] = ApiClient.convertToType(data['groupDisplayName'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('repeatable')) {
                obj['repeatable'] = ApiClient.convertToType(data['repeatable'], 'Boolean');
            }
            if (data.hasOwnProperty('valueMetadata')) {
                obj['valueMetadata'] = ApiClient.convertToType(data['valueMetadata'], [AttributeValueMetadata]);
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['groupDisplayName'] && !(typeof data['groupDisplayName'] === 'string' || data['groupDisplayName'] instanceof String)) {
            throw new Error("Expected the field `groupDisplayName` to be a primitive type in the JSON string but got " + data['groupDisplayName']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        if (data['valueMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueMetadata'])) {
                throw new Error("Expected the field `valueMetadata` to be an array in the JSON data but got " + data['valueMetadata']);
            }
            // validate the optional field `valueMetadata` (array)
            for (const item of data['valueMetadata']) {
                AttributeValueMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.
 * @member {Boolean} deprecated
 */
AttributeMetadata.prototype['deprecated'] = undefined;

/**
 * The localized display name for the attribute, if available; otherwise, the English display name.
 * @member {String} displayName
 */
AttributeMetadata.prototype['displayName'] = undefined;

/**
 * The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.
 * @member {String} groupDisplayName
 */
AttributeMetadata.prototype['groupDisplayName'] = undefined;

/**
 * The unique identifier for the attribute.
 * @member {String} parent
 */
AttributeMetadata.prototype['parent'] = undefined;

/**
 * If true, the attribute supports multiple values. If false, only a single value should be provided.
 * @member {Boolean} repeatable
 */
AttributeMetadata.prototype['repeatable'] = undefined;

/**
 * For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.
 * @member {Array.<module:model/AttributeValueMetadata>} valueMetadata
 */
AttributeMetadata.prototype['valueMetadata'] = undefined;

/**
 * The value type for the attribute. Values set and retrieved should be expected to be of this type.
 * @member {module:model/AttributeMetadata.ValueTypeEnum} valueType
 */
AttributeMetadata.prototype['valueType'] = undefined;





/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
AttributeMetadata['ValueTypeEnum'] = {

    /**
     * value: "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED": "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "REPEATED_ENUM"
     * @const
     */
    "REPEATED_ENUM": "REPEATED_ENUM"
};



export default AttributeMetadata;

