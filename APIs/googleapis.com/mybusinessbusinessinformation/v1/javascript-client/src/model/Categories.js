/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';

/**
 * The Categories model module.
 * @module model/Categories
 * @version v1
 */
class Categories {
    /**
     * Constructs a new <code>Categories</code>.
     * A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
     * @alias module:model/Categories
     */
    constructor() { 
        
        Categories.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Categories</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Categories} obj Optional instance to populate.
     * @return {module:model/Categories} The populated <code>Categories</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Categories();

            if (data.hasOwnProperty('additionalCategories')) {
                obj['additionalCategories'] = ApiClient.convertToType(data['additionalCategories'], [Category]);
            }
            if (data.hasOwnProperty('primaryCategory')) {
                obj['primaryCategory'] = Category.constructFromObject(data['primaryCategory']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Categories</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Categories</code>.
     */
    static validateJSON(data) {
        if (data['additionalCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalCategories'])) {
                throw new Error("Expected the field `additionalCategories` to be an array in the JSON data but got " + data['additionalCategories']);
            }
            // validate the optional field `additionalCategories` (array)
            for (const item of data['additionalCategories']) {
                Category.validateJSON(item);
            };
        }
        // validate the optional field `primaryCategory`
        if (data['primaryCategory']) { // data not null
          Category.validateJSON(data['primaryCategory']);
        }

        return true;
    }


}



/**
 * Optional. Additional categories to describe your business. Categories help your customers find accurate, specific results for services they're interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.
 * @member {Array.<module:model/Category>} additionalCategories
 */
Categories.prototype['additionalCategories'] = undefined;

/**
 * @member {module:model/Category} primaryCategory
 */
Categories.prototype['primaryCategory'] = undefined;






export default Categories;

