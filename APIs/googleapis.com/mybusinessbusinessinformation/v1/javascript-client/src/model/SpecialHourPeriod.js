/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';
import TimeOfDay from './TimeOfDay';

/**
 * The SpecialHourPeriod model module.
 * @module model/SpecialHourPeriod
 * @version v1
 */
class SpecialHourPeriod {
    /**
     * Constructs a new <code>SpecialHourPeriod</code>.
     * Represents a single time period when a location&#39;s operational hours differ from its normal business hours. A special hour period must represent a range of less than 24 hours. The &#x60;open_time&#x60; and &#x60;start_date&#x60; must predate the &#x60;close_time&#x60; and &#x60;end_date&#x60;. The &#x60;close_time&#x60; and &#x60;end_date&#x60; can extend to 11:59 a.m. on the day after the specified &#x60;start_date&#x60;. For example, the following inputs are valid: start_date&#x3D;2015-11-23, open_time&#x3D;08:00, close_time&#x3D;18:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-23, open_time&#x3D;08:00, close_time&#x3D;18:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-24, open_time&#x3D;13:00, close_time&#x3D;11:59 The following inputs are not valid: start_date&#x3D;2015-11-23, open_time&#x3D;13:00, close_time&#x3D;11:59 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-24, open_time&#x3D;13:00, close_time&#x3D;12:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-25, open_time&#x3D;08:00, close_time&#x3D;18:00
     * @alias module:model/SpecialHourPeriod
     */
    constructor() { 
        
        SpecialHourPeriod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpecialHourPeriod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpecialHourPeriod} obj Optional instance to populate.
     * @return {module:model/SpecialHourPeriod} The populated <code>SpecialHourPeriod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpecialHourPeriod();

            if (data.hasOwnProperty('closeTime')) {
                obj['closeTime'] = TimeOfDay.constructFromObject(data['closeTime']);
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ModelDate.constructFromObject(data['endDate']);
            }
            if (data.hasOwnProperty('openTime')) {
                obj['openTime'] = TimeOfDay.constructFromObject(data['openTime']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ModelDate.constructFromObject(data['startDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpecialHourPeriod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpecialHourPeriod</code>.
     */
    static validateJSON(data) {
        // validate the optional field `closeTime`
        if (data['closeTime']) { // data not null
          TimeOfDay.validateJSON(data['closeTime']);
        }
        // validate the optional field `endDate`
        if (data['endDate']) { // data not null
          ModelDate.validateJSON(data['endDate']);
        }
        // validate the optional field `openTime`
        if (data['openTime']) { // data not null
          TimeOfDay.validateJSON(data['openTime']);
        }
        // validate the optional field `startDate`
        if (data['startDate']) { // data not null
          ModelDate.validateJSON(data['startDate']);
        }

        return true;
    }


}



/**
 * @member {module:model/TimeOfDay} closeTime
 */
SpecialHourPeriod.prototype['closeTime'] = undefined;

/**
 * Optional. If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.
 * @member {Boolean} closed
 */
SpecialHourPeriod.prototype['closed'] = undefined;

/**
 * @member {module:model/ModelDate} endDate
 */
SpecialHourPeriod.prototype['endDate'] = undefined;

/**
 * @member {module:model/TimeOfDay} openTime
 */
SpecialHourPeriod.prototype['openTime'] = undefined;

/**
 * @member {module:model/ModelDate} startDate
 */
SpecialHourPeriod.prototype['startDate'] = undefined;






export default SpecialHourPeriod;

