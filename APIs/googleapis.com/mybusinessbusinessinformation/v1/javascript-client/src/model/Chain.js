/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChainName from './ChainName';
import ChainUri from './ChainUri';

/**
 * The Chain model module.
 * @module model/Chain
 * @version v1
 */
class Chain {
    /**
     * Constructs a new <code>Chain</code>.
     * A chain is a brand that your business&#39;s locations can be affiliated with.
     * @alias module:model/Chain
     */
    constructor() { 
        
        Chain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Chain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Chain} obj Optional instance to populate.
     * @return {module:model/Chain} The populated <code>Chain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Chain();

            if (data.hasOwnProperty('chainNames')) {
                obj['chainNames'] = ApiClient.convertToType(data['chainNames'], [ChainName]);
            }
            if (data.hasOwnProperty('locationCount')) {
                obj['locationCount'] = ApiClient.convertToType(data['locationCount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('websites')) {
                obj['websites'] = ApiClient.convertToType(data['websites'], [ChainUri]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Chain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Chain</code>.
     */
    static validateJSON(data) {
        if (data['chainNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['chainNames'])) {
                throw new Error("Expected the field `chainNames` to be an array in the JSON data but got " + data['chainNames']);
            }
            // validate the optional field `chainNames` (array)
            for (const item of data['chainNames']) {
                ChainName.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['websites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['websites'])) {
                throw new Error("Expected the field `websites` to be an array in the JSON data but got " + data['websites']);
            }
            // validate the optional field `websites` (array)
            for (const item of data['websites']) {
                ChainUri.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Names of the chain.
 * @member {Array.<module:model/ChainName>} chainNames
 */
Chain.prototype['chainNames'] = undefined;

/**
 * Number of locations that are part of this chain.
 * @member {Number} locationCount
 */
Chain.prototype['locationCount'] = undefined;

/**
 * Required. The chain's resource name, in the format `chains/{chain_id}`.
 * @member {String} name
 */
Chain.prototype['name'] = undefined;

/**
 * Websites of the chain.
 * @member {Array.<module:model/ChainUri>} websites
 */
Chain.prototype['websites'] = undefined;






export default Chain;

