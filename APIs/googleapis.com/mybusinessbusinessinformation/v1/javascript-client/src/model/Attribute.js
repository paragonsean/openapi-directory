/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepeatedEnumAttributeValue from './RepeatedEnumAttributeValue';
import UriAttributeValue from './UriAttributeValue';

/**
 * The Attribute model module.
 * @module model/Attribute
 * @version v1
 */
class Attribute {
    /**
     * Constructs a new <code>Attribute</code>.
     * A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes.
     * @alias module:model/Attribute
     */
    constructor() { 
        
        Attribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attribute} obj Optional instance to populate.
     * @return {module:model/Attribute} The populated <code>Attribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attribute();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('repeatedEnumValue')) {
                obj['repeatedEnumValue'] = RepeatedEnumAttributeValue.constructFromObject(data['repeatedEnumValue']);
            }
            if (data.hasOwnProperty('uriValues')) {
                obj['uriValues'] = ApiClient.convertToType(data['uriValues'], [UriAttributeValue]);
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `repeatedEnumValue`
        if (data['repeatedEnumValue']) { // data not null
          RepeatedEnumAttributeValue.validateJSON(data['repeatedEnumValue']);
        }
        if (data['uriValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['uriValues'])) {
                throw new Error("Expected the field `uriValues` to be an array in the JSON data but got " + data['uriValues']);
            }
            // validate the optional field `uriValues` (array)
            for (const item of data['uriValues']) {
                UriAttributeValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * Required. The resource name for this attribute.
 * @member {String} name
 */
Attribute.prototype['name'] = undefined;

/**
 * @member {module:model/RepeatedEnumAttributeValue} repeatedEnumValue
 */
Attribute.prototype['repeatedEnumValue'] = undefined;

/**
 * When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.
 * @member {Array.<module:model/UriAttributeValue>} uriValues
 */
Attribute.prototype['uriValues'] = undefined;

/**
 * Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.
 * @member {module:model/Attribute.ValueTypeEnum} valueType
 */
Attribute.prototype['valueType'] = undefined;

/**
 * The values for this attribute. The type of the values supplied must match that expected for that attribute. This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.
 * @member {Array.<Object>} values
 */
Attribute.prototype['values'] = undefined;





/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
Attribute['ValueTypeEnum'] = {

    /**
     * value: "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED": "ATTRIBUTE_VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "REPEATED_ENUM"
     * @const
     */
    "REPEATED_ENUM": "REPEATED_ENUM"
};



export default Attribute;

