/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metadata model module.
 * @module model/Metadata
 * @version v1
 */
class Metadata {
    /**
     * Constructs a new <code>Metadata</code>.
     * Additional non-user-editable information about the location.
     * @alias module:model/Metadata
     */
    constructor() { 
        
        Metadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metadata} obj Optional instance to populate.
     * @return {module:model/Metadata} The populated <code>Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metadata();

            if (data.hasOwnProperty('canDelete')) {
                obj['canDelete'] = ApiClient.convertToType(data['canDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('canHaveBusinessCalls')) {
                obj['canHaveBusinessCalls'] = ApiClient.convertToType(data['canHaveBusinessCalls'], 'Boolean');
            }
            if (data.hasOwnProperty('canHaveFoodMenus')) {
                obj['canHaveFoodMenus'] = ApiClient.convertToType(data['canHaveFoodMenus'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyServiceList')) {
                obj['canModifyServiceList'] = ApiClient.convertToType(data['canModifyServiceList'], 'Boolean');
            }
            if (data.hasOwnProperty('canOperateHealthData')) {
                obj['canOperateHealthData'] = ApiClient.convertToType(data['canOperateHealthData'], 'Boolean');
            }
            if (data.hasOwnProperty('canOperateLocalPost')) {
                obj['canOperateLocalPost'] = ApiClient.convertToType(data['canOperateLocalPost'], 'Boolean');
            }
            if (data.hasOwnProperty('canOperateLodgingData')) {
                obj['canOperateLodgingData'] = ApiClient.convertToType(data['canOperateLodgingData'], 'Boolean');
            }
            if (data.hasOwnProperty('duplicateLocation')) {
                obj['duplicateLocation'] = ApiClient.convertToType(data['duplicateLocation'], 'String');
            }
            if (data.hasOwnProperty('hasGoogleUpdated')) {
                obj['hasGoogleUpdated'] = ApiClient.convertToType(data['hasGoogleUpdated'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPendingEdits')) {
                obj['hasPendingEdits'] = ApiClient.convertToType(data['hasPendingEdits'], 'Boolean');
            }
            if (data.hasOwnProperty('hasVoiceOfMerchant')) {
                obj['hasVoiceOfMerchant'] = ApiClient.convertToType(data['hasVoiceOfMerchant'], 'Boolean');
            }
            if (data.hasOwnProperty('mapsUri')) {
                obj['mapsUri'] = ApiClient.convertToType(data['mapsUri'], 'String');
            }
            if (data.hasOwnProperty('newReviewUri')) {
                obj['newReviewUri'] = ApiClient.convertToType(data['newReviewUri'], 'String');
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['duplicateLocation'] && !(typeof data['duplicateLocation'] === 'string' || data['duplicateLocation'] instanceof String)) {
            throw new Error("Expected the field `duplicateLocation` to be a primitive type in the JSON string but got " + data['duplicateLocation']);
        }
        // ensure the json data is a string
        if (data['mapsUri'] && !(typeof data['mapsUri'] === 'string' || data['mapsUri'] instanceof String)) {
            throw new Error("Expected the field `mapsUri` to be a primitive type in the JSON string but got " + data['mapsUri']);
        }
        // ensure the json data is a string
        if (data['newReviewUri'] && !(typeof data['newReviewUri'] === 'string' || data['newReviewUri'] instanceof String)) {
            throw new Error("Expected the field `newReviewUri` to be a primitive type in the JSON string but got " + data['newReviewUri']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }

        return true;
    }


}



/**
 * Output only. Indicates whether the location can be deleted using the API.
 * @member {Boolean} canDelete
 */
Metadata.prototype['canDelete'] = undefined;

/**
 * Output only. Indicates if the listing is eligible for business calls.
 * @member {Boolean} canHaveBusinessCalls
 */
Metadata.prototype['canHaveBusinessCalls'] = undefined;

/**
 * Output only. Indicates if the listing is eligible for food menu.
 * @member {Boolean} canHaveFoodMenus
 */
Metadata.prototype['canHaveFoodMenus'] = undefined;

/**
 * Output only. Indicates if the listing can modify the service list.
 * @member {Boolean} canModifyServiceList
 */
Metadata.prototype['canModifyServiceList'] = undefined;

/**
 * Output only. Indicates whether the location can operate on Health data.
 * @member {Boolean} canOperateHealthData
 */
Metadata.prototype['canOperateHealthData'] = undefined;

/**
 * Output only. Indicates if the listing can manage local posts.
 * @member {Boolean} canOperateLocalPost
 */
Metadata.prototype['canOperateLocalPost'] = undefined;

/**
 * Output only. Indicates whether the location can operate on Lodging data.
 * @member {Boolean} canOperateLodgingData
 */
Metadata.prototype['canOperateLodgingData'] = undefined;

/**
 * Output only. The location resource that this location duplicates.
 * @member {String} duplicateLocation
 */
Metadata.prototype['duplicateLocation'] = undefined;

/**
 * Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.
 * @member {Boolean} hasGoogleUpdated
 */
Metadata.prototype['hasGoogleUpdated'] = undefined;

/**
 * Output only. Indicates whether any of this Location's properties are in the edit pending state.
 * @member {Boolean} hasPendingEdits
 */
Metadata.prototype['hasPendingEdits'] = undefined;

/**
 * Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.
 * @member {Boolean} hasVoiceOfMerchant
 */
Metadata.prototype['hasVoiceOfMerchant'] = undefined;

/**
 * Output only. A link to the location on Maps.
 * @member {String} mapsUri
 */
Metadata.prototype['mapsUri'] = undefined;

/**
 * Output only. A link to the page on Google Search where a customer can leave a review for the location.
 * @member {String} newReviewUri
 */
Metadata.prototype['newReviewUri'] = undefined;

/**
 * Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.
 * @member {String} placeId
 */
Metadata.prototype['placeId'] = undefined;






export default Metadata;

