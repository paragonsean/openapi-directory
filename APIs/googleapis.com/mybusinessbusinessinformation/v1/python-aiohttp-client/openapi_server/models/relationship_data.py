# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relevant_location import RelevantLocation
from openapi_server import util


class RelationshipData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children_locations: List[RelevantLocation]=None, parent_chain: str=None, parent_location: RelevantLocation=None):
        """RelationshipData - a model defined in OpenAPI

        :param children_locations: The children_locations of this RelationshipData.
        :param parent_chain: The parent_chain of this RelationshipData.
        :param parent_location: The parent_location of this RelationshipData.
        """
        self.openapi_types = {
            'children_locations': List[RelevantLocation],
            'parent_chain': str,
            'parent_location': RelevantLocation
        }

        self.attribute_map = {
            'children_locations': 'childrenLocations',
            'parent_chain': 'parentChain',
            'parent_location': 'parentLocation'
        }

        self._children_locations = children_locations
        self._parent_chain = parent_chain
        self._parent_location = parent_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipData of this RelationshipData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children_locations(self):
        """Gets the children_locations of this RelationshipData.

        The list of children locations that this location has relations with.

        :return: The children_locations of this RelationshipData.
        :rtype: List[RelevantLocation]
        """
        return self._children_locations

    @children_locations.setter
    def children_locations(self, children_locations):
        """Sets the children_locations of this RelationshipData.

        The list of children locations that this location has relations with.

        :param children_locations: The children_locations of this RelationshipData.
        :type children_locations: List[RelevantLocation]
        """

        self._children_locations = children_locations

    @property
    def parent_chain(self):
        """Gets the parent_chain of this RelationshipData.

        The resource name of the Chain that this location is member of. How to find Chain ID

        :return: The parent_chain of this RelationshipData.
        :rtype: str
        """
        return self._parent_chain

    @parent_chain.setter
    def parent_chain(self, parent_chain):
        """Sets the parent_chain of this RelationshipData.

        The resource name of the Chain that this location is member of. How to find Chain ID

        :param parent_chain: The parent_chain of this RelationshipData.
        :type parent_chain: str
        """

        self._parent_chain = parent_chain

    @property
    def parent_location(self):
        """Gets the parent_location of this RelationshipData.


        :return: The parent_location of this RelationshipData.
        :rtype: RelevantLocation
        """
        return self._parent_location

    @parent_location.setter
    def parent_location(self, parent_location):
        """Sets the parent_location of this RelationshipData.


        :param parent_location: The parent_location of this RelationshipData.
        :type parent_location: RelevantLocation
        """

        self._parent_location = parent_location
