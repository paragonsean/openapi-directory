# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class ListLocationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locations: List[Location]=None, next_page_token: str=None, total_size: int=None):
        """ListLocationsResponse - a model defined in OpenAPI

        :param locations: The locations of this ListLocationsResponse.
        :param next_page_token: The next_page_token of this ListLocationsResponse.
        :param total_size: The total_size of this ListLocationsResponse.
        """
        self.openapi_types = {
            'locations': List[Location],
            'next_page_token': str,
            'total_size': int
        }

        self.attribute_map = {
            'locations': 'locations',
            'next_page_token': 'nextPageToken',
            'total_size': 'totalSize'
        }

        self._locations = locations
        self._next_page_token = next_page_token
        self._total_size = total_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListLocationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListLocationsResponse of this ListLocationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations(self):
        """Gets the locations of this ListLocationsResponse.

        The locations.

        :return: The locations of this ListLocationsResponse.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ListLocationsResponse.

        The locations.

        :param locations: The locations of this ListLocationsResponse.
        :type locations: List[Location]
        """

        self._locations = locations

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListLocationsResponse.

        If the number of locations exceeded the requested page size, this field is populated with a token to fetch the next page of locations on a subsequent call to `ListLocations`. If there are no more locations, this field is not present in the response.

        :return: The next_page_token of this ListLocationsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListLocationsResponse.

        If the number of locations exceeded the requested page size, this field is populated with a token to fetch the next page of locations on a subsequent call to `ListLocations`. If there are no more locations, this field is not present in the response.

        :param next_page_token: The next_page_token of this ListLocationsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def total_size(self):
        """Gets the total_size of this ListLocationsResponse.

        The approximate number of Locations in the list irrespective of pagination. This field will only be returned if `filter` is used as a query parameter.

        :return: The total_size of this ListLocationsResponse.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ListLocationsResponse.

        The approximate number of Locations in the list irrespective of pagination. This field will only be returned if `filter` is used as a query parameter.

        :param total_size: The total_size of this ListLocationsResponse.
        :type total_size: int
        """

        self._total_size = total_size
