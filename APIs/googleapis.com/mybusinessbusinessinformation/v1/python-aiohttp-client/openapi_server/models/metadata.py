# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_delete: bool=None, can_have_business_calls: bool=None, can_have_food_menus: bool=None, can_modify_service_list: bool=None, can_operate_health_data: bool=None, can_operate_local_post: bool=None, can_operate_lodging_data: bool=None, duplicate_location: str=None, has_google_updated: bool=None, has_pending_edits: bool=None, has_voice_of_merchant: bool=None, maps_uri: str=None, new_review_uri: str=None, place_id: str=None):
        """Metadata - a model defined in OpenAPI

        :param can_delete: The can_delete of this Metadata.
        :param can_have_business_calls: The can_have_business_calls of this Metadata.
        :param can_have_food_menus: The can_have_food_menus of this Metadata.
        :param can_modify_service_list: The can_modify_service_list of this Metadata.
        :param can_operate_health_data: The can_operate_health_data of this Metadata.
        :param can_operate_local_post: The can_operate_local_post of this Metadata.
        :param can_operate_lodging_data: The can_operate_lodging_data of this Metadata.
        :param duplicate_location: The duplicate_location of this Metadata.
        :param has_google_updated: The has_google_updated of this Metadata.
        :param has_pending_edits: The has_pending_edits of this Metadata.
        :param has_voice_of_merchant: The has_voice_of_merchant of this Metadata.
        :param maps_uri: The maps_uri of this Metadata.
        :param new_review_uri: The new_review_uri of this Metadata.
        :param place_id: The place_id of this Metadata.
        """
        self.openapi_types = {
            'can_delete': bool,
            'can_have_business_calls': bool,
            'can_have_food_menus': bool,
            'can_modify_service_list': bool,
            'can_operate_health_data': bool,
            'can_operate_local_post': bool,
            'can_operate_lodging_data': bool,
            'duplicate_location': str,
            'has_google_updated': bool,
            'has_pending_edits': bool,
            'has_voice_of_merchant': bool,
            'maps_uri': str,
            'new_review_uri': str,
            'place_id': str
        }

        self.attribute_map = {
            'can_delete': 'canDelete',
            'can_have_business_calls': 'canHaveBusinessCalls',
            'can_have_food_menus': 'canHaveFoodMenus',
            'can_modify_service_list': 'canModifyServiceList',
            'can_operate_health_data': 'canOperateHealthData',
            'can_operate_local_post': 'canOperateLocalPost',
            'can_operate_lodging_data': 'canOperateLodgingData',
            'duplicate_location': 'duplicateLocation',
            'has_google_updated': 'hasGoogleUpdated',
            'has_pending_edits': 'hasPendingEdits',
            'has_voice_of_merchant': 'hasVoiceOfMerchant',
            'maps_uri': 'mapsUri',
            'new_review_uri': 'newReviewUri',
            'place_id': 'placeId'
        }

        self._can_delete = can_delete
        self._can_have_business_calls = can_have_business_calls
        self._can_have_food_menus = can_have_food_menus
        self._can_modify_service_list = can_modify_service_list
        self._can_operate_health_data = can_operate_health_data
        self._can_operate_local_post = can_operate_local_post
        self._can_operate_lodging_data = can_operate_lodging_data
        self._duplicate_location = duplicate_location
        self._has_google_updated = has_google_updated
        self._has_pending_edits = has_pending_edits
        self._has_voice_of_merchant = has_voice_of_merchant
        self._maps_uri = maps_uri
        self._new_review_uri = new_review_uri
        self._place_id = place_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_delete(self):
        """Gets the can_delete of this Metadata.

        Output only. Indicates whether the location can be deleted using the API.

        :return: The can_delete of this Metadata.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this Metadata.

        Output only. Indicates whether the location can be deleted using the API.

        :param can_delete: The can_delete of this Metadata.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_have_business_calls(self):
        """Gets the can_have_business_calls of this Metadata.

        Output only. Indicates if the listing is eligible for business calls.

        :return: The can_have_business_calls of this Metadata.
        :rtype: bool
        """
        return self._can_have_business_calls

    @can_have_business_calls.setter
    def can_have_business_calls(self, can_have_business_calls):
        """Sets the can_have_business_calls of this Metadata.

        Output only. Indicates if the listing is eligible for business calls.

        :param can_have_business_calls: The can_have_business_calls of this Metadata.
        :type can_have_business_calls: bool
        """

        self._can_have_business_calls = can_have_business_calls

    @property
    def can_have_food_menus(self):
        """Gets the can_have_food_menus of this Metadata.

        Output only. Indicates if the listing is eligible for food menu.

        :return: The can_have_food_menus of this Metadata.
        :rtype: bool
        """
        return self._can_have_food_menus

    @can_have_food_menus.setter
    def can_have_food_menus(self, can_have_food_menus):
        """Sets the can_have_food_menus of this Metadata.

        Output only. Indicates if the listing is eligible for food menu.

        :param can_have_food_menus: The can_have_food_menus of this Metadata.
        :type can_have_food_menus: bool
        """

        self._can_have_food_menus = can_have_food_menus

    @property
    def can_modify_service_list(self):
        """Gets the can_modify_service_list of this Metadata.

        Output only. Indicates if the listing can modify the service list.

        :return: The can_modify_service_list of this Metadata.
        :rtype: bool
        """
        return self._can_modify_service_list

    @can_modify_service_list.setter
    def can_modify_service_list(self, can_modify_service_list):
        """Sets the can_modify_service_list of this Metadata.

        Output only. Indicates if the listing can modify the service list.

        :param can_modify_service_list: The can_modify_service_list of this Metadata.
        :type can_modify_service_list: bool
        """

        self._can_modify_service_list = can_modify_service_list

    @property
    def can_operate_health_data(self):
        """Gets the can_operate_health_data of this Metadata.

        Output only. Indicates whether the location can operate on Health data.

        :return: The can_operate_health_data of this Metadata.
        :rtype: bool
        """
        return self._can_operate_health_data

    @can_operate_health_data.setter
    def can_operate_health_data(self, can_operate_health_data):
        """Sets the can_operate_health_data of this Metadata.

        Output only. Indicates whether the location can operate on Health data.

        :param can_operate_health_data: The can_operate_health_data of this Metadata.
        :type can_operate_health_data: bool
        """

        self._can_operate_health_data = can_operate_health_data

    @property
    def can_operate_local_post(self):
        """Gets the can_operate_local_post of this Metadata.

        Output only. Indicates if the listing can manage local posts.

        :return: The can_operate_local_post of this Metadata.
        :rtype: bool
        """
        return self._can_operate_local_post

    @can_operate_local_post.setter
    def can_operate_local_post(self, can_operate_local_post):
        """Sets the can_operate_local_post of this Metadata.

        Output only. Indicates if the listing can manage local posts.

        :param can_operate_local_post: The can_operate_local_post of this Metadata.
        :type can_operate_local_post: bool
        """

        self._can_operate_local_post = can_operate_local_post

    @property
    def can_operate_lodging_data(self):
        """Gets the can_operate_lodging_data of this Metadata.

        Output only. Indicates whether the location can operate on Lodging data.

        :return: The can_operate_lodging_data of this Metadata.
        :rtype: bool
        """
        return self._can_operate_lodging_data

    @can_operate_lodging_data.setter
    def can_operate_lodging_data(self, can_operate_lodging_data):
        """Sets the can_operate_lodging_data of this Metadata.

        Output only. Indicates whether the location can operate on Lodging data.

        :param can_operate_lodging_data: The can_operate_lodging_data of this Metadata.
        :type can_operate_lodging_data: bool
        """

        self._can_operate_lodging_data = can_operate_lodging_data

    @property
    def duplicate_location(self):
        """Gets the duplicate_location of this Metadata.

        Output only. The location resource that this location duplicates.

        :return: The duplicate_location of this Metadata.
        :rtype: str
        """
        return self._duplicate_location

    @duplicate_location.setter
    def duplicate_location(self, duplicate_location):
        """Sets the duplicate_location of this Metadata.

        Output only. The location resource that this location duplicates.

        :param duplicate_location: The duplicate_location of this Metadata.
        :type duplicate_location: str
        """

        self._duplicate_location = duplicate_location

    @property
    def has_google_updated(self):
        """Gets the has_google_updated of this Metadata.

        Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.

        :return: The has_google_updated of this Metadata.
        :rtype: bool
        """
        return self._has_google_updated

    @has_google_updated.setter
    def has_google_updated(self, has_google_updated):
        """Sets the has_google_updated of this Metadata.

        Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.

        :param has_google_updated: The has_google_updated of this Metadata.
        :type has_google_updated: bool
        """

        self._has_google_updated = has_google_updated

    @property
    def has_pending_edits(self):
        """Gets the has_pending_edits of this Metadata.

        Output only. Indicates whether any of this Location's properties are in the edit pending state.

        :return: The has_pending_edits of this Metadata.
        :rtype: bool
        """
        return self._has_pending_edits

    @has_pending_edits.setter
    def has_pending_edits(self, has_pending_edits):
        """Sets the has_pending_edits of this Metadata.

        Output only. Indicates whether any of this Location's properties are in the edit pending state.

        :param has_pending_edits: The has_pending_edits of this Metadata.
        :type has_pending_edits: bool
        """

        self._has_pending_edits = has_pending_edits

    @property
    def has_voice_of_merchant(self):
        """Gets the has_voice_of_merchant of this Metadata.

        Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.

        :return: The has_voice_of_merchant of this Metadata.
        :rtype: bool
        """
        return self._has_voice_of_merchant

    @has_voice_of_merchant.setter
    def has_voice_of_merchant(self, has_voice_of_merchant):
        """Sets the has_voice_of_merchant of this Metadata.

        Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.

        :param has_voice_of_merchant: The has_voice_of_merchant of this Metadata.
        :type has_voice_of_merchant: bool
        """

        self._has_voice_of_merchant = has_voice_of_merchant

    @property
    def maps_uri(self):
        """Gets the maps_uri of this Metadata.

        Output only. A link to the location on Maps.

        :return: The maps_uri of this Metadata.
        :rtype: str
        """
        return self._maps_uri

    @maps_uri.setter
    def maps_uri(self, maps_uri):
        """Sets the maps_uri of this Metadata.

        Output only. A link to the location on Maps.

        :param maps_uri: The maps_uri of this Metadata.
        :type maps_uri: str
        """

        self._maps_uri = maps_uri

    @property
    def new_review_uri(self):
        """Gets the new_review_uri of this Metadata.

        Output only. A link to the page on Google Search where a customer can leave a review for the location.

        :return: The new_review_uri of this Metadata.
        :rtype: str
        """
        return self._new_review_uri

    @new_review_uri.setter
    def new_review_uri(self, new_review_uri):
        """Sets the new_review_uri of this Metadata.

        Output only. A link to the page on Google Search where a customer can leave a review for the location.

        :param new_review_uri: The new_review_uri of this Metadata.
        :type new_review_uri: str
        """

        self._new_review_uri = new_review_uri

    @property
    def place_id(self):
        """Gets the place_id of this Metadata.

        Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.

        :return: The place_id of this Metadata.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this Metadata.

        Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.

        :param place_id: The place_id of this Metadata.
        :type place_id: str
        """

        self._place_id = place_id
