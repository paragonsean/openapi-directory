# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server import util


class TimePeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_day: str=None, close_time: TimeOfDay=None, open_day: str=None, open_time: TimeOfDay=None):
        """TimePeriod - a model defined in OpenAPI

        :param close_day: The close_day of this TimePeriod.
        :param close_time: The close_time of this TimePeriod.
        :param open_day: The open_day of this TimePeriod.
        :param open_time: The open_time of this TimePeriod.
        """
        self.openapi_types = {
            'close_day': str,
            'close_time': TimeOfDay,
            'open_day': str,
            'open_time': TimeOfDay
        }

        self.attribute_map = {
            'close_day': 'closeDay',
            'close_time': 'closeTime',
            'open_day': 'openDay',
            'open_time': 'openTime'
        }

        self._close_day = close_day
        self._close_time = close_time
        self._open_day = open_day
        self._open_time = open_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimePeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimePeriod of this TimePeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_day(self):
        """Gets the close_day of this TimePeriod.

        Required. Indicates the day of the week this period ends on.

        :return: The close_day of this TimePeriod.
        :rtype: str
        """
        return self._close_day

    @close_day.setter
    def close_day(self, close_day):
        """Sets the close_day of this TimePeriod.

        Required. Indicates the day of the week this period ends on.

        :param close_day: The close_day of this TimePeriod.
        :type close_day: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if close_day not in allowed_values:
            raise ValueError(
                "Invalid value for `close_day` ({0}), must be one of {1}"
                .format(close_day, allowed_values)
            )

        self._close_day = close_day

    @property
    def close_time(self):
        """Gets the close_time of this TimePeriod.


        :return: The close_time of this TimePeriod.
        :rtype: TimeOfDay
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this TimePeriod.


        :param close_time: The close_time of this TimePeriod.
        :type close_time: TimeOfDay
        """

        self._close_time = close_time

    @property
    def open_day(self):
        """Gets the open_day of this TimePeriod.

        Required. Indicates the day of the week this period starts on.

        :return: The open_day of this TimePeriod.
        :rtype: str
        """
        return self._open_day

    @open_day.setter
    def open_day(self, open_day):
        """Sets the open_day of this TimePeriod.

        Required. Indicates the day of the week this period starts on.

        :param open_day: The open_day of this TimePeriod.
        :type open_day: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if open_day not in allowed_values:
            raise ValueError(
                "Invalid value for `open_day` ({0}), must be one of {1}"
                .format(open_day, allowed_values)
            )

        self._open_day = open_day

    @property
    def open_time(self):
        """Gets the open_time of this TimePeriod.


        :return: The open_time of this TimePeriod.
        :rtype: TimeOfDay
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this TimePeriod.


        :param open_time: The open_time of this TimePeriod.
        :type open_time: TimeOfDay
        """

        self._open_time = open_time
