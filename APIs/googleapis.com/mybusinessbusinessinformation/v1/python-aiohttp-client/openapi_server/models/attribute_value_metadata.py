# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeValueMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, value: object=None):
        """AttributeValueMetadata - a model defined in OpenAPI

        :param display_name: The display_name of this AttributeValueMetadata.
        :param value: The value of this AttributeValueMetadata.
        """
        self.openapi_types = {
            'display_name': str,
            'value': object
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'value': 'value'
        }

        self._display_name = display_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeValueMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeValueMetadata of this AttributeValueMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this AttributeValueMetadata.

        The display name for this value, localized where available; otherwise, in English. The value display name is intended to be used in context with the attribute display name. For example, for a \"WiFi\" enum attribute, this could contain \"Paid\" to represent paid Wi-Fi.

        :return: The display_name of this AttributeValueMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AttributeValueMetadata.

        The display name for this value, localized where available; otherwise, in English. The value display name is intended to be used in context with the attribute display name. For example, for a \"WiFi\" enum attribute, this could contain \"Paid\" to represent paid Wi-Fi.

        :param display_name: The display_name of this AttributeValueMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def value(self):
        """Gets the value of this AttributeValueMetadata.

        The attribute value.

        :return: The value of this AttributeValueMetadata.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AttributeValueMetadata.

        The attribute value.

        :param value: The value of this AttributeValueMetadata.
        :type value: object
        """

        self._value = value
