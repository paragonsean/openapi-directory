# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class SearchGoogleLocationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: Location=None, page_size: int=None, query: str=None):
        """SearchGoogleLocationsRequest - a model defined in OpenAPI

        :param location: The location of this SearchGoogleLocationsRequest.
        :param page_size: The page_size of this SearchGoogleLocationsRequest.
        :param query: The query of this SearchGoogleLocationsRequest.
        """
        self.openapi_types = {
            'location': Location,
            'page_size': int,
            'query': str
        }

        self.attribute_map = {
            'location': 'location',
            'page_size': 'pageSize',
            'query': 'query'
        }

        self._location = location
        self._page_size = page_size
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGoogleLocationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchGoogleLocationsRequest of this SearchGoogleLocationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this SearchGoogleLocationsRequest.


        :return: The location of this SearchGoogleLocationsRequest.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SearchGoogleLocationsRequest.


        :param location: The location of this SearchGoogleLocationsRequest.
        :type location: Location
        """

        self._location = location

    @property
    def page_size(self):
        """Gets the page_size of this SearchGoogleLocationsRequest.

        The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.

        :return: The page_size of this SearchGoogleLocationsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchGoogleLocationsRequest.

        The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.

        :param page_size: The page_size of this SearchGoogleLocationsRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def query(self):
        """Gets the query of this SearchGoogleLocationsRequest.

        Text query to search for. The search results from a query string will be less accurate than if providing an exact location, but can provide more inexact matches.

        :return: The query of this SearchGoogleLocationsRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchGoogleLocationsRequest.

        Text query to search for. The search results from a query string will be less accurate than if providing an exact location, but can provide more inexact matches.

        :param query: The query of this SearchGoogleLocationsRequest.
        :type query: str
        """

        self._query = query
