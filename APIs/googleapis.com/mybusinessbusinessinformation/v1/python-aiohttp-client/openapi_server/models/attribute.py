# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repeated_enum_attribute_value import RepeatedEnumAttributeValue
from openapi_server.models.uri_attribute_value import UriAttributeValue
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, repeated_enum_value: RepeatedEnumAttributeValue=None, uri_values: List[UriAttributeValue]=None, value_type: str=None, values: List[object]=None):
        """Attribute - a model defined in OpenAPI

        :param name: The name of this Attribute.
        :param repeated_enum_value: The repeated_enum_value of this Attribute.
        :param uri_values: The uri_values of this Attribute.
        :param value_type: The value_type of this Attribute.
        :param values: The values of this Attribute.
        """
        self.openapi_types = {
            'name': str,
            'repeated_enum_value': RepeatedEnumAttributeValue,
            'uri_values': List[UriAttributeValue],
            'value_type': str,
            'values': List[object]
        }

        self.attribute_map = {
            'name': 'name',
            'repeated_enum_value': 'repeatedEnumValue',
            'uri_values': 'uriValues',
            'value_type': 'valueType',
            'values': 'values'
        }

        self._name = name
        self._repeated_enum_value = repeated_enum_value
        self._uri_values = uri_values
        self._value_type = value_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Attribute.

        Required. The resource name for this attribute.

        :return: The name of this Attribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attribute.

        Required. The resource name for this attribute.

        :param name: The name of this Attribute.
        :type name: str
        """

        self._name = name

    @property
    def repeated_enum_value(self):
        """Gets the repeated_enum_value of this Attribute.


        :return: The repeated_enum_value of this Attribute.
        :rtype: RepeatedEnumAttributeValue
        """
        return self._repeated_enum_value

    @repeated_enum_value.setter
    def repeated_enum_value(self, repeated_enum_value):
        """Sets the repeated_enum_value of this Attribute.


        :param repeated_enum_value: The repeated_enum_value of this Attribute.
        :type repeated_enum_value: RepeatedEnumAttributeValue
        """

        self._repeated_enum_value = repeated_enum_value

    @property
    def uri_values(self):
        """Gets the uri_values of this Attribute.

        When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.

        :return: The uri_values of this Attribute.
        :rtype: List[UriAttributeValue]
        """
        return self._uri_values

    @uri_values.setter
    def uri_values(self, uri_values):
        """Sets the uri_values of this Attribute.

        When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.

        :param uri_values: The uri_values of this Attribute.
        :type uri_values: List[UriAttributeValue]
        """

        self._uri_values = uri_values

    @property
    def value_type(self):
        """Gets the value_type of this Attribute.

        Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.

        :return: The value_type of this Attribute.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Attribute.

        Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.

        :param value_type: The value_type of this Attribute.
        :type value_type: str
        """
        allowed_values = ["ATTRIBUTE_VALUE_TYPE_UNSPECIFIED", "BOOL", "ENUM", "URL", "REPEATED_ENUM"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    @property
    def values(self):
        """Gets the values of this Attribute.

        The values for this attribute. The type of the values supplied must match that expected for that attribute. This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.

        :return: The values of this Attribute.
        :rtype: List[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Attribute.

        The values for this attribute. The type of the values supplied must match that expected for that attribute. This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.

        :param values: The values of this Attribute.
        :type values: List[object]
        """

        self._values = values
