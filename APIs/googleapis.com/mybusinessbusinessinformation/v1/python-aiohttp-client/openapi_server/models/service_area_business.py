# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.places import Places
from openapi_server import util


class ServiceAreaBusiness(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_type: str=None, places: Places=None, region_code: str=None):
        """ServiceAreaBusiness - a model defined in OpenAPI

        :param business_type: The business_type of this ServiceAreaBusiness.
        :param places: The places of this ServiceAreaBusiness.
        :param region_code: The region_code of this ServiceAreaBusiness.
        """
        self.openapi_types = {
            'business_type': str,
            'places': Places,
            'region_code': str
        }

        self.attribute_map = {
            'business_type': 'businessType',
            'places': 'places',
            'region_code': 'regionCode'
        }

        self._business_type = business_type
        self._places = places
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAreaBusiness':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAreaBusiness of this ServiceAreaBusiness.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_type(self):
        """Gets the business_type of this ServiceAreaBusiness.

        Required. Indicates the type of the service area business.

        :return: The business_type of this ServiceAreaBusiness.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this ServiceAreaBusiness.

        Required. Indicates the type of the service area business.

        :param business_type: The business_type of this ServiceAreaBusiness.
        :type business_type: str
        """
        allowed_values = ["BUSINESS_TYPE_UNSPECIFIED", "CUSTOMER_LOCATION_ONLY", "CUSTOMER_AND_BUSINESS_LOCATION"]  # noqa: E501
        if business_type not in allowed_values:
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def places(self):
        """Gets the places of this ServiceAreaBusiness.


        :return: The places of this ServiceAreaBusiness.
        :rtype: Places
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this ServiceAreaBusiness.


        :param places: The places of this ServiceAreaBusiness.
        :type places: Places
        """

        self._places = places

    @property
    def region_code(self):
        """Gets the region_code of this ServiceAreaBusiness.

        Immutable. CLDR region code of the country/region that this service area business is based in. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland. This field is required for CUSTOMER_LOCATION_ONLY businesses, and is ignored otherwise. The region specified here can be different from regions for the areas that this business serves (e.g. service area businesses that provide services in regions other than the one that they are based in). If this location requires verification after creation, the address provided for verification purposes *must* be located within this region, and the business owner or their authorized representative *must* be able to receive postal mail at the provided verification address.

        :return: The region_code of this ServiceAreaBusiness.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ServiceAreaBusiness.

        Immutable. CLDR region code of the country/region that this service area business is based in. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland. This field is required for CUSTOMER_LOCATION_ONLY businesses, and is ignored otherwise. The region specified here can be different from regions for the areas that this business serves (e.g. service area businesses that provide services in regions other than the one that they are based in). If this location requires verification after creation, the address provided for verification purposes *must* be located within this region, and the business owner or their authorized representative *must* be able to receive postal mail at the provided verification address.

        :param region_code: The region_code of this ServiceAreaBusiness.
        :type region_code: str
        """

        self._region_code = region_code
