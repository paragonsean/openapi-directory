# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelevantLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, place_id: str=None, relation_type: str=None):
        """RelevantLocation - a model defined in OpenAPI

        :param place_id: The place_id of this RelevantLocation.
        :param relation_type: The relation_type of this RelevantLocation.
        """
        self.openapi_types = {
            'place_id': str,
            'relation_type': str
        }

        self.attribute_map = {
            'place_id': 'placeId',
            'relation_type': 'relationType'
        }

        self._place_id = place_id
        self._relation_type = relation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelevantLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelevantLocation of this RelevantLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def place_id(self):
        """Gets the place_id of this RelevantLocation.

        Required. Specify the location that is on the other side of the relation by its placeID.

        :return: The place_id of this RelevantLocation.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this RelevantLocation.

        Required. Specify the location that is on the other side of the relation by its placeID.

        :param place_id: The place_id of this RelevantLocation.
        :type place_id: str
        """

        self._place_id = place_id

    @property
    def relation_type(self):
        """Gets the relation_type of this RelevantLocation.

        Required. The type of the relationship.

        :return: The relation_type of this RelevantLocation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this RelevantLocation.

        Required. The type of the relationship.

        :param relation_type: The relation_type of this RelevantLocation.
        :type relation_type: str
        """
        allowed_values = ["RELATION_TYPE_UNSPECIFIED", "DEPARTMENT_OF", "INDEPENDENT_ESTABLISHMENT_IN"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type
