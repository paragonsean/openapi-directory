/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.TimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single time period when a location&#39;s operational hours differ from its normal business hours. A special hour period must represent a range of less than 24 hours. The &#x60;open_time&#x60; and &#x60;start_date&#x60; must predate the &#x60;close_time&#x60; and &#x60;end_date&#x60;. The &#x60;close_time&#x60; and &#x60;end_date&#x60; can extend to 11:59 a.m. on the day after the specified &#x60;start_date&#x60;. For example, the following inputs are valid: start_date&#x3D;2015-11-23, open_time&#x3D;08:00, close_time&#x3D;18:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-23, open_time&#x3D;08:00, close_time&#x3D;18:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-24, open_time&#x3D;13:00, close_time&#x3D;11:59 The following inputs are not valid: start_date&#x3D;2015-11-23, open_time&#x3D;13:00, close_time&#x3D;11:59 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-24, open_time&#x3D;13:00, close_time&#x3D;12:00 start_date&#x3D;2015-11-23, end_date&#x3D;2015-11-25, open_time&#x3D;08:00, close_time&#x3D;18:00
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpecialHourPeriod {
  public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";
  @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
  private TimeOfDay closeTime;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Date endDate;

  public static final String SERIALIZED_NAME_OPEN_TIME = "openTime";
  @SerializedName(SERIALIZED_NAME_OPEN_TIME)
  private TimeOfDay openTime;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Date startDate;

  public SpecialHourPeriod() {
  }

  public SpecialHourPeriod closeTime(TimeOfDay closeTime) {
    this.closeTime = closeTime;
    return this;
  }

  /**
   * Get closeTime
   * @return closeTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getCloseTime() {
    return closeTime;
  }

  public void setCloseTime(TimeOfDay closeTime) {
    this.closeTime = closeTime;
  }


  public SpecialHourPeriod closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Optional. If true, &#x60;end_date&#x60;, &#x60;open_time&#x60;, and &#x60;close_time&#x60; are ignored, and the date specified in &#x60;start_date&#x60; is treated as the location being closed for the entire day.
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public SpecialHourPeriod endDate(Date endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public Date getEndDate() {
    return endDate;
  }

  public void setEndDate(Date endDate) {
    this.endDate = endDate;
  }


  public SpecialHourPeriod openTime(TimeOfDay openTime) {
    this.openTime = openTime;
    return this;
  }

  /**
   * Get openTime
   * @return openTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getOpenTime() {
    return openTime;
  }

  public void setOpenTime(TimeOfDay openTime) {
    this.openTime = openTime;
  }


  public SpecialHourPeriod startDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public Date getStartDate() {
    return startDate;
  }

  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialHourPeriod specialHourPeriod = (SpecialHourPeriod) o;
    return Objects.equals(this.closeTime, specialHourPeriod.closeTime) &&
        Objects.equals(this.closed, specialHourPeriod.closed) &&
        Objects.equals(this.endDate, specialHourPeriod.endDate) &&
        Objects.equals(this.openTime, specialHourPeriod.openTime) &&
        Objects.equals(this.startDate, specialHourPeriod.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeTime, closed, endDate, openTime, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialHourPeriod {\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    openTime: ").append(toIndentedString(openTime)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closeTime");
    openapiFields.add("closed");
    openapiFields.add("endDate");
    openapiFields.add("openTime");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpecialHourPeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpecialHourPeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpecialHourPeriod is not found in the empty JSON string", SpecialHourPeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpecialHourPeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpecialHourPeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `closeTime`
      if (jsonObj.get("closeTime") != null && !jsonObj.get("closeTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("closeTime"));
      }
      // validate the optional field `endDate`
      if (jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("endDate"));
      }
      // validate the optional field `openTime`
      if (jsonObj.get("openTime") != null && !jsonObj.get("openTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("openTime"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpecialHourPeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpecialHourPeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpecialHourPeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpecialHourPeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<SpecialHourPeriod>() {
           @Override
           public void write(JsonWriter out, SpecialHourPeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpecialHourPeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpecialHourPeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpecialHourPeriod
   * @throws IOException if the JSON string is invalid with respect to SpecialHourPeriod
   */
  public static SpecialHourPeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpecialHourPeriod.class);
  }

  /**
   * Convert an instance of SpecialHourPeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

