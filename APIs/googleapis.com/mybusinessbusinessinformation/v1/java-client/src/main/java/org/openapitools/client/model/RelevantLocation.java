/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelevantLocation {
  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  /**
   * Required. The type of the relationship.
   */
  @JsonAdapter(RelationTypeEnum.Adapter.class)
  public enum RelationTypeEnum {
    RELATION_TYPE_UNSPECIFIED("RELATION_TYPE_UNSPECIFIED"),
    
    DEPARTMENT_OF("DEPARTMENT_OF"),
    
    INDEPENDENT_ESTABLISHMENT_IN("INDEPENDENT_ESTABLISHMENT_IN");

    private String value;

    RelationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationTypeEnum fromValue(String value) {
      for (RelationTypeEnum b : RelationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relationType";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private RelationTypeEnum relationType;

  public RelevantLocation() {
  }

  public RelevantLocation placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * Required. Specify the location that is on the other side of the relation by its placeID.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public RelevantLocation relationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
    return this;
  }

  /**
   * Required. The type of the relationship.
   * @return relationType
   */
  @javax.annotation.Nullable
  public RelationTypeEnum getRelationType() {
    return relationType;
  }

  public void setRelationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelevantLocation relevantLocation = (RelevantLocation) o;
    return Objects.equals(this.placeId, relevantLocation.placeId) &&
        Objects.equals(this.relationType, relevantLocation.relationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placeId, relationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelevantLocation {\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("placeId");
    openapiFields.add("relationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelevantLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelevantLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelevantLocation is not found in the empty JSON string", RelevantLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelevantLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelevantLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) && !jsonObj.get("relationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationType").toString()));
      }
      // validate the optional field `relationType`
      if (jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) {
        RelationTypeEnum.validateJsonElement(jsonObj.get("relationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelevantLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelevantLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelevantLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelevantLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<RelevantLocation>() {
           @Override
           public void write(JsonWriter out, RelevantLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelevantLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelevantLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelevantLocation
   * @throws IOException if the JSON string is invalid with respect to RelevantLocation
   */
  public static RelevantLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelevantLocation.class);
  }

  /**
   * Convert an instance of RelevantLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

