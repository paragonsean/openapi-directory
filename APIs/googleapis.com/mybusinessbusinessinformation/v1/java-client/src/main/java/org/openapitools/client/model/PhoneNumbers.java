/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of phone numbers for the business. During updates, both fields must be set. Clients may not update just the primary or additional phone numbers using the update mask. International phone format is preferred, such as \&quot;+1 415 555 0132\&quot;, see more in (https://developers.google.com/style/phone-numbers#international-phone-numbers).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneNumbers {
  public static final String SERIALIZED_NAME_ADDITIONAL_PHONES = "additionalPhones";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PHONES)
  private List<String> additionalPhones = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_PHONE = "primaryPhone";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PHONE)
  private String primaryPhone;

  public PhoneNumbers() {
  }

  public PhoneNumbers additionalPhones(List<String> additionalPhones) {
    this.additionalPhones = additionalPhones;
    return this;
  }

  public PhoneNumbers addAdditionalPhonesItem(String additionalPhonesItem) {
    if (this.additionalPhones == null) {
      this.additionalPhones = new ArrayList<>();
    }
    this.additionalPhones.add(additionalPhonesItem);
    return this;
  }

  /**
   * Optional. Up to two phone numbers (mobile or landline, no fax) at which your business can be called, in addition to your primary phone number.
   * @return additionalPhones
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalPhones() {
    return additionalPhones;
  }

  public void setAdditionalPhones(List<String> additionalPhones) {
    this.additionalPhones = additionalPhones;
  }


  public PhoneNumbers primaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
    return this;
  }

  /**
   * Required. A phone number that connects to your individual business location as directly as possible. Use a local phone number instead of a central, call center helpline number whenever possible.
   * @return primaryPhone
   */
  @javax.annotation.Nullable
  public String getPrimaryPhone() {
    return primaryPhone;
  }

  public void setPrimaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumbers phoneNumbers = (PhoneNumbers) o;
    return Objects.equals(this.additionalPhones, phoneNumbers.additionalPhones) &&
        Objects.equals(this.primaryPhone, phoneNumbers.primaryPhone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalPhones, primaryPhone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumbers {\n");
    sb.append("    additionalPhones: ").append(toIndentedString(additionalPhones)).append("\n");
    sb.append("    primaryPhone: ").append(toIndentedString(primaryPhone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalPhones");
    openapiFields.add("primaryPhone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneNumbers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneNumbers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneNumbers is not found in the empty JSON string", PhoneNumbers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneNumbers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneNumbers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalPhones") != null && !jsonObj.get("additionalPhones").isJsonNull() && !jsonObj.get("additionalPhones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalPhones` to be an array in the JSON string but got `%s`", jsonObj.get("additionalPhones").toString()));
      }
      if ((jsonObj.get("primaryPhone") != null && !jsonObj.get("primaryPhone").isJsonNull()) && !jsonObj.get("primaryPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPhone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneNumbers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneNumbers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneNumbers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneNumbers.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneNumbers>() {
           @Override
           public void write(JsonWriter out, PhoneNumbers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneNumbers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneNumbers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneNumbers
   * @throws IOException if the JSON string is invalid with respect to PhoneNumbers
   */
  public static PhoneNumbers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneNumbers.class);
  }

  /**
   * Convert an instance of PhoneNumbers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

