/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MoreHoursType;
import org.openapitools.client.model.ServiceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see &#x60;categories.list&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MORE_HOURS_TYPES = "moreHoursTypes";
  @SerializedName(SERIALIZED_NAME_MORE_HOURS_TYPES)
  private List<MoreHoursType> moreHoursTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_TYPES = "serviceTypes";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPES)
  private List<ServiceType> serviceTypes = new ArrayList<>();

  public Category() {
  }

  public Category(
     String displayName, 
     List<MoreHoursType> moreHoursTypes, 
     List<ServiceType> serviceTypes
  ) {
    this();
    this.displayName = displayName;
    this.moreHoursTypes = moreHoursTypes;
    this.serviceTypes = serviceTypes;
  }

  /**
   * Output only. The human-readable name of the category. This is set when reading the location. When modifying the location, &#x60;category_id&#x60; must be set.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. More hours types that are available for this business category.
   * @return moreHoursTypes
   */
  @javax.annotation.Nullable
  public List<MoreHoursType> getMoreHoursTypes() {
    return moreHoursTypes;
  }



  public Category name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. A stable ID (provided by Google) for this category. The value must be specified when modifying the category (when creating or updating a location).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. A list of all the service types that are available for this business category.
   * @return serviceTypes
   */
  @javax.annotation.Nullable
  public List<ServiceType> getServiceTypes() {
    return serviceTypes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.displayName, category.displayName) &&
        Objects.equals(this.moreHoursTypes, category.moreHoursTypes) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.serviceTypes, category.serviceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, moreHoursTypes, name, serviceTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    moreHoursTypes: ").append(toIndentedString(moreHoursTypes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceTypes: ").append(toIndentedString(serviceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("moreHoursTypes");
    openapiFields.add("name");
    openapiFields.add("serviceTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("moreHoursTypes") != null && !jsonObj.get("moreHoursTypes").isJsonNull()) {
        JsonArray jsonArraymoreHoursTypes = jsonObj.getAsJsonArray("moreHoursTypes");
        if (jsonArraymoreHoursTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("moreHoursTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `moreHoursTypes` to be an array in the JSON string but got `%s`", jsonObj.get("moreHoursTypes").toString()));
          }

          // validate the optional field `moreHoursTypes` (array)
          for (int i = 0; i < jsonArraymoreHoursTypes.size(); i++) {
            MoreHoursType.validateJsonElement(jsonArraymoreHoursTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("serviceTypes") != null && !jsonObj.get("serviceTypes").isJsonNull()) {
        JsonArray jsonArrayserviceTypes = jsonObj.getAsJsonArray("serviceTypes");
        if (jsonArrayserviceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("serviceTypes").toString()));
          }

          // validate the optional field `serviceTypes` (array)
          for (int i = 0; i < jsonArrayserviceTypes.size(); i++) {
            ServiceType.validateJsonElement(jsonArrayserviceTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

