/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdWordsLocationExtensions;
import org.openapitools.client.model.BusinessHours;
import org.openapitools.client.model.Categories;
import org.openapitools.client.model.LatLng;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.MoreHours;
import org.openapitools.client.model.OpenInfo;
import org.openapitools.client.model.PhoneNumbers;
import org.openapitools.client.model.PostalAddress;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.RelationshipData;
import org.openapitools.client.model.ServiceAreaBusiness;
import org.openapitools.client.model.ServiceItem;
import org.openapitools.client.model.SpecialHours;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Location {
  public static final String SERIALIZED_NAME_AD_WORDS_LOCATION_EXTENSIONS = "adWordsLocationExtensions";
  @SerializedName(SERIALIZED_NAME_AD_WORDS_LOCATION_EXTENSIONS)
  private AdWordsLocationExtensions adWordsLocationExtensions;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Categories categories;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LATLNG = "latlng";
  @SerializedName(SERIALIZED_NAME_LATLNG)
  private LatLng latlng;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_MORE_HOURS = "moreHours";
  @SerializedName(SERIALIZED_NAME_MORE_HOURS)
  private List<MoreHours> moreHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_INFO = "openInfo";
  @SerializedName(SERIALIZED_NAME_OPEN_INFO)
  private OpenInfo openInfo;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private PhoneNumbers phoneNumbers;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private Profile profile;

  public static final String SERIALIZED_NAME_REGULAR_HOURS = "regularHours";
  @SerializedName(SERIALIZED_NAME_REGULAR_HOURS)
  private BusinessHours regularHours;

  public static final String SERIALIZED_NAME_RELATIONSHIP_DATA = "relationshipData";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_DATA)
  private RelationshipData relationshipData;

  public static final String SERIALIZED_NAME_SERVICE_AREA = "serviceArea";
  @SerializedName(SERIALIZED_NAME_SERVICE_AREA)
  private ServiceAreaBusiness serviceArea;

  public static final String SERIALIZED_NAME_SERVICE_ITEMS = "serviceItems";
  @SerializedName(SERIALIZED_NAME_SERVICE_ITEMS)
  private List<ServiceItem> serviceItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPECIAL_HOURS = "specialHours";
  @SerializedName(SERIALIZED_NAME_SPECIAL_HOURS)
  private SpecialHours specialHours;

  public static final String SERIALIZED_NAME_STORE_CODE = "storeCode";
  @SerializedName(SERIALIZED_NAME_STORE_CODE)
  private String storeCode;

  public static final String SERIALIZED_NAME_STOREFRONT_ADDRESS = "storefrontAddress";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_ADDRESS)
  private PostalAddress storefrontAddress;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WEBSITE_URI = "websiteUri";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URI)
  private String websiteUri;

  public Location() {
  }

  public Location adWordsLocationExtensions(AdWordsLocationExtensions adWordsLocationExtensions) {
    this.adWordsLocationExtensions = adWordsLocationExtensions;
    return this;
  }

  /**
   * Get adWordsLocationExtensions
   * @return adWordsLocationExtensions
   */
  @javax.annotation.Nullable
  public AdWordsLocationExtensions getAdWordsLocationExtensions() {
    return adWordsLocationExtensions;
  }

  public void setAdWordsLocationExtensions(AdWordsLocationExtensions adWordsLocationExtensions) {
    this.adWordsLocationExtensions = adWordsLocationExtensions;
  }


  public Location categories(Categories categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public Categories getCategories() {
    return categories;
  }

  public void setCategories(Categories categories) {
    this.categories = categories;
  }


  public Location labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public Location addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public Location languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Immutable. The language of the location. Set during creation and not updateable.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public Location latlng(LatLng latlng) {
    this.latlng = latlng;
    return this;
  }

  /**
   * Get latlng
   * @return latlng
   */
  @javax.annotation.Nullable
  public LatLng getLatlng() {
    return latlng;
  }

  public void setLatlng(LatLng latlng) {
    this.latlng = latlng;
  }


  public Location metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public Location moreHours(List<MoreHours> moreHours) {
    this.moreHours = moreHours;
    return this;
  }

  public Location addMoreHoursItem(MoreHours moreHoursItem) {
    if (this.moreHours == null) {
      this.moreHours = new ArrayList<>();
    }
    this.moreHours.add(moreHoursItem);
    return this;
  }

  /**
   * Optional. More hours for a business&#39;s different departments or specific customers.
   * @return moreHours
   */
  @javax.annotation.Nullable
  public List<MoreHours> getMoreHours() {
    return moreHours;
  }

  public void setMoreHours(List<MoreHours> moreHours) {
    this.moreHours = moreHours;
  }


  public Location name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Google identifier for this location in the form: &#x60;locations/{location_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Location openInfo(OpenInfo openInfo) {
    this.openInfo = openInfo;
    return this;
  }

  /**
   * Get openInfo
   * @return openInfo
   */
  @javax.annotation.Nullable
  public OpenInfo getOpenInfo() {
    return openInfo;
  }

  public void setOpenInfo(OpenInfo openInfo) {
    this.openInfo = openInfo;
  }


  public Location phoneNumbers(PhoneNumbers phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  /**
   * Get phoneNumbers
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public PhoneNumbers getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(PhoneNumbers phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public Location profile(Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public Profile getProfile() {
    return profile;
  }

  public void setProfile(Profile profile) {
    this.profile = profile;
  }


  public Location regularHours(BusinessHours regularHours) {
    this.regularHours = regularHours;
    return this;
  }

  /**
   * Get regularHours
   * @return regularHours
   */
  @javax.annotation.Nullable
  public BusinessHours getRegularHours() {
    return regularHours;
  }

  public void setRegularHours(BusinessHours regularHours) {
    this.regularHours = regularHours;
  }


  public Location relationshipData(RelationshipData relationshipData) {
    this.relationshipData = relationshipData;
    return this;
  }

  /**
   * Get relationshipData
   * @return relationshipData
   */
  @javax.annotation.Nullable
  public RelationshipData getRelationshipData() {
    return relationshipData;
  }

  public void setRelationshipData(RelationshipData relationshipData) {
    this.relationshipData = relationshipData;
  }


  public Location serviceArea(ServiceAreaBusiness serviceArea) {
    this.serviceArea = serviceArea;
    return this;
  }

  /**
   * Get serviceArea
   * @return serviceArea
   */
  @javax.annotation.Nullable
  public ServiceAreaBusiness getServiceArea() {
    return serviceArea;
  }

  public void setServiceArea(ServiceAreaBusiness serviceArea) {
    this.serviceArea = serviceArea;
  }


  public Location serviceItems(List<ServiceItem> serviceItems) {
    this.serviceItems = serviceItems;
    return this;
  }

  public Location addServiceItemsItem(ServiceItem serviceItemsItem) {
    if (this.serviceItems == null) {
      this.serviceItems = new ArrayList<>();
    }
    this.serviceItems.add(serviceItemsItem);
    return this;
  }

  /**
   * Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.
   * @return serviceItems
   */
  @javax.annotation.Nullable
  public List<ServiceItem> getServiceItems() {
    return serviceItems;
  }

  public void setServiceItems(List<ServiceItem> serviceItems) {
    this.serviceItems = serviceItems;
  }


  public Location specialHours(SpecialHours specialHours) {
    this.specialHours = specialHours;
    return this;
  }

  /**
   * Get specialHours
   * @return specialHours
   */
  @javax.annotation.Nullable
  public SpecialHours getSpecialHours() {
    return specialHours;
  }

  public void setSpecialHours(SpecialHours specialHours) {
    this.specialHours = specialHours;
  }


  public Location storeCode(String storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  /**
   * Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records.
   * @return storeCode
   */
  @javax.annotation.Nullable
  public String getStoreCode() {
    return storeCode;
  }

  public void setStoreCode(String storeCode) {
    this.storeCode = storeCode;
  }


  public Location storefrontAddress(PostalAddress storefrontAddress) {
    this.storefrontAddress = storefrontAddress;
    return this;
  }

  /**
   * Get storefrontAddress
   * @return storefrontAddress
   */
  @javax.annotation.Nullable
  public PostalAddress getStorefrontAddress() {
    return storefrontAddress;
  }

  public void setStorefrontAddress(PostalAddress storefrontAddress) {
    this.storefrontAddress = storefrontAddress;
  }


  public Location title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. Location name should reflect your business&#39;s real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, &#x60;Address&#x60;, &#x60;Categories&#x60;). Don&#39;t add unnecessary information to your name (for example, prefer \&quot;Google\&quot; over \&quot;Google Inc. - Mountain View Corporate Headquarters\&quot;). Don&#39;t include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, \&quot;Chase ATM in Duane Reade\&quot;).
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Location websiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
    return this;
  }

  /**
   * Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
   * @return websiteUri
   */
  @javax.annotation.Nullable
  public String getWebsiteUri() {
    return websiteUri;
  }

  public void setWebsiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.adWordsLocationExtensions, location.adWordsLocationExtensions) &&
        Objects.equals(this.categories, location.categories) &&
        Objects.equals(this.labels, location.labels) &&
        Objects.equals(this.languageCode, location.languageCode) &&
        Objects.equals(this.latlng, location.latlng) &&
        Objects.equals(this.metadata, location.metadata) &&
        Objects.equals(this.moreHours, location.moreHours) &&
        Objects.equals(this.name, location.name) &&
        Objects.equals(this.openInfo, location.openInfo) &&
        Objects.equals(this.phoneNumbers, location.phoneNumbers) &&
        Objects.equals(this.profile, location.profile) &&
        Objects.equals(this.regularHours, location.regularHours) &&
        Objects.equals(this.relationshipData, location.relationshipData) &&
        Objects.equals(this.serviceArea, location.serviceArea) &&
        Objects.equals(this.serviceItems, location.serviceItems) &&
        Objects.equals(this.specialHours, location.specialHours) &&
        Objects.equals(this.storeCode, location.storeCode) &&
        Objects.equals(this.storefrontAddress, location.storefrontAddress) &&
        Objects.equals(this.title, location.title) &&
        Objects.equals(this.websiteUri, location.websiteUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adWordsLocationExtensions, categories, labels, languageCode, latlng, metadata, moreHours, name, openInfo, phoneNumbers, profile, regularHours, relationshipData, serviceArea, serviceItems, specialHours, storeCode, storefrontAddress, title, websiteUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    adWordsLocationExtensions: ").append(toIndentedString(adWordsLocationExtensions)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    latlng: ").append(toIndentedString(latlng)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    moreHours: ").append(toIndentedString(moreHours)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openInfo: ").append(toIndentedString(openInfo)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    regularHours: ").append(toIndentedString(regularHours)).append("\n");
    sb.append("    relationshipData: ").append(toIndentedString(relationshipData)).append("\n");
    sb.append("    serviceArea: ").append(toIndentedString(serviceArea)).append("\n");
    sb.append("    serviceItems: ").append(toIndentedString(serviceItems)).append("\n");
    sb.append("    specialHours: ").append(toIndentedString(specialHours)).append("\n");
    sb.append("    storeCode: ").append(toIndentedString(storeCode)).append("\n");
    sb.append("    storefrontAddress: ").append(toIndentedString(storefrontAddress)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    websiteUri: ").append(toIndentedString(websiteUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adWordsLocationExtensions");
    openapiFields.add("categories");
    openapiFields.add("labels");
    openapiFields.add("languageCode");
    openapiFields.add("latlng");
    openapiFields.add("metadata");
    openapiFields.add("moreHours");
    openapiFields.add("name");
    openapiFields.add("openInfo");
    openapiFields.add("phoneNumbers");
    openapiFields.add("profile");
    openapiFields.add("regularHours");
    openapiFields.add("relationshipData");
    openapiFields.add("serviceArea");
    openapiFields.add("serviceItems");
    openapiFields.add("specialHours");
    openapiFields.add("storeCode");
    openapiFields.add("storefrontAddress");
    openapiFields.add("title");
    openapiFields.add("websiteUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Location
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adWordsLocationExtensions`
      if (jsonObj.get("adWordsLocationExtensions") != null && !jsonObj.get("adWordsLocationExtensions").isJsonNull()) {
        AdWordsLocationExtensions.validateJsonElement(jsonObj.get("adWordsLocationExtensions"));
      }
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        Categories.validateJsonElement(jsonObj.get("categories"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the optional field `latlng`
      if (jsonObj.get("latlng") != null && !jsonObj.get("latlng").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("latlng"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("moreHours") != null && !jsonObj.get("moreHours").isJsonNull()) {
        JsonArray jsonArraymoreHours = jsonObj.getAsJsonArray("moreHours");
        if (jsonArraymoreHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("moreHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `moreHours` to be an array in the JSON string but got `%s`", jsonObj.get("moreHours").toString()));
          }

          // validate the optional field `moreHours` (array)
          for (int i = 0; i < jsonArraymoreHours.size(); i++) {
            MoreHours.validateJsonElement(jsonArraymoreHours.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `openInfo`
      if (jsonObj.get("openInfo") != null && !jsonObj.get("openInfo").isJsonNull()) {
        OpenInfo.validateJsonElement(jsonObj.get("openInfo"));
      }
      // validate the optional field `phoneNumbers`
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        PhoneNumbers.validateJsonElement(jsonObj.get("phoneNumbers"));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        Profile.validateJsonElement(jsonObj.get("profile"));
      }
      // validate the optional field `regularHours`
      if (jsonObj.get("regularHours") != null && !jsonObj.get("regularHours").isJsonNull()) {
        BusinessHours.validateJsonElement(jsonObj.get("regularHours"));
      }
      // validate the optional field `relationshipData`
      if (jsonObj.get("relationshipData") != null && !jsonObj.get("relationshipData").isJsonNull()) {
        RelationshipData.validateJsonElement(jsonObj.get("relationshipData"));
      }
      // validate the optional field `serviceArea`
      if (jsonObj.get("serviceArea") != null && !jsonObj.get("serviceArea").isJsonNull()) {
        ServiceAreaBusiness.validateJsonElement(jsonObj.get("serviceArea"));
      }
      if (jsonObj.get("serviceItems") != null && !jsonObj.get("serviceItems").isJsonNull()) {
        JsonArray jsonArrayserviceItems = jsonObj.getAsJsonArray("serviceItems");
        if (jsonArrayserviceItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceItems` to be an array in the JSON string but got `%s`", jsonObj.get("serviceItems").toString()));
          }

          // validate the optional field `serviceItems` (array)
          for (int i = 0; i < jsonArrayserviceItems.size(); i++) {
            ServiceItem.validateJsonElement(jsonArrayserviceItems.get(i));
          };
        }
      }
      // validate the optional field `specialHours`
      if (jsonObj.get("specialHours") != null && !jsonObj.get("specialHours").isJsonNull()) {
        SpecialHours.validateJsonElement(jsonObj.get("specialHours"));
      }
      if ((jsonObj.get("storeCode") != null && !jsonObj.get("storeCode").isJsonNull()) && !jsonObj.get("storeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCode").toString()));
      }
      // validate the optional field `storefrontAddress`
      if (jsonObj.get("storefrontAddress") != null && !jsonObj.get("storefrontAddress").isJsonNull()) {
        PostalAddress.validateJsonElement(jsonObj.get("storefrontAddress"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("websiteUri") != null && !jsonObj.get("websiteUri").isJsonNull()) && !jsonObj.get("websiteUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Location given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Location
   * @throws IOException if the JSON string is invalid with respect to Location
   */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

  /**
   * Convert an instance of Location to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

