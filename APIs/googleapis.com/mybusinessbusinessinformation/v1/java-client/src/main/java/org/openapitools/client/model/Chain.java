/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChainName;
import org.openapitools.client.model.ChainUri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A chain is a brand that your business&#39;s locations can be affiliated with.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Chain {
  public static final String SERIALIZED_NAME_CHAIN_NAMES = "chainNames";
  @SerializedName(SERIALIZED_NAME_CHAIN_NAMES)
  private List<ChainName> chainNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_COUNT = "locationCount";
  @SerializedName(SERIALIZED_NAME_LOCATION_COUNT)
  private Integer locationCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WEBSITES = "websites";
  @SerializedName(SERIALIZED_NAME_WEBSITES)
  private List<ChainUri> websites = new ArrayList<>();

  public Chain() {
  }

  public Chain chainNames(List<ChainName> chainNames) {
    this.chainNames = chainNames;
    return this;
  }

  public Chain addChainNamesItem(ChainName chainNamesItem) {
    if (this.chainNames == null) {
      this.chainNames = new ArrayList<>();
    }
    this.chainNames.add(chainNamesItem);
    return this;
  }

  /**
   * Names of the chain.
   * @return chainNames
   */
  @javax.annotation.Nullable
  public List<ChainName> getChainNames() {
    return chainNames;
  }

  public void setChainNames(List<ChainName> chainNames) {
    this.chainNames = chainNames;
  }


  public Chain locationCount(Integer locationCount) {
    this.locationCount = locationCount;
    return this;
  }

  /**
   * Number of locations that are part of this chain.
   * @return locationCount
   */
  @javax.annotation.Nullable
  public Integer getLocationCount() {
    return locationCount;
  }

  public void setLocationCount(Integer locationCount) {
    this.locationCount = locationCount;
  }


  public Chain name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The chain&#39;s resource name, in the format &#x60;chains/{chain_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Chain websites(List<ChainUri> websites) {
    this.websites = websites;
    return this;
  }

  public Chain addWebsitesItem(ChainUri websitesItem) {
    if (this.websites == null) {
      this.websites = new ArrayList<>();
    }
    this.websites.add(websitesItem);
    return this;
  }

  /**
   * Websites of the chain.
   * @return websites
   */
  @javax.annotation.Nullable
  public List<ChainUri> getWebsites() {
    return websites;
  }

  public void setWebsites(List<ChainUri> websites) {
    this.websites = websites;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chain chain = (Chain) o;
    return Objects.equals(this.chainNames, chain.chainNames) &&
        Objects.equals(this.locationCount, chain.locationCount) &&
        Objects.equals(this.name, chain.name) &&
        Objects.equals(this.websites, chain.websites);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chainNames, locationCount, name, websites);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chain {\n");
    sb.append("    chainNames: ").append(toIndentedString(chainNames)).append("\n");
    sb.append("    locationCount: ").append(toIndentedString(locationCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    websites: ").append(toIndentedString(websites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chainNames");
    openapiFields.add("locationCount");
    openapiFields.add("name");
    openapiFields.add("websites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Chain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Chain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chain is not found in the empty JSON string", Chain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Chain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("chainNames") != null && !jsonObj.get("chainNames").isJsonNull()) {
        JsonArray jsonArraychainNames = jsonObj.getAsJsonArray("chainNames");
        if (jsonArraychainNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("chainNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `chainNames` to be an array in the JSON string but got `%s`", jsonObj.get("chainNames").toString()));
          }

          // validate the optional field `chainNames` (array)
          for (int i = 0; i < jsonArraychainNames.size(); i++) {
            ChainName.validateJsonElement(jsonArraychainNames.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("websites") != null && !jsonObj.get("websites").isJsonNull()) {
        JsonArray jsonArraywebsites = jsonObj.getAsJsonArray("websites");
        if (jsonArraywebsites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("websites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `websites` to be an array in the JSON string but got `%s`", jsonObj.get("websites").toString()));
          }

          // validate the optional field `websites` (array)
          for (int i = 0; i < jsonArraywebsites.size(); i++) {
            ChainUri.validateJsonElement(jsonArraywebsites.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chain.class));

       return (TypeAdapter<T>) new TypeAdapter<Chain>() {
           @Override
           public void write(JsonWriter out, Chain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Chain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Chain
   * @throws IOException if the JSON string is invalid with respect to Chain
   */
  public static Chain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chain.class);
  }

  /**
   * Convert an instance of Chain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

