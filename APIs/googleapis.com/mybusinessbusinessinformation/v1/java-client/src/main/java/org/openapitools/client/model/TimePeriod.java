/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a span of time that the business is open, starting on the specified open day/time and closing on the specified close day/time. The closing time must occur after the opening time, for example later in the same day, or on a subsequent day.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimePeriod {
  /**
   * Required. Indicates the day of the week this period ends on.
   */
  @JsonAdapter(CloseDayEnum.Adapter.class)
  public enum CloseDayEnum {
    DAY_OF_WEEK_UNSPECIFIED("DAY_OF_WEEK_UNSPECIFIED"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    CloseDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CloseDayEnum fromValue(String value) {
      for (CloseDayEnum b : CloseDayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CloseDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloseDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CloseDayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CloseDayEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CloseDayEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSE_DAY = "closeDay";
  @SerializedName(SERIALIZED_NAME_CLOSE_DAY)
  private CloseDayEnum closeDay;

  public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";
  @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
  private TimeOfDay closeTime;

  /**
   * Required. Indicates the day of the week this period starts on.
   */
  @JsonAdapter(OpenDayEnum.Adapter.class)
  public enum OpenDayEnum {
    DAY_OF_WEEK_UNSPECIFIED("DAY_OF_WEEK_UNSPECIFIED"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    OpenDayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpenDayEnum fromValue(String value) {
      for (OpenDayEnum b : OpenDayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpenDayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpenDayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpenDayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpenDayEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpenDayEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPEN_DAY = "openDay";
  @SerializedName(SERIALIZED_NAME_OPEN_DAY)
  private OpenDayEnum openDay;

  public static final String SERIALIZED_NAME_OPEN_TIME = "openTime";
  @SerializedName(SERIALIZED_NAME_OPEN_TIME)
  private TimeOfDay openTime;

  public TimePeriod() {
  }

  public TimePeriod closeDay(CloseDayEnum closeDay) {
    this.closeDay = closeDay;
    return this;
  }

  /**
   * Required. Indicates the day of the week this period ends on.
   * @return closeDay
   */
  @javax.annotation.Nullable
  public CloseDayEnum getCloseDay() {
    return closeDay;
  }

  public void setCloseDay(CloseDayEnum closeDay) {
    this.closeDay = closeDay;
  }


  public TimePeriod closeTime(TimeOfDay closeTime) {
    this.closeTime = closeTime;
    return this;
  }

  /**
   * Get closeTime
   * @return closeTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getCloseTime() {
    return closeTime;
  }

  public void setCloseTime(TimeOfDay closeTime) {
    this.closeTime = closeTime;
  }


  public TimePeriod openDay(OpenDayEnum openDay) {
    this.openDay = openDay;
    return this;
  }

  /**
   * Required. Indicates the day of the week this period starts on.
   * @return openDay
   */
  @javax.annotation.Nullable
  public OpenDayEnum getOpenDay() {
    return openDay;
  }

  public void setOpenDay(OpenDayEnum openDay) {
    this.openDay = openDay;
  }


  public TimePeriod openTime(TimeOfDay openTime) {
    this.openTime = openTime;
    return this;
  }

  /**
   * Get openTime
   * @return openTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getOpenTime() {
    return openTime;
  }

  public void setOpenTime(TimeOfDay openTime) {
    this.openTime = openTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimePeriod timePeriod = (TimePeriod) o;
    return Objects.equals(this.closeDay, timePeriod.closeDay) &&
        Objects.equals(this.closeTime, timePeriod.closeTime) &&
        Objects.equals(this.openDay, timePeriod.openDay) &&
        Objects.equals(this.openTime, timePeriod.openTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeDay, closeTime, openDay, openTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimePeriod {\n");
    sb.append("    closeDay: ").append(toIndentedString(closeDay)).append("\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    openDay: ").append(toIndentedString(openDay)).append("\n");
    sb.append("    openTime: ").append(toIndentedString(openTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closeDay");
    openapiFields.add("closeTime");
    openapiFields.add("openDay");
    openapiFields.add("openTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimePeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimePeriod is not found in the empty JSON string", TimePeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimePeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimePeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closeDay") != null && !jsonObj.get("closeDay").isJsonNull()) && !jsonObj.get("closeDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closeDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closeDay").toString()));
      }
      // validate the optional field `closeDay`
      if (jsonObj.get("closeDay") != null && !jsonObj.get("closeDay").isJsonNull()) {
        CloseDayEnum.validateJsonElement(jsonObj.get("closeDay"));
      }
      // validate the optional field `closeTime`
      if (jsonObj.get("closeTime") != null && !jsonObj.get("closeTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("closeTime"));
      }
      if ((jsonObj.get("openDay") != null && !jsonObj.get("openDay").isJsonNull()) && !jsonObj.get("openDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openDay").toString()));
      }
      // validate the optional field `openDay`
      if (jsonObj.get("openDay") != null && !jsonObj.get("openDay").isJsonNull()) {
        OpenDayEnum.validateJsonElement(jsonObj.get("openDay"));
      }
      // validate the optional field `openTime`
      if (jsonObj.get("openTime") != null && !jsonObj.get("openTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("openTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<TimePeriod>() {
           @Override
           public void write(JsonWriter out, TimePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimePeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimePeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimePeriod
   * @throws IOException if the JSON string is invalid with respect to TimePeriod
   */
  public static TimePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimePeriod.class);
  }

  /**
   * Convert an instance of TimePeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

