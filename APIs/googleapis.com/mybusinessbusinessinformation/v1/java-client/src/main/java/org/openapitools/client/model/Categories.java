/*
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:19.282285-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Categories {
  public static final String SERIALIZED_NAME_ADDITIONAL_CATEGORIES = "additionalCategories";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CATEGORIES)
  private List<Category> additionalCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_CATEGORY = "primaryCategory";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CATEGORY)
  private Category primaryCategory;

  public Categories() {
  }

  public Categories additionalCategories(List<Category> additionalCategories) {
    this.additionalCategories = additionalCategories;
    return this;
  }

  public Categories addAdditionalCategoriesItem(Category additionalCategoriesItem) {
    if (this.additionalCategories == null) {
      this.additionalCategories = new ArrayList<>();
    }
    this.additionalCategories.add(additionalCategoriesItem);
    return this;
  }

  /**
   * Optional. Additional categories to describe your business. Categories help your customers find accurate, specific results for services they&#39;re interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.
   * @return additionalCategories
   */
  @javax.annotation.Nullable
  public List<Category> getAdditionalCategories() {
    return additionalCategories;
  }

  public void setAdditionalCategories(List<Category> additionalCategories) {
    this.additionalCategories = additionalCategories;
  }


  public Categories primaryCategory(Category primaryCategory) {
    this.primaryCategory = primaryCategory;
    return this;
  }

  /**
   * Get primaryCategory
   * @return primaryCategory
   */
  @javax.annotation.Nullable
  public Category getPrimaryCategory() {
    return primaryCategory;
  }

  public void setPrimaryCategory(Category primaryCategory) {
    this.primaryCategory = primaryCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Categories categories = (Categories) o;
    return Objects.equals(this.additionalCategories, categories.additionalCategories) &&
        Objects.equals(this.primaryCategory, categories.primaryCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCategories, primaryCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Categories {\n");
    sb.append("    additionalCategories: ").append(toIndentedString(additionalCategories)).append("\n");
    sb.append("    primaryCategory: ").append(toIndentedString(primaryCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalCategories");
    openapiFields.add("primaryCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Categories
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Categories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Categories is not found in the empty JSON string", Categories.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Categories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Categories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalCategories") != null && !jsonObj.get("additionalCategories").isJsonNull()) {
        JsonArray jsonArrayadditionalCategories = jsonObj.getAsJsonArray("additionalCategories");
        if (jsonArrayadditionalCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalCategories` to be an array in the JSON string but got `%s`", jsonObj.get("additionalCategories").toString()));
          }

          // validate the optional field `additionalCategories` (array)
          for (int i = 0; i < jsonArrayadditionalCategories.size(); i++) {
            Category.validateJsonElement(jsonArrayadditionalCategories.get(i));
          };
        }
      }
      // validate the optional field `primaryCategory`
      if (jsonObj.get("primaryCategory") != null && !jsonObj.get("primaryCategory").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("primaryCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Categories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Categories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Categories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Categories.class));

       return (TypeAdapter<T>) new TypeAdapter<Categories>() {
           @Override
           public void write(JsonWriter out, Categories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Categories read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Categories given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Categories
   * @throws IOException if the JSON string is invalid with respect to Categories
   */
  public static Categories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Categories.class);
  }

  /**
   * Convert an instance of Categories to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

