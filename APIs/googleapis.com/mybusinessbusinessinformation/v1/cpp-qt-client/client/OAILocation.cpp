/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_ad_words_location_extensions_isSet = false;
    m_ad_words_location_extensions_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_latlng_isSet = false;
    m_latlng_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_more_hours_isSet = false;
    m_more_hours_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_info_isSet = false;
    m_open_info_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_regular_hours_isSet = false;
    m_regular_hours_isValid = false;

    m_relationship_data_isSet = false;
    m_relationship_data_isValid = false;

    m_service_area_isSet = false;
    m_service_area_isValid = false;

    m_service_items_isSet = false;
    m_service_items_isValid = false;

    m_special_hours_isSet = false;
    m_special_hours_isValid = false;

    m_store_code_isSet = false;
    m_store_code_isValid = false;

    m_storefront_address_isSet = false;
    m_storefront_address_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_website_uri_isSet = false;
    m_website_uri_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_ad_words_location_extensions_isValid = ::OpenAPI::fromJsonValue(m_ad_words_location_extensions, json[QString("adWordsLocationExtensions")]);
    m_ad_words_location_extensions_isSet = !json[QString("adWordsLocationExtensions")].isNull() && m_ad_words_location_extensions_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_latlng_isValid = ::OpenAPI::fromJsonValue(m_latlng, json[QString("latlng")]);
    m_latlng_isSet = !json[QString("latlng")].isNull() && m_latlng_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_more_hours_isValid = ::OpenAPI::fromJsonValue(m_more_hours, json[QString("moreHours")]);
    m_more_hours_isSet = !json[QString("moreHours")].isNull() && m_more_hours_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_info_isValid = ::OpenAPI::fromJsonValue(m_open_info, json[QString("openInfo")]);
    m_open_info_isSet = !json[QString("openInfo")].isNull() && m_open_info_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_regular_hours_isValid = ::OpenAPI::fromJsonValue(m_regular_hours, json[QString("regularHours")]);
    m_regular_hours_isSet = !json[QString("regularHours")].isNull() && m_regular_hours_isValid;

    m_relationship_data_isValid = ::OpenAPI::fromJsonValue(m_relationship_data, json[QString("relationshipData")]);
    m_relationship_data_isSet = !json[QString("relationshipData")].isNull() && m_relationship_data_isValid;

    m_service_area_isValid = ::OpenAPI::fromJsonValue(m_service_area, json[QString("serviceArea")]);
    m_service_area_isSet = !json[QString("serviceArea")].isNull() && m_service_area_isValid;

    m_service_items_isValid = ::OpenAPI::fromJsonValue(m_service_items, json[QString("serviceItems")]);
    m_service_items_isSet = !json[QString("serviceItems")].isNull() && m_service_items_isValid;

    m_special_hours_isValid = ::OpenAPI::fromJsonValue(m_special_hours, json[QString("specialHours")]);
    m_special_hours_isSet = !json[QString("specialHours")].isNull() && m_special_hours_isValid;

    m_store_code_isValid = ::OpenAPI::fromJsonValue(m_store_code, json[QString("storeCode")]);
    m_store_code_isSet = !json[QString("storeCode")].isNull() && m_store_code_isValid;

    m_storefront_address_isValid = ::OpenAPI::fromJsonValue(m_storefront_address, json[QString("storefrontAddress")]);
    m_storefront_address_isSet = !json[QString("storefrontAddress")].isNull() && m_storefront_address_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_website_uri_isValid = ::OpenAPI::fromJsonValue(m_website_uri, json[QString("websiteUri")]);
    m_website_uri_isSet = !json[QString("websiteUri")].isNull() && m_website_uri_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_words_location_extensions.isSet()) {
        obj.insert(QString("adWordsLocationExtensions"), ::OpenAPI::toJsonValue(m_ad_words_location_extensions));
    }
    if (m_categories.isSet()) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_latlng.isSet()) {
        obj.insert(QString("latlng"), ::OpenAPI::toJsonValue(m_latlng));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_more_hours.size() > 0) {
        obj.insert(QString("moreHours"), ::OpenAPI::toJsonValue(m_more_hours));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_info.isSet()) {
        obj.insert(QString("openInfo"), ::OpenAPI::toJsonValue(m_open_info));
    }
    if (m_phone_numbers.isSet()) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_regular_hours.isSet()) {
        obj.insert(QString("regularHours"), ::OpenAPI::toJsonValue(m_regular_hours));
    }
    if (m_relationship_data.isSet()) {
        obj.insert(QString("relationshipData"), ::OpenAPI::toJsonValue(m_relationship_data));
    }
    if (m_service_area.isSet()) {
        obj.insert(QString("serviceArea"), ::OpenAPI::toJsonValue(m_service_area));
    }
    if (m_service_items.size() > 0) {
        obj.insert(QString("serviceItems"), ::OpenAPI::toJsonValue(m_service_items));
    }
    if (m_special_hours.isSet()) {
        obj.insert(QString("specialHours"), ::OpenAPI::toJsonValue(m_special_hours));
    }
    if (m_store_code_isSet) {
        obj.insert(QString("storeCode"), ::OpenAPI::toJsonValue(m_store_code));
    }
    if (m_storefront_address.isSet()) {
        obj.insert(QString("storefrontAddress"), ::OpenAPI::toJsonValue(m_storefront_address));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_website_uri_isSet) {
        obj.insert(QString("websiteUri"), ::OpenAPI::toJsonValue(m_website_uri));
    }
    return obj;
}

OAIAdWordsLocationExtensions OAILocation::getAdWordsLocationExtensions() const {
    return m_ad_words_location_extensions;
}
void OAILocation::setAdWordsLocationExtensions(const OAIAdWordsLocationExtensions &ad_words_location_extensions) {
    m_ad_words_location_extensions = ad_words_location_extensions;
    m_ad_words_location_extensions_isSet = true;
}

bool OAILocation::is_ad_words_location_extensions_Set() const{
    return m_ad_words_location_extensions_isSet;
}

bool OAILocation::is_ad_words_location_extensions_Valid() const{
    return m_ad_words_location_extensions_isValid;
}

OAICategories OAILocation::getCategories() const {
    return m_categories;
}
void OAILocation::setCategories(const OAICategories &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAILocation::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAILocation::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAILocation::getLabels() const {
    return m_labels;
}
void OAILocation::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILocation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILocation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAILocation::getLanguageCode() const {
    return m_language_code;
}
void OAILocation::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAILocation::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAILocation::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAILatLng OAILocation::getLatlng() const {
    return m_latlng;
}
void OAILocation::setLatlng(const OAILatLng &latlng) {
    m_latlng = latlng;
    m_latlng_isSet = true;
}

bool OAILocation::is_latlng_Set() const{
    return m_latlng_isSet;
}

bool OAILocation::is_latlng_Valid() const{
    return m_latlng_isValid;
}

OAIMetadata OAILocation::getMetadata() const {
    return m_metadata;
}
void OAILocation::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILocation::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILocation::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMoreHours> OAILocation::getMoreHours() const {
    return m_more_hours;
}
void OAILocation::setMoreHours(const QList<OAIMoreHours> &more_hours) {
    m_more_hours = more_hours;
    m_more_hours_isSet = true;
}

bool OAILocation::is_more_hours_Set() const{
    return m_more_hours_isSet;
}

bool OAILocation::is_more_hours_Valid() const{
    return m_more_hours_isValid;
}

QString OAILocation::getName() const {
    return m_name;
}
void OAILocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation::is_name_Valid() const{
    return m_name_isValid;
}

OAIOpenInfo OAILocation::getOpenInfo() const {
    return m_open_info;
}
void OAILocation::setOpenInfo(const OAIOpenInfo &open_info) {
    m_open_info = open_info;
    m_open_info_isSet = true;
}

bool OAILocation::is_open_info_Set() const{
    return m_open_info_isSet;
}

bool OAILocation::is_open_info_Valid() const{
    return m_open_info_isValid;
}

OAIPhoneNumbers OAILocation::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAILocation::setPhoneNumbers(const OAIPhoneNumbers &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAILocation::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAILocation::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

OAIProfile OAILocation::getProfile() const {
    return m_profile;
}
void OAILocation::setProfile(const OAIProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAILocation::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAILocation::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIBusinessHours OAILocation::getRegularHours() const {
    return m_regular_hours;
}
void OAILocation::setRegularHours(const OAIBusinessHours &regular_hours) {
    m_regular_hours = regular_hours;
    m_regular_hours_isSet = true;
}

bool OAILocation::is_regular_hours_Set() const{
    return m_regular_hours_isSet;
}

bool OAILocation::is_regular_hours_Valid() const{
    return m_regular_hours_isValid;
}

OAIRelationshipData OAILocation::getRelationshipData() const {
    return m_relationship_data;
}
void OAILocation::setRelationshipData(const OAIRelationshipData &relationship_data) {
    m_relationship_data = relationship_data;
    m_relationship_data_isSet = true;
}

bool OAILocation::is_relationship_data_Set() const{
    return m_relationship_data_isSet;
}

bool OAILocation::is_relationship_data_Valid() const{
    return m_relationship_data_isValid;
}

OAIServiceAreaBusiness OAILocation::getServiceArea() const {
    return m_service_area;
}
void OAILocation::setServiceArea(const OAIServiceAreaBusiness &service_area) {
    m_service_area = service_area;
    m_service_area_isSet = true;
}

bool OAILocation::is_service_area_Set() const{
    return m_service_area_isSet;
}

bool OAILocation::is_service_area_Valid() const{
    return m_service_area_isValid;
}

QList<OAIServiceItem> OAILocation::getServiceItems() const {
    return m_service_items;
}
void OAILocation::setServiceItems(const QList<OAIServiceItem> &service_items) {
    m_service_items = service_items;
    m_service_items_isSet = true;
}

bool OAILocation::is_service_items_Set() const{
    return m_service_items_isSet;
}

bool OAILocation::is_service_items_Valid() const{
    return m_service_items_isValid;
}

OAISpecialHours OAILocation::getSpecialHours() const {
    return m_special_hours;
}
void OAILocation::setSpecialHours(const OAISpecialHours &special_hours) {
    m_special_hours = special_hours;
    m_special_hours_isSet = true;
}

bool OAILocation::is_special_hours_Set() const{
    return m_special_hours_isSet;
}

bool OAILocation::is_special_hours_Valid() const{
    return m_special_hours_isValid;
}

QString OAILocation::getStoreCode() const {
    return m_store_code;
}
void OAILocation::setStoreCode(const QString &store_code) {
    m_store_code = store_code;
    m_store_code_isSet = true;
}

bool OAILocation::is_store_code_Set() const{
    return m_store_code_isSet;
}

bool OAILocation::is_store_code_Valid() const{
    return m_store_code_isValid;
}

OAIPostalAddress OAILocation::getStorefrontAddress() const {
    return m_storefront_address;
}
void OAILocation::setStorefrontAddress(const OAIPostalAddress &storefront_address) {
    m_storefront_address = storefront_address;
    m_storefront_address_isSet = true;
}

bool OAILocation::is_storefront_address_Set() const{
    return m_storefront_address_isSet;
}

bool OAILocation::is_storefront_address_Valid() const{
    return m_storefront_address_isValid;
}

QString OAILocation::getTitle() const {
    return m_title;
}
void OAILocation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILocation::is_title_Set() const{
    return m_title_isSet;
}

bool OAILocation::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILocation::getWebsiteUri() const {
    return m_website_uri;
}
void OAILocation::setWebsiteUri(const QString &website_uri) {
    m_website_uri = website_uri;
    m_website_uri_isSet = true;
}

bool OAILocation::is_website_uri_Set() const{
    return m_website_uri_isSet;
}

bool OAILocation::is_website_uri_Valid() const{
    return m_website_uri_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_words_location_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latlng.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storefront_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
