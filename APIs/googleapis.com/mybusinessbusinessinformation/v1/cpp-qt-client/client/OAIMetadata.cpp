/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_have_business_calls_isSet = false;
    m_can_have_business_calls_isValid = false;

    m_can_have_food_menus_isSet = false;
    m_can_have_food_menus_isValid = false;

    m_can_modify_service_list_isSet = false;
    m_can_modify_service_list_isValid = false;

    m_can_operate_health_data_isSet = false;
    m_can_operate_health_data_isValid = false;

    m_can_operate_local_post_isSet = false;
    m_can_operate_local_post_isValid = false;

    m_can_operate_lodging_data_isSet = false;
    m_can_operate_lodging_data_isValid = false;

    m_duplicate_location_isSet = false;
    m_duplicate_location_isValid = false;

    m_has_google_updated_isSet = false;
    m_has_google_updated_isValid = false;

    m_has_pending_edits_isSet = false;
    m_has_pending_edits_isValid = false;

    m_has_voice_of_merchant_isSet = false;
    m_has_voice_of_merchant_isValid = false;

    m_maps_uri_isSet = false;
    m_maps_uri_isValid = false;

    m_new_review_uri_isSet = false;
    m_new_review_uri_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("canDelete")]);
    m_can_delete_isSet = !json[QString("canDelete")].isNull() && m_can_delete_isValid;

    m_can_have_business_calls_isValid = ::OpenAPI::fromJsonValue(m_can_have_business_calls, json[QString("canHaveBusinessCalls")]);
    m_can_have_business_calls_isSet = !json[QString("canHaveBusinessCalls")].isNull() && m_can_have_business_calls_isValid;

    m_can_have_food_menus_isValid = ::OpenAPI::fromJsonValue(m_can_have_food_menus, json[QString("canHaveFoodMenus")]);
    m_can_have_food_menus_isSet = !json[QString("canHaveFoodMenus")].isNull() && m_can_have_food_menus_isValid;

    m_can_modify_service_list_isValid = ::OpenAPI::fromJsonValue(m_can_modify_service_list, json[QString("canModifyServiceList")]);
    m_can_modify_service_list_isSet = !json[QString("canModifyServiceList")].isNull() && m_can_modify_service_list_isValid;

    m_can_operate_health_data_isValid = ::OpenAPI::fromJsonValue(m_can_operate_health_data, json[QString("canOperateHealthData")]);
    m_can_operate_health_data_isSet = !json[QString("canOperateHealthData")].isNull() && m_can_operate_health_data_isValid;

    m_can_operate_local_post_isValid = ::OpenAPI::fromJsonValue(m_can_operate_local_post, json[QString("canOperateLocalPost")]);
    m_can_operate_local_post_isSet = !json[QString("canOperateLocalPost")].isNull() && m_can_operate_local_post_isValid;

    m_can_operate_lodging_data_isValid = ::OpenAPI::fromJsonValue(m_can_operate_lodging_data, json[QString("canOperateLodgingData")]);
    m_can_operate_lodging_data_isSet = !json[QString("canOperateLodgingData")].isNull() && m_can_operate_lodging_data_isValid;

    m_duplicate_location_isValid = ::OpenAPI::fromJsonValue(m_duplicate_location, json[QString("duplicateLocation")]);
    m_duplicate_location_isSet = !json[QString("duplicateLocation")].isNull() && m_duplicate_location_isValid;

    m_has_google_updated_isValid = ::OpenAPI::fromJsonValue(m_has_google_updated, json[QString("hasGoogleUpdated")]);
    m_has_google_updated_isSet = !json[QString("hasGoogleUpdated")].isNull() && m_has_google_updated_isValid;

    m_has_pending_edits_isValid = ::OpenAPI::fromJsonValue(m_has_pending_edits, json[QString("hasPendingEdits")]);
    m_has_pending_edits_isSet = !json[QString("hasPendingEdits")].isNull() && m_has_pending_edits_isValid;

    m_has_voice_of_merchant_isValid = ::OpenAPI::fromJsonValue(m_has_voice_of_merchant, json[QString("hasVoiceOfMerchant")]);
    m_has_voice_of_merchant_isSet = !json[QString("hasVoiceOfMerchant")].isNull() && m_has_voice_of_merchant_isValid;

    m_maps_uri_isValid = ::OpenAPI::fromJsonValue(m_maps_uri, json[QString("mapsUri")]);
    m_maps_uri_isSet = !json[QString("mapsUri")].isNull() && m_maps_uri_isValid;

    m_new_review_uri_isValid = ::OpenAPI::fromJsonValue(m_new_review_uri, json[QString("newReviewUri")]);
    m_new_review_uri_isSet = !json[QString("newReviewUri")].isNull() && m_new_review_uri_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_can_delete_isSet) {
        obj.insert(QString("canDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_have_business_calls_isSet) {
        obj.insert(QString("canHaveBusinessCalls"), ::OpenAPI::toJsonValue(m_can_have_business_calls));
    }
    if (m_can_have_food_menus_isSet) {
        obj.insert(QString("canHaveFoodMenus"), ::OpenAPI::toJsonValue(m_can_have_food_menus));
    }
    if (m_can_modify_service_list_isSet) {
        obj.insert(QString("canModifyServiceList"), ::OpenAPI::toJsonValue(m_can_modify_service_list));
    }
    if (m_can_operate_health_data_isSet) {
        obj.insert(QString("canOperateHealthData"), ::OpenAPI::toJsonValue(m_can_operate_health_data));
    }
    if (m_can_operate_local_post_isSet) {
        obj.insert(QString("canOperateLocalPost"), ::OpenAPI::toJsonValue(m_can_operate_local_post));
    }
    if (m_can_operate_lodging_data_isSet) {
        obj.insert(QString("canOperateLodgingData"), ::OpenAPI::toJsonValue(m_can_operate_lodging_data));
    }
    if (m_duplicate_location_isSet) {
        obj.insert(QString("duplicateLocation"), ::OpenAPI::toJsonValue(m_duplicate_location));
    }
    if (m_has_google_updated_isSet) {
        obj.insert(QString("hasGoogleUpdated"), ::OpenAPI::toJsonValue(m_has_google_updated));
    }
    if (m_has_pending_edits_isSet) {
        obj.insert(QString("hasPendingEdits"), ::OpenAPI::toJsonValue(m_has_pending_edits));
    }
    if (m_has_voice_of_merchant_isSet) {
        obj.insert(QString("hasVoiceOfMerchant"), ::OpenAPI::toJsonValue(m_has_voice_of_merchant));
    }
    if (m_maps_uri_isSet) {
        obj.insert(QString("mapsUri"), ::OpenAPI::toJsonValue(m_maps_uri));
    }
    if (m_new_review_uri_isSet) {
        obj.insert(QString("newReviewUri"), ::OpenAPI::toJsonValue(m_new_review_uri));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    return obj;
}

bool OAIMetadata::isCanDelete() const {
    return m_can_delete;
}
void OAIMetadata::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIMetadata::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIMetadata::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIMetadata::isCanHaveBusinessCalls() const {
    return m_can_have_business_calls;
}
void OAIMetadata::setCanHaveBusinessCalls(const bool &can_have_business_calls) {
    m_can_have_business_calls = can_have_business_calls;
    m_can_have_business_calls_isSet = true;
}

bool OAIMetadata::is_can_have_business_calls_Set() const{
    return m_can_have_business_calls_isSet;
}

bool OAIMetadata::is_can_have_business_calls_Valid() const{
    return m_can_have_business_calls_isValid;
}

bool OAIMetadata::isCanHaveFoodMenus() const {
    return m_can_have_food_menus;
}
void OAIMetadata::setCanHaveFoodMenus(const bool &can_have_food_menus) {
    m_can_have_food_menus = can_have_food_menus;
    m_can_have_food_menus_isSet = true;
}

bool OAIMetadata::is_can_have_food_menus_Set() const{
    return m_can_have_food_menus_isSet;
}

bool OAIMetadata::is_can_have_food_menus_Valid() const{
    return m_can_have_food_menus_isValid;
}

bool OAIMetadata::isCanModifyServiceList() const {
    return m_can_modify_service_list;
}
void OAIMetadata::setCanModifyServiceList(const bool &can_modify_service_list) {
    m_can_modify_service_list = can_modify_service_list;
    m_can_modify_service_list_isSet = true;
}

bool OAIMetadata::is_can_modify_service_list_Set() const{
    return m_can_modify_service_list_isSet;
}

bool OAIMetadata::is_can_modify_service_list_Valid() const{
    return m_can_modify_service_list_isValid;
}

bool OAIMetadata::isCanOperateHealthData() const {
    return m_can_operate_health_data;
}
void OAIMetadata::setCanOperateHealthData(const bool &can_operate_health_data) {
    m_can_operate_health_data = can_operate_health_data;
    m_can_operate_health_data_isSet = true;
}

bool OAIMetadata::is_can_operate_health_data_Set() const{
    return m_can_operate_health_data_isSet;
}

bool OAIMetadata::is_can_operate_health_data_Valid() const{
    return m_can_operate_health_data_isValid;
}

bool OAIMetadata::isCanOperateLocalPost() const {
    return m_can_operate_local_post;
}
void OAIMetadata::setCanOperateLocalPost(const bool &can_operate_local_post) {
    m_can_operate_local_post = can_operate_local_post;
    m_can_operate_local_post_isSet = true;
}

bool OAIMetadata::is_can_operate_local_post_Set() const{
    return m_can_operate_local_post_isSet;
}

bool OAIMetadata::is_can_operate_local_post_Valid() const{
    return m_can_operate_local_post_isValid;
}

bool OAIMetadata::isCanOperateLodgingData() const {
    return m_can_operate_lodging_data;
}
void OAIMetadata::setCanOperateLodgingData(const bool &can_operate_lodging_data) {
    m_can_operate_lodging_data = can_operate_lodging_data;
    m_can_operate_lodging_data_isSet = true;
}

bool OAIMetadata::is_can_operate_lodging_data_Set() const{
    return m_can_operate_lodging_data_isSet;
}

bool OAIMetadata::is_can_operate_lodging_data_Valid() const{
    return m_can_operate_lodging_data_isValid;
}

QString OAIMetadata::getDuplicateLocation() const {
    return m_duplicate_location;
}
void OAIMetadata::setDuplicateLocation(const QString &duplicate_location) {
    m_duplicate_location = duplicate_location;
    m_duplicate_location_isSet = true;
}

bool OAIMetadata::is_duplicate_location_Set() const{
    return m_duplicate_location_isSet;
}

bool OAIMetadata::is_duplicate_location_Valid() const{
    return m_duplicate_location_isValid;
}

bool OAIMetadata::isHasGoogleUpdated() const {
    return m_has_google_updated;
}
void OAIMetadata::setHasGoogleUpdated(const bool &has_google_updated) {
    m_has_google_updated = has_google_updated;
    m_has_google_updated_isSet = true;
}

bool OAIMetadata::is_has_google_updated_Set() const{
    return m_has_google_updated_isSet;
}

bool OAIMetadata::is_has_google_updated_Valid() const{
    return m_has_google_updated_isValid;
}

bool OAIMetadata::isHasPendingEdits() const {
    return m_has_pending_edits;
}
void OAIMetadata::setHasPendingEdits(const bool &has_pending_edits) {
    m_has_pending_edits = has_pending_edits;
    m_has_pending_edits_isSet = true;
}

bool OAIMetadata::is_has_pending_edits_Set() const{
    return m_has_pending_edits_isSet;
}

bool OAIMetadata::is_has_pending_edits_Valid() const{
    return m_has_pending_edits_isValid;
}

bool OAIMetadata::isHasVoiceOfMerchant() const {
    return m_has_voice_of_merchant;
}
void OAIMetadata::setHasVoiceOfMerchant(const bool &has_voice_of_merchant) {
    m_has_voice_of_merchant = has_voice_of_merchant;
    m_has_voice_of_merchant_isSet = true;
}

bool OAIMetadata::is_has_voice_of_merchant_Set() const{
    return m_has_voice_of_merchant_isSet;
}

bool OAIMetadata::is_has_voice_of_merchant_Valid() const{
    return m_has_voice_of_merchant_isValid;
}

QString OAIMetadata::getMapsUri() const {
    return m_maps_uri;
}
void OAIMetadata::setMapsUri(const QString &maps_uri) {
    m_maps_uri = maps_uri;
    m_maps_uri_isSet = true;
}

bool OAIMetadata::is_maps_uri_Set() const{
    return m_maps_uri_isSet;
}

bool OAIMetadata::is_maps_uri_Valid() const{
    return m_maps_uri_isValid;
}

QString OAIMetadata::getNewReviewUri() const {
    return m_new_review_uri;
}
void OAIMetadata::setNewReviewUri(const QString &new_review_uri) {
    m_new_review_uri = new_review_uri;
    m_new_review_uri_isSet = true;
}

bool OAIMetadata::is_new_review_uri_Set() const{
    return m_new_review_uri_isSet;
}

bool OAIMetadata::is_new_review_uri_Valid() const{
    return m_new_review_uri_isValid;
}

QString OAIMetadata::getPlaceId() const {
    return m_place_id;
}
void OAIMetadata::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIMetadata::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIMetadata::is_place_id_Valid() const{
    return m_place_id_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_have_business_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_have_food_menus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_service_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_operate_health_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_operate_local_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_operate_lodging_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_google_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pending_edits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_voice_of_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maps_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_review_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
