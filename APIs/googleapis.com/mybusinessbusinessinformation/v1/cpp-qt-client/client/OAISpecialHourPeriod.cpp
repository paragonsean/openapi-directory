/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpecialHourPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpecialHourPeriod::OAISpecialHourPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpecialHourPeriod::OAISpecialHourPeriod() {
    this->initializeModel();
}

OAISpecialHourPeriod::~OAISpecialHourPeriod() {}

void OAISpecialHourPeriod::initializeModel() {

    m_close_time_isSet = false;
    m_close_time_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_open_time_isSet = false;
    m_open_time_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAISpecialHourPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpecialHourPeriod::fromJsonObject(QJsonObject json) {

    m_close_time_isValid = ::OpenAPI::fromJsonValue(m_close_time, json[QString("closeTime")]);
    m_close_time_isSet = !json[QString("closeTime")].isNull() && m_close_time_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_open_time_isValid = ::OpenAPI::fromJsonValue(m_open_time, json[QString("openTime")]);
    m_open_time_isSet = !json[QString("openTime")].isNull() && m_open_time_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAISpecialHourPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpecialHourPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_close_time.isSet()) {
        obj.insert(QString("closeTime"), ::OpenAPI::toJsonValue(m_close_time));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_open_time.isSet()) {
        obj.insert(QString("openTime"), ::OpenAPI::toJsonValue(m_open_time));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAITimeOfDay OAISpecialHourPeriod::getCloseTime() const {
    return m_close_time;
}
void OAISpecialHourPeriod::setCloseTime(const OAITimeOfDay &close_time) {
    m_close_time = close_time;
    m_close_time_isSet = true;
}

bool OAISpecialHourPeriod::is_close_time_Set() const{
    return m_close_time_isSet;
}

bool OAISpecialHourPeriod::is_close_time_Valid() const{
    return m_close_time_isValid;
}

bool OAISpecialHourPeriod::isClosed() const {
    return m_closed;
}
void OAISpecialHourPeriod::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAISpecialHourPeriod::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAISpecialHourPeriod::is_closed_Valid() const{
    return m_closed_isValid;
}

OAIDate OAISpecialHourPeriod::getEndDate() const {
    return m_end_date;
}
void OAISpecialHourPeriod::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISpecialHourPeriod::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISpecialHourPeriod::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAITimeOfDay OAISpecialHourPeriod::getOpenTime() const {
    return m_open_time;
}
void OAISpecialHourPeriod::setOpenTime(const OAITimeOfDay &open_time) {
    m_open_time = open_time;
    m_open_time_isSet = true;
}

bool OAISpecialHourPeriod::is_open_time_Set() const{
    return m_open_time_isSet;
}

bool OAISpecialHourPeriod::is_open_time_Valid() const{
    return m_open_time_isValid;
}

OAIDate OAISpecialHourPeriod::getStartDate() const {
    return m_start_date;
}
void OAISpecialHourPeriod::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISpecialHourPeriod::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISpecialHourPeriod::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAISpecialHourPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpecialHourPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
