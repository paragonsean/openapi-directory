/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchGoogleLocationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchGoogleLocationsRequest::OAISearchGoogleLocationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchGoogleLocationsRequest::OAISearchGoogleLocationsRequest() {
    this->initializeModel();
}

OAISearchGoogleLocationsRequest::~OAISearchGoogleLocationsRequest() {}

void OAISearchGoogleLocationsRequest::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAISearchGoogleLocationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchGoogleLocationsRequest::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAISearchGoogleLocationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchGoogleLocationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAILocation OAISearchGoogleLocationsRequest::getLocation() const {
    return m_location;
}
void OAISearchGoogleLocationsRequest::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISearchGoogleLocationsRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAISearchGoogleLocationsRequest::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAISearchGoogleLocationsRequest::getPageSize() const {
    return m_page_size;
}
void OAISearchGoogleLocationsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchGoogleLocationsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchGoogleLocationsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISearchGoogleLocationsRequest::getQuery() const {
    return m_query;
}
void OAISearchGoogleLocationsRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchGoogleLocationsRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchGoogleLocationsRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAISearchGoogleLocationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchGoogleLocationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
