/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttribute::OAIAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttribute::OAIAttribute() {
    this->initializeModel();
}

OAIAttribute::~OAIAttribute() {}

void OAIAttribute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_repeated_enum_value_isSet = false;
    m_repeated_enum_value_isValid = false;

    m_uri_values_isSet = false;
    m_uri_values_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttribute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_repeated_enum_value_isValid = ::OpenAPI::fromJsonValue(m_repeated_enum_value, json[QString("repeatedEnumValue")]);
    m_repeated_enum_value_isSet = !json[QString("repeatedEnumValue")].isNull() && m_repeated_enum_value_isValid;

    m_uri_values_isValid = ::OpenAPI::fromJsonValue(m_uri_values, json[QString("uriValues")]);
    m_uri_values_isSet = !json[QString("uriValues")].isNull() && m_uri_values_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_repeated_enum_value.isSet()) {
        obj.insert(QString("repeatedEnumValue"), ::OpenAPI::toJsonValue(m_repeated_enum_value));
    }
    if (m_uri_values.size() > 0) {
        obj.insert(QString("uriValues"), ::OpenAPI::toJsonValue(m_uri_values));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIAttribute::getName() const {
    return m_name;
}
void OAIAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttribute::is_name_Valid() const{
    return m_name_isValid;
}

OAIRepeatedEnumAttributeValue OAIAttribute::getRepeatedEnumValue() const {
    return m_repeated_enum_value;
}
void OAIAttribute::setRepeatedEnumValue(const OAIRepeatedEnumAttributeValue &repeated_enum_value) {
    m_repeated_enum_value = repeated_enum_value;
    m_repeated_enum_value_isSet = true;
}

bool OAIAttribute::is_repeated_enum_value_Set() const{
    return m_repeated_enum_value_isSet;
}

bool OAIAttribute::is_repeated_enum_value_Valid() const{
    return m_repeated_enum_value_isValid;
}

QList<OAIUriAttributeValue> OAIAttribute::getUriValues() const {
    return m_uri_values;
}
void OAIAttribute::setUriValues(const QList<OAIUriAttributeValue> &uri_values) {
    m_uri_values = uri_values;
    m_uri_values_isSet = true;
}

bool OAIAttribute::is_uri_values_Set() const{
    return m_uri_values_isSet;
}

bool OAIAttribute::is_uri_values_Valid() const{
    return m_uri_values_isValid;
}

QString OAIAttribute::getValueType() const {
    return m_value_type;
}
void OAIAttribute::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIAttribute::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIAttribute::is_value_type_Valid() const{
    return m_value_type_isValid;
}

QList<QJsonValue> OAIAttribute::getValues() const {
    return m_values;
}
void OAIAttribute::setValues(const QList<QJsonValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIAttribute::is_values_Set() const{
    return m_values_isSet;
}

bool OAIAttribute::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeated_enum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
