/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoney.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoney::OAIMoney(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoney::OAIMoney() {
    this->initializeModel();
}

OAIMoney::~OAIMoney() {}

void OAIMoney::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_nanos_isSet = false;
    m_nanos_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIMoney::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoney::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_nanos_isValid = ::OpenAPI::fromJsonValue(m_nanos, json[QString("nanos")]);
    m_nanos_isSet = !json[QString("nanos")].isNull() && m_nanos_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIMoney::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoney::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_nanos_isSet) {
        obj.insert(QString("nanos"), ::OpenAPI::toJsonValue(m_nanos));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QString OAIMoney::getCurrencyCode() const {
    return m_currency_code;
}
void OAIMoney::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIMoney::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIMoney::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIMoney::getNanos() const {
    return m_nanos;
}
void OAIMoney::setNanos(const qint32 &nanos) {
    m_nanos = nanos;
    m_nanos_isSet = true;
}

bool OAIMoney::is_nanos_Set() const{
    return m_nanos_isSet;
}

bool OAIMoney::is_nanos_Valid() const{
    return m_nanos_isValid;
}

QString OAIMoney::getUnits() const {
    return m_units;
}
void OAIMoney::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIMoney::is_units_Set() const{
    return m_units_isSet;
}

bool OAIMoney::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIMoney::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoney::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
