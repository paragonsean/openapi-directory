/**
 * My Business Business Information API
 * The My Business Business Information API provides an interface for managing business information. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeMetadata::OAIAttributeMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeMetadata::OAIAttributeMetadata() {
    this->initializeModel();
}

OAIAttributeMetadata::~OAIAttributeMetadata() {}

void OAIAttributeMetadata::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_group_display_name_isSet = false;
    m_group_display_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_repeatable_isSet = false;
    m_repeatable_isValid = false;

    m_value_metadata_isSet = false;
    m_value_metadata_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAIAttributeMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeMetadata::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_group_display_name_isValid = ::OpenAPI::fromJsonValue(m_group_display_name, json[QString("groupDisplayName")]);
    m_group_display_name_isSet = !json[QString("groupDisplayName")].isNull() && m_group_display_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_repeatable_isValid = ::OpenAPI::fromJsonValue(m_repeatable, json[QString("repeatable")]);
    m_repeatable_isSet = !json[QString("repeatable")].isNull() && m_repeatable_isValid;

    m_value_metadata_isValid = ::OpenAPI::fromJsonValue(m_value_metadata, json[QString("valueMetadata")]);
    m_value_metadata_isSet = !json[QString("valueMetadata")].isNull() && m_value_metadata_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAIAttributeMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_group_display_name_isSet) {
        obj.insert(QString("groupDisplayName"), ::OpenAPI::toJsonValue(m_group_display_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_repeatable_isSet) {
        obj.insert(QString("repeatable"), ::OpenAPI::toJsonValue(m_repeatable));
    }
    if (m_value_metadata.size() > 0) {
        obj.insert(QString("valueMetadata"), ::OpenAPI::toJsonValue(m_value_metadata));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

bool OAIAttributeMetadata::isDeprecated() const {
    return m_deprecated;
}
void OAIAttributeMetadata::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIAttributeMetadata::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIAttributeMetadata::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIAttributeMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIAttributeMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAttributeMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAttributeMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAttributeMetadata::getGroupDisplayName() const {
    return m_group_display_name;
}
void OAIAttributeMetadata::setGroupDisplayName(const QString &group_display_name) {
    m_group_display_name = group_display_name;
    m_group_display_name_isSet = true;
}

bool OAIAttributeMetadata::is_group_display_name_Set() const{
    return m_group_display_name_isSet;
}

bool OAIAttributeMetadata::is_group_display_name_Valid() const{
    return m_group_display_name_isValid;
}

QString OAIAttributeMetadata::getParent() const {
    return m_parent;
}
void OAIAttributeMetadata::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAttributeMetadata::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAttributeMetadata::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIAttributeMetadata::isRepeatable() const {
    return m_repeatable;
}
void OAIAttributeMetadata::setRepeatable(const bool &repeatable) {
    m_repeatable = repeatable;
    m_repeatable_isSet = true;
}

bool OAIAttributeMetadata::is_repeatable_Set() const{
    return m_repeatable_isSet;
}

bool OAIAttributeMetadata::is_repeatable_Valid() const{
    return m_repeatable_isValid;
}

QList<OAIAttributeValueMetadata> OAIAttributeMetadata::getValueMetadata() const {
    return m_value_metadata;
}
void OAIAttributeMetadata::setValueMetadata(const QList<OAIAttributeValueMetadata> &value_metadata) {
    m_value_metadata = value_metadata;
    m_value_metadata_isSet = true;
}

bool OAIAttributeMetadata::is_value_metadata_Set() const{
    return m_value_metadata_isSet;
}

bool OAIAttributeMetadata::is_value_metadata_Valid() const{
    return m_value_metadata_isValid;
}

QString OAIAttributeMetadata::getValueType() const {
    return m_value_type;
}
void OAIAttributeMetadata::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIAttributeMetadata::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIAttributeMetadata::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAIAttributeMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeatable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
